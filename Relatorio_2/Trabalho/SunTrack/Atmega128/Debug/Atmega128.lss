
Atmega128.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000118  00800100  00003c48  00003cdc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003c48  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002c2  00800218  00800218  00003df4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003df4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003e24  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000006d0  00000000  00000000  00003e60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008325  00000000  00000000  00004530  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001e03  00000000  00000000  0000c855  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000045d3  00000000  00000000  0000e658  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001414  00000000  00000000  00012c2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000016d8  00000000  00000000  00014040  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000069fe  00000000  00000000  00015718  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000620  00000000  00000000  0001c116  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	67 c0       	rjmp	.+206    	; 0xd0 <__ctors_end>
       2:	00 00       	nop
       4:	84 c0       	rjmp	.+264    	; 0x10e <__bad_interrupt>
       6:	00 00       	nop
       8:	82 c0       	rjmp	.+260    	; 0x10e <__bad_interrupt>
       a:	00 00       	nop
       c:	80 c0       	rjmp	.+256    	; 0x10e <__bad_interrupt>
       e:	00 00       	nop
      10:	7e c0       	rjmp	.+252    	; 0x10e <__bad_interrupt>
      12:	00 00       	nop
      14:	7c c0       	rjmp	.+248    	; 0x10e <__bad_interrupt>
      16:	00 00       	nop
      18:	7a c0       	rjmp	.+244    	; 0x10e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	78 c0       	rjmp	.+240    	; 0x10e <__bad_interrupt>
      1e:	00 00       	nop
      20:	76 c0       	rjmp	.+236    	; 0x10e <__bad_interrupt>
      22:	00 00       	nop
      24:	74 c0       	rjmp	.+232    	; 0x10e <__bad_interrupt>
      26:	00 00       	nop
      28:	ee c4       	rjmp	.+2524   	; 0xa06 <__vector_10>
      2a:	00 00       	nop
      2c:	ba c4       	rjmp	.+2420   	; 0x9a2 <__vector_11>
      2e:	00 00       	nop
      30:	c2 c4       	rjmp	.+2436   	; 0x9b6 <__vector_12>
      32:	00 00       	nop
      34:	ca c4       	rjmp	.+2452   	; 0x9ca <__vector_13>
      36:	00 00       	nop
      38:	dc c4       	rjmp	.+2488   	; 0x9f2 <__vector_14>
      3a:	00 00       	nop
      3c:	0c 94 72 1c 	jmp	0x38e4	; 0x38e4 <__vector_15>
      40:	a6 c4       	rjmp	.+2380   	; 0x98e <__vector_16>
      42:	00 00       	nop
      44:	64 c0       	rjmp	.+200    	; 0x10e <__bad_interrupt>
      46:	00 00       	nop
      48:	69 c5       	rjmp	.+2770   	; 0xb1c <__vector_18>
      4a:	00 00       	nop
      4c:	9d c5       	rjmp	.+2874   	; 0xb88 <__vector_19>
      4e:	00 00       	nop
      50:	5e c0       	rjmp	.+188    	; 0x10e <__bad_interrupt>
      52:	00 00       	nop
      54:	da c1       	rjmp	.+948    	; 0x40a <__vector_21>
      56:	00 00       	nop
      58:	5a c0       	rjmp	.+180    	; 0x10e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	58 c0       	rjmp	.+176    	; 0x10e <__bad_interrupt>
      5e:	00 00       	nop
      60:	be c4       	rjmp	.+2428   	; 0x9de <__vector_24>
      62:	00 00       	nop
      64:	da c4       	rjmp	.+2484   	; 0xa1a <__vector_25>
      66:	00 00       	nop
      68:	e2 c4       	rjmp	.+2500   	; 0xa2e <__vector_26>
      6a:	00 00       	nop
      6c:	ea c4       	rjmp	.+2516   	; 0xa42 <__vector_27>
      6e:	00 00       	nop
      70:	f2 c4       	rjmp	.+2532   	; 0xa56 <__vector_28>
      72:	00 00       	nop
      74:	fa c4       	rjmp	.+2548   	; 0xa6a <__vector_29>
      76:	00 00       	nop
      78:	dd c6       	rjmp	.+3514   	; 0xe34 <__vector_30>
      7a:	00 00       	nop
      7c:	14 c7       	rjmp	.+3624   	; 0xea6 <__vector_31>
      7e:	00 00       	nop
      80:	46 c0       	rjmp	.+140    	; 0x10e <__bad_interrupt>
      82:	00 00       	nop
      84:	44 c0       	rjmp	.+136    	; 0x10e <__bad_interrupt>
      86:	00 00       	nop
      88:	42 c0       	rjmp	.+132    	; 0x10e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e8 03       	fmulsu	r22, r16
      8e:	ec 03       	fmulsu	r22, r20
      90:	f0 03       	fmuls	r23, r16
      92:	f4 03       	fmuls	r23, r20
      94:	f8 03       	fmulsu	r23, r16
      96:	ff 03       	fmulsu	r23, r23
      98:	06 04       	cpc	r0, r6
      9a:	0d 04       	cpc	r0, r13
      9c:	11 04       	cpc	r1, r1
      9e:	18 04       	cpc	r1, r8
      a0:	1f 04       	cpc	r1, r15
      a2:	26 04       	cpc	r2, r6
      a4:	2a 04       	cpc	r2, r10
      a6:	31 04       	cpc	r3, r1
      a8:	38 04       	cpc	r3, r8
      aa:	54 04       	cpc	r5, r4
      ac:	58 04       	cpc	r5, r8
      ae:	5c 04       	cpc	r5, r12
      b0:	60 04       	cpc	r6, r0
      b2:	66 04       	cpc	r6, r6
      b4:	6a 04       	cpc	r6, r10
      b6:	6e 04       	cpc	r6, r14
      b8:	72 04       	cpc	r7, r2
      ba:	7b 04       	cpc	r7, r11
      bc:	7f 04       	cpc	r7, r15
      be:	83 04       	cpc	r8, r3
      c0:	8c 04       	cpc	r8, r12
      c2:	11 19       	sub	r17, r1
      c4:	26 1a       	sub	r2, r22
      c6:	7f 1a       	sub	r7, r31
      c8:	d8 1a       	sub	r13, r24
      ca:	31 1b       	sub	r19, r17
      cc:	8a 1b       	sub	r24, r26
      ce:	e3 1b       	sub	r30, r19

000000d0 <__ctors_end>:
      d0:	11 24       	eor	r1, r1
      d2:	1f be       	out	0x3f, r1	; 63
      d4:	cf ef       	ldi	r28, 0xFF	; 255
      d6:	d0 e1       	ldi	r29, 0x10	; 16
      d8:	de bf       	out	0x3e, r29	; 62
      da:	cd bf       	out	0x3d, r28	; 61

000000dc <__do_copy_data>:
      dc:	12 e0       	ldi	r17, 0x02	; 2
      de:	a0 e0       	ldi	r26, 0x00	; 0
      e0:	b1 e0       	ldi	r27, 0x01	; 1
      e2:	e8 e4       	ldi	r30, 0x48	; 72
      e4:	fc e3       	ldi	r31, 0x3C	; 60
      e6:	00 e0       	ldi	r16, 0x00	; 0
      e8:	0b bf       	out	0x3b, r16	; 59
      ea:	02 c0       	rjmp	.+4      	; 0xf0 <__do_copy_data+0x14>
      ec:	07 90       	elpm	r0, Z+
      ee:	0d 92       	st	X+, r0
      f0:	a8 31       	cpi	r26, 0x18	; 24
      f2:	b1 07       	cpc	r27, r17
      f4:	d9 f7       	brne	.-10     	; 0xec <__do_copy_data+0x10>

000000f6 <__do_clear_bss>:
      f6:	24 e0       	ldi	r18, 0x04	; 4
      f8:	a8 e1       	ldi	r26, 0x18	; 24
      fa:	b2 e0       	ldi	r27, 0x02	; 2
      fc:	01 c0       	rjmp	.+2      	; 0x100 <.do_clear_bss_start>

000000fe <.do_clear_bss_loop>:
      fe:	1d 92       	st	X+, r1

00000100 <.do_clear_bss_start>:
     100:	aa 3d       	cpi	r26, 0xDA	; 218
     102:	b2 07       	cpc	r27, r18
     104:	e1 f7       	brne	.-8      	; 0xfe <.do_clear_bss_loop>
     106:	0e 94 ee 13 	call	0x27dc	; 0x27dc <main>
     10a:	0c 94 22 1e 	jmp	0x3c44	; 0x3c44 <_exit>

0000010e <__bad_interrupt>:
     10e:	78 cf       	rjmp	.-272    	; 0x0 <__vectors>

00000110 <HC595_shift_bit>:
	//
	return hc595;
}
void HC595_shift_bit(uint8_t bool)
{
	if (bool)
     110:	88 23       	and	r24, r24
     112:	89 f0       	breq	.+34     	; 0x136 <HC595_shift_bit+0x26>
		*hc595_PORT |= (1<<HC595_datapin); //Data bit HIGH
     114:	e0 91 4a 02 	lds	r30, 0x024A	; 0x80024a <hc595_PORT>
     118:	f0 91 4b 02 	lds	r31, 0x024B	; 0x80024b <hc595_PORT+0x1>
     11c:	20 81       	ld	r18, Z
     11e:	81 e0       	ldi	r24, 0x01	; 1
     120:	90 e0       	ldi	r25, 0x00	; 0
     122:	00 90 4c 02 	lds	r0, 0x024C	; 0x80024c <HC595_datapin>
     126:	02 c0       	rjmp	.+4      	; 0x12c <HC595_shift_bit+0x1c>
     128:	88 0f       	add	r24, r24
     12a:	99 1f       	adc	r25, r25
     12c:	0a 94       	dec	r0
     12e:	e2 f7       	brpl	.-8      	; 0x128 <HC595_shift_bit+0x18>
     130:	82 2b       	or	r24, r18
     132:	80 83       	st	Z, r24
     134:	11 c0       	rjmp	.+34     	; 0x158 <HC595_shift_bit+0x48>
	else
		*hc595_PORT &= ~(1<<HC595_datapin); //Data bit LOW
     136:	e0 91 4a 02 	lds	r30, 0x024A	; 0x80024a <hc595_PORT>
     13a:	f0 91 4b 02 	lds	r31, 0x024B	; 0x80024b <hc595_PORT+0x1>
     13e:	20 81       	ld	r18, Z
     140:	81 e0       	ldi	r24, 0x01	; 1
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	00 90 4c 02 	lds	r0, 0x024C	; 0x80024c <HC595_datapin>
     148:	02 c0       	rjmp	.+4      	; 0x14e <HC595_shift_bit+0x3e>
     14a:	88 0f       	add	r24, r24
     14c:	99 1f       	adc	r25, r25
     14e:	0a 94       	dec	r0
     150:	e2 f7       	brpl	.-8      	; 0x14a <HC595_shift_bit+0x3a>
     152:	80 95       	com	r24
     154:	82 23       	and	r24, r18
     156:	80 83       	st	Z, r24
	*hc595_PORT |= (1<<HC595_clkpin); // Shift bit
     158:	e0 91 4a 02 	lds	r30, 0x024A	; 0x80024a <hc595_PORT>
     15c:	f0 91 4b 02 	lds	r31, 0x024B	; 0x80024b <hc595_PORT+0x1>
     160:	40 81       	ld	r20, Z
     162:	81 e0       	ldi	r24, 0x01	; 1
     164:	90 e0       	ldi	r25, 0x00	; 0
     166:	9c 01       	movw	r18, r24
     168:	00 90 4e 02 	lds	r0, 0x024E	; 0x80024e <HC595_clkpin>
     16c:	02 c0       	rjmp	.+4      	; 0x172 <HC595_shift_bit+0x62>
     16e:	22 0f       	add	r18, r18
     170:	33 1f       	adc	r19, r19
     172:	0a 94       	dec	r0
     174:	e2 f7       	brpl	.-8      	; 0x16e <HC595_shift_bit+0x5e>
     176:	24 2b       	or	r18, r20
     178:	20 83       	st	Z, r18
	*hc595_PORT &= ~(1<<HC595_clkpin); //Shift disable
     17a:	e0 91 4a 02 	lds	r30, 0x024A	; 0x80024a <hc595_PORT>
     17e:	f0 91 4b 02 	lds	r31, 0x024B	; 0x80024b <hc595_PORT+0x1>
     182:	20 81       	ld	r18, Z
     184:	00 90 4e 02 	lds	r0, 0x024E	; 0x80024e <HC595_clkpin>
     188:	02 c0       	rjmp	.+4      	; 0x18e <HC595_shift_bit+0x7e>
     18a:	88 0f       	add	r24, r24
     18c:	99 1f       	adc	r25, r25
     18e:	0a 94       	dec	r0
     190:	e2 f7       	brpl	.-8      	; 0x18a <HC595_shift_bit+0x7a>
     192:	80 95       	com	r24
     194:	82 23       	and	r24, r18
     196:	80 83       	st	Z, r24
     198:	08 95       	ret

0000019a <HC595_shift_out>:
		HC595_shift_bit(byte & (1<<i));
	HC595_shift_out();
}
void HC595_shift_out(void)
{
	*hc595_PORT |= (1<<HC595_outpin); //Output enable
     19a:	e0 91 4a 02 	lds	r30, 0x024A	; 0x80024a <hc595_PORT>
     19e:	f0 91 4b 02 	lds	r31, 0x024B	; 0x80024b <hc595_PORT+0x1>
     1a2:	40 81       	ld	r20, Z
     1a4:	81 e0       	ldi	r24, 0x01	; 1
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	9c 01       	movw	r18, r24
     1aa:	00 90 4d 02 	lds	r0, 0x024D	; 0x80024d <HC595_outpin>
     1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <HC595_shift_out+0x1a>
     1b0:	22 0f       	add	r18, r18
     1b2:	33 1f       	adc	r19, r19
     1b4:	0a 94       	dec	r0
     1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <HC595_shift_out+0x16>
     1b8:	24 2b       	or	r18, r20
     1ba:	20 83       	st	Z, r18
	*hc595_PORT &= ~(1<<HC595_outpin); //Output disable
     1bc:	e0 91 4a 02 	lds	r30, 0x024A	; 0x80024a <hc595_PORT>
     1c0:	f0 91 4b 02 	lds	r31, 0x024B	; 0x80024b <hc595_PORT+0x1>
     1c4:	20 81       	ld	r18, Z
     1c6:	00 90 4d 02 	lds	r0, 0x024D	; 0x80024d <HC595_outpin>
     1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <HC595_shift_out+0x36>
     1cc:	88 0f       	add	r24, r24
     1ce:	99 1f       	adc	r25, r25
     1d0:	0a 94       	dec	r0
     1d2:	e2 f7       	brpl	.-8      	; 0x1cc <HC595_shift_out+0x32>
     1d4:	80 95       	com	r24
     1d6:	82 23       	and	r24, r18
     1d8:	80 83       	st	Z, r24
     1da:	08 95       	ret

000001dc <HC595_shift_byte>:
		*hc595_PORT &= ~(1<<HC595_datapin); //Data bit LOW
	*hc595_PORT |= (1<<HC595_clkpin); // Shift bit
	*hc595_PORT &= ~(1<<HC595_clkpin); //Shift disable
}
void HC595_shift_byte(uint8_t byte)
{
     1dc:	ff 92       	push	r15
     1de:	0f 93       	push	r16
     1e0:	1f 93       	push	r17
     1e2:	cf 93       	push	r28
     1e4:	df 93       	push	r29
     1e6:	f8 2e       	mov	r15, r24
     1e8:	c0 e0       	ldi	r28, 0x00	; 0
     1ea:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t i;
	for(i=0;i<8;i++)
		HC595_shift_bit(byte & (1<<i));
     1ec:	01 e0       	ldi	r16, 0x01	; 1
     1ee:	10 e0       	ldi	r17, 0x00	; 0
     1f0:	c8 01       	movw	r24, r16
     1f2:	0c 2e       	mov	r0, r28
     1f4:	02 c0       	rjmp	.+4      	; 0x1fa <HC595_shift_byte+0x1e>
     1f6:	88 0f       	add	r24, r24
     1f8:	99 1f       	adc	r25, r25
     1fa:	0a 94       	dec	r0
     1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <HC595_shift_byte+0x1a>
     1fe:	8f 21       	and	r24, r15
     200:	87 df       	rcall	.-242    	; 0x110 <HC595_shift_bit>
     202:	21 96       	adiw	r28, 0x01	; 1
	*hc595_PORT &= ~(1<<HC595_clkpin); //Shift disable
}
void HC595_shift_byte(uint8_t byte)
{
	uint8_t i;
	for(i=0;i<8;i++)
     204:	c8 30       	cpi	r28, 0x08	; 8
     206:	d1 05       	cpc	r29, r1
		HC595_shift_bit(byte & (1<<i));
	HC595_shift_out();
     208:	99 f7       	brne	.-26     	; 0x1f0 <HC595_shift_byte+0x14>
     20a:	c7 df       	rcall	.-114    	; 0x19a <HC595_shift_out>
}
     20c:	df 91       	pop	r29
     20e:	cf 91       	pop	r28
     210:	1f 91       	pop	r17
     212:	0f 91       	pop	r16
     214:	ff 90       	pop	r15
     216:	08 95       	ret

00000218 <HC595enable>:
void HC595_shift_out(void);
/*
** procedure and function
*/
HC595 HC595enable(volatile uint8_t *ddr, volatile uint8_t *port, uint8_t datapin, uint8_t clkpin, uint8_t outpin)
{
     218:	0f 93       	push	r16
     21a:	cf 93       	push	r28
     21c:	df 93       	push	r29
     21e:	00 d0       	rcall	.+0      	; 0x220 <HC595enable+0x8>
     220:	00 d0       	rcall	.+0      	; 0x222 <HC595enable+0xa>
     222:	00 d0       	rcall	.+0      	; 0x224 <HC595enable+0xc>
     224:	cd b7       	in	r28, 0x3d	; 61
     226:	de b7       	in	r29, 0x3e	; 62
	//LOCAL VARIABLES
	uint8_t tSREG;
	tSREG=SREG;
     228:	5f b7       	in	r21, 0x3f	; 63
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
     22a:	3f b7       	in	r19, 0x3f	; 63
     22c:	3f 77       	andi	r19, 0x7F	; 127
     22e:	3f bf       	out	0x3f, r19	; 63
	//ALLOCAÇÂO MEMORIA PARA Estrutura
	HC595 hc595;
	//import parametros
	hc595_DDR=ddr;
     230:	90 93 49 02 	sts	0x0249, r25	; 0x800249 <hc595_DDR+0x1>
     234:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <hc595_DDR>
	hc595_PORT=port;
     238:	70 93 4b 02 	sts	0x024B, r23	; 0x80024b <hc595_PORT+0x1>
     23c:	60 93 4a 02 	sts	0x024A, r22	; 0x80024a <hc595_PORT>
	HC595_datapin=datapin; 
     240:	40 93 4c 02 	sts	0x024C, r20	; 0x80024c <HC595_datapin>
	HC595_clkpin=clkpin; 
     244:	20 93 4e 02 	sts	0x024E, r18	; 0x80024e <HC595_clkpin>
	HC595_outpin=outpin;
     248:	00 93 4d 02 	sts	0x024D, r16	; 0x80024d <HC595_outpin>
	//inic variables
    *hc595_DDR |= (1<<datapin) | (1<<clkpin) | (1<<outpin);
     24c:	fc 01       	movw	r30, r24
     24e:	30 81       	ld	r19, Z
     250:	61 e0       	ldi	r22, 0x01	; 1
     252:	70 e0       	ldi	r23, 0x00	; 0
     254:	db 01       	movw	r26, r22
     256:	02 c0       	rjmp	.+4      	; 0x25c <HC595enable+0x44>
     258:	aa 0f       	add	r26, r26
     25a:	bb 1f       	adc	r27, r27
     25c:	2a 95       	dec	r18
     25e:	e2 f7       	brpl	.-8      	; 0x258 <HC595enable+0x40>
     260:	fb 01       	movw	r30, r22
     262:	02 c0       	rjmp	.+4      	; 0x268 <HC595enable+0x50>
     264:	ee 0f       	add	r30, r30
     266:	ff 1f       	adc	r31, r31
     268:	0a 95       	dec	r16
     26a:	e2 f7       	brpl	.-8      	; 0x264 <HC595enable+0x4c>
     26c:	ea 2b       	or	r30, r26
     26e:	02 c0       	rjmp	.+4      	; 0x274 <HC595enable+0x5c>
     270:	66 0f       	add	r22, r22
     272:	77 1f       	adc	r23, r23
     274:	4a 95       	dec	r20
     276:	e2 f7       	brpl	.-8      	; 0x270 <HC595enable+0x58>
     278:	6e 2b       	or	r22, r30
     27a:	23 2f       	mov	r18, r19
     27c:	26 2b       	or	r18, r22
     27e:	fc 01       	movw	r30, r24
     280:	20 83       	st	Z, r18
	*hc595_PORT &= ~((1<<datapin) | (1<<clkpin) | (1<<outpin));
     282:	e0 91 4a 02 	lds	r30, 0x024A	; 0x80024a <hc595_PORT>
     286:	f0 91 4b 02 	lds	r31, 0x024B	; 0x80024b <hc595_PORT+0x1>
     28a:	80 81       	ld	r24, Z
     28c:	60 95       	com	r22
     28e:	68 23       	and	r22, r24
     290:	60 83       	st	Z, r22
	//Direccionar apontadores para PROTOTIPOS
	hc595.bit=HC595_shift_bit;
	hc595.byte=HC595_shift_byte;
	hc595.out=HC595_shift_out;
	SREG=tSREG;
     292:	5f bf       	out	0x3f, r21	; 63
	//
	return hc595;
     294:	28 e8       	ldi	r18, 0x88	; 136
     296:	30 e0       	ldi	r19, 0x00	; 0
     298:	3a 83       	std	Y+2, r19	; 0x02
     29a:	29 83       	std	Y+1, r18	; 0x01
     29c:	4e ee       	ldi	r20, 0xEE	; 238
     29e:	50 e0       	ldi	r21, 0x00	; 0
     2a0:	5c 83       	std	Y+4, r21	; 0x04
     2a2:	4b 83       	std	Y+3, r20	; 0x03
     2a4:	6d ec       	ldi	r22, 0xCD	; 205
     2a6:	70 e0       	ldi	r23, 0x00	; 0
     2a8:	7e 83       	std	Y+6, r23	; 0x06
     2aa:	6d 83       	std	Y+5, r22	; 0x05
     2ac:	3a 81       	ldd	r19, Y+2	; 0x02
     2ae:	5c 81       	ldd	r21, Y+4	; 0x04
     2b0:	7e 81       	ldd	r23, Y+6	; 0x06
}
     2b2:	80 e0       	ldi	r24, 0x00	; 0
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	26 96       	adiw	r28, 0x06	; 6
     2b8:	0f b6       	in	r0, 0x3f	; 63
     2ba:	f8 94       	cli
     2bc:	de bf       	out	0x3e, r29	; 62
     2be:	0f be       	out	0x3f, r0	; 63
     2c0:	cd bf       	out	0x3d, r28	; 61
     2c2:	df 91       	pop	r29
     2c4:	cf 91       	pop	r28
     2c6:	0f 91       	pop	r16
     2c8:	08 95       	ret

000002ca <ANALOG_read>:
* Returns selected Channel ADC_VALUE
*/
{
	uint8_t ADSC_FLAG;
	ADSC_FLAG=(1<<ADSC);
	if( !(ADC_CONTROL & ADSC_FLAG) ){
     2ca:	36 9b       	sbis	0x06, 6	; 6
		//ADC_SELECT
		/***/
		ADC_CONTROL|=(1<<ADSC);
     2cc:	36 9a       	sbi	0x06, 6	; 6
	}	
	return ADC_VALUE[selection];
     2ce:	fc 01       	movw	r30, r24
     2d0:	ee 0f       	add	r30, r30
     2d2:	ff 1f       	adc	r31, r31
     2d4:	ef 5c       	subi	r30, 0xCF	; 207
     2d6:	fd 4f       	sbci	r31, 0xFD	; 253
     2d8:	80 81       	ld	r24, Z
     2da:	91 81       	ldd	r25, Z+1	; 0x01
}
     2dc:	08 95       	ret

000002de <ANALOGenable>:
ANALOG ANALOGenable( uint8_t Vreff, uint8_t Divfactor, int n_channel, ... )
/*
* Interrupt running mode setup
* setup, and list of channels to be probed
*/
{
     2de:	0f 93       	push	r16
     2e0:	1f 93       	push	r17
     2e2:	cf 93       	push	r28
     2e4:	df 93       	push	r29
     2e6:	cd b7       	in	r28, 0x3d	; 61
     2e8:	de b7       	in	r29, 0x3e	; 62
     2ea:	9f 81       	ldd	r25, Y+7	; 0x07
     2ec:	68 85       	ldd	r22, Y+8	; 0x08
     2ee:	49 85       	ldd	r20, Y+9	; 0x09
     2f0:	5a 85       	ldd	r21, Y+10	; 0x0a
	/***LOCAL VARIABLES***/
	uint8_t tSREG;
	va_list list;
	int i;
	//inic variables
	tSREG=STATUS_REGISTER;
     2f2:	1f b7       	in	r17, 0x3f	; 63
	STATUS_REGISTER&=~(1<<GLOBAL_INTERRUPT_ENABLE);
     2f4:	8f b7       	in	r24, 0x3f	; 63
     2f6:	8f 77       	andi	r24, 0x7F	; 127
     2f8:	8f bf       	out	0x3f, r24	; 63
	/***GLOBAL VARIABLES INICIALIZE***/
	ADC_N_CHANNEL=n_channel;
     2fa:	50 93 20 02 	sts	0x0220, r21	; 0x800220 <ADC_N_CHANNEL+0x1>
     2fe:	40 93 1f 02 	sts	0x021F, r20	; 0x80021f <ADC_N_CHANNEL>
	ADC_SELECTOR=0;
     302:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <ADC_SELECTOR+0x1>
     306:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <ADC_SELECTOR>
	adc_n_sample=0;
     30a:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <__data_end>
	//import parametros
	//inic parameters
	//Direccionar apontadores para PROTOTIPOS
	analog.read=ANALOG_read;
		/******/
		ADC_SELECT&=~(3<<REFS0);
     30e:	87 b1       	in	r24, 0x07	; 7
     310:	8f 73       	andi	r24, 0x3F	; 63
     312:	87 b9       	out	0x07, r24	; 7
		switch( Vreff ){
     314:	91 30       	cpi	r25, 0x01	; 1
     316:	19 f0       	breq	.+6      	; 0x31e <ANALOGenable+0x40>
     318:	93 30       	cpi	r25, 0x03	; 3
     31a:	21 f0       	breq	.+8      	; 0x324 <ANALOGenable+0x46>
     31c:	08 c0       	rjmp	.+16     	; 0x32e <ANALOGenable+0x50>
			case 0:
				analog.VREFF=0;
				break;
			case 1:
				ADC_SELECT|=(1<<REFS0);
     31e:	3e 9a       	sbi	0x07, 6	; 7
				analog.VREFF=1;
     320:	01 e0       	ldi	r16, 0x01	; 1
				break;
     322:	06 c0       	rjmp	.+12     	; 0x330 <ANALOGenable+0x52>
			case 3:
				ADC_SELECT|=(3<<REFS0);
     324:	87 b1       	in	r24, 0x07	; 7
     326:	80 6c       	ori	r24, 0xC0	; 192
     328:	87 b9       	out	0x07, r24	; 7
				analog.VREFF=3;
     32a:	03 e0       	ldi	r16, 0x03	; 3
				break;
     32c:	01 c0       	rjmp	.+2      	; 0x330 <ANALOGenable+0x52>
	analog.read=ANALOG_read;
		/******/
		ADC_SELECT&=~(3<<REFS0);
		switch( Vreff ){
			case 0:
				analog.VREFF=0;
     32e:	00 e0       	ldi	r16, 0x00	; 0
			default:
				analog.VREFF=0;
				break;
		}
		//
		ADC_SELECT&=~(1<<ADLAR);
     330:	3d 98       	cbi	0x07, 5	; 7
		/******/
		va_start(list, n_channel);
		for(i=0;i<n_channel;i++){
     332:	14 16       	cp	r1, r20
     334:	15 06       	cpc	r1, r21
     336:	8c f4       	brge	.+34     	; 0x35a <ANALOGenable+0x7c>
     338:	de 01       	movw	r26, r28
     33a:	1b 96       	adiw	r26, 0x0b	; 11
     33c:	80 e0       	ldi	r24, 0x00	; 0
     33e:	90 e0       	ldi	r25, 0x00	; 0
			ADC_CHANNEL_GAIN[i] = va_arg(list, int);
     340:	2d 91       	ld	r18, X+
     342:	3d 91       	ld	r19, X+
     344:	fc 01       	movw	r30, r24
     346:	ee 0f       	add	r30, r30
     348:	ff 1f       	adc	r31, r31
     34a:	ef 5d       	subi	r30, 0xDF	; 223
     34c:	fd 4f       	sbci	r31, 0xFD	; 253
     34e:	31 83       	std	Z+1, r19	; 0x01
     350:	20 83       	st	Z, r18
		}
		//
		ADC_SELECT&=~(1<<ADLAR);
		/******/
		va_start(list, n_channel);
		for(i=0;i<n_channel;i++){
     352:	01 96       	adiw	r24, 0x01	; 1
     354:	48 17       	cp	r20, r24
     356:	59 07       	cpc	r21, r25
     358:	99 f7       	brne	.-26     	; 0x340 <ANALOGenable+0x62>
			ADC_CHANNEL_GAIN[i] = va_arg(list, int);
		}
		va_end(list);
		ADC_SELECT&=~MUX_MASK;
     35a:	87 b1       	in	r24, 0x07	; 7
     35c:	80 7e       	andi	r24, 0xE0	; 224
     35e:	87 b9       	out	0x07, r24	; 7
		ADC_SELECT|=(MUX_MASK & ADC_CHANNEL_GAIN[ADC_SELECTOR]);
     360:	e0 91 1d 02 	lds	r30, 0x021D	; 0x80021d <ADC_SELECTOR>
     364:	f0 91 1e 02 	lds	r31, 0x021E	; 0x80021e <ADC_SELECTOR+0x1>
     368:	ee 0f       	add	r30, r30
     36a:	ff 1f       	adc	r31, r31
     36c:	ef 5d       	subi	r30, 0xDF	; 223
     36e:	fd 4f       	sbci	r31, 0xFD	; 253
     370:	80 81       	ld	r24, Z
     372:	91 81       	ldd	r25, Z+1	; 0x01
     374:	27 b1       	in	r18, 0x07	; 7
     376:	8f 71       	andi	r24, 0x1F	; 31
     378:	99 27       	eor	r25, r25
     37a:	82 2b       	or	r24, r18
     37c:	87 b9       	out	0x07, r24	; 7
		/******/
		ADC_CONTROL|=(1<<ADEN);
     37e:	37 9a       	sbi	0x06, 7	; 6
		ADC_CONTROL|=(1<<ADSC);
     380:	36 9a       	sbi	0x06, 6	; 6
		ADC_CONTROL&=~(1<<ADFR);
     382:	35 98       	cbi	0x06, 5	; 6
		ADC_CONTROL|=(1<<ADIE);
     384:	33 9a       	sbi	0x06, 3	; 6
		/******/
		ADC_CONTROL&=~(7<<ADPS0);
     386:	86 b1       	in	r24, 0x06	; 6
     388:	88 7f       	andi	r24, 0xF8	; 248
     38a:	86 b9       	out	0x06, r24	; 6
		switch( Divfactor ){
     38c:	60 31       	cpi	r22, 0x10	; 16
     38e:	d1 f0       	breq	.+52     	; 0x3c4 <ANALOGenable+0xe6>
     390:	38 f4       	brcc	.+14     	; 0x3a0 <ANALOGenable+0xc2>
     392:	64 30       	cpi	r22, 0x04	; 4
     394:	79 f0       	breq	.+30     	; 0x3b4 <ANALOGenable+0xd6>
     396:	68 30       	cpi	r22, 0x08	; 8
     398:	81 f0       	breq	.+32     	; 0x3ba <ANALOGenable+0xdc>
     39a:	62 30       	cpi	r22, 0x02	; 2
     39c:	29 f5       	brne	.+74     	; 0x3e8 <ANALOGenable+0x10a>
     39e:	07 c0       	rjmp	.+14     	; 0x3ae <ANALOGenable+0xd0>
     3a0:	60 34       	cpi	r22, 0x40	; 64
     3a2:	c1 f0       	breq	.+48     	; 0x3d4 <ANALOGenable+0xf6>
     3a4:	60 38       	cpi	r22, 0x80	; 128
     3a6:	d9 f0       	breq	.+54     	; 0x3de <ANALOGenable+0x100>
     3a8:	60 32       	cpi	r22, 0x20	; 32
     3aa:	f1 f4       	brne	.+60     	; 0x3e8 <ANALOGenable+0x10a>
     3ac:	0e c0       	rjmp	.+28     	; 0x3ca <ANALOGenable+0xec>
			case 2://1
				ADC_CONTROL|=(1<<ADPS0);
     3ae:	30 9a       	sbi	0x06, 0	; 6
				analog.DIVISION_FACTOR=2;
     3b0:	22 e0       	ldi	r18, 0x02	; 2
				break;
     3b2:	1e c0       	rjmp	.+60     	; 0x3f0 <ANALOGenable+0x112>
			case 4://2
				ADC_CONTROL|=(1<<ADPS1);
     3b4:	31 9a       	sbi	0x06, 1	; 6
				analog.DIVISION_FACTOR=4;
     3b6:	24 e0       	ldi	r18, 0x04	; 4
				break;
     3b8:	1b c0       	rjmp	.+54     	; 0x3f0 <ANALOGenable+0x112>
			case 8://3
				ADC_CONTROL|=(3<<ADPS0);
     3ba:	86 b1       	in	r24, 0x06	; 6
     3bc:	83 60       	ori	r24, 0x03	; 3
     3be:	86 b9       	out	0x06, r24	; 6
				analog.DIVISION_FACTOR=8;
     3c0:	28 e0       	ldi	r18, 0x08	; 8
				break;
     3c2:	16 c0       	rjmp	.+44     	; 0x3f0 <ANALOGenable+0x112>
			case 16://4
				ADC_CONTROL|=(1<<ADPS2);
     3c4:	32 9a       	sbi	0x06, 2	; 6
				analog.DIVISION_FACTOR=16;
     3c6:	20 e1       	ldi	r18, 0x10	; 16
				break;
     3c8:	13 c0       	rjmp	.+38     	; 0x3f0 <ANALOGenable+0x112>
			case 32://5
				ADC_CONTROL|=(5<<ADPS0);
     3ca:	86 b1       	in	r24, 0x06	; 6
     3cc:	85 60       	ori	r24, 0x05	; 5
     3ce:	86 b9       	out	0x06, r24	; 6
				analog.DIVISION_FACTOR=32;
     3d0:	20 e2       	ldi	r18, 0x20	; 32
				break;
     3d2:	0e c0       	rjmp	.+28     	; 0x3f0 <ANALOGenable+0x112>
			case 64://6
				ADC_CONTROL|=(6<<ADPS0);
     3d4:	86 b1       	in	r24, 0x06	; 6
     3d6:	86 60       	ori	r24, 0x06	; 6
     3d8:	86 b9       	out	0x06, r24	; 6
				analog.DIVISION_FACTOR=64;
     3da:	20 e4       	ldi	r18, 0x40	; 64
				break;
     3dc:	09 c0       	rjmp	.+18     	; 0x3f0 <ANALOGenable+0x112>
			case 128://7
				ADC_CONTROL|=(7<<ADPS0);
     3de:	86 b1       	in	r24, 0x06	; 6
     3e0:	87 60       	ori	r24, 0x07	; 7
     3e2:	86 b9       	out	0x06, r24	; 6
				analog.DIVISION_FACTOR=128;
     3e4:	20 e8       	ldi	r18, 0x80	; 128
				break;
     3e6:	04 c0       	rjmp	.+8      	; 0x3f0 <ANALOGenable+0x112>
			default:
				ADC_CONTROL|=(7<<ADPS0);
     3e8:	86 b1       	in	r24, 0x06	; 6
     3ea:	87 60       	ori	r24, 0x07	; 7
     3ec:	86 b9       	out	0x06, r24	; 6
				analog.DIVISION_FACTOR=128;
     3ee:	20 e8       	ldi	r18, 0x80	; 128
				break;
		}		
		
	STATUS_REGISTER=tSREG;
     3f0:	1f bf       	out	0x3f, r17	; 63
	STATUS_REGISTER|=(1<<GLOBAL_INTERRUPT_ENABLE);
     3f2:	8f b7       	in	r24, 0x3f	; 63
     3f4:	80 68       	ori	r24, 0x80	; 128
     3f6:	8f bf       	out	0x3f, r24	; 63
	/******/
	return analog;
     3f8:	60 2f       	mov	r22, r16
     3fa:	72 2f       	mov	r23, r18
     3fc:	85 e6       	ldi	r24, 0x65	; 101
     3fe:	91 e0       	ldi	r25, 0x01	; 1
}
     400:	df 91       	pop	r29
     402:	cf 91       	pop	r28
     404:	1f 91       	pop	r17
     406:	0f 91       	pop	r16
     408:	08 95       	ret

0000040a <__vector_21>:
ISR(ANALOG_INTERRUPT)
/*************************************************************************
Function: ANALOG interrupt
Purpose:  Read Analog Input
**************************************************************************/
{
     40a:	1f 92       	push	r1
     40c:	0f 92       	push	r0
     40e:	0f b6       	in	r0, 0x3f	; 63
     410:	0f 92       	push	r0
     412:	11 24       	eor	r1, r1
     414:	0b b6       	in	r0, 0x3b	; 59
     416:	0f 92       	push	r0
     418:	2f 93       	push	r18
     41a:	3f 93       	push	r19
     41c:	4f 93       	push	r20
     41e:	5f 93       	push	r21
     420:	8f 93       	push	r24
     422:	9f 93       	push	r25
     424:	ef 93       	push	r30
     426:	ff 93       	push	r31
	uint8_t Sreg;
	Sreg=STATUS_REGISTER;
     428:	2f b7       	in	r18, 0x3f	; 63
	STATUS_REGISTER&=~(1<<GLOBAL_INTERRUPT_ENABLE);
     42a:	8f b7       	in	r24, 0x3f	; 63
     42c:	8f 77       	andi	r24, 0x7F	; 127
     42e:	8f bf       	out	0x3f, r24	; 63
	adc_tmp=ADCL;
     430:	84 b1       	in	r24, 0x04	; 4
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	90 93 1a 02 	sts	0x021A, r25	; 0x80021a <adc_tmp+0x1>
     438:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <adc_tmp>
	adc_tmp|=(ADCH<<8);
     43c:	35 b1       	in	r19, 0x05	; 5
     43e:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <adc_tmp>
     442:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <adc_tmp+0x1>
     446:	93 2b       	or	r25, r19
     448:	90 93 1a 02 	sts	0x021A, r25	; 0x80021a <adc_tmp+0x1>
     44c:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <adc_tmp>
	if(adc_n_sample < (1<<ADC_NUMBER_SAMPLE)){
     450:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <__data_end>
     454:	84 30       	cpi	r24, 0x04	; 4
     456:	a0 f4       	brcc	.+40     	; 0x480 <__vector_21+0x76>
		adc_n_sample++;
     458:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <__data_end>
     45c:	8f 5f       	subi	r24, 0xFF	; 255
     45e:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <__data_end>
		adc_sample+=adc_tmp;
     462:	40 91 19 02 	lds	r20, 0x0219	; 0x800219 <adc_tmp>
     466:	50 91 1a 02 	lds	r21, 0x021A	; 0x80021a <adc_tmp+0x1>
     46a:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <adc_sample>
     46e:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <adc_sample+0x1>
     472:	84 0f       	add	r24, r20
     474:	95 1f       	adc	r25, r21
     476:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <adc_sample+0x1>
     47a:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <adc_sample>
     47e:	43 c0       	rjmp	.+134    	; 0x506 <__vector_21+0xfc>
	}else{
		ADC_VALUE[ADC_SELECTOR]=adc_sample>>ADC_NUMBER_SAMPLE;
     480:	e0 91 1d 02 	lds	r30, 0x021D	; 0x80021d <ADC_SELECTOR>
     484:	f0 91 1e 02 	lds	r31, 0x021E	; 0x80021e <ADC_SELECTOR+0x1>
     488:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <adc_sample>
     48c:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <adc_sample+0x1>
     490:	95 95       	asr	r25
     492:	87 95       	ror	r24
     494:	95 95       	asr	r25
     496:	87 95       	ror	r24
     498:	ee 0f       	add	r30, r30
     49a:	ff 1f       	adc	r31, r31
     49c:	ef 5c       	subi	r30, 0xCF	; 207
     49e:	fd 4f       	sbci	r31, 0xFD	; 253
     4a0:	91 83       	std	Z+1, r25	; 0x01
     4a2:	80 83       	st	Z, r24
		adc_n_sample=adc_sample=0;
     4a4:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <adc_sample+0x1>
     4a8:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <adc_sample>
     4ac:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <__data_end>
		/******/
		if(ADC_SELECTOR < ADC_N_CHANNEL)
     4b0:	40 91 1d 02 	lds	r20, 0x021D	; 0x80021d <ADC_SELECTOR>
     4b4:	50 91 1e 02 	lds	r21, 0x021E	; 0x80021e <ADC_SELECTOR+0x1>
     4b8:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <ADC_N_CHANNEL>
     4bc:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <ADC_N_CHANNEL+0x1>
     4c0:	48 17       	cp	r20, r24
     4c2:	59 07       	cpc	r21, r25
     4c4:	54 f4       	brge	.+20     	; 0x4da <__vector_21+0xd0>
			ADC_SELECTOR++;
     4c6:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <ADC_SELECTOR>
     4ca:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <ADC_SELECTOR+0x1>
     4ce:	01 96       	adiw	r24, 0x01	; 1
     4d0:	90 93 1e 02 	sts	0x021E, r25	; 0x80021e <ADC_SELECTOR+0x1>
     4d4:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <ADC_SELECTOR>
     4d8:	04 c0       	rjmp	.+8      	; 0x4e2 <__vector_21+0xd8>
		else
			ADC_SELECTOR=0;
     4da:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <ADC_SELECTOR+0x1>
     4de:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <ADC_SELECTOR>
		ADC_SELECT &= ~MUX_MASK;
     4e2:	87 b1       	in	r24, 0x07	; 7
     4e4:	80 7e       	andi	r24, 0xE0	; 224
     4e6:	87 b9       	out	0x07, r24	; 7
		ADC_SELECT |= (ADC_CHANNEL_GAIN[ADC_SELECTOR] & MUX_MASK);
     4e8:	e0 91 1d 02 	lds	r30, 0x021D	; 0x80021d <ADC_SELECTOR>
     4ec:	f0 91 1e 02 	lds	r31, 0x021E	; 0x80021e <ADC_SELECTOR+0x1>
     4f0:	ee 0f       	add	r30, r30
     4f2:	ff 1f       	adc	r31, r31
     4f4:	ef 5d       	subi	r30, 0xDF	; 223
     4f6:	fd 4f       	sbci	r31, 0xFD	; 253
     4f8:	80 81       	ld	r24, Z
     4fa:	91 81       	ldd	r25, Z+1	; 0x01
     4fc:	37 b1       	in	r19, 0x07	; 7
     4fe:	8f 71       	andi	r24, 0x1F	; 31
     500:	99 27       	eor	r25, r25
     502:	83 2b       	or	r24, r19
     504:	87 b9       	out	0x07, r24	; 7
	}
	STATUS_REGISTER=Sreg;
     506:	2f bf       	out	0x3f, r18	; 63
}
     508:	ff 91       	pop	r31
     50a:	ef 91       	pop	r30
     50c:	9f 91       	pop	r25
     50e:	8f 91       	pop	r24
     510:	5f 91       	pop	r21
     512:	4f 91       	pop	r20
     514:	3f 91       	pop	r19
     516:	2f 91       	pop	r18
     518:	0f 90       	pop	r0
     51a:	0b be       	out	0x3b, r0	; 59
     51c:	0f 90       	pop	r0
     51e:	0f be       	out	0x3f, r0	; 63
     520:	0f 90       	pop	r0
     522:	1f 90       	pop	r1
     524:	18 95       	reti

00000526 <TIMER_COUNTER0_start>:
		timer3.compareC=TIMER_COUNTER3_compareC;
		timer3.start=TIMER_COUNTER3_start;
		timer3.stop=TIMER_COUNTER3_stop;
		//
		return timer3;
	}
     526:	20 91 52 02 	lds	r18, 0x0252	; 0x800252 <timer0_state>
     52a:	21 11       	cpse	r18, r1
     52c:	40 c0       	rjmp	.+128    	; 0x5ae <TIMER_COUNTER0_start+0x88>
     52e:	2f ef       	ldi	r18, 0xFF	; 255
     530:	21 bf       	out	0x31, r18	; 49
     532:	23 b7       	in	r18, 0x33	; 51
     534:	28 7f       	andi	r18, 0xF8	; 248
     536:	23 bf       	out	0x33, r18	; 51
     538:	80 34       	cpi	r24, 0x40	; 64
     53a:	91 05       	cpc	r25, r1
     53c:	11 f1       	breq	.+68     	; 0x582 <TIMER_COUNTER0_start+0x5c>
     53e:	48 f4       	brcc	.+18     	; 0x552 <TIMER_COUNTER0_start+0x2c>
     540:	88 30       	cpi	r24, 0x08	; 8
     542:	91 05       	cpc	r25, r1
     544:	b1 f0       	breq	.+44     	; 0x572 <TIMER_COUNTER0_start+0x4c>
     546:	80 32       	cpi	r24, 0x20	; 32
     548:	91 05       	cpc	r25, r1
     54a:	b9 f0       	breq	.+46     	; 0x57a <TIMER_COUNTER0_start+0x54>
     54c:	01 97       	sbiw	r24, 0x01	; 1
     54e:	49 f5       	brne	.+82     	; 0x5a2 <TIMER_COUNTER0_start+0x7c>
     550:	0c c0       	rjmp	.+24     	; 0x56a <TIMER_COUNTER0_start+0x44>
     552:	81 15       	cp	r24, r1
     554:	21 e0       	ldi	r18, 0x01	; 1
     556:	92 07       	cpc	r25, r18
     558:	e1 f0       	breq	.+56     	; 0x592 <TIMER_COUNTER0_start+0x6c>
     55a:	81 15       	cp	r24, r1
     55c:	24 e0       	ldi	r18, 0x04	; 4
     55e:	92 07       	cpc	r25, r18
     560:	e1 f0       	breq	.+56     	; 0x59a <TIMER_COUNTER0_start+0x74>
     562:	80 38       	cpi	r24, 0x80	; 128
     564:	91 05       	cpc	r25, r1
     566:	e9 f4       	brne	.+58     	; 0x5a2 <TIMER_COUNTER0_start+0x7c>
     568:	10 c0       	rjmp	.+32     	; 0x58a <TIMER_COUNTER0_start+0x64>
     56a:	83 b7       	in	r24, 0x33	; 51
     56c:	81 60       	ori	r24, 0x01	; 1
     56e:	83 bf       	out	0x33, r24	; 51
     570:	1b c0       	rjmp	.+54     	; 0x5a8 <TIMER_COUNTER0_start+0x82>
     572:	83 b7       	in	r24, 0x33	; 51
     574:	82 60       	ori	r24, 0x02	; 2
     576:	83 bf       	out	0x33, r24	; 51
     578:	17 c0       	rjmp	.+46     	; 0x5a8 <TIMER_COUNTER0_start+0x82>
     57a:	83 b7       	in	r24, 0x33	; 51
     57c:	83 60       	ori	r24, 0x03	; 3
     57e:	83 bf       	out	0x33, r24	; 51
     580:	13 c0       	rjmp	.+38     	; 0x5a8 <TIMER_COUNTER0_start+0x82>
     582:	83 b7       	in	r24, 0x33	; 51
     584:	84 60       	ori	r24, 0x04	; 4
     586:	83 bf       	out	0x33, r24	; 51
     588:	0f c0       	rjmp	.+30     	; 0x5a8 <TIMER_COUNTER0_start+0x82>
     58a:	83 b7       	in	r24, 0x33	; 51
     58c:	85 60       	ori	r24, 0x05	; 5
     58e:	83 bf       	out	0x33, r24	; 51
     590:	0b c0       	rjmp	.+22     	; 0x5a8 <TIMER_COUNTER0_start+0x82>
     592:	83 b7       	in	r24, 0x33	; 51
     594:	86 60       	ori	r24, 0x06	; 6
     596:	83 bf       	out	0x33, r24	; 51
     598:	07 c0       	rjmp	.+14     	; 0x5a8 <TIMER_COUNTER0_start+0x82>
     59a:	83 b7       	in	r24, 0x33	; 51
     59c:	87 60       	ori	r24, 0x07	; 7
     59e:	83 bf       	out	0x33, r24	; 51
     5a0:	03 c0       	rjmp	.+6      	; 0x5a8 <TIMER_COUNTER0_start+0x82>
     5a2:	83 b7       	in	r24, 0x33	; 51
     5a4:	87 60       	ori	r24, 0x07	; 7
     5a6:	83 bf       	out	0x33, r24	; 51
     5a8:	81 e0       	ldi	r24, 0x01	; 1
     5aa:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <timer0_state>
     5ae:	08 95       	ret

000005b0 <TIMER_COUNTER0_compoutmode>:
     5b0:	93 b7       	in	r25, 0x33	; 51
     5b2:	9f 7c       	andi	r25, 0xCF	; 207
     5b4:	93 bf       	out	0x33, r25	; 51
     5b6:	82 30       	cpi	r24, 0x02	; 2
     5b8:	41 f0       	breq	.+16     	; 0x5ca <TIMER_COUNTER0_compoutmode+0x1a>
     5ba:	83 30       	cpi	r24, 0x03	; 3
     5bc:	51 f0       	breq	.+20     	; 0x5d2 <TIMER_COUNTER0_compoutmode+0x22>
     5be:	81 30       	cpi	r24, 0x01	; 1
     5c0:	59 f4       	brne	.+22     	; 0x5d8 <TIMER_COUNTER0_compoutmode+0x28>
     5c2:	83 b7       	in	r24, 0x33	; 51
     5c4:	80 61       	ori	r24, 0x10	; 16
     5c6:	83 bf       	out	0x33, r24	; 51
     5c8:	08 95       	ret
     5ca:	83 b7       	in	r24, 0x33	; 51
     5cc:	80 62       	ori	r24, 0x20	; 32
     5ce:	83 bf       	out	0x33, r24	; 51
     5d0:	08 95       	ret
     5d2:	83 b7       	in	r24, 0x33	; 51
     5d4:	80 63       	ori	r24, 0x30	; 48
     5d6:	83 bf       	out	0x33, r24	; 51
     5d8:	08 95       	ret

000005da <TIMER_COUNTER0_compare>:
     5da:	81 bf       	out	0x31, r24	; 49
     5dc:	08 95       	ret

000005de <TIMER_COUNTER0_stop>:
     5de:	83 b7       	in	r24, 0x33	; 51
     5e0:	88 7f       	andi	r24, 0xF8	; 248
     5e2:	83 bf       	out	0x33, r24	; 51
     5e4:	12 be       	out	0x32, r1	; 50
     5e6:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <timer0_state>
     5ea:	08 95       	ret

000005ec <TIMER_COUNTER1_start>:
     5ec:	20 91 4f 02 	lds	r18, 0x024F	; 0x80024f <timer1_state>
     5f0:	21 11       	cpse	r18, r1
     5f2:	42 c0       	rjmp	.+132    	; 0x678 <TIMER_COUNTER1_start+0x8c>
     5f4:	2f ef       	ldi	r18, 0xFF	; 255
     5f6:	3f ef       	ldi	r19, 0xFF	; 255
     5f8:	3b bd       	out	0x2b, r19	; 43
     5fa:	2a bd       	out	0x2a, r18	; 42
     5fc:	2e b5       	in	r18, 0x2e	; 46
     5fe:	28 7f       	andi	r18, 0xF8	; 248
     600:	2e bd       	out	0x2e, r18	; 46
     602:	88 30       	cpi	r24, 0x08	; 8
     604:	91 05       	cpc	r25, r1
     606:	d1 f0       	breq	.+52     	; 0x63c <TIMER_COUNTER1_start+0x50>
     608:	48 f4       	brcc	.+18     	; 0x61c <TIMER_COUNTER1_start+0x30>
     60a:	83 30       	cpi	r24, 0x03	; 3
     60c:	91 05       	cpc	r25, r1
     60e:	31 f1       	breq	.+76     	; 0x65c <TIMER_COUNTER1_start+0x70>
     610:	85 30       	cpi	r24, 0x05	; 5
     612:	91 05       	cpc	r25, r1
     614:	39 f1       	breq	.+78     	; 0x664 <TIMER_COUNTER1_start+0x78>
     616:	01 97       	sbiw	r24, 0x01	; 1
     618:	49 f5       	brne	.+82     	; 0x66c <TIMER_COUNTER1_start+0x80>
     61a:	0c c0       	rjmp	.+24     	; 0x634 <TIMER_COUNTER1_start+0x48>
     61c:	81 15       	cp	r24, r1
     61e:	21 e0       	ldi	r18, 0x01	; 1
     620:	92 07       	cpc	r25, r18
     622:	a1 f0       	breq	.+40     	; 0x64c <TIMER_COUNTER1_start+0x60>
     624:	81 15       	cp	r24, r1
     626:	24 e0       	ldi	r18, 0x04	; 4
     628:	92 07       	cpc	r25, r18
     62a:	a1 f0       	breq	.+40     	; 0x654 <TIMER_COUNTER1_start+0x68>
     62c:	80 34       	cpi	r24, 0x40	; 64
     62e:	91 05       	cpc	r25, r1
     630:	e9 f4       	brne	.+58     	; 0x66c <TIMER_COUNTER1_start+0x80>
     632:	08 c0       	rjmp	.+16     	; 0x644 <TIMER_COUNTER1_start+0x58>
     634:	8e b5       	in	r24, 0x2e	; 46
     636:	81 60       	ori	r24, 0x01	; 1
     638:	8e bd       	out	0x2e, r24	; 46
     63a:	1b c0       	rjmp	.+54     	; 0x672 <TIMER_COUNTER1_start+0x86>
     63c:	8e b5       	in	r24, 0x2e	; 46
     63e:	82 60       	ori	r24, 0x02	; 2
     640:	8e bd       	out	0x2e, r24	; 46
     642:	17 c0       	rjmp	.+46     	; 0x672 <TIMER_COUNTER1_start+0x86>
     644:	8e b5       	in	r24, 0x2e	; 46
     646:	83 60       	ori	r24, 0x03	; 3
     648:	8e bd       	out	0x2e, r24	; 46
     64a:	13 c0       	rjmp	.+38     	; 0x672 <TIMER_COUNTER1_start+0x86>
     64c:	8e b5       	in	r24, 0x2e	; 46
     64e:	84 60       	ori	r24, 0x04	; 4
     650:	8e bd       	out	0x2e, r24	; 46
     652:	0f c0       	rjmp	.+30     	; 0x672 <TIMER_COUNTER1_start+0x86>
     654:	8e b5       	in	r24, 0x2e	; 46
     656:	85 60       	ori	r24, 0x05	; 5
     658:	8e bd       	out	0x2e, r24	; 46
     65a:	0b c0       	rjmp	.+22     	; 0x672 <TIMER_COUNTER1_start+0x86>
     65c:	8e b5       	in	r24, 0x2e	; 46
     65e:	86 60       	ori	r24, 0x06	; 6
     660:	8e bd       	out	0x2e, r24	; 46
     662:	07 c0       	rjmp	.+14     	; 0x672 <TIMER_COUNTER1_start+0x86>
     664:	8e b5       	in	r24, 0x2e	; 46
     666:	87 60       	ori	r24, 0x07	; 7
     668:	8e bd       	out	0x2e, r24	; 46
     66a:	03 c0       	rjmp	.+6      	; 0x672 <TIMER_COUNTER1_start+0x86>
     66c:	8e b5       	in	r24, 0x2e	; 46
     66e:	85 60       	ori	r24, 0x05	; 5
     670:	8e bd       	out	0x2e, r24	; 46
     672:	81 e0       	ldi	r24, 0x01	; 1
     674:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <timer1_state>
     678:	08 95       	ret

0000067a <TIMER_COUNTER1_compoutmodeA>:
     67a:	9f b5       	in	r25, 0x2f	; 47
     67c:	9f 73       	andi	r25, 0x3F	; 63
     67e:	9f bd       	out	0x2f, r25	; 47
     680:	82 30       	cpi	r24, 0x02	; 2
     682:	41 f0       	breq	.+16     	; 0x694 <TIMER_COUNTER1_compoutmodeA+0x1a>
     684:	83 30       	cpi	r24, 0x03	; 3
     686:	51 f0       	breq	.+20     	; 0x69c <TIMER_COUNTER1_compoutmodeA+0x22>
     688:	81 30       	cpi	r24, 0x01	; 1
     68a:	59 f4       	brne	.+22     	; 0x6a2 <TIMER_COUNTER1_compoutmodeA+0x28>
     68c:	8f b5       	in	r24, 0x2f	; 47
     68e:	80 64       	ori	r24, 0x40	; 64
     690:	8f bd       	out	0x2f, r24	; 47
     692:	08 95       	ret
     694:	8f b5       	in	r24, 0x2f	; 47
     696:	80 68       	ori	r24, 0x80	; 128
     698:	8f bd       	out	0x2f, r24	; 47
     69a:	08 95       	ret
     69c:	8f b5       	in	r24, 0x2f	; 47
     69e:	80 6c       	ori	r24, 0xC0	; 192
     6a0:	8f bd       	out	0x2f, r24	; 47
     6a2:	08 95       	ret

000006a4 <TIMER_COUNTER1_compoutmodeB>:
     6a4:	9f b5       	in	r25, 0x2f	; 47
     6a6:	9f 7c       	andi	r25, 0xCF	; 207
     6a8:	9f bd       	out	0x2f, r25	; 47
     6aa:	82 30       	cpi	r24, 0x02	; 2
     6ac:	41 f0       	breq	.+16     	; 0x6be <TIMER_COUNTER1_compoutmodeB+0x1a>
     6ae:	83 30       	cpi	r24, 0x03	; 3
     6b0:	51 f0       	breq	.+20     	; 0x6c6 <TIMER_COUNTER1_compoutmodeB+0x22>
     6b2:	81 30       	cpi	r24, 0x01	; 1
     6b4:	59 f4       	brne	.+22     	; 0x6cc <TIMER_COUNTER1_compoutmodeB+0x28>
     6b6:	8f b5       	in	r24, 0x2f	; 47
     6b8:	80 61       	ori	r24, 0x10	; 16
     6ba:	8f bd       	out	0x2f, r24	; 47
     6bc:	08 95       	ret
     6be:	8f b5       	in	r24, 0x2f	; 47
     6c0:	80 62       	ori	r24, 0x20	; 32
     6c2:	8f bd       	out	0x2f, r24	; 47
     6c4:	08 95       	ret
     6c6:	8f b5       	in	r24, 0x2f	; 47
     6c8:	80 63       	ori	r24, 0x30	; 48
     6ca:	8f bd       	out	0x2f, r24	; 47
     6cc:	08 95       	ret

000006ce <TIMER_COUNTER1_compoutmodeC>:
     6ce:	9f b5       	in	r25, 0x2f	; 47
     6d0:	93 7f       	andi	r25, 0xF3	; 243
     6d2:	9f bd       	out	0x2f, r25	; 47
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	41 f0       	breq	.+16     	; 0x6e8 <TIMER_COUNTER1_compoutmodeC+0x1a>
     6d8:	83 30       	cpi	r24, 0x03	; 3
     6da:	51 f0       	breq	.+20     	; 0x6f0 <TIMER_COUNTER1_compoutmodeC+0x22>
     6dc:	81 30       	cpi	r24, 0x01	; 1
     6de:	59 f4       	brne	.+22     	; 0x6f6 <TIMER_COUNTER1_compoutmodeC+0x28>
     6e0:	8f b5       	in	r24, 0x2f	; 47
     6e2:	84 60       	ori	r24, 0x04	; 4
     6e4:	8f bd       	out	0x2f, r24	; 47
     6e6:	08 95       	ret
     6e8:	8f b5       	in	r24, 0x2f	; 47
     6ea:	88 60       	ori	r24, 0x08	; 8
     6ec:	8f bd       	out	0x2f, r24	; 47
     6ee:	08 95       	ret
     6f0:	8f b5       	in	r24, 0x2f	; 47
     6f2:	8c 60       	ori	r24, 0x0C	; 12
     6f4:	8f bd       	out	0x2f, r24	; 47
     6f6:	08 95       	ret

000006f8 <TIMER_COUNTER1_compareA>:
     6f8:	9b bd       	out	0x2b, r25	; 43
     6fa:	8a bd       	out	0x2a, r24	; 42
     6fc:	08 95       	ret

000006fe <TIMER_COUNTER1_compareB>:
     6fe:	99 bd       	out	0x29, r25	; 41
     700:	88 bd       	out	0x28, r24	; 40
     702:	08 95       	ret

00000704 <TIMER_COUNTER1_compareC>:
     704:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     708:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     70c:	08 95       	ret

0000070e <TIMER_COUNTER1_stop>:
     70e:	8e b5       	in	r24, 0x2e	; 46
     710:	88 7f       	andi	r24, 0xF8	; 248
     712:	8e bd       	out	0x2e, r24	; 46
     714:	1d bc       	out	0x2d, r1	; 45
     716:	1c bc       	out	0x2c, r1	; 44
     718:	10 92 4f 02 	sts	0x024F, r1	; 0x80024f <timer1_state>
     71c:	08 95       	ret

0000071e <TIMER_COUNTER0enable>:
     71e:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <timer0_state>
     722:	23 b7       	in	r18, 0x33	; 51
     724:	27 7b       	andi	r18, 0xB7	; 183
     726:	23 bf       	out	0x33, r18	; 51
     728:	62 30       	cpi	r22, 0x02	; 2
     72a:	41 f0       	breq	.+16     	; 0x73c <TIMER_COUNTER0enable+0x1e>
     72c:	63 30       	cpi	r22, 0x03	; 3
     72e:	51 f0       	breq	.+20     	; 0x744 <TIMER_COUNTER0enable+0x26>
     730:	61 30       	cpi	r22, 0x01	; 1
     732:	59 f4       	brne	.+22     	; 0x74a <TIMER_COUNTER0enable+0x2c>
     734:	23 b7       	in	r18, 0x33	; 51
     736:	20 64       	ori	r18, 0x40	; 64
     738:	23 bf       	out	0x33, r18	; 51
     73a:	07 c0       	rjmp	.+14     	; 0x74a <TIMER_COUNTER0enable+0x2c>
     73c:	23 b7       	in	r18, 0x33	; 51
     73e:	28 60       	ori	r18, 0x08	; 8
     740:	23 bf       	out	0x33, r18	; 51
     742:	03 c0       	rjmp	.+6      	; 0x74a <TIMER_COUNTER0enable+0x2c>
     744:	23 b7       	in	r18, 0x33	; 51
     746:	28 64       	ori	r18, 0x48	; 72
     748:	23 bf       	out	0x33, r18	; 51
     74a:	27 b7       	in	r18, 0x37	; 55
     74c:	2e 7f       	andi	r18, 0xFE	; 254
     74e:	27 bf       	out	0x37, r18	; 55
     750:	27 b7       	in	r18, 0x37	; 55
     752:	2d 7f       	andi	r18, 0xFD	; 253
     754:	27 bf       	out	0x37, r18	; 55
     756:	42 30       	cpi	r20, 0x02	; 2
     758:	41 f0       	breq	.+16     	; 0x76a <TIMER_COUNTER0enable+0x4c>
     75a:	43 30       	cpi	r20, 0x03	; 3
     75c:	51 f0       	breq	.+20     	; 0x772 <TIMER_COUNTER0enable+0x54>
     75e:	41 30       	cpi	r20, 0x01	; 1
     760:	71 f4       	brne	.+28     	; 0x77e <TIMER_COUNTER0enable+0x60>
     762:	27 b7       	in	r18, 0x37	; 55
     764:	21 60       	ori	r18, 0x01	; 1
     766:	27 bf       	out	0x37, r18	; 55
     768:	0a c0       	rjmp	.+20     	; 0x77e <TIMER_COUNTER0enable+0x60>
     76a:	27 b7       	in	r18, 0x37	; 55
     76c:	22 60       	ori	r18, 0x02	; 2
     76e:	27 bf       	out	0x37, r18	; 55
     770:	06 c0       	rjmp	.+12     	; 0x77e <TIMER_COUNTER0enable+0x60>
     772:	27 b7       	in	r18, 0x37	; 55
     774:	21 60       	ori	r18, 0x01	; 1
     776:	27 bf       	out	0x37, r18	; 55
     778:	27 b7       	in	r18, 0x37	; 55
     77a:	22 60       	ori	r18, 0x02	; 2
     77c:	27 bf       	out	0x37, r18	; 55
     77e:	28 ed       	ldi	r18, 0xD8	; 216
     780:	32 e0       	ldi	r19, 0x02	; 2
     782:	fc 01       	movw	r30, r24
     784:	31 83       	std	Z+1, r19	; 0x01
     786:	20 83       	st	Z, r18
     788:	2d ee       	ldi	r18, 0xED	; 237
     78a:	32 e0       	ldi	r19, 0x02	; 2
     78c:	37 83       	std	Z+7, r19	; 0x07
     78e:	26 83       	std	Z+6, r18	; 0x06
     790:	23 e9       	ldi	r18, 0x93	; 147
     792:	32 e0       	ldi	r19, 0x02	; 2
     794:	35 87       	std	Z+13, r19	; 0x0d
     796:	24 87       	std	Z+12, r18	; 0x0c
     798:	2f ee       	ldi	r18, 0xEF	; 239
     79a:	32 e0       	ldi	r19, 0x02	; 2
     79c:	37 87       	std	Z+15, r19	; 0x0f
     79e:	26 87       	std	Z+14, r18	; 0x0e
     7a0:	08 95       	ret

000007a2 <TIMER_COUNTER1enable>:
     7a2:	0f 93       	push	r16
     7a4:	1f 93       	push	r17
     7a6:	dc 01       	movw	r26, r24
     7a8:	10 92 4f 02 	sts	0x024F, r1	; 0x80024f <timer1_state>
     7ac:	8f b5       	in	r24, 0x2f	; 47
     7ae:	8c 7f       	andi	r24, 0xFC	; 252
     7b0:	8f bd       	out	0x2f, r24	; 47
     7b2:	8e b5       	in	r24, 0x2e	; 46
     7b4:	87 7e       	andi	r24, 0xE7	; 231
     7b6:	8e bd       	out	0x2e, r24	; 46
     7b8:	06 2f       	mov	r16, r22
     7ba:	10 e0       	ldi	r17, 0x00	; 0
     7bc:	f8 01       	movw	r30, r16
     7be:	31 97       	sbiw	r30, 0x01	; 1
     7c0:	ef 30       	cpi	r30, 0x0F	; 15
     7c2:	f1 05       	cpc	r31, r1
     7c4:	08 f0       	brcs	.+2      	; 0x7c8 <TIMER_COUNTER1enable+0x26>
     7c6:	5a c0       	rjmp	.+180    	; 0x87c <TIMER_COUNTER1enable+0xda>
     7c8:	ea 5b       	subi	r30, 0xBA	; 186
     7ca:	ff 4f       	sbci	r31, 0xFF	; 255
     7cc:	0c 94 e1 1d 	jmp	0x3bc2	; 0x3bc2 <__tablejump2__>
     7d0:	8f b5       	in	r24, 0x2f	; 47
     7d2:	81 60       	ori	r24, 0x01	; 1
     7d4:	8f bd       	out	0x2f, r24	; 47
     7d6:	52 c0       	rjmp	.+164    	; 0x87c <TIMER_COUNTER1enable+0xda>
     7d8:	8f b5       	in	r24, 0x2f	; 47
     7da:	82 60       	ori	r24, 0x02	; 2
     7dc:	8f bd       	out	0x2f, r24	; 47
     7de:	4e c0       	rjmp	.+156    	; 0x87c <TIMER_COUNTER1enable+0xda>
     7e0:	8f b5       	in	r24, 0x2f	; 47
     7e2:	83 60       	ori	r24, 0x03	; 3
     7e4:	8f bd       	out	0x2f, r24	; 47
     7e6:	4a c0       	rjmp	.+148    	; 0x87c <TIMER_COUNTER1enable+0xda>
     7e8:	8e b5       	in	r24, 0x2e	; 46
     7ea:	88 60       	ori	r24, 0x08	; 8
     7ec:	8e bd       	out	0x2e, r24	; 46
     7ee:	46 c0       	rjmp	.+140    	; 0x87c <TIMER_COUNTER1enable+0xda>
     7f0:	8f b5       	in	r24, 0x2f	; 47
     7f2:	81 60       	ori	r24, 0x01	; 1
     7f4:	8f bd       	out	0x2f, r24	; 47
     7f6:	8e b5       	in	r24, 0x2e	; 46
     7f8:	88 60       	ori	r24, 0x08	; 8
     7fa:	8e bd       	out	0x2e, r24	; 46
     7fc:	3f c0       	rjmp	.+126    	; 0x87c <TIMER_COUNTER1enable+0xda>
     7fe:	8f b5       	in	r24, 0x2f	; 47
     800:	82 60       	ori	r24, 0x02	; 2
     802:	8f bd       	out	0x2f, r24	; 47
     804:	8e b5       	in	r24, 0x2e	; 46
     806:	88 60       	ori	r24, 0x08	; 8
     808:	8e bd       	out	0x2e, r24	; 46
     80a:	38 c0       	rjmp	.+112    	; 0x87c <TIMER_COUNTER1enable+0xda>
     80c:	8f b5       	in	r24, 0x2f	; 47
     80e:	83 60       	ori	r24, 0x03	; 3
     810:	8f bd       	out	0x2f, r24	; 47
     812:	8e b5       	in	r24, 0x2e	; 46
     814:	88 60       	ori	r24, 0x08	; 8
     816:	8e bd       	out	0x2e, r24	; 46
     818:	31 c0       	rjmp	.+98     	; 0x87c <TIMER_COUNTER1enable+0xda>
     81a:	8e b5       	in	r24, 0x2e	; 46
     81c:	80 61       	ori	r24, 0x10	; 16
     81e:	8e bd       	out	0x2e, r24	; 46
     820:	2d c0       	rjmp	.+90     	; 0x87c <TIMER_COUNTER1enable+0xda>
     822:	8f b5       	in	r24, 0x2f	; 47
     824:	81 60       	ori	r24, 0x01	; 1
     826:	8f bd       	out	0x2f, r24	; 47
     828:	8e b5       	in	r24, 0x2e	; 46
     82a:	80 61       	ori	r24, 0x10	; 16
     82c:	8e bd       	out	0x2e, r24	; 46
     82e:	26 c0       	rjmp	.+76     	; 0x87c <TIMER_COUNTER1enable+0xda>
     830:	8f b5       	in	r24, 0x2f	; 47
     832:	82 60       	ori	r24, 0x02	; 2
     834:	8f bd       	out	0x2f, r24	; 47
     836:	8e b5       	in	r24, 0x2e	; 46
     838:	80 61       	ori	r24, 0x10	; 16
     83a:	8e bd       	out	0x2e, r24	; 46
     83c:	1f c0       	rjmp	.+62     	; 0x87c <TIMER_COUNTER1enable+0xda>
     83e:	8f b5       	in	r24, 0x2f	; 47
     840:	83 60       	ori	r24, 0x03	; 3
     842:	8f bd       	out	0x2f, r24	; 47
     844:	8e b5       	in	r24, 0x2e	; 46
     846:	80 61       	ori	r24, 0x10	; 16
     848:	8e bd       	out	0x2e, r24	; 46
     84a:	18 c0       	rjmp	.+48     	; 0x87c <TIMER_COUNTER1enable+0xda>
     84c:	8e b5       	in	r24, 0x2e	; 46
     84e:	88 61       	ori	r24, 0x18	; 24
     850:	8e bd       	out	0x2e, r24	; 46
     852:	14 c0       	rjmp	.+40     	; 0x87c <TIMER_COUNTER1enable+0xda>
     854:	8f b5       	in	r24, 0x2f	; 47
     856:	81 60       	ori	r24, 0x01	; 1
     858:	8f bd       	out	0x2f, r24	; 47
     85a:	8e b5       	in	r24, 0x2e	; 46
     85c:	88 61       	ori	r24, 0x18	; 24
     85e:	8e bd       	out	0x2e, r24	; 46
     860:	0d c0       	rjmp	.+26     	; 0x87c <TIMER_COUNTER1enable+0xda>
     862:	8f b5       	in	r24, 0x2f	; 47
     864:	82 60       	ori	r24, 0x02	; 2
     866:	8f bd       	out	0x2f, r24	; 47
     868:	8e b5       	in	r24, 0x2e	; 46
     86a:	88 61       	ori	r24, 0x18	; 24
     86c:	8e bd       	out	0x2e, r24	; 46
     86e:	06 c0       	rjmp	.+12     	; 0x87c <TIMER_COUNTER1enable+0xda>
     870:	8f b5       	in	r24, 0x2f	; 47
     872:	83 60       	ori	r24, 0x03	; 3
     874:	8f bd       	out	0x2f, r24	; 47
     876:	8e b5       	in	r24, 0x2e	; 46
     878:	88 61       	ori	r24, 0x18	; 24
     87a:	8e bd       	out	0x2e, r24	; 46
     87c:	8f b5       	in	r24, 0x2f	; 47
     87e:	83 70       	andi	r24, 0x03	; 3
     880:	8f bd       	out	0x2f, r24	; 47
     882:	87 b7       	in	r24, 0x37	; 55
     884:	83 7c       	andi	r24, 0xC3	; 195
     886:	87 bf       	out	0x37, r24	; 55
     888:	ed e7       	ldi	r30, 0x7D	; 125
     88a:	f0 e0       	ldi	r31, 0x00	; 0
     88c:	80 81       	ld	r24, Z
     88e:	8e 7f       	andi	r24, 0xFE	; 254
     890:	80 83       	st	Z, r24
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	fa 01       	movw	r30, r20
     896:	31 97       	sbiw	r30, 0x01	; 1
     898:	ec 30       	cpi	r30, 0x0C	; 12
     89a:	f1 05       	cpc	r31, r1
     89c:	08 f0       	brcs	.+2      	; 0x8a0 <TIMER_COUNTER1enable+0xfe>
     89e:	44 c0       	rjmp	.+136    	; 0x928 <TIMER_COUNTER1enable+0x186>
     8a0:	eb 5a       	subi	r30, 0xAB	; 171
     8a2:	ff 4f       	sbci	r31, 0xFF	; 255
     8a4:	0c 94 e1 1d 	jmp	0x3bc2	; 0x3bc2 <__tablejump2__>
     8a8:	87 b7       	in	r24, 0x37	; 55
     8aa:	84 60       	ori	r24, 0x04	; 4
     8ac:	87 bf       	out	0x37, r24	; 55
     8ae:	3c c0       	rjmp	.+120    	; 0x928 <TIMER_COUNTER1enable+0x186>
     8b0:	87 b7       	in	r24, 0x37	; 55
     8b2:	80 61       	ori	r24, 0x10	; 16
     8b4:	87 bf       	out	0x37, r24	; 55
     8b6:	38 c0       	rjmp	.+112    	; 0x928 <TIMER_COUNTER1enable+0x186>
     8b8:	87 b7       	in	r24, 0x37	; 55
     8ba:	88 60       	ori	r24, 0x08	; 8
     8bc:	87 bf       	out	0x37, r24	; 55
     8be:	34 c0       	rjmp	.+104    	; 0x928 <TIMER_COUNTER1enable+0x186>
     8c0:	ed e7       	ldi	r30, 0x7D	; 125
     8c2:	f0 e0       	ldi	r31, 0x00	; 0
     8c4:	80 81       	ld	r24, Z
     8c6:	81 60       	ori	r24, 0x01	; 1
     8c8:	80 83       	st	Z, r24
     8ca:	2e c0       	rjmp	.+92     	; 0x928 <TIMER_COUNTER1enable+0x186>
     8cc:	87 b7       	in	r24, 0x37	; 55
     8ce:	80 62       	ori	r24, 0x20	; 32
     8d0:	87 bf       	out	0x37, r24	; 55
     8d2:	2a c0       	rjmp	.+84     	; 0x928 <TIMER_COUNTER1enable+0x186>
     8d4:	87 b7       	in	r24, 0x37	; 55
     8d6:	84 61       	ori	r24, 0x14	; 20
     8d8:	87 bf       	out	0x37, r24	; 55
     8da:	26 c0       	rjmp	.+76     	; 0x928 <TIMER_COUNTER1enable+0x186>
     8dc:	87 b7       	in	r24, 0x37	; 55
     8de:	8c 60       	ori	r24, 0x0C	; 12
     8e0:	87 bf       	out	0x37, r24	; 55
     8e2:	22 c0       	rjmp	.+68     	; 0x928 <TIMER_COUNTER1enable+0x186>
     8e4:	87 b7       	in	r24, 0x37	; 55
     8e6:	84 60       	ori	r24, 0x04	; 4
     8e8:	87 bf       	out	0x37, r24	; 55
     8ea:	ed e7       	ldi	r30, 0x7D	; 125
     8ec:	f0 e0       	ldi	r31, 0x00	; 0
     8ee:	80 81       	ld	r24, Z
     8f0:	81 60       	ori	r24, 0x01	; 1
     8f2:	80 83       	st	Z, r24
     8f4:	19 c0       	rjmp	.+50     	; 0x928 <TIMER_COUNTER1enable+0x186>
     8f6:	87 b7       	in	r24, 0x37	; 55
     8f8:	84 62       	ori	r24, 0x24	; 36
     8fa:	87 bf       	out	0x37, r24	; 55
     8fc:	15 c0       	rjmp	.+42     	; 0x928 <TIMER_COUNTER1enable+0x186>
     8fe:	87 b7       	in	r24, 0x37	; 55
     900:	8c 61       	ori	r24, 0x1C	; 28
     902:	87 bf       	out	0x37, r24	; 55
     904:	11 c0       	rjmp	.+34     	; 0x928 <TIMER_COUNTER1enable+0x186>
     906:	87 b7       	in	r24, 0x37	; 55
     908:	8c 61       	ori	r24, 0x1C	; 28
     90a:	87 bf       	out	0x37, r24	; 55
     90c:	ed e7       	ldi	r30, 0x7D	; 125
     90e:	f0 e0       	ldi	r31, 0x00	; 0
     910:	80 81       	ld	r24, Z
     912:	81 60       	ori	r24, 0x01	; 1
     914:	80 83       	st	Z, r24
     916:	08 c0       	rjmp	.+16     	; 0x928 <TIMER_COUNTER1enable+0x186>
     918:	87 b7       	in	r24, 0x37	; 55
     91a:	88 61       	ori	r24, 0x18	; 24
     91c:	87 bf       	out	0x37, r24	; 55
     91e:	ed e7       	ldi	r30, 0x7D	; 125
     920:	f0 e0       	ldi	r31, 0x00	; 0
     922:	80 81       	ld	r24, Z
     924:	81 60       	ori	r24, 0x01	; 1
     926:	80 83       	st	Z, r24
     928:	8d e3       	ldi	r24, 0x3D	; 61
     92a:	93 e0       	ldi	r25, 0x03	; 3
     92c:	11 96       	adiw	r26, 0x01	; 1
     92e:	9c 93       	st	X, r25
     930:	8e 93       	st	-X, r24
     932:	82 e5       	ldi	r24, 0x52	; 82
     934:	93 e0       	ldi	r25, 0x03	; 3
     936:	13 96       	adiw	r26, 0x03	; 3
     938:	9c 93       	st	X, r25
     93a:	8e 93       	st	-X, r24
     93c:	12 97       	sbiw	r26, 0x02	; 2
     93e:	87 e6       	ldi	r24, 0x67	; 103
     940:	93 e0       	ldi	r25, 0x03	; 3
     942:	15 96       	adiw	r26, 0x05	; 5
     944:	9c 93       	st	X, r25
     946:	8e 93       	st	-X, r24
     948:	14 97       	sbiw	r26, 0x04	; 4
     94a:	8c e7       	ldi	r24, 0x7C	; 124
     94c:	93 e0       	ldi	r25, 0x03	; 3
     94e:	17 96       	adiw	r26, 0x07	; 7
     950:	9c 93       	st	X, r25
     952:	8e 93       	st	-X, r24
     954:	16 97       	sbiw	r26, 0x06	; 6
     956:	8f e7       	ldi	r24, 0x7F	; 127
     958:	93 e0       	ldi	r25, 0x03	; 3
     95a:	19 96       	adiw	r26, 0x09	; 9
     95c:	9c 93       	st	X, r25
     95e:	8e 93       	st	-X, r24
     960:	18 97       	sbiw	r26, 0x08	; 8
     962:	82 e8       	ldi	r24, 0x82	; 130
     964:	93 e0       	ldi	r25, 0x03	; 3
     966:	1b 96       	adiw	r26, 0x0b	; 11
     968:	9c 93       	st	X, r25
     96a:	8e 93       	st	-X, r24
     96c:	1a 97       	sbiw	r26, 0x0a	; 10
     96e:	86 ef       	ldi	r24, 0xF6	; 246
     970:	92 e0       	ldi	r25, 0x02	; 2
     972:	1d 96       	adiw	r26, 0x0d	; 13
     974:	9c 93       	st	X, r25
     976:	8e 93       	st	-X, r24
     978:	1c 97       	sbiw	r26, 0x0c	; 12
     97a:	87 e8       	ldi	r24, 0x87	; 135
     97c:	93 e0       	ldi	r25, 0x03	; 3
     97e:	1f 96       	adiw	r26, 0x0f	; 15
     980:	9c 93       	st	X, r25
     982:	8e 93       	st	-X, r24
     984:	1e 97       	sbiw	r26, 0x0e	; 14
     986:	cd 01       	movw	r24, r26
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	08 95       	ret

0000098e <__vector_16>:
/*
** interrupt
*/
// So that main will not freeze when not defined, therefore exclude here! before use.
//ISR(TIMER0_COMP_vect){ }
ISR(TIMER0_OVF_vect){ }
     98e:	1f 92       	push	r1
     990:	0f 92       	push	r0
     992:	0f b6       	in	r0, 0x3f	; 63
     994:	0f 92       	push	r0
     996:	11 24       	eor	r1, r1
     998:	0f 90       	pop	r0
     99a:	0f be       	out	0x3f, r0	; 63
     99c:	0f 90       	pop	r0
     99e:	1f 90       	pop	r1
     9a0:	18 95       	reti

000009a2 <__vector_11>:
ISR(TIMER1_CAPT_vect){ }
     9a2:	1f 92       	push	r1
     9a4:	0f 92       	push	r0
     9a6:	0f b6       	in	r0, 0x3f	; 63
     9a8:	0f 92       	push	r0
     9aa:	11 24       	eor	r1, r1
     9ac:	0f 90       	pop	r0
     9ae:	0f be       	out	0x3f, r0	; 63
     9b0:	0f 90       	pop	r0
     9b2:	1f 90       	pop	r1
     9b4:	18 95       	reti

000009b6 <__vector_12>:
ISR(TIMER1_COMPA_vect){ }
     9b6:	1f 92       	push	r1
     9b8:	0f 92       	push	r0
     9ba:	0f b6       	in	r0, 0x3f	; 63
     9bc:	0f 92       	push	r0
     9be:	11 24       	eor	r1, r1
     9c0:	0f 90       	pop	r0
     9c2:	0f be       	out	0x3f, r0	; 63
     9c4:	0f 90       	pop	r0
     9c6:	1f 90       	pop	r1
     9c8:	18 95       	reti

000009ca <__vector_13>:
ISR(TIMER1_COMPB_vect){ }
     9ca:	1f 92       	push	r1
     9cc:	0f 92       	push	r0
     9ce:	0f b6       	in	r0, 0x3f	; 63
     9d0:	0f 92       	push	r0
     9d2:	11 24       	eor	r1, r1
     9d4:	0f 90       	pop	r0
     9d6:	0f be       	out	0x3f, r0	; 63
     9d8:	0f 90       	pop	r0
     9da:	1f 90       	pop	r1
     9dc:	18 95       	reti

000009de <__vector_24>:
ISR(TIMER1_COMPC_vect){ }
     9de:	1f 92       	push	r1
     9e0:	0f 92       	push	r0
     9e2:	0f b6       	in	r0, 0x3f	; 63
     9e4:	0f 92       	push	r0
     9e6:	11 24       	eor	r1, r1
     9e8:	0f 90       	pop	r0
     9ea:	0f be       	out	0x3f, r0	; 63
     9ec:	0f 90       	pop	r0
     9ee:	1f 90       	pop	r1
     9f0:	18 95       	reti

000009f2 <__vector_14>:
ISR(TIMER1_OVF_vect){ }
     9f2:	1f 92       	push	r1
     9f4:	0f 92       	push	r0
     9f6:	0f b6       	in	r0, 0x3f	; 63
     9f8:	0f 92       	push	r0
     9fa:	11 24       	eor	r1, r1
     9fc:	0f 90       	pop	r0
     9fe:	0f be       	out	0x3f, r0	; 63
     a00:	0f 90       	pop	r0
     a02:	1f 90       	pop	r1
     a04:	18 95       	reti

00000a06 <__vector_10>:
ISR(TIMER2_OVF_vect){ }
     a06:	1f 92       	push	r1
     a08:	0f 92       	push	r0
     a0a:	0f b6       	in	r0, 0x3f	; 63
     a0c:	0f 92       	push	r0
     a0e:	11 24       	eor	r1, r1
     a10:	0f 90       	pop	r0
     a12:	0f be       	out	0x3f, r0	; 63
     a14:	0f 90       	pop	r0
     a16:	1f 90       	pop	r1
     a18:	18 95       	reti

00000a1a <__vector_25>:
ISR(TIMER3_CAPT_vect){ }
     a1a:	1f 92       	push	r1
     a1c:	0f 92       	push	r0
     a1e:	0f b6       	in	r0, 0x3f	; 63
     a20:	0f 92       	push	r0
     a22:	11 24       	eor	r1, r1
     a24:	0f 90       	pop	r0
     a26:	0f be       	out	0x3f, r0	; 63
     a28:	0f 90       	pop	r0
     a2a:	1f 90       	pop	r1
     a2c:	18 95       	reti

00000a2e <__vector_26>:
ISR(TIMER3_COMPA_vect){ }
     a2e:	1f 92       	push	r1
     a30:	0f 92       	push	r0
     a32:	0f b6       	in	r0, 0x3f	; 63
     a34:	0f 92       	push	r0
     a36:	11 24       	eor	r1, r1
     a38:	0f 90       	pop	r0
     a3a:	0f be       	out	0x3f, r0	; 63
     a3c:	0f 90       	pop	r0
     a3e:	1f 90       	pop	r1
     a40:	18 95       	reti

00000a42 <__vector_27>:
ISR(TIMER3_COMPB_vect){ }
     a42:	1f 92       	push	r1
     a44:	0f 92       	push	r0
     a46:	0f b6       	in	r0, 0x3f	; 63
     a48:	0f 92       	push	r0
     a4a:	11 24       	eor	r1, r1
     a4c:	0f 90       	pop	r0
     a4e:	0f be       	out	0x3f, r0	; 63
     a50:	0f 90       	pop	r0
     a52:	1f 90       	pop	r1
     a54:	18 95       	reti

00000a56 <__vector_28>:
ISR(TIMER3_COMPC_vect){ }
     a56:	1f 92       	push	r1
     a58:	0f 92       	push	r0
     a5a:	0f b6       	in	r0, 0x3f	; 63
     a5c:	0f 92       	push	r0
     a5e:	11 24       	eor	r1, r1
     a60:	0f 90       	pop	r0
     a62:	0f be       	out	0x3f, r0	; 63
     a64:	0f 90       	pop	r0
     a66:	1f 90       	pop	r1
     a68:	18 95       	reti

00000a6a <__vector_29>:
ISR(TIMER3_OVF_vect){ }
     a6a:	1f 92       	push	r1
     a6c:	0f 92       	push	r0
     a6e:	0f b6       	in	r0, 0x3f	; 63
     a70:	0f 92       	push	r0
     a72:	11 24       	eor	r1, r1
     a74:	0f 90       	pop	r0
     a76:	0f be       	out	0x3f, r0	; 63
     a78:	0f 90       	pop	r0
     a7a:	1f 90       	pop	r1
     a7c:	18 95       	reti

00000a7e <uart1_putc>:
{
    UART_TxHead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
    while ( UART_TxHead == UART_TxTail ){
		; /* wait for free space in buffer, Tx interrupt will send to free space [Poll] */
	}	
    UART_TxBuf[UART_TxHead] = data;
     a7e:	a0 91 db 02 	lds	r26, 0x02DB	; 0x8002db <UART1_TxHead>
     a82:	e1 e0       	ldi	r30, 0x01	; 1
     a84:	ea 0f       	add	r30, r26
     a86:	ef 73       	andi	r30, 0x3F	; 63
     a88:	e0 93 db 02 	sts	0x02DB, r30	; 0x8002db <UART1_TxHead>
     a8c:	90 91 95 02 	lds	r25, 0x0295	; 0x800295 <UART1_TxTail>
     a90:	e9 17       	cp	r30, r25
     a92:	41 f0       	breq	.+16     	; 0xaa4 <uart1_putc+0x26>
     a94:	b0 e0       	ldi	r27, 0x00	; 0
     a96:	a3 5e       	subi	r26, 0xE3	; 227
     a98:	bc 4f       	sbci	r27, 0xFC	; 252
     a9a:	8c 93       	st	X, r24
     a9c:	f0 e0       	ldi	r31, 0x00	; 0
     a9e:	e3 5e       	subi	r30, 0xE3	; 227
     aa0:	fc 4f       	sbci	r31, 0xFC	; 252
     aa2:	10 82       	st	Z, r1
     aa4:	ea e9       	ldi	r30, 0x9A	; 154
     aa6:	f0 e0       	ldi	r31, 0x00	; 0
     aa8:	80 81       	ld	r24, Z
     aaa:	80 62       	ori	r24, 0x20	; 32
     aac:	80 83       	st	Z, r24
     aae:	08 95       	ret

00000ab0 <uart1_puts>:
     ab0:	cf 93       	push	r28
     ab2:	df 93       	push	r29
     ab4:	ec 01       	movw	r28, r24
     ab6:	88 81       	ld	r24, Y
     ab8:	88 23       	and	r24, r24
     aba:	29 f0       	breq	.+10     	; 0xac6 <uart1_puts+0x16>
     abc:	21 96       	adiw	r28, 0x01	; 1
     abe:	df df       	rcall	.-66     	; 0xa7e <uart1_putc>
     ac0:	89 91       	ld	r24, Y+
     ac2:	81 11       	cpse	r24, r1
     ac4:	fc cf       	rjmp	.-8      	; 0xabe <uart1_puts+0xe>
     ac6:	df 91       	pop	r29
     ac8:	cf 91       	pop	r28
     aca:	08 95       	ret

00000acc <uart1_getc>:
     acc:	e0 91 9f 03 	lds	r30, 0x039F	; 0x80039f <UART1_RxTail>
     ad0:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <UART1_RxHead>
     ad4:	8e 17       	cp	r24, r30
     ad6:	49 f0       	breq	.+18     	; 0xaea <uart1_getc+0x1e>
     ad8:	ef 5f       	subi	r30, 0xFF	; 255
     ada:	ef 73       	andi	r30, 0x3F	; 63
     adc:	e0 93 9f 03 	sts	0x039F, r30	; 0x80039f <UART1_RxTail>
     ae0:	f0 e0       	ldi	r31, 0x00	; 0
     ae2:	ea 56       	subi	r30, 0x6A	; 106
     ae4:	fd 4f       	sbci	r31, 0xFD	; 253
     ae6:	80 81       	ld	r24, Z
     ae8:	08 95       	ret
     aea:	80 e0       	ldi	r24, 0x00	; 0
     aec:	08 95       	ret

00000aee <uart1_Rxavailable>:
     aee:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <UART1_RxHead>
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	cf 96       	adiw	r24, 0x3f	; 63
     af6:	20 91 9f 03 	lds	r18, 0x039F	; 0x80039f <UART1_RxTail>
     afa:	82 1b       	sub	r24, r18
     afc:	91 09       	sbc	r25, r1
     afe:	6f e3       	ldi	r22, 0x3F	; 63
     b00:	70 e0       	ldi	r23, 0x00	; 0
     b02:	0c 94 90 1d 	jmp	0x3b20	; 0x3b20 <__divmodhi4>
     b06:	08 95       	ret

00000b08 <uart1_Rxflush>:
     b08:	80 91 9f 03 	lds	r24, 0x039F	; 0x80039f <UART1_RxTail>
     b0c:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <UART1_RxHead>
     b10:	08 95       	ret

00000b12 <uart1_Txflush>:
     b12:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <UART1_TxTail>
     b16:	80 93 db 02 	sts	0x02DB, r24	; 0x8002db <UART1_TxHead>
     b1a:	08 95       	ret

00000b1c <__vector_18>:
/*
** interrupt
*/
/***ISR(UART0_RECEIVE_INTERRUPT)***/
ISR(UART0_RECEIVE_INTERRUPT)
{
     b1c:	1f 92       	push	r1
     b1e:	0f 92       	push	r0
     b20:	0f b6       	in	r0, 0x3f	; 63
     b22:	0f 92       	push	r0
     b24:	11 24       	eor	r1, r1
     b26:	0b b6       	in	r0, 0x3b	; 59
     b28:	0f 92       	push	r0
     b2a:	8f 93       	push	r24
     b2c:	9f 93       	push	r25
     b2e:	ef 93       	push	r30
     b30:	ff 93       	push	r31
    unsigned char tmphead;
	unsigned char data;
	unsigned char bit9;
    unsigned char usr;
    /* read UART status register and UART data register */
	usr  = UART0_STATUS;
     b32:	8b b1       	in	r24, 0x0b	; 11
    bit9 = UART0_CONTROL;
     b34:	9a b1       	in	r25, 0x0a	; 10
    bit9 = 0x01 & (bit9>>1);
    /* */
    UART_LastRxError = (usr & (_BV(FE0)|_BV(DOR0)) );
     b36:	88 71       	andi	r24, 0x18	; 24
     b38:	80 93 94 02 	sts	0x0294, r24	; 0x800294 <UART_LastRxError>
	/* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
     b3c:	e0 91 9d 03 	lds	r30, 0x039D	; 0x80039d <UART_RxHead>
     b40:	ef 5f       	subi	r30, 0xFF	; 255
     b42:	ef 73       	andi	r30, 0x3F	; 63
    if ( tmphead == UART_RxTail ) {	
     b44:	90 91 9e 03 	lds	r25, 0x039E	; 0x80039e <UART_RxTail>
     b48:	e9 13       	cpse	r30, r25
     b4a:	04 c0       	rjmp	.+8      	; 0xb54 <__vector_18+0x38>
        /* error: receive buffer overflow */
        UART_LastRxError = UART_BUFFER_OVERFLOW >> 8; 
     b4c:	82 e0       	ldi	r24, 0x02	; 2
     b4e:	80 93 94 02 	sts	0x0294, r24	; 0x800294 <UART_LastRxError>
     b52:	0f c0       	rjmp	.+30     	; 0xb72 <__vector_18+0x56>
	}else{
		data = UART0_DATA;
     b54:	9c b1       	in	r25, 0x0c	; 12
        /* store new index */
        UART_RxHead = tmphead;
     b56:	e0 93 9d 03 	sts	0x039D, r30	; 0x80039d <UART_RxHead>
		if(UART_LastRxError){
     b5a:	88 23       	and	r24, r24
     b5c:	31 f0       	breq	.+12     	; 0xb6a <__vector_18+0x4e>
			/* store indication data error in buffer */
			
			UART_RxBuf[tmphead] = 'X';
     b5e:	f0 e0       	ldi	r31, 0x00	; 0
     b60:	e0 56       	subi	r30, 0x60	; 96
     b62:	fc 4f       	sbci	r31, 0xFC	; 252
     b64:	88 e5       	ldi	r24, 0x58	; 88
     b66:	80 83       	st	Z, r24
     b68:	04 c0       	rjmp	.+8      	; 0xb72 <__vector_18+0x56>
		}else{
			/* store received data in buffer */
			UART_RxBuf[tmphead] = data;
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	e0 56       	subi	r30, 0x60	; 96
     b6e:	fc 4f       	sbci	r31, 0xFC	; 252
     b70:	90 83       	st	Z, r25
		}
    }
}
     b72:	ff 91       	pop	r31
     b74:	ef 91       	pop	r30
     b76:	9f 91       	pop	r25
     b78:	8f 91       	pop	r24
     b7a:	0f 90       	pop	r0
     b7c:	0b be       	out	0x3b, r0	; 59
     b7e:	0f 90       	pop	r0
     b80:	0f be       	out	0x3f, r0	; 63
     b82:	0f 90       	pop	r0
     b84:	1f 90       	pop	r1
     b86:	18 95       	reti

00000b88 <__vector_19>:
/***ISR(UART0_TRANSMIT_INTERRUPT)***/
ISR(UART0_TRANSMIT_INTERRUPT)
{
     b88:	1f 92       	push	r1
     b8a:	0f 92       	push	r0
     b8c:	0f b6       	in	r0, 0x3f	; 63
     b8e:	0f 92       	push	r0
     b90:	11 24       	eor	r1, r1
     b92:	0b b6       	in	r0, 0x3b	; 59
     b94:	0f 92       	push	r0
     b96:	8f 93       	push	r24
     b98:	9f 93       	push	r25
     b9a:	ef 93       	push	r30
     b9c:	ff 93       	push	r31
	uint8_t tail = UART_TxTail;
     b9e:	e0 91 d8 02 	lds	r30, 0x02D8	; 0x8002d8 <UART_TxTail>
	UART_TxTail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
     ba2:	81 e0       	ldi	r24, 0x01	; 1
     ba4:	8e 0f       	add	r24, r30
     ba6:	8f 73       	andi	r24, 0x3F	; 63
     ba8:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <UART_TxTail>
	UART0_DATA = UART_TxBuf[tail];
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	e3 5a       	subi	r30, 0xA3	; 163
     bb0:	fc 4f       	sbci	r31, 0xFC	; 252
     bb2:	80 81       	ld	r24, Z
     bb4:	8c b9       	out	0x0c, r24	; 12
	if ( UART_TxTail == UART_TxHead ) {
     bb6:	90 91 d8 02 	lds	r25, 0x02D8	; 0x8002d8 <UART_TxTail>
     bba:	80 91 93 02 	lds	r24, 0x0293	; 0x800293 <UART_TxHead>
     bbe:	98 13       	cpse	r25, r24
     bc0:	01 c0       	rjmp	.+2      	; 0xbc4 <__vector_19+0x3c>
		UART0_CONTROL &= ~_BV(UART0_UDRIE);
     bc2:	55 98       	cbi	0x0a, 5	; 10
	}
}
     bc4:	ff 91       	pop	r31
     bc6:	ef 91       	pop	r30
     bc8:	9f 91       	pop	r25
     bca:	8f 91       	pop	r24
     bcc:	0f 90       	pop	r0
     bce:	0b be       	out	0x3b, r0	; 59
     bd0:	0f 90       	pop	r0
     bd2:	0f be       	out	0x3f, r0	; 63
     bd4:	0f 90       	pop	r0
     bd6:	1f 90       	pop	r1
     bd8:	18 95       	reti

00000bda <UART1enable>:
/*
** these functions are only for ATmegas with two USART
*/
UART1 UART1enable(unsigned int baudrate, unsigned int FDbits, unsigned int Stopbits, unsigned int Parity )
{
     bda:	0f 93       	push	r16
     bdc:	1f 93       	push	r17
     bde:	cf 93       	push	r28
     be0:	df 93       	push	r29
     be2:	fc 01       	movw	r30, r24
	/***LOCAL VARIABLES***/
	uint8_t tSREG;
	tSREG=SREG;
     be4:	bf b7       	in	r27, 0x3f	; 63
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
     be6:	8f b7       	in	r24, 0x3f	; 63
     be8:	8f 77       	andi	r24, 0x7F	; 127
     bea:	8f bf       	out	0x3f, r24	; 63
	/***GLOBAL VARIABLES INIC***/
    UART1_TxHead = 0;
     bec:	10 92 db 02 	sts	0x02DB, r1	; 0x8002db <UART1_TxHead>
    UART1_TxTail = 0;
     bf0:	10 92 95 02 	sts	0x0295, r1	; 0x800295 <UART1_TxTail>
    UART1_RxHead = 0;
     bf4:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <UART1_RxHead>
    UART1_RxTail = 0;
     bf8:	10 92 9f 03 	sts	0x039F, r1	; 0x80039f <UART1_RxTail>
	uart1_index=0;
     bfc:	10 92 d7 02 	sts	0x02D7, r1	; 0x8002d7 <uart1_index+0x1>
     c00:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <uart1_index>
	uart1_msg[0]='\0';
     c04:	10 92 dc 02 	sts	0x02DC, r1	; 0x8002dc <uart1_msg>
	/***struct***/
	UART1 uart;
	//local variables
	uart.ubrr=baudrate;
     c08:	a6 2f       	mov	r26, r22
	uart.puts=uart1_puts;
	uart.Rxavailable=uart1_Rxavailable;
	uart.Rxflush=uart1_Rxflush;
	uart.Txflush=uart1_Txflush;
    /* Set baud rate */
    if ( baudrate & 0x8000 ) 
     c0a:	77 23       	and	r23, r23
     c0c:	24 f4       	brge	.+8      	; 0xc16 <UART1enable+0x3c>
    {
    	UART1_STATUS = (1<<U2X1);  //Enable 2x speed 
     c0e:	82 e0       	ldi	r24, 0x02	; 2
     c10:	80 93 9b 00 	sts	0x009B, r24	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
		baudrate &= ~0x8000;
     c14:	7f 77       	andi	r23, 0x7F	; 127
    }
    UBRR1H = (unsigned char)(baudrate>>8);
     c16:	70 93 98 00 	sts	0x0098, r23	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
    UBRR1L = (unsigned char) baudrate;
     c1a:	60 93 99 00 	sts	0x0099, r22	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART1_CONTROL = _BV(RXCIE1)|(1<<RXEN1)|(1<<TXEN1);
     c1e:	88 e9       	ldi	r24, 0x98	; 152
     c20:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
		uart.FDbits=8;
		uart.Stopbits=1;
		uart.Parity=0;
    #else
    /***Parameters***/
    	switch(FDbits){
     c24:	47 30       	cpi	r20, 0x07	; 7
     c26:	51 05       	cpc	r21, r1
     c28:	41 f1       	breq	.+80     	; 0xc7a <UART1enable+0xa0>
     c2a:	40 f4       	brcc	.+16     	; 0xc3c <UART1enable+0x62>
     c2c:	45 30       	cpi	r20, 0x05	; 5
     c2e:	51 05       	cpc	r21, r1
     c30:	09 f4       	brne	.+2      	; 0xc34 <UART1enable+0x5a>
     c32:	41 c0       	rjmp	.+130    	; 0xcb6 <UART1enable+0xdc>
     c34:	46 30       	cpi	r20, 0x06	; 6
     c36:	51 05       	cpc	r21, r1
     c38:	79 f1       	breq	.+94     	; 0xc98 <UART1enable+0xbe>
     c3a:	49 c0       	rjmp	.+146    	; 0xcce <UART1enable+0xf4>
     c3c:	48 30       	cpi	r20, 0x08	; 8
     c3e:	51 05       	cpc	r21, r1
     c40:	81 f0       	breq	.+32     	; 0xc62 <UART1enable+0x88>
     c42:	49 30       	cpi	r20, 0x09	; 9
     c44:	51 05       	cpc	r21, r1
     c46:	09 f0       	breq	.+2      	; 0xc4a <UART1enable+0x70>
     c48:	42 c0       	rjmp	.+132    	; 0xcce <UART1enable+0xf4>
			case 9:
				UART1_CONTROL |= (1<<UCSZ12);
     c4a:	ca e9       	ldi	r28, 0x9A	; 154
     c4c:	d0 e0       	ldi	r29, 0x00	; 0
     c4e:	88 81       	ld	r24, Y
     c50:	84 60       	ori	r24, 0x04	; 4
     c52:	88 83       	st	Y, r24
				UCSR1C |= (3<<UCSZ10);
     c54:	cd e9       	ldi	r28, 0x9D	; 157
     c56:	d0 e0       	ldi	r29, 0x00	; 0
     c58:	88 81       	ld	r24, Y
     c5a:	86 60       	ori	r24, 0x06	; 6
     c5c:	88 83       	st	Y, r24
				uart.FDbits=9;
     c5e:	49 e0       	ldi	r20, 0x09	; 9
				break;
     c60:	41 c0       	rjmp	.+130    	; 0xce4 <UART1enable+0x10a>
			case 8:
				UART1_CONTROL &= ~(1<<UCSZ12);
     c62:	ca e9       	ldi	r28, 0x9A	; 154
     c64:	d0 e0       	ldi	r29, 0x00	; 0
     c66:	88 81       	ld	r24, Y
     c68:	8b 7f       	andi	r24, 0xFB	; 251
     c6a:	88 83       	st	Y, r24
				UCSR1C |= (3<<UCSZ10);
     c6c:	cd e9       	ldi	r28, 0x9D	; 157
     c6e:	d0 e0       	ldi	r29, 0x00	; 0
     c70:	88 81       	ld	r24, Y
     c72:	86 60       	ori	r24, 0x06	; 6
     c74:	88 83       	st	Y, r24
				uart.FDbits=8;
     c76:	48 e0       	ldi	r20, 0x08	; 8
				break;
     c78:	35 c0       	rjmp	.+106    	; 0xce4 <UART1enable+0x10a>
			case 7:	
				UART1_CONTROL &= ~(1<<UCSZ12);
     c7a:	ca e9       	ldi	r28, 0x9A	; 154
     c7c:	d0 e0       	ldi	r29, 0x00	; 0
     c7e:	88 81       	ld	r24, Y
     c80:	8b 7f       	andi	r24, 0xFB	; 251
     c82:	88 83       	st	Y, r24
				UCSR1C |= (1<<UCSZ11);
     c84:	cd e9       	ldi	r28, 0x9D	; 157
     c86:	d0 e0       	ldi	r29, 0x00	; 0
     c88:	88 81       	ld	r24, Y
     c8a:	84 60       	ori	r24, 0x04	; 4
     c8c:	88 83       	st	Y, r24
				UCSR1C &= ~(1<<UCSZ10);
     c8e:	88 81       	ld	r24, Y
     c90:	8d 7f       	andi	r24, 0xFD	; 253
     c92:	88 83       	st	Y, r24
				uart.FDbits=7;
     c94:	47 e0       	ldi	r20, 0x07	; 7
				break;
     c96:	26 c0       	rjmp	.+76     	; 0xce4 <UART1enable+0x10a>
			case 6:	
				UART1_CONTROL &= ~(1<<UCSZ12);
     c98:	ca e9       	ldi	r28, 0x9A	; 154
     c9a:	d0 e0       	ldi	r29, 0x00	; 0
     c9c:	88 81       	ld	r24, Y
     c9e:	8b 7f       	andi	r24, 0xFB	; 251
     ca0:	88 83       	st	Y, r24
				UCSR1C &= ~(1<<UCSZ11);
     ca2:	cd e9       	ldi	r28, 0x9D	; 157
     ca4:	d0 e0       	ldi	r29, 0x00	; 0
     ca6:	88 81       	ld	r24, Y
     ca8:	8b 7f       	andi	r24, 0xFB	; 251
     caa:	88 83       	st	Y, r24
				UCSR1C |= (1<<UCSZ10);
     cac:	88 81       	ld	r24, Y
     cae:	82 60       	ori	r24, 0x02	; 2
     cb0:	88 83       	st	Y, r24
				uart.FDbits=6;
     cb2:	46 e0       	ldi	r20, 0x06	; 6
				break;
     cb4:	17 c0       	rjmp	.+46     	; 0xce4 <UART1enable+0x10a>
			case 5:	
				UART1_CONTROL &= ~(1<<UCSZ12);
     cb6:	ca e9       	ldi	r28, 0x9A	; 154
     cb8:	d0 e0       	ldi	r29, 0x00	; 0
     cba:	88 81       	ld	r24, Y
     cbc:	8b 7f       	andi	r24, 0xFB	; 251
     cbe:	88 83       	st	Y, r24
				UCSR1C &= ~(3<<UCSZ10);
     cc0:	cd e9       	ldi	r28, 0x9D	; 157
     cc2:	d0 e0       	ldi	r29, 0x00	; 0
     cc4:	88 81       	ld	r24, Y
     cc6:	89 7f       	andi	r24, 0xF9	; 249
     cc8:	88 83       	st	Y, r24
				uart.FDbits=5;
     cca:	45 e0       	ldi	r20, 0x05	; 5
				break;
     ccc:	0b c0       	rjmp	.+22     	; 0xce4 <UART1enable+0x10a>
			default:
				UART1_CONTROL &= ~(1<<UCSZ12);
     cce:	ca e9       	ldi	r28, 0x9A	; 154
     cd0:	d0 e0       	ldi	r29, 0x00	; 0
     cd2:	88 81       	ld	r24, Y
     cd4:	8b 7f       	andi	r24, 0xFB	; 251
     cd6:	88 83       	st	Y, r24
				UCSR1C |= (3<<UCSZ10);
     cd8:	cd e9       	ldi	r28, 0x9D	; 157
     cda:	d0 e0       	ldi	r29, 0x00	; 0
     cdc:	88 81       	ld	r24, Y
     cde:	86 60       	ori	r24, 0x06	; 6
     ce0:	88 83       	st	Y, r24
				uart.FDbits=8;
     ce2:	48 e0       	ldi	r20, 0x08	; 8
				break;
		}
		switch(Stopbits){
     ce4:	21 30       	cpi	r18, 0x01	; 1
     ce6:	31 05       	cpc	r19, r1
     ce8:	21 f0       	breq	.+8      	; 0xcf2 <UART1enable+0x118>
     cea:	22 30       	cpi	r18, 0x02	; 2
     cec:	31 05       	cpc	r19, r1
     cee:	41 f0       	breq	.+16     	; 0xd00 <UART1enable+0x126>
     cf0:	0e c0       	rjmp	.+28     	; 0xd0e <UART1enable+0x134>
				case 1:
					UCSR1C &= ~(1<<USBS1);
     cf2:	cd e9       	ldi	r28, 0x9D	; 157
     cf4:	d0 e0       	ldi	r29, 0x00	; 0
     cf6:	88 81       	ld	r24, Y
     cf8:	87 7f       	andi	r24, 0xF7	; 247
     cfa:	88 83       	st	Y, r24
					uart.Stopbits=1;
     cfc:	21 e0       	ldi	r18, 0x01	; 1
					break;
     cfe:	0d c0       	rjmp	.+26     	; 0xd1a <UART1enable+0x140>
				case 2:
					UCSR1C |= (1<<USBS1);
     d00:	cd e9       	ldi	r28, 0x9D	; 157
     d02:	d0 e0       	ldi	r29, 0x00	; 0
     d04:	88 81       	ld	r24, Y
     d06:	88 60       	ori	r24, 0x08	; 8
     d08:	88 83       	st	Y, r24
					uart.Stopbits=2;
     d0a:	22 e0       	ldi	r18, 0x02	; 2
					break;
     d0c:	06 c0       	rjmp	.+12     	; 0xd1a <UART1enable+0x140>
				default:
					UCSR1C &= ~(1<<USBS1);
     d0e:	cd e9       	ldi	r28, 0x9D	; 157
     d10:	d0 e0       	ldi	r29, 0x00	; 0
     d12:	88 81       	ld	r24, Y
     d14:	87 7f       	andi	r24, 0xF7	; 247
     d16:	88 83       	st	Y, r24
					uart.Stopbits=1;
     d18:	21 e0       	ldi	r18, 0x01	; 1
					break;
		}
		switch(Parity){
     d1a:	02 30       	cpi	r16, 0x02	; 2
     d1c:	11 05       	cpc	r17, r1
     d1e:	61 f0       	breq	.+24     	; 0xd38 <UART1enable+0x15e>
     d20:	03 30       	cpi	r16, 0x03	; 3
     d22:	11 05       	cpc	r17, r1
     d24:	99 f0       	breq	.+38     	; 0xd4c <UART1enable+0x172>
     d26:	01 2b       	or	r16, r17
     d28:	c1 f4       	brne	.+48     	; 0xd5a <UART1enable+0x180>
			case 0://NONE
				UCSR1C &= ~(3<<UPM10);
     d2a:	cd e9       	ldi	r28, 0x9D	; 157
     d2c:	d0 e0       	ldi	r29, 0x00	; 0
     d2e:	88 81       	ld	r24, Y
     d30:	8f 7c       	andi	r24, 0xCF	; 207
     d32:	88 83       	st	Y, r24
				uart.Parity=0;
     d34:	90 e0       	ldi	r25, 0x00	; 0
				break;
     d36:	17 c0       	rjmp	.+46     	; 0xd66 <UART1enable+0x18c>
			case 2://EVEN
				UCSR1C |= (1<<UPM11);
     d38:	cd e9       	ldi	r28, 0x9D	; 157
     d3a:	d0 e0       	ldi	r29, 0x00	; 0
     d3c:	88 81       	ld	r24, Y
     d3e:	80 62       	ori	r24, 0x20	; 32
     d40:	88 83       	st	Y, r24
				UCSR1C &= ~(1<<UPM10);
     d42:	88 81       	ld	r24, Y
     d44:	8f 7e       	andi	r24, 0xEF	; 239
     d46:	88 83       	st	Y, r24
				uart.Parity=2;
     d48:	92 e0       	ldi	r25, 0x02	; 2
				break;
     d4a:	0d c0       	rjmp	.+26     	; 0xd66 <UART1enable+0x18c>
			case 3://ODD
				UCSR1C |= (3<<UPM10);
     d4c:	cd e9       	ldi	r28, 0x9D	; 157
     d4e:	d0 e0       	ldi	r29, 0x00	; 0
     d50:	88 81       	ld	r24, Y
     d52:	80 63       	ori	r24, 0x30	; 48
     d54:	88 83       	st	Y, r24
				uart.Parity=3;
     d56:	93 e0       	ldi	r25, 0x03	; 3
				break;	
     d58:	06 c0       	rjmp	.+12     	; 0xd66 <UART1enable+0x18c>
			default:
				UCSR1C &= ~(3<<UPM10);
     d5a:	cd e9       	ldi	r28, 0x9D	; 157
     d5c:	d0 e0       	ldi	r29, 0x00	; 0
     d5e:	88 81       	ld	r24, Y
     d60:	8f 7c       	andi	r24, 0xCF	; 207
     d62:	88 83       	st	Y, r24
				uart.Parity=0;
     d64:	90 e0       	ldi	r25, 0x00	; 0
				break;
		}
    #endif
	//UART1_CONTROL &= ~_BV(UART1_UDRIE);
	SREG=tSREG;
     d66:	bf bf       	out	0x3f, r27	; 63
	SREG|=(1<<GLOBAL_INTERRUPT_ENABLE);
     d68:	8f b7       	in	r24, 0x3f	; 63
     d6a:	80 68       	ori	r24, 0x80	; 128
     d6c:	8f bf       	out	0x3f, r24	; 63
	/******/
	return uart;
     d6e:	a0 83       	st	Z, r26
     d70:	41 83       	std	Z+1, r20	; 0x01
     d72:	22 83       	std	Z+2, r18	; 0x02
     d74:	93 83       	std	Z+3, r25	; 0x03
     d76:	8e ee       	ldi	r24, 0xEE	; 238
     d78:	96 e0       	ldi	r25, 0x06	; 6
     d7a:	95 83       	std	Z+5, r25	; 0x05
     d7c:	84 83       	std	Z+4, r24	; 0x04
     d7e:	86 e6       	ldi	r24, 0x66	; 102
     d80:	95 e0       	ldi	r25, 0x05	; 5
     d82:	97 83       	std	Z+7, r25	; 0x07
     d84:	86 83       	std	Z+6, r24	; 0x06
     d86:	8f e3       	ldi	r24, 0x3F	; 63
     d88:	95 e0       	ldi	r25, 0x05	; 5
     d8a:	91 87       	std	Z+9, r25	; 0x09
     d8c:	80 87       	std	Z+8, r24	; 0x08
     d8e:	88 e5       	ldi	r24, 0x58	; 88
     d90:	95 e0       	ldi	r25, 0x05	; 5
     d92:	93 87       	std	Z+11, r25	; 0x0b
     d94:	82 87       	std	Z+10, r24	; 0x0a
     d96:	87 e7       	ldi	r24, 0x77	; 119
     d98:	95 e0       	ldi	r25, 0x05	; 5
     d9a:	95 87       	std	Z+13, r25	; 0x0d
     d9c:	84 87       	std	Z+12, r24	; 0x0c
     d9e:	84 e8       	ldi	r24, 0x84	; 132
     da0:	95 e0       	ldi	r25, 0x05	; 5
     da2:	97 87       	std	Z+15, r25	; 0x0f
     da4:	86 87       	std	Z+14, r24	; 0x0e
     da6:	89 e8       	ldi	r24, 0x89	; 137
     da8:	95 e0       	ldi	r25, 0x05	; 5
     daa:	91 8b       	std	Z+17, r25	; 0x11
     dac:	80 8b       	std	Z+16, r24	; 0x10
}
     dae:	cf 01       	movw	r24, r30
     db0:	df 91       	pop	r29
     db2:	cf 91       	pop	r28
     db4:	1f 91       	pop	r17
     db6:	0f 91       	pop	r16
     db8:	08 95       	ret

00000dba <UART1_Rx_pop>:
	return (UART1_LastRxError << 8) + data;
}
/***unsigned char UART1_Rx_pop(void)***/
unsigned char UART1_Rx_pop(void)
{
	if( UART1_RxTail == UART1_RxHead )
     dba:	e0 91 9f 03 	lds	r30, 0x039F	; 0x80039f <UART1_RxTail>
     dbe:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <UART1_RxHead>
     dc2:	e8 17       	cp	r30, r24
     dc4:	49 f0       	breq	.+18     	; 0xdd8 <UART1_Rx_pop+0x1e>
		return (unsigned char)UART_NO_DATA;
	UART1_RxTail = (UART1_RxTail + 1) & UART_RX_BUFFER_MASK;
     dc6:	ef 5f       	subi	r30, 0xFF	; 255
     dc8:	ef 73       	andi	r30, 0x3F	; 63
     dca:	e0 93 9f 03 	sts	0x039F, r30	; 0x80039f <UART1_RxTail>
	return UART1_RxBuf[UART1_RxTail];
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	ea 56       	subi	r30, 0x6A	; 106
     dd2:	fd 4f       	sbci	r31, 0xFD	; 253
     dd4:	80 81       	ld	r24, Z
     dd6:	08 95       	ret
}
/***unsigned char UART1_Rx_pop(void)***/
unsigned char UART1_Rx_pop(void)
{
	if( UART1_RxTail == UART1_RxHead )
		return (unsigned char)UART_NO_DATA;
     dd8:	80 e0       	ldi	r24, 0x00	; 0
	UART1_RxTail = (UART1_RxTail + 1) & UART_RX_BUFFER_MASK;
	return UART1_RxBuf[UART1_RxTail];
}
     dda:	08 95       	ret

00000ddc <uart1_read>:
    while (*s) 
      uart1_putc(*s++);
}
/***char* uart1_read(void)***/
char* uart1_read(void)
{
     ddc:	cf 93       	push	r28
     dde:	df 93       	push	r29
	char* ret;
	ret="\0";
	if((UART1_RxTail != UART1_RxHead) && (uart1_index < UART_RX_BUFFER_MASK)){
     de0:	90 91 9f 03 	lds	r25, 0x039F	; 0x80039f <UART1_RxTail>
     de4:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <UART1_RxHead>
     de8:	98 17       	cp	r25, r24
     dea:	d9 f0       	breq	.+54     	; 0xe22 <uart1_read+0x46>
     dec:	c0 91 d6 02 	lds	r28, 0x02D6	; 0x8002d6 <uart1_index>
     df0:	d0 91 d7 02 	lds	r29, 0x02D7	; 0x8002d7 <uart1_index+0x1>
     df4:	cf 33       	cpi	r28, 0x3F	; 63
     df6:	d1 05       	cpc	r29, r1
     df8:	a4 f4       	brge	.+40     	; 0xe22 <uart1_read+0x46>
		uart1_msg[uart1_index]=UART1_Rx_pop();
     dfa:	df df       	rcall	.-66     	; 0xdba <UART1_Rx_pop>
     dfc:	c4 52       	subi	r28, 0x24	; 36
     dfe:	dd 4f       	sbci	r29, 0xFD	; 253
     e00:	88 83       	st	Y, r24
		uart1_index++;
     e02:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <uart1_index>
     e06:	90 91 d7 02 	lds	r25, 0x02D7	; 0x8002d7 <uart1_index+0x1>
     e0a:	01 96       	adiw	r24, 0x01	; 1
     e0c:	90 93 d7 02 	sts	0x02D7, r25	; 0x8002d7 <uart1_index+0x1>
     e10:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <uart1_index>
		uart1_msg[uart1_index]='\0';
     e14:	fc 01       	movw	r30, r24
     e16:	e4 52       	subi	r30, 0x24	; 36
     e18:	fd 4f       	sbci	r31, 0xFD	; 253
     e1a:	10 82       	st	Z, r1
}
/***char* uart1_read(void)***/
char* uart1_read(void)
{
	char* ret;
	ret="\0";
     e1c:	80 e1       	ldi	r24, 0x10	; 16
     e1e:	91 e0       	ldi	r25, 0x01	; 1
	if((UART1_RxTail != UART1_RxHead) && (uart1_index < UART_RX_BUFFER_MASK)){
		uart1_msg[uart1_index]=UART1_Rx_pop();
		uart1_index++;
		uart1_msg[uart1_index]='\0';
     e20:	06 c0       	rjmp	.+12     	; 0xe2e <uart1_read+0x52>
	}else{
		uart1_index=0;
     e22:	10 92 d7 02 	sts	0x02D7, r1	; 0x8002d7 <uart1_index+0x1>
     e26:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <uart1_index>
		ret=uart1_msg;
     e2a:	8c ed       	ldi	r24, 0xDC	; 220
     e2c:	92 e0       	ldi	r25, 0x02	; 2
	}
	return ret;
}
     e2e:	df 91       	pop	r29
     e30:	cf 91       	pop	r28
     e32:	08 95       	ret

00000e34 <__vector_30>:
/*
** interrupt
*/
/***SIGNAL(UART1_RECEIVE_INTERRUPT)***/
SIGNAL(UART1_RECEIVE_INTERRUPT)
{
     e34:	1f 92       	push	r1
     e36:	0f 92       	push	r0
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	0f 92       	push	r0
     e3c:	11 24       	eor	r1, r1
     e3e:	0b b6       	in	r0, 0x3b	; 59
     e40:	0f 92       	push	r0
     e42:	8f 93       	push	r24
     e44:	9f 93       	push	r25
     e46:	ef 93       	push	r30
     e48:	ff 93       	push	r31
    unsigned char tmphead;
	unsigned char data;
	unsigned char bit9;
    unsigned char usr;
    /* read UART status register and UART data register */
	usr  = UART1_STATUS;
     e4a:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    bit9 = UART1_CONTROL;
     e4e:	90 91 9a 00 	lds	r25, 0x009A	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
    bit9 = 0x01 & (bit9>>1);
    /* */
    UART1_LastRxError = (usr & (_BV(FE1)|_BV(DOR1)));
     e52:	88 71       	andi	r24, 0x18	; 24
     e54:	80 93 da 02 	sts	0x02DA, r24	; 0x8002da <UART1_LastRxError>
	/* calculate buffer index */
    tmphead = ( UART1_RxHead + 1) & UART_RX_BUFFER_MASK;
     e58:	e0 91 d9 02 	lds	r30, 0x02D9	; 0x8002d9 <UART1_RxHead>
     e5c:	ef 5f       	subi	r30, 0xFF	; 255
     e5e:	ef 73       	andi	r30, 0x3F	; 63
    if ( tmphead == UART1_RxTail ) {	
     e60:	90 91 9f 03 	lds	r25, 0x039F	; 0x80039f <UART1_RxTail>
     e64:	e9 13       	cpse	r30, r25
     e66:	04 c0       	rjmp	.+8      	; 0xe70 <__vector_30+0x3c>
        /* error: receive buffer overflow, caracter is lost*/
        UART1_LastRxError = UART_BUFFER_OVERFLOW >> 8; 
     e68:	82 e0       	ldi	r24, 0x02	; 2
     e6a:	80 93 da 02 	sts	0x02DA, r24	; 0x8002da <UART1_LastRxError>
     e6e:	10 c0       	rjmp	.+32     	; 0xe90 <__vector_30+0x5c>
	}else{
		data = UART1_DATA;
     e70:	90 91 9c 00 	lds	r25, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
        /* store new index */
        UART1_RxHead = tmphead;
     e74:	e0 93 d9 02 	sts	0x02D9, r30	; 0x8002d9 <UART1_RxHead>
		if(UART1_LastRxError){
     e78:	88 23       	and	r24, r24
     e7a:	31 f0       	breq	.+12     	; 0xe88 <__vector_30+0x54>
			/* store indication data error in buffer */
			UART1_RxBuf[tmphead] = 'X';
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	ea 56       	subi	r30, 0x6A	; 106
     e80:	fd 4f       	sbci	r31, 0xFD	; 253
     e82:	88 e5       	ldi	r24, 0x58	; 88
     e84:	80 83       	st	Z, r24
     e86:	04 c0       	rjmp	.+8      	; 0xe90 <__vector_30+0x5c>
		}else{
			/* store received data in buffer */
			UART1_RxBuf[tmphead] = data;
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	ea 56       	subi	r30, 0x6A	; 106
     e8c:	fd 4f       	sbci	r31, 0xFD	; 253
     e8e:	90 83       	st	Z, r25
		}
    }
}
     e90:	ff 91       	pop	r31
     e92:	ef 91       	pop	r30
     e94:	9f 91       	pop	r25
     e96:	8f 91       	pop	r24
     e98:	0f 90       	pop	r0
     e9a:	0b be       	out	0x3b, r0	; 59
     e9c:	0f 90       	pop	r0
     e9e:	0f be       	out	0x3f, r0	; 63
     ea0:	0f 90       	pop	r0
     ea2:	1f 90       	pop	r1
     ea4:	18 95       	reti

00000ea6 <__vector_31>:
/***SIGNAL(UART1_TRANSMIT_INTERRUPT)***/
SIGNAL(UART1_TRANSMIT_INTERRUPT)
{
     ea6:	1f 92       	push	r1
     ea8:	0f 92       	push	r0
     eaa:	0f b6       	in	r0, 0x3f	; 63
     eac:	0f 92       	push	r0
     eae:	11 24       	eor	r1, r1
     eb0:	0b b6       	in	r0, 0x3b	; 59
     eb2:	0f 92       	push	r0
     eb4:	8f 93       	push	r24
     eb6:	9f 93       	push	r25
     eb8:	ef 93       	push	r30
     eba:	ff 93       	push	r31
	uint8_t tail = UART1_TxTail;
     ebc:	e0 91 95 02 	lds	r30, 0x0295	; 0x800295 <UART1_TxTail>
	UART1_TxTail = (UART1_TxTail + 1) & UART_TX_BUFFER_MASK;
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	8e 0f       	add	r24, r30
     ec4:	8f 73       	andi	r24, 0x3F	; 63
     ec6:	80 93 95 02 	sts	0x0295, r24	; 0x800295 <UART1_TxTail>
    UART1_DATA = UART1_TxBuf[tail];
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	e3 5e       	subi	r30, 0xE3	; 227
     ece:	fc 4f       	sbci	r31, 0xFC	; 252
     ed0:	80 81       	ld	r24, Z
     ed2:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
	if ( UART1_TxTail == UART1_TxHead ) {
     ed6:	90 91 95 02 	lds	r25, 0x0295	; 0x800295 <UART1_TxTail>
     eda:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <UART1_TxHead>
     ede:	98 13       	cpse	r25, r24
     ee0:	05 c0       	rjmp	.+10     	; 0xeec <__vector_31+0x46>
        UART1_CONTROL &= ~_BV(UART1_UDRIE);
     ee2:	ea e9       	ldi	r30, 0x9A	; 154
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	8f 7d       	andi	r24, 0xDF	; 223
     eea:	80 83       	st	Z, r24
    }
}
     eec:	ff 91       	pop	r31
     eee:	ef 91       	pop	r30
     ef0:	9f 91       	pop	r25
     ef2:	8f 91       	pop	r24
     ef4:	0f 90       	pop	r0
     ef6:	0b be       	out	0x3b, r0	; 59
     ef8:	0f 90       	pop	r0
     efa:	0f be       	out	0x3f, r0	; 63
     efc:	0f 90       	pop	r0
     efe:	1f 90       	pop	r1
     f00:	18 95       	reti

00000f02 <FUNCpinmatch>:
}
//pinmatch
uint8_t FUNCpinmatch(uint8_t match, uint8_t pin, uint8_t HL)
{
	uint8_t result;
	result=match&pin;
     f02:	68 23       	and	r22, r24
	if(HL){
     f04:	44 23       	and	r20, r20
     f06:	21 f0       	breq	.+8      	; 0xf10 <FUNCpinmatch+0xe>
		if(result==match);
     f08:	86 17       	cp	r24, r22
     f0a:	21 f0       	breq	.+8      	; 0xf14 <FUNCpinmatch+0x12>
		else
			result=0;
     f0c:	80 e0       	ldi	r24, 0x00	; 0
     f0e:	08 95       	ret
	}else{
		if(result)
     f10:	61 11       	cpse	r22, r1
			result=0;
     f12:	80 e0       	ldi	r24, 0x00	; 0
		else
			result=match;
	}
	return result;
}
     f14:	08 95       	ret

00000f16 <FUNChmerge>:
// hmerge
uint8_t FUNChmerge(uint8_t X, uint8_t Y)
{
	return (X | Y);
}
     f16:	86 2b       	or	r24, r22
     f18:	08 95       	ret

00000f1a <FUNClmerge>:
// lmerge
uint8_t FUNClmerge(uint8_t X, uint8_t Y)
{
	return (X & Y);
}
     f1a:	86 23       	and	r24, r22
     f1c:	08 95       	ret

00000f1e <FUNChh>:
uint8_t FUNChh(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xi&xf;
	return i;
}
     f1e:	86 23       	and	r24, r22
     f20:	08 95       	ret

00000f22 <FUNCll>:
// ll
uint8_t FUNCll(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xi|xf;
	return ~i;
     f22:	86 2b       	or	r24, r22
}
     f24:	80 95       	com	r24
     f26:	08 95       	ret

00000f28 <FUNClh>:
// lh
uint8_t FUNClh(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xi^xf;
     f28:	86 27       	eor	r24, r22
	i&=xf;
	return i;
}
     f2a:	86 23       	and	r24, r22
     f2c:	08 95       	ret

00000f2e <FUNChl>:
// hl
uint8_t FUNChl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xf^xi;
     f2e:	60 95       	com	r22
	i&=xi;
	return i;
}
     f30:	86 23       	and	r24, r22
     f32:	08 95       	ret

00000f34 <FUNCdiff>:
// diff
uint8_t FUNCdiff(uint8_t xi, uint8_t xf)
{
	return xf^xi;
}
     f34:	86 27       	eor	r24, r22
     f36:	08 95       	ret

00000f38 <FUNCswap>:
// interchange *px and *py
void FUNCswap(long *px, long *py)
{
     f38:	cf 92       	push	r12
     f3a:	df 92       	push	r13
     f3c:	ef 92       	push	r14
     f3e:	ff 92       	push	r15
     f40:	0f 93       	push	r16
     f42:	1f 93       	push	r17
	long temp;
	temp = *px;
     f44:	fc 01       	movw	r30, r24
     f46:	00 81       	ld	r16, Z
     f48:	11 81       	ldd	r17, Z+1	; 0x01
     f4a:	22 81       	ldd	r18, Z+2	; 0x02
     f4c:	33 81       	ldd	r19, Z+3	; 0x03
	*px = *py;
     f4e:	fb 01       	movw	r30, r22
     f50:	c0 80       	ld	r12, Z
     f52:	d1 80       	ldd	r13, Z+1	; 0x01
     f54:	e2 80       	ldd	r14, Z+2	; 0x02
     f56:	f3 80       	ldd	r15, Z+3	; 0x03
     f58:	fc 01       	movw	r30, r24
     f5a:	c0 82       	st	Z, r12
     f5c:	d1 82       	std	Z+1, r13	; 0x01
     f5e:	e2 82       	std	Z+2, r14	; 0x02
     f60:	f3 82       	std	Z+3, r15	; 0x03
	*py = temp;
     f62:	fb 01       	movw	r30, r22
     f64:	00 83       	st	Z, r16
     f66:	11 83       	std	Z+1, r17	; 0x01
     f68:	22 83       	std	Z+2, r18	; 0x02
     f6a:	33 83       	std	Z+3, r19	; 0x03
}
     f6c:	1f 91       	pop	r17
     f6e:	0f 91       	pop	r16
     f70:	ff 90       	pop	r15
     f72:	ef 90       	pop	r14
     f74:	df 90       	pop	r13
     f76:	cf 90       	pop	r12
     f78:	08 95       	ret

00000f7a <FUNCcopy>:
// copy: copy 'from' into 'to'; assume to is big enough
void FUNCcopy(char to[], char from[])
{
	int i;
	i = 0;
	while ((to[i] = from[i]) != '\0')
     f7a:	fb 01       	movw	r30, r22
     f7c:	20 81       	ld	r18, Z
     f7e:	fc 01       	movw	r30, r24
     f80:	20 83       	st	Z, r18
     f82:	22 23       	and	r18, r18
     f84:	39 f0       	breq	.+14     	; 0xf94 <FUNCcopy+0x1a>
     f86:	db 01       	movw	r26, r22
     f88:	11 96       	adiw	r26, 0x01	; 1
     f8a:	31 96       	adiw	r30, 0x01	; 1
     f8c:	9d 91       	ld	r25, X+
     f8e:	91 93       	st	Z+, r25
     f90:	91 11       	cpse	r25, r1
     f92:	fc cf       	rjmp	.-8      	; 0xf8c <FUNCcopy+0x12>
     f94:	08 95       	ret

00000f96 <FUNCsqueeze>:
		++i;
}
// squeeze: delete all c from s
void FUNCsqueeze(char s[], int c)
{
     f96:	cf 93       	push	r28
     f98:	df 93       	push	r29
     f9a:	ec 01       	movw	r28, r24
	int i, j;
	for (i = j = 0; s[i] != '\0'; i++)
     f9c:	98 81       	ld	r25, Y
     f9e:	99 23       	and	r25, r25
     fa0:	99 f0       	breq	.+38     	; 0xfc8 <FUNCsqueeze+0x32>
     fa2:	fe 01       	movw	r30, r28
     fa4:	31 96       	adiw	r30, 0x01	; 1
     fa6:	20 e0       	ldi	r18, 0x00	; 0
     fa8:	30 e0       	ldi	r19, 0x00	; 0
		if (s[i] != c)
     faa:	49 2f       	mov	r20, r25
     fac:	50 e0       	ldi	r21, 0x00	; 0
     fae:	46 17       	cp	r20, r22
     fb0:	57 07       	cpc	r21, r23
     fb2:	31 f0       	breq	.+12     	; 0xfc0 <FUNCsqueeze+0x2a>
			s[j++] = s[i];
     fb4:	de 01       	movw	r26, r28
     fb6:	a2 0f       	add	r26, r18
     fb8:	b3 1f       	adc	r27, r19
     fba:	9c 93       	st	X, r25
     fbc:	2f 5f       	subi	r18, 0xFF	; 255
     fbe:	3f 4f       	sbci	r19, 0xFF	; 255
}
// squeeze: delete all c from s
void FUNCsqueeze(char s[], int c)
{
	int i, j;
	for (i = j = 0; s[i] != '\0'; i++)
     fc0:	91 91       	ld	r25, Z+
     fc2:	91 11       	cpse	r25, r1
     fc4:	f2 cf       	rjmp	.-28     	; 0xfaa <FUNCsqueeze+0x14>
     fc6:	02 c0       	rjmp	.+4      	; 0xfcc <FUNCsqueeze+0x36>
     fc8:	20 e0       	ldi	r18, 0x00	; 0
     fca:	30 e0       	ldi	r19, 0x00	; 0
		if (s[i] != c)
			s[j++] = s[i];
		s[j] = '\0';
     fcc:	fe 01       	movw	r30, r28
     fce:	e2 0f       	add	r30, r18
     fd0:	f3 1f       	adc	r31, r19
     fd2:	10 82       	st	Z, r1
}
     fd4:	df 91       	pop	r29
     fd6:	cf 91       	pop	r28
     fd8:	08 95       	ret

00000fda <FUNCshellsort>:
// shellsort: sort v[0]...v[n-1] into increasing order
void FUNCshellsort(int v[], int n)
{
     fda:	2f 92       	push	r2
     fdc:	3f 92       	push	r3
     fde:	4f 92       	push	r4
     fe0:	5f 92       	push	r5
     fe2:	6f 92       	push	r6
     fe4:	7f 92       	push	r7
     fe6:	8f 92       	push	r8
     fe8:	9f 92       	push	r9
     fea:	af 92       	push	r10
     fec:	bf 92       	push	r11
     fee:	cf 92       	push	r12
     ff0:	df 92       	push	r13
     ff2:	ef 92       	push	r14
     ff4:	ff 92       	push	r15
     ff6:	0f 93       	push	r16
     ff8:	1f 93       	push	r17
     ffa:	cf 93       	push	r28
     ffc:	df 93       	push	r29
     ffe:	00 d0       	rcall	.+0      	; 0x1000 <FUNCshellsort+0x26>
    1000:	00 d0       	rcall	.+0      	; 0x1002 <FUNCshellsort+0x28>
    1002:	cd b7       	in	r28, 0x3d	; 61
    1004:	de b7       	in	r29, 0x3e	; 62
    1006:	2c 01       	movw	r4, r24
    1008:	1b 01       	movw	r2, r22
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
    100a:	4b 01       	movw	r8, r22
    100c:	77 23       	and	r23, r23
    100e:	1c f4       	brge	.+6      	; 0x1016 <FUNCshellsort+0x3c>
    1010:	2f ef       	ldi	r18, 0xFF	; 255
    1012:	82 1a       	sub	r8, r18
    1014:	92 0a       	sbc	r9, r18
    1016:	95 94       	asr	r9
    1018:	87 94       	ror	r8
    101a:	18 14       	cp	r1, r8
    101c:	19 04       	cpc	r1, r9
    101e:	0c f4       	brge	.+2      	; 0x1022 <FUNCshellsort+0x48>
    1020:	51 c0       	rjmp	.+162    	; 0x10c4 <FUNCshellsort+0xea>
    1022:	6a c0       	rjmp	.+212    	; 0x10f8 <FUNCshellsort+0x11e>
		for (i = gap; i < n; i++)
			for (j=i-gap; j>=0 && v[j]>v[j+gap]; j-=gap){
    1024:	96 01       	movw	r18, r12
    1026:	dd 20       	and	r13, r13
    1028:	9c f1       	brlt	.+102    	; 0x1090 <FUNCshellsort+0xb6>
    102a:	f5 01       	movw	r30, r10
    102c:	40 81       	ld	r20, Z
    102e:	51 81       	ldd	r21, Z+1	; 0x01
    1030:	f4 01       	movw	r30, r8
    1032:	60 81       	ld	r22, Z
    1034:	71 81       	ldd	r23, Z+1	; 0x01
    1036:	64 17       	cp	r22, r20
    1038:	75 07       	cpc	r23, r21
    103a:	54 f5       	brge	.+84     	; 0x1090 <FUNCshellsort+0xb6>
    103c:	8c 01       	movw	r16, r24
    103e:	0a 0d       	add	r16, r10
    1040:	1b 1d       	adc	r17, r11
    1042:	d4 01       	movw	r26, r8
    1044:	bc 82       	std	Y+4, r11	; 0x04
    1046:	ab 82       	std	Y+3, r10	; 0x03
    1048:	ba 82       	std	Y+2, r11	; 0x02
    104a:	a9 82       	std	Y+1, r10	; 0x01
				temp = v[j];
				v[j] = v[j+gap];
    104c:	eb 81       	ldd	r30, Y+3	; 0x03
    104e:	fc 81       	ldd	r31, Y+4	; 0x04
    1050:	71 83       	std	Z+1, r23	; 0x01
    1052:	60 83       	st	Z, r22
				v[j+gap] = temp;
    1054:	11 96       	adiw	r26, 0x01	; 1
    1056:	5c 93       	st	X, r21
    1058:	4e 93       	st	-X, r20
void FUNCshellsort(int v[], int n)
{
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
		for (i = gap; i < n; i++)
			for (j=i-gap; j>=0 && v[j]>v[j+gap]; j-=gap){
    105a:	2e 19       	sub	r18, r14
    105c:	3f 09       	sbc	r19, r15
    105e:	c2 f0       	brmi	.+48     	; 0x1090 <FUNCshellsort+0xb6>
    1060:	f8 01       	movw	r30, r16
    1062:	40 81       	ld	r20, Z
    1064:	51 81       	ldd	r21, Z+1	; 0x01
    1066:	e9 81       	ldd	r30, Y+1	; 0x01
    1068:	fa 81       	ldd	r31, Y+2	; 0x02
    106a:	60 81       	ld	r22, Z
    106c:	71 81       	ldd	r23, Z+1	; 0x01
    106e:	08 0f       	add	r16, r24
    1070:	19 1f       	adc	r17, r25
    1072:	e8 0f       	add	r30, r24
    1074:	f9 1f       	adc	r31, r25
    1076:	fa 83       	std	Y+2, r31	; 0x02
    1078:	e9 83       	std	Y+1, r30	; 0x01
    107a:	eb 81       	ldd	r30, Y+3	; 0x03
    107c:	fc 81       	ldd	r31, Y+4	; 0x04
    107e:	e8 0f       	add	r30, r24
    1080:	f9 1f       	adc	r31, r25
    1082:	fc 83       	std	Y+4, r31	; 0x04
    1084:	eb 83       	std	Y+3, r30	; 0x03
    1086:	a8 0f       	add	r26, r24
    1088:	b9 1f       	adc	r27, r25
    108a:	64 17       	cp	r22, r20
    108c:	75 07       	cpc	r23, r21
    108e:	f4 f2       	brlt	.-68     	; 0x104c <FUNCshellsort+0x72>
    1090:	ff ef       	ldi	r31, 0xFF	; 255
    1092:	cf 1a       	sub	r12, r31
    1094:	df 0a       	sbc	r13, r31
    1096:	22 e0       	ldi	r18, 0x02	; 2
    1098:	a2 0e       	add	r10, r18
    109a:	b1 1c       	adc	r11, r1
    109c:	e2 e0       	ldi	r30, 0x02	; 2
    109e:	8e 0e       	add	r8, r30
    10a0:	91 1c       	adc	r9, r1
// shellsort: sort v[0]...v[n-1] into increasing order
void FUNCshellsort(int v[], int n)
{
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
		for (i = gap; i < n; i++)
    10a2:	c6 14       	cp	r12, r6
    10a4:	d7 04       	cpc	r13, r7
    10a6:	09 f0       	breq	.+2      	; 0x10aa <FUNCshellsort+0xd0>
    10a8:	bd cf       	rjmp	.-134    	; 0x1024 <FUNCshellsort+0x4a>
}
// shellsort: sort v[0]...v[n-1] into increasing order
void FUNCshellsort(int v[], int n)
{
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
    10aa:	47 01       	movw	r8, r14
    10ac:	ff 20       	and	r15, r15
    10ae:	1c f4       	brge	.+6      	; 0x10b6 <FUNCshellsort+0xdc>
    10b0:	ff ef       	ldi	r31, 0xFF	; 255
    10b2:	8f 1a       	sub	r8, r31
    10b4:	9f 0a       	sbc	r9, r31
    10b6:	95 94       	asr	r9
    10b8:	87 94       	ror	r8
    10ba:	18 14       	cp	r1, r8
    10bc:	19 04       	cpc	r1, r9
    10be:	e4 f4       	brge	.+56     	; 0x10f8 <FUNCshellsort+0x11e>
    10c0:	74 01       	movw	r14, r8
    10c2:	01 c0       	rjmp	.+2      	; 0x10c6 <FUNCshellsort+0xec>
    10c4:	74 01       	movw	r14, r8
		for (i = gap; i < n; i++)
    10c6:	82 14       	cp	r8, r2
    10c8:	93 04       	cpc	r9, r3
    10ca:	7c f7       	brge	.-34     	; 0x10aa <FUNCshellsort+0xd0>
    10cc:	64 01       	movw	r12, r8
    10ce:	ce 18       	sub	r12, r14
    10d0:	df 08       	sbc	r13, r15
    10d2:	56 01       	movw	r10, r12
    10d4:	aa 0c       	add	r10, r10
    10d6:	bb 1c       	adc	r11, r11
    10d8:	a4 0c       	add	r10, r4
    10da:	b5 1c       	adc	r11, r5
    10dc:	88 0c       	add	r8, r8
    10de:	99 1c       	adc	r9, r9
    10e0:	84 0c       	add	r8, r4
    10e2:	95 1c       	adc	r9, r5
    10e4:	31 01       	movw	r6, r2
    10e6:	6e 18       	sub	r6, r14
    10e8:	7f 08       	sbc	r7, r15
    10ea:	c7 01       	movw	r24, r14
    10ec:	88 0f       	add	r24, r24
    10ee:	99 1f       	adc	r25, r25
    10f0:	91 95       	neg	r25
    10f2:	81 95       	neg	r24
    10f4:	91 09       	sbc	r25, r1
    10f6:	96 cf       	rjmp	.-212    	; 0x1024 <FUNCshellsort+0x4a>
			for (j=i-gap; j>=0 && v[j]>v[j+gap]; j-=gap){
				temp = v[j];
				v[j] = v[j+gap];
				v[j+gap] = temp;
			}
}
    10f8:	0f 90       	pop	r0
    10fa:	0f 90       	pop	r0
    10fc:	0f 90       	pop	r0
    10fe:	0f 90       	pop	r0
    1100:	df 91       	pop	r29
    1102:	cf 91       	pop	r28
    1104:	1f 91       	pop	r17
    1106:	0f 91       	pop	r16
    1108:	ff 90       	pop	r15
    110a:	ef 90       	pop	r14
    110c:	df 90       	pop	r13
    110e:	cf 90       	pop	r12
    1110:	bf 90       	pop	r11
    1112:	af 90       	pop	r10
    1114:	9f 90       	pop	r9
    1116:	8f 90       	pop	r8
    1118:	7f 90       	pop	r7
    111a:	6f 90       	pop	r6
    111c:	5f 90       	pop	r5
    111e:	4f 90       	pop	r4
    1120:	3f 90       	pop	r3
    1122:	2f 90       	pop	r2
    1124:	08 95       	ret

00001126 <FUNCpmax>:
	if(a1 > a2){
		biggest = a1;
	}else{
		biggest = a2;
	}
	return biggest;
    1126:	86 17       	cp	r24, r22
    1128:	97 07       	cpc	r25, r23
    112a:	0c f4       	brge	.+2      	; 0x112e <FUNCpmax+0x8>
    112c:	cb 01       	movw	r24, r22
}
    112e:	08 95       	ret

00001130 <FUNCgcd>:
// common divisor
int FUNCgcd (int u, int v)
{
    1130:	9b 01       	movw	r18, r22
	int temp;
	while ( v != 0 ) {
    1132:	67 2b       	or	r22, r23
    1134:	11 f4       	brne	.+4      	; 0x113a <FUNCgcd+0xa>
    1136:	08 95       	ret
		temp = u % v;
		u = v;
		v = temp;
    1138:	9a 01       	movw	r18, r20
// common divisor
int FUNCgcd (int u, int v)
{
	int temp;
	while ( v != 0 ) {
		temp = u % v;
    113a:	b9 01       	movw	r22, r18
    113c:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <__divmodhi4>
    1140:	ac 01       	movw	r20, r24
    1142:	82 2f       	mov	r24, r18
    1144:	93 2f       	mov	r25, r19
}
// common divisor
int FUNCgcd (int u, int v)
{
	int temp;
	while ( v != 0 ) {
    1146:	41 15       	cp	r20, r1
    1148:	51 05       	cpc	r21, r1
    114a:	b1 f7       	brne	.-20     	; 0x1138 <FUNCgcd+0x8>
		temp = u % v;
		u = v;
		v = temp;
	}
	return u;
}
    114c:	08 95       	ret

0000114e <FUNCstrToInt>:
// Function to convert a string to an integer
int FUNCstrToInt (const char string[])
{
    114e:	fc 01       	movw	r30, r24
	int i, intValue, result = 0;
	for ( i = 0; string[i] >= '0' && string[i] <= '9'; ++i ){
    1150:	90 81       	ld	r25, Z
    1152:	80 ed       	ldi	r24, 0xD0	; 208
    1154:	89 0f       	add	r24, r25
    1156:	8a 30       	cpi	r24, 0x0A	; 10
    1158:	d0 f4       	brcc	.+52     	; 0x118e <FUNCstrToInt+0x40>
    115a:	31 96       	adiw	r30, 0x01	; 1
    115c:	20 e0       	ldi	r18, 0x00	; 0
    115e:	30 e0       	ldi	r19, 0x00	; 0
		intValue = string[i] - '0';
		result = result * 10 + intValue;
    1160:	a9 01       	movw	r20, r18
    1162:	44 0f       	add	r20, r20
    1164:	55 1f       	adc	r21, r21
    1166:	22 0f       	add	r18, r18
    1168:	33 1f       	adc	r19, r19
    116a:	22 0f       	add	r18, r18
    116c:	33 1f       	adc	r19, r19
    116e:	22 0f       	add	r18, r18
    1170:	33 1f       	adc	r19, r19
    1172:	42 0f       	add	r20, r18
    1174:	53 1f       	adc	r21, r19
    1176:	29 2f       	mov	r18, r25
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	20 53       	subi	r18, 0x30	; 48
    117c:	31 09       	sbc	r19, r1
    117e:	24 0f       	add	r18, r20
    1180:	35 1f       	adc	r19, r21
}
// Function to convert a string to an integer
int FUNCstrToInt (const char string[])
{
	int i, intValue, result = 0;
	for ( i = 0; string[i] >= '0' && string[i] <= '9'; ++i ){
    1182:	91 91       	ld	r25, Z+
    1184:	80 ed       	ldi	r24, 0xD0	; 208
    1186:	89 0f       	add	r24, r25
    1188:	8a 30       	cpi	r24, 0x0A	; 10
    118a:	50 f3       	brcs	.-44     	; 0x1160 <FUNCstrToInt+0x12>
    118c:	02 c0       	rjmp	.+4      	; 0x1192 <FUNCstrToInt+0x44>
	return u;
}
// Function to convert a string to an integer
int FUNCstrToInt (const char string[])
{
	int i, intValue, result = 0;
    118e:	20 e0       	ldi	r18, 0x00	; 0
    1190:	30 e0       	ldi	r19, 0x00	; 0
	for ( i = 0; string[i] >= '0' && string[i] <= '9'; ++i ){
		intValue = string[i] - '0';
		result = result * 10 + intValue;
	}
	return result;
}
    1192:	c9 01       	movw	r24, r18
    1194:	08 95       	ret

00001196 <FUNCfilter>:
uint8_t FUNCfilter(uint8_t mask, uint8_t data)
{
	uint8_t Z;
	Z=mask & data;
	return Z;
}
    1196:	86 23       	and	r24, r22
    1198:	08 95       	ret

0000119a <FUNCticks>:
// ticks
unsigned int FUNCticks(unsigned int num)
{
	unsigned int count;
	for(count=0;count<num;count++)
    119a:	00 97       	sbiw	r24, 0x00	; 0
    119c:	39 f0       	breq	.+14     	; 0x11ac <FUNCticks+0x12>
    119e:	20 e0       	ldi	r18, 0x00	; 0
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	2f 5f       	subi	r18, 0xFF	; 255
    11a4:	3f 4f       	sbci	r19, 0xFF	; 255
    11a6:	82 17       	cp	r24, r18
    11a8:	93 07       	cpc	r25, r19
    11aa:	d9 f7       	brne	.-10     	; 0x11a2 <FUNCticks+0x8>
		;
	return count;
}
    11ac:	08 95       	ret

000011ae <FUNCtwocomptoint8bit>:
// Two's Complement function
int FUNCtwocomptoint8bit(int twoscomp){
  
  //Let's see if the byte is negative
  if (twoscomp & 0B10000000){
    11ae:	87 ff       	sbrs	r24, 7
    11b0:	08 c0       	rjmp	.+16     	; 0x11c2 <FUNCtwocomptoint8bit+0x14>
    //Invert
    twoscomp = ~twoscomp + 1;
    11b2:	91 95       	neg	r25
    11b4:	81 95       	neg	r24
    11b6:	91 09       	sbc	r25, r1
	twoscomp = (twoscomp & 0B11111111);
    //Cast as int and multiply by negative one
    int value = (int)(twoscomp)*(-1);
    11b8:	99 27       	eor	r25, r25
    11ba:	91 95       	neg	r25
    11bc:	81 95       	neg	r24
    11be:	91 09       	sbc	r25, r1
    return value;
    11c0:	08 95       	ret
    //Byte is non-negative, therefore convert to decimal and display
    //Make sure we are never over 1279
    twoscomp = (twoscomp & 0B01111111);
    //Cast as int and return
    int value = (int)(twoscomp);
    return value;
    11c2:	8f 77       	andi	r24, 0x7F	; 127
    11c4:	99 27       	eor	r25, r25
  }
}
    11c6:	08 95       	ret

000011c8 <FUNCtwocomptoint10bit>:
// Two's Complement function, shifts 10 bit binary to signed integers (-512 to 512)
int FUNCtwocomptoint10bit(int twoscomp){
	
  //Let's see if the byte is negative
  if (twoscomp & 0x200){
    11c8:	91 ff       	sbrs	r25, 1
    11ca:	08 c0       	rjmp	.+16     	; 0x11dc <FUNCtwocomptoint10bit+0x14>
    //Invert
    twoscomp = ~twoscomp + 1;
    11cc:	91 95       	neg	r25
    11ce:	81 95       	neg	r24
    11d0:	91 09       	sbc	r25, r1
    twoscomp = (twoscomp & 0x3FF);
    //Cast as int and multiply by negative one
    int value = (int)(twoscomp)*(-1);
    11d2:	93 70       	andi	r25, 0x03	; 3
    11d4:	91 95       	neg	r25
    11d6:	81 95       	neg	r24
    11d8:	91 09       	sbc	r25, r1
    return value;
    11da:	08 95       	ret
    //Byte is non-negative, therefore convert to decimal and display
    twoscomp = (twoscomp & 0x1FF);
    //Cast as int and return
    //Serial.println(twoscomp);
    int value = (int)(twoscomp);
    return value;
    11dc:	91 70       	andi	r25, 0x01	; 1
  }
}
    11de:	08 95       	ret

000011e0 <FUNCtwocomptointnbit>:
// Two's Complement function, nbits
int FUNCtwocomptointnbit(int twoscomp, uint8_t nbits){
  unsigned int signmask;
  unsigned int mask;
  signmask = (1<<(nbits-1));
    11e0:	61 50       	subi	r22, 0x01	; 1
    11e2:	21 e0       	ldi	r18, 0x01	; 1
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	02 c0       	rjmp	.+4      	; 0x11ec <FUNCtwocomptointnbit+0xc>
    11e8:	22 0f       	add	r18, r18
    11ea:	33 1f       	adc	r19, r19
    11ec:	6a 95       	dec	r22
    11ee:	e2 f7       	brpl	.-8      	; 0x11e8 <FUNCtwocomptointnbit+0x8>
  mask=signmask-1;
    11f0:	a9 01       	movw	r20, r18
    11f2:	41 50       	subi	r20, 0x01	; 1
    11f4:	51 09       	sbc	r21, r1
  //Let's see if the number is negative
  if (twoscomp & signmask){
    11f6:	b9 01       	movw	r22, r18
    11f8:	68 23       	and	r22, r24
    11fa:	79 23       	and	r23, r25
    11fc:	67 2b       	or	r22, r23
    11fe:	29 f0       	breq	.+10     	; 0x120a <FUNCtwocomptointnbit+0x2a>
	twoscomp &= mask;
    twoscomp -= signmask;
    1200:	84 23       	and	r24, r20
    1202:	95 23       	and	r25, r21
    1204:	82 1b       	sub	r24, r18
    1206:	93 0b       	sbc	r25, r19
    1208:	08 95       	ret
  }else{
	  twoscomp &= mask;
    120a:	84 23       	and	r24, r20
    120c:	95 23       	and	r25, r21
  }
  return twoscomp;
}
    120e:	08 95       	ret

00001210 <FUNCdec2bcd>:
// Convert Decimal to Binary Coded Decimal (BCD)
char FUNCdec2bcd(char num)
{
	return ((num/10 * 16) + (num % 10));
    1210:	9d ec       	ldi	r25, 0xCD	; 205
    1212:	89 9f       	mul	r24, r25
    1214:	91 2d       	mov	r25, r1
    1216:	11 24       	eor	r1, r1
    1218:	96 95       	lsr	r25
    121a:	96 95       	lsr	r25
    121c:	96 95       	lsr	r25
    121e:	39 2f       	mov	r19, r25
    1220:	33 0f       	add	r19, r19
    1222:	23 2f       	mov	r18, r19
    1224:	22 0f       	add	r18, r18
    1226:	22 0f       	add	r18, r18
    1228:	23 0f       	add	r18, r19
    122a:	82 1b       	sub	r24, r18
}
    122c:	20 e1       	ldi	r18, 0x10	; 16
    122e:	92 9f       	mul	r25, r18
    1230:	80 0d       	add	r24, r0
    1232:	11 24       	eor	r1, r1
    1234:	08 95       	ret

00001236 <FUNCbcd2dec>:
// Convert Binary Coded Decimal (BCD) to Decimal
char FUNCbcd2dec(char num)
{
	return ((num/16 * 10) + (num % 16));
    1236:	98 2f       	mov	r25, r24
    1238:	92 95       	swap	r25
    123a:	9f 70       	andi	r25, 0x0F	; 15
    123c:	99 0f       	add	r25, r25
    123e:	29 2f       	mov	r18, r25
    1240:	22 0f       	add	r18, r18
    1242:	22 0f       	add	r18, r18
    1244:	92 0f       	add	r25, r18
    1246:	8f 70       	andi	r24, 0x0F	; 15
}
    1248:	89 0f       	add	r24, r25
    124a:	08 95       	ret

0000124c <FUNCresizestr>:
char* FUNCresizestr(char *string, int size)
{
    124c:	fc 01       	movw	r30, r24
	int i;
	FUNCstr[size]='\0';
    124e:	db 01       	movw	r26, r22
    1250:	a0 52       	subi	r26, 0x20	; 32
    1252:	bc 4f       	sbci	r27, 0xFC	; 252
    1254:	1c 92       	st	X, r1
	for(i=0;i<size;i++){
    1256:	16 16       	cp	r1, r22
    1258:	17 06       	cpc	r1, r23
    125a:	14 f5       	brge	.+68     	; 0x12a0 <FUNCresizestr+0x54>
		if(*(string+i)=='\0'){
    125c:	90 81       	ld	r25, Z
    125e:	91 11       	cpse	r25, r1
    1260:	0c c0       	rjmp	.+24     	; 0x127a <FUNCresizestr+0x2e>
    1262:	17 c0       	rjmp	.+46     	; 0x1292 <FUNCresizestr+0x46>
    1264:	91 91       	ld	r25, Z+
    1266:	91 11       	cpse	r25, r1
    1268:	0d c0       	rjmp	.+26     	; 0x1284 <FUNCresizestr+0x38>
    126a:	15 c0       	rjmp	.+42     	; 0x1296 <FUNCresizestr+0x4a>
			for(;i<size;i++){
				FUNCstr[i]=' ';
    126c:	81 93       	st	Z+, r24
{
	int i;
	FUNCstr[size]='\0';
	for(i=0;i<size;i++){
		if(*(string+i)=='\0'){
			for(;i<size;i++){
    126e:	2f 5f       	subi	r18, 0xFF	; 255
    1270:	3f 4f       	sbci	r19, 0xFF	; 255
    1272:	26 17       	cp	r18, r22
    1274:	37 07       	cpc	r19, r23
    1276:	d4 f3       	brlt	.-12     	; 0x126c <FUNCresizestr+0x20>
    1278:	13 c0       	rjmp	.+38     	; 0x12a0 <FUNCresizestr+0x54>
    127a:	a0 ee       	ldi	r26, 0xE0	; 224
    127c:	b3 e0       	ldi	r27, 0x03	; 3
    127e:	31 96       	adiw	r30, 0x01	; 1
char* FUNCresizestr(char *string, int size)
{
	int i;
	FUNCstr[size]='\0';
	for(i=0;i<size;i++){
		if(*(string+i)=='\0'){
    1280:	20 e0       	ldi	r18, 0x00	; 0
    1282:	30 e0       	ldi	r19, 0x00	; 0
			for(;i<size;i++){
				FUNCstr[i]=' ';
			}
			break;
		}
		FUNCstr[i]=*(string+i);
    1284:	9d 93       	st	X+, r25
}
char* FUNCresizestr(char *string, int size)
{
	int i;
	FUNCstr[size]='\0';
	for(i=0;i<size;i++){
    1286:	2f 5f       	subi	r18, 0xFF	; 255
    1288:	3f 4f       	sbci	r19, 0xFF	; 255
    128a:	62 17       	cp	r22, r18
    128c:	73 07       	cpc	r23, r19
    128e:	51 f7       	brne	.-44     	; 0x1264 <FUNCresizestr+0x18>
    1290:	07 c0       	rjmp	.+14     	; 0x12a0 <FUNCresizestr+0x54>
    1292:	20 e0       	ldi	r18, 0x00	; 0
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	f9 01       	movw	r30, r18
    1298:	e0 52       	subi	r30, 0x20	; 32
    129a:	fc 4f       	sbci	r31, 0xFC	; 252
		if(*(string+i)=='\0'){
			for(;i<size;i++){
				FUNCstr[i]=' ';
    129c:	80 e2       	ldi	r24, 0x20	; 32
    129e:	e6 cf       	rjmp	.-52     	; 0x126c <FUNCresizestr+0x20>
			break;
		}
		FUNCstr[i]=*(string+i);
	}
	return FUNCstr;
}
    12a0:	80 ee       	ldi	r24, 0xE0	; 224
    12a2:	93 e0       	ldi	r25, 0x03	; 3
    12a4:	08 95       	ret

000012a6 <FUNCtrimmer>:
long FUNCtrimmer(long x, long in_min, long in_max, long out_min, long out_max)
/*
	same as arduino map function.
*/
{
    12a6:	4f 92       	push	r4
    12a8:	5f 92       	push	r5
    12aa:	6f 92       	push	r6
    12ac:	7f 92       	push	r7
    12ae:	af 92       	push	r10
    12b0:	bf 92       	push	r11
    12b2:	cf 92       	push	r12
    12b4:	df 92       	push	r13
    12b6:	ef 92       	push	r14
    12b8:	ff 92       	push	r15
    12ba:	0f 93       	push	r16
    12bc:	1f 93       	push	r17
    12be:	cf 93       	push	r28
    12c0:	df 93       	push	r29
    12c2:	cd b7       	in	r28, 0x3d	; 61
    12c4:	de b7       	in	r29, 0x3e	; 62
    12c6:	29 01       	movw	r4, r18
    12c8:	3a 01       	movw	r6, r20
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    12ca:	9b 01       	movw	r18, r22
    12cc:	ac 01       	movw	r20, r24
    12ce:	24 19       	sub	r18, r4
    12d0:	35 09       	sbc	r19, r5
    12d2:	46 09       	sbc	r20, r6
    12d4:	57 09       	sbc	r21, r7
    12d6:	89 89       	ldd	r24, Y+17	; 0x11
    12d8:	9a 89       	ldd	r25, Y+18	; 0x12
    12da:	ab 89       	ldd	r26, Y+19	; 0x13
    12dc:	bc 89       	ldd	r27, Y+20	; 0x14
    12de:	bc 01       	movw	r22, r24
    12e0:	cd 01       	movw	r24, r26
    12e2:	6a 19       	sub	r22, r10
    12e4:	7b 09       	sbc	r23, r11
    12e6:	8c 09       	sbc	r24, r12
    12e8:	9d 09       	sbc	r25, r13
    12ea:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <__mulsi3>
    12ee:	a8 01       	movw	r20, r16
    12f0:	97 01       	movw	r18, r14
    12f2:	24 19       	sub	r18, r4
    12f4:	35 09       	sbc	r19, r5
    12f6:	46 09       	sbc	r20, r6
    12f8:	57 09       	sbc	r21, r7
    12fa:	0e 94 c5 1d 	call	0x3b8a	; 0x3b8a <__divmodsi4>
    12fe:	ca 01       	movw	r24, r20
    1300:	b9 01       	movw	r22, r18
    1302:	6a 0d       	add	r22, r10
    1304:	7b 1d       	adc	r23, r11
    1306:	8c 1d       	adc	r24, r12
    1308:	9d 1d       	adc	r25, r13
}
    130a:	df 91       	pop	r29
    130c:	cf 91       	pop	r28
    130e:	1f 91       	pop	r17
    1310:	0f 91       	pop	r16
    1312:	ff 90       	pop	r15
    1314:	ef 90       	pop	r14
    1316:	df 90       	pop	r13
    1318:	cf 90       	pop	r12
    131a:	bf 90       	pop	r11
    131c:	af 90       	pop	r10
    131e:	7f 90       	pop	r7
    1320:	6f 90       	pop	r6
    1322:	5f 90       	pop	r5
    1324:	4f 90       	pop	r4
    1326:	08 95       	ret

00001328 <Pwr>:
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
    1328:	70 e0       	ldi	r23, 0x00	; 0
    132a:	61 15       	cp	r22, r1
    132c:	71 05       	cpc	r23, r1
    132e:	99 f0       	breq	.+38     	; 0x1356 <Pwr+0x2e>
    1330:	41 e0       	ldi	r20, 0x01	; 1
    1332:	50 e0       	ldi	r21, 0x00	; 0
    1334:	21 e0       	ldi	r18, 0x01	; 1
    1336:	30 e0       	ldi	r19, 0x00	; 0
        p = p * bs;
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	fa 01       	movw	r30, r20
    133c:	e8 9f       	mul	r30, r24
    133e:	a0 01       	movw	r20, r0
    1340:	e9 9f       	mul	r30, r25
    1342:	50 0d       	add	r21, r0
    1344:	f8 9f       	mul	r31, r24
    1346:	50 0d       	add	r21, r0
    1348:	11 24       	eor	r1, r1
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
    134a:	2f 5f       	subi	r18, 0xFF	; 255
    134c:	3f 4f       	sbci	r19, 0xFF	; 255
    134e:	62 17       	cp	r22, r18
    1350:	73 07       	cpc	r23, r19
    1352:	98 f7       	brcc	.-26     	; 0x133a <Pwr+0x12>
    1354:	02 c0       	rjmp	.+4      	; 0x135a <Pwr+0x32>
}
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    1356:	41 e0       	ldi	r20, 0x01	; 1
    1358:	50 e0       	ldi	r21, 0x00	; 0
    for (i = 1; i <= n; ++i)
        p = p * bs;
    return p;
}
    135a:	ca 01       	movw	r24, r20
    135c:	08 95       	ret

0000135e <StringLength>:
// Function to count the number of characters in a string
int StringLength (const char string[])
{
	int count = 0;
	while ( string[count] != '\0' )
    135e:	fc 01       	movw	r30, r24
    1360:	20 81       	ld	r18, Z
    1362:	22 23       	and	r18, r18
    1364:	41 f0       	breq	.+16     	; 0x1376 <StringLength+0x18>
    1366:	31 96       	adiw	r30, 0x01	; 1
    1368:	80 e0       	ldi	r24, 0x00	; 0
    136a:	90 e0       	ldi	r25, 0x00	; 0
		++count;
    136c:	01 96       	adiw	r24, 0x01	; 1
}
// Function to count the number of characters in a string
int StringLength (const char string[])
{
	int count = 0;
	while ( string[count] != '\0' )
    136e:	21 91       	ld	r18, Z+
    1370:	21 11       	cpse	r18, r1
    1372:	fc cf       	rjmp	.-8      	; 0x136c <StringLength+0xe>
    1374:	08 95       	ret
    return p;
}
// Function to count the number of characters in a string
int StringLength (const char string[])
{
	int count = 0;
    1376:	80 e0       	ldi	r24, 0x00	; 0
    1378:	90 e0       	ldi	r25, 0x00	; 0
	while ( string[count] != '\0' )
		++count;
	return count;
}
    137a:	08 95       	ret

0000137c <FUNCtrim>:
	Reverse(FUNCstr);
	return FUNCstr;
}
// trim: remove trailing blanks, tabs, newlines
int FUNCtrim(char s[])
{
    137c:	cf 93       	push	r28
    137e:	df 93       	push	r29
    1380:	ec 01       	movw	r28, r24
	int n;
	for (n = StringLength(s)-1; n >= 0; n--)
    1382:	ed df       	rcall	.-38     	; 0x135e <StringLength>
    1384:	9c 01       	movw	r18, r24
    1386:	21 50       	subi	r18, 0x01	; 1
    1388:	31 09       	sbc	r19, r1
    138a:	62 f0       	brmi	.+24     	; 0x13a4 <FUNCtrim+0x28>
    138c:	fe 01       	movw	r30, r28
    138e:	e8 0f       	add	r30, r24
    1390:	f9 1f       	adc	r31, r25
		if (s[n] != ' ' && s[n] != '\t' && s[n] != '\n')
    1392:	92 91       	ld	r25, -Z
    1394:	90 32       	cpi	r25, 0x20	; 32
    1396:	19 f0       	breq	.+6      	; 0x139e <FUNCtrim+0x22>
    1398:	99 50       	subi	r25, 0x09	; 9
    139a:	92 30       	cpi	r25, 0x02	; 2
    139c:	18 f4       	brcc	.+6      	; 0x13a4 <FUNCtrim+0x28>
}
// trim: remove trailing blanks, tabs, newlines
int FUNCtrim(char s[])
{
	int n;
	for (n = StringLength(s)-1; n >= 0; n--)
    139e:	21 50       	subi	r18, 0x01	; 1
    13a0:	31 09       	sbc	r19, r1
    13a2:	b8 f7       	brcc	.-18     	; 0x1392 <FUNCtrim+0x16>
		if (s[n] != ' ' && s[n] != '\t' && s[n] != '\n')
			break;
	s[n+1] = '\0';
    13a4:	c2 0f       	add	r28, r18
    13a6:	d3 1f       	adc	r29, r19
    13a8:	19 82       	std	Y+1, r1	; 0x01
	return n;
}
    13aa:	c9 01       	movw	r24, r18
    13ac:	df 91       	pop	r29
    13ae:	cf 91       	pop	r28
    13b0:	08 95       	ret

000013b2 <Reverse>:
		++count;
	return count;
}
// reverse: reverse string s in place
void Reverse(char s[])
{
    13b2:	cf 93       	push	r28
    13b4:	df 93       	push	r29
    13b6:	ec 01       	movw	r28, r24
	int c, i, j;
	for (i = 0, j = StringLength(s)-1; i < j; i++, j--){
    13b8:	d2 df       	rcall	.-92     	; 0x135e <StringLength>
    13ba:	9c 01       	movw	r18, r24
    13bc:	21 50       	subi	r18, 0x01	; 1
    13be:	31 09       	sbc	r19, r1
    13c0:	12 16       	cp	r1, r18
    13c2:	13 06       	cpc	r1, r19
    13c4:	84 f4       	brge	.+32     	; 0x13e6 <Reverse+0x34>
    13c6:	de 01       	movw	r26, r28
    13c8:	a8 0f       	add	r26, r24
    13ca:	b9 1f       	adc	r27, r25
    13cc:	fe 01       	movw	r30, r28
    13ce:	80 e0       	ldi	r24, 0x00	; 0
    13d0:	90 e0       	ldi	r25, 0x00	; 0
		c = s[i];
    13d2:	40 81       	ld	r20, Z
		s[i] = s[j];
    13d4:	5e 91       	ld	r21, -X
    13d6:	51 93       	st	Z+, r21
		s[j] = c;
    13d8:	4c 93       	st	X, r20
}
// reverse: reverse string s in place
void Reverse(char s[])
{
	int c, i, j;
	for (i = 0, j = StringLength(s)-1; i < j; i++, j--){
    13da:	01 96       	adiw	r24, 0x01	; 1
    13dc:	21 50       	subi	r18, 0x01	; 1
    13de:	31 09       	sbc	r19, r1
    13e0:	82 17       	cp	r24, r18
    13e2:	93 07       	cpc	r25, r19
    13e4:	b4 f3       	brlt	.-20     	; 0x13d2 <Reverse+0x20>
		c = s[i];
		s[i] = s[j];
		s[j] = c;
	}
}
    13e6:	df 91       	pop	r29
    13e8:	cf 91       	pop	r28
    13ea:	08 95       	ret

000013ec <FUNCi32toa>:
				v[j+gap] = temp;
			}
}
// i32toa: convert n to characters in s
char* FUNCi32toa(int32_t n)
{
    13ec:	8f 92       	push	r8
    13ee:	9f 92       	push	r9
    13f0:	af 92       	push	r10
    13f2:	bf 92       	push	r11
    13f4:	cf 92       	push	r12
    13f6:	df 92       	push	r13
    13f8:	ef 92       	push	r14
    13fa:	ff 92       	push	r15
    13fc:	0f 93       	push	r16
    13fe:	1f 93       	push	r17
    1400:	cf 93       	push	r28
    1402:	df 93       	push	r29
    1404:	6b 01       	movw	r12, r22
    1406:	7c 01       	movw	r14, r24
    1408:	dc 01       	movw	r26, r24
    140a:	cb 01       	movw	r24, r22
    140c:	ff 20       	and	r15, r15
    140e:	3c f4       	brge	.+14     	; 0x141e <FUNCi32toa+0x32>
    1410:	88 27       	eor	r24, r24
    1412:	99 27       	eor	r25, r25
    1414:	dc 01       	movw	r26, r24
    1416:	8c 19       	sub	r24, r12
    1418:	9d 09       	sbc	r25, r13
    141a:	ae 09       	sbc	r26, r14
    141c:	bf 09       	sbc	r27, r15
    141e:	bc 01       	movw	r22, r24
    1420:	cd 01       	movw	r24, r26
    1422:	10 e0       	ldi	r17, 0x00	; 0
	int32_t sign;
	if ((sign = n) < 0) // record sign
	n = -n; // make n positive
	i = 0;
	do { // generate digits in reverse order
		FUNCstr[i++] = n % 10 + '0'; // get next digit
    1424:	0f 2e       	mov	r0, r31
    1426:	fa e0       	ldi	r31, 0x0A	; 10
    1428:	8f 2e       	mov	r8, r31
    142a:	91 2c       	mov	r9, r1
    142c:	a1 2c       	mov	r10, r1
    142e:	b1 2c       	mov	r11, r1
    1430:	f0 2d       	mov	r31, r0
    1432:	01 c0       	rjmp	.+2      	; 0x1436 <FUNCi32toa+0x4a>
    1434:	10 2f       	mov	r17, r16
    1436:	01 e0       	ldi	r16, 0x01	; 1
    1438:	01 0f       	add	r16, r17
    143a:	c1 2f       	mov	r28, r17
    143c:	d0 e0       	ldi	r29, 0x00	; 0
    143e:	c0 52       	subi	r28, 0x20	; 32
    1440:	dc 4f       	sbci	r29, 0xFC	; 252
    1442:	a5 01       	movw	r20, r10
    1444:	94 01       	movw	r18, r8
    1446:	0e 94 c5 1d 	call	0x3b8a	; 0x3b8a <__divmodsi4>
    144a:	60 5d       	subi	r22, 0xD0	; 208
    144c:	68 83       	st	Y, r22
	}while ((n /= 10) > 0); // delete it
    144e:	62 2f       	mov	r22, r18
    1450:	73 2f       	mov	r23, r19
    1452:	84 2f       	mov	r24, r20
    1454:	95 2f       	mov	r25, r21
    1456:	16 16       	cp	r1, r22
    1458:	17 06       	cpc	r1, r23
    145a:	18 06       	cpc	r1, r24
    145c:	19 06       	cpc	r1, r25
    145e:	54 f3       	brlt	.-44     	; 0x1434 <FUNCi32toa+0x48>
	if (sign < 0)
    1460:	ff 20       	and	r15, r15
    1462:	44 f4       	brge	.+16     	; 0x1474 <FUNCi32toa+0x88>
	FUNCstr[i++] = '-';
    1464:	e0 2f       	mov	r30, r16
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	e0 52       	subi	r30, 0x20	; 32
    146a:	fc 4f       	sbci	r31, 0xFC	; 252
    146c:	8d e2       	ldi	r24, 0x2D	; 45
    146e:	80 83       	st	Z, r24
    1470:	02 e0       	ldi	r16, 0x02	; 2
    1472:	01 0f       	add	r16, r17
	FUNCstr[i] = '\0';
    1474:	e0 2f       	mov	r30, r16
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	e0 52       	subi	r30, 0x20	; 32
    147a:	fc 4f       	sbci	r31, 0xFC	; 252
    147c:	10 82       	st	Z, r1
	Reverse(FUNCstr);
    147e:	80 ee       	ldi	r24, 0xE0	; 224
    1480:	93 e0       	ldi	r25, 0x03	; 3
    1482:	97 df       	rcall	.-210    	; 0x13b2 <Reverse>
	return FUNCstr;
}
    1484:	80 ee       	ldi	r24, 0xE0	; 224
    1486:	93 e0       	ldi	r25, 0x03	; 3
    1488:	df 91       	pop	r29
    148a:	cf 91       	pop	r28
    148c:	1f 91       	pop	r17
    148e:	0f 91       	pop	r16
    1490:	ff 90       	pop	r15
    1492:	ef 90       	pop	r14
    1494:	df 90       	pop	r13
    1496:	cf 90       	pop	r12
    1498:	bf 90       	pop	r11
    149a:	af 90       	pop	r10
    149c:	9f 90       	pop	r9
    149e:	8f 90       	pop	r8
    14a0:	08 95       	ret

000014a2 <FUNCi16toa>:
// i16toa: convert n to characters in s
char* FUNCi16toa(int16_t n)
{
    14a2:	0f 93       	push	r16
    14a4:	1f 93       	push	r17
    14a6:	cf 93       	push	r28
    14a8:	df 93       	push	r29
    14aa:	ec 01       	movw	r28, r24
    14ac:	99 23       	and	r25, r25
    14ae:	24 f4       	brge	.+8      	; 0x14b8 <FUNCi16toa+0x16>
    14b0:	88 27       	eor	r24, r24
    14b2:	99 27       	eor	r25, r25
    14b4:	8c 1b       	sub	r24, r28
    14b6:	9d 0b       	sbc	r25, r29
    14b8:	20 e0       	ldi	r18, 0x00	; 0
	int16_t sign;
	if ((sign = n) < 0) // record sign
		n = -n; // make n positive
	i = 0;
	do { // generate digits in reverse order
		FUNCstr[i++] = n % 10 + '0'; // get next digit
    14ba:	0a e0       	ldi	r16, 0x0A	; 10
    14bc:	10 e0       	ldi	r17, 0x00	; 0
    14be:	01 c0       	rjmp	.+2      	; 0x14c2 <FUNCi16toa+0x20>
    14c0:	23 2f       	mov	r18, r19
    14c2:	31 e0       	ldi	r19, 0x01	; 1
    14c4:	32 0f       	add	r19, r18
    14c6:	e2 2f       	mov	r30, r18
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	e0 52       	subi	r30, 0x20	; 32
    14cc:	fc 4f       	sbci	r31, 0xFC	; 252
    14ce:	b8 01       	movw	r22, r16
    14d0:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <__divmodhi4>
    14d4:	80 5d       	subi	r24, 0xD0	; 208
    14d6:	80 83       	st	Z, r24
	}while ((n /= 10) > 0); // delete it
    14d8:	86 2f       	mov	r24, r22
    14da:	97 2f       	mov	r25, r23
    14dc:	18 16       	cp	r1, r24
    14de:	19 06       	cpc	r1, r25
    14e0:	7c f3       	brlt	.-34     	; 0x14c0 <FUNCi16toa+0x1e>
	if (sign < 0)
    14e2:	dd 23       	and	r29, r29
    14e4:	44 f4       	brge	.+16     	; 0x14f6 <FUNCi16toa+0x54>
		FUNCstr[i++] = '-';
    14e6:	e3 2f       	mov	r30, r19
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	e0 52       	subi	r30, 0x20	; 32
    14ec:	fc 4f       	sbci	r31, 0xFC	; 252
    14ee:	8d e2       	ldi	r24, 0x2D	; 45
    14f0:	80 83       	st	Z, r24
    14f2:	32 e0       	ldi	r19, 0x02	; 2
    14f4:	32 0f       	add	r19, r18
	FUNCstr[i] = '\0';
    14f6:	e3 2f       	mov	r30, r19
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	e0 52       	subi	r30, 0x20	; 32
    14fc:	fc 4f       	sbci	r31, 0xFC	; 252
    14fe:	10 82       	st	Z, r1
	Reverse(FUNCstr);
    1500:	80 ee       	ldi	r24, 0xE0	; 224
    1502:	93 e0       	ldi	r25, 0x03	; 3
    1504:	56 df       	rcall	.-340    	; 0x13b2 <Reverse>
	return FUNCstr;
}
    1506:	80 ee       	ldi	r24, 0xE0	; 224
    1508:	93 e0       	ldi	r25, 0x03	; 3
    150a:	df 91       	pop	r29
    150c:	cf 91       	pop	r28
    150e:	1f 91       	pop	r17
    1510:	0f 91       	pop	r16
    1512:	08 95       	ret

00001514 <FUNCui16toa>:
// ui16toa: convert n to characters in s
char* FUNCui16toa(uint16_t n)
{
    1514:	cf 93       	push	r28
    1516:	ac 01       	movw	r20, r24
	uint8_t i;
	i = 0;
    1518:	e0 e0       	ldi	r30, 0x00	; 0
	do { // generate digits in reverse order
		FUNCstr[i++] = n % 10 + '0'; // get next digit
    151a:	c1 e0       	ldi	r28, 0x01	; 1
    151c:	ce 0f       	add	r28, r30
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	e0 52       	subi	r30, 0x20	; 32
    1522:	fc 4f       	sbci	r31, 0xFC	; 252
    1524:	9a 01       	movw	r18, r20
    1526:	ad ec       	ldi	r26, 0xCD	; 205
    1528:	bc ec       	ldi	r27, 0xCC	; 204
    152a:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <__umulhisi3>
    152e:	96 95       	lsr	r25
    1530:	87 95       	ror	r24
    1532:	96 95       	lsr	r25
    1534:	87 95       	ror	r24
    1536:	96 95       	lsr	r25
    1538:	87 95       	ror	r24
    153a:	9c 01       	movw	r18, r24
    153c:	22 0f       	add	r18, r18
    153e:	33 1f       	adc	r19, r19
    1540:	88 0f       	add	r24, r24
    1542:	99 1f       	adc	r25, r25
    1544:	88 0f       	add	r24, r24
    1546:	99 1f       	adc	r25, r25
    1548:	88 0f       	add	r24, r24
    154a:	99 1f       	adc	r25, r25
    154c:	82 0f       	add	r24, r18
    154e:	93 1f       	adc	r25, r19
    1550:	9a 01       	movw	r18, r20
    1552:	28 1b       	sub	r18, r24
    1554:	39 0b       	sbc	r19, r25
    1556:	c9 01       	movw	r24, r18
    1558:	80 5d       	subi	r24, 0xD0	; 208
    155a:	80 83       	st	Z, r24
	}while ((n /= 10) > 0); // delete it
    155c:	9a 01       	movw	r18, r20
    155e:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <__umulhisi3>
    1562:	ac 01       	movw	r20, r24
    1564:	56 95       	lsr	r21
    1566:	47 95       	ror	r20
    1568:	56 95       	lsr	r21
    156a:	47 95       	ror	r20
    156c:	56 95       	lsr	r21
    156e:	47 95       	ror	r20
char* FUNCui16toa(uint16_t n)
{
	uint8_t i;
	i = 0;
	do { // generate digits in reverse order
		FUNCstr[i++] = n % 10 + '0'; // get next digit
    1570:	ec 2f       	mov	r30, r28
	}while ((n /= 10) > 0); // delete it
    1572:	41 15       	cp	r20, r1
    1574:	51 05       	cpc	r21, r1
    1576:	89 f6       	brne	.-94     	; 0x151a <FUNCui16toa+0x6>
	FUNCstr[i] = '\0';
    1578:	ec 2f       	mov	r30, r28
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	e0 52       	subi	r30, 0x20	; 32
    157e:	fc 4f       	sbci	r31, 0xFC	; 252
    1580:	10 82       	st	Z, r1
	Reverse(FUNCstr);
    1582:	80 ee       	ldi	r24, 0xE0	; 224
    1584:	93 e0       	ldi	r25, 0x03	; 3
    1586:	15 df       	rcall	.-470    	; 0x13b2 <Reverse>
	return FUNCstr;
}
    1588:	80 ee       	ldi	r24, 0xE0	; 224
    158a:	93 e0       	ldi	r25, 0x03	; 3
    158c:	cf 91       	pop	r28
    158e:	08 95       	ret

00001590 <FUNCbcd2bin>:
		s[j] = c;
	}
}
unsigned char FUNCbcd2bin(unsigned char val)
{
	return (val & 0x0f) + (val >> 4) * 10;
    1590:	98 2f       	mov	r25, r24
    1592:	92 95       	swap	r25
    1594:	9f 70       	andi	r25, 0x0F	; 15
    1596:	99 0f       	add	r25, r25
    1598:	29 2f       	mov	r18, r25
    159a:	22 0f       	add	r18, r18
    159c:	22 0f       	add	r18, r18
    159e:	92 0f       	add	r25, r18
    15a0:	8f 70       	andi	r24, 0x0F	; 15
}
    15a2:	89 0f       	add	r24, r25
    15a4:	08 95       	ret

000015a6 <FUNCbin2bcd>:
unsigned char FUNCbin2bcd(unsigned val)
{
    15a6:	ac 01       	movw	r20, r24
	return ((val / 10) << 4) + val % 10;
    15a8:	9c 01       	movw	r18, r24
    15aa:	ad ec       	ldi	r26, 0xCD	; 205
    15ac:	bc ec       	ldi	r27, 0xCC	; 204
    15ae:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <__umulhisi3>
    15b2:	96 95       	lsr	r25
    15b4:	87 95       	ror	r24
    15b6:	96 95       	lsr	r25
    15b8:	87 95       	ror	r24
    15ba:	96 95       	lsr	r25
    15bc:	87 95       	ror	r24
    15be:	bc 01       	movw	r22, r24
    15c0:	66 0f       	add	r22, r22
    15c2:	77 1f       	adc	r23, r23
    15c4:	9c 01       	movw	r18, r24
    15c6:	22 0f       	add	r18, r18
    15c8:	33 1f       	adc	r19, r19
    15ca:	22 0f       	add	r18, r18
    15cc:	33 1f       	adc	r19, r19
    15ce:	22 0f       	add	r18, r18
    15d0:	33 1f       	adc	r19, r19
    15d2:	26 0f       	add	r18, r22
    15d4:	37 1f       	adc	r19, r23
    15d6:	42 1b       	sub	r20, r18
    15d8:	53 0b       	sbc	r21, r19
}
    15da:	34 2f       	mov	r19, r20
    15dc:	20 e1       	ldi	r18, 0x10	; 16
    15de:	82 9f       	mul	r24, r18
    15e0:	30 0d       	add	r19, r0
    15e2:	11 24       	eor	r1, r1
    15e4:	83 2f       	mov	r24, r19
    15e6:	08 95       	ret

000015e8 <FUNCgcd1>:
long FUNCgcd1(long a, long b)
{
    15e8:	cf 92       	push	r12
    15ea:	df 92       	push	r13
    15ec:	ef 92       	push	r14
    15ee:	ff 92       	push	r15
    15f0:	cf 93       	push	r28
    15f2:	df 93       	push	r29
    15f4:	cd b7       	in	r28, 0x3d	; 61
    15f6:	de b7       	in	r29, 0x3e	; 62
    15f8:	28 97       	sbiw	r28, 0x08	; 8
    15fa:	0f b6       	in	r0, 0x3f	; 63
    15fc:	f8 94       	cli
    15fe:	de bf       	out	0x3e, r29	; 62
    1600:	0f be       	out	0x3f, r0	; 63
    1602:	cd bf       	out	0x3d, r28	; 61
    1604:	6b 01       	movw	r12, r22
    1606:	7c 01       	movw	r14, r24
    1608:	69 83       	std	Y+1, r22	; 0x01
    160a:	7a 83       	std	Y+2, r23	; 0x02
    160c:	8b 83       	std	Y+3, r24	; 0x03
    160e:	9c 83       	std	Y+4, r25	; 0x04
    1610:	2d 83       	std	Y+5, r18	; 0x05
    1612:	3e 83       	std	Y+6, r19	; 0x06
    1614:	4f 83       	std	Y+7, r20	; 0x07
    1616:	58 87       	std	Y+8, r21	; 0x08
	long r;
	if (a < b)
    1618:	c2 16       	cp	r12, r18
    161a:	d3 06       	cpc	r13, r19
    161c:	e4 06       	cpc	r14, r20
    161e:	f5 06       	cpc	r15, r21
    1620:	34 f4       	brge	.+12     	; 0x162e <FUNCgcd1+0x46>
		FUNCswap(&a, &b);
    1622:	be 01       	movw	r22, r28
    1624:	6b 5f       	subi	r22, 0xFB	; 251
    1626:	7f 4f       	sbci	r23, 0xFF	; 255
    1628:	ce 01       	movw	r24, r28
    162a:	01 96       	adiw	r24, 0x01	; 1
    162c:	85 dc       	rcall	.-1782   	; 0xf38 <FUNCswap>
	if (!b){
    162e:	8d 81       	ldd	r24, Y+5	; 0x05
    1630:	9e 81       	ldd	r25, Y+6	; 0x06
    1632:	af 81       	ldd	r26, Y+7	; 0x07
    1634:	b8 85       	ldd	r27, Y+8	; 0x08
    1636:	89 2b       	or	r24, r25
    1638:	8a 2b       	or	r24, r26
    163a:	8b 2b       	or	r24, r27
    163c:	71 f4       	brne	.+28     	; 0x165a <FUNCgcd1+0x72>
		while ((r = a % b) != 0) {
    163e:	69 81       	ldd	r22, Y+1	; 0x01
    1640:	7a 81       	ldd	r23, Y+2	; 0x02
    1642:	8b 81       	ldd	r24, Y+3	; 0x03
    1644:	9c 81       	ldd	r25, Y+4	; 0x04
    1646:	20 e0       	ldi	r18, 0x00	; 0
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	a9 01       	movw	r20, r18
    164c:	0e 94 c5 1d 	call	0x3b8a	; 0x3b8a <__divmodsi4>
    1650:	61 15       	cp	r22, r1
    1652:	71 05       	cpc	r23, r1
    1654:	81 05       	cpc	r24, r1
    1656:	91 05       	cpc	r25, r1
    1658:	29 f4       	brne	.+10     	; 0x1664 <FUNCgcd1+0x7c>
			a = b;
			b = r;
		}
	}	
	return b;
    165a:	6d 81       	ldd	r22, Y+5	; 0x05
    165c:	7e 81       	ldd	r23, Y+6	; 0x06
    165e:	8f 81       	ldd	r24, Y+7	; 0x07
    1660:	98 85       	ldd	r25, Y+8	; 0x08
    1662:	05 c0       	rjmp	.+10     	; 0x166e <FUNCgcd1+0x86>
	if (a < b)
		FUNCswap(&a, &b);
	if (!b){
		while ((r = a % b) != 0) {
			a = b;
			b = r;
    1664:	6d 83       	std	Y+5, r22	; 0x05
    1666:	7e 83       	std	Y+6, r23	; 0x06
    1668:	8f 83       	std	Y+7, r24	; 0x07
    166a:	98 87       	std	Y+8, r25	; 0x08
    166c:	f6 cf       	rjmp	.-20     	; 0x165a <FUNCgcd1+0x72>
		}
	}	
	return b;
}
    166e:	28 96       	adiw	r28, 0x08	; 8
    1670:	0f b6       	in	r0, 0x3f	; 63
    1672:	f8 94       	cli
    1674:	de bf       	out	0x3e, r29	; 62
    1676:	0f be       	out	0x3f, r0	; 63
    1678:	cd bf       	out	0x3d, r28	; 61
    167a:	df 91       	pop	r29
    167c:	cf 91       	pop	r28
    167e:	ff 90       	pop	r15
    1680:	ef 90       	pop	r14
    1682:	df 90       	pop	r13
    1684:	cf 90       	pop	r12
    1686:	08 95       	ret

00001688 <FUNCpincheck>:
	uint8_t lh;
	if(port & (1<<pin))
		lh=1;
	else
		lh=0;
	return lh;
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	02 c0       	rjmp	.+4      	; 0x1690 <FUNCpincheck+0x8>
    168c:	95 95       	asr	r25
    168e:	87 95       	ror	r24
    1690:	6a 95       	dec	r22
    1692:	e2 f7       	brpl	.-8      	; 0x168c <FUNCpincheck+0x4>
}
    1694:	81 70       	andi	r24, 0x01	; 1
    1696:	08 95       	ret

00001698 <FUNCprint_binary>:
char* FUNCprint_binary(uint8_t number)
{
    1698:	e0 ee       	ldi	r30, 0xE0	; 224
    169a:	f3 e0       	ldi	r31, 0x03	; 3
	uint8_t i,c;
    for(i=128,c=0;i;i>>=1,c++){
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	20 e8       	ldi	r18, 0x80	; 128
	(number & i) ? (FUNCstr[c]='1') : (FUNCstr[c]='0');
    16a0:	50 e3       	ldi	r21, 0x30	; 48
    16a2:	41 e3       	ldi	r20, 0x31	; 49
    16a4:	38 2f       	mov	r19, r24
    16a6:	32 23       	and	r19, r18
    16a8:	11 f0       	breq	.+4      	; 0x16ae <FUNCprint_binary+0x16>
    16aa:	40 83       	st	Z, r20
    16ac:	01 c0       	rjmp	.+2      	; 0x16b0 <FUNCprint_binary+0x18>
    16ae:	50 83       	st	Z, r21
	return lh;
}
char* FUNCprint_binary(uint8_t number)
{
	uint8_t i,c;
    for(i=128,c=0;i;i>>=1,c++){
    16b0:	26 95       	lsr	r18
    16b2:	9f 5f       	subi	r25, 0xFF	; 255
    16b4:	31 96       	adiw	r30, 0x01	; 1
    16b6:	98 30       	cpi	r25, 0x08	; 8
    16b8:	a9 f7       	brne	.-22     	; 0x16a4 <FUNCprint_binary+0xc>
	(number & i) ? (FUNCstr[c]='1') : (FUNCstr[c]='0');
	}
	FUNCstr[c]='\0';
    16ba:	10 92 e8 03 	sts	0x03E8, r1	; 0x8003e8 <FUNCstr+0x8>
	return FUNCstr;
}
    16be:	80 ee       	ldi	r24, 0xE0	; 224
    16c0:	93 e0       	ldi	r25, 0x03	; 3
    16c2:	08 95       	ret

000016c4 <FUNCmayia>:
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
    16c4:	a4 2f       	mov	r26, r20
    16c6:	b0 e0       	ldi	r27, 0x00	; 0
    16c8:	10 97       	sbiw	r26, 0x00	; 0
    16ca:	61 f0       	breq	.+24     	; 0x16e4 <FUNCmayia+0x20>
    16cc:	21 e0       	ldi	r18, 0x01	; 1
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	e1 e0       	ldi	r30, 0x01	; 1
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
        p = p * bs;
    16d4:	ee 0f       	add	r30, r30
    16d6:	ff 1f       	adc	r31, r31
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
    16d8:	2f 5f       	subi	r18, 0xFF	; 255
    16da:	3f 4f       	sbci	r19, 0xFF	; 255
    16dc:	a2 17       	cp	r26, r18
    16de:	b3 07       	cpc	r27, r19
    16e0:	c8 f7       	brcc	.-14     	; 0x16d4 <FUNCmayia+0x10>
    16e2:	02 c0       	rjmp	.+4      	; 0x16e8 <FUNCmayia+0x24>
}
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    16e4:	e1 e0       	ldi	r30, 0x01	; 1
    16e6:	f0 e0       	ldi	r31, 0x00	; 0
unsigned int FUNCmayia(unsigned int xi, unsigned int xf, uint8_t nbits)
{//magic formula
	unsigned int mask;
	unsigned int diff;
	unsigned int trans;
	mask=Pwr(2,nbits)-1;
    16e8:	31 97       	sbiw	r30, 0x01	; 1
	xi&=mask;
	xf&=mask;
    16ea:	6e 23       	and	r22, r30
    16ec:	7f 23       	and	r23, r31
	diff=xf^xi;
    16ee:	8e 23       	and	r24, r30
    16f0:	9f 23       	and	r25, r31
    16f2:	86 27       	eor	r24, r22
    16f4:	97 27       	eor	r25, r23
	trans=diff&xf;
	return (trans<<nbits)|diff;
    16f6:	68 23       	and	r22, r24
    16f8:	79 23       	and	r23, r25
    16fa:	02 c0       	rjmp	.+4      	; 0x1700 <FUNCmayia+0x3c>
    16fc:	66 0f       	add	r22, r22
    16fe:	77 1f       	adc	r23, r23
    1700:	4a 95       	dec	r20
    1702:	e2 f7       	brpl	.-8      	; 0x16fc <FUNCmayia+0x38>
}
    1704:	86 2b       	or	r24, r22
    1706:	97 2b       	or	r25, r23
    1708:	08 95       	ret

0000170a <FUNCenable>:
// uint8_t TRANupdate(struct TRAN *tr, uint8_t idata);
/*
** procedure and function
*/
FUNC FUNCenable( void )
{
    170a:	fc 01       	movw	r30, r24
	uint8_t tSREG;
	tSREG=SREG;
    170c:	9f b7       	in	r25, 0x3f	; 63
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
    170e:	8f b7       	in	r24, 0x3f	; 63
    1710:	8f 77       	andi	r24, 0x7F	; 127
    1712:	8f bf       	out	0x3f, r24	; 63
	func.putstr=FUNCputstr;
	func.getnum=FUNCgetnum;
	func.getnumv2=FUNCgetnumv2;
	func.readint=FUNCreadint;
	*/
	SREG=tSREG;
    1714:	9f bf       	out	0x3f, r25	; 63
	/******/
	return func;
    1716:	84 e9       	ldi	r24, 0x94	; 148
    1718:	99 e0       	ldi	r25, 0x09	; 9
    171a:	91 83       	std	Z+1, r25	; 0x01
    171c:	80 83       	st	Z, r24
    171e:	8f ea       	ldi	r24, 0xAF	; 175
    1720:	99 e0       	ldi	r25, 0x09	; 9
    1722:	93 83       	std	Z+3, r25	; 0x03
    1724:	82 83       	std	Z+2, r24	; 0x02
    1726:	89 ed       	ldi	r24, 0xD9	; 217
    1728:	99 e0       	ldi	r25, 0x09	; 9
    172a:	95 83       	std	Z+5, r25	; 0x05
    172c:	84 83       	std	Z+4, r24	; 0x04
    172e:	82 e6       	ldi	r24, 0x62	; 98
    1730:	9b e0       	ldi	r25, 0x0B	; 11
    1732:	97 83       	std	Z+7, r25	; 0x07
    1734:	86 83       	std	Z+6, r24	; 0x06
    1736:	81 e8       	ldi	r24, 0x81	; 129
    1738:	97 e0       	ldi	r25, 0x07	; 7
    173a:	91 87       	std	Z+9, r25	; 0x09
    173c:	80 87       	std	Z+8, r24	; 0x08
    173e:	8f e8       	ldi	r24, 0x8F	; 143
    1740:	97 e0       	ldi	r25, 0x07	; 7
    1742:	93 87       	std	Z+11, r25	; 0x0b
    1744:	82 87       	std	Z+10, r24	; 0x0a
    1746:	81 e9       	ldi	r24, 0x91	; 145
    1748:	97 e0       	ldi	r25, 0x07	; 7
    174a:	95 87       	std	Z+13, r25	; 0x0d
    174c:	84 87       	std	Z+12, r24	; 0x0c
    174e:	84 e9       	ldi	r24, 0x94	; 148
    1750:	97 e0       	ldi	r25, 0x07	; 7
    1752:	97 87       	std	Z+15, r25	; 0x0f
    1754:	86 87       	std	Z+14, r24	; 0x0e
    1756:	87 e9       	ldi	r24, 0x97	; 151
    1758:	97 e0       	ldi	r25, 0x07	; 7
    175a:	91 8b       	std	Z+17, r25	; 0x11
    175c:	80 8b       	std	Z+16, r24	; 0x10
    175e:	8a e9       	ldi	r24, 0x9A	; 154
    1760:	97 e0       	ldi	r25, 0x07	; 7
    1762:	93 8b       	std	Z+19, r25	; 0x13
    1764:	82 8b       	std	Z+18, r24	; 0x12
    1766:	8b e8       	ldi	r24, 0x8B	; 139
    1768:	97 e0       	ldi	r25, 0x07	; 7
    176a:	95 8b       	std	Z+21, r25	; 0x15
    176c:	84 8b       	std	Z+20, r24	; 0x14
    176e:	8d e8       	ldi	r24, 0x8D	; 141
    1770:	97 e0       	ldi	r25, 0x07	; 7
    1772:	97 8b       	std	Z+23, r25	; 0x17
    1774:	86 8b       	std	Z+22, r24	; 0x16
    1776:	8c e9       	ldi	r24, 0x9C	; 156
    1778:	97 e0       	ldi	r25, 0x07	; 7
    177a:	91 8f       	std	Z+25, r25	; 0x19
    177c:	80 8f       	std	Z+24, r24	; 0x18
    177e:	8d eb       	ldi	r24, 0xBD	; 189
    1780:	97 e0       	ldi	r25, 0x07	; 7
    1782:	93 8f       	std	Z+27, r25	; 0x1b
    1784:	82 8f       	std	Z+26, r24	; 0x1a
    1786:	8b ec       	ldi	r24, 0xCB	; 203
    1788:	97 e0       	ldi	r25, 0x07	; 7
    178a:	95 8f       	std	Z+29, r25	; 0x1d
    178c:	84 8f       	std	Z+28, r24	; 0x1c
    178e:	8d ee       	ldi	r24, 0xED	; 237
    1790:	97 e0       	ldi	r25, 0x07	; 7
    1792:	97 8f       	std	Z+31, r25	; 0x1f
    1794:	86 8f       	std	Z+30, r24	; 0x1e
    1796:	81 e5       	ldi	r24, 0x51	; 81
    1798:	9a e0       	ldi	r25, 0x0A	; 10
    179a:	91 a3       	std	Z+33, r25	; 0x21
    179c:	80 a3       	std	Z+32, r24	; 0x20
    179e:	8a e8       	ldi	r24, 0x8A	; 138
    17a0:	9a e0       	ldi	r25, 0x0A	; 10
    17a2:	93 a3       	std	Z+35, r25	; 0x23
    17a4:	82 a3       	std	Z+34, r24	; 0x22
    17a6:	86 ef       	ldi	r24, 0xF6	; 246
    17a8:	99 e0       	ldi	r25, 0x09	; 9
    17aa:	95 a3       	std	Z+37, r25	; 0x25
    17ac:	84 a3       	std	Z+36, r24	; 0x24
    17ae:	8e eb       	ldi	r24, 0xBE	; 190
    17b0:	99 e0       	ldi	r25, 0x09	; 9
    17b2:	97 a3       	std	Z+39, r25	; 0x27
    17b4:	86 a3       	std	Z+38, r24	; 0x26
    17b6:	83 e9       	ldi	r24, 0x93	; 147
    17b8:	98 e0       	ldi	r25, 0x08	; 8
    17ba:	91 a7       	std	Z+41, r25	; 0x29
    17bc:	80 a7       	std	Z+40, r24	; 0x28
    17be:	88 e9       	ldi	r24, 0x98	; 152
    17c0:	98 e0       	ldi	r25, 0x08	; 8
    17c2:	93 a7       	std	Z+43, r25	; 0x2b
    17c4:	82 a7       	std	Z+42, r24	; 0x2a
    17c6:	87 ea       	ldi	r24, 0xA7	; 167
    17c8:	98 e0       	ldi	r25, 0x08	; 8
    17ca:	95 a7       	std	Z+45, r25	; 0x2d
    17cc:	84 a7       	std	Z+44, r24	; 0x2c
    17ce:	8b ec       	ldi	r24, 0xCB	; 203
    17d0:	98 e0       	ldi	r25, 0x08	; 8
    17d2:	97 a7       	std	Z+47, r25	; 0x2f
    17d4:	86 a7       	std	Z+46, r24	; 0x2e
    17d6:	8d ec       	ldi	r24, 0xCD	; 205
    17d8:	98 e0       	ldi	r25, 0x08	; 8
    17da:	91 ab       	std	Z+49, r25	; 0x31
    17dc:	80 ab       	std	Z+48, r24	; 0x30
    17de:	87 ed       	ldi	r24, 0xD7	; 215
    17e0:	98 e0       	ldi	r25, 0x08	; 8
    17e2:	93 ab       	std	Z+51, r25	; 0x33
    17e4:	82 ab       	std	Z+50, r24	; 0x32
    17e6:	84 ee       	ldi	r24, 0xE4	; 228
    17e8:	98 e0       	ldi	r25, 0x08	; 8
    17ea:	95 ab       	std	Z+53, r25	; 0x35
    17ec:	84 ab       	std	Z+52, r24	; 0x34
    17ee:	80 ef       	ldi	r24, 0xF0	; 240
    17f0:	98 e0       	ldi	r25, 0x08	; 8
    17f2:	97 ab       	std	Z+55, r25	; 0x37
    17f4:	86 ab       	std	Z+54, r24	; 0x36
    17f6:	88 e0       	ldi	r24, 0x08	; 8
    17f8:	99 e0       	ldi	r25, 0x09	; 9
    17fa:	91 af       	std	Z+57, r25	; 0x39
    17fc:	80 af       	std	Z+56, r24	; 0x38
    17fe:	8b e1       	ldi	r24, 0x1B	; 27
    1800:	99 e0       	ldi	r25, 0x09	; 9
    1802:	93 af       	std	Z+59, r25	; 0x3b
    1804:	82 af       	std	Z+58, r24	; 0x3a
    1806:	86 e2       	ldi	r24, 0x26	; 38
    1808:	99 e0       	ldi	r25, 0x09	; 9
    180a:	95 af       	std	Z+61, r25	; 0x3d
    180c:	84 af       	std	Z+60, r24	; 0x3c
    180e:	83 e5       	ldi	r24, 0x53	; 83
    1810:	99 e0       	ldi	r25, 0x09	; 9
    1812:	97 af       	std	Z+63, r25	; 0x3f
    1814:	86 af       	std	Z+62, r24	; 0x3e
    1816:	df 01       	movw	r26, r30
    1818:	a0 5c       	subi	r26, 0xC0	; 192
    181a:	bf 4f       	sbci	r27, 0xFF	; 255
    181c:	88 ec       	ldi	r24, 0xC8	; 200
    181e:	9a e0       	ldi	r25, 0x0A	; 10
    1820:	11 96       	adiw	r26, 0x01	; 1
    1822:	9c 93       	st	X, r25
    1824:	8e 93       	st	-X, r24
    1826:	12 96       	adiw	r26, 0x02	; 2
    1828:	83 ed       	ldi	r24, 0xD3	; 211
    182a:	9a e0       	ldi	r25, 0x0A	; 10
    182c:	11 96       	adiw	r26, 0x01	; 1
    182e:	9c 93       	st	X, r25
    1830:	8e 93       	st	-X, r24
    1832:	12 96       	adiw	r26, 0x02	; 2
    1834:	84 ef       	ldi	r24, 0xF4	; 244
    1836:	9a e0       	ldi	r25, 0x0A	; 10
    1838:	11 96       	adiw	r26, 0x01	; 1
    183a:	9c 93       	st	X, r25
    183c:	8e 93       	st	-X, r24
    183e:	12 96       	adiw	r26, 0x02	; 2
    1840:	84 e4       	ldi	r24, 0x44	; 68
    1842:	9b e0       	ldi	r25, 0x0B	; 11
    1844:	11 96       	adiw	r26, 0x01	; 1
    1846:	9c 93       	st	X, r25
    1848:	8e 93       	st	-X, r24
    184a:	12 96       	adiw	r26, 0x02	; 2
    184c:	8c e4       	ldi	r24, 0x4C	; 76
    184e:	9b e0       	ldi	r25, 0x0B	; 11
    1850:	8d 93       	st	X+, r24
    1852:	9c 93       	st	X, r25
}
    1854:	cf 01       	movw	r24, r30
    1856:	08 95       	ret

00001858 <I2C_Start>:
	/***Vtable***/
}
/***void I2C_Start(void)***/
void I2C_Start(void)
{
  TWI_CONTROL_REGISTER = ((1<<TWINT) | (1<<TWSTA) | (1<<TWEN));
    1858:	e4 e7       	ldi	r30, 0x74	; 116
    185a:	f0 e0       	ldi	r31, 0x00	; 0
    185c:	84 ea       	ldi	r24, 0xA4	; 164
    185e:	80 83       	st	Z, r24
  for (ticks=Nticks; !(TWI_CONTROL_REGISTER & (1<<TWINT)) && ticks; ticks--);
    1860:	8f ef       	ldi	r24, 0xFF	; 255
    1862:	93 e0       	ldi	r25, 0x03	; 3
    1864:	90 93 f6 03 	sts	0x03F6, r25	; 0x8003f6 <ticks+0x1>
    1868:	80 93 f5 03 	sts	0x03F5, r24	; 0x8003f5 <ticks>
    186c:	80 81       	ld	r24, Z
    186e:	88 23       	and	r24, r24
    1870:	5c f0       	brlt	.+22     	; 0x1888 <I2C_Start+0x30>
    1872:	8e ef       	ldi	r24, 0xFE	; 254
    1874:	93 e0       	ldi	r25, 0x03	; 3
    1876:	90 93 f6 03 	sts	0x03F6, r25	; 0x8003f6 <ticks+0x1>
    187a:	80 93 f5 03 	sts	0x03F5, r24	; 0x8003f5 <ticks>
    187e:	20 81       	ld	r18, Z
    1880:	22 23       	and	r18, r18
    1882:	14 f0       	brlt	.+4      	; 0x1888 <I2C_Start+0x30>
    1884:	01 97       	sbiw	r24, 0x01	; 1
    1886:	b8 f7       	brcc	.-18     	; 0x1876 <I2C_Start+0x1e>
    1888:	08 95       	ret

0000188a <I2C_Write>:
   _delay_us(100); //wait for a short time
}
/***void I2C_Write(uint8_t var_i2cData_u8)***/
void I2C_Write(uint8_t var_i2cData_u8)
{
  TWI_DATA_REGISTER = var_i2cData_u8 ;
    188a:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
  TWI_CONTROL_REGISTER = ((1<< TWINT) | (1<<TWEN));
    188e:	e4 e7       	ldi	r30, 0x74	; 116
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	84 e8       	ldi	r24, 0x84	; 132
    1894:	80 83       	st	Z, r24
  for (ticks=Nticks; !(TWI_CONTROL_REGISTER & (1 <<TWINT)) && ticks; ticks--);
    1896:	8f ef       	ldi	r24, 0xFF	; 255
    1898:	93 e0       	ldi	r25, 0x03	; 3
    189a:	90 93 f6 03 	sts	0x03F6, r25	; 0x8003f6 <ticks+0x1>
    189e:	80 93 f5 03 	sts	0x03F5, r24	; 0x8003f5 <ticks>
    18a2:	80 81       	ld	r24, Z
    18a4:	88 23       	and	r24, r24
    18a6:	5c f0       	brlt	.+22     	; 0x18be <I2C_Write+0x34>
    18a8:	8e ef       	ldi	r24, 0xFE	; 254
    18aa:	93 e0       	ldi	r25, 0x03	; 3
    18ac:	90 93 f6 03 	sts	0x03F6, r25	; 0x8003f6 <ticks+0x1>
    18b0:	80 93 f5 03 	sts	0x03F5, r24	; 0x8003f5 <ticks>
    18b4:	20 81       	ld	r18, Z
    18b6:	22 23       	and	r18, r18
    18b8:	14 f0       	brlt	.+4      	; 0x18be <I2C_Write+0x34>
    18ba:	01 97       	sbiw	r24, 0x01	; 1
    18bc:	b8 f7       	brcc	.-18     	; 0x18ac <I2C_Write+0x22>
    18be:	08 95       	ret

000018c0 <I2C_Read>:
}
/***uint8_t I2C_Read(uint8_t var_ackOption_u8)***/
uint8_t I2C_Read(uint8_t var_ackOption_u8)
{
 TWI_CONTROL_REGISTER = ((1<< TWINT) | (1<<TWEN) | (var_ackOption_u8<<TWEA));
    18c0:	20 e4       	ldi	r18, 0x40	; 64
    18c2:	82 9f       	mul	r24, r18
    18c4:	c0 01       	movw	r24, r0
    18c6:	11 24       	eor	r1, r1
    18c8:	84 68       	ori	r24, 0x84	; 132
    18ca:	e4 e7       	ldi	r30, 0x74	; 116
    18cc:	f0 e0       	ldi	r31, 0x00	; 0
    18ce:	80 83       	st	Z, r24
   for (ticks=Nticks; !(TWI_CONTROL_REGISTER & (1 <<TWINT)) && ticks; ticks--);
    18d0:	8f ef       	ldi	r24, 0xFF	; 255
    18d2:	93 e0       	ldi	r25, 0x03	; 3
    18d4:	90 93 f6 03 	sts	0x03F6, r25	; 0x8003f6 <ticks+0x1>
    18d8:	80 93 f5 03 	sts	0x03F5, r24	; 0x8003f5 <ticks>
    18dc:	80 81       	ld	r24, Z
    18de:	88 23       	and	r24, r24
    18e0:	5c f0       	brlt	.+22     	; 0x18f8 <I2C_Read+0x38>
    18e2:	8e ef       	ldi	r24, 0xFE	; 254
    18e4:	93 e0       	ldi	r25, 0x03	; 3
    18e6:	90 93 f6 03 	sts	0x03F6, r25	; 0x8003f6 <ticks+0x1>
    18ea:	80 93 f5 03 	sts	0x03F5, r24	; 0x8003f5 <ticks>
    18ee:	20 81       	ld	r18, Z
    18f0:	22 23       	and	r18, r18
    18f2:	14 f0       	brlt	.+4      	; 0x18f8 <I2C_Read+0x38>
    18f4:	01 97       	sbiw	r24, 0x01	; 1
    18f6:	b8 f7       	brcc	.-18     	; 0x18e6 <I2C_Read+0x26>
   return TWI_DATA_REGISTER;
    18f8:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
}
    18fc:	08 95       	ret

000018fe <I2C_Status>:
/***uint8_t I2C_status(void)***/
uint8_t I2C_Status(void)
{
	return TWI_STATUS_REGISTER & TWI_STATUS_MASK;
    18fe:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
}
    1902:	88 7f       	andi	r24, 0xF8	; 248
    1904:	08 95       	ret

00001906 <I2C_Stop>:
  for (ticks=Nticks; !(TWI_CONTROL_REGISTER & (1<<TWINT)) && ticks; ticks--);
}
/***void I2C_Stop(void)***/
void I2C_Stop(void)
{
  TWI_CONTROL_REGISTER = ((1<< TWINT) | (1<<TWEN) | (1<<TWSTO));
    1906:	84 e9       	ldi	r24, 0x94	; 148
    1908:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    190c:	8f e8       	ldi	r24, 0x8F	; 143
    190e:	91 e0       	ldi	r25, 0x01	; 1
    1910:	01 97       	sbiw	r24, 0x01	; 1
    1912:	f1 f7       	brne	.-4      	; 0x1910 <I2C_Stop+0xa>
    1914:	00 c0       	rjmp	.+0      	; 0x1916 <I2C_Stop+0x10>
    1916:	00 00       	nop
    1918:	08 95       	ret

0000191a <I2C_Init>:
  return ic;
}
/***void I2C_Init(uint8_t prescaler)***/
void I2C_Init(uint8_t prescaler)
{
	I2C_DDR|=I2C_IO_MASK;
    191a:	91 b3       	in	r25, 0x11	; 17
    191c:	93 60       	ori	r25, 0x03	; 3
    191e:	91 bb       	out	0x11, r25	; 17
	I2C_PORT|=I2C_IO_MASK;
    1920:	92 b3       	in	r25, 0x12	; 18
    1922:	93 60       	ori	r25, 0x03	; 3
    1924:	92 bb       	out	0x12, r25	; 18
	switch(prescaler){
    1926:	84 30       	cpi	r24, 0x04	; 4
    1928:	79 f0       	breq	.+30     	; 0x1948 <I2C_Init+0x2e>
    192a:	18 f4       	brcc	.+6      	; 0x1932 <I2C_Init+0x18>
    192c:	81 30       	cpi	r24, 0x01	; 1
    192e:	31 f0       	breq	.+12     	; 0x193c <I2C_Init+0x22>
    1930:	1d c0       	rjmp	.+58     	; 0x196c <I2C_Init+0x52>
    1932:	80 31       	cpi	r24, 0x10	; 16
    1934:	79 f0       	breq	.+30     	; 0x1954 <I2C_Init+0x3a>
    1936:	80 34       	cpi	r24, 0x40	; 64
    1938:	99 f0       	breq	.+38     	; 0x1960 <I2C_Init+0x46>
    193a:	18 c0       	rjmp	.+48     	; 0x196c <I2C_Init+0x52>
		case 1:
		TWI_STATUS_REGISTER &= ~TWI_PRESCALER_MASK;
    193c:	e1 e7       	ldi	r30, 0x71	; 113
    193e:	f0 e0       	ldi	r31, 0x00	; 0
    1940:	90 81       	ld	r25, Z
    1942:	9c 7f       	andi	r25, 0xFC	; 252
    1944:	90 83       	st	Z, r25
		break;
    1946:	18 c0       	rjmp	.+48     	; 0x1978 <I2C_Init+0x5e>
		case 4:
		TWI_STATUS_REGISTER |= (1<<TWPS0);
    1948:	e1 e7       	ldi	r30, 0x71	; 113
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	90 81       	ld	r25, Z
    194e:	91 60       	ori	r25, 0x01	; 1
    1950:	90 83       	st	Z, r25
		break;
    1952:	12 c0       	rjmp	.+36     	; 0x1978 <I2C_Init+0x5e>
		case 16:
		TWI_STATUS_REGISTER |= (2<<TWPS0);
    1954:	e1 e7       	ldi	r30, 0x71	; 113
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	90 81       	ld	r25, Z
    195a:	92 60       	ori	r25, 0x02	; 2
    195c:	90 83       	st	Z, r25
		break;
    195e:	0c c0       	rjmp	.+24     	; 0x1978 <I2C_Init+0x5e>
		case 64:
		TWI_STATUS_REGISTER |= (3<<TWPS0);
    1960:	e1 e7       	ldi	r30, 0x71	; 113
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	90 81       	ld	r25, Z
    1966:	93 60       	ori	r25, 0x03	; 3
    1968:	90 83       	st	Z, r25
		break;
    196a:	06 c0       	rjmp	.+12     	; 0x1978 <I2C_Init+0x5e>
		default:
		prescaler=1;
		TWI_STATUS_REGISTER &= ~TWI_PRESCALER_MASK;
    196c:	e1 e7       	ldi	r30, 0x71	; 113
    196e:	f0 e0       	ldi	r31, 0x00	; 0
    1970:	80 81       	ld	r24, Z
    1972:	8c 7f       	andi	r24, 0xFC	; 252
    1974:	80 83       	st	Z, r24
		break;
		case 64:
		TWI_STATUS_REGISTER |= (3<<TWPS0);
		break;
		default:
		prescaler=1;
    1976:	81 e0       	ldi	r24, 0x01	; 1
		TWI_STATUS_REGISTER &= ~TWI_PRESCALER_MASK;
		break;
	}
	TWI_BIT_RATE_REGISTER = ((F_CPU/I2C_SCL_CLOCK)-16)/(2*prescaler);
    1978:	28 2f       	mov	r18, r24
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	22 0f       	add	r18, r18
    197e:	33 1f       	adc	r19, r19
    1980:	03 2e       	mov	r0, r19
    1982:	00 0c       	add	r0, r0
    1984:	44 0b       	sbc	r20, r20
    1986:	55 0b       	sbc	r21, r21
    1988:	60 e9       	ldi	r22, 0x90	; 144
    198a:	70 e0       	ldi	r23, 0x00	; 0
    198c:	80 e0       	ldi	r24, 0x00	; 0
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <__udivmodsi4>
    1994:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
    1998:	08 95       	ret

0000199a <I2Cenable>:
void I2C_Write(uint8_t var_i2cData_u8);
uint8_t I2C_Read(uint8_t var_ackOption_u8);
uint8_t I2C_Status(void);
/***I2C I2Cenable(uint8_t prescaler)***/
I2C I2Cenable(uint8_t prescaler)
{
    199a:	1f 93       	push	r17
    199c:	cf 93       	push	r28
    199e:	df 93       	push	r29
    19a0:	ec 01       	movw	r28, r24
    19a2:	86 2f       	mov	r24, r22
  uint8_t tSREG;
  tSREG=SREG;
    19a4:	1f b7       	in	r17, 0x3f	; 63
  SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
    19a6:	9f b7       	in	r25, 0x3f	; 63
    19a8:	9f 77       	andi	r25, 0x7F	; 127
    19aa:	9f bf       	out	0x3f, r25	; 63
  I2C ic;
  I2C_Init(prescaler);
    19ac:	b6 df       	rcall	.-148    	; 0x191a <I2C_Init>
  ic.Stop=I2C_Stop;
  ic.Write=I2C_Write;
  ic.Read=I2C_Read;
  ic.Status=I2C_Status;
  /******/
  SREG=tSREG;
    19ae:	1f bf       	out	0x3f, r17	; 63
  return ic;
    19b0:	8c e2       	ldi	r24, 0x2C	; 44
    19b2:	9c e0       	ldi	r25, 0x0C	; 12
    19b4:	99 83       	std	Y+1, r25	; 0x01
    19b6:	88 83       	st	Y, r24
    19b8:	83 e8       	ldi	r24, 0x83	; 131
    19ba:	9c e0       	ldi	r25, 0x0C	; 12
    19bc:	9b 83       	std	Y+3, r25	; 0x03
    19be:	8a 83       	std	Y+2, r24	; 0x02
    19c0:	85 e4       	ldi	r24, 0x45	; 69
    19c2:	9c e0       	ldi	r25, 0x0C	; 12
    19c4:	9d 83       	std	Y+5, r25	; 0x05
    19c6:	8c 83       	std	Y+4, r24	; 0x04
    19c8:	80 e6       	ldi	r24, 0x60	; 96
    19ca:	9c e0       	ldi	r25, 0x0C	; 12
    19cc:	9f 83       	std	Y+7, r25	; 0x07
    19ce:	8e 83       	std	Y+6, r24	; 0x06
    19d0:	8f e7       	ldi	r24, 0x7F	; 127
    19d2:	9c e0       	ldi	r25, 0x0C	; 12
    19d4:	99 87       	std	Y+9, r25	; 0x09
    19d6:	88 87       	std	Y+8, r24	; 0x08
}
    19d8:	ce 01       	movw	r24, r28
    19da:	df 91       	pop	r29
    19dc:	cf 91       	pop	r28
    19de:	1f 91       	pop	r17
    19e0:	08 95       	ret

000019e2 <KEYPAD_get>:
	}
	return data;
}
/***read***/
struct keypadata KEYPAD_get(void)
{
    19e2:	cf 93       	push	r28
    19e4:	df 93       	push	r29
    19e6:	00 d0       	rcall	.+0      	; 0x19e8 <KEYPAD_get+0x6>
    19e8:	00 d0       	rcall	.+0      	; 0x19ea <KEYPAD_get+0x8>
    19ea:	1f 92       	push	r1
    19ec:	cd b7       	in	r28, 0x3d	; 61
    19ee:	de b7       	in	r29, 0x3e	; 62
	return data;
    19f0:	85 e0       	ldi	r24, 0x05	; 5
    19f2:	e5 e3       	ldi	r30, 0x35	; 53
    19f4:	f4 e0       	ldi	r31, 0x04	; 4
    19f6:	de 01       	movw	r26, r28
    19f8:	11 96       	adiw	r26, 0x01	; 1
    19fa:	01 90       	ld	r0, Z+
    19fc:	0d 92       	st	X+, r0
    19fe:	8a 95       	dec	r24
    1a00:	e1 f7       	brne	.-8      	; 0x19fa <KEYPAD_get+0x18>
    1a02:	29 81       	ldd	r18, Y+1	; 0x01
    1a04:	3a 81       	ldd	r19, Y+2	; 0x02
    1a06:	4b 81       	ldd	r20, Y+3	; 0x03
    1a08:	5c 81       	ldd	r21, Y+4	; 0x04
    1a0a:	6d 81       	ldd	r22, Y+5	; 0x05
}
    1a0c:	70 e0       	ldi	r23, 0x00	; 0
    1a0e:	80 e0       	ldi	r24, 0x00	; 0
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	0f 90       	pop	r0
    1a14:	0f 90       	pop	r0
    1a16:	0f 90       	pop	r0
    1a18:	0f 90       	pop	r0
    1a1a:	0f 90       	pop	r0
    1a1c:	df 91       	pop	r29
    1a1e:	cf 91       	pop	r28
    1a20:	08 95       	ret

00001a22 <KEYPAD_flush>:
/***flush***/
void KEYPAD_flush(void)
{
	KEYPADSTRINGINDEX=0;
    1a22:	10 92 02 04 	sts	0x0402, r1	; 0x800402 <KEYPADSTRINGINDEX>
	data.character=' ';
    1a26:	e5 e3       	ldi	r30, 0x35	; 53
    1a28:	f4 e0       	ldi	r31, 0x04	; 4
    1a2a:	80 e2       	ldi	r24, 0x20	; 32
    1a2c:	80 83       	st	Z, r24
	data.printstring="\0";
    1a2e:	82 e1       	ldi	r24, 0x12	; 18
    1a30:	91 e0       	ldi	r25, 0x01	; 1
    1a32:	92 83       	std	Z+2, r25	; 0x02
    1a34:	81 83       	std	Z+1, r24	; 0x01
	data.string="\0";
    1a36:	94 83       	std	Z+4, r25	; 0x04
    1a38:	83 83       	std	Z+3, r24	; 0x03
    1a3a:	08 95       	ret

00001a3c <KEYPAD_getkey>:
	*keypad_PORT|=(1<<KEYPADLINE_1) | (1<<KEYPADLINE_2) | (1<<KEYPADLINE_3) | (1<<KEYPADLINE_4);
	//Going to use pull down method.
	return keypad;
}
char KEYPAD_getkey(void)
{
    1a3c:	cf 93       	push	r28
    1a3e:	df 93       	push	r29
    1a40:	21 e0       	ldi	r18, 0x01	; 1
	uint8_t HL;
	char c='\0';
    1a42:	80 e0       	ldi	r24, 0x00	; 0
				*keypad_PORT|=(1<<KEYPADLINE_1);
				break;
			case 1: //line 2 index 1
				*keypad_DDR|=(1<<KEYPADLINE_2);
				*keypad_PORT&=~(1<<KEYPADLINE_2);
				keypad_dataf.line_2=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
    1a44:	aa ef       	ldi	r26, 0xFA	; 250
    1a46:	b3 e0       	ldi	r27, 0x03	; 3
				HL=KEYPADhl(keypad_datai.line_2,keypad_dataf.line_2);
    1a48:	ee ef       	ldi	r30, 0xFE	; 254
    1a4a:	f3 e0       	ldi	r31, 0x03	; 3
					if(HL == (1<<KEYPADDATA_2))
						c=keypadvalue[1][1];
					if(HL == (1<<KEYPADDATA_3))
						c=keypadvalue[1][2];
					if(HL == (1<<KEYPADDATA_4))
						c=keypadvalue[1][3];
    1a4c:	60 e0       	ldi	r22, 0x00	; 0
    1a4e:	71 e0       	ldi	r23, 0x01	; 1
    1a50:	01 c0       	rjmp	.+2      	; 0x1a54 <KEYPAD_getkey+0x18>
    1a52:	2f 5f       	subi	r18, 0xFF	; 255
{
	uint8_t HL;
	char c='\0';
	uint8_t keypad_option;
	for(keypad_option=0;keypad_option<KEYPADLINES;keypad_option++){
		switch (keypad_option)
    1a54:	9f ef       	ldi	r25, 0xFF	; 255
    1a56:	92 0f       	add	r25, r18
    1a58:	91 30       	cpi	r25, 0x01	; 1
    1a5a:	09 f4       	brne	.+2      	; 0x1a5e <KEYPAD_getkey+0x22>
    1a5c:	4b c0       	rjmp	.+150    	; 0x1af4 <KEYPAD_getkey+0xb8>
    1a5e:	38 f0       	brcs	.+14     	; 0x1a6e <KEYPAD_getkey+0x32>
    1a60:	92 30       	cpi	r25, 0x02	; 2
    1a62:	09 f4       	brne	.+2      	; 0x1a66 <KEYPAD_getkey+0x2a>
    1a64:	8c c0       	rjmp	.+280    	; 0x1b7e <KEYPAD_getkey+0x142>
    1a66:	93 30       	cpi	r25, 0x03	; 3
    1a68:	09 f4       	brne	.+2      	; 0x1a6c <KEYPAD_getkey+0x30>
    1a6a:	ce c0       	rjmp	.+412    	; 0x1c08 <KEYPAD_getkey+0x1cc>
    1a6c:	0e c1       	rjmp	.+540    	; 0x1c8a <KEYPAD_getkey+0x24e>
		{
			case 0: //line 1 index 0
				*keypad_DDR|=(1<<KEYPADLINE_1);
    1a6e:	40 91 05 04 	lds	r20, 0x0405	; 0x800405 <keypad_DDR>
    1a72:	50 91 06 04 	lds	r21, 0x0406	; 0x800406 <keypad_DDR+0x1>
    1a76:	ea 01       	movw	r28, r20
    1a78:	98 81       	ld	r25, Y
    1a7a:	90 68       	ori	r25, 0x80	; 128
    1a7c:	98 83       	st	Y, r25
				*keypad_PORT&=~(1<<KEYPADLINE_1);
    1a7e:	40 91 f7 03 	lds	r20, 0x03F7	; 0x8003f7 <keypad_PORT>
    1a82:	50 91 f8 03 	lds	r21, 0x03F8	; 0x8003f8 <keypad_PORT+0x1>
    1a86:	ea 01       	movw	r28, r20
    1a88:	98 81       	ld	r25, Y
    1a8a:	9f 77       	andi	r25, 0x7F	; 127
    1a8c:	98 83       	st	Y, r25
				keypad_dataf.line_1=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
    1a8e:	40 91 03 04 	lds	r20, 0x0403	; 0x800403 <keypad_PIN>
    1a92:	50 91 04 04 	lds	r21, 0x0404	; 0x800404 <keypad_PIN+0x1>
    1a96:	ea 01       	movw	r28, r20
    1a98:	38 81       	ld	r19, Y
    1a9a:	34 77       	andi	r19, 0x74	; 116
    1a9c:	3c 93       	st	X, r19
				HL=KEYPADhl(keypad_datai.line_1,keypad_dataf.line_1);
    1a9e:	90 81       	ld	r25, Z
uint8_t KEYPADhl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	//printf("KEYPADhl\n");
	i=xf^xi;
	i&=xi;
    1aa0:	43 2f       	mov	r20, r19
    1aa2:	49 27       	eor	r20, r25
    1aa4:	94 23       	and	r25, r20
			case 0: //line 1 index 0
				*keypad_DDR|=(1<<KEYPADLINE_1);
				*keypad_PORT&=~(1<<KEYPADLINE_1);
				keypad_dataf.line_1=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
				HL=KEYPADhl(keypad_datai.line_1,keypad_dataf.line_1);
				keypad_datai.line_1=keypad_dataf.line_1;
    1aa6:	30 83       	st	Z, r19
				if(HL){
    1aa8:	99 23       	and	r25, r25
    1aaa:	99 f0       	breq	.+38     	; 0x1ad2 <KEYPAD_getkey+0x96>
					//decode index line one column what ?
					if(HL == (1<<KEYPADDATA_1))
    1aac:	94 30       	cpi	r25, 0x04	; 4
    1aae:	19 f4       	brne	.+6      	; 0x1ab6 <KEYPAD_getkey+0x7a>
						c=keypadvalue[0][0];
    1ab0:	eb 01       	movw	r28, r22
    1ab2:	88 81       	ld	r24, Y
    1ab4:	0a c0       	rjmp	.+20     	; 0x1aca <KEYPAD_getkey+0x8e>
					if(HL == (1<<KEYPADDATA_2))
    1ab6:	90 31       	cpi	r25, 0x10	; 16
    1ab8:	19 f4       	brne	.+6      	; 0x1ac0 <KEYPAD_getkey+0x84>
						c=keypadvalue[0][1];
    1aba:	eb 01       	movw	r28, r22
    1abc:	89 81       	ldd	r24, Y+1	; 0x01
    1abe:	09 c0       	rjmp	.+18     	; 0x1ad2 <KEYPAD_getkey+0x96>
					if(HL == (1<<KEYPADDATA_3))
    1ac0:	90 32       	cpi	r25, 0x20	; 32
    1ac2:	19 f4       	brne	.+6      	; 0x1aca <KEYPAD_getkey+0x8e>
						c=keypadvalue[0][2];
    1ac4:	eb 01       	movw	r28, r22
    1ac6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac8:	04 c0       	rjmp	.+8      	; 0x1ad2 <KEYPAD_getkey+0x96>
					if(HL == (1<<KEYPADDATA_4))
    1aca:	90 34       	cpi	r25, 0x40	; 64
    1acc:	11 f4       	brne	.+4      	; 0x1ad2 <KEYPAD_getkey+0x96>
						c=keypadvalue[0][3];
    1ace:	eb 01       	movw	r28, r22
    1ad0:	8b 81       	ldd	r24, Y+3	; 0x03
				}
				*keypad_DDR&=~(1<<KEYPADLINE_1);
    1ad2:	40 91 05 04 	lds	r20, 0x0405	; 0x800405 <keypad_DDR>
    1ad6:	50 91 06 04 	lds	r21, 0x0406	; 0x800406 <keypad_DDR+0x1>
    1ada:	ea 01       	movw	r28, r20
    1adc:	98 81       	ld	r25, Y
    1ade:	9f 77       	andi	r25, 0x7F	; 127
    1ae0:	98 83       	st	Y, r25
				*keypad_PORT|=(1<<KEYPADLINE_1);
    1ae2:	40 91 f7 03 	lds	r20, 0x03F7	; 0x8003f7 <keypad_PORT>
    1ae6:	50 91 f8 03 	lds	r21, 0x03F8	; 0x8003f8 <keypad_PORT+0x1>
    1aea:	ea 01       	movw	r28, r20
    1aec:	98 81       	ld	r25, Y
    1aee:	90 68       	ori	r25, 0x80	; 128
    1af0:	98 83       	st	Y, r25
				break;
    1af2:	af cf       	rjmp	.-162    	; 0x1a52 <KEYPAD_getkey+0x16>
			case 1: //line 2 index 1
				*keypad_DDR|=(1<<KEYPADLINE_2);
    1af4:	40 91 05 04 	lds	r20, 0x0405	; 0x800405 <keypad_DDR>
    1af8:	50 91 06 04 	lds	r21, 0x0406	; 0x800406 <keypad_DDR+0x1>
    1afc:	ea 01       	movw	r28, r20
    1afe:	98 81       	ld	r25, Y
    1b00:	91 60       	ori	r25, 0x01	; 1
    1b02:	98 83       	st	Y, r25
				*keypad_PORT&=~(1<<KEYPADLINE_2);
    1b04:	40 91 f7 03 	lds	r20, 0x03F7	; 0x8003f7 <keypad_PORT>
    1b08:	50 91 f8 03 	lds	r21, 0x03F8	; 0x8003f8 <keypad_PORT+0x1>
    1b0c:	ea 01       	movw	r28, r20
    1b0e:	98 81       	ld	r25, Y
    1b10:	9e 7f       	andi	r25, 0xFE	; 254
    1b12:	98 83       	st	Y, r25
				keypad_dataf.line_2=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
    1b14:	40 91 03 04 	lds	r20, 0x0403	; 0x800403 <keypad_PIN>
    1b18:	50 91 04 04 	lds	r21, 0x0404	; 0x800404 <keypad_PIN+0x1>
    1b1c:	ea 01       	movw	r28, r20
    1b1e:	38 81       	ld	r19, Y
    1b20:	34 77       	andi	r19, 0x74	; 116
    1b22:	11 96       	adiw	r26, 0x01	; 1
    1b24:	3c 93       	st	X, r19
    1b26:	11 97       	sbiw	r26, 0x01	; 1
				HL=KEYPADhl(keypad_datai.line_2,keypad_dataf.line_2);
    1b28:	91 81       	ldd	r25, Z+1	; 0x01
uint8_t KEYPADhl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	//printf("KEYPADhl\n");
	i=xf^xi;
	i&=xi;
    1b2a:	43 2f       	mov	r20, r19
    1b2c:	49 27       	eor	r20, r25
    1b2e:	94 23       	and	r25, r20
			case 1: //line 2 index 1
				*keypad_DDR|=(1<<KEYPADLINE_2);
				*keypad_PORT&=~(1<<KEYPADLINE_2);
				keypad_dataf.line_2=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
				HL=KEYPADhl(keypad_datai.line_2,keypad_dataf.line_2);
				keypad_datai.line_2=keypad_dataf.line_2;
    1b30:	31 83       	std	Z+1, r19	; 0x01
				if(HL){
    1b32:	99 23       	and	r25, r25
    1b34:	99 f0       	breq	.+38     	; 0x1b5c <KEYPAD_getkey+0x120>
					//decode index line two column what ?
					if(HL == (1<<KEYPADDATA_1))
    1b36:	94 30       	cpi	r25, 0x04	; 4
    1b38:	19 f4       	brne	.+6      	; 0x1b40 <KEYPAD_getkey+0x104>
						c=keypadvalue[1][0];
    1b3a:	eb 01       	movw	r28, r22
    1b3c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b3e:	0a c0       	rjmp	.+20     	; 0x1b54 <KEYPAD_getkey+0x118>
					if(HL == (1<<KEYPADDATA_2))
    1b40:	90 31       	cpi	r25, 0x10	; 16
    1b42:	19 f4       	brne	.+6      	; 0x1b4a <KEYPAD_getkey+0x10e>
						c=keypadvalue[1][1];
    1b44:	eb 01       	movw	r28, r22
    1b46:	8d 81       	ldd	r24, Y+5	; 0x05
    1b48:	09 c0       	rjmp	.+18     	; 0x1b5c <KEYPAD_getkey+0x120>
					if(HL == (1<<KEYPADDATA_3))
    1b4a:	90 32       	cpi	r25, 0x20	; 32
    1b4c:	19 f4       	brne	.+6      	; 0x1b54 <KEYPAD_getkey+0x118>
						c=keypadvalue[1][2];
    1b4e:	eb 01       	movw	r28, r22
    1b50:	8e 81       	ldd	r24, Y+6	; 0x06
    1b52:	04 c0       	rjmp	.+8      	; 0x1b5c <KEYPAD_getkey+0x120>
					if(HL == (1<<KEYPADDATA_4))
    1b54:	90 34       	cpi	r25, 0x40	; 64
    1b56:	11 f4       	brne	.+4      	; 0x1b5c <KEYPAD_getkey+0x120>
						c=keypadvalue[1][3];
    1b58:	eb 01       	movw	r28, r22
    1b5a:	8f 81       	ldd	r24, Y+7	; 0x07
				}
				*keypad_DDR&=~(1<<KEYPADLINE_2);
    1b5c:	40 91 05 04 	lds	r20, 0x0405	; 0x800405 <keypad_DDR>
    1b60:	50 91 06 04 	lds	r21, 0x0406	; 0x800406 <keypad_DDR+0x1>
    1b64:	ea 01       	movw	r28, r20
    1b66:	98 81       	ld	r25, Y
    1b68:	9e 7f       	andi	r25, 0xFE	; 254
    1b6a:	98 83       	st	Y, r25
				*keypad_PORT|=(1<<KEYPADLINE_2);
    1b6c:	40 91 f7 03 	lds	r20, 0x03F7	; 0x8003f7 <keypad_PORT>
    1b70:	50 91 f8 03 	lds	r21, 0x03F8	; 0x8003f8 <keypad_PORT+0x1>
    1b74:	ea 01       	movw	r28, r20
    1b76:	98 81       	ld	r25, Y
    1b78:	91 60       	ori	r25, 0x01	; 1
    1b7a:	98 83       	st	Y, r25
				break;
    1b7c:	6a cf       	rjmp	.-300    	; 0x1a52 <KEYPAD_getkey+0x16>
			case 2: //line 3 index 2
				*keypad_DDR|=(1<<KEYPADLINE_3);
    1b7e:	40 91 05 04 	lds	r20, 0x0405	; 0x800405 <keypad_DDR>
    1b82:	50 91 06 04 	lds	r21, 0x0406	; 0x800406 <keypad_DDR+0x1>
    1b86:	ea 01       	movw	r28, r20
    1b88:	98 81       	ld	r25, Y
    1b8a:	92 60       	ori	r25, 0x02	; 2
    1b8c:	98 83       	st	Y, r25
				*keypad_PORT&=~(1<<KEYPADLINE_3);
    1b8e:	40 91 f7 03 	lds	r20, 0x03F7	; 0x8003f7 <keypad_PORT>
    1b92:	50 91 f8 03 	lds	r21, 0x03F8	; 0x8003f8 <keypad_PORT+0x1>
    1b96:	ea 01       	movw	r28, r20
    1b98:	98 81       	ld	r25, Y
    1b9a:	9d 7f       	andi	r25, 0xFD	; 253
    1b9c:	98 83       	st	Y, r25
				keypad_dataf.line_3=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
    1b9e:	40 91 03 04 	lds	r20, 0x0403	; 0x800403 <keypad_PIN>
    1ba2:	50 91 04 04 	lds	r21, 0x0404	; 0x800404 <keypad_PIN+0x1>
    1ba6:	ea 01       	movw	r28, r20
    1ba8:	38 81       	ld	r19, Y
    1baa:	34 77       	andi	r19, 0x74	; 116
    1bac:	12 96       	adiw	r26, 0x02	; 2
    1bae:	3c 93       	st	X, r19
    1bb0:	12 97       	sbiw	r26, 0x02	; 2
				HL=KEYPADhl(keypad_datai.line_3,keypad_dataf.line_3);
    1bb2:	92 81       	ldd	r25, Z+2	; 0x02
uint8_t KEYPADhl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	//printf("KEYPADhl\n");
	i=xf^xi;
	i&=xi;
    1bb4:	43 2f       	mov	r20, r19
    1bb6:	49 27       	eor	r20, r25
    1bb8:	94 23       	and	r25, r20
			case 2: //line 3 index 2
				*keypad_DDR|=(1<<KEYPADLINE_3);
				*keypad_PORT&=~(1<<KEYPADLINE_3);
				keypad_dataf.line_3=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
				HL=KEYPADhl(keypad_datai.line_3,keypad_dataf.line_3);
				keypad_datai.line_3=keypad_dataf.line_3;
    1bba:	32 83       	std	Z+2, r19	; 0x02
				if(HL){
    1bbc:	99 23       	and	r25, r25
    1bbe:	99 f0       	breq	.+38     	; 0x1be6 <KEYPAD_getkey+0x1aa>
					//decode index line three column what ?
					if(HL == (1<<KEYPADDATA_1))
    1bc0:	94 30       	cpi	r25, 0x04	; 4
    1bc2:	19 f4       	brne	.+6      	; 0x1bca <KEYPAD_getkey+0x18e>
						c=keypadvalue[2][0];
    1bc4:	eb 01       	movw	r28, r22
    1bc6:	88 85       	ldd	r24, Y+8	; 0x08
    1bc8:	0a c0       	rjmp	.+20     	; 0x1bde <KEYPAD_getkey+0x1a2>
					if(HL == (1<<KEYPADDATA_2))
    1bca:	90 31       	cpi	r25, 0x10	; 16
    1bcc:	19 f4       	brne	.+6      	; 0x1bd4 <KEYPAD_getkey+0x198>
						c=keypadvalue[2][1];
    1bce:	eb 01       	movw	r28, r22
    1bd0:	89 85       	ldd	r24, Y+9	; 0x09
    1bd2:	09 c0       	rjmp	.+18     	; 0x1be6 <KEYPAD_getkey+0x1aa>
					if(HL == (1<<KEYPADDATA_3))
    1bd4:	90 32       	cpi	r25, 0x20	; 32
    1bd6:	19 f4       	brne	.+6      	; 0x1bde <KEYPAD_getkey+0x1a2>
						c=keypadvalue[2][2];
    1bd8:	eb 01       	movw	r28, r22
    1bda:	8a 85       	ldd	r24, Y+10	; 0x0a
    1bdc:	04 c0       	rjmp	.+8      	; 0x1be6 <KEYPAD_getkey+0x1aa>
					if(HL == (1<<KEYPADDATA_4))
    1bde:	90 34       	cpi	r25, 0x40	; 64
    1be0:	11 f4       	brne	.+4      	; 0x1be6 <KEYPAD_getkey+0x1aa>
						c=keypadvalue[2][3];
    1be2:	eb 01       	movw	r28, r22
    1be4:	8b 85       	ldd	r24, Y+11	; 0x0b
				}
				*keypad_DDR&=~(1<<KEYPADLINE_3);
    1be6:	40 91 05 04 	lds	r20, 0x0405	; 0x800405 <keypad_DDR>
    1bea:	50 91 06 04 	lds	r21, 0x0406	; 0x800406 <keypad_DDR+0x1>
    1bee:	ea 01       	movw	r28, r20
    1bf0:	98 81       	ld	r25, Y
    1bf2:	9d 7f       	andi	r25, 0xFD	; 253
    1bf4:	98 83       	st	Y, r25
				*keypad_PORT|=(1<<KEYPADLINE_3);
    1bf6:	40 91 f7 03 	lds	r20, 0x03F7	; 0x8003f7 <keypad_PORT>
    1bfa:	50 91 f8 03 	lds	r21, 0x03F8	; 0x8003f8 <keypad_PORT+0x1>
    1bfe:	ea 01       	movw	r28, r20
    1c00:	98 81       	ld	r25, Y
    1c02:	92 60       	ori	r25, 0x02	; 2
    1c04:	98 83       	st	Y, r25
				break;
    1c06:	25 cf       	rjmp	.-438    	; 0x1a52 <KEYPAD_getkey+0x16>
			case 3: //line 4 index 3
				*keypad_DDR|=(1<<KEYPADLINE_4);
    1c08:	e0 91 05 04 	lds	r30, 0x0405	; 0x800405 <keypad_DDR>
    1c0c:	f0 91 06 04 	lds	r31, 0x0406	; 0x800406 <keypad_DDR+0x1>
    1c10:	90 81       	ld	r25, Z
    1c12:	98 60       	ori	r25, 0x08	; 8
    1c14:	90 83       	st	Z, r25
				*keypad_PORT&=~(1<<KEYPADLINE_4);
    1c16:	e0 91 f7 03 	lds	r30, 0x03F7	; 0x8003f7 <keypad_PORT>
    1c1a:	f0 91 f8 03 	lds	r31, 0x03F8	; 0x8003f8 <keypad_PORT+0x1>
    1c1e:	90 81       	ld	r25, Z
    1c20:	97 7f       	andi	r25, 0xF7	; 247
    1c22:	90 83       	st	Z, r25
				keypad_dataf.line_4=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
    1c24:	e0 91 03 04 	lds	r30, 0x0403	; 0x800403 <keypad_PIN>
    1c28:	f0 91 04 04 	lds	r31, 0x0404	; 0x800404 <keypad_PIN+0x1>
    1c2c:	20 81       	ld	r18, Z
    1c2e:	24 77       	andi	r18, 0x74	; 116
    1c30:	20 93 fd 03 	sts	0x03FD, r18	; 0x8003fd <keypad_dataf+0x3>
				HL=KEYPADhl(keypad_datai.line_4,keypad_dataf.line_4);
    1c34:	ee ef       	ldi	r30, 0xFE	; 254
    1c36:	f3 e0       	ldi	r31, 0x03	; 3
    1c38:	93 81       	ldd	r25, Z+3	; 0x03
uint8_t KEYPADhl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	//printf("KEYPADhl\n");
	i=xf^xi;
	i&=xi;
    1c3a:	32 2f       	mov	r19, r18
    1c3c:	39 27       	eor	r19, r25
    1c3e:	93 23       	and	r25, r19
			case 3: //line 4 index 3
				*keypad_DDR|=(1<<KEYPADLINE_4);
				*keypad_PORT&=~(1<<KEYPADLINE_4);
				keypad_dataf.line_4=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
				HL=KEYPADhl(keypad_datai.line_4,keypad_dataf.line_4);
				keypad_datai.line_4=keypad_dataf.line_4;
    1c40:	23 83       	std	Z+3, r18	; 0x03
				if(HL){
    1c42:	99 23       	and	r25, r25
    1c44:	99 f0       	breq	.+38     	; 0x1c6c <KEYPAD_getkey+0x230>
					//decode index line four column what ?
					if(HL == (1<<KEYPADDATA_1))
    1c46:	94 30       	cpi	r25, 0x04	; 4
    1c48:	19 f4       	brne	.+6      	; 0x1c50 <KEYPAD_getkey+0x214>
						c=keypadvalue[3][0];
    1c4a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__DATA_REGION_ORIGIN__+0xc>
    1c4e:	0a c0       	rjmp	.+20     	; 0x1c64 <KEYPAD_getkey+0x228>
					if(HL == (1<<KEYPADDATA_2))
    1c50:	90 31       	cpi	r25, 0x10	; 16
    1c52:	19 f4       	brne	.+6      	; 0x1c5a <KEYPAD_getkey+0x21e>
						c=keypadvalue[3][1];
    1c54:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <__DATA_REGION_ORIGIN__+0xd>
    1c58:	09 c0       	rjmp	.+18     	; 0x1c6c <KEYPAD_getkey+0x230>
					if(HL == (1<<KEYPADDATA_3))
    1c5a:	90 32       	cpi	r25, 0x20	; 32
    1c5c:	19 f4       	brne	.+6      	; 0x1c64 <KEYPAD_getkey+0x228>
						c=keypadvalue[3][2];
    1c5e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__DATA_REGION_ORIGIN__+0xe>
    1c62:	04 c0       	rjmp	.+8      	; 0x1c6c <KEYPAD_getkey+0x230>
					if(HL == (1<<KEYPADDATA_4))
    1c64:	90 34       	cpi	r25, 0x40	; 64
    1c66:	11 f4       	brne	.+4      	; 0x1c6c <KEYPAD_getkey+0x230>
						c=keypadvalue[3][3];
    1c68:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <__DATA_REGION_ORIGIN__+0xf>
				}
				*keypad_DDR&=~(1<<KEYPADLINE_4);
    1c6c:	e0 91 05 04 	lds	r30, 0x0405	; 0x800405 <keypad_DDR>
    1c70:	f0 91 06 04 	lds	r31, 0x0406	; 0x800406 <keypad_DDR+0x1>
    1c74:	90 81       	ld	r25, Z
    1c76:	97 7f       	andi	r25, 0xF7	; 247
    1c78:	90 83       	st	Z, r25
				*keypad_PORT|=(1<<KEYPADLINE_4);
    1c7a:	e0 91 f7 03 	lds	r30, 0x03F7	; 0x8003f7 <keypad_PORT>
    1c7e:	f0 91 f8 03 	lds	r31, 0x03F8	; 0x8003f8 <keypad_PORT+0x1>
    1c82:	90 81       	ld	r25, Z
    1c84:	98 60       	ori	r25, 0x08	; 8
    1c86:	90 83       	st	Z, r25
    1c88:	03 c0       	rjmp	.+6      	; 0x1c90 <KEYPAD_getkey+0x254>
char KEYPAD_getkey(void)
{
	uint8_t HL;
	char c='\0';
	uint8_t keypad_option;
	for(keypad_option=0;keypad_option<KEYPADLINES;keypad_option++){
    1c8a:	24 30       	cpi	r18, 0x04	; 4
    1c8c:	08 f4       	brcc	.+2      	; 0x1c90 <KEYPAD_getkey+0x254>
    1c8e:	e1 ce       	rjmp	.-574    	; 0x1a52 <KEYPAD_getkey+0x16>
			default:
				break;
		}//endswitch
	}//endfor
	return c;
}
    1c90:	df 91       	pop	r29
    1c92:	cf 91       	pop	r28
    1c94:	08 95       	ret

00001c96 <KEYPAD_read>:
/***read***/
struct keypadata KEYPAD_read(void)
{
    1c96:	cf 93       	push	r28
    1c98:	df 93       	push	r29
    1c9a:	00 d0       	rcall	.+0      	; 0x1c9c <KEYPAD_read+0x6>
    1c9c:	00 d0       	rcall	.+0      	; 0x1c9e <KEYPAD_read+0x8>
    1c9e:	1f 92       	push	r1
    1ca0:	cd b7       	in	r28, 0x3d	; 61
    1ca2:	de b7       	in	r29, 0x3e	; 62
	char c;
	c=KEYPAD_getkey(); //returns null all the time when no entry
    1ca4:	cb de       	rcall	.-618    	; 0x1a3c <KEYPAD_getkey>
	if(c){
    1ca6:	88 23       	and	r24, r24
    1ca8:	b1 f1       	breq	.+108    	; 0x1d16 <KEYPAD_read+0x80>
		data.character=c;
    1caa:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <data>
		if(KEYPADSTRINGINDEX<(KEYPADSTRINGSIZE)){
    1cae:	90 91 02 04 	lds	r25, 0x0402	; 0x800402 <KEYPADSTRINGINDEX>
    1cb2:	94 31       	cpi	r25, 0x14	; 20
    1cb4:	88 f4       	brcc	.+34     	; 0x1cd8 <KEYPAD_read+0x42>
			KEYPAD_string[KEYPADSTRINGINDEX]=c;
    1cb6:	e0 91 02 04 	lds	r30, 0x0402	; 0x800402 <KEYPADSTRINGINDEX>
    1cba:	f0 e0       	ldi	r31, 0x00	; 0
    1cbc:	e9 5f       	subi	r30, 0xF9	; 249
    1cbe:	fb 4f       	sbci	r31, 0xFB	; 251
    1cc0:	80 83       	st	Z, r24
			KEYPADSTRINGINDEX++;
    1cc2:	90 91 02 04 	lds	r25, 0x0402	; 0x800402 <KEYPADSTRINGINDEX>
    1cc6:	9f 5f       	subi	r25, 0xFF	; 255
    1cc8:	90 93 02 04 	sts	0x0402, r25	; 0x800402 <KEYPADSTRINGINDEX>
			KEYPAD_string[KEYPADSTRINGINDEX]='\0';
    1ccc:	e0 91 02 04 	lds	r30, 0x0402	; 0x800402 <KEYPADSTRINGINDEX>
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	e9 5f       	subi	r30, 0xF9	; 249
    1cd4:	fb 4f       	sbci	r31, 0xFB	; 251
    1cd6:	10 82       	st	Z, r1
		}
		if(c==KEYPADENTERKEY){
    1cd8:	84 34       	cpi	r24, 0x44	; 68
    1cda:	99 f4       	brne	.+38     	; 0x1d02 <KEYPAD_read+0x6c>
			KEYPAD_string[KEYPADSTRINGINDEX-1]='\0';
    1cdc:	e0 91 02 04 	lds	r30, 0x0402	; 0x800402 <KEYPADSTRINGINDEX>
    1ce0:	f0 e0       	ldi	r31, 0x00	; 0
    1ce2:	ea 5f       	subi	r30, 0xFA	; 250
    1ce4:	fb 4f       	sbci	r31, 0xFB	; 251
    1ce6:	10 82       	st	Z, r1
			KEYPADSTRINGINDEX=0;
    1ce8:	10 92 02 04 	sts	0x0402, r1	; 0x800402 <KEYPADSTRINGINDEX>
			data.printstring="\0";
    1cec:	e5 e3       	ldi	r30, 0x35	; 53
    1cee:	f4 e0       	ldi	r31, 0x04	; 4
    1cf0:	82 e1       	ldi	r24, 0x12	; 18
    1cf2:	91 e0       	ldi	r25, 0x01	; 1
    1cf4:	92 83       	std	Z+2, r25	; 0x02
    1cf6:	81 83       	std	Z+1, r24	; 0x01
			data.string=KEYPAD_string; // shift output
    1cf8:	87 e0       	ldi	r24, 0x07	; 7
    1cfa:	94 e0       	ldi	r25, 0x04	; 4
    1cfc:	94 83       	std	Z+4, r25	; 0x04
    1cfe:	83 83       	std	Z+3, r24	; 0x03
    1d00:	0a c0       	rjmp	.+20     	; 0x1d16 <KEYPAD_read+0x80>
		}else{
			data.printstring=KEYPAD_string;
    1d02:	e5 e3       	ldi	r30, 0x35	; 53
    1d04:	f4 e0       	ldi	r31, 0x04	; 4
    1d06:	87 e0       	ldi	r24, 0x07	; 7
    1d08:	94 e0       	ldi	r25, 0x04	; 4
    1d0a:	92 83       	std	Z+2, r25	; 0x02
    1d0c:	81 83       	std	Z+1, r24	; 0x01
			data.string="\0"; // clear output
    1d0e:	82 e1       	ldi	r24, 0x12	; 18
    1d10:	91 e0       	ldi	r25, 0x01	; 1
    1d12:	94 83       	std	Z+4, r25	; 0x04
    1d14:	83 83       	std	Z+3, r24	; 0x03
		}
	}
	return data;
    1d16:	85 e0       	ldi	r24, 0x05	; 5
    1d18:	e5 e3       	ldi	r30, 0x35	; 53
    1d1a:	f4 e0       	ldi	r31, 0x04	; 4
    1d1c:	de 01       	movw	r26, r28
    1d1e:	11 96       	adiw	r26, 0x01	; 1
    1d20:	01 90       	ld	r0, Z+
    1d22:	0d 92       	st	X+, r0
    1d24:	8a 95       	dec	r24
    1d26:	e1 f7       	brne	.-8      	; 0x1d20 <KEYPAD_read+0x8a>
    1d28:	29 81       	ldd	r18, Y+1	; 0x01
    1d2a:	3a 81       	ldd	r19, Y+2	; 0x02
    1d2c:	4b 81       	ldd	r20, Y+3	; 0x03
    1d2e:	5c 81       	ldd	r21, Y+4	; 0x04
    1d30:	6d 81       	ldd	r22, Y+5	; 0x05
}
    1d32:	70 e0       	ldi	r23, 0x00	; 0
    1d34:	80 e0       	ldi	r24, 0x00	; 0
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	0f 90       	pop	r0
    1d3a:	0f 90       	pop	r0
    1d3c:	0f 90       	pop	r0
    1d3e:	0f 90       	pop	r0
    1d40:	0f 90       	pop	r0
    1d42:	df 91       	pop	r29
    1d44:	cf 91       	pop	r28
    1d46:	08 95       	ret

00001d48 <KEYPADenable>:
uint8_t KEYPADhl(uint8_t xi, uint8_t xf);
/*
** procedure and function
*/
KEYPAD KEYPADenable(volatile uint8_t *ddr, volatile uint8_t *pin, volatile uint8_t *port)
{
    1d48:	cf 93       	push	r28
    1d4a:	df 93       	push	r29
    1d4c:	cd b7       	in	r28, 0x3d	; 61
    1d4e:	de b7       	in	r29, 0x3e	; 62
    1d50:	28 97       	sbiw	r28, 0x08	; 8
    1d52:	0f b6       	in	r0, 0x3f	; 63
    1d54:	f8 94       	cli
    1d56:	de bf       	out	0x3e, r29	; 62
    1d58:	0f be       	out	0x3f, r0	; 63
    1d5a:	cd bf       	out	0x3d, r28	; 61
	//LOCAL VARIABLE
	uint8_t tSREG;
	tSREG=SREG;
    1d5c:	2f b7       	in	r18, 0x3f	; 63
	data.character=' ';
    1d5e:	30 e2       	ldi	r19, 0x20	; 32
    1d60:	30 93 35 04 	sts	0x0435, r19	; 0x800435 <data>
	//ALLOCAÇÂO MEMORIA PARA Estrutura
	KEYPAD keypad;
	//import parametros
	keypad_DDR=ddr;
    1d64:	90 93 06 04 	sts	0x0406, r25	; 0x800406 <keypad_DDR+0x1>
    1d68:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <keypad_DDR>
	keypad_PIN=pin;
    1d6c:	70 93 04 04 	sts	0x0404, r23	; 0x800404 <keypad_PIN+0x1>
    1d70:	60 93 03 04 	sts	0x0403, r22	; 0x800403 <keypad_PIN>
	keypad_PORT=port;
    1d74:	50 93 f8 03 	sts	0x03F8, r21	; 0x8003f8 <keypad_PORT+0x1>
    1d78:	40 93 f7 03 	sts	0x03F7, r20	; 0x8003f7 <keypad_PORT>
	//inic variables
	*keypad_DDR=(1<<KEYPADLINE_1) | (1<<KEYPADLINE_2) | (1<<KEYPADLINE_3) | (1<<KEYPADLINE_4);
    1d7c:	3b e8       	ldi	r19, 0x8B	; 139
    1d7e:	fc 01       	movw	r30, r24
    1d80:	30 83       	st	Z, r19
	*keypad_PORT=(1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4);
    1d82:	e0 91 f7 03 	lds	r30, 0x03F7	; 0x8003f7 <keypad_PORT>
    1d86:	f0 91 f8 03 	lds	r31, 0x03F8	; 0x8003f8 <keypad_PORT+0x1>
    1d8a:	84 e7       	ldi	r24, 0x74	; 116
    1d8c:	80 83       	st	Z, r24
	keypad_datai.line_1=keypad_dataf.line_1=(1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4);
    1d8e:	aa ef       	ldi	r26, 0xFA	; 250
    1d90:	b3 e0       	ldi	r27, 0x03	; 3
    1d92:	8c 93       	st	X, r24
    1d94:	ee ef       	ldi	r30, 0xFE	; 254
    1d96:	f3 e0       	ldi	r31, 0x03	; 3
    1d98:	80 83       	st	Z, r24
	keypad_datai.line_2=keypad_dataf.line_2=(1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4);
    1d9a:	11 96       	adiw	r26, 0x01	; 1
    1d9c:	8c 93       	st	X, r24
    1d9e:	11 97       	sbiw	r26, 0x01	; 1
    1da0:	81 83       	std	Z+1, r24	; 0x01
	keypad_datai.line_3=keypad_dataf.line_3=(1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4);
    1da2:	12 96       	adiw	r26, 0x02	; 2
    1da4:	8c 93       	st	X, r24
    1da6:	12 97       	sbiw	r26, 0x02	; 2
    1da8:	82 83       	std	Z+2, r24	; 0x02
	keypad_datai.line_4=keypad_dataf.line_4=(1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4);
    1daa:	13 96       	adiw	r26, 0x03	; 3
    1dac:	8c 93       	st	X, r24
    1dae:	83 83       	std	Z+3, r24	; 0x03
	KEYPADSTRINGINDEX=0;
    1db0:	10 92 02 04 	sts	0x0402, r1	; 0x800402 <KEYPADSTRINGINDEX>
	//Vtable
	keypad.getkey=KEYPAD_getkey;
	keypad.read=KEYPAD_read;
	keypad.get=KEYPAD_get;
	keypad.flush=KEYPAD_flush;
	SREG=tSREG;
    1db4:	2f bf       	out	0x3f, r18	; 63
	//
	*keypad_PORT|=(1<<KEYPADLINE_1) | (1<<KEYPADLINE_2) | (1<<KEYPADLINE_3) | (1<<KEYPADLINE_4);
    1db6:	e0 91 f7 03 	lds	r30, 0x03F7	; 0x8003f7 <keypad_PORT>
    1dba:	f0 91 f8 03 	lds	r31, 0x03F8	; 0x8003f8 <keypad_PORT+0x1>
    1dbe:	80 81       	ld	r24, Z
    1dc0:	8b 68       	ori	r24, 0x8B	; 139
    1dc2:	80 83       	st	Z, r24
	//Going to use pull down method.
	return keypad;
    1dc4:	2e e1       	ldi	r18, 0x1E	; 30
    1dc6:	3d e0       	ldi	r19, 0x0D	; 13
    1dc8:	3a 83       	std	Y+2, r19	; 0x02
    1dca:	29 83       	std	Y+1, r18	; 0x01
    1dcc:	4b e4       	ldi	r20, 0x4B	; 75
    1dce:	5e e0       	ldi	r21, 0x0E	; 14
    1dd0:	5c 83       	std	Y+4, r21	; 0x04
    1dd2:	4b 83       	std	Y+3, r20	; 0x03
    1dd4:	61 ef       	ldi	r22, 0xF1	; 241
    1dd6:	7c e0       	ldi	r23, 0x0C	; 12
    1dd8:	7e 83       	std	Y+6, r23	; 0x06
    1dda:	6d 83       	std	Y+5, r22	; 0x05
    1ddc:	81 e1       	ldi	r24, 0x11	; 17
    1dde:	9d e0       	ldi	r25, 0x0D	; 13
    1de0:	98 87       	std	Y+8, r25	; 0x08
    1de2:	8f 83       	std	Y+7, r24	; 0x07
    1de4:	3a 81       	ldd	r19, Y+2	; 0x02
    1de6:	5c 81       	ldd	r21, Y+4	; 0x04
    1de8:	7e 81       	ldd	r23, Y+6	; 0x06
}
    1dea:	98 85       	ldd	r25, Y+8	; 0x08
    1dec:	28 96       	adiw	r28, 0x08	; 8
    1dee:	0f b6       	in	r0, 0x3f	; 63
    1df0:	f8 94       	cli
    1df2:	de bf       	out	0x3e, r29	; 62
    1df4:	0f be       	out	0x3f, r0	; 63
    1df6:	cd bf       	out	0x3d, r28	; 61
    1df8:	df 91       	pop	r29
    1dfa:	cf 91       	pop	r28
    1dfc:	08 95       	ret

00001dfe <LCD0_write>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1dfe:	e0 91 26 04 	lds	r30, 0x0426	; 0x800426 <lcd0_PORT>
    1e02:	f0 91 27 04 	lds	r31, 0x0427	; 0x800427 <lcd0_PORT+0x1>
    1e06:	90 81       	ld	r25, Z
    1e08:	9d 7f       	andi	r25, 0xFD	; 253
    1e0a:	90 83       	st	Z, r25
    1e0c:	67 2b       	or	r22, r23
    1e0e:	41 f0       	breq	.+16     	; 0x1e20 <LCD0_write+0x22>
    1e10:	e0 91 26 04 	lds	r30, 0x0426	; 0x800426 <lcd0_PORT>
    1e14:	f0 91 27 04 	lds	r31, 0x0427	; 0x800427 <lcd0_PORT+0x1>
    1e18:	90 81       	ld	r25, Z
    1e1a:	91 60       	ori	r25, 0x01	; 1
    1e1c:	90 83       	st	Z, r25
    1e1e:	07 c0       	rjmp	.+14     	; 0x1e2e <LCD0_write+0x30>
    1e20:	e0 91 26 04 	lds	r30, 0x0426	; 0x800426 <lcd0_PORT>
    1e24:	f0 91 27 04 	lds	r31, 0x0427	; 0x800427 <lcd0_PORT+0x1>
    1e28:	90 81       	ld	r25, Z
    1e2a:	9e 7f       	andi	r25, 0xFE	; 254
    1e2c:	90 83       	st	Z, r25
    1e2e:	e0 91 23 04 	lds	r30, 0x0423	; 0x800423 <lcd0_DDR>
    1e32:	f0 91 24 04 	lds	r31, 0x0424	; 0x800424 <lcd0_DDR+0x1>
    1e36:	90 81       	ld	r25, Z
    1e38:	90 6f       	ori	r25, 0xF0	; 240
    1e3a:	90 83       	st	Z, r25
    1e3c:	e0 91 26 04 	lds	r30, 0x0426	; 0x800426 <lcd0_PORT>
    1e40:	f0 91 27 04 	lds	r31, 0x0427	; 0x800427 <lcd0_PORT+0x1>
    1e44:	90 81       	ld	r25, Z
    1e46:	94 60       	ori	r25, 0x04	; 4
    1e48:	90 83       	st	Z, r25
    1e4a:	88 23       	and	r24, r24
    1e4c:	44 f4       	brge	.+16     	; 0x1e5e <LCD0_write+0x60>
    1e4e:	e0 91 26 04 	lds	r30, 0x0426	; 0x800426 <lcd0_PORT>
    1e52:	f0 91 27 04 	lds	r31, 0x0427	; 0x800427 <lcd0_PORT+0x1>
    1e56:	90 81       	ld	r25, Z
    1e58:	90 68       	ori	r25, 0x80	; 128
    1e5a:	90 83       	st	Z, r25
    1e5c:	07 c0       	rjmp	.+14     	; 0x1e6c <LCD0_write+0x6e>
    1e5e:	e0 91 26 04 	lds	r30, 0x0426	; 0x800426 <lcd0_PORT>
    1e62:	f0 91 27 04 	lds	r31, 0x0427	; 0x800427 <lcd0_PORT+0x1>
    1e66:	90 81       	ld	r25, Z
    1e68:	9f 77       	andi	r25, 0x7F	; 127
    1e6a:	90 83       	st	Z, r25
    1e6c:	86 ff       	sbrs	r24, 6
    1e6e:	08 c0       	rjmp	.+16     	; 0x1e80 <LCD0_write+0x82>
    1e70:	e0 91 26 04 	lds	r30, 0x0426	; 0x800426 <lcd0_PORT>
    1e74:	f0 91 27 04 	lds	r31, 0x0427	; 0x800427 <lcd0_PORT+0x1>
    1e78:	90 81       	ld	r25, Z
    1e7a:	90 64       	ori	r25, 0x40	; 64
    1e7c:	90 83       	st	Z, r25
    1e7e:	07 c0       	rjmp	.+14     	; 0x1e8e <LCD0_write+0x90>
    1e80:	e0 91 26 04 	lds	r30, 0x0426	; 0x800426 <lcd0_PORT>
    1e84:	f0 91 27 04 	lds	r31, 0x0427	; 0x800427 <lcd0_PORT+0x1>
    1e88:	90 81       	ld	r25, Z
    1e8a:	9f 7b       	andi	r25, 0xBF	; 191
    1e8c:	90 83       	st	Z, r25
    1e8e:	85 ff       	sbrs	r24, 5
    1e90:	08 c0       	rjmp	.+16     	; 0x1ea2 <LCD0_write+0xa4>
    1e92:	e0 91 26 04 	lds	r30, 0x0426	; 0x800426 <lcd0_PORT>
    1e96:	f0 91 27 04 	lds	r31, 0x0427	; 0x800427 <lcd0_PORT+0x1>
    1e9a:	90 81       	ld	r25, Z
    1e9c:	90 62       	ori	r25, 0x20	; 32
    1e9e:	90 83       	st	Z, r25
    1ea0:	07 c0       	rjmp	.+14     	; 0x1eb0 <LCD0_write+0xb2>
    1ea2:	e0 91 26 04 	lds	r30, 0x0426	; 0x800426 <lcd0_PORT>
    1ea6:	f0 91 27 04 	lds	r31, 0x0427	; 0x800427 <lcd0_PORT+0x1>
    1eaa:	90 81       	ld	r25, Z
    1eac:	9f 7d       	andi	r25, 0xDF	; 223
    1eae:	90 83       	st	Z, r25
    1eb0:	84 ff       	sbrs	r24, 4
    1eb2:	08 c0       	rjmp	.+16     	; 0x1ec4 <LCD0_write+0xc6>
    1eb4:	e0 91 26 04 	lds	r30, 0x0426	; 0x800426 <lcd0_PORT>
    1eb8:	f0 91 27 04 	lds	r31, 0x0427	; 0x800427 <lcd0_PORT+0x1>
    1ebc:	90 81       	ld	r25, Z
    1ebe:	90 61       	ori	r25, 0x10	; 16
    1ec0:	90 83       	st	Z, r25
    1ec2:	07 c0       	rjmp	.+14     	; 0x1ed2 <LCD0_write+0xd4>
    1ec4:	e0 91 26 04 	lds	r30, 0x0426	; 0x800426 <lcd0_PORT>
    1ec8:	f0 91 27 04 	lds	r31, 0x0427	; 0x800427 <lcd0_PORT+0x1>
    1ecc:	90 81       	ld	r25, Z
    1ece:	9f 7e       	andi	r25, 0xEF	; 239
    1ed0:	90 83       	st	Z, r25
    1ed2:	e0 91 26 04 	lds	r30, 0x0426	; 0x800426 <lcd0_PORT>
    1ed6:	f0 91 27 04 	lds	r31, 0x0427	; 0x800427 <lcd0_PORT+0x1>
    1eda:	90 81       	ld	r25, Z
    1edc:	9b 7f       	andi	r25, 0xFB	; 251
    1ede:	90 83       	st	Z, r25
    1ee0:	e0 91 26 04 	lds	r30, 0x0426	; 0x800426 <lcd0_PORT>
    1ee4:	f0 91 27 04 	lds	r31, 0x0427	; 0x800427 <lcd0_PORT+0x1>
    1ee8:	90 81       	ld	r25, Z
    1eea:	94 60       	ori	r25, 0x04	; 4
    1eec:	90 83       	st	Z, r25
    1eee:	83 ff       	sbrs	r24, 3
    1ef0:	08 c0       	rjmp	.+16     	; 0x1f02 <LCD0_write+0x104>
    1ef2:	e0 91 26 04 	lds	r30, 0x0426	; 0x800426 <lcd0_PORT>
    1ef6:	f0 91 27 04 	lds	r31, 0x0427	; 0x800427 <lcd0_PORT+0x1>
    1efa:	90 81       	ld	r25, Z
    1efc:	90 68       	ori	r25, 0x80	; 128
    1efe:	90 83       	st	Z, r25
    1f00:	07 c0       	rjmp	.+14     	; 0x1f10 <LCD0_write+0x112>
    1f02:	e0 91 26 04 	lds	r30, 0x0426	; 0x800426 <lcd0_PORT>
    1f06:	f0 91 27 04 	lds	r31, 0x0427	; 0x800427 <lcd0_PORT+0x1>
    1f0a:	90 81       	ld	r25, Z
    1f0c:	9f 77       	andi	r25, 0x7F	; 127
    1f0e:	90 83       	st	Z, r25
    1f10:	82 ff       	sbrs	r24, 2
    1f12:	08 c0       	rjmp	.+16     	; 0x1f24 <LCD0_write+0x126>
    1f14:	e0 91 26 04 	lds	r30, 0x0426	; 0x800426 <lcd0_PORT>
    1f18:	f0 91 27 04 	lds	r31, 0x0427	; 0x800427 <lcd0_PORT+0x1>
    1f1c:	90 81       	ld	r25, Z
    1f1e:	90 64       	ori	r25, 0x40	; 64
    1f20:	90 83       	st	Z, r25
    1f22:	07 c0       	rjmp	.+14     	; 0x1f32 <LCD0_write+0x134>
    1f24:	e0 91 26 04 	lds	r30, 0x0426	; 0x800426 <lcd0_PORT>
    1f28:	f0 91 27 04 	lds	r31, 0x0427	; 0x800427 <lcd0_PORT+0x1>
    1f2c:	90 81       	ld	r25, Z
    1f2e:	9f 7b       	andi	r25, 0xBF	; 191
    1f30:	90 83       	st	Z, r25
    1f32:	81 ff       	sbrs	r24, 1
    1f34:	08 c0       	rjmp	.+16     	; 0x1f46 <LCD0_write+0x148>
    1f36:	e0 91 26 04 	lds	r30, 0x0426	; 0x800426 <lcd0_PORT>
    1f3a:	f0 91 27 04 	lds	r31, 0x0427	; 0x800427 <lcd0_PORT+0x1>
    1f3e:	90 81       	ld	r25, Z
    1f40:	90 62       	ori	r25, 0x20	; 32
    1f42:	90 83       	st	Z, r25
    1f44:	07 c0       	rjmp	.+14     	; 0x1f54 <LCD0_write+0x156>
    1f46:	e0 91 26 04 	lds	r30, 0x0426	; 0x800426 <lcd0_PORT>
    1f4a:	f0 91 27 04 	lds	r31, 0x0427	; 0x800427 <lcd0_PORT+0x1>
    1f4e:	90 81       	ld	r25, Z
    1f50:	9f 7d       	andi	r25, 0xDF	; 223
    1f52:	90 83       	st	Z, r25
    1f54:	80 ff       	sbrs	r24, 0
    1f56:	08 c0       	rjmp	.+16     	; 0x1f68 <LCD0_write+0x16a>
    1f58:	e0 91 26 04 	lds	r30, 0x0426	; 0x800426 <lcd0_PORT>
    1f5c:	f0 91 27 04 	lds	r31, 0x0427	; 0x800427 <lcd0_PORT+0x1>
    1f60:	80 81       	ld	r24, Z
    1f62:	80 61       	ori	r24, 0x10	; 16
    1f64:	80 83       	st	Z, r24
    1f66:	07 c0       	rjmp	.+14     	; 0x1f76 <LCD0_write+0x178>
    1f68:	e0 91 26 04 	lds	r30, 0x0426	; 0x800426 <lcd0_PORT>
    1f6c:	f0 91 27 04 	lds	r31, 0x0427	; 0x800427 <lcd0_PORT+0x1>
    1f70:	80 81       	ld	r24, Z
    1f72:	8f 7e       	andi	r24, 0xEF	; 239
    1f74:	80 83       	st	Z, r24
    1f76:	e0 91 26 04 	lds	r30, 0x0426	; 0x800426 <lcd0_PORT>
    1f7a:	f0 91 27 04 	lds	r31, 0x0427	; 0x800427 <lcd0_PORT+0x1>
    1f7e:	80 81       	ld	r24, Z
    1f80:	8b 7f       	andi	r24, 0xFB	; 251
    1f82:	80 83       	st	Z, r24
    1f84:	08 95       	ret

00001f86 <LCD0_read>:
    1f86:	e0 91 23 04 	lds	r30, 0x0423	; 0x800423 <lcd0_DDR>
    1f8a:	f0 91 24 04 	lds	r31, 0x0424	; 0x800424 <lcd0_DDR+0x1>
    1f8e:	20 81       	ld	r18, Z
    1f90:	2f 70       	andi	r18, 0x0F	; 15
    1f92:	20 83       	st	Z, r18
    1f94:	e0 91 26 04 	lds	r30, 0x0426	; 0x800426 <lcd0_PORT>
    1f98:	f0 91 27 04 	lds	r31, 0x0427	; 0x800427 <lcd0_PORT+0x1>
    1f9c:	20 81       	ld	r18, Z
    1f9e:	20 6f       	ori	r18, 0xF0	; 240
    1fa0:	20 83       	st	Z, r18
    1fa2:	e0 91 26 04 	lds	r30, 0x0426	; 0x800426 <lcd0_PORT>
    1fa6:	f0 91 27 04 	lds	r31, 0x0427	; 0x800427 <lcd0_PORT+0x1>
    1faa:	20 81       	ld	r18, Z
    1fac:	22 60       	ori	r18, 0x02	; 2
    1fae:	20 83       	st	Z, r18
    1fb0:	89 2b       	or	r24, r25
    1fb2:	41 f0       	breq	.+16     	; 0x1fc4 <LCD0_read+0x3e>
    1fb4:	e0 91 26 04 	lds	r30, 0x0426	; 0x800426 <lcd0_PORT>
    1fb8:	f0 91 27 04 	lds	r31, 0x0427	; 0x800427 <lcd0_PORT+0x1>
    1fbc:	80 81       	ld	r24, Z
    1fbe:	81 60       	ori	r24, 0x01	; 1
    1fc0:	80 83       	st	Z, r24
    1fc2:	07 c0       	rjmp	.+14     	; 0x1fd2 <LCD0_read+0x4c>
    1fc4:	e0 91 26 04 	lds	r30, 0x0426	; 0x800426 <lcd0_PORT>
    1fc8:	f0 91 27 04 	lds	r31, 0x0427	; 0x800427 <lcd0_PORT+0x1>
    1fcc:	80 81       	ld	r24, Z
    1fce:	8e 7f       	andi	r24, 0xFE	; 254
    1fd0:	80 83       	st	Z, r24
    1fd2:	e0 91 26 04 	lds	r30, 0x0426	; 0x800426 <lcd0_PORT>
    1fd6:	f0 91 27 04 	lds	r31, 0x0427	; 0x800427 <lcd0_PORT+0x1>
    1fda:	80 81       	ld	r24, Z
    1fdc:	84 60       	ori	r24, 0x04	; 4
    1fde:	80 83       	st	Z, r24
    1fe0:	e0 91 1c 04 	lds	r30, 0x041C	; 0x80041c <lcd0_PIN>
    1fe4:	f0 91 1d 04 	lds	r31, 0x041D	; 0x80041d <lcd0_PIN+0x1>
    1fe8:	80 81       	ld	r24, Z
    1fea:	88 23       	and	r24, r24
    1fec:	14 f0       	brlt	.+4      	; 0x1ff2 <LCD0_read+0x6c>
    1fee:	80 e0       	ldi	r24, 0x00	; 0
    1ff0:	01 c0       	rjmp	.+2      	; 0x1ff4 <LCD0_read+0x6e>
    1ff2:	80 e8       	ldi	r24, 0x80	; 128
    1ff4:	90 81       	ld	r25, Z
    1ff6:	96 ff       	sbrs	r25, 6
    1ff8:	02 c0       	rjmp	.+4      	; 0x1ffe <LCD0_read+0x78>
    1ffa:	80 64       	ori	r24, 0x40	; 64
    1ffc:	01 c0       	rjmp	.+2      	; 0x2000 <LCD0_read+0x7a>
    1ffe:	8f 7b       	andi	r24, 0xBF	; 191
    2000:	90 81       	ld	r25, Z
    2002:	95 ff       	sbrs	r25, 5
    2004:	02 c0       	rjmp	.+4      	; 0x200a <LCD0_read+0x84>
    2006:	80 62       	ori	r24, 0x20	; 32
    2008:	01 c0       	rjmp	.+2      	; 0x200c <LCD0_read+0x86>
    200a:	8f 7d       	andi	r24, 0xDF	; 223
    200c:	90 81       	ld	r25, Z
    200e:	94 ff       	sbrs	r25, 4
    2010:	02 c0       	rjmp	.+4      	; 0x2016 <LCD0_read+0x90>
    2012:	80 61       	ori	r24, 0x10	; 16
    2014:	01 c0       	rjmp	.+2      	; 0x2018 <LCD0_read+0x92>
    2016:	8f 7e       	andi	r24, 0xEF	; 239
    2018:	e0 91 26 04 	lds	r30, 0x0426	; 0x800426 <lcd0_PORT>
    201c:	f0 91 27 04 	lds	r31, 0x0427	; 0x800427 <lcd0_PORT+0x1>
    2020:	90 81       	ld	r25, Z
    2022:	9b 7f       	andi	r25, 0xFB	; 251
    2024:	90 83       	st	Z, r25
    2026:	e0 91 26 04 	lds	r30, 0x0426	; 0x800426 <lcd0_PORT>
    202a:	f0 91 27 04 	lds	r31, 0x0427	; 0x800427 <lcd0_PORT+0x1>
    202e:	90 81       	ld	r25, Z
    2030:	94 60       	ori	r25, 0x04	; 4
    2032:	90 83       	st	Z, r25
    2034:	e0 91 1c 04 	lds	r30, 0x041C	; 0x80041c <lcd0_PIN>
    2038:	f0 91 1d 04 	lds	r31, 0x041D	; 0x80041d <lcd0_PIN+0x1>
    203c:	90 81       	ld	r25, Z
    203e:	99 23       	and	r25, r25
    2040:	14 f4       	brge	.+4      	; 0x2046 <LCD0_read+0xc0>
    2042:	88 60       	ori	r24, 0x08	; 8
    2044:	01 c0       	rjmp	.+2      	; 0x2048 <LCD0_read+0xc2>
    2046:	87 7f       	andi	r24, 0xF7	; 247
    2048:	90 81       	ld	r25, Z
    204a:	96 ff       	sbrs	r25, 6
    204c:	02 c0       	rjmp	.+4      	; 0x2052 <LCD0_read+0xcc>
    204e:	84 60       	ori	r24, 0x04	; 4
    2050:	01 c0       	rjmp	.+2      	; 0x2054 <LCD0_read+0xce>
    2052:	8b 7f       	andi	r24, 0xFB	; 251
    2054:	90 81       	ld	r25, Z
    2056:	95 ff       	sbrs	r25, 5
    2058:	02 c0       	rjmp	.+4      	; 0x205e <LCD0_read+0xd8>
    205a:	82 60       	ori	r24, 0x02	; 2
    205c:	01 c0       	rjmp	.+2      	; 0x2060 <LCD0_read+0xda>
    205e:	8d 7f       	andi	r24, 0xFD	; 253
    2060:	90 81       	ld	r25, Z
    2062:	94 ff       	sbrs	r25, 4
    2064:	02 c0       	rjmp	.+4      	; 0x206a <LCD0_read+0xe4>
    2066:	81 60       	ori	r24, 0x01	; 1
    2068:	01 c0       	rjmp	.+2      	; 0x206c <LCD0_read+0xe6>
    206a:	8e 7f       	andi	r24, 0xFE	; 254
    206c:	e0 91 26 04 	lds	r30, 0x0426	; 0x800426 <lcd0_PORT>
    2070:	f0 91 27 04 	lds	r31, 0x0427	; 0x800427 <lcd0_PORT+0x1>
    2074:	90 81       	ld	r25, Z
    2076:	9b 7f       	andi	r25, 0xFB	; 251
    2078:	90 83       	st	Z, r25
    207a:	08 95       	ret

0000207c <LCD0_BF>:
    207c:	cf 93       	push	r28
    207e:	df 93       	push	r29
    2080:	80 e0       	ldi	r24, 0x00	; 0
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	80 df       	rcall	.-256    	; 0x1f86 <LCD0_read>
    2086:	cb e0       	ldi	r28, 0x0B	; 11
    2088:	d0 e0       	ldi	r29, 0x00	; 0
    208a:	05 c0       	rjmp	.+10     	; 0x2096 <LCD0_BF+0x1a>
    208c:	80 e0       	ldi	r24, 0x00	; 0
    208e:	90 e0       	ldi	r25, 0x00	; 0
    2090:	7a df       	rcall	.-268    	; 0x1f86 <LCD0_read>
    2092:	21 97       	sbiw	r28, 0x01	; 1
    2094:	11 f0       	breq	.+4      	; 0x209a <LCD0_BF+0x1e>
    2096:	88 23       	and	r24, r24
    2098:	cc f3       	brlt	.-14     	; 0x208c <LCD0_BF+0x10>
    209a:	df 91       	pop	r29
    209c:	cf 91       	pop	r28
    209e:	08 95       	ret

000020a0 <LCD0_putch>:
    20a0:	61 e0       	ldi	r22, 0x01	; 1
    20a2:	70 e0       	ldi	r23, 0x00	; 0
    20a4:	ac de       	rcall	.-680    	; 0x1dfe <LCD0_write>
    20a6:	ea cf       	rjmp	.-44     	; 0x207c <LCD0_BF>
    20a8:	08 95       	ret

000020aa <LCD0_getch>:
    20aa:	cf 93       	push	r28
    20ac:	81 e0       	ldi	r24, 0x01	; 1
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	6a df       	rcall	.-300    	; 0x1f86 <LCD0_read>
    20b2:	c8 2f       	mov	r28, r24
    20b4:	e3 df       	rcall	.-58     	; 0x207c <LCD0_BF>
    20b6:	8c 2f       	mov	r24, r28
    20b8:	cf 91       	pop	r28
    20ba:	08 95       	ret

000020bc <LCD0_string>:
    20bc:	cf 93       	push	r28
    20be:	df 93       	push	r29
    20c0:	ec 01       	movw	r28, r24
    20c2:	88 81       	ld	r24, Y
    20c4:	88 23       	and	r24, r24
    20c6:	41 f0       	breq	.+16     	; 0x20d8 <LCD0_string+0x1c>
    20c8:	21 96       	adiw	r28, 0x01	; 1
    20ca:	61 e0       	ldi	r22, 0x01	; 1
    20cc:	70 e0       	ldi	r23, 0x00	; 0
    20ce:	97 de       	rcall	.-722    	; 0x1dfe <LCD0_write>
    20d0:	d5 df       	rcall	.-86     	; 0x207c <LCD0_BF>
    20d2:	89 91       	ld	r24, Y+
    20d4:	81 11       	cpse	r24, r1
    20d6:	f9 cf       	rjmp	.-14     	; 0x20ca <LCD0_string+0xe>
    20d8:	df 91       	pop	r29
    20da:	cf 91       	pop	r28
    20dc:	08 95       	ret

000020de <LCD0_string_size>:
    20de:	0f 93       	push	r16
    20e0:	1f 93       	push	r17
    20e2:	cf 93       	push	r28
    20e4:	df 93       	push	r29
    20e6:	fc 01       	movw	r30, r24
    20e8:	d6 2f       	mov	r29, r22
    20ea:	80 81       	ld	r24, Z
    20ec:	88 23       	and	r24, r24
    20ee:	51 f0       	breq	.+20     	; 0x2104 <LCD0_string_size+0x26>
    20f0:	8f 01       	movw	r16, r30
    20f2:	0f 5f       	subi	r16, 0xFF	; 255
    20f4:	1f 4f       	sbci	r17, 0xFF	; 255
    20f6:	61 11       	cpse	r22, r1
    20f8:	09 c0       	rjmp	.+18     	; 0x210c <LCD0_string_size+0x2e>
    20fa:	1b c0       	rjmp	.+54     	; 0x2132 <LCD0_string_size+0x54>
    20fc:	cf 5f       	subi	r28, 0xFF	; 255
    20fe:	dc 17       	cp	r29, r28
    2100:	30 f4       	brcc	.+12     	; 0x210e <LCD0_string_size+0x30>
    2102:	01 c0       	rjmp	.+2      	; 0x2106 <LCD0_string_size+0x28>
    2104:	c0 e0       	ldi	r28, 0x00	; 0
    2106:	cd 17       	cp	r28, r29
    2108:	60 f0       	brcs	.+24     	; 0x2122 <LCD0_string_size+0x44>
    210a:	13 c0       	rjmp	.+38     	; 0x2132 <LCD0_string_size+0x54>
    210c:	c1 e0       	ldi	r28, 0x01	; 1
    210e:	61 e0       	ldi	r22, 0x01	; 1
    2110:	70 e0       	ldi	r23, 0x00	; 0
    2112:	75 de       	rcall	.-790    	; 0x1dfe <LCD0_write>
    2114:	b3 df       	rcall	.-154    	; 0x207c <LCD0_BF>
    2116:	f8 01       	movw	r30, r16
    2118:	81 91       	ld	r24, Z+
    211a:	8f 01       	movw	r16, r30
    211c:	81 11       	cpse	r24, r1
    211e:	ee cf       	rjmp	.-36     	; 0x20fc <LCD0_string_size+0x1e>
    2120:	f2 cf       	rjmp	.-28     	; 0x2106 <LCD0_string_size+0x28>
    2122:	cf 5f       	subi	r28, 0xFF	; 255
    2124:	61 e0       	ldi	r22, 0x01	; 1
    2126:	70 e0       	ldi	r23, 0x00	; 0
    2128:	80 e2       	ldi	r24, 0x20	; 32
    212a:	69 de       	rcall	.-814    	; 0x1dfe <LCD0_write>
    212c:	a7 df       	rcall	.-178    	; 0x207c <LCD0_BF>
    212e:	cd 17       	cp	r28, r29
    2130:	c0 f3       	brcs	.-16     	; 0x2122 <LCD0_string_size+0x44>
    2132:	df 91       	pop	r29
    2134:	cf 91       	pop	r28
    2136:	1f 91       	pop	r17
    2138:	0f 91       	pop	r16
    213a:	08 95       	ret

0000213c <LCD0_hspace>:
    213c:	cf 93       	push	r28
    213e:	c8 2f       	mov	r28, r24
    2140:	88 23       	and	r24, r24
    2142:	39 f0       	breq	.+14     	; 0x2152 <LCD0_hspace+0x16>
    2144:	61 e0       	ldi	r22, 0x01	; 1
    2146:	70 e0       	ldi	r23, 0x00	; 0
    2148:	80 e2       	ldi	r24, 0x20	; 32
    214a:	59 de       	rcall	.-846    	; 0x1dfe <LCD0_write>
    214c:	97 df       	rcall	.-210    	; 0x207c <LCD0_BF>
    214e:	c1 50       	subi	r28, 0x01	; 1
    2150:	c9 f7       	brne	.-14     	; 0x2144 <LCD0_hspace+0x8>
    2152:	cf 91       	pop	r28
    2154:	08 95       	ret

00002156 <LCD0_gotoxy>:
    2156:	26 2f       	mov	r18, r22
    2158:	81 30       	cpi	r24, 0x01	; 1
    215a:	91 05       	cpc	r25, r1
    215c:	71 f0       	breq	.+28     	; 0x217a <LCD0_gotoxy+0x24>
    215e:	30 f0       	brcs	.+12     	; 0x216c <LCD0_gotoxy+0x16>
    2160:	82 30       	cpi	r24, 0x02	; 2
    2162:	91 05       	cpc	r25, r1
    2164:	89 f0       	breq	.+34     	; 0x2188 <LCD0_gotoxy+0x32>
    2166:	03 97       	sbiw	r24, 0x03	; 3
    2168:	b1 f0       	breq	.+44     	; 0x2196 <LCD0_gotoxy+0x40>
    216a:	08 95       	ret
    216c:	60 e0       	ldi	r22, 0x00	; 0
    216e:	70 e0       	ldi	r23, 0x00	; 0
    2170:	80 e8       	ldi	r24, 0x80	; 128
    2172:	82 0f       	add	r24, r18
    2174:	44 de       	rcall	.-888    	; 0x1dfe <LCD0_write>
    2176:	82 cf       	rjmp	.-252    	; 0x207c <LCD0_BF>
    2178:	08 95       	ret
    217a:	60 e0       	ldi	r22, 0x00	; 0
    217c:	70 e0       	ldi	r23, 0x00	; 0
    217e:	80 ec       	ldi	r24, 0xC0	; 192
    2180:	82 0f       	add	r24, r18
    2182:	3d de       	rcall	.-902    	; 0x1dfe <LCD0_write>
    2184:	7b cf       	rjmp	.-266    	; 0x207c <LCD0_BF>
    2186:	08 95       	ret
    2188:	60 e0       	ldi	r22, 0x00	; 0
    218a:	70 e0       	ldi	r23, 0x00	; 0
    218c:	84 e9       	ldi	r24, 0x94	; 148
    218e:	82 0f       	add	r24, r18
    2190:	36 de       	rcall	.-916    	; 0x1dfe <LCD0_write>
    2192:	74 cf       	rjmp	.-280    	; 0x207c <LCD0_BF>
    2194:	08 95       	ret
    2196:	60 e0       	ldi	r22, 0x00	; 0
    2198:	70 e0       	ldi	r23, 0x00	; 0
    219a:	84 ed       	ldi	r24, 0xD4	; 212
    219c:	82 0f       	add	r24, r18
    219e:	2f de       	rcall	.-930    	; 0x1dfe <LCD0_write>
    21a0:	6d cf       	rjmp	.-294    	; 0x207c <LCD0_BF>
    21a2:	08 95       	ret

000021a4 <LCD0_clear>:
    21a4:	60 e0       	ldi	r22, 0x00	; 0
    21a6:	70 e0       	ldi	r23, 0x00	; 0
    21a8:	81 e0       	ldi	r24, 0x01	; 1
    21aa:	29 de       	rcall	.-942    	; 0x1dfe <LCD0_write>
    21ac:	87 ee       	ldi	r24, 0xE7	; 231
    21ae:	97 e1       	ldi	r25, 0x17	; 23
    21b0:	01 97       	sbiw	r24, 0x01	; 1
    21b2:	f1 f7       	brne	.-4      	; 0x21b0 <LCD0_clear+0xc>
    21b4:	00 c0       	rjmp	.+0      	; 0x21b6 <LCD0_clear+0x12>
    21b6:	00 00       	nop
    21b8:	08 95       	ret

000021ba <LCD0_inic>:
	return lcd0;
}
void LCD0_inic(void)
{
	//LCD INIC
	*lcd0_DDR=(1<<RS)|(1<<RW)|(1<<EN)|(0<<NC);
    21ba:	e0 91 23 04 	lds	r30, 0x0423	; 0x800423 <lcd0_DDR>
    21be:	f0 91 24 04 	lds	r31, 0x0424	; 0x800424 <lcd0_DDR+0x1>
    21c2:	87 e0       	ldi	r24, 0x07	; 7
    21c4:	80 83       	st	Z, r24
	*lcd0_PORT=(1<<NC);
    21c6:	e0 91 26 04 	lds	r30, 0x0426	; 0x800426 <lcd0_PORT>
    21ca:	f0 91 27 04 	lds	r31, 0x0427	; 0x800427 <lcd0_PORT+0x1>
    21ce:	88 e0       	ldi	r24, 0x08	; 8
    21d0:	80 83       	st	Z, r24
    21d2:	2f ef       	ldi	r18, 0xFF	; 255
    21d4:	83 ef       	ldi	r24, 0xF3	; 243
    21d6:	91 e0       	ldi	r25, 0x01	; 1
    21d8:	21 50       	subi	r18, 0x01	; 1
    21da:	80 40       	sbci	r24, 0x00	; 0
    21dc:	90 40       	sbci	r25, 0x00	; 0
    21de:	e1 f7       	brne	.-8      	; 0x21d8 <LCD0_inic+0x1e>
    21e0:	00 c0       	rjmp	.+0      	; 0x21e2 <LCD0_inic+0x28>
    21e2:	00 00       	nop
	/***INICIALIZACAO LCD**datasheet*/
	_delay_ms(40);
	LCD0_write(0x33,INST); //function set
    21e4:	60 e0       	ldi	r22, 0x00	; 0
    21e6:	70 e0       	ldi	r23, 0x00	; 0
    21e8:	83 e3       	ldi	r24, 0x33	; 51
    21ea:	09 de       	rcall	.-1006   	; 0x1dfe <LCD0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    21ec:	20 ed       	ldi	r18, 0xD0	; 208
    21ee:	2a 95       	dec	r18
    21f0:	f1 f7       	brne	.-4      	; 0x21ee <LCD0_inic+0x34>
	_delay_us(39);
	LCD0_write(0x33,INST); //function set
    21f2:	60 e0       	ldi	r22, 0x00	; 0
    21f4:	70 e0       	ldi	r23, 0x00	; 0
    21f6:	83 e3       	ldi	r24, 0x33	; 51
    21f8:	02 de       	rcall	.-1020   	; 0x1dfe <LCD0_write>
    21fa:	80 ed       	ldi	r24, 0xD0	; 208
    21fc:	8a 95       	dec	r24
    21fe:	f1 f7       	brne	.-4      	; 0x21fc <LCD0_inic+0x42>
	_delay_us(39);
	LCD0_write(0x2B,INST); //function set
    2200:	60 e0       	ldi	r22, 0x00	; 0
    2202:	70 e0       	ldi	r23, 0x00	; 0
    2204:	8b e2       	ldi	r24, 0x2B	; 43
    2206:	fb dd       	rcall	.-1034   	; 0x1dfe <LCD0_write>
    2208:	95 ec       	ldi	r25, 0xC5	; 197
    220a:	9a 95       	dec	r25
    220c:	f1 f7       	brne	.-4      	; 0x220a <LCD0_inic+0x50>
    220e:	00 00       	nop
	_delay_us(37);
	LCD0_write(0x0C,INST);// display on/off control
    2210:	60 e0       	ldi	r22, 0x00	; 0
    2212:	70 e0       	ldi	r23, 0x00	; 0
    2214:	8c e0       	ldi	r24, 0x0C	; 12
    2216:	f3 dd       	rcall	.-1050   	; 0x1dfe <LCD0_write>
    2218:	25 ec       	ldi	r18, 0xC5	; 197
    221a:	2a 95       	dec	r18
    221c:	f1 f7       	brne	.-4      	; 0x221a <LCD0_inic+0x60>
	_delay_us(37);
	LCD0_write(0x01,INST);// clear display
    221e:	00 00       	nop
    2220:	60 e0       	ldi	r22, 0x00	; 0
    2222:	70 e0       	ldi	r23, 0x00	; 0
    2224:	81 e0       	ldi	r24, 0x01	; 1
    2226:	eb dd       	rcall	.-1066   	; 0x1dfe <LCD0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2228:	87 ee       	ldi	r24, 0xE7	; 231
    222a:	97 e1       	ldi	r25, 0x17	; 23
    222c:	01 97       	sbiw	r24, 0x01	; 1
    222e:	f1 f7       	brne	.-4      	; 0x222c <LCD0_inic+0x72>
    2230:	00 c0       	rjmp	.+0      	; 0x2232 <LCD0_inic+0x78>
	_delay_ms(1.53);
	LCD0_write(0x06,INST);// entry mode set (crazy settings)
    2232:	00 00       	nop
    2234:	60 e0       	ldi	r22, 0x00	; 0
    2236:	70 e0       	ldi	r23, 0x00	; 0
    2238:	86 e0       	ldi	r24, 0x06	; 6
    223a:	e1 dd       	rcall	.-1086   	; 0x1dfe <LCD0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    223c:	95 ec       	ldi	r25, 0xC5	; 197
    223e:	9a 95       	dec	r25
    2240:	f1 f7       	brne	.-4      	; 0x223e <LCD0_inic+0x84>
    2242:	00 00       	nop
    2244:	08 95       	ret

00002246 <LCD0enable>:
unsigned int LCD_ticks(unsigned int num);
/*
** procedure and function
*/
LCD0 LCD0enable(volatile uint8_t *ddr, volatile uint8_t *pin, volatile uint8_t *port)
{
    2246:	1f 93       	push	r17
    2248:	cf 93       	push	r28
    224a:	df 93       	push	r29
    224c:	ec 01       	movw	r28, r24
	//LOCAL VARIABLES
	uint8_t tSREG;
	tSREG=SREG;
    224e:	1f b7       	in	r17, 0x3f	; 63
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
    2250:	8f b7       	in	r24, 0x3f	; 63
    2252:	8f 77       	andi	r24, 0x7F	; 127
    2254:	8f bf       	out	0x3f, r24	; 63
	//ALLOCAÇÂO MEMORIA PARA Estrutura
	LCD0 lcd0;
	//import parametros
	lcd0_DDR=ddr;
    2256:	70 93 24 04 	sts	0x0424, r23	; 0x800424 <lcd0_DDR+0x1>
    225a:	60 93 23 04 	sts	0x0423, r22	; 0x800423 <lcd0_DDR>
	lcd0_PIN=pin;
    225e:	50 93 1d 04 	sts	0x041D, r21	; 0x80041d <lcd0_PIN+0x1>
    2262:	40 93 1c 04 	sts	0x041C, r20	; 0x80041c <lcd0_PIN>
	lcd0_PORT=port;
    2266:	30 93 27 04 	sts	0x0427, r19	; 0x800427 <lcd0_PORT+0x1>
    226a:	20 93 26 04 	sts	0x0426, r18	; 0x800426 <lcd0_PORT>
	//inic variables
	*lcd0_DDR=0x00;
    226e:	fb 01       	movw	r30, r22
    2270:	10 82       	st	Z, r1
	*lcd0_PORT=0xFF;
    2272:	e0 91 26 04 	lds	r30, 0x0426	; 0x800426 <lcd0_PORT>
    2276:	f0 91 27 04 	lds	r31, 0x0427	; 0x800427 <lcd0_PORT+0x1>
    227a:	8f ef       	ldi	r24, 0xFF	; 255
    227c:	80 83       	st	Z, r24
	lcd0_detect=*lcd0_PIN & (1<<NC);
    227e:	e0 91 1c 04 	lds	r30, 0x041C	; 0x80041c <lcd0_PIN>
    2282:	f0 91 1d 04 	lds	r31, 0x041D	; 0x80041d <lcd0_PIN+0x1>
    2286:	80 81       	ld	r24, Z
    2288:	88 70       	andi	r24, 0x08	; 8
    228a:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <lcd0_detect>
	lcd0.hspace=LCD0_hspace;
	lcd0.clear=LCD0_clear;
	lcd0.gotoxy=LCD0_gotoxy;
	lcd0.reboot=LCD0_reboot;
	//LCD INIC
	LCD0_inic();
    228e:	95 df       	rcall	.-214    	; 0x21ba <LCD0_inic>
	SREG=tSREG;
    2290:	1f bf       	out	0x3f, r17	; 63
	//
	return lcd0;
    2292:	8f ef       	ldi	r24, 0xFF	; 255
    2294:	9e e0       	ldi	r25, 0x0E	; 14
    2296:	99 83       	std	Y+1, r25	; 0x01
    2298:	88 83       	st	Y, r24
    229a:	83 ec       	ldi	r24, 0xC3	; 195
    229c:	9f e0       	ldi	r25, 0x0F	; 15
    229e:	9b 83       	std	Y+3, r25	; 0x03
    22a0:	8a 83       	std	Y+2, r24	; 0x02
    22a2:	8e e3       	ldi	r24, 0x3E	; 62
    22a4:	90 e1       	ldi	r25, 0x10	; 16
    22a6:	9d 83       	std	Y+5, r25	; 0x05
    22a8:	8c 83       	std	Y+4, r24	; 0x04
    22aa:	80 e5       	ldi	r24, 0x50	; 80
    22ac:	90 e1       	ldi	r25, 0x10	; 16
    22ae:	9f 83       	std	Y+7, r25	; 0x07
    22b0:	8e 83       	std	Y+6, r24	; 0x06
    22b2:	85 e5       	ldi	r24, 0x55	; 85
    22b4:	90 e1       	ldi	r25, 0x10	; 16
    22b6:	99 87       	std	Y+9, r25	; 0x09
    22b8:	88 87       	std	Y+8, r24	; 0x08
    22ba:	8e e5       	ldi	r24, 0x5E	; 94
    22bc:	90 e1       	ldi	r25, 0x10	; 16
    22be:	9b 87       	std	Y+11, r25	; 0x0b
    22c0:	8a 87       	std	Y+10, r24	; 0x0a
    22c2:	8f e6       	ldi	r24, 0x6F	; 111
    22c4:	90 e1       	ldi	r25, 0x10	; 16
    22c6:	9d 87       	std	Y+13, r25	; 0x0d
    22c8:	8c 87       	std	Y+12, r24	; 0x0c
    22ca:	8e e9       	ldi	r24, 0x9E	; 158
    22cc:	90 e1       	ldi	r25, 0x10	; 16
    22ce:	9f 87       	std	Y+15, r25	; 0x0f
    22d0:	8e 87       	std	Y+14, r24	; 0x0e
    22d2:	82 ed       	ldi	r24, 0xD2	; 210
    22d4:	90 e1       	ldi	r25, 0x10	; 16
    22d6:	99 8b       	std	Y+17, r25	; 0x11
    22d8:	88 8b       	std	Y+16, r24	; 0x10
    22da:	8b ea       	ldi	r24, 0xAB	; 171
    22dc:	90 e1       	ldi	r25, 0x10	; 16
    22de:	9b 8b       	std	Y+19, r25	; 0x13
    22e0:	8a 8b       	std	Y+18, r24	; 0x12
    22e2:	8a e7       	ldi	r24, 0x7A	; 122
    22e4:	91 e1       	ldi	r25, 0x11	; 17
    22e6:	9d 8b       	std	Y+21, r25	; 0x15
    22e8:	8c 8b       	std	Y+20, r24	; 0x14
}
    22ea:	ce 01       	movw	r24, r28
    22ec:	df 91       	pop	r29
    22ee:	cf 91       	pop	r28
    22f0:	1f 91       	pop	r17
    22f2:	08 95       	ret

000022f4 <LCD0_reboot>:
	*lcd0_PORT|=(1<<EN);
	LCD_ticks(num);
	*lcd0_PORT&=~(1<<EN);
}
void LCD0_reboot(void)
{
    22f4:	cf 93       	push	r28
	//low high detect pin NC
	uint8_t i;
	uint8_t tmp;
	tmp=*lcd0_PIN & (1<<NC);
    22f6:	e0 91 1c 04 	lds	r30, 0x041C	; 0x80041c <lcd0_PIN>
    22fa:	f0 91 1d 04 	lds	r31, 0x041D	; 0x80041d <lcd0_PIN+0x1>
    22fe:	c0 81       	ld	r28, Z
    2300:	c8 70       	andi	r28, 0x08	; 8
	i=tmp^lcd0_detect;
    2302:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <lcd0_detect>
    2306:	8c 27       	eor	r24, r28
	i&=tmp;
	if(i)
    2308:	8c 23       	and	r24, r28
    230a:	09 f0       	breq	.+2      	; 0x230e <LCD0_reboot+0x1a>
		LCD0_inic();
    230c:	56 df       	rcall	.-340    	; 0x21ba <LCD0_inic>
	lcd0_detect=tmp;
    230e:	c0 93 25 04 	sts	0x0425, r28	; 0x800425 <lcd0_detect>
}
    2312:	cf 91       	pop	r28
    2314:	08 95       	ret

00002316 <PCF8563RTC_SetTime>:
	i2c.Write(0x00);						// Write 0x00 to Control register to disable SQW-Out
	i2c.Stop();								// Stop I2C communication after initializing PCF8563
}
/***void PCF8563RTC_SetTime(uint8_t var_hour_u8, uint8_t var_min_u8, uint8_t var_sec_u8)***/
void PCF8563RTC_SetTime(uint8_t var_hour_u8, uint8_t var_min_u8, uint8_t var_sec_u8)
{
    2316:	ff 92       	push	r15
    2318:	0f 93       	push	r16
    231a:	1f 93       	push	r17
    231c:	cf 93       	push	r28
    231e:	df 93       	push	r29
    2320:	18 2f       	mov	r17, r24
    2322:	06 2f       	mov	r16, r22
    2324:	f4 2e       	mov	r15, r20
	i2c.Start();                            // Start I2C communication
    2326:	cb e4       	ldi	r28, 0x4B	; 75
    2328:	d4 e0       	ldi	r29, 0x04	; 4
    232a:	e8 81       	ld	r30, Y
    232c:	f9 81       	ldd	r31, Y+1	; 0x01
    232e:	09 95       	icall
	i2c.Write(PCF8563WriteMode_U8);         // connect to PCF8563 by sending its ID on I2c Bus
    2330:	ec 81       	ldd	r30, Y+4	; 0x04
    2332:	fd 81       	ldd	r31, Y+5	; 0x05
    2334:	82 ea       	ldi	r24, 0xA2	; 162
    2336:	09 95       	icall
	i2c.Write(PCF8563SecondRegAddress_U8);  // Select the SEC RAM address
    2338:	ec 81       	ldd	r30, Y+4	; 0x04
    233a:	fd 81       	ldd	r31, Y+5	; 0x05
    233c:	82 e0       	ldi	r24, 0x02	; 2
    233e:	09 95       	icall
	i2c.Write(var_sec_u8);			        // Write sec from RAM address 02H
    2340:	ec 81       	ldd	r30, Y+4	; 0x04
    2342:	fd 81       	ldd	r31, Y+5	; 0x05
    2344:	8f 2d       	mov	r24, r15
    2346:	09 95       	icall
	i2c.Write(var_min_u8);			        // Write min from RAM address 03H
    2348:	ec 81       	ldd	r30, Y+4	; 0x04
    234a:	fd 81       	ldd	r31, Y+5	; 0x05
    234c:	80 2f       	mov	r24, r16
    234e:	09 95       	icall
	i2c.Write(var_hour_u8);			        // Write hour from RAM address 04H
    2350:	ec 81       	ldd	r30, Y+4	; 0x04
    2352:	fd 81       	ldd	r31, Y+5	; 0x05
    2354:	81 2f       	mov	r24, r17
    2356:	09 95       	icall
	i2c.Stop();           	                // Stop I2C communication after Setting the Time
    2358:	ea 81       	ldd	r30, Y+2	; 0x02
    235a:	fb 81       	ldd	r31, Y+3	; 0x03
    235c:	09 95       	icall
}
    235e:	df 91       	pop	r29
    2360:	cf 91       	pop	r28
    2362:	1f 91       	pop	r17
    2364:	0f 91       	pop	r16
    2366:	ff 90       	pop	r15
    2368:	08 95       	ret

0000236a <PCF8563RTC_SetHour>:
/***void PCF8563RTC_SetHour(uint8_t var_hour_u8)***/
void PCF8563RTC_SetHour(uint8_t var_hour_u8)
{
    236a:	1f 93       	push	r17
    236c:	cf 93       	push	r28
    236e:	df 93       	push	r29
    2370:	18 2f       	mov	r17, r24
	i2c.Start();                            // Start I2C communication
    2372:	cb e4       	ldi	r28, 0x4B	; 75
    2374:	d4 e0       	ldi	r29, 0x04	; 4
    2376:	e8 81       	ld	r30, Y
    2378:	f9 81       	ldd	r31, Y+1	; 0x01
    237a:	09 95       	icall
	i2c.Write(PCF8563WriteMode_U8);         // connect to PCF8563 by sending its ID on I2c Bus
    237c:	ec 81       	ldd	r30, Y+4	; 0x04
    237e:	fd 81       	ldd	r31, Y+5	; 0x05
    2380:	82 ea       	ldi	r24, 0xA2	; 162
    2382:	09 95       	icall
	i2c.Write(PCF8563HourRegAddress_U8);    // Select the SEC RAM address
    2384:	ec 81       	ldd	r30, Y+4	; 0x04
    2386:	fd 81       	ldd	r31, Y+5	; 0x05
    2388:	84 e0       	ldi	r24, 0x04	; 4
    238a:	09 95       	icall
	i2c.Write(var_hour_u8);			        // Write hour from RAM address 04H
    238c:	ec 81       	ldd	r30, Y+4	; 0x04
    238e:	fd 81       	ldd	r31, Y+5	; 0x05
    2390:	81 2f       	mov	r24, r17
    2392:	09 95       	icall
	i2c.Stop();           	                // Stop I2C communication after Setting the Time
    2394:	ea 81       	ldd	r30, Y+2	; 0x02
    2396:	fb 81       	ldd	r31, Y+3	; 0x03
    2398:	09 95       	icall
}
    239a:	df 91       	pop	r29
    239c:	cf 91       	pop	r28
    239e:	1f 91       	pop	r17
    23a0:	08 95       	ret

000023a2 <PCF8563RTC_SetMinute>:
/***void PCF8563RTC_SetMinute(uint8_t var_min_u8)***/
void PCF8563RTC_SetMinute(uint8_t var_min_u8)
{
    23a2:	1f 93       	push	r17
    23a4:	cf 93       	push	r28
    23a6:	df 93       	push	r29
    23a8:	18 2f       	mov	r17, r24
	i2c.Start();                            // Start I2C communication
    23aa:	cb e4       	ldi	r28, 0x4B	; 75
    23ac:	d4 e0       	ldi	r29, 0x04	; 4
    23ae:	e8 81       	ld	r30, Y
    23b0:	f9 81       	ldd	r31, Y+1	; 0x01
    23b2:	09 95       	icall
	i2c.Write(PCF8563WriteMode_U8);         // connect to PCF8563 by sending its ID on I2c Bus
    23b4:	ec 81       	ldd	r30, Y+4	; 0x04
    23b6:	fd 81       	ldd	r31, Y+5	; 0x05
    23b8:	82 ea       	ldi	r24, 0xA2	; 162
    23ba:	09 95       	icall
	i2c.Write(PCF8563MinuteRegAddress_U8);  // Select the SEC RAM address
    23bc:	ec 81       	ldd	r30, Y+4	; 0x04
    23be:	fd 81       	ldd	r31, Y+5	; 0x05
    23c0:	83 e0       	ldi	r24, 0x03	; 3
    23c2:	09 95       	icall
	i2c.Write(var_min_u8);			        // Write min from RAM address 03H
    23c4:	ec 81       	ldd	r30, Y+4	; 0x04
    23c6:	fd 81       	ldd	r31, Y+5	; 0x05
    23c8:	81 2f       	mov	r24, r17
    23ca:	09 95       	icall
	i2c.Stop();           	                // Stop I2C communication after Setting the Time
    23cc:	ea 81       	ldd	r30, Y+2	; 0x02
    23ce:	fb 81       	ldd	r31, Y+3	; 0x03
    23d0:	09 95       	icall
}
    23d2:	df 91       	pop	r29
    23d4:	cf 91       	pop	r28
    23d6:	1f 91       	pop	r17
    23d8:	08 95       	ret

000023da <PCF8563RTC_SetSecond>:
/***void PCF8563RTC_SetSecond(uint8_t var_sec_u8)***/
void PCF8563RTC_SetSecond(uint8_t var_sec_u8)
{
    23da:	1f 93       	push	r17
    23dc:	cf 93       	push	r28
    23de:	df 93       	push	r29
    23e0:	18 2f       	mov	r17, r24
	i2c.Start();                            // Start I2C communication
    23e2:	cb e4       	ldi	r28, 0x4B	; 75
    23e4:	d4 e0       	ldi	r29, 0x04	; 4
    23e6:	e8 81       	ld	r30, Y
    23e8:	f9 81       	ldd	r31, Y+1	; 0x01
    23ea:	09 95       	icall
	i2c.Write(PCF8563WriteMode_U8);         // connect to PCF8563 by sending its ID on I2c Bus
    23ec:	ec 81       	ldd	r30, Y+4	; 0x04
    23ee:	fd 81       	ldd	r31, Y+5	; 0x05
    23f0:	82 ea       	ldi	r24, 0xA2	; 162
    23f2:	09 95       	icall
	i2c.Write(PCF8563SecondRegAddress_U8);  // Select the SEC RAM address
    23f4:	ec 81       	ldd	r30, Y+4	; 0x04
    23f6:	fd 81       	ldd	r31, Y+5	; 0x05
    23f8:	82 e0       	ldi	r24, 0x02	; 2
    23fa:	09 95       	icall
	i2c.Write(var_sec_u8);			        // Write sec from RAM address 02H
    23fc:	ec 81       	ldd	r30, Y+4	; 0x04
    23fe:	fd 81       	ldd	r31, Y+5	; 0x05
    2400:	81 2f       	mov	r24, r17
    2402:	09 95       	icall
	i2c.Stop();           	                // Stop I2C communication after Setting the Time
    2404:	ea 81       	ldd	r30, Y+2	; 0x02
    2406:	fb 81       	ldd	r31, Y+3	; 0x03
    2408:	09 95       	icall
}
    240a:	df 91       	pop	r29
    240c:	cf 91       	pop	r28
    240e:	1f 91       	pop	r17
    2410:	08 95       	ret

00002412 <PCF8563RTC_SetClkOut>:
/***void PCF8563RTC_SetClkOut(uint8_t onoff, uint8_t freq)***/
void PCF8563RTC_SetClkOut(uint8_t onoff, uint8_t freq)
{
    2412:	1f 93       	push	r17
    2414:	cf 93       	push	r28
    2416:	df 93       	push	r29
	uint8_t word=0;
	if(onoff)
    2418:	88 23       	and	r24, r24
    241a:	21 f0       	breq	.+8      	; 0x2424 <PCF8563RTC_SetClkOut+0x12>
		word=0x80 | (freq & 0x03);
    241c:	63 70       	andi	r22, 0x03	; 3
    241e:	16 2f       	mov	r17, r22
    2420:	10 68       	ori	r17, 0x80	; 128
    2422:	01 c0       	rjmp	.+2      	; 0x2426 <PCF8563RTC_SetClkOut+0x14>
	i2c.Stop();           	                // Stop I2C communication after Setting the Time
}
/***void PCF8563RTC_SetClkOut(uint8_t onoff, uint8_t freq)***/
void PCF8563RTC_SetClkOut(uint8_t onoff, uint8_t freq)
{
	uint8_t word=0;
    2424:	10 e0       	ldi	r17, 0x00	; 0
	if(onoff)
		word=0x80 | (freq & 0x03);
	i2c.Start();                            // Start I2C communication
    2426:	cb e4       	ldi	r28, 0x4B	; 75
    2428:	d4 e0       	ldi	r29, 0x04	; 4
    242a:	e8 81       	ld	r30, Y
    242c:	f9 81       	ldd	r31, Y+1	; 0x01
    242e:	09 95       	icall
	i2c.Write(PCF8563WriteMode_U8);			// connect to PCF8563 by sending its ID on I2c Bus
    2430:	ec 81       	ldd	r30, Y+4	; 0x04
    2432:	fd 81       	ldd	r31, Y+5	; 0x05
    2434:	82 ea       	ldi	r24, 0xA2	; 162
    2436:	09 95       	icall
	i2c.Write(PCF8563CLKOUT_control_U8);	// Select the CLKOUT RAM address
    2438:	ec 81       	ldd	r30, Y+4	; 0x04
    243a:	fd 81       	ldd	r31, Y+5	; 0x05
    243c:	8d e0       	ldi	r24, 0x0D	; 13
    243e:	09 95       	icall
	i2c.Write(word);						// Write Clock from RAM address 0DH						
    2440:	ec 81       	ldd	r30, Y+4	; 0x04
    2442:	fd 81       	ldd	r31, Y+5	; 0x05
    2444:	81 2f       	mov	r24, r17
    2446:	09 95       	icall
	i2c.Stop();           	                // Stop I2C communication after Setting the Time
    2448:	ea 81       	ldd	r30, Y+2	; 0x02
    244a:	fb 81       	ldd	r31, Y+3	; 0x03
    244c:	09 95       	icall
}
    244e:	df 91       	pop	r29
    2450:	cf 91       	pop	r28
    2452:	1f 91       	pop	r17
    2454:	08 95       	ret

00002456 <PCF8563RTC_SetDate>:
/***void PCF8563RTC_SetDate(uint8_t var_day_u8, uint8_t var_weekday_u8, uint8_t var_month_u8, uint8_t var_year_u8)***/
void PCF8563RTC_SetDate(uint8_t var_day_u8, uint8_t var_weekday_u8, uint8_t var_month_u8, uint8_t var_year_u8)
{
    2456:	ef 92       	push	r14
    2458:	ff 92       	push	r15
    245a:	0f 93       	push	r16
    245c:	1f 93       	push	r17
    245e:	cf 93       	push	r28
    2460:	df 93       	push	r29
    2462:	e8 2e       	mov	r14, r24
    2464:	f6 2e       	mov	r15, r22
    2466:	04 2f       	mov	r16, r20
    2468:	12 2f       	mov	r17, r18
	i2c.Start();                          // Start I2C communication
    246a:	cb e4       	ldi	r28, 0x4B	; 75
    246c:	d4 e0       	ldi	r29, 0x04	; 4
    246e:	e8 81       	ld	r30, Y
    2470:	f9 81       	ldd	r31, Y+1	; 0x01
    2472:	09 95       	icall
	i2c.Write(PCF8563WriteMode_U8);	      // connect to PCF8563 by sending its ID on I2c Bus
    2474:	ec 81       	ldd	r30, Y+4	; 0x04
    2476:	fd 81       	ldd	r31, Y+5	; 0x05
    2478:	82 ea       	ldi	r24, 0xA2	; 162
    247a:	09 95       	icall
	i2c.Write(PCF8563DayRegAddress_U8);  // Request DAY RAM address at 05H
    247c:	ec 81       	ldd	r30, Y+4	; 0x04
    247e:	fd 81       	ldd	r31, Y+5	; 0x05
    2480:	85 e0       	ldi	r24, 0x05	; 5
    2482:	09 95       	icall
	i2c.Write(var_day_u8);			      // Write date on RAM address 05H
    2484:	ec 81       	ldd	r30, Y+4	; 0x04
    2486:	fd 81       	ldd	r31, Y+5	; 0x05
    2488:	8e 2d       	mov	r24, r14
    248a:	09 95       	icall
	i2c.Write(var_weekday_u8);            // Write date on RAM address 06H
    248c:	ec 81       	ldd	r30, Y+4	; 0x04
    248e:	fd 81       	ldd	r31, Y+5	; 0x05
    2490:	8f 2d       	mov	r24, r15
    2492:	09 95       	icall
	i2c.Write(var_month_u8);			  // Write month on RAM address 07H
    2494:	ec 81       	ldd	r30, Y+4	; 0x04
    2496:	fd 81       	ldd	r31, Y+5	; 0x05
    2498:	80 2f       	mov	r24, r16
    249a:	09 95       	icall
	i2c.Write(var_year_u8);			      // Write year on RAM address 08h
    249c:	ec 81       	ldd	r30, Y+4	; 0x04
    249e:	fd 81       	ldd	r31, Y+5	; 0x05
    24a0:	81 2f       	mov	r24, r17
    24a2:	09 95       	icall
	i2c.Stop();				              // Stop I2C communication after Setting the Date
    24a4:	ea 81       	ldd	r30, Y+2	; 0x02
    24a6:	fb 81       	ldd	r31, Y+3	; 0x03
    24a8:	09 95       	icall
}
    24aa:	df 91       	pop	r29
    24ac:	cf 91       	pop	r28
    24ae:	1f 91       	pop	r17
    24b0:	0f 91       	pop	r16
    24b2:	ff 90       	pop	r15
    24b4:	ef 90       	pop	r14
    24b6:	08 95       	ret

000024b8 <PCF8563RTC_SetYear>:
/***void PCF8563RTC_SetYear(uint8_t var_year_u8)***/
void PCF8563RTC_SetYear(uint8_t var_year_u8)
{
    24b8:	1f 93       	push	r17
    24ba:	cf 93       	push	r28
    24bc:	df 93       	push	r29
    24be:	18 2f       	mov	r17, r24
	i2c.Start();                          // Start I2C communication
    24c0:	cb e4       	ldi	r28, 0x4B	; 75
    24c2:	d4 e0       	ldi	r29, 0x04	; 4
    24c4:	e8 81       	ld	r30, Y
    24c6:	f9 81       	ldd	r31, Y+1	; 0x01
    24c8:	09 95       	icall
	i2c.Write(PCF8563WriteMode_U8);	      // connect to PCF8563 by sending its ID on I2c Bus
    24ca:	ec 81       	ldd	r30, Y+4	; 0x04
    24cc:	fd 81       	ldd	r31, Y+5	; 0x05
    24ce:	82 ea       	ldi	r24, 0xA2	; 162
    24d0:	09 95       	icall
	i2c.Write(PCF8563YearRegAddress_U8);  // Request DAY RAM address at 08H
    24d2:	ec 81       	ldd	r30, Y+4	; 0x04
    24d4:	fd 81       	ldd	r31, Y+5	; 0x05
    24d6:	88 e0       	ldi	r24, 0x08	; 8
    24d8:	09 95       	icall
	i2c.Write(var_year_u8);			      // Write year on RAM address 08h
    24da:	ec 81       	ldd	r30, Y+4	; 0x04
    24dc:	fd 81       	ldd	r31, Y+5	; 0x05
    24de:	81 2f       	mov	r24, r17
    24e0:	09 95       	icall
	i2c.Stop();				              // Stop I2C communication after Setting the Date
    24e2:	ea 81       	ldd	r30, Y+2	; 0x02
    24e4:	fb 81       	ldd	r31, Y+3	; 0x03
    24e6:	09 95       	icall
}
    24e8:	df 91       	pop	r29
    24ea:	cf 91       	pop	r28
    24ec:	1f 91       	pop	r17
    24ee:	08 95       	ret

000024f0 <PCF8563RTC_SetMonth>:
/***void PCF8563RTC_SetMonth(uint8_t var_month_u8)***/
void PCF8563RTC_SetMonth(uint8_t var_month_u8)
{
    24f0:	1f 93       	push	r17
    24f2:	cf 93       	push	r28
    24f4:	df 93       	push	r29
    24f6:	18 2f       	mov	r17, r24
	i2c.Start();                           // Start I2C communication
    24f8:	cb e4       	ldi	r28, 0x4B	; 75
    24fa:	d4 e0       	ldi	r29, 0x04	; 4
    24fc:	e8 81       	ld	r30, Y
    24fe:	f9 81       	ldd	r31, Y+1	; 0x01
    2500:	09 95       	icall
	i2c.Write(PCF8563WriteMode_U8);	       // connect to PCF8563 by sending its ID on I2c Bus
    2502:	ec 81       	ldd	r30, Y+4	; 0x04
    2504:	fd 81       	ldd	r31, Y+5	; 0x05
    2506:	82 ea       	ldi	r24, 0xA2	; 162
    2508:	09 95       	icall
	i2c.Write(PCF8563MonthRegAddress_U8);  // Request DAY RAM address at 07H
    250a:	ec 81       	ldd	r30, Y+4	; 0x04
    250c:	fd 81       	ldd	r31, Y+5	; 0x05
    250e:	87 e0       	ldi	r24, 0x07	; 7
    2510:	09 95       	icall
	i2c.Write(var_month_u8);			   // Write month on RAM address 07H
    2512:	ec 81       	ldd	r30, Y+4	; 0x04
    2514:	fd 81       	ldd	r31, Y+5	; 0x05
    2516:	81 2f       	mov	r24, r17
    2518:	09 95       	icall
	i2c.Stop();				               // Stop I2C communication after Setting the Date
    251a:	ea 81       	ldd	r30, Y+2	; 0x02
    251c:	fb 81       	ldd	r31, Y+3	; 0x03
    251e:	09 95       	icall
}
    2520:	df 91       	pop	r29
    2522:	cf 91       	pop	r28
    2524:	1f 91       	pop	r17
    2526:	08 95       	ret

00002528 <PCF8563RTC_SetWeekday>:
/***void PCF8563RTC_SetWeekday(uint8_t var_weekday_u8)***/
void PCF8563RTC_SetWeekday(uint8_t var_weekday_u8)
{
    2528:	1f 93       	push	r17
    252a:	cf 93       	push	r28
    252c:	df 93       	push	r29
    252e:	18 2f       	mov	r17, r24
	i2c.Start();                             // Start I2C communication
    2530:	cb e4       	ldi	r28, 0x4B	; 75
    2532:	d4 e0       	ldi	r29, 0x04	; 4
    2534:	e8 81       	ld	r30, Y
    2536:	f9 81       	ldd	r31, Y+1	; 0x01
    2538:	09 95       	icall
	i2c.Write(PCF8563WriteMode_U8);	         // connect to PCF8563 by sending its ID on I2c Bus
    253a:	ec 81       	ldd	r30, Y+4	; 0x04
    253c:	fd 81       	ldd	r31, Y+5	; 0x05
    253e:	82 ea       	ldi	r24, 0xA2	; 162
    2540:	09 95       	icall
	i2c.Write(PCF8563WeekdayRegAddress_U8);  // Request DAY RAM address at 06H
    2542:	ec 81       	ldd	r30, Y+4	; 0x04
    2544:	fd 81       	ldd	r31, Y+5	; 0x05
    2546:	86 e0       	ldi	r24, 0x06	; 6
    2548:	09 95       	icall
	i2c.Write(var_weekday_u8);               // Write date on RAM address 06H
    254a:	ec 81       	ldd	r30, Y+4	; 0x04
    254c:	fd 81       	ldd	r31, Y+5	; 0x05
    254e:	81 2f       	mov	r24, r17
    2550:	09 95       	icall
	i2c.Stop();				                 // Stop I2C communication after Setting the Date
    2552:	ea 81       	ldd	r30, Y+2	; 0x02
    2554:	fb 81       	ldd	r31, Y+3	; 0x03
    2556:	09 95       	icall
}
    2558:	df 91       	pop	r29
    255a:	cf 91       	pop	r28
    255c:	1f 91       	pop	r17
    255e:	08 95       	ret

00002560 <PCF8563RTC_SetDay>:
/***void PCF8563RTC_SetDay(uint8_t var_day_u8)***/
void PCF8563RTC_SetDay(uint8_t var_day_u8)
{
    2560:	1f 93       	push	r17
    2562:	cf 93       	push	r28
    2564:	df 93       	push	r29
    2566:	18 2f       	mov	r17, r24
	i2c.Start();                          // Start I2C communication
    2568:	cb e4       	ldi	r28, 0x4B	; 75
    256a:	d4 e0       	ldi	r29, 0x04	; 4
    256c:	e8 81       	ld	r30, Y
    256e:	f9 81       	ldd	r31, Y+1	; 0x01
    2570:	09 95       	icall
	i2c.Write(PCF8563WriteMode_U8);	      // connect to PCF8563 by sending its ID on I2c Bus
    2572:	ec 81       	ldd	r30, Y+4	; 0x04
    2574:	fd 81       	ldd	r31, Y+5	; 0x05
    2576:	82 ea       	ldi	r24, 0xA2	; 162
    2578:	09 95       	icall
	i2c.Write(PCF8563DayRegAddress_U8);  // Request DAY RAM address at 05H
    257a:	ec 81       	ldd	r30, Y+4	; 0x04
    257c:	fd 81       	ldd	r31, Y+5	; 0x05
    257e:	85 e0       	ldi	r24, 0x05	; 5
    2580:	09 95       	icall
	i2c.Write(var_day_u8);			      // Write date on RAM address 05H
    2582:	ec 81       	ldd	r30, Y+4	; 0x04
    2584:	fd 81       	ldd	r31, Y+5	; 0x05
    2586:	81 2f       	mov	r24, r17
    2588:	09 95       	icall
	i2c.Stop();				              // Stop I2C communication after Setting the Date
    258a:	ea 81       	ldd	r30, Y+2	; 0x02
    258c:	fb 81       	ldd	r31, Y+3	; 0x03
    258e:	09 95       	icall
}
    2590:	df 91       	pop	r29
    2592:	cf 91       	pop	r28
    2594:	1f 91       	pop	r17
    2596:	08 95       	ret

00002598 <PCF8563RTC_GetTime>:
/***struct time PCF8563RTC_GetTime(void)***/
struct time PCF8563RTC_GetTime(void)
{
    2598:	ff 92       	push	r15
    259a:	0f 93       	push	r16
    259c:	1f 93       	push	r17
    259e:	cf 93       	push	r28
    25a0:	df 93       	push	r29
	struct time result;
	i2c.Start();							       // Start I2C communication
    25a2:	cb e4       	ldi	r28, 0x4B	; 75
    25a4:	d4 e0       	ldi	r29, 0x04	; 4
    25a6:	e8 81       	ld	r30, Y
    25a8:	f9 81       	ldd	r31, Y+1	; 0x01
    25aa:	09 95       	icall
	i2c.Write(PCF8563WriteMode_U8);			       // connect to PCF8563 by sending its ID on I2c Bus
    25ac:	ec 81       	ldd	r30, Y+4	; 0x04
    25ae:	fd 81       	ldd	r31, Y+5	; 0x05
    25b0:	82 ea       	ldi	r24, 0xA2	; 162
    25b2:	09 95       	icall
	i2c.Write(PCF8563SecondRegAddress_U8);	       // Request Sec RAM address at 00H
    25b4:	ec 81       	ldd	r30, Y+4	; 0x04
    25b6:	fd 81       	ldd	r31, Y+5	; 0x05
    25b8:	82 e0       	ldi	r24, 0x02	; 2
    25ba:	09 95       	icall
	i2c.Stop();								       // Stop I2C communication after selecting Sec Register
    25bc:	ea 81       	ldd	r30, Y+2	; 0x02
    25be:	fb 81       	ldd	r31, Y+3	; 0x03
    25c0:	09 95       	icall
	i2c.Start();							       // Start I2C communication
    25c2:	e8 81       	ld	r30, Y
    25c4:	f9 81       	ldd	r31, Y+1	; 0x01
    25c6:	09 95       	icall
	i2c.Write(PCF8563ReadMode_U8);			       // connect to PCF8563(Read mode) by sending its ID
    25c8:	ec 81       	ldd	r30, Y+4	; 0x04
    25ca:	fd 81       	ldd	r31, Y+5	; 0x05
    25cc:	83 ea       	ldi	r24, 0xA3	; 163
    25ce:	09 95       	icall
	result.VL_seconds = i2c.Read(1) & ~0x80;	   // read second and return Positive ACK
    25d0:	ee 81       	ldd	r30, Y+6	; 0x06
    25d2:	ff 81       	ldd	r31, Y+7	; 0x07
    25d4:	81 e0       	ldi	r24, 0x01	; 1
    25d6:	09 95       	icall
    25d8:	f8 2e       	mov	r15, r24
	result.minutes = i2c.Read(1) & ~0x80;		   // read minute and return Positive ACK
    25da:	ee 81       	ldd	r30, Y+6	; 0x06
    25dc:	ff 81       	ldd	r31, Y+7	; 0x07
    25de:	81 e0       	ldi	r24, 0x01	; 1
    25e0:	09 95       	icall
    25e2:	18 2f       	mov	r17, r24
	result.hours = i2c.Read(0) & ~0xC0;			   // read hour and return Negative/No ACK
    25e4:	ee 81       	ldd	r30, Y+6	; 0x06
    25e6:	ff 81       	ldd	r31, Y+7	; 0x07
    25e8:	80 e0       	ldi	r24, 0x00	; 0
    25ea:	09 95       	icall
    25ec:	08 2f       	mov	r16, r24
	i2c.Stop();								       // Stop I2C communication after reading the Time
    25ee:	ea 81       	ldd	r30, Y+2	; 0x02
    25f0:	fb 81       	ldd	r31, Y+3	; 0x03
    25f2:	09 95       	icall
	return result;
    25f4:	60 2f       	mov	r22, r16
    25f6:	6f 73       	andi	r22, 0x3F	; 63
    25f8:	71 2f       	mov	r23, r17
    25fa:	7f 77       	andi	r23, 0x7F	; 127
}
    25fc:	8f 2d       	mov	r24, r15
    25fe:	8f 77       	andi	r24, 0x7F	; 127
    2600:	df 91       	pop	r29
    2602:	cf 91       	pop	r28
    2604:	1f 91       	pop	r17
    2606:	0f 91       	pop	r16
    2608:	ff 90       	pop	r15
    260a:	08 95       	ret

0000260c <PCF8563RTC_GetDate>:
/***struct date PCF8563RTC_GetDate(void)***/
struct date PCF8563RTC_GetDate(void)
{
    260c:	ef 92       	push	r14
    260e:	ff 92       	push	r15
    2610:	0f 93       	push	r16
    2612:	1f 93       	push	r17
    2614:	cf 93       	push	r28
    2616:	df 93       	push	r29
	struct date result;
	i2c.Start();							        // Start I2C communication
    2618:	cb e4       	ldi	r28, 0x4B	; 75
    261a:	d4 e0       	ldi	r29, 0x04	; 4
    261c:	e8 81       	ld	r30, Y
    261e:	f9 81       	ldd	r31, Y+1	; 0x01
    2620:	09 95       	icall
	i2c.Write(PCF8563WriteMode_U8);			        // connect to PCF8563 by sending its ID on I2c Bus
    2622:	ec 81       	ldd	r30, Y+4	; 0x04
    2624:	fd 81       	ldd	r31, Y+5	; 0x05
    2626:	82 ea       	ldi	r24, 0xA2	; 162
    2628:	09 95       	icall
	i2c.Write(PCF8563DayRegAddress_U8);	            // Request DAY RAM address at 04H
    262a:	ec 81       	ldd	r30, Y+4	; 0x04
    262c:	fd 81       	ldd	r31, Y+5	; 0x05
    262e:	85 e0       	ldi	r24, 0x05	; 5
    2630:	09 95       	icall
	i2c.Stop();								        // Stop I2C communication after selecting DAY Register
    2632:	ea 81       	ldd	r30, Y+2	; 0x02
    2634:	fb 81       	ldd	r31, Y+3	; 0x03
    2636:	09 95       	icall
	i2c.Start();							        // Start I2C communication
    2638:	e8 81       	ld	r30, Y
    263a:	f9 81       	ldd	r31, Y+1	; 0x01
    263c:	09 95       	icall
	i2c.Write(PCF8563ReadMode_U8);			        // connect to PCF8563 (Read mode) by sending its ID
    263e:	ec 81       	ldd	r30, Y+4	; 0x04
    2640:	fd 81       	ldd	r31, Y+5	; 0x05
    2642:	83 ea       	ldi	r24, 0xA3	; 163
    2644:	09 95       	icall
	result.days = i2c.Read(1) & ~0xC0;				// read Day and return Positive ACK
    2646:	ee 81       	ldd	r30, Y+6	; 0x06
    2648:	ff 81       	ldd	r31, Y+7	; 0x07
    264a:	81 e0       	ldi	r24, 0x01	; 1
    264c:	09 95       	icall
    264e:	08 2f       	mov	r16, r24
	result.weekdays = i2c.Read(1) & ~0xF8;			// read Month and return Positive ACK
    2650:	ee 81       	ldd	r30, Y+6	; 0x06
    2652:	ff 81       	ldd	r31, Y+7	; 0x07
    2654:	81 e0       	ldi	r24, 0x01	; 1
    2656:	09 95       	icall
    2658:	f8 2e       	mov	r15, r24
	result.century_months = i2c.Read(1) & ~0xE0;
    265a:	ee 81       	ldd	r30, Y+6	; 0x06
    265c:	ff 81       	ldd	r31, Y+7	; 0x07
    265e:	81 e0       	ldi	r24, 0x01	; 1
    2660:	09 95       	icall
    2662:	18 2f       	mov	r17, r24
	result.years = i2c.Read(0);				        // read Year and return Negative/No ACK
    2664:	ee 81       	ldd	r30, Y+6	; 0x06
    2666:	ff 81       	ldd	r31, Y+7	; 0x07
    2668:	80 e0       	ldi	r24, 0x00	; 0
    266a:	09 95       	icall
    266c:	e8 2e       	mov	r14, r24
	i2c.Stop();								        // Stop I2C communication after reading the Date
    266e:	ea 81       	ldd	r30, Y+2	; 0x02
    2670:	fb 81       	ldd	r31, Y+3	; 0x03
    2672:	09 95       	icall
	return result;
    2674:	71 2f       	mov	r23, r17
    2676:	7f 71       	andi	r23, 0x1F	; 31
}
    2678:	6e 2d       	mov	r22, r14
    267a:	8f 2d       	mov	r24, r15
    267c:	87 70       	andi	r24, 0x07	; 7
    267e:	90 2f       	mov	r25, r16
    2680:	9f 73       	andi	r25, 0x3F	; 63
    2682:	df 91       	pop	r29
    2684:	cf 91       	pop	r28
    2686:	1f 91       	pop	r17
    2688:	0f 91       	pop	r16
    268a:	ff 90       	pop	r15
    268c:	ef 90       	pop	r14
    268e:	08 95       	ret

00002690 <PCF8563RTC_bcd2dec>:
/***uint8_t PCF8563RTC_bcd2dec(uint8_t num)***/
uint8_t PCF8563RTC_bcd2dec(uint8_t num)
{
	return ((num/16 * 10) + (num % 16));
    2690:	98 2f       	mov	r25, r24
    2692:	92 95       	swap	r25
    2694:	9f 70       	andi	r25, 0x0F	; 15
    2696:	99 0f       	add	r25, r25
    2698:	29 2f       	mov	r18, r25
    269a:	22 0f       	add	r18, r18
    269c:	22 0f       	add	r18, r18
    269e:	92 0f       	add	r25, r18
    26a0:	8f 70       	andi	r24, 0x0F	; 15
}
    26a2:	89 0f       	add	r24, r25
    26a4:	08 95       	ret

000026a6 <PCF8563RTC_bintobcd>:
/***uint8_t PCF8563RTC_bintobcd(uint8_t bin)***/
uint8_t PCF8563RTC_bintobcd(uint8_t bin)
{
	return (((bin) / 10) << 4) + ((bin) % 10);
    26a6:	9d ec       	ldi	r25, 0xCD	; 205
    26a8:	89 9f       	mul	r24, r25
    26aa:	91 2d       	mov	r25, r1
    26ac:	11 24       	eor	r1, r1
    26ae:	96 95       	lsr	r25
    26b0:	96 95       	lsr	r25
    26b2:	96 95       	lsr	r25
    26b4:	39 2f       	mov	r19, r25
    26b6:	33 0f       	add	r19, r19
    26b8:	23 2f       	mov	r18, r19
    26ba:	22 0f       	add	r18, r18
    26bc:	22 0f       	add	r18, r18
    26be:	23 0f       	add	r18, r19
    26c0:	82 1b       	sub	r24, r18
}
    26c2:	20 e1       	ldi	r18, 0x10	; 16
    26c4:	92 9f       	mul	r25, r18
    26c6:	80 0d       	add	r24, r0
    26c8:	11 24       	eor	r1, r1
    26ca:	08 95       	ret

000026cc <PCF8563RTC_Init>:
	SREG=tSREG;
	return pcf;
}
/***void PCF8563RTC_Init(uint8_t prescaler)***/
void PCF8563RTC_Init(void)
{
    26cc:	cf 93       	push	r28
    26ce:	df 93       	push	r29
	i2c.Start();							// Start I2C communication
    26d0:	cb e4       	ldi	r28, 0x4B	; 75
    26d2:	d4 e0       	ldi	r29, 0x04	; 4
    26d4:	e8 81       	ld	r30, Y
    26d6:	f9 81       	ldd	r31, Y+1	; 0x01
    26d8:	09 95       	icall
	i2c.Write(PCF8563WriteMode_U8);			// Connect to PCF8563 by sending its ID on I2c Bus
    26da:	ec 81       	ldd	r30, Y+4	; 0x04
    26dc:	fd 81       	ldd	r31, Y+5	; 0x05
    26de:	82 ea       	ldi	r24, 0xA2	; 162
    26e0:	09 95       	icall
	i2c.Write(PCF8563ControlRegAddress_U8);	// Select the PCF8563 ControlRegister to configure PCF8563
    26e2:	ec 81       	ldd	r30, Y+4	; 0x04
    26e4:	fd 81       	ldd	r31, Y+5	; 0x05
    26e6:	80 e0       	ldi	r24, 0x00	; 0
    26e8:	09 95       	icall
	i2c.Write(0x00);						// Write 0x00 to Control register to disable SQW-Out
    26ea:	ec 81       	ldd	r30, Y+4	; 0x04
    26ec:	fd 81       	ldd	r31, Y+5	; 0x05
    26ee:	80 e0       	ldi	r24, 0x00	; 0
    26f0:	09 95       	icall
	i2c.Stop();								// Stop I2C communication after initializing PCF8563
    26f2:	ea 81       	ldd	r30, Y+2	; 0x02
    26f4:	fb 81       	ldd	r31, Y+3	; 0x03
    26f6:	09 95       	icall
}
    26f8:	df 91       	pop	r29
    26fa:	cf 91       	pop	r28
    26fc:	08 95       	ret

000026fe <PCF8563RTCenable>:
struct date PCF8563RTC_GetDate(void);
uint8_t PCF8563RTC_bcd2dec(uint8_t num);
uint8_t PCF8563RTC_bintobcd(uint8_t bin);
/***PCF8563RTC PCF8563RTCenable(uint8_t prescaler)***/
PCF8563RTC PCF8563RTCenable(uint8_t prescaler)
{
    26fe:	ff 92       	push	r15
    2700:	0f 93       	push	r16
    2702:	1f 93       	push	r17
    2704:	cf 93       	push	r28
    2706:	df 93       	push	r29
    2708:	cd b7       	in	r28, 0x3d	; 61
    270a:	de b7       	in	r29, 0x3e	; 62
    270c:	2a 97       	sbiw	r28, 0x0a	; 10
    270e:	0f b6       	in	r0, 0x3f	; 63
    2710:	f8 94       	cli
    2712:	de bf       	out	0x3e, r29	; 62
    2714:	0f be       	out	0x3f, r0	; 63
    2716:	cd bf       	out	0x3d, r28	; 61
    2718:	8c 01       	movw	r16, r24
	uint8_t tSREG;
	tSREG=SREG;
    271a:	ff b6       	in	r15, 0x3f	; 63
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
    271c:	8f b7       	in	r24, 0x3f	; 63
    271e:	8f 77       	andi	r24, 0x7F	; 127
    2720:	8f bf       	out	0x3f, r24	; 63
	PCF8563RTC pcf;
	i2c = I2Cenable(prescaler);  			// Initialize the I2c module.
    2722:	ce 01       	movw	r24, r28
    2724:	01 96       	adiw	r24, 0x01	; 1
    2726:	39 d9       	rcall	.-3470   	; 0x199a <I2Cenable>
    2728:	8a e0       	ldi	r24, 0x0A	; 10
    272a:	fe 01       	movw	r30, r28
    272c:	31 96       	adiw	r30, 0x01	; 1
    272e:	ab e4       	ldi	r26, 0x4B	; 75
    2730:	b4 e0       	ldi	r27, 0x04	; 4
    2732:	01 90       	ld	r0, Z+
    2734:	0d 92       	st	X+, r0
    2736:	8a 95       	dec	r24
    2738:	e1 f7       	brne	.-8      	; 0x2732 <PCF8563RTCenable+0x34>
	PCF8563RTC_Init();                      //Initialize RTC
    273a:	c8 df       	rcall	.-112    	; 0x26cc <PCF8563RTC_Init>
    273c:	ff be       	out	0x3f, r15	; 63
	pcf.GetTime=PCF8563RTC_GetTime;
	pcf.GetDate=PCF8563RTC_GetDate;
	pcf.bcd2dec=PCF8563RTC_bcd2dec;
	pcf.bintobcd=PCF8563RTC_bintobcd;
	/******/
	SREG=tSREG;
    273e:	8b e8       	ldi	r24, 0x8B	; 139
	return pcf;
    2740:	91 e1       	ldi	r25, 0x11	; 17
    2742:	f8 01       	movw	r30, r16
    2744:	91 83       	std	Z+1, r25	; 0x01
    2746:	80 83       	st	Z, r24
    2748:	85 eb       	ldi	r24, 0xB5	; 181
    274a:	91 e1       	ldi	r25, 0x11	; 17
    274c:	93 83       	std	Z+3, r25	; 0x03
    274e:	82 83       	std	Z+2, r24	; 0x02
    2750:	81 ed       	ldi	r24, 0xD1	; 209
    2752:	91 e1       	ldi	r25, 0x11	; 17
    2754:	95 83       	std	Z+5, r25	; 0x05
    2756:	84 83       	std	Z+4, r24	; 0x04
    2758:	8d ee       	ldi	r24, 0xED	; 237
    275a:	91 e1       	ldi	r25, 0x11	; 17
    275c:	97 83       	std	Z+7, r25	; 0x07
    275e:	86 83       	std	Z+6, r24	; 0x06
    2760:	89 e0       	ldi	r24, 0x09	; 9
    2762:	92 e1       	ldi	r25, 0x12	; 18
    2764:	91 87       	std	Z+9, r25	; 0x09
    2766:	80 87       	std	Z+8, r24	; 0x08
    2768:	8b e2       	ldi	r24, 0x2B	; 43
    276a:	92 e1       	ldi	r25, 0x12	; 18
    276c:	93 87       	std	Z+11, r25	; 0x0b
    276e:	82 87       	std	Z+10, r24	; 0x0a
    2770:	80 eb       	ldi	r24, 0xB0	; 176
    2772:	92 e1       	ldi	r25, 0x12	; 18
    2774:	95 87       	std	Z+13, r25	; 0x0d
    2776:	84 87       	std	Z+12, r24	; 0x0c
    2778:	84 e9       	ldi	r24, 0x94	; 148
    277a:	92 e1       	ldi	r25, 0x12	; 18
    277c:	97 87       	std	Z+15, r25	; 0x0f
    277e:	86 87       	std	Z+14, r24	; 0x0e
    2780:	88 e7       	ldi	r24, 0x78	; 120
    2782:	92 e1       	ldi	r25, 0x12	; 18
    2784:	91 8b       	std	Z+17, r25	; 0x11
    2786:	80 8b       	std	Z+16, r24	; 0x10
    2788:	8c e5       	ldi	r24, 0x5C	; 92
    278a:	92 e1       	ldi	r25, 0x12	; 18
    278c:	93 8b       	std	Z+19, r25	; 0x13
    278e:	82 8b       	std	Z+18, r24	; 0x12
    2790:	8c ec       	ldi	r24, 0xCC	; 204
    2792:	92 e1       	ldi	r25, 0x12	; 18
    2794:	95 8b       	std	Z+21, r25	; 0x15
    2796:	84 8b       	std	Z+20, r24	; 0x14
    2798:	86 e0       	ldi	r24, 0x06	; 6
    279a:	93 e1       	ldi	r25, 0x13	; 19
    279c:	97 8b       	std	Z+23, r25	; 0x17
    279e:	86 8b       	std	Z+22, r24	; 0x16
    27a0:	88 e4       	ldi	r24, 0x48	; 72
    27a2:	93 e1       	ldi	r25, 0x13	; 19
    27a4:	91 8f       	std	Z+25, r25	; 0x19
    27a6:	80 8f       	std	Z+24, r24	; 0x18
    27a8:	83 e5       	ldi	r24, 0x53	; 83
    27aa:	93 e1       	ldi	r25, 0x13	; 19
    27ac:	93 8f       	std	Z+27, r25	; 0x1b
    27ae:	82 8f       	std	Z+26, r24	; 0x1a
    27b0:	c8 01       	movw	r24, r16
}
    27b2:	2a 96       	adiw	r28, 0x0a	; 10
    27b4:	0f b6       	in	r0, 0x3f	; 63
    27b6:	f8 94       	cli
    27b8:	de bf       	out	0x3e, r29	; 62
    27ba:	0f be       	out	0x3f, r0	; 63
    27bc:	cd bf       	out	0x3d, r28	; 61
    27be:	df 91       	pop	r29
    27c0:	cf 91       	pop	r28
    27c2:	1f 91       	pop	r17
    27c4:	0f 91       	pop	r16
    27c6:	ff 90       	pop	r15
    27c8:	08 95       	ret

000027ca <PORTINIT>:
** procedure and function
*/
void PORTINIT(void)
{
	//INPUT
	DDRF=0x00;
    27ca:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	PORTF=0x0F;
    27ce:	8f e0       	ldi	r24, 0x0F	; 15
    27d0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	//OUTPUT
	DDRB|=(1<<5) | (1<<6) | (1<<7);
    27d4:	87 b3       	in	r24, 0x17	; 23
    27d6:	80 6e       	ori	r24, 0xE0	; 224
    27d8:	87 bb       	out	0x17, r24	; 23
    27da:	08 95       	ret

000027dc <main>:
** Header
*/
void PORTINIT();
/****MAIN****/
int main(void)
{
    27dc:	cf 93       	push	r28
    27de:	df 93       	push	r29
    27e0:	cd b7       	in	r28, 0x3d	; 61
    27e2:	de b7       	in	r29, 0x3e	; 62
    27e4:	cc 53       	subi	r28, 0x3C	; 60
    27e6:	d1 40       	sbci	r29, 0x01	; 1
    27e8:	0f b6       	in	r0, 0x3f	; 63
    27ea:	f8 94       	cli
    27ec:	de bf       	out	0x3e, r29	; 62
    27ee:	0f be       	out	0x3f, r0	; 63
    27f0:	cd bf       	out	0x3d, r28	; 61
	PORTINIT(); // Inic Ports
    27f2:	eb df       	rcall	.-42     	; 0x27ca <PORTINIT>
	/***INICIALIZE OBJECTS***/
	function= FUNCenable(); // Function Library
    27f4:	ce 01       	movw	r24, r28
    27f6:	8e 51       	subi	r24, 0x1E	; 30
    27f8:	9f 4f       	sbci	r25, 0xFF	; 255
    27fa:	0e 94 85 0b 	call	0x170a	; 0x170a <FUNCenable>
    27fe:	8a e4       	ldi	r24, 0x4A	; 74
    2800:	fe 01       	movw	r30, r28
    2802:	ee 51       	subi	r30, 0x1E	; 30
    2804:	ff 4f       	sbci	r31, 0xFF	; 255
    2806:	ab e5       	ldi	r26, 0x5B	; 91
    2808:	b4 e0       	ldi	r27, 0x04	; 4
    280a:	01 90       	ld	r0, Z+
    280c:	0d 92       	st	X+, r0
    280e:	8a 95       	dec	r24
    2810:	e1 f7       	brne	.-8      	; 0x280a <main+0x2e>
	LCD0 lcd0 = LCD0enable(&DDRA,&PINA,&PORTA); // LCD Display 4X20
    2812:	2b e3       	ldi	r18, 0x3B	; 59
    2814:	30 e0       	ldi	r19, 0x00	; 0
    2816:	49 e3       	ldi	r20, 0x39	; 57
    2818:	50 e0       	ldi	r21, 0x00	; 0
    281a:	6a e3       	ldi	r22, 0x3A	; 58
    281c:	70 e0       	ldi	r23, 0x00	; 0
    281e:	ce 01       	movw	r24, r28
    2820:	8e 56       	subi	r24, 0x6E	; 110
    2822:	9f 4f       	sbci	r25, 0xFF	; 255
    2824:	10 dd       	rcall	.-1504   	; 0x2246 <LCD0enable>
    2826:	c8 56       	subi	r28, 0x68	; 104
    2828:	df 4f       	sbci	r29, 0xFF	; 255
    282a:	48 80       	ld	r4, Y
    282c:	59 80       	ldd	r5, Y+1	; 0x01
    282e:	c8 59       	subi	r28, 0x98	; 152
    2830:	d0 40       	sbci	r29, 0x00	; 0
    2832:	c2 56       	subi	r28, 0x62	; 98
    2834:	df 4f       	sbci	r29, 0xFF	; 255
    2836:	28 80       	ld	r2, Y
    2838:	39 80       	ldd	r3, Y+1	; 0x01
    283a:	ce 59       	subi	r28, 0x9E	; 158
    283c:	d0 40       	sbci	r29, 0x00	; 0
    283e:	ce 55       	subi	r28, 0x5E	; 94
    2840:	df 4f       	sbci	r29, 0xFF	; 255
    2842:	28 81       	ld	r18, Y
    2844:	39 81       	ldd	r19, Y+1	; 0x01
    2846:	c2 5a       	subi	r28, 0xA2	; 162
    2848:	d0 40       	sbci	r29, 0x00	; 0
    284a:	c0 5d       	subi	r28, 0xD0	; 208
    284c:	de 4f       	sbci	r29, 0xFE	; 254
    284e:	39 83       	std	Y+1, r19	; 0x01
    2850:	28 83       	st	Y, r18
    2852:	c0 53       	subi	r28, 0x30	; 48
    2854:	d1 40       	sbci	r29, 0x01	; 1
    2856:	cc 55       	subi	r28, 0x5C	; 92
    2858:	df 4f       	sbci	r29, 0xFF	; 255
    285a:	68 80       	ld	r6, Y
    285c:	79 80       	ldd	r7, Y+1	; 0x01
    285e:	c4 5a       	subi	r28, 0xA4	; 164
    2860:	d0 40       	sbci	r29, 0x00	; 0
	KEYPAD keypad = KEYPADenable(&DDRE,&PINE,&PORTE); // Keyboard
    2862:	43 e2       	ldi	r20, 0x23	; 35
    2864:	50 e0       	ldi	r21, 0x00	; 0
    2866:	61 e2       	ldi	r22, 0x21	; 33
    2868:	70 e0       	ldi	r23, 0x00	; 0
    286a:	82 e2       	ldi	r24, 0x22	; 34
    286c:	90 e0       	ldi	r25, 0x00	; 0
    286e:	6c da       	rcall	.-2856   	; 0x1d48 <KEYPADenable>
    2870:	c8 55       	subi	r28, 0x58	; 88
    2872:	df 4f       	sbci	r29, 0xFF	; 255
    2874:	28 83       	st	Y, r18
    2876:	c8 5a       	subi	r28, 0xA8	; 168
    2878:	d0 40       	sbci	r29, 0x00	; 0
    287a:	c7 55       	subi	r28, 0x57	; 87
    287c:	df 4f       	sbci	r29, 0xFF	; 255
    287e:	38 83       	st	Y, r19
    2880:	c9 5a       	subi	r28, 0xA9	; 169
    2882:	d0 40       	sbci	r29, 0x00	; 0
    2884:	c6 55       	subi	r28, 0x56	; 86
    2886:	df 4f       	sbci	r29, 0xFF	; 255
    2888:	48 83       	st	Y, r20
    288a:	ca 5a       	subi	r28, 0xAA	; 170
    288c:	d0 40       	sbci	r29, 0x00	; 0
    288e:	c5 55       	subi	r28, 0x55	; 85
    2890:	df 4f       	sbci	r29, 0xFF	; 255
    2892:	58 83       	st	Y, r21
    2894:	cb 5a       	subi	r28, 0xAB	; 171
    2896:	d0 40       	sbci	r29, 0x00	; 0
    2898:	c4 55       	subi	r28, 0x54	; 84
    289a:	df 4f       	sbci	r29, 0xFF	; 255
    289c:	68 83       	st	Y, r22
    289e:	cc 5a       	subi	r28, 0xAC	; 172
    28a0:	d0 40       	sbci	r29, 0x00	; 0
    28a2:	c3 55       	subi	r28, 0x53	; 83
    28a4:	df 4f       	sbci	r29, 0xFF	; 255
    28a6:	78 83       	st	Y, r23
    28a8:	cd 5a       	subi	r28, 0xAD	; 173
    28aa:	d0 40       	sbci	r29, 0x00	; 0
    28ac:	c2 55       	subi	r28, 0x52	; 82
    28ae:	df 4f       	sbci	r29, 0xFF	; 255
    28b0:	88 83       	st	Y, r24
    28b2:	ce 5a       	subi	r28, 0xAE	; 174
    28b4:	d0 40       	sbci	r29, 0x00	; 0
    28b6:	c1 55       	subi	r28, 0x51	; 81
    28b8:	df 4f       	sbci	r29, 0xFF	; 255
    28ba:	98 83       	st	Y, r25
    28bc:	cf 5a       	subi	r28, 0xAF	; 175
    28be:	d0 40       	sbci	r29, 0x00	; 0
    28c0:	c4 55       	subi	r28, 0x54	; 84
    28c2:	df 4f       	sbci	r29, 0xFF	; 255
    28c4:	88 80       	ld	r8, Y
    28c6:	99 80       	ldd	r9, Y+1	; 0x01
    28c8:	cc 5a       	subi	r28, 0xAC	; 172
    28ca:	d0 40       	sbci	r29, 0x00	; 0
    28cc:	c2 55       	subi	r28, 0x52	; 82
    28ce:	df 4f       	sbci	r29, 0xFF	; 255
    28d0:	88 81       	ld	r24, Y
    28d2:	99 81       	ldd	r25, Y+1	; 0x01
    28d4:	ce 5a       	subi	r28, 0xAE	; 174
    28d6:	d0 40       	sbci	r29, 0x00	; 0
    28d8:	c2 5d       	subi	r28, 0xD2	; 210
    28da:	de 4f       	sbci	r29, 0xFE	; 254
    28dc:	99 83       	std	Y+1, r25	; 0x01
    28de:	88 83       	st	Y, r24
    28e0:	ce 52       	subi	r28, 0x2E	; 46
    28e2:	d1 40       	sbci	r29, 0x01	; 1
	ANALOG analog = ANALOGenable(1, 128, 1, 0); // Channel 0 for Position
    28e4:	1f 92       	push	r1
    28e6:	1f 92       	push	r1
    28e8:	1f 92       	push	r1
    28ea:	81 e0       	ldi	r24, 0x01	; 1
    28ec:	8f 93       	push	r24
    28ee:	90 e8       	ldi	r25, 0x80	; 128
    28f0:	9f 93       	push	r25
    28f2:	8f 93       	push	r24
    28f4:	0e 94 6f 01 	call	0x2de	; 0x2de <ANALOGenable>
    28f8:	c9 5c       	subi	r28, 0xC9	; 201
    28fa:	de 4f       	sbci	r29, 0xFE	; 254
    28fc:	68 83       	st	Y, r22
    28fe:	79 83       	std	Y+1, r23	; 0x01
    2900:	8a 83       	std	Y+2, r24	; 0x02
    2902:	9b 83       	std	Y+3, r25	; 0x03
    2904:	c7 53       	subi	r28, 0x37	; 55
    2906:	d1 40       	sbci	r29, 0x01	; 1
	TIMER_COUNTER0 timer0 = TIMER_COUNTER0enable(2,2); // 1Hz to HC595
    2908:	42 e0       	ldi	r20, 0x02	; 2
    290a:	62 e0       	ldi	r22, 0x02	; 2
    290c:	ce 01       	movw	r24, r28
    290e:	80 55       	subi	r24, 0x50	; 80
    2910:	9f 4f       	sbci	r25, 0xFF	; 255
    2912:	0e 94 8f 03 	call	0x71e	; 0x71e <TIMER_COUNTER0enable>
	TIMER_COUNTER1 timer1 = TIMER_COUNTER1enable(9,0); // PWM Positioning
    2916:	40 e0       	ldi	r20, 0x00	; 0
    2918:	69 e0       	ldi	r22, 0x09	; 9
    291a:	ce 01       	movw	r24, r28
    291c:	80 54       	subi	r24, 0x40	; 64
    291e:	9f 4f       	sbci	r25, 0xFF	; 255
    2920:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <TIMER_COUNTER1enable>
    2924:	c8 53       	subi	r28, 0x38	; 56
    2926:	df 4f       	sbci	r29, 0xFF	; 255
    2928:	a8 81       	ld	r26, Y
    292a:	b9 81       	ldd	r27, Y+1	; 0x01
    292c:	c8 5c       	subi	r28, 0xC8	; 200
    292e:	d0 40       	sbci	r29, 0x00	; 0
    2930:	c5 5c       	subi	r28, 0xC5	; 197
    2932:	de 4f       	sbci	r29, 0xFE	; 254
    2934:	b9 83       	std	Y+1, r27	; 0x01
    2936:	a8 83       	st	Y, r26
    2938:	cb 53       	subi	r28, 0x3B	; 59
    293a:	d1 40       	sbci	r29, 0x01	; 1
	rtc = PCF8563RTCenable(16); // RTC with I2C
    293c:	60 e1       	ldi	r22, 0x10	; 16
    293e:	ce 01       	movw	r24, r28
    2940:	8e 51       	subi	r24, 0x1E	; 30
    2942:	9f 4f       	sbci	r25, 0xFF	; 255
    2944:	dc de       	rcall	.-584    	; 0x26fe <PCF8563RTCenable>
    2946:	8c e1       	ldi	r24, 0x1C	; 28
    2948:	fe 01       	movw	r30, r28
    294a:	ee 51       	subi	r30, 0x1E	; 30
    294c:	ff 4f       	sbci	r31, 0xFF	; 255
    294e:	a8 ea       	ldi	r26, 0xA8	; 168
    2950:	b4 e0       	ldi	r27, 0x04	; 4
    2952:	01 90       	ld	r0, Z+
    2954:	0d 92       	st	X+, r0
    2956:	8a 95       	dec	r24
    2958:	e1 f7       	brne	.-8      	; 0x2952 <main+0x176>
	shift = HC595enable(&DDRG,&PORTG,2,0,1);
    295a:	01 e0       	ldi	r16, 0x01	; 1
    295c:	20 e0       	ldi	r18, 0x00	; 0
    295e:	42 e0       	ldi	r20, 0x02	; 2
    2960:	65 e6       	ldi	r22, 0x65	; 101
    2962:	70 e0       	ldi	r23, 0x00	; 0
    2964:	84 e6       	ldi	r24, 0x64	; 100
    2966:	90 e0       	ldi	r25, 0x00	; 0
    2968:	0e 94 0c 01 	call	0x218	; 0x218 <HC595enable>
    296c:	20 93 55 04 	sts	0x0455, r18	; 0x800455 <shift>
    2970:	30 93 56 04 	sts	0x0456, r19	; 0x800456 <shift+0x1>
    2974:	40 93 57 04 	sts	0x0457, r20	; 0x800457 <shift+0x2>
    2978:	50 93 58 04 	sts	0x0458, r21	; 0x800458 <shift+0x3>
    297c:	60 93 59 04 	sts	0x0459, r22	; 0x800459 <shift+0x4>
    2980:	70 93 5a 04 	sts	0x045A, r23	; 0x80045a <shift+0x5>
	uart = UART1enable(103,8,1,NONE);//UART 103 para 9600, 68 para 14400
    2984:	00 e0       	ldi	r16, 0x00	; 0
    2986:	10 e0       	ldi	r17, 0x00	; 0
    2988:	21 e0       	ldi	r18, 0x01	; 1
    298a:	30 e0       	ldi	r19, 0x00	; 0
    298c:	48 e0       	ldi	r20, 0x08	; 8
    298e:	50 e0       	ldi	r21, 0x00	; 0
    2990:	67 e6       	ldi	r22, 0x67	; 103
    2992:	70 e0       	ldi	r23, 0x00	; 0
    2994:	ce 01       	movw	r24, r28
    2996:	8e 51       	subi	r24, 0x1E	; 30
    2998:	9f 4f       	sbci	r25, 0xFF	; 255
    299a:	0e 94 ed 05 	call	0xbda	; 0xbda <UART1enable>
    299e:	82 e1       	ldi	r24, 0x12	; 18
    29a0:	fe 01       	movw	r30, r28
    29a2:	ee 51       	subi	r30, 0x1E	; 30
    29a4:	ff 4f       	sbci	r31, 0xFF	; 255
    29a6:	a8 ec       	ldi	r26, 0xC8	; 200
    29a8:	b4 e0       	ldi	r27, 0x04	; 4
    29aa:	01 90       	ld	r0, Z+
    29ac:	0d 92       	st	X+, r0
    29ae:	8a 95       	dec	r24
    29b0:	e1 f7       	brne	.-8      	; 0x29aa <main+0x1ce>
	/******/
	char Menu='1'; // Main menu selector
	uint16_t adcvalue; // analog reading
	char str[6]="0"; // analog vector
    29b2:	ce 01       	movw	r24, r28
    29b4:	80 53       	subi	r24, 0x30	; 48
    29b6:	9f 4f       	sbci	r25, 0xFF	; 255
    29b8:	fc 01       	movw	r30, r24
    29ba:	20 e3       	ldi	r18, 0x30	; 48
    29bc:	30 e0       	ldi	r19, 0x00	; 0
    29be:	21 93       	st	Z+, r18
    29c0:	31 93       	st	Z+, r19
    29c2:	24 e0       	ldi	r18, 0x04	; 4
    29c4:	df 01       	movw	r26, r30
    29c6:	1d 92       	st	X+, r1
    29c8:	2a 95       	dec	r18
    29ca:	e9 f7       	brne	.-6      	; 0x29c6 <main+0x1ea>
	int16_t mvalue=90; // manual position reading
	int16_t m_value; // manual positioning
	char mstr[6]="90"; // manual position vector
    29cc:	29 e3       	ldi	r18, 0x39	; 57
    29ce:	30 e3       	ldi	r19, 0x30	; 48
    29d0:	ca 52       	subi	r28, 0x2A	; 42
    29d2:	df 4f       	sbci	r29, 0xFF	; 255
    29d4:	39 83       	std	Y+1, r19	; 0x01
    29d6:	28 83       	st	Y, r18
    29d8:	c6 5d       	subi	r28, 0xD6	; 214
    29da:	d0 40       	sbci	r29, 0x00	; 0
    29dc:	c8 52       	subi	r28, 0x28	; 40
    29de:	df 4f       	sbci	r29, 0xFF	; 255
    29e0:	19 82       	std	Y+1, r1	; 0x01
    29e2:	18 82       	st	Y, r1
    29e4:	c8 5d       	subi	r28, 0xD8	; 216
    29e6:	d0 40       	sbci	r29, 0x00	; 0
    29e8:	c6 52       	subi	r28, 0x26	; 38
    29ea:	df 4f       	sbci	r29, 0xFF	; 255
    29ec:	19 82       	std	Y+1, r1	; 0x01
    29ee:	18 82       	st	Y, r1
    29f0:	ca 5d       	subi	r28, 0xDA	; 218
    29f2:	d0 40       	sbci	r29, 0x00	; 0
	char tstr[6]; // time vector
	char cal='0'; // Sub Menu for setting up date and time
	uint16_t set;
	ptr=str;
    29f4:	90 93 44 02 	sts	0x0244, r25	; 0x800244 <ptr+0x1>
    29f8:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <ptr>
	uint16_t positionhour=12;
	//int16_t sense;
	/***Parameters timers***/
	timer0.compare(249);
    29fc:	ca 54       	subi	r28, 0x4A	; 74
    29fe:	df 4f       	sbci	r29, 0xFF	; 255
    2a00:	e8 81       	ld	r30, Y
    2a02:	f9 81       	ldd	r31, Y+1	; 0x01
    2a04:	c6 5b       	subi	r28, 0xB6	; 182
    2a06:	d0 40       	sbci	r29, 0x00	; 0
    2a08:	89 ef       	ldi	r24, 0xF9	; 249
    2a0a:	09 95       	icall
	timer0.start(64);
    2a0c:	c4 54       	subi	r28, 0x44	; 68
    2a0e:	df 4f       	sbci	r29, 0xFF	; 255
    2a10:	e8 81       	ld	r30, Y
    2a12:	f9 81       	ldd	r31, Y+1	; 0x01
    2a14:	cc 5b       	subi	r28, 0xBC	; 188
    2a16:	d0 40       	sbci	r29, 0x00	; 0
    2a18:	80 e4       	ldi	r24, 0x40	; 64
    2a1a:	90 e0       	ldi	r25, 0x00	; 0
    2a1c:	09 95       	icall
	timer1.compoutmodeB(2);
    2a1e:	ce 53       	subi	r28, 0x3E	; 62
    2a20:	df 4f       	sbci	r29, 0xFF	; 255
    2a22:	e8 81       	ld	r30, Y
    2a24:	f9 81       	ldd	r31, Y+1	; 0x01
    2a26:	c2 5c       	subi	r28, 0xC2	; 194
    2a28:	d0 40       	sbci	r29, 0x00	; 0
    2a2a:	82 e0       	ldi	r24, 0x02	; 2
    2a2c:	09 95       	icall
	timer1.compareA(20000);
    2a2e:	ca 53       	subi	r28, 0x3A	; 58
    2a30:	df 4f       	sbci	r29, 0xFF	; 255
    2a32:	e8 81       	ld	r30, Y
    2a34:	f9 81       	ldd	r31, Y+1	; 0x01
    2a36:	c6 5c       	subi	r28, 0xC6	; 198
    2a38:	d0 40       	sbci	r29, 0x00	; 0
    2a3a:	80 e2       	ldi	r24, 0x20	; 32
    2a3c:	9e e4       	ldi	r25, 0x4E	; 78
    2a3e:	09 95       	icall
	timer1.start(8);
    2a40:	c4 53       	subi	r28, 0x34	; 52
    2a42:	df 4f       	sbci	r29, 0xFF	; 255
    2a44:	e8 81       	ld	r30, Y
    2a46:	f9 81       	ldd	r31, Y+1	; 0x01
    2a48:	cc 5c       	subi	r28, 0xCC	; 204
    2a4a:	d0 40       	sbci	r29, 0x00	; 0
    2a4c:	88 e0       	ldi	r24, 0x08	; 8
    2a4e:	90 e0       	ldi	r25, 0x00	; 0
    2a50:	09 95       	icall
	rtc.SetClkOut(1, 2); // oscillate pin at 1 sec
    2a52:	e0 91 b0 04 	lds	r30, 0x04B0	; 0x8004b0 <rtc+0x8>
    2a56:	f0 91 b1 04 	lds	r31, 0x04B1	; 0x8004b1 <rtc+0x9>
    2a5a:	62 e0       	ldi	r22, 0x02	; 2
    2a5c:	81 e0       	ldi	r24, 0x01	; 1
    2a5e:	09 95       	icall
    2a60:	0f 90       	pop	r0
    2a62:	0f 90       	pop	r0
    2a64:	0f 90       	pop	r0
    2a66:	0f 90       	pop	r0
    2a68:	0f 90       	pop	r0
    2a6a:	0f 90       	pop	r0
	char mstr[6]="90"; // manual position vector
	char tstr[6]; // time vector
	char cal='0'; // Sub Menu for setting up date and time
	uint16_t set;
	ptr=str;
	uint16_t positionhour=12;
    2a6c:	ec e0       	ldi	r30, 0x0C	; 12
    2a6e:	f0 e0       	ldi	r31, 0x00	; 0
    2a70:	ce 5c       	subi	r28, 0xCE	; 206
    2a72:	de 4f       	sbci	r29, 0xFE	; 254
    2a74:	f9 83       	std	Y+1, r31	; 0x01
    2a76:	e8 83       	st	Y, r30
    2a78:	c2 53       	subi	r28, 0x32	; 50
    2a7a:	d1 40       	sbci	r29, 0x01	; 1
	char str[6]="0"; // analog vector
	int16_t mvalue=90; // manual position reading
	int16_t m_value; // manual positioning
	char mstr[6]="90"; // manual position vector
	char tstr[6]; // time vector
	char cal='0'; // Sub Menu for setting up date and time
    2a7c:	f0 e3       	ldi	r31, 0x30	; 48
    2a7e:	ca 5c       	subi	r28, 0xCA	; 202
    2a80:	de 4f       	sbci	r29, 0xFE	; 254
    2a82:	f8 83       	st	Y, r31
    2a84:	c6 53       	subi	r28, 0x36	; 54
    2a86:	d1 40       	sbci	r29, 0x01	; 1
	TIMER_COUNTER1 timer1 = TIMER_COUNTER1enable(9,0); // PWM Positioning
	rtc = PCF8563RTCenable(16); // RTC with I2C
	shift = HC595enable(&DDRG,&PORTG,2,0,1);
	uart = UART1enable(103,8,1,NONE);//UART 103 para 9600, 68 para 14400
	/******/
	char Menu='1'; // Main menu selector
    2a88:	21 e3       	ldi	r18, 0x31	; 49
    2a8a:	c4 5d       	subi	r28, 0xD4	; 212
    2a8c:	de 4f       	sbci	r29, 0xFE	; 254
    2a8e:	28 83       	st	Y, r18
    2a90:	cc 52       	subi	r28, 0x2C	; 44
    2a92:	d1 40       	sbci	r29, 0x01	; 1
    2a94:	06 c0       	rjmp	.+12     	; 0x2aa2 <main+0x2c6>
								}
								keypad.flush();
							}
						break;
						default:
							cal='0';
    2a96:	30 e3       	ldi	r19, 0x30	; 48
    2a98:	ca 5c       	subi	r28, 0xCA	; 202
    2a9a:	de 4f       	sbci	r29, 0xFE	; 254
    2a9c:	38 83       	st	Y, r19
    2a9e:	c6 53       	subi	r28, 0x36	; 54
    2aa0:	d1 40       	sbci	r29, 0x01	; 1
	rtc.SetClkOut(1, 2); // oscillate pin at 1 sec
	/**********/
	//TODO:: Please write your application code
	while(TRUE){
		/***PREAMBLE***/
		lcd0.reboot();
    2aa2:	ca 55       	subi	r28, 0x5A	; 90
    2aa4:	df 4f       	sbci	r29, 0xFF	; 255
    2aa6:	e8 81       	ld	r30, Y
    2aa8:	f9 81       	ldd	r31, Y+1	; 0x01
    2aaa:	c6 5a       	subi	r28, 0xA6	; 166
    2aac:	d0 40       	sbci	r29, 0x00	; 0
    2aae:	09 95       	icall
		keypad.read();
    2ab0:	c6 55       	subi	r28, 0x56	; 86
    2ab2:	df 4f       	sbci	r29, 0xFF	; 255
    2ab4:	e8 81       	ld	r30, Y
    2ab6:	f9 81       	ldd	r31, Y+1	; 0x01
    2ab8:	ca 5a       	subi	r28, 0xAA	; 170
    2aba:	d0 40       	sbci	r29, 0x00	; 0
    2abc:	09 95       	icall
		uartreceive=uart.read();
    2abe:	e0 91 cc 04 	lds	r30, 0x04CC	; 0x8004cc <uart+0x4>
    2ac2:	f0 91 cd 04 	lds	r31, 0x04CD	; 0x8004cd <uart+0x5>
    2ac6:	09 95       	icall
    2ac8:	90 93 42 02 	sts	0x0242, r25	; 0x800242 <uartreceive+0x1>
    2acc:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <uartreceive>
		/***Reading input***/
		lcd0.gotoxy(3,13);
    2ad0:	6d e0       	ldi	r22, 0x0D	; 13
    2ad2:	70 e0       	ldi	r23, 0x00	; 0
    2ad4:	83 e0       	ldi	r24, 0x03	; 3
    2ad6:	90 e0       	ldi	r25, 0x00	; 0
    2ad8:	f3 01       	movw	r30, r6
    2ada:	09 95       	icall
		lcd0.putch(':');
    2adc:	8a e3       	ldi	r24, 0x3A	; 58
    2ade:	f2 01       	movw	r30, r4
    2ae0:	09 95       	icall
		lcd0.string_size(keypad.get().printstring,6);
    2ae2:	f4 01       	movw	r30, r8
    2ae4:	09 95       	icall
    2ae6:	c2 57       	subi	r28, 0x72	; 114
    2ae8:	df 4f       	sbci	r29, 0xFF	; 255
    2aea:	38 83       	st	Y, r19
    2aec:	ce 58       	subi	r28, 0x8E	; 142
    2aee:	d0 40       	sbci	r29, 0x00	; 0
    2af0:	c1 57       	subi	r28, 0x71	; 113
    2af2:	df 4f       	sbci	r29, 0xFF	; 255
    2af4:	48 83       	st	Y, r20
    2af6:	cf 58       	subi	r28, 0x8F	; 143
    2af8:	d0 40       	sbci	r29, 0x00	; 0
    2afa:	66 e0       	ldi	r22, 0x06	; 6
    2afc:	c2 57       	subi	r28, 0x72	; 114
    2afe:	df 4f       	sbci	r29, 0xFF	; 255
    2b00:	88 81       	ld	r24, Y
    2b02:	99 81       	ldd	r25, Y+1	; 0x01
    2b04:	ce 58       	subi	r28, 0x8E	; 142
    2b06:	d0 40       	sbci	r29, 0x00	; 0
    2b08:	f1 01       	movw	r30, r2
    2b0a:	09 95       	icall
		/***ENTRY END***/
		switch(Menu){
    2b0c:	c4 5d       	subi	r28, 0xD4	; 212
    2b0e:	de 4f       	sbci	r29, 0xFE	; 254
    2b10:	f8 81       	ld	r31, Y
    2b12:	cc 52       	subi	r28, 0x2C	; 44
    2b14:	d1 40       	sbci	r29, 0x01	; 1
    2b16:	f2 33       	cpi	r31, 0x32	; 50
    2b18:	09 f4       	brne	.+2      	; 0x2b1c <main+0x340>
    2b1a:	e0 c1       	rjmp	.+960    	; 0x2edc <main+0x700>
    2b1c:	f3 33       	cpi	r31, 0x33	; 51
    2b1e:	09 f4       	brne	.+2      	; 0x2b22 <main+0x346>
    2b20:	e6 c2       	rjmp	.+1484   	; 0x30ee <main+0x912>
    2b22:	f1 33       	cpi	r31, 0x31	; 49
    2b24:	09 f0       	breq	.+2      	; 0x2b28 <main+0x34c>
    2b26:	a8 c6       	rjmp	.+3408   	; 0x3878 <main+0x109c>
			/***MENU 1***/
			case '1': // Main Program Menu
				if(!strcmp(keypad.get().string,"A")){Menu='2';keypad.flush();lcd0.clear();break;}
    2b28:	f4 01       	movw	r30, r8
    2b2a:	09 95       	icall
    2b2c:	c5 57       	subi	r28, 0x75	; 117
    2b2e:	df 4f       	sbci	r29, 0xFF	; 255
    2b30:	58 83       	st	Y, r21
    2b32:	cb 58       	subi	r28, 0x8B	; 139
    2b34:	d0 40       	sbci	r29, 0x00	; 0
    2b36:	c4 57       	subi	r28, 0x74	; 116
    2b38:	df 4f       	sbci	r29, 0xFF	; 255
    2b3a:	68 83       	st	Y, r22
    2b3c:	cc 58       	subi	r28, 0x8C	; 140
    2b3e:	d0 40       	sbci	r29, 0x00	; 0
    2b40:	64 e1       	ldi	r22, 0x14	; 20
    2b42:	71 e0       	ldi	r23, 0x01	; 1
    2b44:	c5 57       	subi	r28, 0x75	; 117
    2b46:	df 4f       	sbci	r29, 0xFF	; 255
    2b48:	88 81       	ld	r24, Y
    2b4a:	99 81       	ldd	r25, Y+1	; 0x01
    2b4c:	cb 58       	subi	r28, 0x8B	; 139
    2b4e:	d0 40       	sbci	r29, 0x00	; 0
    2b50:	0e 94 03 1e 	call	0x3c06	; 0x3c06 <strcmp>
    2b54:	89 2b       	or	r24, r25
    2b56:	a9 f4       	brne	.+42     	; 0x2b82 <main+0x3a6>
    2b58:	c2 5d       	subi	r28, 0xD2	; 210
    2b5a:	de 4f       	sbci	r29, 0xFE	; 254
    2b5c:	e8 81       	ld	r30, Y
    2b5e:	f9 81       	ldd	r31, Y+1	; 0x01
    2b60:	ce 52       	subi	r28, 0x2E	; 46
    2b62:	d1 40       	sbci	r29, 0x01	; 1
    2b64:	09 95       	icall
    2b66:	c0 5d       	subi	r28, 0xD0	; 208
    2b68:	de 4f       	sbci	r29, 0xFE	; 254
    2b6a:	e8 81       	ld	r30, Y
    2b6c:	f9 81       	ldd	r31, Y+1	; 0x01
    2b6e:	c0 53       	subi	r28, 0x30	; 48
    2b70:	d1 40       	sbci	r29, 0x01	; 1
    2b72:	09 95       	icall
    2b74:	f2 e3       	ldi	r31, 0x32	; 50
    2b76:	c4 5d       	subi	r28, 0xD4	; 212
    2b78:	de 4f       	sbci	r29, 0xFE	; 254
    2b7a:	f8 83       	st	Y, r31
    2b7c:	cc 52       	subi	r28, 0x2C	; 44
    2b7e:	d1 40       	sbci	r29, 0x01	; 1
    2b80:	90 cf       	rjmp	.-224    	; 0x2aa2 <main+0x2c6>
				if(!strcmp(keypad.get().string,"B")){Menu='3';keypad.flush();lcd0.clear();break;}
    2b82:	f4 01       	movw	r30, r8
    2b84:	09 95       	icall
    2b86:	ca 57       	subi	r28, 0x7A	; 122
    2b88:	df 4f       	sbci	r29, 0xFF	; 255
    2b8a:	58 83       	st	Y, r21
    2b8c:	c6 58       	subi	r28, 0x86	; 134
    2b8e:	d0 40       	sbci	r29, 0x00	; 0
    2b90:	c9 57       	subi	r28, 0x79	; 121
    2b92:	df 4f       	sbci	r29, 0xFF	; 255
    2b94:	68 83       	st	Y, r22
    2b96:	c7 58       	subi	r28, 0x87	; 135
    2b98:	d0 40       	sbci	r29, 0x00	; 0
    2b9a:	66 e1       	ldi	r22, 0x16	; 22
    2b9c:	71 e0       	ldi	r23, 0x01	; 1
    2b9e:	ca 57       	subi	r28, 0x7A	; 122
    2ba0:	df 4f       	sbci	r29, 0xFF	; 255
    2ba2:	88 81       	ld	r24, Y
    2ba4:	99 81       	ldd	r25, Y+1	; 0x01
    2ba6:	c6 58       	subi	r28, 0x86	; 134
    2ba8:	d0 40       	sbci	r29, 0x00	; 0
    2baa:	0e 94 03 1e 	call	0x3c06	; 0x3c06 <strcmp>
    2bae:	89 2b       	or	r24, r25
    2bb0:	a9 f4       	brne	.+42     	; 0x2bdc <main+0x400>
    2bb2:	c2 5d       	subi	r28, 0xD2	; 210
    2bb4:	de 4f       	sbci	r29, 0xFE	; 254
    2bb6:	e8 81       	ld	r30, Y
    2bb8:	f9 81       	ldd	r31, Y+1	; 0x01
    2bba:	ce 52       	subi	r28, 0x2E	; 46
    2bbc:	d1 40       	sbci	r29, 0x01	; 1
    2bbe:	09 95       	icall
    2bc0:	c0 5d       	subi	r28, 0xD0	; 208
    2bc2:	de 4f       	sbci	r29, 0xFE	; 254
    2bc4:	e8 81       	ld	r30, Y
    2bc6:	f9 81       	ldd	r31, Y+1	; 0x01
    2bc8:	c0 53       	subi	r28, 0x30	; 48
    2bca:	d1 40       	sbci	r29, 0x01	; 1
    2bcc:	09 95       	icall
    2bce:	f3 e3       	ldi	r31, 0x33	; 51
    2bd0:	c4 5d       	subi	r28, 0xD4	; 212
    2bd2:	de 4f       	sbci	r29, 0xFE	; 254
    2bd4:	f8 83       	st	Y, r31
    2bd6:	cc 52       	subi	r28, 0x2C	; 44
    2bd8:	d1 40       	sbci	r29, 0x01	; 1
    2bda:	63 cf       	rjmp	.-314    	; 0x2aa2 <main+0x2c6>
					/***RTC***/
					tm=rtc.GetTime();
    2bdc:	08 ea       	ldi	r16, 0xA8	; 168
    2bde:	14 e0       	ldi	r17, 0x04	; 4
    2be0:	d8 01       	movw	r26, r16
    2be2:	54 96       	adiw	r26, 0x14	; 20
    2be4:	ed 91       	ld	r30, X+
    2be6:	fc 91       	ld	r31, X
    2be8:	55 97       	sbiw	r26, 0x15	; 21
    2bea:	09 95       	icall
    2bec:	60 93 a5 04 	sts	0x04A5, r22	; 0x8004a5 <tm>
    2bf0:	70 93 a6 04 	sts	0x04A6, r23	; 0x8004a6 <tm+0x1>
    2bf4:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <tm+0x2>
					dt=rtc.GetDate();
    2bf8:	d8 01       	movw	r26, r16
    2bfa:	56 96       	adiw	r26, 0x16	; 22
    2bfc:	ed 91       	ld	r30, X+
    2bfe:	fc 91       	ld	r31, X
    2c00:	57 97       	sbiw	r26, 0x17	; 23
    2c02:	09 95       	icall
    2c04:	60 93 c4 04 	sts	0x04C4, r22	; 0x8004c4 <dt>
    2c08:	70 93 c5 04 	sts	0x04C5, r23	; 0x8004c5 <dt+0x1>
    2c0c:	80 93 c6 04 	sts	0x04C6, r24	; 0x8004c6 <dt+0x2>
    2c10:	90 93 c7 04 	sts	0x04C7, r25	; 0x8004c7 <dt+0x3>
					/***Reading analog***/
					adcvalue=analog.read(0);
    2c14:	80 e0       	ldi	r24, 0x00	; 0
    2c16:	90 e0       	ldi	r25, 0x00	; 0
    2c18:	c7 5c       	subi	r28, 0xC7	; 199
    2c1a:	de 4f       	sbci	r29, 0xFE	; 254
    2c1c:	e8 81       	ld	r30, Y
    2c1e:	f9 81       	ldd	r31, Y+1	; 0x01
    2c20:	c9 53       	subi	r28, 0x39	; 57
    2c22:	d1 40       	sbci	r29, 0x01	; 1
    2c24:	09 95       	icall
    2c26:	c4 5d       	subi	r28, 0xD4	; 212
    2c28:	de 4f       	sbci	r29, 0xFE	; 254
    2c2a:	99 83       	std	Y+1, r25	; 0x01
    2c2c:	88 83       	st	Y, r24
    2c2e:	cc 52       	subi	r28, 0x2C	; 44
    2c30:	d1 40       	sbci	r29, 0x01	; 1
					/***Set Position***/
					if(positionhour>5 && positionhour<21)
    2c32:	ce 5c       	subi	r28, 0xCE	; 206
    2c34:	de 4f       	sbci	r29, 0xFE	; 254
    2c36:	88 81       	ld	r24, Y
    2c38:	99 81       	ldd	r25, Y+1	; 0x01
    2c3a:	c2 53       	subi	r28, 0x32	; 50
    2c3c:	d1 40       	sbci	r29, 0x01	; 1
    2c3e:	06 97       	sbiw	r24, 0x06	; 6
    2c40:	0f 97       	sbiw	r24, 0x0f	; 15
    2c42:	08 f0       	brcs	.+2      	; 0x2c46 <main+0x46a>
    2c44:	67 c0       	rjmp	.+206    	; 0x2d14 <main+0x538>
						timer1.compareB(function.trimmer(positionhour,2,23,Min,Max)+function.trimmer(adcvalue,0,1023,-200,200));
    2c46:	ce 5c       	subi	r28, 0xCE	; 206
    2c48:	de 4f       	sbci	r29, 0xFE	; 254
    2c4a:	28 81       	ld	r18, Y
    2c4c:	39 81       	ldd	r19, Y+1	; 0x01
    2c4e:	c2 53       	subi	r28, 0x32	; 50
    2c50:	d1 40       	sbci	r29, 0x01	; 1
    2c52:	b9 01       	movw	r22, r18
    2c54:	80 e0       	ldi	r24, 0x00	; 0
    2c56:	90 e0       	ldi	r25, 0x00	; 0
    2c58:	1f 92       	push	r1
    2c5a:	1f 92       	push	r1
    2c5c:	29 e0       	ldi	r18, 0x09	; 9
    2c5e:	2f 93       	push	r18
    2c60:	2e e2       	ldi	r18, 0x2E	; 46
    2c62:	2f 93       	push	r18
    2c64:	e0 91 99 04 	lds	r30, 0x0499	; 0x800499 <function+0x3e>
    2c68:	f0 91 9a 04 	lds	r31, 0x049A	; 0x80049a <function+0x3f>
    2c6c:	0f 2e       	mov	r0, r31
    2c6e:	f4 ef       	ldi	r31, 0xF4	; 244
    2c70:	af 2e       	mov	r10, r31
    2c72:	bb 24       	eor	r11, r11
    2c74:	b3 94       	inc	r11
    2c76:	c1 2c       	mov	r12, r1
    2c78:	d1 2c       	mov	r13, r1
    2c7a:	f0 2d       	mov	r31, r0
    2c7c:	17 e1       	ldi	r17, 0x17	; 23
    2c7e:	e1 2e       	mov	r14, r17
    2c80:	f1 2c       	mov	r15, r1
    2c82:	00 e0       	ldi	r16, 0x00	; 0
    2c84:	10 e0       	ldi	r17, 0x00	; 0
    2c86:	22 e0       	ldi	r18, 0x02	; 2
    2c88:	30 e0       	ldi	r19, 0x00	; 0
    2c8a:	40 e0       	ldi	r20, 0x00	; 0
    2c8c:	50 e0       	ldi	r21, 0x00	; 0
    2c8e:	09 95       	icall
    2c90:	ce 5c       	subi	r28, 0xCE	; 206
    2c92:	de 4f       	sbci	r29, 0xFE	; 254
    2c94:	68 83       	st	Y, r22
    2c96:	79 83       	std	Y+1, r23	; 0x01
    2c98:	8a 83       	std	Y+2, r24	; 0x02
    2c9a:	9b 83       	std	Y+3, r25	; 0x03
    2c9c:	c2 53       	subi	r28, 0x32	; 50
    2c9e:	d1 40       	sbci	r29, 0x01	; 1
    2ca0:	c4 5d       	subi	r28, 0xD4	; 212
    2ca2:	de 4f       	sbci	r29, 0xFE	; 254
    2ca4:	e8 81       	ld	r30, Y
    2ca6:	f9 81       	ldd	r31, Y+1	; 0x01
    2ca8:	cc 52       	subi	r28, 0x2C	; 44
    2caa:	d1 40       	sbci	r29, 0x01	; 1
    2cac:	cf 01       	movw	r24, r30
    2cae:	a0 e0       	ldi	r26, 0x00	; 0
    2cb0:	b0 e0       	ldi	r27, 0x00	; 0
    2cb2:	1f 92       	push	r1
    2cb4:	1f 92       	push	r1
    2cb6:	1f 92       	push	r1
    2cb8:	28 ec       	ldi	r18, 0xC8	; 200
    2cba:	2f 93       	push	r18
    2cbc:	e0 91 99 04 	lds	r30, 0x0499	; 0x800499 <function+0x3e>
    2cc0:	f0 91 9a 04 	lds	r31, 0x049A	; 0x80049a <function+0x3f>
    2cc4:	0f 2e       	mov	r0, r31
    2cc6:	f8 e3       	ldi	r31, 0x38	; 56
    2cc8:	af 2e       	mov	r10, r31
    2cca:	bb 24       	eor	r11, r11
    2ccc:	ba 94       	dec	r11
    2cce:	cb 2c       	mov	r12, r11
    2cd0:	db 2c       	mov	r13, r11
    2cd2:	f0 2d       	mov	r31, r0
    2cd4:	ee 24       	eor	r14, r14
    2cd6:	ea 94       	dec	r14
    2cd8:	13 e0       	ldi	r17, 0x03	; 3
    2cda:	f1 2e       	mov	r15, r17
    2cdc:	00 e0       	ldi	r16, 0x00	; 0
    2cde:	10 e0       	ldi	r17, 0x00	; 0
    2ce0:	20 e0       	ldi	r18, 0x00	; 0
    2ce2:	30 e0       	ldi	r19, 0x00	; 0
    2ce4:	a9 01       	movw	r20, r18
    2ce6:	bc 01       	movw	r22, r24
    2ce8:	cd 01       	movw	r24, r26
    2cea:	09 95       	icall
    2cec:	ce 5c       	subi	r28, 0xCE	; 206
    2cee:	de 4f       	sbci	r29, 0xFE	; 254
    2cf0:	88 81       	ld	r24, Y
    2cf2:	99 81       	ldd	r25, Y+1	; 0x01
    2cf4:	c2 53       	subi	r28, 0x32	; 50
    2cf6:	d1 40       	sbci	r29, 0x01	; 1
    2cf8:	86 0f       	add	r24, r22
    2cfa:	97 1f       	adc	r25, r23
    2cfc:	c5 5c       	subi	r28, 0xC5	; 197
    2cfe:	de 4f       	sbci	r29, 0xFE	; 254
    2d00:	e8 81       	ld	r30, Y
    2d02:	f9 81       	ldd	r31, Y+1	; 0x01
    2d04:	cb 53       	subi	r28, 0x3B	; 59
    2d06:	d1 40       	sbci	r29, 0x01	; 1
    2d08:	09 95       	icall
    2d0a:	0f b6       	in	r0, 0x3f	; 63
    2d0c:	f8 94       	cli
    2d0e:	de bf       	out	0x3e, r29	; 62
    2d10:	0f be       	out	0x3f, r0	; 63
    2d12:	cd bf       	out	0x3d, r28	; 61
					lcd0.gotoxy(0,0);
    2d14:	60 e0       	ldi	r22, 0x00	; 0
    2d16:	70 e0       	ldi	r23, 0x00	; 0
    2d18:	80 e0       	ldi	r24, 0x00	; 0
    2d1a:	90 e0       	ldi	r25, 0x00	; 0
    2d1c:	f3 01       	movw	r30, r6
    2d1e:	09 95       	icall
					lcd0.string_size("Sense: ",7);
    2d20:	67 e0       	ldi	r22, 0x07	; 7
    2d22:	88 e1       	ldi	r24, 0x18	; 24
    2d24:	91 e0       	ldi	r25, 0x01	; 1
    2d26:	f1 01       	movw	r30, r2
    2d28:	09 95       	icall
					//lcd0.hspace(1);
					strcpy(str,function.i16toa(adcvalue));
    2d2a:	0f 2e       	mov	r0, r31
    2d2c:	fb e5       	ldi	r31, 0x5B	; 91
    2d2e:	cf 2e       	mov	r12, r31
    2d30:	f4 e0       	ldi	r31, 0x04	; 4
    2d32:	df 2e       	mov	r13, r31
    2d34:	f0 2d       	mov	r31, r0
    2d36:	d6 01       	movw	r26, r12
    2d38:	90 96       	adiw	r26, 0x20	; 32
    2d3a:	ed 91       	ld	r30, X+
    2d3c:	fc 91       	ld	r31, X
    2d3e:	91 97       	sbiw	r26, 0x21	; 33
    2d40:	c4 5d       	subi	r28, 0xD4	; 212
    2d42:	de 4f       	sbci	r29, 0xFE	; 254
    2d44:	88 81       	ld	r24, Y
    2d46:	99 81       	ldd	r25, Y+1	; 0x01
    2d48:	cc 52       	subi	r28, 0x2C	; 44
    2d4a:	d1 40       	sbci	r29, 0x01	; 1
    2d4c:	09 95       	icall
    2d4e:	bc 01       	movw	r22, r24
    2d50:	ce 01       	movw	r24, r28
    2d52:	80 53       	subi	r24, 0x30	; 48
    2d54:	9f 4f       	sbci	r25, 0xFF	; 255
    2d56:	60 d7       	rcall	.+3776   	; 0x3c18 <strcpy>
					lcd0.string_size(str,4);
    2d58:	64 e0       	ldi	r22, 0x04	; 4
    2d5a:	ce 01       	movw	r24, r28
    2d5c:	80 53       	subi	r24, 0x30	; 48
    2d5e:	9f 4f       	sbci	r25, 0xFF	; 255
    2d60:	f1 01       	movw	r30, r2
    2d62:	09 95       	icall
					lcd0.gotoxy(0,12);
    2d64:	6c e0       	ldi	r22, 0x0C	; 12
    2d66:	70 e0       	ldi	r23, 0x00	; 0
    2d68:	80 e0       	ldi	r24, 0x00	; 0
    2d6a:	90 e0       	ldi	r25, 0x00	; 0
    2d6c:	f3 01       	movw	r30, r6
    2d6e:	09 95       	icall
					lcd0.string_size(function.ui16toa(rtc.bcd2dec(dt.days)),2);
    2d70:	d6 01       	movw	r26, r12
    2d72:	92 96       	adiw	r26, 0x22	; 34
    2d74:	ed 90       	ld	r14, X+
    2d76:	fc 90       	ld	r15, X
    2d78:	93 97       	sbiw	r26, 0x23	; 35
    2d7a:	04 ec       	ldi	r16, 0xC4	; 196
    2d7c:	14 e0       	ldi	r17, 0x04	; 4
    2d7e:	0f 2e       	mov	r0, r31
    2d80:	f8 ea       	ldi	r31, 0xA8	; 168
    2d82:	af 2e       	mov	r10, r31
    2d84:	f4 e0       	ldi	r31, 0x04	; 4
    2d86:	bf 2e       	mov	r11, r31
    2d88:	f0 2d       	mov	r31, r0
    2d8a:	d5 01       	movw	r26, r10
    2d8c:	58 96       	adiw	r26, 0x18	; 24
    2d8e:	ed 91       	ld	r30, X+
    2d90:	fc 91       	ld	r31, X
    2d92:	59 97       	sbiw	r26, 0x19	; 25
    2d94:	d8 01       	movw	r26, r16
    2d96:	13 96       	adiw	r26, 0x03	; 3
    2d98:	8c 91       	ld	r24, X
    2d9a:	09 95       	icall
    2d9c:	90 e0       	ldi	r25, 0x00	; 0
    2d9e:	f7 01       	movw	r30, r14
    2da0:	09 95       	icall
    2da2:	62 e0       	ldi	r22, 0x02	; 2
    2da4:	f1 01       	movw	r30, r2
    2da6:	09 95       	icall
					lcd0.putch(':');
    2da8:	8a e3       	ldi	r24, 0x3A	; 58
    2daa:	f2 01       	movw	r30, r4
    2dac:	09 95       	icall
					lcd0.string_size(function.ui16toa(rtc.bcd2dec(dt.century_months)),2);
    2dae:	d6 01       	movw	r26, r12
    2db0:	92 96       	adiw	r26, 0x22	; 34
    2db2:	ed 90       	ld	r14, X+
    2db4:	fc 90       	ld	r15, X
    2db6:	93 97       	sbiw	r26, 0x23	; 35
    2db8:	d5 01       	movw	r26, r10
    2dba:	58 96       	adiw	r26, 0x18	; 24
    2dbc:	ed 91       	ld	r30, X+
    2dbe:	fc 91       	ld	r31, X
    2dc0:	59 97       	sbiw	r26, 0x19	; 25
    2dc2:	d8 01       	movw	r26, r16
    2dc4:	11 96       	adiw	r26, 0x01	; 1
    2dc6:	8c 91       	ld	r24, X
    2dc8:	09 95       	icall
    2dca:	90 e0       	ldi	r25, 0x00	; 0
    2dcc:	f7 01       	movw	r30, r14
    2dce:	09 95       	icall
    2dd0:	62 e0       	ldi	r22, 0x02	; 2
    2dd2:	f1 01       	movw	r30, r2
    2dd4:	09 95       	icall
					lcd0.putch(':');
    2dd6:	8a e3       	ldi	r24, 0x3A	; 58
    2dd8:	f2 01       	movw	r30, r4
    2dda:	09 95       	icall
					lcd0.string_size(function.ui16toa(rtc.bcd2dec(dt.years)),2);
    2ddc:	d6 01       	movw	r26, r12
    2dde:	92 96       	adiw	r26, 0x22	; 34
    2de0:	ed 90       	ld	r14, X+
    2de2:	fc 90       	ld	r15, X
    2de4:	93 97       	sbiw	r26, 0x23	; 35
    2de6:	d5 01       	movw	r26, r10
    2de8:	58 96       	adiw	r26, 0x18	; 24
    2dea:	ed 91       	ld	r30, X+
    2dec:	fc 91       	ld	r31, X
    2dee:	59 97       	sbiw	r26, 0x19	; 25
    2df0:	d8 01       	movw	r26, r16
    2df2:	8c 91       	ld	r24, X
    2df4:	09 95       	icall
    2df6:	90 e0       	ldi	r25, 0x00	; 0
    2df8:	f7 01       	movw	r30, r14
    2dfa:	09 95       	icall
    2dfc:	62 e0       	ldi	r22, 0x02	; 2
    2dfe:	f1 01       	movw	r30, r2
    2e00:	09 95       	icall
					lcd0.gotoxy(1,12);
    2e02:	6c e0       	ldi	r22, 0x0C	; 12
    2e04:	70 e0       	ldi	r23, 0x00	; 0
    2e06:	81 e0       	ldi	r24, 0x01	; 1
    2e08:	90 e0       	ldi	r25, 0x00	; 0
    2e0a:	f3 01       	movw	r30, r6
    2e0c:	09 95       	icall
					/***set hour for positioning***/
					positionhour=rtc.bcd2dec(tm.hours);
    2e0e:	0f 2e       	mov	r0, r31
    2e10:	f5 ea       	ldi	r31, 0xA5	; 165
    2e12:	ef 2e       	mov	r14, r31
    2e14:	f4 e0       	ldi	r31, 0x04	; 4
    2e16:	ff 2e       	mov	r15, r31
    2e18:	f0 2d       	mov	r31, r0
    2e1a:	d5 01       	movw	r26, r10
    2e1c:	58 96       	adiw	r26, 0x18	; 24
    2e1e:	ed 91       	ld	r30, X+
    2e20:	fc 91       	ld	r31, X
    2e22:	59 97       	sbiw	r26, 0x19	; 25
    2e24:	d7 01       	movw	r26, r14
    2e26:	8c 91       	ld	r24, X
    2e28:	09 95       	icall
    2e2a:	e8 2f       	mov	r30, r24
    2e2c:	f0 e0       	ldi	r31, 0x00	; 0
    2e2e:	ce 5c       	subi	r28, 0xCE	; 206
    2e30:	de 4f       	sbci	r29, 0xFE	; 254
    2e32:	f9 83       	std	Y+1, r31	; 0x01
    2e34:	e8 83       	st	Y, r30
    2e36:	c2 53       	subi	r28, 0x32	; 50
    2e38:	d1 40       	sbci	r29, 0x01	; 1
					lcd0.string_size(function.ui16toa(positionhour),2);
    2e3a:	d6 01       	movw	r26, r12
    2e3c:	92 96       	adiw	r26, 0x22	; 34
    2e3e:	ed 91       	ld	r30, X+
    2e40:	fc 91       	ld	r31, X
    2e42:	93 97       	sbiw	r26, 0x23	; 35
    2e44:	ce 5c       	subi	r28, 0xCE	; 206
    2e46:	de 4f       	sbci	r29, 0xFE	; 254
    2e48:	88 81       	ld	r24, Y
    2e4a:	99 81       	ldd	r25, Y+1	; 0x01
    2e4c:	c2 53       	subi	r28, 0x32	; 50
    2e4e:	d1 40       	sbci	r29, 0x01	; 1
    2e50:	09 95       	icall
    2e52:	62 e0       	ldi	r22, 0x02	; 2
    2e54:	f1 01       	movw	r30, r2
    2e56:	09 95       	icall
					lcd0.putch(':');
    2e58:	8a e3       	ldi	r24, 0x3A	; 58
    2e5a:	f2 01       	movw	r30, r4
    2e5c:	09 95       	icall
					lcd0.string_size(function.ui16toa(rtc.bcd2dec(tm.minutes)),2);
    2e5e:	d6 01       	movw	r26, r12
    2e60:	92 96       	adiw	r26, 0x22	; 34
    2e62:	0d 91       	ld	r16, X+
    2e64:	1c 91       	ld	r17, X
    2e66:	93 97       	sbiw	r26, 0x23	; 35
    2e68:	d5 01       	movw	r26, r10
    2e6a:	58 96       	adiw	r26, 0x18	; 24
    2e6c:	ed 91       	ld	r30, X+
    2e6e:	fc 91       	ld	r31, X
    2e70:	59 97       	sbiw	r26, 0x19	; 25
    2e72:	d7 01       	movw	r26, r14
    2e74:	11 96       	adiw	r26, 0x01	; 1
    2e76:	8c 91       	ld	r24, X
    2e78:	09 95       	icall
    2e7a:	90 e0       	ldi	r25, 0x00	; 0
    2e7c:	f8 01       	movw	r30, r16
    2e7e:	09 95       	icall
    2e80:	62 e0       	ldi	r22, 0x02	; 2
    2e82:	f1 01       	movw	r30, r2
    2e84:	09 95       	icall
					lcd0.putch(':');
    2e86:	8a e3       	ldi	r24, 0x3A	; 58
    2e88:	f2 01       	movw	r30, r4
    2e8a:	09 95       	icall
					lcd0.string_size(function.ui16toa(rtc.bcd2dec(tm.VL_seconds)),2);
    2e8c:	d6 01       	movw	r26, r12
    2e8e:	92 96       	adiw	r26, 0x22	; 34
    2e90:	0d 91       	ld	r16, X+
    2e92:	1c 91       	ld	r17, X
    2e94:	93 97       	sbiw	r26, 0x23	; 35
    2e96:	d5 01       	movw	r26, r10
    2e98:	58 96       	adiw	r26, 0x18	; 24
    2e9a:	ed 91       	ld	r30, X+
    2e9c:	fc 91       	ld	r31, X
    2e9e:	59 97       	sbiw	r26, 0x19	; 25
    2ea0:	d7 01       	movw	r26, r14
    2ea2:	12 96       	adiw	r26, 0x02	; 2
    2ea4:	8c 91       	ld	r24, X
    2ea6:	09 95       	icall
    2ea8:	90 e0       	ldi	r25, 0x00	; 0
    2eaa:	f8 01       	movw	r30, r16
    2eac:	09 95       	icall
    2eae:	62 e0       	ldi	r22, 0x02	; 2
    2eb0:	f1 01       	movw	r30, r2
    2eb2:	09 95       	icall
					/***Message from uart***/
					lcd0.gotoxy(2,0);
    2eb4:	60 e0       	ldi	r22, 0x00	; 0
    2eb6:	70 e0       	ldi	r23, 0x00	; 0
    2eb8:	82 e0       	ldi	r24, 0x02	; 2
    2eba:	90 e0       	ldi	r25, 0x00	; 0
    2ebc:	f3 01       	movw	r30, r6
    2ebe:	09 95       	icall
					lcd0.string_size(uartreceive,20);
    2ec0:	64 e1       	ldi	r22, 0x14	; 20
    2ec2:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <uartreceive>
    2ec6:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <uartreceive+0x1>
    2eca:	f1 01       	movw	r30, r2
    2ecc:	09 95       	icall
					//if(!strcmp(uartreceive,"position\r")){
						//uart.putc('>');uart.puts("analog Reading: ");uart.puts(ptr);uart.puts("\r\n");
						//uart.Txflush();
					//}
				break;
    2ece:	f1 e3       	ldi	r31, 0x31	; 49
    2ed0:	c4 5d       	subi	r28, 0xD4	; 212
    2ed2:	de 4f       	sbci	r29, 0xFE	; 254
    2ed4:	f8 83       	st	Y, r31
    2ed6:	cc 52       	subi	r28, 0x2C	; 44
    2ed8:	d1 40       	sbci	r29, 0x01	; 1
    2eda:	e3 cd       	rjmp	.-1082   	; 0x2aa2 <main+0x2c6>
			/***MENU 2***/
			case '2': // Manual position override 
				if(!strcmp(keypad.get().string,"A")){Menu='3';keypad.flush();lcd0.clear();break;}
    2edc:	f4 01       	movw	r30, r8
    2ede:	09 95       	icall
    2ee0:	cf 57       	subi	r28, 0x7F	; 127
    2ee2:	df 4f       	sbci	r29, 0xFF	; 255
    2ee4:	58 83       	st	Y, r21
    2ee6:	c1 58       	subi	r28, 0x81	; 129
    2ee8:	d0 40       	sbci	r29, 0x00	; 0
    2eea:	ce 57       	subi	r28, 0x7E	; 126
    2eec:	df 4f       	sbci	r29, 0xFF	; 255
    2eee:	68 83       	st	Y, r22
    2ef0:	c2 58       	subi	r28, 0x82	; 130
    2ef2:	d0 40       	sbci	r29, 0x00	; 0
    2ef4:	64 e1       	ldi	r22, 0x14	; 20
    2ef6:	71 e0       	ldi	r23, 0x01	; 1
    2ef8:	cf 57       	subi	r28, 0x7F	; 127
    2efa:	df 4f       	sbci	r29, 0xFF	; 255
    2efc:	88 81       	ld	r24, Y
    2efe:	99 81       	ldd	r25, Y+1	; 0x01
    2f00:	c1 58       	subi	r28, 0x81	; 129
    2f02:	d0 40       	sbci	r29, 0x00	; 0
    2f04:	80 d6       	rcall	.+3328   	; 0x3c06 <strcmp>
    2f06:	89 2b       	or	r24, r25
    2f08:	a9 f4       	brne	.+42     	; 0x2f34 <main+0x758>
    2f0a:	c2 5d       	subi	r28, 0xD2	; 210
    2f0c:	de 4f       	sbci	r29, 0xFE	; 254
    2f0e:	e8 81       	ld	r30, Y
    2f10:	f9 81       	ldd	r31, Y+1	; 0x01
    2f12:	ce 52       	subi	r28, 0x2E	; 46
    2f14:	d1 40       	sbci	r29, 0x01	; 1
    2f16:	09 95       	icall
    2f18:	c0 5d       	subi	r28, 0xD0	; 208
    2f1a:	de 4f       	sbci	r29, 0xFE	; 254
    2f1c:	e8 81       	ld	r30, Y
    2f1e:	f9 81       	ldd	r31, Y+1	; 0x01
    2f20:	c0 53       	subi	r28, 0x30	; 48
    2f22:	d1 40       	sbci	r29, 0x01	; 1
    2f24:	09 95       	icall
    2f26:	f3 e3       	ldi	r31, 0x33	; 51
    2f28:	c4 5d       	subi	r28, 0xD4	; 212
    2f2a:	de 4f       	sbci	r29, 0xFE	; 254
    2f2c:	f8 83       	st	Y, r31
    2f2e:	cc 52       	subi	r28, 0x2C	; 44
    2f30:	d1 40       	sbci	r29, 0x01	; 1
    2f32:	b7 cd       	rjmp	.-1170   	; 0x2aa2 <main+0x2c6>
				if(!strcmp(keypad.get().string,"B")){Menu='1';keypad.flush();lcd0.clear();break;}
    2f34:	f4 01       	movw	r30, r8
    2f36:	09 95       	icall
    2f38:	ed 96       	adiw	r28, 0x3d	; 61
    2f3a:	5f af       	std	Y+63, r21	; 0x3f
    2f3c:	ed 97       	sbiw	r28, 0x3d	; 61
    2f3e:	ee 96       	adiw	r28, 0x3e	; 62
    2f40:	6f af       	std	Y+63, r22	; 0x3f
    2f42:	ee 97       	sbiw	r28, 0x3e	; 62
    2f44:	66 e1       	ldi	r22, 0x16	; 22
    2f46:	71 e0       	ldi	r23, 0x01	; 1
    2f48:	ee 96       	adiw	r28, 0x3e	; 62
    2f4a:	8e ad       	ldd	r24, Y+62	; 0x3e
    2f4c:	9f ad       	ldd	r25, Y+63	; 0x3f
    2f4e:	ee 97       	sbiw	r28, 0x3e	; 62
    2f50:	5a d6       	rcall	.+3252   	; 0x3c06 <strcmp>
    2f52:	89 2b       	or	r24, r25
    2f54:	a9 f4       	brne	.+42     	; 0x2f80 <main+0x7a4>
    2f56:	c2 5d       	subi	r28, 0xD2	; 210
    2f58:	de 4f       	sbci	r29, 0xFE	; 254
    2f5a:	e8 81       	ld	r30, Y
    2f5c:	f9 81       	ldd	r31, Y+1	; 0x01
    2f5e:	ce 52       	subi	r28, 0x2E	; 46
    2f60:	d1 40       	sbci	r29, 0x01	; 1
    2f62:	09 95       	icall
    2f64:	c0 5d       	subi	r28, 0xD0	; 208
    2f66:	de 4f       	sbci	r29, 0xFE	; 254
    2f68:	e8 81       	ld	r30, Y
    2f6a:	f9 81       	ldd	r31, Y+1	; 0x01
    2f6c:	c0 53       	subi	r28, 0x30	; 48
    2f6e:	d1 40       	sbci	r29, 0x01	; 1
    2f70:	09 95       	icall
    2f72:	f1 e3       	ldi	r31, 0x31	; 49
    2f74:	c4 5d       	subi	r28, 0xD4	; 212
    2f76:	de 4f       	sbci	r29, 0xFE	; 254
    2f78:	f8 83       	st	Y, r31
    2f7a:	cc 52       	subi	r28, 0x2C	; 44
    2f7c:	d1 40       	sbci	r29, 0x01	; 1
    2f7e:	91 cd       	rjmp	.-1246   	; 0x2aa2 <main+0x2c6>
				if(!strcmp(keypad.get().string,"C")){Menu='1';keypad.flush();lcd0.clear();uart.puts("Manual exit\r\n");break;}
    2f80:	f4 01       	movw	r30, r8
    2f82:	09 95       	icall
    2f84:	e8 96       	adiw	r28, 0x38	; 56
    2f86:	5f af       	std	Y+63, r21	; 0x3f
    2f88:	e8 97       	sbiw	r28, 0x38	; 56
    2f8a:	e9 96       	adiw	r28, 0x39	; 57
    2f8c:	6f af       	std	Y+63, r22	; 0x3f
    2f8e:	e9 97       	sbiw	r28, 0x39	; 57
    2f90:	60 e2       	ldi	r22, 0x20	; 32
    2f92:	71 e0       	ldi	r23, 0x01	; 1
    2f94:	e9 96       	adiw	r28, 0x39	; 57
    2f96:	8e ad       	ldd	r24, Y+62	; 0x3e
    2f98:	9f ad       	ldd	r25, Y+63	; 0x3f
    2f9a:	e9 97       	sbiw	r28, 0x39	; 57
    2f9c:	34 d6       	rcall	.+3176   	; 0x3c06 <strcmp>
    2f9e:	89 2b       	or	r24, r25
    2fa0:	e1 f4       	brne	.+56     	; 0x2fda <main+0x7fe>
    2fa2:	c2 5d       	subi	r28, 0xD2	; 210
    2fa4:	de 4f       	sbci	r29, 0xFE	; 254
    2fa6:	e8 81       	ld	r30, Y
    2fa8:	f9 81       	ldd	r31, Y+1	; 0x01
    2faa:	ce 52       	subi	r28, 0x2E	; 46
    2fac:	d1 40       	sbci	r29, 0x01	; 1
    2fae:	09 95       	icall
    2fb0:	c0 5d       	subi	r28, 0xD0	; 208
    2fb2:	de 4f       	sbci	r29, 0xFE	; 254
    2fb4:	e8 81       	ld	r30, Y
    2fb6:	f9 81       	ldd	r31, Y+1	; 0x01
    2fb8:	c0 53       	subi	r28, 0x30	; 48
    2fba:	d1 40       	sbci	r29, 0x01	; 1
    2fbc:	09 95       	icall
    2fbe:	e0 91 d2 04 	lds	r30, 0x04D2	; 0x8004d2 <uart+0xa>
    2fc2:	f0 91 d3 04 	lds	r31, 0x04D3	; 0x8004d3 <uart+0xb>
    2fc6:	82 e2       	ldi	r24, 0x22	; 34
    2fc8:	91 e0       	ldi	r25, 0x01	; 1
    2fca:	09 95       	icall
    2fcc:	f1 e3       	ldi	r31, 0x31	; 49
    2fce:	c4 5d       	subi	r28, 0xD4	; 212
    2fd0:	de 4f       	sbci	r29, 0xFE	; 254
    2fd2:	f8 83       	st	Y, r31
    2fd4:	cc 52       	subi	r28, 0x2C	; 44
    2fd6:	d1 40       	sbci	r29, 0x01	; 1
    2fd8:	64 cd       	rjmp	.-1336   	; 0x2aa2 <main+0x2c6>
					lcd0.gotoxy(0,0);
    2fda:	60 e0       	ldi	r22, 0x00	; 0
    2fdc:	70 e0       	ldi	r23, 0x00	; 0
    2fde:	80 e0       	ldi	r24, 0x00	; 0
    2fe0:	90 e0       	ldi	r25, 0x00	; 0
    2fe2:	f3 01       	movw	r30, r6
    2fe4:	09 95       	icall
					lcd0.string_size("Manual: ",8);
    2fe6:	68 e0       	ldi	r22, 0x08	; 8
    2fe8:	80 e3       	ldi	r24, 0x30	; 48
    2fea:	91 e0       	ldi	r25, 0x01	; 1
    2fec:	f1 01       	movw	r30, r2
    2fee:	09 95       	icall
					lcd0.string_size(mstr,3);
    2ff0:	63 e0       	ldi	r22, 0x03	; 3
    2ff2:	ce 01       	movw	r24, r28
    2ff4:	8a 52       	subi	r24, 0x2A	; 42
    2ff6:	9f 4f       	sbci	r25, 0xFF	; 255
    2ff8:	f1 01       	movw	r30, r2
    2ffa:	09 95       	icall
					lcd0.gotoxy(1,0);
    2ffc:	60 e0       	ldi	r22, 0x00	; 0
    2ffe:	70 e0       	ldi	r23, 0x00	; 0
    3000:	81 e0       	ldi	r24, 0x01	; 1
    3002:	90 e0       	ldi	r25, 0x00	; 0
    3004:	f3 01       	movw	r30, r6
    3006:	09 95       	icall
					lcd0.string_size("Enter Angle",11);
    3008:	6b e0       	ldi	r22, 0x0B	; 11
    300a:	89 e3       	ldi	r24, 0x39	; 57
    300c:	91 e0       	ldi	r25, 0x01	; 1
    300e:	f1 01       	movw	r30, r2
    3010:	09 95       	icall
					if(keypad.get().character==KEYPADENTERKEY){
    3012:	f4 01       	movw	r30, r8
    3014:	09 95       	icall
    3016:	24 34       	cpi	r18, 0x44	; 68
    3018:	09 f0       	breq	.+2      	; 0x301c <main+0x840>
    301a:	5d c0       	rjmp	.+186    	; 0x30d6 <main+0x8fa>
						strncpy(mstr,keypad.get().string,6);
    301c:	f4 01       	movw	r30, r8
    301e:	09 95       	icall
    3020:	ae 96       	adiw	r28, 0x2e	; 46
    3022:	5f af       	std	Y+63, r21	; 0x3f
    3024:	ae 97       	sbiw	r28, 0x2e	; 46
    3026:	af 96       	adiw	r28, 0x2f	; 47
    3028:	6f af       	std	Y+63, r22	; 0x3f
    302a:	af 97       	sbiw	r28, 0x2f	; 47
    302c:	af 96       	adiw	r28, 0x2f	; 47
    302e:	6e ad       	ldd	r22, Y+62	; 0x3e
    3030:	7f ad       	ldd	r23, Y+63	; 0x3f
    3032:	af 97       	sbiw	r28, 0x2f	; 47
    3034:	46 e0       	ldi	r20, 0x06	; 6
    3036:	50 e0       	ldi	r21, 0x00	; 0
    3038:	ce 01       	movw	r24, r28
    303a:	8a 52       	subi	r24, 0x2A	; 42
    303c:	9f 4f       	sbci	r25, 0xFF	; 255
    303e:	f3 d5       	rcall	.+3046   	; 0x3c26 <strncpy>
						mvalue=function.strToInt(mstr);
    3040:	e0 91 87 04 	lds	r30, 0x0487	; 0x800487 <function+0x2c>
    3044:	f0 91 88 04 	lds	r31, 0x0488	; 0x800488 <function+0x2d>
    3048:	ce 01       	movw	r24, r28
    304a:	8a 52       	subi	r24, 0x2A	; 42
    304c:	9f 4f       	sbci	r25, 0xFF	; 255
    304e:	09 95       	icall
						if(mvalue >=0 && mvalue <181){
    3050:	85 3b       	cpi	r24, 0xB5	; 181
    3052:	91 05       	cpc	r25, r1
    3054:	a0 f5       	brcc	.+104    	; 0x30be <main+0x8e2>
							m_value=mvalue;
							timer1.compareB(function.trimmer(m_value,0,180,Min,Max));
    3056:	bc 01       	movw	r22, r24
    3058:	99 0f       	add	r25, r25
    305a:	88 0b       	sbc	r24, r24
    305c:	99 0b       	sbc	r25, r25
    305e:	1f 92       	push	r1
    3060:	1f 92       	push	r1
    3062:	29 e0       	ldi	r18, 0x09	; 9
    3064:	2f 93       	push	r18
    3066:	2e e2       	ldi	r18, 0x2E	; 46
    3068:	2f 93       	push	r18
    306a:	e0 91 99 04 	lds	r30, 0x0499	; 0x800499 <function+0x3e>
    306e:	f0 91 9a 04 	lds	r31, 0x049A	; 0x80049a <function+0x3f>
    3072:	0f 2e       	mov	r0, r31
    3074:	f4 ef       	ldi	r31, 0xF4	; 244
    3076:	af 2e       	mov	r10, r31
    3078:	bb 24       	eor	r11, r11
    307a:	b3 94       	inc	r11
    307c:	c1 2c       	mov	r12, r1
    307e:	d1 2c       	mov	r13, r1
    3080:	f0 2d       	mov	r31, r0
    3082:	14 eb       	ldi	r17, 0xB4	; 180
    3084:	e1 2e       	mov	r14, r17
    3086:	f1 2c       	mov	r15, r1
    3088:	00 e0       	ldi	r16, 0x00	; 0
    308a:	10 e0       	ldi	r17, 0x00	; 0
    308c:	20 e0       	ldi	r18, 0x00	; 0
    308e:	30 e0       	ldi	r19, 0x00	; 0
    3090:	a9 01       	movw	r20, r18
    3092:	09 95       	icall
    3094:	cb 01       	movw	r24, r22
    3096:	c5 5c       	subi	r28, 0xC5	; 197
    3098:	de 4f       	sbci	r29, 0xFE	; 254
    309a:	e8 81       	ld	r30, Y
    309c:	f9 81       	ldd	r31, Y+1	; 0x01
    309e:	cb 53       	subi	r28, 0x3B	; 59
    30a0:	d1 40       	sbci	r29, 0x01	; 1
    30a2:	09 95       	icall
							lcd0.hspace(5);
    30a4:	c0 56       	subi	r28, 0x60	; 96
    30a6:	df 4f       	sbci	r29, 0xFF	; 255
    30a8:	e8 81       	ld	r30, Y
    30aa:	f9 81       	ldd	r31, Y+1	; 0x01
    30ac:	c0 5a       	subi	r28, 0xA0	; 160
    30ae:	d0 40       	sbci	r29, 0x00	; 0
    30b0:	85 e0       	ldi	r24, 0x05	; 5
    30b2:	09 95       	icall
    30b4:	0f 90       	pop	r0
    30b6:	0f 90       	pop	r0
    30b8:	0f 90       	pop	r0
    30ba:	0f 90       	pop	r0
    30bc:	05 c0       	rjmp	.+10     	; 0x30c8 <main+0x8ec>
						}else{
							lcd0.string_size("  err",5);
    30be:	65 e0       	ldi	r22, 0x05	; 5
    30c0:	85 e4       	ldi	r24, 0x45	; 69
    30c2:	91 e0       	ldi	r25, 0x01	; 1
    30c4:	f1 01       	movw	r30, r2
    30c6:	09 95       	icall
						}
						keypad.flush();
    30c8:	c2 5d       	subi	r28, 0xD2	; 210
    30ca:	de 4f       	sbci	r29, 0xFE	; 254
    30cc:	e8 81       	ld	r30, Y
    30ce:	f9 81       	ldd	r31, Y+1	; 0x01
    30d0:	ce 52       	subi	r28, 0x2E	; 46
    30d2:	d1 40       	sbci	r29, 0x01	; 1
    30d4:	09 95       	icall
					}
					//else
					//	timer1.compareB(function.trimmer(m_value,0,180,Min,Max));
					lcd0.gotoxy(3,0);
    30d6:	60 e0       	ldi	r22, 0x00	; 0
    30d8:	70 e0       	ldi	r23, 0x00	; 0
    30da:	83 e0       	ldi	r24, 0x03	; 3
    30dc:	90 e0       	ldi	r25, 0x00	; 0
    30de:	f3 01       	movw	r30, r6
    30e0:	09 95       	icall
					lcd0.string_size("C - exit",8);
    30e2:	68 e0       	ldi	r22, 0x08	; 8
    30e4:	8b e4       	ldi	r24, 0x4B	; 75
    30e6:	91 e0       	ldi	r25, 0x01	; 1
    30e8:	f1 01       	movw	r30, r2
    30ea:	09 95       	icall
				break;
    30ec:	da cc       	rjmp	.-1612   	; 0x2aa2 <main+0x2c6>
			/***MENU 3***/
			case '3': //Set Time and Date
				if(!strcmp(keypad.get().string,"A")){Menu='1';keypad.flush();lcd0.clear();break;}
    30ee:	f4 01       	movw	r30, r8
    30f0:	09 95       	icall
    30f2:	a9 96       	adiw	r28, 0x29	; 41
    30f4:	5f af       	std	Y+63, r21	; 0x3f
    30f6:	a9 97       	sbiw	r28, 0x29	; 41
    30f8:	aa 96       	adiw	r28, 0x2a	; 42
    30fa:	6f af       	std	Y+63, r22	; 0x3f
    30fc:	aa 97       	sbiw	r28, 0x2a	; 42
    30fe:	64 e1       	ldi	r22, 0x14	; 20
    3100:	71 e0       	ldi	r23, 0x01	; 1
    3102:	aa 96       	adiw	r28, 0x2a	; 42
    3104:	8e ad       	ldd	r24, Y+62	; 0x3e
    3106:	9f ad       	ldd	r25, Y+63	; 0x3f
    3108:	aa 97       	sbiw	r28, 0x2a	; 42
    310a:	7d d5       	rcall	.+2810   	; 0x3c06 <strcmp>
    310c:	89 2b       	or	r24, r25
    310e:	a9 f4       	brne	.+42     	; 0x313a <main+0x95e>
    3110:	c2 5d       	subi	r28, 0xD2	; 210
    3112:	de 4f       	sbci	r29, 0xFE	; 254
    3114:	e8 81       	ld	r30, Y
    3116:	f9 81       	ldd	r31, Y+1	; 0x01
    3118:	ce 52       	subi	r28, 0x2E	; 46
    311a:	d1 40       	sbci	r29, 0x01	; 1
    311c:	09 95       	icall
    311e:	c0 5d       	subi	r28, 0xD0	; 208
    3120:	de 4f       	sbci	r29, 0xFE	; 254
    3122:	e8 81       	ld	r30, Y
    3124:	f9 81       	ldd	r31, Y+1	; 0x01
    3126:	c0 53       	subi	r28, 0x30	; 48
    3128:	d1 40       	sbci	r29, 0x01	; 1
    312a:	09 95       	icall
    312c:	f1 e3       	ldi	r31, 0x31	; 49
    312e:	c4 5d       	subi	r28, 0xD4	; 212
    3130:	de 4f       	sbci	r29, 0xFE	; 254
    3132:	f8 83       	st	Y, r31
    3134:	cc 52       	subi	r28, 0x2C	; 44
    3136:	d1 40       	sbci	r29, 0x01	; 1
    3138:	b4 cc       	rjmp	.-1688   	; 0x2aa2 <main+0x2c6>
				if(!strcmp(keypad.get().string,"B")){Menu='2';keypad.flush();lcd0.clear();break;}
    313a:	f4 01       	movw	r30, r8
    313c:	09 95       	icall
    313e:	a4 96       	adiw	r28, 0x24	; 36
    3140:	5f af       	std	Y+63, r21	; 0x3f
    3142:	a4 97       	sbiw	r28, 0x24	; 36
    3144:	a5 96       	adiw	r28, 0x25	; 37
    3146:	6f af       	std	Y+63, r22	; 0x3f
    3148:	a5 97       	sbiw	r28, 0x25	; 37
    314a:	66 e1       	ldi	r22, 0x16	; 22
    314c:	71 e0       	ldi	r23, 0x01	; 1
    314e:	a5 96       	adiw	r28, 0x25	; 37
    3150:	8e ad       	ldd	r24, Y+62	; 0x3e
    3152:	9f ad       	ldd	r25, Y+63	; 0x3f
    3154:	a5 97       	sbiw	r28, 0x25	; 37
    3156:	57 d5       	rcall	.+2734   	; 0x3c06 <strcmp>
    3158:	89 2b       	or	r24, r25
    315a:	a9 f4       	brne	.+42     	; 0x3186 <main+0x9aa>
    315c:	c2 5d       	subi	r28, 0xD2	; 210
    315e:	de 4f       	sbci	r29, 0xFE	; 254
    3160:	e8 81       	ld	r30, Y
    3162:	f9 81       	ldd	r31, Y+1	; 0x01
    3164:	ce 52       	subi	r28, 0x2E	; 46
    3166:	d1 40       	sbci	r29, 0x01	; 1
    3168:	09 95       	icall
    316a:	c0 5d       	subi	r28, 0xD0	; 208
    316c:	de 4f       	sbci	r29, 0xFE	; 254
    316e:	e8 81       	ld	r30, Y
    3170:	f9 81       	ldd	r31, Y+1	; 0x01
    3172:	c0 53       	subi	r28, 0x30	; 48
    3174:	d1 40       	sbci	r29, 0x01	; 1
    3176:	09 95       	icall
    3178:	f2 e3       	ldi	r31, 0x32	; 50
    317a:	c4 5d       	subi	r28, 0xD4	; 212
    317c:	de 4f       	sbci	r29, 0xFE	; 254
    317e:	f8 83       	st	Y, r31
    3180:	cc 52       	subi	r28, 0x2C	; 44
    3182:	d1 40       	sbci	r29, 0x01	; 1
    3184:	8e cc       	rjmp	.-1764   	; 0x2aa2 <main+0x2c6>
				if(!strcmp(keypad.get().string,"C")){Menu='1';cal='0';keypad.flush();lcd0.clear();uart.puts("Clock exit\r\n");break;}
    3186:	f4 01       	movw	r30, r8
    3188:	09 95       	icall
    318a:	6f 96       	adiw	r28, 0x1f	; 31
    318c:	5f af       	std	Y+63, r21	; 0x3f
    318e:	6f 97       	sbiw	r28, 0x1f	; 31
    3190:	a0 96       	adiw	r28, 0x20	; 32
    3192:	6f af       	std	Y+63, r22	; 0x3f
    3194:	a0 97       	sbiw	r28, 0x20	; 32
    3196:	60 e2       	ldi	r22, 0x20	; 32
    3198:	71 e0       	ldi	r23, 0x01	; 1
    319a:	a0 96       	adiw	r28, 0x20	; 32
    319c:	8e ad       	ldd	r24, Y+62	; 0x3e
    319e:	9f ad       	ldd	r25, Y+63	; 0x3f
    31a0:	a0 97       	sbiw	r28, 0x20	; 32
    31a2:	31 d5       	rcall	.+2658   	; 0x3c06 <strcmp>
    31a4:	89 2b       	or	r24, r25
    31a6:	11 f5       	brne	.+68     	; 0x31ec <main+0xa10>
    31a8:	c2 5d       	subi	r28, 0xD2	; 210
    31aa:	de 4f       	sbci	r29, 0xFE	; 254
    31ac:	e8 81       	ld	r30, Y
    31ae:	f9 81       	ldd	r31, Y+1	; 0x01
    31b0:	ce 52       	subi	r28, 0x2E	; 46
    31b2:	d1 40       	sbci	r29, 0x01	; 1
    31b4:	09 95       	icall
    31b6:	c0 5d       	subi	r28, 0xD0	; 208
    31b8:	de 4f       	sbci	r29, 0xFE	; 254
    31ba:	e8 81       	ld	r30, Y
    31bc:	f9 81       	ldd	r31, Y+1	; 0x01
    31be:	c0 53       	subi	r28, 0x30	; 48
    31c0:	d1 40       	sbci	r29, 0x01	; 1
    31c2:	09 95       	icall
    31c4:	e0 91 d2 04 	lds	r30, 0x04D2	; 0x8004d2 <uart+0xa>
    31c8:	f0 91 d3 04 	lds	r31, 0x04D3	; 0x8004d3 <uart+0xb>
    31cc:	84 e5       	ldi	r24, 0x54	; 84
    31ce:	91 e0       	ldi	r25, 0x01	; 1
    31d0:	09 95       	icall
    31d2:	f0 e3       	ldi	r31, 0x30	; 48
    31d4:	ca 5c       	subi	r28, 0xCA	; 202
    31d6:	de 4f       	sbci	r29, 0xFE	; 254
    31d8:	f8 83       	st	Y, r31
    31da:	c6 53       	subi	r28, 0x36	; 54
    31dc:	d1 40       	sbci	r29, 0x01	; 1
    31de:	21 e3       	ldi	r18, 0x31	; 49
    31e0:	c4 5d       	subi	r28, 0xD4	; 212
    31e2:	de 4f       	sbci	r29, 0xFE	; 254
    31e4:	28 83       	st	Y, r18
    31e6:	cc 52       	subi	r28, 0x2C	; 44
    31e8:	d1 40       	sbci	r29, 0x01	; 1
    31ea:	5b cc       	rjmp	.-1866   	; 0x2aa2 <main+0x2c6>
					/*** Menu to set RTC Time and Date ***/
					lcd0.gotoxy(0,0);
    31ec:	60 e0       	ldi	r22, 0x00	; 0
    31ee:	70 e0       	ldi	r23, 0x00	; 0
    31f0:	80 e0       	ldi	r24, 0x00	; 0
    31f2:	90 e0       	ldi	r25, 0x00	; 0
    31f4:	f3 01       	movw	r30, r6
    31f6:	09 95       	icall
					lcd0.string_size("Date and Time Setup",19);
    31f8:	63 e1       	ldi	r22, 0x13	; 19
    31fa:	81 e6       	ldi	r24, 0x61	; 97
    31fc:	91 e0       	ldi	r25, 0x01	; 1
    31fe:	f1 01       	movw	r30, r2
    3200:	09 95       	icall
					/***Calibrate Menu***/
					switch(cal){
    3202:	ca 5c       	subi	r28, 0xCA	; 202
    3204:	de 4f       	sbci	r29, 0xFE	; 254
    3206:	f8 81       	ld	r31, Y
    3208:	c6 53       	subi	r28, 0x36	; 54
    320a:	d1 40       	sbci	r29, 0x01	; 1
    320c:	8f 2f       	mov	r24, r31
    320e:	90 e0       	ldi	r25, 0x00	; 0
    3210:	fc 01       	movw	r30, r24
    3212:	f0 97       	sbiw	r30, 0x30	; 48
    3214:	e7 30       	cpi	r30, 0x07	; 7
    3216:	f1 05       	cpc	r31, r1
    3218:	08 f0       	brcs	.+2      	; 0x321c <main+0xa40>
    321a:	3d cc       	rjmp	.-1926   	; 0x2a96 <main+0x2ba>
    321c:	ef 59       	subi	r30, 0x9F	; 159
    321e:	ff 4f       	sbci	r31, 0xFF	; 255
    3220:	d0 c4       	rjmp	.+2464   	; 0x3bc2 <__tablejump2__>
						case '0': // choice
							lcd0.gotoxy(1,0);
    3222:	60 e0       	ldi	r22, 0x00	; 0
    3224:	70 e0       	ldi	r23, 0x00	; 0
    3226:	81 e0       	ldi	r24, 0x01	; 1
    3228:	90 e0       	ldi	r25, 0x00	; 0
    322a:	f3 01       	movw	r30, r6
    322c:	09 95       	icall
							lcd0.string_size("1-Year",7);
    322e:	67 e0       	ldi	r22, 0x07	; 7
    3230:	85 e7       	ldi	r24, 0x75	; 117
    3232:	91 e0       	ldi	r25, 0x01	; 1
    3234:	f1 01       	movw	r30, r2
    3236:	09 95       	icall
							lcd0.string_size("2-Month",8);
    3238:	68 e0       	ldi	r22, 0x08	; 8
    323a:	8c e7       	ldi	r24, 0x7C	; 124
    323c:	91 e0       	ldi	r25, 0x01	; 1
    323e:	f1 01       	movw	r30, r2
    3240:	09 95       	icall
							lcd0.string_size("3-Day",5);
    3242:	65 e0       	ldi	r22, 0x05	; 5
    3244:	84 e8       	ldi	r24, 0x84	; 132
    3246:	91 e0       	ldi	r25, 0x01	; 1
    3248:	f1 01       	movw	r30, r2
    324a:	09 95       	icall
							lcd0.gotoxy(2,0);
    324c:	60 e0       	ldi	r22, 0x00	; 0
    324e:	70 e0       	ldi	r23, 0x00	; 0
    3250:	82 e0       	ldi	r24, 0x02	; 2
    3252:	90 e0       	ldi	r25, 0x00	; 0
    3254:	f3 01       	movw	r30, r6
    3256:	09 95       	icall
							lcd0.string_size("4-Hour",7);
    3258:	67 e0       	ldi	r22, 0x07	; 7
    325a:	8a e8       	ldi	r24, 0x8A	; 138
    325c:	91 e0       	ldi	r25, 0x01	; 1
    325e:	f1 01       	movw	r30, r2
    3260:	09 95       	icall
							lcd0.string_size("5-Min",8);
    3262:	68 e0       	ldi	r22, 0x08	; 8
    3264:	81 e9       	ldi	r24, 0x91	; 145
    3266:	91 e0       	ldi	r25, 0x01	; 1
    3268:	f1 01       	movw	r30, r2
    326a:	09 95       	icall
							lcd0.string_size("6-Sec",5);
    326c:	65 e0       	ldi	r22, 0x05	; 5
    326e:	87 e9       	ldi	r24, 0x97	; 151
    3270:	91 e0       	ldi	r25, 0x01	; 1
    3272:	f1 01       	movw	r30, r2
    3274:	09 95       	icall
							lcd0.gotoxy(3,0);
    3276:	60 e0       	ldi	r22, 0x00	; 0
    3278:	70 e0       	ldi	r23, 0x00	; 0
    327a:	83 e0       	ldi	r24, 0x03	; 3
    327c:	90 e0       	ldi	r25, 0x00	; 0
    327e:	f3 01       	movw	r30, r6
    3280:	09 95       	icall
							lcd0.string_size("C - exit",8);
    3282:	68 e0       	ldi	r22, 0x08	; 8
    3284:	8b e4       	ldi	r24, 0x4B	; 75
    3286:	91 e0       	ldi	r25, 0x01	; 1
    3288:	f1 01       	movw	r30, r2
    328a:	09 95       	icall
							if(!strcmp(keypad.get().string,"1")){cal='1';keypad.flush();lcd0.clear();}
    328c:	f4 01       	movw	r30, r8
    328e:	09 95       	icall
    3290:	6a 96       	adiw	r28, 0x1a	; 26
    3292:	5f af       	std	Y+63, r21	; 0x3f
    3294:	6a 97       	sbiw	r28, 0x1a	; 26
    3296:	6b 96       	adiw	r28, 0x1b	; 27
    3298:	6f af       	std	Y+63, r22	; 0x3f
    329a:	6b 97       	sbiw	r28, 0x1b	; 27
    329c:	6d e9       	ldi	r22, 0x9D	; 157
    329e:	71 e0       	ldi	r23, 0x01	; 1
    32a0:	6b 96       	adiw	r28, 0x1b	; 27
    32a2:	8e ad       	ldd	r24, Y+62	; 0x3e
    32a4:	9f ad       	ldd	r25, Y+63	; 0x3f
    32a6:	6b 97       	sbiw	r28, 0x1b	; 27
    32a8:	ae d4       	rcall	.+2396   	; 0x3c06 <strcmp>
    32aa:	89 2b       	or	r24, r25
    32ac:	a1 f4       	brne	.+40     	; 0x32d6 <main+0xafa>
    32ae:	c2 5d       	subi	r28, 0xD2	; 210
    32b0:	de 4f       	sbci	r29, 0xFE	; 254
    32b2:	e8 81       	ld	r30, Y
    32b4:	f9 81       	ldd	r31, Y+1	; 0x01
    32b6:	ce 52       	subi	r28, 0x2E	; 46
    32b8:	d1 40       	sbci	r29, 0x01	; 1
    32ba:	09 95       	icall
    32bc:	c0 5d       	subi	r28, 0xD0	; 208
    32be:	de 4f       	sbci	r29, 0xFE	; 254
    32c0:	e8 81       	ld	r30, Y
    32c2:	f9 81       	ldd	r31, Y+1	; 0x01
    32c4:	c0 53       	subi	r28, 0x30	; 48
    32c6:	d1 40       	sbci	r29, 0x01	; 1
    32c8:	09 95       	icall
    32ca:	f1 e3       	ldi	r31, 0x31	; 49
    32cc:	ca 5c       	subi	r28, 0xCA	; 202
    32ce:	de 4f       	sbci	r29, 0xFE	; 254
    32d0:	f8 83       	st	Y, r31
    32d2:	c6 53       	subi	r28, 0x36	; 54
    32d4:	d1 40       	sbci	r29, 0x01	; 1
							if(!strcmp(keypad.get().string,"2")){cal='2';keypad.flush();lcd0.clear();}
    32d6:	f4 01       	movw	r30, r8
    32d8:	09 95       	icall
    32da:	65 96       	adiw	r28, 0x15	; 21
    32dc:	5f af       	std	Y+63, r21	; 0x3f
    32de:	65 97       	sbiw	r28, 0x15	; 21
    32e0:	66 96       	adiw	r28, 0x16	; 22
    32e2:	6f af       	std	Y+63, r22	; 0x3f
    32e4:	66 97       	sbiw	r28, 0x16	; 22
    32e6:	6f e9       	ldi	r22, 0x9F	; 159
    32e8:	71 e0       	ldi	r23, 0x01	; 1
    32ea:	66 96       	adiw	r28, 0x16	; 22
    32ec:	8e ad       	ldd	r24, Y+62	; 0x3e
    32ee:	9f ad       	ldd	r25, Y+63	; 0x3f
    32f0:	66 97       	sbiw	r28, 0x16	; 22
    32f2:	89 d4       	rcall	.+2322   	; 0x3c06 <strcmp>
    32f4:	89 2b       	or	r24, r25
    32f6:	a1 f4       	brne	.+40     	; 0x3320 <main+0xb44>
    32f8:	c2 5d       	subi	r28, 0xD2	; 210
    32fa:	de 4f       	sbci	r29, 0xFE	; 254
    32fc:	e8 81       	ld	r30, Y
    32fe:	f9 81       	ldd	r31, Y+1	; 0x01
    3300:	ce 52       	subi	r28, 0x2E	; 46
    3302:	d1 40       	sbci	r29, 0x01	; 1
    3304:	09 95       	icall
    3306:	c0 5d       	subi	r28, 0xD0	; 208
    3308:	de 4f       	sbci	r29, 0xFE	; 254
    330a:	e8 81       	ld	r30, Y
    330c:	f9 81       	ldd	r31, Y+1	; 0x01
    330e:	c0 53       	subi	r28, 0x30	; 48
    3310:	d1 40       	sbci	r29, 0x01	; 1
    3312:	09 95       	icall
    3314:	f2 e3       	ldi	r31, 0x32	; 50
    3316:	ca 5c       	subi	r28, 0xCA	; 202
    3318:	de 4f       	sbci	r29, 0xFE	; 254
    331a:	f8 83       	st	Y, r31
    331c:	c6 53       	subi	r28, 0x36	; 54
							if(!strcmp(keypad.get().string,"3")){cal='3';keypad.flush();lcd0.clear();}
    331e:	d1 40       	sbci	r29, 0x01	; 1
    3320:	f4 01       	movw	r30, r8
    3322:	09 95       	icall
    3324:	60 96       	adiw	r28, 0x10	; 16
    3326:	5f af       	std	Y+63, r21	; 0x3f
    3328:	60 97       	sbiw	r28, 0x10	; 16
    332a:	61 96       	adiw	r28, 0x11	; 17
    332c:	6f af       	std	Y+63, r22	; 0x3f
    332e:	61 97       	sbiw	r28, 0x11	; 17
    3330:	61 ea       	ldi	r22, 0xA1	; 161
    3332:	71 e0       	ldi	r23, 0x01	; 1
    3334:	61 96       	adiw	r28, 0x11	; 17
    3336:	8e ad       	ldd	r24, Y+62	; 0x3e
    3338:	9f ad       	ldd	r25, Y+63	; 0x3f
    333a:	61 97       	sbiw	r28, 0x11	; 17
    333c:	64 d4       	rcall	.+2248   	; 0x3c06 <strcmp>
    333e:	89 2b       	or	r24, r25
    3340:	a1 f4       	brne	.+40     	; 0x336a <main+0xb8e>
    3342:	c2 5d       	subi	r28, 0xD2	; 210
    3344:	de 4f       	sbci	r29, 0xFE	; 254
    3346:	e8 81       	ld	r30, Y
    3348:	f9 81       	ldd	r31, Y+1	; 0x01
    334a:	ce 52       	subi	r28, 0x2E	; 46
    334c:	d1 40       	sbci	r29, 0x01	; 1
    334e:	09 95       	icall
    3350:	c0 5d       	subi	r28, 0xD0	; 208
    3352:	de 4f       	sbci	r29, 0xFE	; 254
    3354:	e8 81       	ld	r30, Y
    3356:	f9 81       	ldd	r31, Y+1	; 0x01
    3358:	c0 53       	subi	r28, 0x30	; 48
    335a:	d1 40       	sbci	r29, 0x01	; 1
    335c:	09 95       	icall
    335e:	f3 e3       	ldi	r31, 0x33	; 51
    3360:	ca 5c       	subi	r28, 0xCA	; 202
    3362:	de 4f       	sbci	r29, 0xFE	; 254
    3364:	f8 83       	st	Y, r31
    3366:	c6 53       	subi	r28, 0x36	; 54
							if(!strcmp(keypad.get().string,"4")){cal='4';keypad.flush();lcd0.clear();}
    3368:	d1 40       	sbci	r29, 0x01	; 1
    336a:	f4 01       	movw	r30, r8
    336c:	09 95       	icall
    336e:	2b 96       	adiw	r28, 0x0b	; 11
    3370:	5f af       	std	Y+63, r21	; 0x3f
    3372:	2b 97       	sbiw	r28, 0x0b	; 11
    3374:	2c 96       	adiw	r28, 0x0c	; 12
    3376:	6f af       	std	Y+63, r22	; 0x3f
    3378:	2c 97       	sbiw	r28, 0x0c	; 12
    337a:	63 ea       	ldi	r22, 0xA3	; 163
    337c:	71 e0       	ldi	r23, 0x01	; 1
    337e:	2c 96       	adiw	r28, 0x0c	; 12
    3380:	8e ad       	ldd	r24, Y+62	; 0x3e
    3382:	9f ad       	ldd	r25, Y+63	; 0x3f
    3384:	2c 97       	sbiw	r28, 0x0c	; 12
    3386:	3f d4       	rcall	.+2174   	; 0x3c06 <strcmp>
    3388:	89 2b       	or	r24, r25
    338a:	a1 f4       	brne	.+40     	; 0x33b4 <main+0xbd8>
    338c:	c2 5d       	subi	r28, 0xD2	; 210
    338e:	de 4f       	sbci	r29, 0xFE	; 254
    3390:	e8 81       	ld	r30, Y
    3392:	f9 81       	ldd	r31, Y+1	; 0x01
    3394:	ce 52       	subi	r28, 0x2E	; 46
    3396:	d1 40       	sbci	r29, 0x01	; 1
    3398:	09 95       	icall
    339a:	c0 5d       	subi	r28, 0xD0	; 208
    339c:	de 4f       	sbci	r29, 0xFE	; 254
    339e:	e8 81       	ld	r30, Y
    33a0:	f9 81       	ldd	r31, Y+1	; 0x01
    33a2:	c0 53       	subi	r28, 0x30	; 48
    33a4:	d1 40       	sbci	r29, 0x01	; 1
    33a6:	09 95       	icall
    33a8:	f4 e3       	ldi	r31, 0x34	; 52
    33aa:	ca 5c       	subi	r28, 0xCA	; 202
    33ac:	de 4f       	sbci	r29, 0xFE	; 254
    33ae:	f8 83       	st	Y, r31
    33b0:	c6 53       	subi	r28, 0x36	; 54
							if(!strcmp(keypad.get().string,"5")){cal='5';keypad.flush();lcd0.clear();}
    33b2:	d1 40       	sbci	r29, 0x01	; 1
    33b4:	f4 01       	movw	r30, r8
    33b6:	09 95       	icall
    33b8:	26 96       	adiw	r28, 0x06	; 6
    33ba:	5f af       	std	Y+63, r21	; 0x3f
    33bc:	26 97       	sbiw	r28, 0x06	; 6
    33be:	27 96       	adiw	r28, 0x07	; 7
    33c0:	6f af       	std	Y+63, r22	; 0x3f
    33c2:	27 97       	sbiw	r28, 0x07	; 7
    33c4:	65 ea       	ldi	r22, 0xA5	; 165
    33c6:	71 e0       	ldi	r23, 0x01	; 1
    33c8:	27 96       	adiw	r28, 0x07	; 7
    33ca:	8e ad       	ldd	r24, Y+62	; 0x3e
    33cc:	9f ad       	ldd	r25, Y+63	; 0x3f
    33ce:	27 97       	sbiw	r28, 0x07	; 7
    33d0:	1a d4       	rcall	.+2100   	; 0x3c06 <strcmp>
    33d2:	89 2b       	or	r24, r25
    33d4:	a1 f4       	brne	.+40     	; 0x33fe <main+0xc22>
    33d6:	c2 5d       	subi	r28, 0xD2	; 210
    33d8:	de 4f       	sbci	r29, 0xFE	; 254
    33da:	e8 81       	ld	r30, Y
    33dc:	f9 81       	ldd	r31, Y+1	; 0x01
    33de:	ce 52       	subi	r28, 0x2E	; 46
    33e0:	d1 40       	sbci	r29, 0x01	; 1
    33e2:	09 95       	icall
    33e4:	c0 5d       	subi	r28, 0xD0	; 208
    33e6:	de 4f       	sbci	r29, 0xFE	; 254
    33e8:	e8 81       	ld	r30, Y
    33ea:	f9 81       	ldd	r31, Y+1	; 0x01
    33ec:	c0 53       	subi	r28, 0x30	; 48
    33ee:	d1 40       	sbci	r29, 0x01	; 1
    33f0:	09 95       	icall
    33f2:	f5 e3       	ldi	r31, 0x35	; 53
    33f4:	ca 5c       	subi	r28, 0xCA	; 202
    33f6:	de 4f       	sbci	r29, 0xFE	; 254
    33f8:	f8 83       	st	Y, r31
    33fa:	c6 53       	subi	r28, 0x36	; 54
							if(!strcmp(keypad.get().string,"6")){cal='6';keypad.flush();lcd0.clear();}
    33fc:	d1 40       	sbci	r29, 0x01	; 1
    33fe:	f4 01       	movw	r30, r8
    3400:	09 95       	icall
    3402:	21 96       	adiw	r28, 0x01	; 1
    3404:	5f af       	std	Y+63, r21	; 0x3f
    3406:	21 97       	sbiw	r28, 0x01	; 1
    3408:	22 96       	adiw	r28, 0x02	; 2
    340a:	6f af       	std	Y+63, r22	; 0x3f
    340c:	22 97       	sbiw	r28, 0x02	; 2
    340e:	67 ea       	ldi	r22, 0xA7	; 167
    3410:	71 e0       	ldi	r23, 0x01	; 1
    3412:	22 96       	adiw	r28, 0x02	; 2
    3414:	8e ad       	ldd	r24, Y+62	; 0x3e
    3416:	9f ad       	ldd	r25, Y+63	; 0x3f
    3418:	22 97       	sbiw	r28, 0x02	; 2
    341a:	f5 d3       	rcall	.+2026   	; 0x3c06 <strcmp>
    341c:	89 2b       	or	r24, r25
    341e:	09 f0       	breq	.+2      	; 0x3422 <main+0xc46>
    3420:	40 cb       	rjmp	.-2432   	; 0x2aa2 <main+0x2c6>
    3422:	c2 5d       	subi	r28, 0xD2	; 210
    3424:	de 4f       	sbci	r29, 0xFE	; 254
    3426:	e8 81       	ld	r30, Y
    3428:	f9 81       	ldd	r31, Y+1	; 0x01
    342a:	ce 52       	subi	r28, 0x2E	; 46
    342c:	d1 40       	sbci	r29, 0x01	; 1
    342e:	09 95       	icall
    3430:	c0 5d       	subi	r28, 0xD0	; 208
    3432:	de 4f       	sbci	r29, 0xFE	; 254
    3434:	e8 81       	ld	r30, Y
    3436:	f9 81       	ldd	r31, Y+1	; 0x01
    3438:	c0 53       	subi	r28, 0x30	; 48
    343a:	d1 40       	sbci	r29, 0x01	; 1
    343c:	09 95       	icall
    343e:	f6 e3       	ldi	r31, 0x36	; 54
    3440:	ca 5c       	subi	r28, 0xCA	; 202
    3442:	de 4f       	sbci	r29, 0xFE	; 254
    3444:	f8 83       	st	Y, r31
    3446:	c6 53       	subi	r28, 0x36	; 54
    3448:	d1 40       	sbci	r29, 0x01	; 1
    344a:	2b cb       	rjmp	.-2474   	; 0x2aa2 <main+0x2c6>
							//if(keypad.get().character=='1'){cal='1';keypad.flush();lcd0.clear();}
							break;
						/********************************************************************/
						case '1': // YEAR
							lcd0.gotoxy(1,0);
    344c:	60 e0       	ldi	r22, 0x00	; 0
    344e:	70 e0       	ldi	r23, 0x00	; 0
    3450:	81 e0       	ldi	r24, 0x01	; 1
    3452:	90 e0       	ldi	r25, 0x00	; 0
    3454:	f3 01       	movw	r30, r6
    3456:	09 95       	icall
							lcd0.string_size("Enter Year:",11);
    3458:	6b e0       	ldi	r22, 0x0B	; 11
    345a:	89 ea       	ldi	r24, 0xA9	; 169
    345c:	91 e0       	ldi	r25, 0x01	; 1
    345e:	f1 01       	movw	r30, r2
    3460:	09 95       	icall
							lcd0.gotoxy(3,0);
    3462:	60 e0       	ldi	r22, 0x00	; 0
    3464:	70 e0       	ldi	r23, 0x00	; 0
    3466:	83 e0       	ldi	r24, 0x03	; 3
    3468:	90 e0       	ldi	r25, 0x00	; 0
    346a:	f3 01       	movw	r30, r6
    346c:	09 95       	icall
							lcd0.string_size("C - exit",8);	
    346e:	68 e0       	ldi	r22, 0x08	; 8
    3470:	8b e4       	ldi	r24, 0x4B	; 75
    3472:	91 e0       	ldi	r25, 0x01	; 1
    3474:	f1 01       	movw	r30, r2
							/***YEAR***/
							if(keypad.get().character==KEYPADENTERKEY){
    3476:	09 95       	icall
    3478:	f4 01       	movw	r30, r8
    347a:	09 95       	icall
    347c:	24 34       	cpi	r18, 0x44	; 68
    347e:	09 f0       	breq	.+2      	; 0x3482 <main+0xca6>
								strcpy(tstr,keypad.get().string);
    3480:	10 cb       	rjmp	.-2528   	; 0x2aa2 <main+0x2c6>
    3482:	f4 01       	movw	r30, r8
    3484:	09 95       	icall
    3486:	5e ab       	std	Y+54, r21	; 0x36
    3488:	6f ab       	std	Y+55, r22	; 0x37
    348a:	6e a9       	ldd	r22, Y+54	; 0x36
    348c:	7f a9       	ldd	r23, Y+55	; 0x37
    348e:	ce 01       	movw	r24, r28
    3490:	84 52       	subi	r24, 0x24	; 36
    3492:	9f 4f       	sbci	r25, 0xFF	; 255
    3494:	c1 d3       	rcall	.+1922   	; 0x3c18 <strcpy>
								set=function.strToInt(tstr);
    3496:	e0 91 87 04 	lds	r30, 0x0487	; 0x800487 <function+0x2c>
    349a:	f0 91 88 04 	lds	r31, 0x0488	; 0x800488 <function+0x2d>
    349e:	ce 01       	movw	r24, r28
    34a0:	84 52       	subi	r24, 0x24	; 36
    34a2:	9f 4f       	sbci	r25, 0xFF	; 255
    34a4:	09 95       	icall
								if(set >=0 && set <100){
    34a6:	84 36       	cpi	r24, 0x64	; 100
    34a8:	91 05       	cpc	r25, r1
    34aa:	88 f4       	brcc	.+34     	; 0x34ce <main+0xcf2>
									rtc.SetYear(rtc.bintobcd(set));
    34ac:	e8 ea       	ldi	r30, 0xA8	; 168
    34ae:	f4 e0       	ldi	r31, 0x04	; 4
    34b0:	02 89       	ldd	r16, Z+18	; 0x12
    34b2:	13 89       	ldd	r17, Z+19	; 0x13
    34b4:	02 8c       	ldd	r0, Z+26	; 0x1a
    34b6:	f3 8d       	ldd	r31, Z+27	; 0x1b
    34b8:	e0 2d       	mov	r30, r0
    34ba:	09 95       	icall
    34bc:	f8 01       	movw	r30, r16
    34be:	09 95       	icall
									cal='0';
    34c0:	f0 e3       	ldi	r31, 0x30	; 48
    34c2:	ca 5c       	subi	r28, 0xCA	; 202
    34c4:	de 4f       	sbci	r29, 0xFE	; 254
    34c6:	f8 83       	st	Y, r31
    34c8:	c6 53       	subi	r28, 0x36	; 54
    34ca:	d1 40       	sbci	r29, 0x01	; 1
    34cc:	10 c0       	rjmp	.+32     	; 0x34ee <main+0xd12>
									}else{
									strcpy(tstr,"err");
    34ce:	85 e6       	ldi	r24, 0x65	; 101
    34d0:	92 e7       	ldi	r25, 0x72	; 114
    34d2:	c4 52       	subi	r28, 0x24	; 36
    34d4:	df 4f       	sbci	r29, 0xFF	; 255
    34d6:	99 83       	std	Y+1, r25	; 0x01
    34d8:	88 83       	st	Y, r24
    34da:	cc 5d       	subi	r28, 0xDC	; 220
    34dc:	d0 40       	sbci	r29, 0x00	; 0
    34de:	82 e7       	ldi	r24, 0x72	; 114
    34e0:	90 e0       	ldi	r25, 0x00	; 0
    34e2:	c2 52       	subi	r28, 0x22	; 34
    34e4:	df 4f       	sbci	r29, 0xFF	; 255
    34e6:	99 83       	std	Y+1, r25	; 0x01
    34e8:	88 83       	st	Y, r24
    34ea:	ce 5d       	subi	r28, 0xDE	; 222
    34ec:	d0 40       	sbci	r29, 0x00	; 0
								}
								keypad.flush();
    34ee:	c2 5d       	subi	r28, 0xD2	; 210
    34f0:	de 4f       	sbci	r29, 0xFE	; 254
    34f2:	e8 81       	ld	r30, Y
    34f4:	f9 81       	ldd	r31, Y+1	; 0x01
    34f6:	ce 52       	subi	r28, 0x2E	; 46
    34f8:	d1 40       	sbci	r29, 0x01	; 1
    34fa:	09 95       	icall
    34fc:	d2 ca       	rjmp	.-2652   	; 0x2aa2 <main+0x2c6>
							}
						break;
						/********************************************************************/
						case '2': // MONTH
							lcd0.gotoxy(1,0);
    34fe:	60 e0       	ldi	r22, 0x00	; 0
    3500:	70 e0       	ldi	r23, 0x00	; 0
    3502:	81 e0       	ldi	r24, 0x01	; 1
    3504:	90 e0       	ldi	r25, 0x00	; 0
    3506:	f3 01       	movw	r30, r6
    3508:	09 95       	icall
							lcd0.string_size("Enter Month:",12);
    350a:	6c e0       	ldi	r22, 0x0C	; 12
    350c:	85 eb       	ldi	r24, 0xB5	; 181
    350e:	91 e0       	ldi	r25, 0x01	; 1
    3510:	f1 01       	movw	r30, r2
    3512:	09 95       	icall
							lcd0.gotoxy(3,0);
    3514:	60 e0       	ldi	r22, 0x00	; 0
    3516:	70 e0       	ldi	r23, 0x00	; 0
    3518:	83 e0       	ldi	r24, 0x03	; 3
    351a:	90 e0       	ldi	r25, 0x00	; 0
    351c:	f3 01       	movw	r30, r6
							lcd0.string_size("C - exit",8);
    351e:	09 95       	icall
    3520:	68 e0       	ldi	r22, 0x08	; 8
    3522:	8b e4       	ldi	r24, 0x4B	; 75
    3524:	91 e0       	ldi	r25, 0x01	; 1
    3526:	f1 01       	movw	r30, r2
							/***MONTH***/
							if(keypad.get().character==KEYPADENTERKEY){
    3528:	09 95       	icall
    352a:	f4 01       	movw	r30, r8
    352c:	09 95       	icall
    352e:	24 34       	cpi	r18, 0x44	; 68
    3530:	09 f0       	breq	.+2      	; 0x3534 <main+0xd58>
								strcpy(tstr,keypad.get().string);
    3532:	b7 ca       	rjmp	.-2706   	; 0x2aa2 <main+0x2c6>
    3534:	f4 01       	movw	r30, r8
    3536:	09 95       	icall
    3538:	5c a7       	std	Y+44, r21	; 0x2c
    353a:	6d a7       	std	Y+45, r22	; 0x2d
    353c:	6c a5       	ldd	r22, Y+44	; 0x2c
    353e:	7d a5       	ldd	r23, Y+45	; 0x2d
    3540:	ce 01       	movw	r24, r28
    3542:	84 52       	subi	r24, 0x24	; 36
    3544:	9f 4f       	sbci	r25, 0xFF	; 255
    3546:	68 d3       	rcall	.+1744   	; 0x3c18 <strcpy>
								set=function.strToInt(tstr);
    3548:	e0 91 87 04 	lds	r30, 0x0487	; 0x800487 <function+0x2c>
    354c:	f0 91 88 04 	lds	r31, 0x0488	; 0x800488 <function+0x2d>
    3550:	ce 01       	movw	r24, r28
    3552:	84 52       	subi	r24, 0x24	; 36
    3554:	9f 4f       	sbci	r25, 0xFF	; 255
    3556:	09 95       	icall
								if(set >=0 && set <13){
    3558:	8d 30       	cpi	r24, 0x0D	; 13
    355a:	91 05       	cpc	r25, r1
    355c:	88 f4       	brcc	.+34     	; 0x3580 <main+0xda4>
									rtc.SetMonth(rtc.bintobcd(set));
    355e:	e8 ea       	ldi	r30, 0xA8	; 168
    3560:	f4 e0       	ldi	r31, 0x04	; 4
    3562:	00 89       	ldd	r16, Z+16	; 0x10
    3564:	11 89       	ldd	r17, Z+17	; 0x11
    3566:	02 8c       	ldd	r0, Z+26	; 0x1a
    3568:	f3 8d       	ldd	r31, Z+27	; 0x1b
    356a:	e0 2d       	mov	r30, r0
    356c:	09 95       	icall
    356e:	f8 01       	movw	r30, r16
    3570:	09 95       	icall
									cal='0';
    3572:	f0 e3       	ldi	r31, 0x30	; 48
    3574:	ca 5c       	subi	r28, 0xCA	; 202
    3576:	de 4f       	sbci	r29, 0xFE	; 254
    3578:	f8 83       	st	Y, r31
    357a:	c6 53       	subi	r28, 0x36	; 54
    357c:	d1 40       	sbci	r29, 0x01	; 1
    357e:	10 c0       	rjmp	.+32     	; 0x35a0 <main+0xdc4>
								}else{
									strcpy(tstr,"err");
    3580:	85 e6       	ldi	r24, 0x65	; 101
    3582:	92 e7       	ldi	r25, 0x72	; 114
    3584:	c4 52       	subi	r28, 0x24	; 36
    3586:	df 4f       	sbci	r29, 0xFF	; 255
    3588:	99 83       	std	Y+1, r25	; 0x01
    358a:	88 83       	st	Y, r24
    358c:	cc 5d       	subi	r28, 0xDC	; 220
    358e:	d0 40       	sbci	r29, 0x00	; 0
    3590:	82 e7       	ldi	r24, 0x72	; 114
    3592:	90 e0       	ldi	r25, 0x00	; 0
    3594:	c2 52       	subi	r28, 0x22	; 34
    3596:	df 4f       	sbci	r29, 0xFF	; 255
    3598:	99 83       	std	Y+1, r25	; 0x01
    359a:	88 83       	st	Y, r24
    359c:	ce 5d       	subi	r28, 0xDE	; 222
    359e:	d0 40       	sbci	r29, 0x00	; 0
								}
								keypad.flush();
    35a0:	c2 5d       	subi	r28, 0xD2	; 210
    35a2:	de 4f       	sbci	r29, 0xFE	; 254
    35a4:	e8 81       	ld	r30, Y
    35a6:	f9 81       	ldd	r31, Y+1	; 0x01
    35a8:	ce 52       	subi	r28, 0x2E	; 46
    35aa:	d1 40       	sbci	r29, 0x01	; 1
    35ac:	09 95       	icall
    35ae:	79 ca       	rjmp	.-2830   	; 0x2aa2 <main+0x2c6>
							}
							break;
						/********************************************************************/
						case '3': // DAY
							lcd0.gotoxy(1,0);
    35b0:	60 e0       	ldi	r22, 0x00	; 0
    35b2:	70 e0       	ldi	r23, 0x00	; 0
    35b4:	81 e0       	ldi	r24, 0x01	; 1
    35b6:	90 e0       	ldi	r25, 0x00	; 0
    35b8:	f3 01       	movw	r30, r6
    35ba:	09 95       	icall
							lcd0.string_size("Enter Day:",10);
    35bc:	6a e0       	ldi	r22, 0x0A	; 10
    35be:	82 ec       	ldi	r24, 0xC2	; 194
    35c0:	91 e0       	ldi	r25, 0x01	; 1
    35c2:	f1 01       	movw	r30, r2
    35c4:	09 95       	icall
							lcd0.gotoxy(3,0);
    35c6:	60 e0       	ldi	r22, 0x00	; 0
    35c8:	70 e0       	ldi	r23, 0x00	; 0
    35ca:	83 e0       	ldi	r24, 0x03	; 3
    35cc:	90 e0       	ldi	r25, 0x00	; 0
    35ce:	f3 01       	movw	r30, r6
							lcd0.string_size("C - exit",8);
    35d0:	09 95       	icall
    35d2:	68 e0       	ldi	r22, 0x08	; 8
    35d4:	8b e4       	ldi	r24, 0x4B	; 75
    35d6:	91 e0       	ldi	r25, 0x01	; 1
    35d8:	f1 01       	movw	r30, r2
							/***DAY***/
							if(keypad.get().character==KEYPADENTERKEY){
    35da:	09 95       	icall
    35dc:	f4 01       	movw	r30, r8
    35de:	09 95       	icall
    35e0:	24 34       	cpi	r18, 0x44	; 68
    35e2:	09 f0       	breq	.+2      	; 0x35e6 <main+0xe0a>
								strcpy(tstr,keypad.get().string);
    35e4:	5e ca       	rjmp	.-2884   	; 0x2aa2 <main+0x2c6>
    35e6:	f4 01       	movw	r30, r8
    35e8:	09 95       	icall
    35ea:	5a a3       	std	Y+34, r21	; 0x22
    35ec:	6b a3       	std	Y+35, r22	; 0x23
    35ee:	6a a1       	ldd	r22, Y+34	; 0x22
    35f0:	7b a1       	ldd	r23, Y+35	; 0x23
    35f2:	ce 01       	movw	r24, r28
    35f4:	84 52       	subi	r24, 0x24	; 36
    35f6:	9f 4f       	sbci	r25, 0xFF	; 255
    35f8:	0f d3       	rcall	.+1566   	; 0x3c18 <strcpy>
								set=function.strToInt(tstr);
    35fa:	e0 91 87 04 	lds	r30, 0x0487	; 0x800487 <function+0x2c>
    35fe:	f0 91 88 04 	lds	r31, 0x0488	; 0x800488 <function+0x2d>
    3602:	ce 01       	movw	r24, r28
    3604:	84 52       	subi	r24, 0x24	; 36
    3606:	9f 4f       	sbci	r25, 0xFF	; 255
    3608:	09 95       	icall
								if(set >=0 && set <32){
    360a:	80 32       	cpi	r24, 0x20	; 32
    360c:	91 05       	cpc	r25, r1
    360e:	88 f4       	brcc	.+34     	; 0x3632 <main+0xe56>
									rtc.SetDay(rtc.bintobcd(set));
    3610:	e8 ea       	ldi	r30, 0xA8	; 168
    3612:	f4 e0       	ldi	r31, 0x04	; 4
    3614:	04 85       	ldd	r16, Z+12	; 0x0c
    3616:	15 85       	ldd	r17, Z+13	; 0x0d
    3618:	02 8c       	ldd	r0, Z+26	; 0x1a
    361a:	f3 8d       	ldd	r31, Z+27	; 0x1b
    361c:	e0 2d       	mov	r30, r0
    361e:	09 95       	icall
    3620:	f8 01       	movw	r30, r16
    3622:	09 95       	icall
									cal='0';
    3624:	f0 e3       	ldi	r31, 0x30	; 48
    3626:	ca 5c       	subi	r28, 0xCA	; 202
    3628:	de 4f       	sbci	r29, 0xFE	; 254
    362a:	f8 83       	st	Y, r31
    362c:	c6 53       	subi	r28, 0x36	; 54
    362e:	d1 40       	sbci	r29, 0x01	; 1
    3630:	10 c0       	rjmp	.+32     	; 0x3652 <main+0xe76>
								}else{
									strcpy(tstr,"err");
    3632:	85 e6       	ldi	r24, 0x65	; 101
    3634:	92 e7       	ldi	r25, 0x72	; 114
    3636:	c4 52       	subi	r28, 0x24	; 36
    3638:	df 4f       	sbci	r29, 0xFF	; 255
    363a:	99 83       	std	Y+1, r25	; 0x01
    363c:	88 83       	st	Y, r24
    363e:	cc 5d       	subi	r28, 0xDC	; 220
    3640:	d0 40       	sbci	r29, 0x00	; 0
    3642:	82 e7       	ldi	r24, 0x72	; 114
    3644:	90 e0       	ldi	r25, 0x00	; 0
    3646:	c2 52       	subi	r28, 0x22	; 34
    3648:	df 4f       	sbci	r29, 0xFF	; 255
    364a:	99 83       	std	Y+1, r25	; 0x01
    364c:	88 83       	st	Y, r24
    364e:	ce 5d       	subi	r28, 0xDE	; 222
    3650:	d0 40       	sbci	r29, 0x00	; 0
								}
								keypad.flush();
    3652:	c2 5d       	subi	r28, 0xD2	; 210
    3654:	de 4f       	sbci	r29, 0xFE	; 254
    3656:	e8 81       	ld	r30, Y
    3658:	f9 81       	ldd	r31, Y+1	; 0x01
    365a:	ce 52       	subi	r28, 0x2E	; 46
    365c:	d1 40       	sbci	r29, 0x01	; 1
    365e:	09 95       	icall
    3660:	20 ca       	rjmp	.-3008   	; 0x2aa2 <main+0x2c6>
							}
						break;
						/********************************************************************/
						case '4': // HOUR
							lcd0.gotoxy(1,0);
    3662:	60 e0       	ldi	r22, 0x00	; 0
    3664:	70 e0       	ldi	r23, 0x00	; 0
    3666:	81 e0       	ldi	r24, 0x01	; 1
    3668:	90 e0       	ldi	r25, 0x00	; 0
    366a:	f3 01       	movw	r30, r6
    366c:	09 95       	icall
							lcd0.string_size("Enter Hour:",11);
    366e:	6b e0       	ldi	r22, 0x0B	; 11
    3670:	8d ec       	ldi	r24, 0xCD	; 205
    3672:	91 e0       	ldi	r25, 0x01	; 1
    3674:	f1 01       	movw	r30, r2
    3676:	09 95       	icall
							lcd0.gotoxy(3,0);
    3678:	60 e0       	ldi	r22, 0x00	; 0
    367a:	70 e0       	ldi	r23, 0x00	; 0
    367c:	83 e0       	ldi	r24, 0x03	; 3
    367e:	90 e0       	ldi	r25, 0x00	; 0
    3680:	f3 01       	movw	r30, r6
							lcd0.string_size("C - exit",8);
    3682:	09 95       	icall
    3684:	68 e0       	ldi	r22, 0x08	; 8
    3686:	8b e4       	ldi	r24, 0x4B	; 75
    3688:	91 e0       	ldi	r25, 0x01	; 1
    368a:	f1 01       	movw	r30, r2
							/***HOUR***/
							if(keypad.get().character==KEYPADENTERKEY){
    368c:	09 95       	icall
    368e:	f4 01       	movw	r30, r8
    3690:	09 95       	icall
    3692:	24 34       	cpi	r18, 0x44	; 68
    3694:	09 f0       	breq	.+2      	; 0x3698 <main+0xebc>
								strcpy(tstr,keypad.get().string);
    3696:	05 ca       	rjmp	.-3062   	; 0x2aa2 <main+0x2c6>
    3698:	f4 01       	movw	r30, r8
    369a:	09 95       	icall
    369c:	58 8f       	std	Y+24, r21	; 0x18
    369e:	69 8f       	std	Y+25, r22	; 0x19
    36a0:	68 8d       	ldd	r22, Y+24	; 0x18
    36a2:	79 8d       	ldd	r23, Y+25	; 0x19
    36a4:	ce 01       	movw	r24, r28
    36a6:	84 52       	subi	r24, 0x24	; 36
    36a8:	9f 4f       	sbci	r25, 0xFF	; 255
    36aa:	b6 d2       	rcall	.+1388   	; 0x3c18 <strcpy>
								set=function.strToInt(tstr);
    36ac:	e0 91 87 04 	lds	r30, 0x0487	; 0x800487 <function+0x2c>
    36b0:	f0 91 88 04 	lds	r31, 0x0488	; 0x800488 <function+0x2d>
    36b4:	ce 01       	movw	r24, r28
    36b6:	84 52       	subi	r24, 0x24	; 36
    36b8:	9f 4f       	sbci	r25, 0xFF	; 255
    36ba:	09 95       	icall
								if(set >=0 && set <24){
    36bc:	88 31       	cpi	r24, 0x18	; 24
    36be:	91 05       	cpc	r25, r1
    36c0:	88 f4       	brcc	.+34     	; 0x36e4 <main+0xf08>
									rtc.SetHour(rtc.bintobcd(set));
    36c2:	e8 ea       	ldi	r30, 0xA8	; 168
    36c4:	f4 e0       	ldi	r31, 0x04	; 4
    36c6:	02 81       	ldd	r16, Z+2	; 0x02
    36c8:	13 81       	ldd	r17, Z+3	; 0x03
    36ca:	02 8c       	ldd	r0, Z+26	; 0x1a
    36cc:	f3 8d       	ldd	r31, Z+27	; 0x1b
    36ce:	e0 2d       	mov	r30, r0
    36d0:	09 95       	icall
    36d2:	f8 01       	movw	r30, r16
    36d4:	09 95       	icall
									cal='0';
    36d6:	f0 e3       	ldi	r31, 0x30	; 48
    36d8:	ca 5c       	subi	r28, 0xCA	; 202
    36da:	de 4f       	sbci	r29, 0xFE	; 254
    36dc:	f8 83       	st	Y, r31
    36de:	c6 53       	subi	r28, 0x36	; 54
    36e0:	d1 40       	sbci	r29, 0x01	; 1
    36e2:	10 c0       	rjmp	.+32     	; 0x3704 <main+0xf28>
								}else{
									strcpy(tstr,"err");
    36e4:	85 e6       	ldi	r24, 0x65	; 101
    36e6:	92 e7       	ldi	r25, 0x72	; 114
    36e8:	c4 52       	subi	r28, 0x24	; 36
    36ea:	df 4f       	sbci	r29, 0xFF	; 255
    36ec:	99 83       	std	Y+1, r25	; 0x01
    36ee:	88 83       	st	Y, r24
    36f0:	cc 5d       	subi	r28, 0xDC	; 220
    36f2:	d0 40       	sbci	r29, 0x00	; 0
    36f4:	82 e7       	ldi	r24, 0x72	; 114
    36f6:	90 e0       	ldi	r25, 0x00	; 0
    36f8:	c2 52       	subi	r28, 0x22	; 34
    36fa:	df 4f       	sbci	r29, 0xFF	; 255
    36fc:	99 83       	std	Y+1, r25	; 0x01
    36fe:	88 83       	st	Y, r24
    3700:	ce 5d       	subi	r28, 0xDE	; 222
    3702:	d0 40       	sbci	r29, 0x00	; 0
								}
								keypad.flush();
    3704:	c2 5d       	subi	r28, 0xD2	; 210
    3706:	de 4f       	sbci	r29, 0xFE	; 254
    3708:	e8 81       	ld	r30, Y
    370a:	f9 81       	ldd	r31, Y+1	; 0x01
    370c:	ce 52       	subi	r28, 0x2E	; 46
    370e:	d1 40       	sbci	r29, 0x01	; 1
    3710:	09 95       	icall
    3712:	c7 c9       	rjmp	.-3186   	; 0x2aa2 <main+0x2c6>
							}
						break;
						/********************************************************************/
						case '5': // MINUTE
							lcd0.gotoxy(1,0);
    3714:	60 e0       	ldi	r22, 0x00	; 0
    3716:	70 e0       	ldi	r23, 0x00	; 0
    3718:	81 e0       	ldi	r24, 0x01	; 1
    371a:	90 e0       	ldi	r25, 0x00	; 0
    371c:	f3 01       	movw	r30, r6
    371e:	09 95       	icall
							lcd0.string_size("Enter Minutes:",13);
    3720:	6d e0       	ldi	r22, 0x0D	; 13
    3722:	89 ed       	ldi	r24, 0xD9	; 217
    3724:	91 e0       	ldi	r25, 0x01	; 1
    3726:	f1 01       	movw	r30, r2
    3728:	09 95       	icall
							lcd0.gotoxy(3,0);
    372a:	60 e0       	ldi	r22, 0x00	; 0
    372c:	70 e0       	ldi	r23, 0x00	; 0
    372e:	83 e0       	ldi	r24, 0x03	; 3
    3730:	90 e0       	ldi	r25, 0x00	; 0
    3732:	f3 01       	movw	r30, r6
							lcd0.string_size("C - exit",8);
    3734:	09 95       	icall
    3736:	68 e0       	ldi	r22, 0x08	; 8
    3738:	8b e4       	ldi	r24, 0x4B	; 75
    373a:	91 e0       	ldi	r25, 0x01	; 1
    373c:	f1 01       	movw	r30, r2
							/***MINUTE***/
							if(keypad.get().character==KEYPADENTERKEY){
    373e:	09 95       	icall
    3740:	f4 01       	movw	r30, r8
    3742:	09 95       	icall
    3744:	24 34       	cpi	r18, 0x44	; 68
    3746:	09 f0       	breq	.+2      	; 0x374a <main+0xf6e>
								strcpy(tstr,keypad.get().string);
    3748:	ac c9       	rjmp	.-3240   	; 0x2aa2 <main+0x2c6>
    374a:	f4 01       	movw	r30, r8
    374c:	09 95       	icall
    374e:	5e 87       	std	Y+14, r21	; 0x0e
    3750:	6f 87       	std	Y+15, r22	; 0x0f
    3752:	6e 85       	ldd	r22, Y+14	; 0x0e
    3754:	7f 85       	ldd	r23, Y+15	; 0x0f
    3756:	ce 01       	movw	r24, r28
    3758:	84 52       	subi	r24, 0x24	; 36
    375a:	9f 4f       	sbci	r25, 0xFF	; 255
    375c:	5d d2       	rcall	.+1210   	; 0x3c18 <strcpy>
								set=function.strToInt(tstr);
    375e:	e0 91 87 04 	lds	r30, 0x0487	; 0x800487 <function+0x2c>
    3762:	f0 91 88 04 	lds	r31, 0x0488	; 0x800488 <function+0x2d>
    3766:	ce 01       	movw	r24, r28
    3768:	84 52       	subi	r24, 0x24	; 36
    376a:	9f 4f       	sbci	r25, 0xFF	; 255
    376c:	09 95       	icall
								if(set >=0 && set <60){
    376e:	8c 33       	cpi	r24, 0x3C	; 60
    3770:	91 05       	cpc	r25, r1
    3772:	88 f4       	brcc	.+34     	; 0x3796 <main+0xfba>
									rtc.SetMinute(rtc.bintobcd(set));
    3774:	e8 ea       	ldi	r30, 0xA8	; 168
    3776:	f4 e0       	ldi	r31, 0x04	; 4
    3778:	04 81       	ldd	r16, Z+4	; 0x04
    377a:	15 81       	ldd	r17, Z+5	; 0x05
    377c:	02 8c       	ldd	r0, Z+26	; 0x1a
    377e:	f3 8d       	ldd	r31, Z+27	; 0x1b
    3780:	e0 2d       	mov	r30, r0
    3782:	09 95       	icall
    3784:	f8 01       	movw	r30, r16
    3786:	09 95       	icall
									cal='0';
    3788:	f0 e3       	ldi	r31, 0x30	; 48
    378a:	ca 5c       	subi	r28, 0xCA	; 202
    378c:	de 4f       	sbci	r29, 0xFE	; 254
    378e:	f8 83       	st	Y, r31
    3790:	c6 53       	subi	r28, 0x36	; 54
    3792:	d1 40       	sbci	r29, 0x01	; 1
    3794:	10 c0       	rjmp	.+32     	; 0x37b6 <main+0xfda>
								}else{
									strcpy(tstr,"err");
    3796:	85 e6       	ldi	r24, 0x65	; 101
    3798:	92 e7       	ldi	r25, 0x72	; 114
    379a:	c4 52       	subi	r28, 0x24	; 36
    379c:	df 4f       	sbci	r29, 0xFF	; 255
    379e:	99 83       	std	Y+1, r25	; 0x01
    37a0:	88 83       	st	Y, r24
    37a2:	cc 5d       	subi	r28, 0xDC	; 220
    37a4:	d0 40       	sbci	r29, 0x00	; 0
    37a6:	82 e7       	ldi	r24, 0x72	; 114
    37a8:	90 e0       	ldi	r25, 0x00	; 0
    37aa:	c2 52       	subi	r28, 0x22	; 34
    37ac:	df 4f       	sbci	r29, 0xFF	; 255
    37ae:	99 83       	std	Y+1, r25	; 0x01
    37b0:	88 83       	st	Y, r24
    37b2:	ce 5d       	subi	r28, 0xDE	; 222
    37b4:	d0 40       	sbci	r29, 0x00	; 0
								}
								keypad.flush();
    37b6:	c2 5d       	subi	r28, 0xD2	; 210
    37b8:	de 4f       	sbci	r29, 0xFE	; 254
    37ba:	e8 81       	ld	r30, Y
    37bc:	f9 81       	ldd	r31, Y+1	; 0x01
    37be:	ce 52       	subi	r28, 0x2E	; 46
    37c0:	d1 40       	sbci	r29, 0x01	; 1
    37c2:	09 95       	icall
    37c4:	6e c9       	rjmp	.-3364   	; 0x2aa2 <main+0x2c6>
							}
						break;
						/********************************************************************/
						case '6': // SECOND
							lcd0.gotoxy(1,0);
    37c6:	60 e0       	ldi	r22, 0x00	; 0
    37c8:	70 e0       	ldi	r23, 0x00	; 0
    37ca:	81 e0       	ldi	r24, 0x01	; 1
    37cc:	90 e0       	ldi	r25, 0x00	; 0
    37ce:	f3 01       	movw	r30, r6
    37d0:	09 95       	icall
							lcd0.string_size("Enter Seconds:",13);
    37d2:	6d e0       	ldi	r22, 0x0D	; 13
    37d4:	88 ee       	ldi	r24, 0xE8	; 232
    37d6:	91 e0       	ldi	r25, 0x01	; 1
    37d8:	f1 01       	movw	r30, r2
    37da:	09 95       	icall
							lcd0.gotoxy(3,0);
    37dc:	60 e0       	ldi	r22, 0x00	; 0
    37de:	70 e0       	ldi	r23, 0x00	; 0
    37e0:	83 e0       	ldi	r24, 0x03	; 3
    37e2:	90 e0       	ldi	r25, 0x00	; 0
    37e4:	f3 01       	movw	r30, r6
							lcd0.string_size("C - exit",8);
    37e6:	09 95       	icall
    37e8:	68 e0       	ldi	r22, 0x08	; 8
    37ea:	8b e4       	ldi	r24, 0x4B	; 75
    37ec:	91 e0       	ldi	r25, 0x01	; 1
    37ee:	f1 01       	movw	r30, r2
							/***SECOND***/
							if(keypad.get().character==KEYPADENTERKEY){
    37f0:	09 95       	icall
    37f2:	f4 01       	movw	r30, r8
    37f4:	09 95       	icall
    37f6:	24 34       	cpi	r18, 0x44	; 68
    37f8:	09 f0       	breq	.+2      	; 0x37fc <main+0x1020>
								strcpy(tstr,keypad.get().string);
    37fa:	53 c9       	rjmp	.-3418   	; 0x2aa2 <main+0x2c6>
    37fc:	f4 01       	movw	r30, r8
    37fe:	09 95       	icall
    3800:	5c 83       	std	Y+4, r21	; 0x04
    3802:	6d 83       	std	Y+5, r22	; 0x05
    3804:	6c 81       	ldd	r22, Y+4	; 0x04
    3806:	7d 81       	ldd	r23, Y+5	; 0x05
    3808:	ce 01       	movw	r24, r28
    380a:	84 52       	subi	r24, 0x24	; 36
    380c:	9f 4f       	sbci	r25, 0xFF	; 255
    380e:	04 d2       	rcall	.+1032   	; 0x3c18 <strcpy>
								set=function.strToInt(tstr);
    3810:	e0 91 87 04 	lds	r30, 0x0487	; 0x800487 <function+0x2c>
    3814:	f0 91 88 04 	lds	r31, 0x0488	; 0x800488 <function+0x2d>
    3818:	ce 01       	movw	r24, r28
    381a:	84 52       	subi	r24, 0x24	; 36
    381c:	9f 4f       	sbci	r25, 0xFF	; 255
    381e:	09 95       	icall
								if(set >=0 && set <60){
    3820:	8c 33       	cpi	r24, 0x3C	; 60
    3822:	91 05       	cpc	r25, r1
    3824:	88 f4       	brcc	.+34     	; 0x3848 <main+0x106c>
									rtc.SetSecond(rtc.bintobcd(set));
    3826:	e8 ea       	ldi	r30, 0xA8	; 168
    3828:	f4 e0       	ldi	r31, 0x04	; 4
    382a:	06 81       	ldd	r16, Z+6	; 0x06
    382c:	17 81       	ldd	r17, Z+7	; 0x07
    382e:	02 8c       	ldd	r0, Z+26	; 0x1a
    3830:	f3 8d       	ldd	r31, Z+27	; 0x1b
    3832:	e0 2d       	mov	r30, r0
    3834:	09 95       	icall
    3836:	f8 01       	movw	r30, r16
    3838:	09 95       	icall
									cal='0';
    383a:	f0 e3       	ldi	r31, 0x30	; 48
    383c:	ca 5c       	subi	r28, 0xCA	; 202
    383e:	de 4f       	sbci	r29, 0xFE	; 254
    3840:	f8 83       	st	Y, r31
    3842:	c6 53       	subi	r28, 0x36	; 54
    3844:	d1 40       	sbci	r29, 0x01	; 1
    3846:	10 c0       	rjmp	.+32     	; 0x3868 <main+0x108c>
								}else{
									strcpy(tstr,"err");
    3848:	85 e6       	ldi	r24, 0x65	; 101
    384a:	92 e7       	ldi	r25, 0x72	; 114
    384c:	c4 52       	subi	r28, 0x24	; 36
    384e:	df 4f       	sbci	r29, 0xFF	; 255
    3850:	99 83       	std	Y+1, r25	; 0x01
    3852:	88 83       	st	Y, r24
    3854:	cc 5d       	subi	r28, 0xDC	; 220
    3856:	d0 40       	sbci	r29, 0x00	; 0
    3858:	82 e7       	ldi	r24, 0x72	; 114
    385a:	90 e0       	ldi	r25, 0x00	; 0
    385c:	c2 52       	subi	r28, 0x22	; 34
    385e:	df 4f       	sbci	r29, 0xFF	; 255
    3860:	99 83       	std	Y+1, r25	; 0x01
    3862:	88 83       	st	Y, r24
    3864:	ce 5d       	subi	r28, 0xDE	; 222
    3866:	d0 40       	sbci	r29, 0x00	; 0
								}
								keypad.flush();
    3868:	c2 5d       	subi	r28, 0xD2	; 210
    386a:	de 4f       	sbci	r29, 0xFE	; 254
    386c:	e8 81       	ld	r30, Y
    386e:	f9 81       	ldd	r31, Y+1	; 0x01
    3870:	ce 52       	subi	r28, 0x2E	; 46
    3872:	d1 40       	sbci	r29, 0x01	; 1
    3874:	09 95       	icall
    3876:	15 c9       	rjmp	.-3542   	; 0x2aa2 <main+0x2c6>
	rtc.SetClkOut(1, 2); // oscillate pin at 1 sec
	/**********/
	//TODO:: Please write your application code
	while(TRUE){
		/***PREAMBLE***/
		lcd0.reboot();
    3878:	ca 55       	subi	r28, 0x5A	; 90
    387a:	df 4f       	sbci	r29, 0xFF	; 255
    387c:	e8 81       	ld	r30, Y
    387e:	f9 81       	ldd	r31, Y+1	; 0x01
    3880:	c6 5a       	subi	r28, 0xA6	; 166
    3882:	d0 40       	sbci	r29, 0x00	; 0
    3884:	09 95       	icall
		keypad.read();
    3886:	c6 55       	subi	r28, 0x56	; 86
    3888:	df 4f       	sbci	r29, 0xFF	; 255
    388a:	e8 81       	ld	r30, Y
    388c:	f9 81       	ldd	r31, Y+1	; 0x01
    388e:	ca 5a       	subi	r28, 0xAA	; 170
    3890:	d0 40       	sbci	r29, 0x00	; 0
    3892:	09 95       	icall
		uartreceive=uart.read();
    3894:	e0 91 cc 04 	lds	r30, 0x04CC	; 0x8004cc <uart+0x4>
    3898:	f0 91 cd 04 	lds	r31, 0x04CD	; 0x8004cd <uart+0x5>
    389c:	09 95       	icall
    389e:	90 93 42 02 	sts	0x0242, r25	; 0x800242 <uartreceive+0x1>
    38a2:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <uartreceive>
		/***Reading input***/
		lcd0.gotoxy(3,13);
    38a6:	6d e0       	ldi	r22, 0x0D	; 13
    38a8:	70 e0       	ldi	r23, 0x00	; 0
    38aa:	83 e0       	ldi	r24, 0x03	; 3
    38ac:	90 e0       	ldi	r25, 0x00	; 0
    38ae:	f3 01       	movw	r30, r6
    38b0:	09 95       	icall
		lcd0.putch(':');
    38b2:	8a e3       	ldi	r24, 0x3A	; 58
    38b4:	f2 01       	movw	r30, r4
    38b6:	09 95       	icall
		lcd0.string_size(keypad.get().printstring,6);
    38b8:	f4 01       	movw	r30, r8
    38ba:	09 95       	icall
    38bc:	c2 57       	subi	r28, 0x72	; 114
    38be:	df 4f       	sbci	r29, 0xFF	; 255
    38c0:	38 83       	st	Y, r19
    38c2:	ce 58       	subi	r28, 0x8E	; 142
    38c4:	d0 40       	sbci	r29, 0x00	; 0
    38c6:	c1 57       	subi	r28, 0x71	; 113
    38c8:	df 4f       	sbci	r29, 0xFF	; 255
    38ca:	48 83       	st	Y, r20
    38cc:	cf 58       	subi	r28, 0x8F	; 143
    38ce:	d0 40       	sbci	r29, 0x00	; 0
    38d0:	66 e0       	ldi	r22, 0x06	; 6
    38d2:	c2 57       	subi	r28, 0x72	; 114
    38d4:	df 4f       	sbci	r29, 0xFF	; 255
    38d6:	88 81       	ld	r24, Y
    38d8:	99 81       	ldd	r25, Y+1	; 0x01
    38da:	ce 58       	subi	r28, 0x8E	; 142
    38dc:	d0 40       	sbci	r29, 0x00	; 0
    38de:	f1 01       	movw	r30, r2
    38e0:	09 95       	icall
    38e2:	22 c9       	rjmp	.-3516   	; 0x2b28 <main+0x34c>

000038e4 <__vector_15>:
}
/*
** interrupt
*/
ISR(TIMER0_COMP_vect) // 1Hz and usart Tx
{
    38e4:	1f 92       	push	r1
    38e6:	0f 92       	push	r0
    38e8:	0f b6       	in	r0, 0x3f	; 63
    38ea:	0f 92       	push	r0
    38ec:	11 24       	eor	r1, r1
    38ee:	0b b6       	in	r0, 0x3b	; 59
    38f0:	0f 92       	push	r0
    38f2:	7f 92       	push	r7
    38f4:	8f 92       	push	r8
    38f6:	9f 92       	push	r9
    38f8:	af 92       	push	r10
    38fa:	bf 92       	push	r11
    38fc:	cf 92       	push	r12
    38fe:	df 92       	push	r13
    3900:	ef 92       	push	r14
    3902:	ff 92       	push	r15
    3904:	0f 93       	push	r16
    3906:	1f 93       	push	r17
    3908:	2f 93       	push	r18
    390a:	3f 93       	push	r19
    390c:	4f 93       	push	r20
    390e:	5f 93       	push	r21
    3910:	6f 93       	push	r22
    3912:	7f 93       	push	r23
    3914:	8f 93       	push	r24
    3916:	9f 93       	push	r25
    3918:	af 93       	push	r26
    391a:	bf 93       	push	r27
    391c:	cf 93       	push	r28
    391e:	df 93       	push	r29
    3920:	ef 93       	push	r30
    3922:	ff 93       	push	r31
	uint8_t Sreg;
	Sreg=SREG;
    3924:	7f b6       	in	r7, 0x3f	; 63
	SREG&=~(1<<7);
    3926:	8f b7       	in	r24, 0x3f	; 63
    3928:	8f 77       	andi	r24, 0x7F	; 127
    392a:	8f bf       	out	0x3f, r24	; 63
	if(count>59){ //59 -> 1Hz
    392c:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <count>
    3930:	8c 33       	cpi	r24, 0x3C	; 60
    3932:	f8 f0       	brcs	.+62     	; 0x3972 <__vector_15+0x8e>
		increment++;
    3934:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <increment>
    3938:	8f 5f       	subi	r24, 0xFF	; 255
    393a:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <increment>
		if((increment & 0x0F) < 8){
    393e:	8f 70       	andi	r24, 0x0F	; 15
    3940:	90 e0       	ldi	r25, 0x00	; 0
    3942:	08 97       	sbiw	r24, 0x08	; 8
    3944:	54 f4       	brge	.+20     	; 0x395a <__vector_15+0x76>
			shift.bit(0);
    3946:	c5 e5       	ldi	r28, 0x55	; 85
    3948:	d4 e0       	ldi	r29, 0x04	; 4
    394a:	e8 81       	ld	r30, Y
    394c:	f9 81       	ldd	r31, Y+1	; 0x01
    394e:	80 e0       	ldi	r24, 0x00	; 0
    3950:	09 95       	icall
			shift.out();
    3952:	ec 81       	ldd	r30, Y+4	; 0x04
    3954:	fd 81       	ldd	r31, Y+5	; 0x05
    3956:	09 95       	icall
    3958:	09 c0       	rjmp	.+18     	; 0x396c <__vector_15+0x88>
		}else{
			shift.bit(1);
    395a:	c5 e5       	ldi	r28, 0x55	; 85
    395c:	d4 e0       	ldi	r29, 0x04	; 4
    395e:	e8 81       	ld	r30, Y
    3960:	f9 81       	ldd	r31, Y+1	; 0x01
    3962:	81 e0       	ldi	r24, 0x01	; 1
    3964:	09 95       	icall
			shift.out();
    3966:	ec 81       	ldd	r30, Y+4	; 0x04
    3968:	fd 81       	ldd	r31, Y+5	; 0x05
    396a:	09 95       	icall
		}
		count=0;
    396c:	10 92 47 02 	sts	0x0247, r1	; 0x800247 <count>
    3970:	03 c0       	rjmp	.+6      	; 0x3978 <__vector_15+0x94>
	}else
		count++;
    3972:	8f 5f       	subi	r24, 0xFF	; 255
    3974:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <count>
	/***Send Data to Putty***/
	if(uartcount>100){
    3978:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <uartcount>
    397c:	85 36       	cpi	r24, 0x65	; 101
    397e:	08 f4       	brcc	.+2      	; 0x3982 <__vector_15+0x9e>
    3980:	88 c0       	rjmp	.+272    	; 0x3a92 <__vector_15+0x1ae>
		if(!strcmp(uartreceive,"position\r")){
    3982:	67 ef       	ldi	r22, 0xF7	; 247
    3984:	71 e0       	ldi	r23, 0x01	; 1
    3986:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <uartreceive>
    398a:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <uartreceive+0x1>
    398e:	3b d1       	rcall	.+630    	; 0x3c06 <strcmp>
    3990:	89 2b       	or	r24, r25
    3992:	b9 f4       	brne	.+46     	; 0x39c2 <__vector_15+0xde>
			uart.putc('>');uart.puts("analog Reading: ");uart.puts(ptr);uart.puts("\r\n");
    3994:	c8 ec       	ldi	r28, 0xC8	; 200
    3996:	d4 e0       	ldi	r29, 0x04	; 4
    3998:	e8 85       	ldd	r30, Y+8	; 0x08
    399a:	f9 85       	ldd	r31, Y+9	; 0x09
    399c:	8e e3       	ldi	r24, 0x3E	; 62
    399e:	09 95       	icall
    39a0:	ea 85       	ldd	r30, Y+10	; 0x0a
    39a2:	fb 85       	ldd	r31, Y+11	; 0x0b
    39a4:	81 e0       	ldi	r24, 0x01	; 1
    39a6:	92 e0       	ldi	r25, 0x02	; 2
    39a8:	09 95       	icall
    39aa:	ea 85       	ldd	r30, Y+10	; 0x0a
    39ac:	fb 85       	ldd	r31, Y+11	; 0x0b
    39ae:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <ptr>
    39b2:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <ptr+0x1>
    39b6:	09 95       	icall
    39b8:	ea 85       	ldd	r30, Y+10	; 0x0a
    39ba:	fb 85       	ldd	r31, Y+11	; 0x0b
    39bc:	8e e5       	ldi	r24, 0x5E	; 94
    39be:	91 e0       	ldi	r25, 0x01	; 1
    39c0:	09 95       	icall
		}
		if(!strcmp(uartreceive,"time\r")){
    39c2:	62 e1       	ldi	r22, 0x12	; 18
    39c4:	72 e0       	ldi	r23, 0x02	; 2
    39c6:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <uartreceive>
    39ca:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <uartreceive+0x1>
    39ce:	1b d1       	rcall	.+566    	; 0x3c06 <strcmp>
    39d0:	89 2b       	or	r24, r25
    39d2:	09 f0       	breq	.+2      	; 0x39d6 <__vector_15+0xf2>
    39d4:	5b c0       	rjmp	.+182    	; 0x3a8c <__vector_15+0x1a8>
			//uart.putc('>');uart.puts("analog Reading: ");uart.puts(ptr);uart.puts("\r\n");
			uart.puts(function.ui16toa(rtc.bcd2dec(tm.hours)));
    39d6:	c8 ec       	ldi	r28, 0xC8	; 200
    39d8:	d4 e0       	ldi	r29, 0x04	; 4
    39da:	aa 84       	ldd	r10, Y+10	; 0x0a
    39dc:	bb 84       	ldd	r11, Y+11	; 0x0b
    39de:	0f 2e       	mov	r0, r31
    39e0:	fb e5       	ldi	r31, 0x5B	; 91
    39e2:	cf 2e       	mov	r12, r31
    39e4:	f4 e0       	ldi	r31, 0x04	; 4
    39e6:	df 2e       	mov	r13, r31
    39e8:	f0 2d       	mov	r31, r0
    39ea:	d6 01       	movw	r26, r12
    39ec:	92 96       	adiw	r26, 0x22	; 34
    39ee:	8d 90       	ld	r8, X+
    39f0:	9c 90       	ld	r9, X
    39f2:	93 97       	sbiw	r26, 0x23	; 35
    39f4:	05 ea       	ldi	r16, 0xA5	; 165
    39f6:	14 e0       	ldi	r17, 0x04	; 4
    39f8:	0f 2e       	mov	r0, r31
    39fa:	f8 ea       	ldi	r31, 0xA8	; 168
    39fc:	ef 2e       	mov	r14, r31
    39fe:	f4 e0       	ldi	r31, 0x04	; 4
    3a00:	ff 2e       	mov	r15, r31
    3a02:	f0 2d       	mov	r31, r0
    3a04:	d7 01       	movw	r26, r14
    3a06:	58 96       	adiw	r26, 0x18	; 24
    3a08:	ed 91       	ld	r30, X+
    3a0a:	fc 91       	ld	r31, X
    3a0c:	59 97       	sbiw	r26, 0x19	; 25
    3a0e:	d8 01       	movw	r26, r16
    3a10:	8c 91       	ld	r24, X
    3a12:	09 95       	icall
    3a14:	90 e0       	ldi	r25, 0x00	; 0
    3a16:	f4 01       	movw	r30, r8
    3a18:	09 95       	icall
    3a1a:	f5 01       	movw	r30, r10
    3a1c:	09 95       	icall
			uart.putc(':');
    3a1e:	e8 85       	ldd	r30, Y+8	; 0x08
    3a20:	f9 85       	ldd	r31, Y+9	; 0x09
    3a22:	8a e3       	ldi	r24, 0x3A	; 58
    3a24:	09 95       	icall
			uart.puts(function.ui16toa(rtc.bcd2dec(tm.minutes)));
    3a26:	aa 84       	ldd	r10, Y+10	; 0x0a
    3a28:	bb 84       	ldd	r11, Y+11	; 0x0b
    3a2a:	d6 01       	movw	r26, r12
    3a2c:	92 96       	adiw	r26, 0x22	; 34
    3a2e:	8d 90       	ld	r8, X+
    3a30:	9c 90       	ld	r9, X
    3a32:	93 97       	sbiw	r26, 0x23	; 35
    3a34:	d7 01       	movw	r26, r14
    3a36:	58 96       	adiw	r26, 0x18	; 24
    3a38:	ed 91       	ld	r30, X+
    3a3a:	fc 91       	ld	r31, X
    3a3c:	59 97       	sbiw	r26, 0x19	; 25
    3a3e:	d8 01       	movw	r26, r16
    3a40:	11 96       	adiw	r26, 0x01	; 1
    3a42:	8c 91       	ld	r24, X
    3a44:	09 95       	icall
    3a46:	90 e0       	ldi	r25, 0x00	; 0
    3a48:	f4 01       	movw	r30, r8
    3a4a:	09 95       	icall
    3a4c:	f5 01       	movw	r30, r10
    3a4e:	09 95       	icall
			uart.putc(':');
    3a50:	e8 85       	ldd	r30, Y+8	; 0x08
    3a52:	f9 85       	ldd	r31, Y+9	; 0x09
    3a54:	8a e3       	ldi	r24, 0x3A	; 58
    3a56:	09 95       	icall
			uart.puts(function.ui16toa(rtc.bcd2dec(tm.VL_seconds)));
    3a58:	aa 84       	ldd	r10, Y+10	; 0x0a
    3a5a:	bb 84       	ldd	r11, Y+11	; 0x0b
    3a5c:	d6 01       	movw	r26, r12
    3a5e:	92 96       	adiw	r26, 0x22	; 34
    3a60:	cd 90       	ld	r12, X+
    3a62:	dc 90       	ld	r13, X
    3a64:	93 97       	sbiw	r26, 0x23	; 35
    3a66:	d7 01       	movw	r26, r14
    3a68:	58 96       	adiw	r26, 0x18	; 24
    3a6a:	ed 91       	ld	r30, X+
    3a6c:	fc 91       	ld	r31, X
    3a6e:	59 97       	sbiw	r26, 0x19	; 25
    3a70:	d8 01       	movw	r26, r16
    3a72:	12 96       	adiw	r26, 0x02	; 2
    3a74:	8c 91       	ld	r24, X
    3a76:	09 95       	icall
    3a78:	90 e0       	ldi	r25, 0x00	; 0
    3a7a:	f6 01       	movw	r30, r12
    3a7c:	09 95       	icall
    3a7e:	f5 01       	movw	r30, r10
    3a80:	09 95       	icall
			uart.puts("\r\n");
    3a82:	ea 85       	ldd	r30, Y+10	; 0x0a
    3a84:	fb 85       	ldd	r31, Y+11	; 0x0b
    3a86:	8e e5       	ldi	r24, 0x5E	; 94
    3a88:	91 e0       	ldi	r25, 0x01	; 1
    3a8a:	09 95       	icall
		}
		uartcount=0;
    3a8c:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <uartcount>
    3a90:	03 c0       	rjmp	.+6      	; 0x3a98 <__vector_15+0x1b4>
	}
	else{
		uartcount++;
    3a92:	8f 5f       	subi	r24, 0xFF	; 255
    3a94:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <uartcount>
	}
	SREG=Sreg;
    3a98:	7f be       	out	0x3f, r7	; 63
}
    3a9a:	ff 91       	pop	r31
    3a9c:	ef 91       	pop	r30
    3a9e:	df 91       	pop	r29
    3aa0:	cf 91       	pop	r28
    3aa2:	bf 91       	pop	r27
    3aa4:	af 91       	pop	r26
    3aa6:	9f 91       	pop	r25
    3aa8:	8f 91       	pop	r24
    3aaa:	7f 91       	pop	r23
    3aac:	6f 91       	pop	r22
    3aae:	5f 91       	pop	r21
    3ab0:	4f 91       	pop	r20
    3ab2:	3f 91       	pop	r19
    3ab4:	2f 91       	pop	r18
    3ab6:	1f 91       	pop	r17
    3ab8:	0f 91       	pop	r16
    3aba:	ff 90       	pop	r15
    3abc:	ef 90       	pop	r14
    3abe:	df 90       	pop	r13
    3ac0:	cf 90       	pop	r12
    3ac2:	bf 90       	pop	r11
    3ac4:	af 90       	pop	r10
    3ac6:	9f 90       	pop	r9
    3ac8:	8f 90       	pop	r8
    3aca:	7f 90       	pop	r7
    3acc:	0f 90       	pop	r0
    3ace:	0b be       	out	0x3b, r0	; 59
    3ad0:	0f 90       	pop	r0
    3ad2:	0f be       	out	0x3f, r0	; 63
    3ad4:	0f 90       	pop	r0
    3ad6:	1f 90       	pop	r1
    3ad8:	18 95       	reti

00003ada <__mulsi3>:
    3ada:	db 01       	movw	r26, r22
    3adc:	8f 93       	push	r24
    3ade:	9f 93       	push	r25
    3ae0:	88 d0       	rcall	.+272    	; 0x3bf2 <__muluhisi3>
    3ae2:	bf 91       	pop	r27
    3ae4:	af 91       	pop	r26
    3ae6:	a2 9f       	mul	r26, r18
    3ae8:	80 0d       	add	r24, r0
    3aea:	91 1d       	adc	r25, r1
    3aec:	a3 9f       	mul	r26, r19
    3aee:	90 0d       	add	r25, r0
    3af0:	b2 9f       	mul	r27, r18
    3af2:	90 0d       	add	r25, r0
    3af4:	11 24       	eor	r1, r1
    3af6:	08 95       	ret

00003af8 <__udivmodhi4>:
    3af8:	aa 1b       	sub	r26, r26
    3afa:	bb 1b       	sub	r27, r27
    3afc:	51 e1       	ldi	r21, 0x11	; 17
    3afe:	07 c0       	rjmp	.+14     	; 0x3b0e <__udivmodhi4_ep>

00003b00 <__udivmodhi4_loop>:
    3b00:	aa 1f       	adc	r26, r26
    3b02:	bb 1f       	adc	r27, r27
    3b04:	a6 17       	cp	r26, r22
    3b06:	b7 07       	cpc	r27, r23
    3b08:	10 f0       	brcs	.+4      	; 0x3b0e <__udivmodhi4_ep>
    3b0a:	a6 1b       	sub	r26, r22
    3b0c:	b7 0b       	sbc	r27, r23

00003b0e <__udivmodhi4_ep>:
    3b0e:	88 1f       	adc	r24, r24
    3b10:	99 1f       	adc	r25, r25
    3b12:	5a 95       	dec	r21
    3b14:	a9 f7       	brne	.-22     	; 0x3b00 <__udivmodhi4_loop>
    3b16:	80 95       	com	r24
    3b18:	90 95       	com	r25
    3b1a:	bc 01       	movw	r22, r24
    3b1c:	cd 01       	movw	r24, r26
    3b1e:	08 95       	ret

00003b20 <__divmodhi4>:
    3b20:	97 fb       	bst	r25, 7
    3b22:	07 2e       	mov	r0, r23
    3b24:	16 f4       	brtc	.+4      	; 0x3b2a <__divmodhi4+0xa>
    3b26:	00 94       	com	r0
    3b28:	06 d0       	rcall	.+12     	; 0x3b36 <__divmodhi4_neg1>
    3b2a:	77 fd       	sbrc	r23, 7
    3b2c:	08 d0       	rcall	.+16     	; 0x3b3e <__divmodhi4_neg2>
    3b2e:	e4 df       	rcall	.-56     	; 0x3af8 <__udivmodhi4>
    3b30:	07 fc       	sbrc	r0, 7
    3b32:	05 d0       	rcall	.+10     	; 0x3b3e <__divmodhi4_neg2>
    3b34:	3e f4       	brtc	.+14     	; 0x3b44 <__divmodhi4_exit>

00003b36 <__divmodhi4_neg1>:
    3b36:	90 95       	com	r25
    3b38:	81 95       	neg	r24
    3b3a:	9f 4f       	sbci	r25, 0xFF	; 255
    3b3c:	08 95       	ret

00003b3e <__divmodhi4_neg2>:
    3b3e:	70 95       	com	r23
    3b40:	61 95       	neg	r22
    3b42:	7f 4f       	sbci	r23, 0xFF	; 255

00003b44 <__divmodhi4_exit>:
    3b44:	08 95       	ret

00003b46 <__udivmodsi4>:
    3b46:	a1 e2       	ldi	r26, 0x21	; 33
    3b48:	1a 2e       	mov	r1, r26
    3b4a:	aa 1b       	sub	r26, r26
    3b4c:	bb 1b       	sub	r27, r27
    3b4e:	fd 01       	movw	r30, r26
    3b50:	0d c0       	rjmp	.+26     	; 0x3b6c <__udivmodsi4_ep>

00003b52 <__udivmodsi4_loop>:
    3b52:	aa 1f       	adc	r26, r26
    3b54:	bb 1f       	adc	r27, r27
    3b56:	ee 1f       	adc	r30, r30
    3b58:	ff 1f       	adc	r31, r31
    3b5a:	a2 17       	cp	r26, r18
    3b5c:	b3 07       	cpc	r27, r19
    3b5e:	e4 07       	cpc	r30, r20
    3b60:	f5 07       	cpc	r31, r21
    3b62:	20 f0       	brcs	.+8      	; 0x3b6c <__udivmodsi4_ep>
    3b64:	a2 1b       	sub	r26, r18
    3b66:	b3 0b       	sbc	r27, r19
    3b68:	e4 0b       	sbc	r30, r20
    3b6a:	f5 0b       	sbc	r31, r21

00003b6c <__udivmodsi4_ep>:
    3b6c:	66 1f       	adc	r22, r22
    3b6e:	77 1f       	adc	r23, r23
    3b70:	88 1f       	adc	r24, r24
    3b72:	99 1f       	adc	r25, r25
    3b74:	1a 94       	dec	r1
    3b76:	69 f7       	brne	.-38     	; 0x3b52 <__udivmodsi4_loop>
    3b78:	60 95       	com	r22
    3b7a:	70 95       	com	r23
    3b7c:	80 95       	com	r24
    3b7e:	90 95       	com	r25
    3b80:	9b 01       	movw	r18, r22
    3b82:	ac 01       	movw	r20, r24
    3b84:	bd 01       	movw	r22, r26
    3b86:	cf 01       	movw	r24, r30
    3b88:	08 95       	ret

00003b8a <__divmodsi4>:
    3b8a:	05 2e       	mov	r0, r21
    3b8c:	97 fb       	bst	r25, 7
    3b8e:	16 f4       	brtc	.+4      	; 0x3b94 <__divmodsi4+0xa>
    3b90:	00 94       	com	r0
    3b92:	0f d0       	rcall	.+30     	; 0x3bb2 <__negsi2>
    3b94:	57 fd       	sbrc	r21, 7
    3b96:	05 d0       	rcall	.+10     	; 0x3ba2 <__divmodsi4_neg2>
    3b98:	d6 df       	rcall	.-84     	; 0x3b46 <__udivmodsi4>
    3b9a:	07 fc       	sbrc	r0, 7
    3b9c:	02 d0       	rcall	.+4      	; 0x3ba2 <__divmodsi4_neg2>
    3b9e:	46 f4       	brtc	.+16     	; 0x3bb0 <__divmodsi4_exit>
    3ba0:	08 c0       	rjmp	.+16     	; 0x3bb2 <__negsi2>

00003ba2 <__divmodsi4_neg2>:
    3ba2:	50 95       	com	r21
    3ba4:	40 95       	com	r20
    3ba6:	30 95       	com	r19
    3ba8:	21 95       	neg	r18
    3baa:	3f 4f       	sbci	r19, 0xFF	; 255
    3bac:	4f 4f       	sbci	r20, 0xFF	; 255
    3bae:	5f 4f       	sbci	r21, 0xFF	; 255

00003bb0 <__divmodsi4_exit>:
    3bb0:	08 95       	ret

00003bb2 <__negsi2>:
    3bb2:	90 95       	com	r25
    3bb4:	80 95       	com	r24
    3bb6:	70 95       	com	r23
    3bb8:	61 95       	neg	r22
    3bba:	7f 4f       	sbci	r23, 0xFF	; 255
    3bbc:	8f 4f       	sbci	r24, 0xFF	; 255
    3bbe:	9f 4f       	sbci	r25, 0xFF	; 255
    3bc0:	08 95       	ret

00003bc2 <__tablejump2__>:
    3bc2:	ee 0f       	add	r30, r30
    3bc4:	ff 1f       	adc	r31, r31
    3bc6:	00 24       	eor	r0, r0
    3bc8:	00 1c       	adc	r0, r0
    3bca:	0b be       	out	0x3b, r0	; 59
    3bcc:	07 90       	elpm	r0, Z+
    3bce:	f6 91       	elpm	r31, Z
    3bd0:	e0 2d       	mov	r30, r0
    3bd2:	09 94       	ijmp

00003bd4 <__umulhisi3>:
    3bd4:	a2 9f       	mul	r26, r18
    3bd6:	b0 01       	movw	r22, r0
    3bd8:	b3 9f       	mul	r27, r19
    3bda:	c0 01       	movw	r24, r0
    3bdc:	a3 9f       	mul	r26, r19
    3bde:	70 0d       	add	r23, r0
    3be0:	81 1d       	adc	r24, r1
    3be2:	11 24       	eor	r1, r1
    3be4:	91 1d       	adc	r25, r1
    3be6:	b2 9f       	mul	r27, r18
    3be8:	70 0d       	add	r23, r0
    3bea:	81 1d       	adc	r24, r1
    3bec:	11 24       	eor	r1, r1
    3bee:	91 1d       	adc	r25, r1
    3bf0:	08 95       	ret

00003bf2 <__muluhisi3>:
    3bf2:	f0 df       	rcall	.-32     	; 0x3bd4 <__umulhisi3>
    3bf4:	a5 9f       	mul	r26, r21
    3bf6:	90 0d       	add	r25, r0
    3bf8:	b4 9f       	mul	r27, r20
    3bfa:	90 0d       	add	r25, r0
    3bfc:	a4 9f       	mul	r26, r20
    3bfe:	80 0d       	add	r24, r0
    3c00:	91 1d       	adc	r25, r1
    3c02:	11 24       	eor	r1, r1
    3c04:	08 95       	ret

00003c06 <strcmp>:
    3c06:	fb 01       	movw	r30, r22
    3c08:	dc 01       	movw	r26, r24
    3c0a:	8d 91       	ld	r24, X+
    3c0c:	01 90       	ld	r0, Z+
    3c0e:	80 19       	sub	r24, r0
    3c10:	01 10       	cpse	r0, r1
    3c12:	d9 f3       	breq	.-10     	; 0x3c0a <strcmp+0x4>
    3c14:	99 0b       	sbc	r25, r25
    3c16:	08 95       	ret

00003c18 <strcpy>:
    3c18:	fb 01       	movw	r30, r22
    3c1a:	dc 01       	movw	r26, r24
    3c1c:	01 90       	ld	r0, Z+
    3c1e:	0d 92       	st	X+, r0
    3c20:	00 20       	and	r0, r0
    3c22:	e1 f7       	brne	.-8      	; 0x3c1c <strcpy+0x4>
    3c24:	08 95       	ret

00003c26 <strncpy>:
    3c26:	fb 01       	movw	r30, r22
    3c28:	dc 01       	movw	r26, r24
    3c2a:	41 50       	subi	r20, 0x01	; 1
    3c2c:	50 40       	sbci	r21, 0x00	; 0
    3c2e:	48 f0       	brcs	.+18     	; 0x3c42 <strncpy+0x1c>
    3c30:	01 90       	ld	r0, Z+
    3c32:	0d 92       	st	X+, r0
    3c34:	00 20       	and	r0, r0
    3c36:	c9 f7       	brne	.-14     	; 0x3c2a <strncpy+0x4>
    3c38:	01 c0       	rjmp	.+2      	; 0x3c3c <strncpy+0x16>
    3c3a:	1d 92       	st	X+, r1
    3c3c:	41 50       	subi	r20, 0x01	; 1
    3c3e:	50 40       	sbci	r21, 0x00	; 0
    3c40:	e0 f7       	brcc	.-8      	; 0x3c3a <strncpy+0x14>
    3c42:	08 95       	ret

00003c44 <_exit>:
    3c44:	f8 94       	cli

00003c46 <__stop_program>:
    3c46:	ff cf       	rjmp	.-2      	; 0x3c46 <__stop_program>
