
Atmega128.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f6  00800100  00003b4a  00003bde  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003b4a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000019f  008001f6  008001f6  00003cd4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003cd4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003d04  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000006e0  00000000  00000000  00003d40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000833b  00000000  00000000  00004420  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001dc8  00000000  00000000  0000c75b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004590  00000000  00000000  0000e523  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001430  00000000  00000000  00012ab4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000016f8  00000000  00000000  00013ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006c28  00000000  00000000  000155dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000660  00000000  00000000  0001c204  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	67 c0       	rjmp	.+206    	; 0xd0 <__ctors_end>
       2:	00 00       	nop
       4:	84 c0       	rjmp	.+264    	; 0x10e <__bad_interrupt>
       6:	00 00       	nop
       8:	82 c0       	rjmp	.+260    	; 0x10e <__bad_interrupt>
       a:	00 00       	nop
       c:	80 c0       	rjmp	.+256    	; 0x10e <__bad_interrupt>
       e:	00 00       	nop
      10:	7e c0       	rjmp	.+252    	; 0x10e <__bad_interrupt>
      12:	00 00       	nop
      14:	7c c0       	rjmp	.+248    	; 0x10e <__bad_interrupt>
      16:	00 00       	nop
      18:	7a c0       	rjmp	.+244    	; 0x10e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	78 c0       	rjmp	.+240    	; 0x10e <__bad_interrupt>
      1e:	00 00       	nop
      20:	76 c0       	rjmp	.+236    	; 0x10e <__bad_interrupt>
      22:	00 00       	nop
      24:	74 c0       	rjmp	.+232    	; 0x10e <__bad_interrupt>
      26:	00 00       	nop
      28:	ee c4       	rjmp	.+2524   	; 0xa06 <__vector_10>
      2a:	00 00       	nop
      2c:	ba c4       	rjmp	.+2420   	; 0x9a2 <__vector_11>
      2e:	00 00       	nop
      30:	c2 c4       	rjmp	.+2436   	; 0x9b6 <__vector_12>
      32:	00 00       	nop
      34:	ca c4       	rjmp	.+2452   	; 0x9ca <__vector_13>
      36:	00 00       	nop
      38:	dc c4       	rjmp	.+2488   	; 0x9f2 <__vector_14>
      3a:	00 00       	nop
      3c:	0c 94 59 1c 	jmp	0x38b2	; 0x38b2 <__vector_15>
      40:	a6 c4       	rjmp	.+2380   	; 0x98e <__vector_16>
      42:	00 00       	nop
      44:	64 c0       	rjmp	.+200    	; 0x10e <__bad_interrupt>
      46:	00 00       	nop
      48:	49 c5       	rjmp	.+2706   	; 0xadc <__vector_18>
      4a:	00 00       	nop
      4c:	7f c5       	rjmp	.+2814   	; 0xb4c <__vector_19>
      4e:	00 00       	nop
      50:	5e c0       	rjmp	.+188    	; 0x10e <__bad_interrupt>
      52:	00 00       	nop
      54:	da c1       	rjmp	.+948    	; 0x40a <__vector_21>
      56:	00 00       	nop
      58:	5a c0       	rjmp	.+180    	; 0x10e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	58 c0       	rjmp	.+176    	; 0x10e <__bad_interrupt>
      5e:	00 00       	nop
      60:	be c4       	rjmp	.+2428   	; 0x9de <__vector_24>
      62:	00 00       	nop
      64:	da c4       	rjmp	.+2484   	; 0xa1a <__vector_25>
      66:	00 00       	nop
      68:	e2 c4       	rjmp	.+2500   	; 0xa2e <__vector_26>
      6a:	00 00       	nop
      6c:	ea c4       	rjmp	.+2516   	; 0xa42 <__vector_27>
      6e:	00 00       	nop
      70:	f2 c4       	rjmp	.+2532   	; 0xa56 <__vector_28>
      72:	00 00       	nop
      74:	fa c4       	rjmp	.+2548   	; 0xa6a <__vector_29>
      76:	00 00       	nop
      78:	03 c7       	rjmp	.+3590   	; 0xe80 <__vector_30>
      7a:	00 00       	nop
      7c:	3c c7       	rjmp	.+3704   	; 0xef6 <__vector_31>
      7e:	00 00       	nop
      80:	46 c0       	rjmp	.+140    	; 0x10e <__bad_interrupt>
      82:	00 00       	nop
      84:	44 c0       	rjmp	.+136    	; 0x10e <__bad_interrupt>
      86:	00 00       	nop
      88:	42 c0       	rjmp	.+132    	; 0x10e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e8 03       	fmulsu	r22, r16
      8e:	ec 03       	fmulsu	r22, r20
      90:	f0 03       	fmuls	r23, r16
      92:	f4 03       	fmuls	r23, r20
      94:	f8 03       	fmulsu	r23, r16
      96:	ff 03       	fmulsu	r23, r23
      98:	06 04       	cpc	r0, r6
      9a:	0d 04       	cpc	r0, r13
      9c:	11 04       	cpc	r1, r1
      9e:	18 04       	cpc	r1, r8
      a0:	1f 04       	cpc	r1, r15
      a2:	26 04       	cpc	r2, r6
      a4:	2a 04       	cpc	r2, r10
      a6:	31 04       	cpc	r3, r1
      a8:	38 04       	cpc	r3, r8
      aa:	54 04       	cpc	r5, r4
      ac:	58 04       	cpc	r5, r8
      ae:	5c 04       	cpc	r5, r12
      b0:	60 04       	cpc	r6, r0
      b2:	66 04       	cpc	r6, r6
      b4:	6a 04       	cpc	r6, r10
      b6:	6e 04       	cpc	r6, r14
      b8:	72 04       	cpc	r7, r2
      ba:	7b 04       	cpc	r7, r11
      bc:	7f 04       	cpc	r7, r15
      be:	83 04       	cpc	r8, r3
      c0:	8c 04       	cpc	r8, r12
      c2:	04 19       	sub	r16, r4
      c4:	19 1a       	sub	r1, r25
      c6:	79 1a       	sub	r7, r25
      c8:	d9 1a       	sub	r13, r25
      ca:	39 1b       	sub	r19, r25
      cc:	99 1b       	sub	r25, r25
      ce:	f9 1b       	sub	r31, r25

000000d0 <__ctors_end>:
      d0:	11 24       	eor	r1, r1
      d2:	1f be       	out	0x3f, r1	; 63
      d4:	cf ef       	ldi	r28, 0xFF	; 255
      d6:	d0 e1       	ldi	r29, 0x10	; 16
      d8:	de bf       	out	0x3e, r29	; 62
      da:	cd bf       	out	0x3d, r28	; 61

000000dc <__do_copy_data>:
      dc:	11 e0       	ldi	r17, 0x01	; 1
      de:	a0 e0       	ldi	r26, 0x00	; 0
      e0:	b1 e0       	ldi	r27, 0x01	; 1
      e2:	ea e4       	ldi	r30, 0x4A	; 74
      e4:	fb e3       	ldi	r31, 0x3B	; 59
      e6:	00 e0       	ldi	r16, 0x00	; 0
      e8:	0b bf       	out	0x3b, r16	; 59
      ea:	02 c0       	rjmp	.+4      	; 0xf0 <__do_copy_data+0x14>
      ec:	07 90       	elpm	r0, Z+
      ee:	0d 92       	st	X+, r0
      f0:	a6 3f       	cpi	r26, 0xF6	; 246
      f2:	b1 07       	cpc	r27, r17
      f4:	d9 f7       	brne	.-10     	; 0xec <__do_copy_data+0x10>

000000f6 <__do_clear_bss>:
      f6:	23 e0       	ldi	r18, 0x03	; 3
      f8:	a6 ef       	ldi	r26, 0xF6	; 246
      fa:	b1 e0       	ldi	r27, 0x01	; 1
      fc:	01 c0       	rjmp	.+2      	; 0x100 <.do_clear_bss_start>

000000fe <.do_clear_bss_loop>:
      fe:	1d 92       	st	X+, r1

00000100 <.do_clear_bss_start>:
     100:	a5 39       	cpi	r26, 0x95	; 149
     102:	b2 07       	cpc	r27, r18
     104:	e1 f7       	brne	.-8      	; 0xfe <.do_clear_bss_loop>
     106:	0e 94 18 14 	call	0x2830	; 0x2830 <main>
     10a:	0c 94 a3 1d 	jmp	0x3b46	; 0x3b46 <_exit>

0000010e <__bad_interrupt>:
     10e:	78 cf       	rjmp	.-272    	; 0x0 <__vectors>

00000110 <HC595_shift_bit>:
	//
	return hc595;
}
void HC595_shift_bit(uint8_t bool)
{
	if (bool)
     110:	88 23       	and	r24, r24
     112:	89 f0       	breq	.+34     	; 0x136 <HC595_shift_bit+0x26>
		*hc595_PORT |= (1<<HC595_datapin); //Data bit HIGH
     114:	e0 91 b2 02 	lds	r30, 0x02B2	; 0x8002b2 <hc595_PORT>
     118:	f0 91 b3 02 	lds	r31, 0x02B3	; 0x8002b3 <hc595_PORT+0x1>
     11c:	20 81       	ld	r18, Z
     11e:	81 e0       	ldi	r24, 0x01	; 1
     120:	90 e0       	ldi	r25, 0x00	; 0
     122:	00 90 b4 02 	lds	r0, 0x02B4	; 0x8002b4 <HC595_datapin>
     126:	02 c0       	rjmp	.+4      	; 0x12c <HC595_shift_bit+0x1c>
     128:	88 0f       	add	r24, r24
     12a:	99 1f       	adc	r25, r25
     12c:	0a 94       	dec	r0
     12e:	e2 f7       	brpl	.-8      	; 0x128 <HC595_shift_bit+0x18>
     130:	82 2b       	or	r24, r18
     132:	80 83       	st	Z, r24
     134:	11 c0       	rjmp	.+34     	; 0x158 <HC595_shift_bit+0x48>
	else
		*hc595_PORT &= ~(1<<HC595_datapin); //Data bit LOW
     136:	e0 91 b2 02 	lds	r30, 0x02B2	; 0x8002b2 <hc595_PORT>
     13a:	f0 91 b3 02 	lds	r31, 0x02B3	; 0x8002b3 <hc595_PORT+0x1>
     13e:	20 81       	ld	r18, Z
     140:	81 e0       	ldi	r24, 0x01	; 1
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	00 90 b4 02 	lds	r0, 0x02B4	; 0x8002b4 <HC595_datapin>
     148:	02 c0       	rjmp	.+4      	; 0x14e <HC595_shift_bit+0x3e>
     14a:	88 0f       	add	r24, r24
     14c:	99 1f       	adc	r25, r25
     14e:	0a 94       	dec	r0
     150:	e2 f7       	brpl	.-8      	; 0x14a <HC595_shift_bit+0x3a>
     152:	80 95       	com	r24
     154:	82 23       	and	r24, r18
     156:	80 83       	st	Z, r24
	*hc595_PORT |= (1<<HC595_clkpin); // Shift bit
     158:	e0 91 b2 02 	lds	r30, 0x02B2	; 0x8002b2 <hc595_PORT>
     15c:	f0 91 b3 02 	lds	r31, 0x02B3	; 0x8002b3 <hc595_PORT+0x1>
     160:	40 81       	ld	r20, Z
     162:	81 e0       	ldi	r24, 0x01	; 1
     164:	90 e0       	ldi	r25, 0x00	; 0
     166:	9c 01       	movw	r18, r24
     168:	00 90 b6 02 	lds	r0, 0x02B6	; 0x8002b6 <HC595_clkpin>
     16c:	02 c0       	rjmp	.+4      	; 0x172 <HC595_shift_bit+0x62>
     16e:	22 0f       	add	r18, r18
     170:	33 1f       	adc	r19, r19
     172:	0a 94       	dec	r0
     174:	e2 f7       	brpl	.-8      	; 0x16e <HC595_shift_bit+0x5e>
     176:	24 2b       	or	r18, r20
     178:	20 83       	st	Z, r18
	*hc595_PORT &= ~(1<<HC595_clkpin); //Shift disable
     17a:	e0 91 b2 02 	lds	r30, 0x02B2	; 0x8002b2 <hc595_PORT>
     17e:	f0 91 b3 02 	lds	r31, 0x02B3	; 0x8002b3 <hc595_PORT+0x1>
     182:	20 81       	ld	r18, Z
     184:	00 90 b6 02 	lds	r0, 0x02B6	; 0x8002b6 <HC595_clkpin>
     188:	02 c0       	rjmp	.+4      	; 0x18e <HC595_shift_bit+0x7e>
     18a:	88 0f       	add	r24, r24
     18c:	99 1f       	adc	r25, r25
     18e:	0a 94       	dec	r0
     190:	e2 f7       	brpl	.-8      	; 0x18a <HC595_shift_bit+0x7a>
     192:	80 95       	com	r24
     194:	82 23       	and	r24, r18
     196:	80 83       	st	Z, r24
     198:	08 95       	ret

0000019a <HC595_shift_out>:
		HC595_shift_bit(byte & (1<<i));
	HC595_shift_out();
}
void HC595_shift_out(void)
{
	*hc595_PORT |= (1<<HC595_outpin); //Output enable
     19a:	e0 91 b2 02 	lds	r30, 0x02B2	; 0x8002b2 <hc595_PORT>
     19e:	f0 91 b3 02 	lds	r31, 0x02B3	; 0x8002b3 <hc595_PORT+0x1>
     1a2:	40 81       	ld	r20, Z
     1a4:	81 e0       	ldi	r24, 0x01	; 1
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	9c 01       	movw	r18, r24
     1aa:	00 90 b5 02 	lds	r0, 0x02B5	; 0x8002b5 <HC595_outpin>
     1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <HC595_shift_out+0x1a>
     1b0:	22 0f       	add	r18, r18
     1b2:	33 1f       	adc	r19, r19
     1b4:	0a 94       	dec	r0
     1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <HC595_shift_out+0x16>
     1b8:	24 2b       	or	r18, r20
     1ba:	20 83       	st	Z, r18
	*hc595_PORT &= ~(1<<HC595_outpin); //Output disable
     1bc:	e0 91 b2 02 	lds	r30, 0x02B2	; 0x8002b2 <hc595_PORT>
     1c0:	f0 91 b3 02 	lds	r31, 0x02B3	; 0x8002b3 <hc595_PORT+0x1>
     1c4:	20 81       	ld	r18, Z
     1c6:	00 90 b5 02 	lds	r0, 0x02B5	; 0x8002b5 <HC595_outpin>
     1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <HC595_shift_out+0x36>
     1cc:	88 0f       	add	r24, r24
     1ce:	99 1f       	adc	r25, r25
     1d0:	0a 94       	dec	r0
     1d2:	e2 f7       	brpl	.-8      	; 0x1cc <HC595_shift_out+0x32>
     1d4:	80 95       	com	r24
     1d6:	82 23       	and	r24, r18
     1d8:	80 83       	st	Z, r24
     1da:	08 95       	ret

000001dc <HC595_shift_byte>:
		*hc595_PORT &= ~(1<<HC595_datapin); //Data bit LOW
	*hc595_PORT |= (1<<HC595_clkpin); // Shift bit
	*hc595_PORT &= ~(1<<HC595_clkpin); //Shift disable
}
void HC595_shift_byte(uint8_t byte)
{
     1dc:	ff 92       	push	r15
     1de:	0f 93       	push	r16
     1e0:	1f 93       	push	r17
     1e2:	cf 93       	push	r28
     1e4:	df 93       	push	r29
     1e6:	f8 2e       	mov	r15, r24
     1e8:	c0 e0       	ldi	r28, 0x00	; 0
     1ea:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t i;
	for(i=0;i<8;i++)
		HC595_shift_bit(byte & (1<<i));
     1ec:	01 e0       	ldi	r16, 0x01	; 1
     1ee:	10 e0       	ldi	r17, 0x00	; 0
     1f0:	c8 01       	movw	r24, r16
     1f2:	0c 2e       	mov	r0, r28
     1f4:	02 c0       	rjmp	.+4      	; 0x1fa <HC595_shift_byte+0x1e>
     1f6:	88 0f       	add	r24, r24
     1f8:	99 1f       	adc	r25, r25
     1fa:	0a 94       	dec	r0
     1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <HC595_shift_byte+0x1a>
     1fe:	8f 21       	and	r24, r15
     200:	87 df       	rcall	.-242    	; 0x110 <HC595_shift_bit>
     202:	21 96       	adiw	r28, 0x01	; 1
	*hc595_PORT &= ~(1<<HC595_clkpin); //Shift disable
}
void HC595_shift_byte(uint8_t byte)
{
	uint8_t i;
	for(i=0;i<8;i++)
     204:	c8 30       	cpi	r28, 0x08	; 8
     206:	d1 05       	cpc	r29, r1
		HC595_shift_bit(byte & (1<<i));
	HC595_shift_out();
     208:	99 f7       	brne	.-26     	; 0x1f0 <HC595_shift_byte+0x14>
     20a:	c7 df       	rcall	.-114    	; 0x19a <HC595_shift_out>
}
     20c:	df 91       	pop	r29
     20e:	cf 91       	pop	r28
     210:	1f 91       	pop	r17
     212:	0f 91       	pop	r16
     214:	ff 90       	pop	r15
     216:	08 95       	ret

00000218 <HC595enable>:
void HC595_shift_out(void);
/*
** procedure and function
*/
HC595 HC595enable(volatile uint8_t *ddr, volatile uint8_t *port, uint8_t datapin, uint8_t clkpin, uint8_t outpin)
{
     218:	0f 93       	push	r16
     21a:	cf 93       	push	r28
     21c:	df 93       	push	r29
     21e:	00 d0       	rcall	.+0      	; 0x220 <HC595enable+0x8>
     220:	00 d0       	rcall	.+0      	; 0x222 <HC595enable+0xa>
     222:	00 d0       	rcall	.+0      	; 0x224 <HC595enable+0xc>
     224:	cd b7       	in	r28, 0x3d	; 61
     226:	de b7       	in	r29, 0x3e	; 62
	//LOCAL VARIABLES
	uint8_t tSREG;
	tSREG=SREG;
     228:	5f b7       	in	r21, 0x3f	; 63
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
     22a:	3f b7       	in	r19, 0x3f	; 63
     22c:	3f 77       	andi	r19, 0x7F	; 127
     22e:	3f bf       	out	0x3f, r19	; 63
	//ALLOCAÇÂO MEMORIA PARA Estrutura
	HC595 hc595;
	//import parametros
	hc595_DDR=ddr;
     230:	90 93 b1 02 	sts	0x02B1, r25	; 0x8002b1 <hc595_DDR+0x1>
     234:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <hc595_DDR>
	hc595_PORT=port;
     238:	70 93 b3 02 	sts	0x02B3, r23	; 0x8002b3 <hc595_PORT+0x1>
     23c:	60 93 b2 02 	sts	0x02B2, r22	; 0x8002b2 <hc595_PORT>
	HC595_datapin=datapin; 
     240:	40 93 b4 02 	sts	0x02B4, r20	; 0x8002b4 <HC595_datapin>
	HC595_clkpin=clkpin; 
     244:	20 93 b6 02 	sts	0x02B6, r18	; 0x8002b6 <HC595_clkpin>
	HC595_outpin=outpin;
     248:	00 93 b5 02 	sts	0x02B5, r16	; 0x8002b5 <HC595_outpin>
	//inic variables
    *hc595_DDR |= (1<<datapin) | (1<<clkpin) | (1<<outpin);
     24c:	fc 01       	movw	r30, r24
     24e:	30 81       	ld	r19, Z
     250:	61 e0       	ldi	r22, 0x01	; 1
     252:	70 e0       	ldi	r23, 0x00	; 0
     254:	db 01       	movw	r26, r22
     256:	02 c0       	rjmp	.+4      	; 0x25c <HC595enable+0x44>
     258:	aa 0f       	add	r26, r26
     25a:	bb 1f       	adc	r27, r27
     25c:	2a 95       	dec	r18
     25e:	e2 f7       	brpl	.-8      	; 0x258 <HC595enable+0x40>
     260:	fb 01       	movw	r30, r22
     262:	02 c0       	rjmp	.+4      	; 0x268 <HC595enable+0x50>
     264:	ee 0f       	add	r30, r30
     266:	ff 1f       	adc	r31, r31
     268:	0a 95       	dec	r16
     26a:	e2 f7       	brpl	.-8      	; 0x264 <HC595enable+0x4c>
     26c:	ea 2b       	or	r30, r26
     26e:	02 c0       	rjmp	.+4      	; 0x274 <HC595enable+0x5c>
     270:	66 0f       	add	r22, r22
     272:	77 1f       	adc	r23, r23
     274:	4a 95       	dec	r20
     276:	e2 f7       	brpl	.-8      	; 0x270 <HC595enable+0x58>
     278:	6e 2b       	or	r22, r30
     27a:	23 2f       	mov	r18, r19
     27c:	26 2b       	or	r18, r22
     27e:	fc 01       	movw	r30, r24
     280:	20 83       	st	Z, r18
	*hc595_PORT &= ~((1<<datapin) | (1<<clkpin) | (1<<outpin));
     282:	e0 91 b2 02 	lds	r30, 0x02B2	; 0x8002b2 <hc595_PORT>
     286:	f0 91 b3 02 	lds	r31, 0x02B3	; 0x8002b3 <hc595_PORT+0x1>
     28a:	80 81       	ld	r24, Z
     28c:	60 95       	com	r22
     28e:	68 23       	and	r22, r24
     290:	60 83       	st	Z, r22
	//Direccionar apontadores para PROTOTIPOS
	hc595.bit=HC595_shift_bit;
	hc595.byte=HC595_shift_byte;
	hc595.out=HC595_shift_out;
	SREG=tSREG;
     292:	5f bf       	out	0x3f, r21	; 63
	//
	return hc595;
     294:	28 e8       	ldi	r18, 0x88	; 136
     296:	30 e0       	ldi	r19, 0x00	; 0
     298:	3a 83       	std	Y+2, r19	; 0x02
     29a:	29 83       	std	Y+1, r18	; 0x01
     29c:	4e ee       	ldi	r20, 0xEE	; 238
     29e:	50 e0       	ldi	r21, 0x00	; 0
     2a0:	5c 83       	std	Y+4, r21	; 0x04
     2a2:	4b 83       	std	Y+3, r20	; 0x03
     2a4:	6d ec       	ldi	r22, 0xCD	; 205
     2a6:	70 e0       	ldi	r23, 0x00	; 0
     2a8:	7e 83       	std	Y+6, r23	; 0x06
     2aa:	6d 83       	std	Y+5, r22	; 0x05
     2ac:	3a 81       	ldd	r19, Y+2	; 0x02
     2ae:	5c 81       	ldd	r21, Y+4	; 0x04
     2b0:	7e 81       	ldd	r23, Y+6	; 0x06
}
     2b2:	80 e0       	ldi	r24, 0x00	; 0
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	26 96       	adiw	r28, 0x06	; 6
     2b8:	0f b6       	in	r0, 0x3f	; 63
     2ba:	f8 94       	cli
     2bc:	de bf       	out	0x3e, r29	; 62
     2be:	0f be       	out	0x3f, r0	; 63
     2c0:	cd bf       	out	0x3d, r28	; 61
     2c2:	df 91       	pop	r29
     2c4:	cf 91       	pop	r28
     2c6:	0f 91       	pop	r16
     2c8:	08 95       	ret

000002ca <ANALOG_read>:
* Returns selected Channel ADC_VALUE
*/
{
	uint8_t ADSC_FLAG;
	ADSC_FLAG=(1<<ADSC);
	if( !(ADC_CONTROL & ADSC_FLAG) ){
     2ca:	36 9b       	sbis	0x06, 6	; 6
		//ADC_SELECT
		/***/
		ADC_CONTROL|=(1<<ADSC);
     2cc:	36 9a       	sbi	0x06, 6	; 6
	}	
	return ADC_VALUE[selection];
     2ce:	fc 01       	movw	r30, r24
     2d0:	ee 0f       	add	r30, r30
     2d2:	ff 1f       	adc	r31, r31
     2d4:	e1 5f       	subi	r30, 0xF1	; 241
     2d6:	fd 4f       	sbci	r31, 0xFD	; 253
     2d8:	80 81       	ld	r24, Z
     2da:	91 81       	ldd	r25, Z+1	; 0x01
}
     2dc:	08 95       	ret

000002de <ANALOGenable>:
ANALOG ANALOGenable( uint8_t Vreff, uint8_t Divfactor, int n_channel, ... )
/*
* Interrupt running mode setup
* setup, and list of channels to be probed
*/
{
     2de:	0f 93       	push	r16
     2e0:	1f 93       	push	r17
     2e2:	cf 93       	push	r28
     2e4:	df 93       	push	r29
     2e6:	cd b7       	in	r28, 0x3d	; 61
     2e8:	de b7       	in	r29, 0x3e	; 62
     2ea:	9f 81       	ldd	r25, Y+7	; 0x07
     2ec:	68 85       	ldd	r22, Y+8	; 0x08
     2ee:	49 85       	ldd	r20, Y+9	; 0x09
     2f0:	5a 85       	ldd	r21, Y+10	; 0x0a
	/***LOCAL VARIABLES***/
	uint8_t tSREG;
	va_list list;
	int i;
	//inic variables
	tSREG=STATUS_REGISTER;
     2f2:	1f b7       	in	r17, 0x3f	; 63
	STATUS_REGISTER&=~(1<<GLOBAL_INTERRUPT_ENABLE);
     2f4:	8f b7       	in	r24, 0x3f	; 63
     2f6:	8f 77       	andi	r24, 0x7F	; 127
     2f8:	8f bf       	out	0x3f, r24	; 63
	/***GLOBAL VARIABLES INICIALIZE***/
	ADC_N_CHANNEL=n_channel;
     2fa:	50 93 fe 01 	sts	0x01FE, r21	; 0x8001fe <ADC_N_CHANNEL+0x1>
     2fe:	40 93 fd 01 	sts	0x01FD, r20	; 0x8001fd <ADC_N_CHANNEL>
	ADC_SELECTOR=0;
     302:	10 92 fc 01 	sts	0x01FC, r1	; 0x8001fc <ADC_SELECTOR+0x1>
     306:	10 92 fb 01 	sts	0x01FB, r1	; 0x8001fb <ADC_SELECTOR>
	adc_n_sample=0;
     30a:	10 92 f6 01 	sts	0x01F6, r1	; 0x8001f6 <__data_end>
	//import parametros
	//inic parameters
	//Direccionar apontadores para PROTOTIPOS
	analog.read=ANALOG_read;
		/******/
		ADC_SELECT&=~(3<<REFS0);
     30e:	87 b1       	in	r24, 0x07	; 7
     310:	8f 73       	andi	r24, 0x3F	; 63
     312:	87 b9       	out	0x07, r24	; 7
		switch( Vreff ){
     314:	91 30       	cpi	r25, 0x01	; 1
     316:	19 f0       	breq	.+6      	; 0x31e <ANALOGenable+0x40>
     318:	93 30       	cpi	r25, 0x03	; 3
     31a:	21 f0       	breq	.+8      	; 0x324 <ANALOGenable+0x46>
     31c:	08 c0       	rjmp	.+16     	; 0x32e <ANALOGenable+0x50>
			case 0:
				analog.VREFF=0;
				break;
			case 1:
				ADC_SELECT|=(1<<REFS0);
     31e:	3e 9a       	sbi	0x07, 6	; 7
				analog.VREFF=1;
     320:	01 e0       	ldi	r16, 0x01	; 1
				break;
     322:	06 c0       	rjmp	.+12     	; 0x330 <ANALOGenable+0x52>
			case 3:
				ADC_SELECT|=(3<<REFS0);
     324:	87 b1       	in	r24, 0x07	; 7
     326:	80 6c       	ori	r24, 0xC0	; 192
     328:	87 b9       	out	0x07, r24	; 7
				analog.VREFF=3;
     32a:	03 e0       	ldi	r16, 0x03	; 3
				break;
     32c:	01 c0       	rjmp	.+2      	; 0x330 <ANALOGenable+0x52>
	analog.read=ANALOG_read;
		/******/
		ADC_SELECT&=~(3<<REFS0);
		switch( Vreff ){
			case 0:
				analog.VREFF=0;
     32e:	00 e0       	ldi	r16, 0x00	; 0
			default:
				analog.VREFF=0;
				break;
		}
		//
		ADC_SELECT&=~(1<<ADLAR);
     330:	3d 98       	cbi	0x07, 5	; 7
		/******/
		va_start(list, n_channel);
		for(i=0;i<n_channel;i++){
     332:	14 16       	cp	r1, r20
     334:	15 06       	cpc	r1, r21
     336:	8c f4       	brge	.+34     	; 0x35a <ANALOGenable+0x7c>
     338:	de 01       	movw	r26, r28
     33a:	1b 96       	adiw	r26, 0x0b	; 11
     33c:	80 e0       	ldi	r24, 0x00	; 0
     33e:	90 e0       	ldi	r25, 0x00	; 0
			ADC_CHANNEL_GAIN[i] = va_arg(list, int);
     340:	2d 91       	ld	r18, X+
     342:	3d 91       	ld	r19, X+
     344:	fc 01       	movw	r30, r24
     346:	ee 0f       	add	r30, r30
     348:	ff 1f       	adc	r31, r31
     34a:	e1 50       	subi	r30, 0x01	; 1
     34c:	fe 4f       	sbci	r31, 0xFE	; 254
     34e:	31 83       	std	Z+1, r19	; 0x01
     350:	20 83       	st	Z, r18
		}
		//
		ADC_SELECT&=~(1<<ADLAR);
		/******/
		va_start(list, n_channel);
		for(i=0;i<n_channel;i++){
     352:	01 96       	adiw	r24, 0x01	; 1
     354:	48 17       	cp	r20, r24
     356:	59 07       	cpc	r21, r25
     358:	99 f7       	brne	.-26     	; 0x340 <ANALOGenable+0x62>
			ADC_CHANNEL_GAIN[i] = va_arg(list, int);
		}
		va_end(list);
		ADC_SELECT&=~MUX_MASK;
     35a:	87 b1       	in	r24, 0x07	; 7
     35c:	80 7e       	andi	r24, 0xE0	; 224
     35e:	87 b9       	out	0x07, r24	; 7
		ADC_SELECT|=(MUX_MASK & ADC_CHANNEL_GAIN[ADC_SELECTOR]);
     360:	e0 91 fb 01 	lds	r30, 0x01FB	; 0x8001fb <ADC_SELECTOR>
     364:	f0 91 fc 01 	lds	r31, 0x01FC	; 0x8001fc <ADC_SELECTOR+0x1>
     368:	ee 0f       	add	r30, r30
     36a:	ff 1f       	adc	r31, r31
     36c:	e1 50       	subi	r30, 0x01	; 1
     36e:	fe 4f       	sbci	r31, 0xFE	; 254
     370:	80 81       	ld	r24, Z
     372:	91 81       	ldd	r25, Z+1	; 0x01
     374:	27 b1       	in	r18, 0x07	; 7
     376:	8f 71       	andi	r24, 0x1F	; 31
     378:	99 27       	eor	r25, r25
     37a:	82 2b       	or	r24, r18
     37c:	87 b9       	out	0x07, r24	; 7
		/******/
		ADC_CONTROL|=(1<<ADEN);
     37e:	37 9a       	sbi	0x06, 7	; 6
		ADC_CONTROL|=(1<<ADSC);
     380:	36 9a       	sbi	0x06, 6	; 6
		ADC_CONTROL&=~(1<<ADFR);
     382:	35 98       	cbi	0x06, 5	; 6
		ADC_CONTROL|=(1<<ADIE);
     384:	33 9a       	sbi	0x06, 3	; 6
		/******/
		ADC_CONTROL&=~(7<<ADPS0);
     386:	86 b1       	in	r24, 0x06	; 6
     388:	88 7f       	andi	r24, 0xF8	; 248
     38a:	86 b9       	out	0x06, r24	; 6
		switch( Divfactor ){
     38c:	60 31       	cpi	r22, 0x10	; 16
     38e:	d1 f0       	breq	.+52     	; 0x3c4 <ANALOGenable+0xe6>
     390:	38 f4       	brcc	.+14     	; 0x3a0 <ANALOGenable+0xc2>
     392:	64 30       	cpi	r22, 0x04	; 4
     394:	79 f0       	breq	.+30     	; 0x3b4 <ANALOGenable+0xd6>
     396:	68 30       	cpi	r22, 0x08	; 8
     398:	81 f0       	breq	.+32     	; 0x3ba <ANALOGenable+0xdc>
     39a:	62 30       	cpi	r22, 0x02	; 2
     39c:	29 f5       	brne	.+74     	; 0x3e8 <ANALOGenable+0x10a>
     39e:	07 c0       	rjmp	.+14     	; 0x3ae <ANALOGenable+0xd0>
     3a0:	60 34       	cpi	r22, 0x40	; 64
     3a2:	c1 f0       	breq	.+48     	; 0x3d4 <ANALOGenable+0xf6>
     3a4:	60 38       	cpi	r22, 0x80	; 128
     3a6:	d9 f0       	breq	.+54     	; 0x3de <ANALOGenable+0x100>
     3a8:	60 32       	cpi	r22, 0x20	; 32
     3aa:	f1 f4       	brne	.+60     	; 0x3e8 <ANALOGenable+0x10a>
     3ac:	0e c0       	rjmp	.+28     	; 0x3ca <ANALOGenable+0xec>
			case 2://1
				ADC_CONTROL|=(1<<ADPS0);
     3ae:	30 9a       	sbi	0x06, 0	; 6
				analog.DIVISION_FACTOR=2;
     3b0:	22 e0       	ldi	r18, 0x02	; 2
				break;
     3b2:	1e c0       	rjmp	.+60     	; 0x3f0 <ANALOGenable+0x112>
			case 4://2
				ADC_CONTROL|=(1<<ADPS1);
     3b4:	31 9a       	sbi	0x06, 1	; 6
				analog.DIVISION_FACTOR=4;
     3b6:	24 e0       	ldi	r18, 0x04	; 4
				break;
     3b8:	1b c0       	rjmp	.+54     	; 0x3f0 <ANALOGenable+0x112>
			case 8://3
				ADC_CONTROL|=(3<<ADPS0);
     3ba:	86 b1       	in	r24, 0x06	; 6
     3bc:	83 60       	ori	r24, 0x03	; 3
     3be:	86 b9       	out	0x06, r24	; 6
				analog.DIVISION_FACTOR=8;
     3c0:	28 e0       	ldi	r18, 0x08	; 8
				break;
     3c2:	16 c0       	rjmp	.+44     	; 0x3f0 <ANALOGenable+0x112>
			case 16://4
				ADC_CONTROL|=(1<<ADPS2);
     3c4:	32 9a       	sbi	0x06, 2	; 6
				analog.DIVISION_FACTOR=16;
     3c6:	20 e1       	ldi	r18, 0x10	; 16
				break;
     3c8:	13 c0       	rjmp	.+38     	; 0x3f0 <ANALOGenable+0x112>
			case 32://5
				ADC_CONTROL|=(5<<ADPS0);
     3ca:	86 b1       	in	r24, 0x06	; 6
     3cc:	85 60       	ori	r24, 0x05	; 5
     3ce:	86 b9       	out	0x06, r24	; 6
				analog.DIVISION_FACTOR=32;
     3d0:	20 e2       	ldi	r18, 0x20	; 32
				break;
     3d2:	0e c0       	rjmp	.+28     	; 0x3f0 <ANALOGenable+0x112>
			case 64://6
				ADC_CONTROL|=(6<<ADPS0);
     3d4:	86 b1       	in	r24, 0x06	; 6
     3d6:	86 60       	ori	r24, 0x06	; 6
     3d8:	86 b9       	out	0x06, r24	; 6
				analog.DIVISION_FACTOR=64;
     3da:	20 e4       	ldi	r18, 0x40	; 64
				break;
     3dc:	09 c0       	rjmp	.+18     	; 0x3f0 <ANALOGenable+0x112>
			case 128://7
				ADC_CONTROL|=(7<<ADPS0);
     3de:	86 b1       	in	r24, 0x06	; 6
     3e0:	87 60       	ori	r24, 0x07	; 7
     3e2:	86 b9       	out	0x06, r24	; 6
				analog.DIVISION_FACTOR=128;
     3e4:	20 e8       	ldi	r18, 0x80	; 128
				break;
     3e6:	04 c0       	rjmp	.+8      	; 0x3f0 <ANALOGenable+0x112>
			default:
				ADC_CONTROL|=(7<<ADPS0);
     3e8:	86 b1       	in	r24, 0x06	; 6
     3ea:	87 60       	ori	r24, 0x07	; 7
     3ec:	86 b9       	out	0x06, r24	; 6
				analog.DIVISION_FACTOR=128;
     3ee:	20 e8       	ldi	r18, 0x80	; 128
				break;
		}		
		
	STATUS_REGISTER=tSREG;
     3f0:	1f bf       	out	0x3f, r17	; 63
	STATUS_REGISTER|=(1<<GLOBAL_INTERRUPT_ENABLE);
     3f2:	8f b7       	in	r24, 0x3f	; 63
     3f4:	80 68       	ori	r24, 0x80	; 128
     3f6:	8f bf       	out	0x3f, r24	; 63
	/******/
	return analog;
     3f8:	60 2f       	mov	r22, r16
     3fa:	72 2f       	mov	r23, r18
     3fc:	85 e6       	ldi	r24, 0x65	; 101
     3fe:	91 e0       	ldi	r25, 0x01	; 1
}
     400:	df 91       	pop	r29
     402:	cf 91       	pop	r28
     404:	1f 91       	pop	r17
     406:	0f 91       	pop	r16
     408:	08 95       	ret

0000040a <__vector_21>:
ISR(ANALOG_INTERRUPT)
/*************************************************************************
Function: ANALOG interrupt
Purpose:  Read Analog Input
**************************************************************************/
{
     40a:	1f 92       	push	r1
     40c:	0f 92       	push	r0
     40e:	0f b6       	in	r0, 0x3f	; 63
     410:	0f 92       	push	r0
     412:	11 24       	eor	r1, r1
     414:	0b b6       	in	r0, 0x3b	; 59
     416:	0f 92       	push	r0
     418:	2f 93       	push	r18
     41a:	3f 93       	push	r19
     41c:	4f 93       	push	r20
     41e:	5f 93       	push	r21
     420:	8f 93       	push	r24
     422:	9f 93       	push	r25
     424:	ef 93       	push	r30
     426:	ff 93       	push	r31
	uint8_t Sreg;
	Sreg=STATUS_REGISTER;
     428:	2f b7       	in	r18, 0x3f	; 63
	STATUS_REGISTER&=~(1<<GLOBAL_INTERRUPT_ENABLE);
     42a:	8f b7       	in	r24, 0x3f	; 63
     42c:	8f 77       	andi	r24, 0x7F	; 127
     42e:	8f bf       	out	0x3f, r24	; 63
	adc_tmp=ADCL;
     430:	84 b1       	in	r24, 0x04	; 4
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	90 93 f8 01 	sts	0x01F8, r25	; 0x8001f8 <adc_tmp+0x1>
     438:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <adc_tmp>
	adc_tmp|=(ADCH<<8);
     43c:	35 b1       	in	r19, 0x05	; 5
     43e:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <adc_tmp>
     442:	90 91 f8 01 	lds	r25, 0x01F8	; 0x8001f8 <adc_tmp+0x1>
     446:	93 2b       	or	r25, r19
     448:	90 93 f8 01 	sts	0x01F8, r25	; 0x8001f8 <adc_tmp+0x1>
     44c:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <adc_tmp>
	if(adc_n_sample < (1<<ADC_NUMBER_SAMPLE)){
     450:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <__data_end>
     454:	84 30       	cpi	r24, 0x04	; 4
     456:	a0 f4       	brcc	.+40     	; 0x480 <__vector_21+0x76>
		adc_n_sample++;
     458:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <__data_end>
     45c:	8f 5f       	subi	r24, 0xFF	; 255
     45e:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <__data_end>
		adc_sample+=adc_tmp;
     462:	40 91 f7 01 	lds	r20, 0x01F7	; 0x8001f7 <adc_tmp>
     466:	50 91 f8 01 	lds	r21, 0x01F8	; 0x8001f8 <adc_tmp+0x1>
     46a:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <adc_sample>
     46e:	90 91 fa 01 	lds	r25, 0x01FA	; 0x8001fa <adc_sample+0x1>
     472:	84 0f       	add	r24, r20
     474:	95 1f       	adc	r25, r21
     476:	90 93 fa 01 	sts	0x01FA, r25	; 0x8001fa <adc_sample+0x1>
     47a:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <adc_sample>
     47e:	43 c0       	rjmp	.+134    	; 0x506 <__vector_21+0xfc>
	}else{
		ADC_VALUE[ADC_SELECTOR]=adc_sample>>ADC_NUMBER_SAMPLE;
     480:	e0 91 fb 01 	lds	r30, 0x01FB	; 0x8001fb <ADC_SELECTOR>
     484:	f0 91 fc 01 	lds	r31, 0x01FC	; 0x8001fc <ADC_SELECTOR+0x1>
     488:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <adc_sample>
     48c:	90 91 fa 01 	lds	r25, 0x01FA	; 0x8001fa <adc_sample+0x1>
     490:	95 95       	asr	r25
     492:	87 95       	ror	r24
     494:	95 95       	asr	r25
     496:	87 95       	ror	r24
     498:	ee 0f       	add	r30, r30
     49a:	ff 1f       	adc	r31, r31
     49c:	e1 5f       	subi	r30, 0xF1	; 241
     49e:	fd 4f       	sbci	r31, 0xFD	; 253
     4a0:	91 83       	std	Z+1, r25	; 0x01
     4a2:	80 83       	st	Z, r24
		adc_n_sample=adc_sample=0;
     4a4:	10 92 fa 01 	sts	0x01FA, r1	; 0x8001fa <adc_sample+0x1>
     4a8:	10 92 f9 01 	sts	0x01F9, r1	; 0x8001f9 <adc_sample>
     4ac:	10 92 f6 01 	sts	0x01F6, r1	; 0x8001f6 <__data_end>
		/******/
		if(ADC_SELECTOR < ADC_N_CHANNEL)
     4b0:	40 91 fb 01 	lds	r20, 0x01FB	; 0x8001fb <ADC_SELECTOR>
     4b4:	50 91 fc 01 	lds	r21, 0x01FC	; 0x8001fc <ADC_SELECTOR+0x1>
     4b8:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <ADC_N_CHANNEL>
     4bc:	90 91 fe 01 	lds	r25, 0x01FE	; 0x8001fe <ADC_N_CHANNEL+0x1>
     4c0:	48 17       	cp	r20, r24
     4c2:	59 07       	cpc	r21, r25
     4c4:	54 f4       	brge	.+20     	; 0x4da <__vector_21+0xd0>
			ADC_SELECTOR++;
     4c6:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <ADC_SELECTOR>
     4ca:	90 91 fc 01 	lds	r25, 0x01FC	; 0x8001fc <ADC_SELECTOR+0x1>
     4ce:	01 96       	adiw	r24, 0x01	; 1
     4d0:	90 93 fc 01 	sts	0x01FC, r25	; 0x8001fc <ADC_SELECTOR+0x1>
     4d4:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <ADC_SELECTOR>
     4d8:	04 c0       	rjmp	.+8      	; 0x4e2 <__vector_21+0xd8>
		else
			ADC_SELECTOR=0;
     4da:	10 92 fc 01 	sts	0x01FC, r1	; 0x8001fc <ADC_SELECTOR+0x1>
     4de:	10 92 fb 01 	sts	0x01FB, r1	; 0x8001fb <ADC_SELECTOR>
		ADC_SELECT &= ~MUX_MASK;
     4e2:	87 b1       	in	r24, 0x07	; 7
     4e4:	80 7e       	andi	r24, 0xE0	; 224
     4e6:	87 b9       	out	0x07, r24	; 7
		ADC_SELECT |= (ADC_CHANNEL_GAIN[ADC_SELECTOR] & MUX_MASK);
     4e8:	e0 91 fb 01 	lds	r30, 0x01FB	; 0x8001fb <ADC_SELECTOR>
     4ec:	f0 91 fc 01 	lds	r31, 0x01FC	; 0x8001fc <ADC_SELECTOR+0x1>
     4f0:	ee 0f       	add	r30, r30
     4f2:	ff 1f       	adc	r31, r31
     4f4:	e1 50       	subi	r30, 0x01	; 1
     4f6:	fe 4f       	sbci	r31, 0xFE	; 254
     4f8:	80 81       	ld	r24, Z
     4fa:	91 81       	ldd	r25, Z+1	; 0x01
     4fc:	37 b1       	in	r19, 0x07	; 7
     4fe:	8f 71       	andi	r24, 0x1F	; 31
     500:	99 27       	eor	r25, r25
     502:	83 2b       	or	r24, r19
     504:	87 b9       	out	0x07, r24	; 7
	}
	STATUS_REGISTER=Sreg;
     506:	2f bf       	out	0x3f, r18	; 63
}
     508:	ff 91       	pop	r31
     50a:	ef 91       	pop	r30
     50c:	9f 91       	pop	r25
     50e:	8f 91       	pop	r24
     510:	5f 91       	pop	r21
     512:	4f 91       	pop	r20
     514:	3f 91       	pop	r19
     516:	2f 91       	pop	r18
     518:	0f 90       	pop	r0
     51a:	0b be       	out	0x3b, r0	; 59
     51c:	0f 90       	pop	r0
     51e:	0f be       	out	0x3f, r0	; 63
     520:	0f 90       	pop	r0
     522:	1f 90       	pop	r1
     524:	18 95       	reti

00000526 <TIMER_COUNTER0_start>:
		timer3.compareC=TIMER_COUNTER3_compareC;
		timer3.start=TIMER_COUNTER3_start;
		timer3.stop=TIMER_COUNTER3_stop;
		//
		return timer3;
	}
     526:	20 91 ba 02 	lds	r18, 0x02BA	; 0x8002ba <timer0_state>
     52a:	21 11       	cpse	r18, r1
     52c:	40 c0       	rjmp	.+128    	; 0x5ae <TIMER_COUNTER0_start+0x88>
     52e:	2f ef       	ldi	r18, 0xFF	; 255
     530:	21 bf       	out	0x31, r18	; 49
     532:	23 b7       	in	r18, 0x33	; 51
     534:	28 7f       	andi	r18, 0xF8	; 248
     536:	23 bf       	out	0x33, r18	; 51
     538:	80 34       	cpi	r24, 0x40	; 64
     53a:	91 05       	cpc	r25, r1
     53c:	11 f1       	breq	.+68     	; 0x582 <TIMER_COUNTER0_start+0x5c>
     53e:	48 f4       	brcc	.+18     	; 0x552 <TIMER_COUNTER0_start+0x2c>
     540:	88 30       	cpi	r24, 0x08	; 8
     542:	91 05       	cpc	r25, r1
     544:	b1 f0       	breq	.+44     	; 0x572 <TIMER_COUNTER0_start+0x4c>
     546:	80 32       	cpi	r24, 0x20	; 32
     548:	91 05       	cpc	r25, r1
     54a:	b9 f0       	breq	.+46     	; 0x57a <TIMER_COUNTER0_start+0x54>
     54c:	01 97       	sbiw	r24, 0x01	; 1
     54e:	49 f5       	brne	.+82     	; 0x5a2 <TIMER_COUNTER0_start+0x7c>
     550:	0c c0       	rjmp	.+24     	; 0x56a <TIMER_COUNTER0_start+0x44>
     552:	81 15       	cp	r24, r1
     554:	21 e0       	ldi	r18, 0x01	; 1
     556:	92 07       	cpc	r25, r18
     558:	e1 f0       	breq	.+56     	; 0x592 <TIMER_COUNTER0_start+0x6c>
     55a:	81 15       	cp	r24, r1
     55c:	24 e0       	ldi	r18, 0x04	; 4
     55e:	92 07       	cpc	r25, r18
     560:	e1 f0       	breq	.+56     	; 0x59a <TIMER_COUNTER0_start+0x74>
     562:	80 38       	cpi	r24, 0x80	; 128
     564:	91 05       	cpc	r25, r1
     566:	e9 f4       	brne	.+58     	; 0x5a2 <TIMER_COUNTER0_start+0x7c>
     568:	10 c0       	rjmp	.+32     	; 0x58a <TIMER_COUNTER0_start+0x64>
     56a:	83 b7       	in	r24, 0x33	; 51
     56c:	81 60       	ori	r24, 0x01	; 1
     56e:	83 bf       	out	0x33, r24	; 51
     570:	1b c0       	rjmp	.+54     	; 0x5a8 <TIMER_COUNTER0_start+0x82>
     572:	83 b7       	in	r24, 0x33	; 51
     574:	82 60       	ori	r24, 0x02	; 2
     576:	83 bf       	out	0x33, r24	; 51
     578:	17 c0       	rjmp	.+46     	; 0x5a8 <TIMER_COUNTER0_start+0x82>
     57a:	83 b7       	in	r24, 0x33	; 51
     57c:	83 60       	ori	r24, 0x03	; 3
     57e:	83 bf       	out	0x33, r24	; 51
     580:	13 c0       	rjmp	.+38     	; 0x5a8 <TIMER_COUNTER0_start+0x82>
     582:	83 b7       	in	r24, 0x33	; 51
     584:	84 60       	ori	r24, 0x04	; 4
     586:	83 bf       	out	0x33, r24	; 51
     588:	0f c0       	rjmp	.+30     	; 0x5a8 <TIMER_COUNTER0_start+0x82>
     58a:	83 b7       	in	r24, 0x33	; 51
     58c:	85 60       	ori	r24, 0x05	; 5
     58e:	83 bf       	out	0x33, r24	; 51
     590:	0b c0       	rjmp	.+22     	; 0x5a8 <TIMER_COUNTER0_start+0x82>
     592:	83 b7       	in	r24, 0x33	; 51
     594:	86 60       	ori	r24, 0x06	; 6
     596:	83 bf       	out	0x33, r24	; 51
     598:	07 c0       	rjmp	.+14     	; 0x5a8 <TIMER_COUNTER0_start+0x82>
     59a:	83 b7       	in	r24, 0x33	; 51
     59c:	87 60       	ori	r24, 0x07	; 7
     59e:	83 bf       	out	0x33, r24	; 51
     5a0:	03 c0       	rjmp	.+6      	; 0x5a8 <TIMER_COUNTER0_start+0x82>
     5a2:	83 b7       	in	r24, 0x33	; 51
     5a4:	87 60       	ori	r24, 0x07	; 7
     5a6:	83 bf       	out	0x33, r24	; 51
     5a8:	81 e0       	ldi	r24, 0x01	; 1
     5aa:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <timer0_state>
     5ae:	08 95       	ret

000005b0 <TIMER_COUNTER0_compoutmode>:
     5b0:	93 b7       	in	r25, 0x33	; 51
     5b2:	9f 7c       	andi	r25, 0xCF	; 207
     5b4:	93 bf       	out	0x33, r25	; 51
     5b6:	82 30       	cpi	r24, 0x02	; 2
     5b8:	41 f0       	breq	.+16     	; 0x5ca <TIMER_COUNTER0_compoutmode+0x1a>
     5ba:	83 30       	cpi	r24, 0x03	; 3
     5bc:	51 f0       	breq	.+20     	; 0x5d2 <TIMER_COUNTER0_compoutmode+0x22>
     5be:	81 30       	cpi	r24, 0x01	; 1
     5c0:	59 f4       	brne	.+22     	; 0x5d8 <TIMER_COUNTER0_compoutmode+0x28>
     5c2:	83 b7       	in	r24, 0x33	; 51
     5c4:	80 61       	ori	r24, 0x10	; 16
     5c6:	83 bf       	out	0x33, r24	; 51
     5c8:	08 95       	ret
     5ca:	83 b7       	in	r24, 0x33	; 51
     5cc:	80 62       	ori	r24, 0x20	; 32
     5ce:	83 bf       	out	0x33, r24	; 51
     5d0:	08 95       	ret
     5d2:	83 b7       	in	r24, 0x33	; 51
     5d4:	80 63       	ori	r24, 0x30	; 48
     5d6:	83 bf       	out	0x33, r24	; 51
     5d8:	08 95       	ret

000005da <TIMER_COUNTER0_compare>:
     5da:	81 bf       	out	0x31, r24	; 49
     5dc:	08 95       	ret

000005de <TIMER_COUNTER0_stop>:
     5de:	83 b7       	in	r24, 0x33	; 51
     5e0:	88 7f       	andi	r24, 0xF8	; 248
     5e2:	83 bf       	out	0x33, r24	; 51
     5e4:	12 be       	out	0x32, r1	; 50
     5e6:	10 92 ba 02 	sts	0x02BA, r1	; 0x8002ba <timer0_state>
     5ea:	08 95       	ret

000005ec <TIMER_COUNTER1_start>:
     5ec:	20 91 b7 02 	lds	r18, 0x02B7	; 0x8002b7 <timer1_state>
     5f0:	21 11       	cpse	r18, r1
     5f2:	42 c0       	rjmp	.+132    	; 0x678 <TIMER_COUNTER1_start+0x8c>
     5f4:	2f ef       	ldi	r18, 0xFF	; 255
     5f6:	3f ef       	ldi	r19, 0xFF	; 255
     5f8:	3b bd       	out	0x2b, r19	; 43
     5fa:	2a bd       	out	0x2a, r18	; 42
     5fc:	2e b5       	in	r18, 0x2e	; 46
     5fe:	28 7f       	andi	r18, 0xF8	; 248
     600:	2e bd       	out	0x2e, r18	; 46
     602:	88 30       	cpi	r24, 0x08	; 8
     604:	91 05       	cpc	r25, r1
     606:	d1 f0       	breq	.+52     	; 0x63c <TIMER_COUNTER1_start+0x50>
     608:	48 f4       	brcc	.+18     	; 0x61c <TIMER_COUNTER1_start+0x30>
     60a:	83 30       	cpi	r24, 0x03	; 3
     60c:	91 05       	cpc	r25, r1
     60e:	31 f1       	breq	.+76     	; 0x65c <TIMER_COUNTER1_start+0x70>
     610:	85 30       	cpi	r24, 0x05	; 5
     612:	91 05       	cpc	r25, r1
     614:	39 f1       	breq	.+78     	; 0x664 <TIMER_COUNTER1_start+0x78>
     616:	01 97       	sbiw	r24, 0x01	; 1
     618:	49 f5       	brne	.+82     	; 0x66c <TIMER_COUNTER1_start+0x80>
     61a:	0c c0       	rjmp	.+24     	; 0x634 <TIMER_COUNTER1_start+0x48>
     61c:	81 15       	cp	r24, r1
     61e:	21 e0       	ldi	r18, 0x01	; 1
     620:	92 07       	cpc	r25, r18
     622:	a1 f0       	breq	.+40     	; 0x64c <TIMER_COUNTER1_start+0x60>
     624:	81 15       	cp	r24, r1
     626:	24 e0       	ldi	r18, 0x04	; 4
     628:	92 07       	cpc	r25, r18
     62a:	a1 f0       	breq	.+40     	; 0x654 <TIMER_COUNTER1_start+0x68>
     62c:	80 34       	cpi	r24, 0x40	; 64
     62e:	91 05       	cpc	r25, r1
     630:	e9 f4       	brne	.+58     	; 0x66c <TIMER_COUNTER1_start+0x80>
     632:	08 c0       	rjmp	.+16     	; 0x644 <TIMER_COUNTER1_start+0x58>
     634:	8e b5       	in	r24, 0x2e	; 46
     636:	81 60       	ori	r24, 0x01	; 1
     638:	8e bd       	out	0x2e, r24	; 46
     63a:	1b c0       	rjmp	.+54     	; 0x672 <TIMER_COUNTER1_start+0x86>
     63c:	8e b5       	in	r24, 0x2e	; 46
     63e:	82 60       	ori	r24, 0x02	; 2
     640:	8e bd       	out	0x2e, r24	; 46
     642:	17 c0       	rjmp	.+46     	; 0x672 <TIMER_COUNTER1_start+0x86>
     644:	8e b5       	in	r24, 0x2e	; 46
     646:	83 60       	ori	r24, 0x03	; 3
     648:	8e bd       	out	0x2e, r24	; 46
     64a:	13 c0       	rjmp	.+38     	; 0x672 <TIMER_COUNTER1_start+0x86>
     64c:	8e b5       	in	r24, 0x2e	; 46
     64e:	84 60       	ori	r24, 0x04	; 4
     650:	8e bd       	out	0x2e, r24	; 46
     652:	0f c0       	rjmp	.+30     	; 0x672 <TIMER_COUNTER1_start+0x86>
     654:	8e b5       	in	r24, 0x2e	; 46
     656:	85 60       	ori	r24, 0x05	; 5
     658:	8e bd       	out	0x2e, r24	; 46
     65a:	0b c0       	rjmp	.+22     	; 0x672 <TIMER_COUNTER1_start+0x86>
     65c:	8e b5       	in	r24, 0x2e	; 46
     65e:	86 60       	ori	r24, 0x06	; 6
     660:	8e bd       	out	0x2e, r24	; 46
     662:	07 c0       	rjmp	.+14     	; 0x672 <TIMER_COUNTER1_start+0x86>
     664:	8e b5       	in	r24, 0x2e	; 46
     666:	87 60       	ori	r24, 0x07	; 7
     668:	8e bd       	out	0x2e, r24	; 46
     66a:	03 c0       	rjmp	.+6      	; 0x672 <TIMER_COUNTER1_start+0x86>
     66c:	8e b5       	in	r24, 0x2e	; 46
     66e:	85 60       	ori	r24, 0x05	; 5
     670:	8e bd       	out	0x2e, r24	; 46
     672:	81 e0       	ldi	r24, 0x01	; 1
     674:	80 93 b7 02 	sts	0x02B7, r24	; 0x8002b7 <timer1_state>
     678:	08 95       	ret

0000067a <TIMER_COUNTER1_compoutmodeA>:
     67a:	9f b5       	in	r25, 0x2f	; 47
     67c:	9f 73       	andi	r25, 0x3F	; 63
     67e:	9f bd       	out	0x2f, r25	; 47
     680:	82 30       	cpi	r24, 0x02	; 2
     682:	41 f0       	breq	.+16     	; 0x694 <TIMER_COUNTER1_compoutmodeA+0x1a>
     684:	83 30       	cpi	r24, 0x03	; 3
     686:	51 f0       	breq	.+20     	; 0x69c <TIMER_COUNTER1_compoutmodeA+0x22>
     688:	81 30       	cpi	r24, 0x01	; 1
     68a:	59 f4       	brne	.+22     	; 0x6a2 <TIMER_COUNTER1_compoutmodeA+0x28>
     68c:	8f b5       	in	r24, 0x2f	; 47
     68e:	80 64       	ori	r24, 0x40	; 64
     690:	8f bd       	out	0x2f, r24	; 47
     692:	08 95       	ret
     694:	8f b5       	in	r24, 0x2f	; 47
     696:	80 68       	ori	r24, 0x80	; 128
     698:	8f bd       	out	0x2f, r24	; 47
     69a:	08 95       	ret
     69c:	8f b5       	in	r24, 0x2f	; 47
     69e:	80 6c       	ori	r24, 0xC0	; 192
     6a0:	8f bd       	out	0x2f, r24	; 47
     6a2:	08 95       	ret

000006a4 <TIMER_COUNTER1_compoutmodeB>:
     6a4:	9f b5       	in	r25, 0x2f	; 47
     6a6:	9f 7c       	andi	r25, 0xCF	; 207
     6a8:	9f bd       	out	0x2f, r25	; 47
     6aa:	82 30       	cpi	r24, 0x02	; 2
     6ac:	41 f0       	breq	.+16     	; 0x6be <TIMER_COUNTER1_compoutmodeB+0x1a>
     6ae:	83 30       	cpi	r24, 0x03	; 3
     6b0:	51 f0       	breq	.+20     	; 0x6c6 <TIMER_COUNTER1_compoutmodeB+0x22>
     6b2:	81 30       	cpi	r24, 0x01	; 1
     6b4:	59 f4       	brne	.+22     	; 0x6cc <TIMER_COUNTER1_compoutmodeB+0x28>
     6b6:	8f b5       	in	r24, 0x2f	; 47
     6b8:	80 61       	ori	r24, 0x10	; 16
     6ba:	8f bd       	out	0x2f, r24	; 47
     6bc:	08 95       	ret
     6be:	8f b5       	in	r24, 0x2f	; 47
     6c0:	80 62       	ori	r24, 0x20	; 32
     6c2:	8f bd       	out	0x2f, r24	; 47
     6c4:	08 95       	ret
     6c6:	8f b5       	in	r24, 0x2f	; 47
     6c8:	80 63       	ori	r24, 0x30	; 48
     6ca:	8f bd       	out	0x2f, r24	; 47
     6cc:	08 95       	ret

000006ce <TIMER_COUNTER1_compoutmodeC>:
     6ce:	9f b5       	in	r25, 0x2f	; 47
     6d0:	93 7f       	andi	r25, 0xF3	; 243
     6d2:	9f bd       	out	0x2f, r25	; 47
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	41 f0       	breq	.+16     	; 0x6e8 <TIMER_COUNTER1_compoutmodeC+0x1a>
     6d8:	83 30       	cpi	r24, 0x03	; 3
     6da:	51 f0       	breq	.+20     	; 0x6f0 <TIMER_COUNTER1_compoutmodeC+0x22>
     6dc:	81 30       	cpi	r24, 0x01	; 1
     6de:	59 f4       	brne	.+22     	; 0x6f6 <TIMER_COUNTER1_compoutmodeC+0x28>
     6e0:	8f b5       	in	r24, 0x2f	; 47
     6e2:	84 60       	ori	r24, 0x04	; 4
     6e4:	8f bd       	out	0x2f, r24	; 47
     6e6:	08 95       	ret
     6e8:	8f b5       	in	r24, 0x2f	; 47
     6ea:	88 60       	ori	r24, 0x08	; 8
     6ec:	8f bd       	out	0x2f, r24	; 47
     6ee:	08 95       	ret
     6f0:	8f b5       	in	r24, 0x2f	; 47
     6f2:	8c 60       	ori	r24, 0x0C	; 12
     6f4:	8f bd       	out	0x2f, r24	; 47
     6f6:	08 95       	ret

000006f8 <TIMER_COUNTER1_compareA>:
     6f8:	9b bd       	out	0x2b, r25	; 43
     6fa:	8a bd       	out	0x2a, r24	; 42
     6fc:	08 95       	ret

000006fe <TIMER_COUNTER1_compareB>:
     6fe:	99 bd       	out	0x29, r25	; 41
     700:	88 bd       	out	0x28, r24	; 40
     702:	08 95       	ret

00000704 <TIMER_COUNTER1_compareC>:
     704:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     708:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     70c:	08 95       	ret

0000070e <TIMER_COUNTER1_stop>:
     70e:	8e b5       	in	r24, 0x2e	; 46
     710:	88 7f       	andi	r24, 0xF8	; 248
     712:	8e bd       	out	0x2e, r24	; 46
     714:	1d bc       	out	0x2d, r1	; 45
     716:	1c bc       	out	0x2c, r1	; 44
     718:	10 92 b7 02 	sts	0x02B7, r1	; 0x8002b7 <timer1_state>
     71c:	08 95       	ret

0000071e <TIMER_COUNTER0enable>:
     71e:	10 92 ba 02 	sts	0x02BA, r1	; 0x8002ba <timer0_state>
     722:	23 b7       	in	r18, 0x33	; 51
     724:	27 7b       	andi	r18, 0xB7	; 183
     726:	23 bf       	out	0x33, r18	; 51
     728:	62 30       	cpi	r22, 0x02	; 2
     72a:	41 f0       	breq	.+16     	; 0x73c <TIMER_COUNTER0enable+0x1e>
     72c:	63 30       	cpi	r22, 0x03	; 3
     72e:	51 f0       	breq	.+20     	; 0x744 <TIMER_COUNTER0enable+0x26>
     730:	61 30       	cpi	r22, 0x01	; 1
     732:	59 f4       	brne	.+22     	; 0x74a <TIMER_COUNTER0enable+0x2c>
     734:	23 b7       	in	r18, 0x33	; 51
     736:	20 64       	ori	r18, 0x40	; 64
     738:	23 bf       	out	0x33, r18	; 51
     73a:	07 c0       	rjmp	.+14     	; 0x74a <TIMER_COUNTER0enable+0x2c>
     73c:	23 b7       	in	r18, 0x33	; 51
     73e:	28 60       	ori	r18, 0x08	; 8
     740:	23 bf       	out	0x33, r18	; 51
     742:	03 c0       	rjmp	.+6      	; 0x74a <TIMER_COUNTER0enable+0x2c>
     744:	23 b7       	in	r18, 0x33	; 51
     746:	28 64       	ori	r18, 0x48	; 72
     748:	23 bf       	out	0x33, r18	; 51
     74a:	27 b7       	in	r18, 0x37	; 55
     74c:	2e 7f       	andi	r18, 0xFE	; 254
     74e:	27 bf       	out	0x37, r18	; 55
     750:	27 b7       	in	r18, 0x37	; 55
     752:	2d 7f       	andi	r18, 0xFD	; 253
     754:	27 bf       	out	0x37, r18	; 55
     756:	42 30       	cpi	r20, 0x02	; 2
     758:	41 f0       	breq	.+16     	; 0x76a <TIMER_COUNTER0enable+0x4c>
     75a:	43 30       	cpi	r20, 0x03	; 3
     75c:	51 f0       	breq	.+20     	; 0x772 <TIMER_COUNTER0enable+0x54>
     75e:	41 30       	cpi	r20, 0x01	; 1
     760:	71 f4       	brne	.+28     	; 0x77e <TIMER_COUNTER0enable+0x60>
     762:	27 b7       	in	r18, 0x37	; 55
     764:	21 60       	ori	r18, 0x01	; 1
     766:	27 bf       	out	0x37, r18	; 55
     768:	0a c0       	rjmp	.+20     	; 0x77e <TIMER_COUNTER0enable+0x60>
     76a:	27 b7       	in	r18, 0x37	; 55
     76c:	22 60       	ori	r18, 0x02	; 2
     76e:	27 bf       	out	0x37, r18	; 55
     770:	06 c0       	rjmp	.+12     	; 0x77e <TIMER_COUNTER0enable+0x60>
     772:	27 b7       	in	r18, 0x37	; 55
     774:	21 60       	ori	r18, 0x01	; 1
     776:	27 bf       	out	0x37, r18	; 55
     778:	27 b7       	in	r18, 0x37	; 55
     77a:	22 60       	ori	r18, 0x02	; 2
     77c:	27 bf       	out	0x37, r18	; 55
     77e:	28 ed       	ldi	r18, 0xD8	; 216
     780:	32 e0       	ldi	r19, 0x02	; 2
     782:	fc 01       	movw	r30, r24
     784:	31 83       	std	Z+1, r19	; 0x01
     786:	20 83       	st	Z, r18
     788:	2d ee       	ldi	r18, 0xED	; 237
     78a:	32 e0       	ldi	r19, 0x02	; 2
     78c:	37 83       	std	Z+7, r19	; 0x07
     78e:	26 83       	std	Z+6, r18	; 0x06
     790:	23 e9       	ldi	r18, 0x93	; 147
     792:	32 e0       	ldi	r19, 0x02	; 2
     794:	35 87       	std	Z+13, r19	; 0x0d
     796:	24 87       	std	Z+12, r18	; 0x0c
     798:	2f ee       	ldi	r18, 0xEF	; 239
     79a:	32 e0       	ldi	r19, 0x02	; 2
     79c:	37 87       	std	Z+15, r19	; 0x0f
     79e:	26 87       	std	Z+14, r18	; 0x0e
     7a0:	08 95       	ret

000007a2 <TIMER_COUNTER1enable>:
     7a2:	0f 93       	push	r16
     7a4:	1f 93       	push	r17
     7a6:	dc 01       	movw	r26, r24
     7a8:	10 92 b7 02 	sts	0x02B7, r1	; 0x8002b7 <timer1_state>
     7ac:	8f b5       	in	r24, 0x2f	; 47
     7ae:	8c 7f       	andi	r24, 0xFC	; 252
     7b0:	8f bd       	out	0x2f, r24	; 47
     7b2:	8e b5       	in	r24, 0x2e	; 46
     7b4:	87 7e       	andi	r24, 0xE7	; 231
     7b6:	8e bd       	out	0x2e, r24	; 46
     7b8:	06 2f       	mov	r16, r22
     7ba:	10 e0       	ldi	r17, 0x00	; 0
     7bc:	f8 01       	movw	r30, r16
     7be:	31 97       	sbiw	r30, 0x01	; 1
     7c0:	ef 30       	cpi	r30, 0x0F	; 15
     7c2:	f1 05       	cpc	r31, r1
     7c4:	08 f0       	brcs	.+2      	; 0x7c8 <TIMER_COUNTER1enable+0x26>
     7c6:	5a c0       	rjmp	.+180    	; 0x87c <TIMER_COUNTER1enable+0xda>
     7c8:	ea 5b       	subi	r30, 0xBA	; 186
     7ca:	ff 4f       	sbci	r31, 0xFF	; 255
     7cc:	0c 94 62 1d 	jmp	0x3ac4	; 0x3ac4 <__tablejump2__>
     7d0:	8f b5       	in	r24, 0x2f	; 47
     7d2:	81 60       	ori	r24, 0x01	; 1
     7d4:	8f bd       	out	0x2f, r24	; 47
     7d6:	52 c0       	rjmp	.+164    	; 0x87c <TIMER_COUNTER1enable+0xda>
     7d8:	8f b5       	in	r24, 0x2f	; 47
     7da:	82 60       	ori	r24, 0x02	; 2
     7dc:	8f bd       	out	0x2f, r24	; 47
     7de:	4e c0       	rjmp	.+156    	; 0x87c <TIMER_COUNTER1enable+0xda>
     7e0:	8f b5       	in	r24, 0x2f	; 47
     7e2:	83 60       	ori	r24, 0x03	; 3
     7e4:	8f bd       	out	0x2f, r24	; 47
     7e6:	4a c0       	rjmp	.+148    	; 0x87c <TIMER_COUNTER1enable+0xda>
     7e8:	8e b5       	in	r24, 0x2e	; 46
     7ea:	88 60       	ori	r24, 0x08	; 8
     7ec:	8e bd       	out	0x2e, r24	; 46
     7ee:	46 c0       	rjmp	.+140    	; 0x87c <TIMER_COUNTER1enable+0xda>
     7f0:	8f b5       	in	r24, 0x2f	; 47
     7f2:	81 60       	ori	r24, 0x01	; 1
     7f4:	8f bd       	out	0x2f, r24	; 47
     7f6:	8e b5       	in	r24, 0x2e	; 46
     7f8:	88 60       	ori	r24, 0x08	; 8
     7fa:	8e bd       	out	0x2e, r24	; 46
     7fc:	3f c0       	rjmp	.+126    	; 0x87c <TIMER_COUNTER1enable+0xda>
     7fe:	8f b5       	in	r24, 0x2f	; 47
     800:	82 60       	ori	r24, 0x02	; 2
     802:	8f bd       	out	0x2f, r24	; 47
     804:	8e b5       	in	r24, 0x2e	; 46
     806:	88 60       	ori	r24, 0x08	; 8
     808:	8e bd       	out	0x2e, r24	; 46
     80a:	38 c0       	rjmp	.+112    	; 0x87c <TIMER_COUNTER1enable+0xda>
     80c:	8f b5       	in	r24, 0x2f	; 47
     80e:	83 60       	ori	r24, 0x03	; 3
     810:	8f bd       	out	0x2f, r24	; 47
     812:	8e b5       	in	r24, 0x2e	; 46
     814:	88 60       	ori	r24, 0x08	; 8
     816:	8e bd       	out	0x2e, r24	; 46
     818:	31 c0       	rjmp	.+98     	; 0x87c <TIMER_COUNTER1enable+0xda>
     81a:	8e b5       	in	r24, 0x2e	; 46
     81c:	80 61       	ori	r24, 0x10	; 16
     81e:	8e bd       	out	0x2e, r24	; 46
     820:	2d c0       	rjmp	.+90     	; 0x87c <TIMER_COUNTER1enable+0xda>
     822:	8f b5       	in	r24, 0x2f	; 47
     824:	81 60       	ori	r24, 0x01	; 1
     826:	8f bd       	out	0x2f, r24	; 47
     828:	8e b5       	in	r24, 0x2e	; 46
     82a:	80 61       	ori	r24, 0x10	; 16
     82c:	8e bd       	out	0x2e, r24	; 46
     82e:	26 c0       	rjmp	.+76     	; 0x87c <TIMER_COUNTER1enable+0xda>
     830:	8f b5       	in	r24, 0x2f	; 47
     832:	82 60       	ori	r24, 0x02	; 2
     834:	8f bd       	out	0x2f, r24	; 47
     836:	8e b5       	in	r24, 0x2e	; 46
     838:	80 61       	ori	r24, 0x10	; 16
     83a:	8e bd       	out	0x2e, r24	; 46
     83c:	1f c0       	rjmp	.+62     	; 0x87c <TIMER_COUNTER1enable+0xda>
     83e:	8f b5       	in	r24, 0x2f	; 47
     840:	83 60       	ori	r24, 0x03	; 3
     842:	8f bd       	out	0x2f, r24	; 47
     844:	8e b5       	in	r24, 0x2e	; 46
     846:	80 61       	ori	r24, 0x10	; 16
     848:	8e bd       	out	0x2e, r24	; 46
     84a:	18 c0       	rjmp	.+48     	; 0x87c <TIMER_COUNTER1enable+0xda>
     84c:	8e b5       	in	r24, 0x2e	; 46
     84e:	88 61       	ori	r24, 0x18	; 24
     850:	8e bd       	out	0x2e, r24	; 46
     852:	14 c0       	rjmp	.+40     	; 0x87c <TIMER_COUNTER1enable+0xda>
     854:	8f b5       	in	r24, 0x2f	; 47
     856:	81 60       	ori	r24, 0x01	; 1
     858:	8f bd       	out	0x2f, r24	; 47
     85a:	8e b5       	in	r24, 0x2e	; 46
     85c:	88 61       	ori	r24, 0x18	; 24
     85e:	8e bd       	out	0x2e, r24	; 46
     860:	0d c0       	rjmp	.+26     	; 0x87c <TIMER_COUNTER1enable+0xda>
     862:	8f b5       	in	r24, 0x2f	; 47
     864:	82 60       	ori	r24, 0x02	; 2
     866:	8f bd       	out	0x2f, r24	; 47
     868:	8e b5       	in	r24, 0x2e	; 46
     86a:	88 61       	ori	r24, 0x18	; 24
     86c:	8e bd       	out	0x2e, r24	; 46
     86e:	06 c0       	rjmp	.+12     	; 0x87c <TIMER_COUNTER1enable+0xda>
     870:	8f b5       	in	r24, 0x2f	; 47
     872:	83 60       	ori	r24, 0x03	; 3
     874:	8f bd       	out	0x2f, r24	; 47
     876:	8e b5       	in	r24, 0x2e	; 46
     878:	88 61       	ori	r24, 0x18	; 24
     87a:	8e bd       	out	0x2e, r24	; 46
     87c:	8f b5       	in	r24, 0x2f	; 47
     87e:	83 70       	andi	r24, 0x03	; 3
     880:	8f bd       	out	0x2f, r24	; 47
     882:	87 b7       	in	r24, 0x37	; 55
     884:	83 7c       	andi	r24, 0xC3	; 195
     886:	87 bf       	out	0x37, r24	; 55
     888:	ed e7       	ldi	r30, 0x7D	; 125
     88a:	f0 e0       	ldi	r31, 0x00	; 0
     88c:	80 81       	ld	r24, Z
     88e:	8e 7f       	andi	r24, 0xFE	; 254
     890:	80 83       	st	Z, r24
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	fa 01       	movw	r30, r20
     896:	31 97       	sbiw	r30, 0x01	; 1
     898:	ec 30       	cpi	r30, 0x0C	; 12
     89a:	f1 05       	cpc	r31, r1
     89c:	08 f0       	brcs	.+2      	; 0x8a0 <TIMER_COUNTER1enable+0xfe>
     89e:	44 c0       	rjmp	.+136    	; 0x928 <TIMER_COUNTER1enable+0x186>
     8a0:	eb 5a       	subi	r30, 0xAB	; 171
     8a2:	ff 4f       	sbci	r31, 0xFF	; 255
     8a4:	0c 94 62 1d 	jmp	0x3ac4	; 0x3ac4 <__tablejump2__>
     8a8:	87 b7       	in	r24, 0x37	; 55
     8aa:	84 60       	ori	r24, 0x04	; 4
     8ac:	87 bf       	out	0x37, r24	; 55
     8ae:	3c c0       	rjmp	.+120    	; 0x928 <TIMER_COUNTER1enable+0x186>
     8b0:	87 b7       	in	r24, 0x37	; 55
     8b2:	80 61       	ori	r24, 0x10	; 16
     8b4:	87 bf       	out	0x37, r24	; 55
     8b6:	38 c0       	rjmp	.+112    	; 0x928 <TIMER_COUNTER1enable+0x186>
     8b8:	87 b7       	in	r24, 0x37	; 55
     8ba:	88 60       	ori	r24, 0x08	; 8
     8bc:	87 bf       	out	0x37, r24	; 55
     8be:	34 c0       	rjmp	.+104    	; 0x928 <TIMER_COUNTER1enable+0x186>
     8c0:	ed e7       	ldi	r30, 0x7D	; 125
     8c2:	f0 e0       	ldi	r31, 0x00	; 0
     8c4:	80 81       	ld	r24, Z
     8c6:	81 60       	ori	r24, 0x01	; 1
     8c8:	80 83       	st	Z, r24
     8ca:	2e c0       	rjmp	.+92     	; 0x928 <TIMER_COUNTER1enable+0x186>
     8cc:	87 b7       	in	r24, 0x37	; 55
     8ce:	80 62       	ori	r24, 0x20	; 32
     8d0:	87 bf       	out	0x37, r24	; 55
     8d2:	2a c0       	rjmp	.+84     	; 0x928 <TIMER_COUNTER1enable+0x186>
     8d4:	87 b7       	in	r24, 0x37	; 55
     8d6:	84 61       	ori	r24, 0x14	; 20
     8d8:	87 bf       	out	0x37, r24	; 55
     8da:	26 c0       	rjmp	.+76     	; 0x928 <TIMER_COUNTER1enable+0x186>
     8dc:	87 b7       	in	r24, 0x37	; 55
     8de:	8c 60       	ori	r24, 0x0C	; 12
     8e0:	87 bf       	out	0x37, r24	; 55
     8e2:	22 c0       	rjmp	.+68     	; 0x928 <TIMER_COUNTER1enable+0x186>
     8e4:	87 b7       	in	r24, 0x37	; 55
     8e6:	84 60       	ori	r24, 0x04	; 4
     8e8:	87 bf       	out	0x37, r24	; 55
     8ea:	ed e7       	ldi	r30, 0x7D	; 125
     8ec:	f0 e0       	ldi	r31, 0x00	; 0
     8ee:	80 81       	ld	r24, Z
     8f0:	81 60       	ori	r24, 0x01	; 1
     8f2:	80 83       	st	Z, r24
     8f4:	19 c0       	rjmp	.+50     	; 0x928 <TIMER_COUNTER1enable+0x186>
     8f6:	87 b7       	in	r24, 0x37	; 55
     8f8:	84 62       	ori	r24, 0x24	; 36
     8fa:	87 bf       	out	0x37, r24	; 55
     8fc:	15 c0       	rjmp	.+42     	; 0x928 <TIMER_COUNTER1enable+0x186>
     8fe:	87 b7       	in	r24, 0x37	; 55
     900:	8c 61       	ori	r24, 0x1C	; 28
     902:	87 bf       	out	0x37, r24	; 55
     904:	11 c0       	rjmp	.+34     	; 0x928 <TIMER_COUNTER1enable+0x186>
     906:	87 b7       	in	r24, 0x37	; 55
     908:	8c 61       	ori	r24, 0x1C	; 28
     90a:	87 bf       	out	0x37, r24	; 55
     90c:	ed e7       	ldi	r30, 0x7D	; 125
     90e:	f0 e0       	ldi	r31, 0x00	; 0
     910:	80 81       	ld	r24, Z
     912:	81 60       	ori	r24, 0x01	; 1
     914:	80 83       	st	Z, r24
     916:	08 c0       	rjmp	.+16     	; 0x928 <TIMER_COUNTER1enable+0x186>
     918:	87 b7       	in	r24, 0x37	; 55
     91a:	88 61       	ori	r24, 0x18	; 24
     91c:	87 bf       	out	0x37, r24	; 55
     91e:	ed e7       	ldi	r30, 0x7D	; 125
     920:	f0 e0       	ldi	r31, 0x00	; 0
     922:	80 81       	ld	r24, Z
     924:	81 60       	ori	r24, 0x01	; 1
     926:	80 83       	st	Z, r24
     928:	8d e3       	ldi	r24, 0x3D	; 61
     92a:	93 e0       	ldi	r25, 0x03	; 3
     92c:	11 96       	adiw	r26, 0x01	; 1
     92e:	9c 93       	st	X, r25
     930:	8e 93       	st	-X, r24
     932:	82 e5       	ldi	r24, 0x52	; 82
     934:	93 e0       	ldi	r25, 0x03	; 3
     936:	13 96       	adiw	r26, 0x03	; 3
     938:	9c 93       	st	X, r25
     93a:	8e 93       	st	-X, r24
     93c:	12 97       	sbiw	r26, 0x02	; 2
     93e:	87 e6       	ldi	r24, 0x67	; 103
     940:	93 e0       	ldi	r25, 0x03	; 3
     942:	15 96       	adiw	r26, 0x05	; 5
     944:	9c 93       	st	X, r25
     946:	8e 93       	st	-X, r24
     948:	14 97       	sbiw	r26, 0x04	; 4
     94a:	8c e7       	ldi	r24, 0x7C	; 124
     94c:	93 e0       	ldi	r25, 0x03	; 3
     94e:	17 96       	adiw	r26, 0x07	; 7
     950:	9c 93       	st	X, r25
     952:	8e 93       	st	-X, r24
     954:	16 97       	sbiw	r26, 0x06	; 6
     956:	8f e7       	ldi	r24, 0x7F	; 127
     958:	93 e0       	ldi	r25, 0x03	; 3
     95a:	19 96       	adiw	r26, 0x09	; 9
     95c:	9c 93       	st	X, r25
     95e:	8e 93       	st	-X, r24
     960:	18 97       	sbiw	r26, 0x08	; 8
     962:	82 e8       	ldi	r24, 0x82	; 130
     964:	93 e0       	ldi	r25, 0x03	; 3
     966:	1b 96       	adiw	r26, 0x0b	; 11
     968:	9c 93       	st	X, r25
     96a:	8e 93       	st	-X, r24
     96c:	1a 97       	sbiw	r26, 0x0a	; 10
     96e:	86 ef       	ldi	r24, 0xF6	; 246
     970:	92 e0       	ldi	r25, 0x02	; 2
     972:	1d 96       	adiw	r26, 0x0d	; 13
     974:	9c 93       	st	X, r25
     976:	8e 93       	st	-X, r24
     978:	1c 97       	sbiw	r26, 0x0c	; 12
     97a:	87 e8       	ldi	r24, 0x87	; 135
     97c:	93 e0       	ldi	r25, 0x03	; 3
     97e:	1f 96       	adiw	r26, 0x0f	; 15
     980:	9c 93       	st	X, r25
     982:	8e 93       	st	-X, r24
     984:	1e 97       	sbiw	r26, 0x0e	; 14
     986:	cd 01       	movw	r24, r26
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	08 95       	ret

0000098e <__vector_16>:
/*
** interrupt
*/
// So that main will not freeze when not defined, therefore exclude here! before use.
//ISR(TIMER0_COMP_vect){ }
ISR(TIMER0_OVF_vect){ }
     98e:	1f 92       	push	r1
     990:	0f 92       	push	r0
     992:	0f b6       	in	r0, 0x3f	; 63
     994:	0f 92       	push	r0
     996:	11 24       	eor	r1, r1
     998:	0f 90       	pop	r0
     99a:	0f be       	out	0x3f, r0	; 63
     99c:	0f 90       	pop	r0
     99e:	1f 90       	pop	r1
     9a0:	18 95       	reti

000009a2 <__vector_11>:
ISR(TIMER1_CAPT_vect){ }
     9a2:	1f 92       	push	r1
     9a4:	0f 92       	push	r0
     9a6:	0f b6       	in	r0, 0x3f	; 63
     9a8:	0f 92       	push	r0
     9aa:	11 24       	eor	r1, r1
     9ac:	0f 90       	pop	r0
     9ae:	0f be       	out	0x3f, r0	; 63
     9b0:	0f 90       	pop	r0
     9b2:	1f 90       	pop	r1
     9b4:	18 95       	reti

000009b6 <__vector_12>:
ISR(TIMER1_COMPA_vect){ }
     9b6:	1f 92       	push	r1
     9b8:	0f 92       	push	r0
     9ba:	0f b6       	in	r0, 0x3f	; 63
     9bc:	0f 92       	push	r0
     9be:	11 24       	eor	r1, r1
     9c0:	0f 90       	pop	r0
     9c2:	0f be       	out	0x3f, r0	; 63
     9c4:	0f 90       	pop	r0
     9c6:	1f 90       	pop	r1
     9c8:	18 95       	reti

000009ca <__vector_13>:
ISR(TIMER1_COMPB_vect){ }
     9ca:	1f 92       	push	r1
     9cc:	0f 92       	push	r0
     9ce:	0f b6       	in	r0, 0x3f	; 63
     9d0:	0f 92       	push	r0
     9d2:	11 24       	eor	r1, r1
     9d4:	0f 90       	pop	r0
     9d6:	0f be       	out	0x3f, r0	; 63
     9d8:	0f 90       	pop	r0
     9da:	1f 90       	pop	r1
     9dc:	18 95       	reti

000009de <__vector_24>:
ISR(TIMER1_COMPC_vect){ }
     9de:	1f 92       	push	r1
     9e0:	0f 92       	push	r0
     9e2:	0f b6       	in	r0, 0x3f	; 63
     9e4:	0f 92       	push	r0
     9e6:	11 24       	eor	r1, r1
     9e8:	0f 90       	pop	r0
     9ea:	0f be       	out	0x3f, r0	; 63
     9ec:	0f 90       	pop	r0
     9ee:	1f 90       	pop	r1
     9f0:	18 95       	reti

000009f2 <__vector_14>:
ISR(TIMER1_OVF_vect){ }
     9f2:	1f 92       	push	r1
     9f4:	0f 92       	push	r0
     9f6:	0f b6       	in	r0, 0x3f	; 63
     9f8:	0f 92       	push	r0
     9fa:	11 24       	eor	r1, r1
     9fc:	0f 90       	pop	r0
     9fe:	0f be       	out	0x3f, r0	; 63
     a00:	0f 90       	pop	r0
     a02:	1f 90       	pop	r1
     a04:	18 95       	reti

00000a06 <__vector_10>:
ISR(TIMER2_OVF_vect){ }
     a06:	1f 92       	push	r1
     a08:	0f 92       	push	r0
     a0a:	0f b6       	in	r0, 0x3f	; 63
     a0c:	0f 92       	push	r0
     a0e:	11 24       	eor	r1, r1
     a10:	0f 90       	pop	r0
     a12:	0f be       	out	0x3f, r0	; 63
     a14:	0f 90       	pop	r0
     a16:	1f 90       	pop	r1
     a18:	18 95       	reti

00000a1a <__vector_25>:
ISR(TIMER3_CAPT_vect){ }
     a1a:	1f 92       	push	r1
     a1c:	0f 92       	push	r0
     a1e:	0f b6       	in	r0, 0x3f	; 63
     a20:	0f 92       	push	r0
     a22:	11 24       	eor	r1, r1
     a24:	0f 90       	pop	r0
     a26:	0f be       	out	0x3f, r0	; 63
     a28:	0f 90       	pop	r0
     a2a:	1f 90       	pop	r1
     a2c:	18 95       	reti

00000a2e <__vector_26>:
ISR(TIMER3_COMPA_vect){ }
     a2e:	1f 92       	push	r1
     a30:	0f 92       	push	r0
     a32:	0f b6       	in	r0, 0x3f	; 63
     a34:	0f 92       	push	r0
     a36:	11 24       	eor	r1, r1
     a38:	0f 90       	pop	r0
     a3a:	0f be       	out	0x3f, r0	; 63
     a3c:	0f 90       	pop	r0
     a3e:	1f 90       	pop	r1
     a40:	18 95       	reti

00000a42 <__vector_27>:
ISR(TIMER3_COMPB_vect){ }
     a42:	1f 92       	push	r1
     a44:	0f 92       	push	r0
     a46:	0f b6       	in	r0, 0x3f	; 63
     a48:	0f 92       	push	r0
     a4a:	11 24       	eor	r1, r1
     a4c:	0f 90       	pop	r0
     a4e:	0f be       	out	0x3f, r0	; 63
     a50:	0f 90       	pop	r0
     a52:	1f 90       	pop	r1
     a54:	18 95       	reti

00000a56 <__vector_28>:
ISR(TIMER3_COMPC_vect){ }
     a56:	1f 92       	push	r1
     a58:	0f 92       	push	r0
     a5a:	0f b6       	in	r0, 0x3f	; 63
     a5c:	0f 92       	push	r0
     a5e:	11 24       	eor	r1, r1
     a60:	0f 90       	pop	r0
     a62:	0f be       	out	0x3f, r0	; 63
     a64:	0f 90       	pop	r0
     a66:	1f 90       	pop	r1
     a68:	18 95       	reti

00000a6a <__vector_29>:
ISR(TIMER3_OVF_vect){ }
     a6a:	1f 92       	push	r1
     a6c:	0f 92       	push	r0
     a6e:	0f b6       	in	r0, 0x3f	; 63
     a70:	0f 92       	push	r0
     a72:	11 24       	eor	r1, r1
     a74:	0f 90       	pop	r0
     a76:	0f be       	out	0x3f, r0	; 63
     a78:	0f 90       	pop	r0
     a7a:	1f 90       	pop	r1
     a7c:	18 95       	reti

00000a7e <uart1_getc>:
void uart1_puts_p(const char *progmem_s )
{
    register char c;
    while ( (c = pgm_read_byte(progmem_s++)) ) 
      uart1_putc(c);
}/* uart1_puts_p */
     a7e:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <UART1_RxHead>
     a82:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <UART1_RxTail>
     a86:	98 17       	cp	r25, r24
     a88:	a1 f0       	breq	.+40     	; 0xab2 <uart1_getc+0x34>
     a8a:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <UART1_RxTail>
     a8e:	8f 5f       	subi	r24, 0xFF	; 255
     a90:	8f 71       	andi	r24, 0x1F	; 31
     a92:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <UART1_RxTail>
     a96:	e0 91 20 02 	lds	r30, 0x0220	; 0x800220 <UART1_RxTail>
     a9a:	f0 e0       	ldi	r31, 0x00	; 0
     a9c:	ec 5d       	subi	r30, 0xDC	; 220
     a9e:	fd 4f       	sbci	r31, 0xFD	; 253
     aa0:	20 81       	ld	r18, Z
     aa2:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <UART1_LastRxError>
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	98 2f       	mov	r25, r24
     aaa:	88 27       	eor	r24, r24
     aac:	82 0f       	add	r24, r18
     aae:	91 1d       	adc	r25, r1
     ab0:	08 95       	ret
     ab2:	80 e0       	ldi	r24, 0x00	; 0
     ab4:	91 e0       	ldi	r25, 0x01	; 1
     ab6:	08 95       	ret

00000ab8 <uart1_available>:
     ab8:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <UART1_RxHead>
     abc:	20 91 20 02 	lds	r18, 0x0220	; 0x800220 <UART1_RxTail>
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	4f 96       	adiw	r24, 0x1f	; 31
     ac4:	82 1b       	sub	r24, r18
     ac6:	91 09       	sbc	r25, r1
     ac8:	6f e1       	ldi	r22, 0x1F	; 31
     aca:	70 e0       	ldi	r23, 0x00	; 0
     acc:	0c 94 11 1d 	jmp	0x3a22	; 0x3a22 <__divmodhi4>
     ad0:	08 95       	ret

00000ad2 <uart1_flush>:
     ad2:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <UART1_RxTail>
     ad6:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <UART1_RxHead>
     ada:	08 95       	ret

00000adc <__vector_18>:
     adc:	1f 92       	push	r1
     ade:	0f 92       	push	r0
     ae0:	0f b6       	in	r0, 0x3f	; 63
     ae2:	0f 92       	push	r0
     ae4:	11 24       	eor	r1, r1
     ae6:	0b b6       	in	r0, 0x3b	; 59
     ae8:	0f 92       	push	r0
     aea:	8f 93       	push	r24
     aec:	9f 93       	push	r25
     aee:	ef 93       	push	r30
     af0:	ff 93       	push	r31
     af2:	8b b1       	in	r24, 0x0b	; 11
     af4:	9a b1       	in	r25, 0x0a	; 10
     af6:	88 71       	andi	r24, 0x18	; 24
     af8:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <UART_LastRxError>
     afc:	e0 91 66 02 	lds	r30, 0x0266	; 0x800266 <UART_RxHead>
     b00:	ef 5f       	subi	r30, 0xFF	; 255
     b02:	ef 71       	andi	r30, 0x1F	; 31
     b04:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <UART_RxTail>
     b08:	e8 13       	cpse	r30, r24
     b0a:	04 c0       	rjmp	.+8      	; 0xb14 <__vector_18+0x38>
     b0c:	82 e0       	ldi	r24, 0x02	; 2
     b0e:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <UART_LastRxError>
     b12:	11 c0       	rjmp	.+34     	; 0xb36 <__vector_18+0x5a>
     b14:	9c b1       	in	r25, 0x0c	; 12
     b16:	e0 93 66 02 	sts	0x0266, r30	; 0x800266 <UART_RxHead>
     b1a:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <UART_LastRxError>
     b1e:	88 23       	and	r24, r24
     b20:	31 f0       	breq	.+12     	; 0xb2e <__vector_18+0x52>
     b22:	f0 e0       	ldi	r31, 0x00	; 0
     b24:	e7 59       	subi	r30, 0x97	; 151
     b26:	fd 4f       	sbci	r31, 0xFD	; 253
     b28:	88 e5       	ldi	r24, 0x58	; 88
     b2a:	80 83       	st	Z, r24
     b2c:	04 c0       	rjmp	.+8      	; 0xb36 <__vector_18+0x5a>
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	e7 59       	subi	r30, 0x97	; 151
     b32:	fd 4f       	sbci	r31, 0xFD	; 253
     b34:	90 83       	st	Z, r25
     b36:	ff 91       	pop	r31
     b38:	ef 91       	pop	r30
     b3a:	9f 91       	pop	r25
     b3c:	8f 91       	pop	r24
     b3e:	0f 90       	pop	r0
     b40:	0b be       	out	0x3b, r0	; 59
     b42:	0f 90       	pop	r0
     b44:	0f be       	out	0x3f, r0	; 63
     b46:	0f 90       	pop	r0
     b48:	1f 90       	pop	r1
     b4a:	18 95       	reti

00000b4c <__vector_19>:
     b4c:	1f 92       	push	r1
     b4e:	0f 92       	push	r0
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	0f 92       	push	r0
     b54:	11 24       	eor	r1, r1
     b56:	0b b6       	in	r0, 0x3b	; 59
     b58:	0f 92       	push	r0
     b5a:	8f 93       	push	r24
     b5c:	9f 93       	push	r25
     b5e:	ef 93       	push	r30
     b60:	ff 93       	push	r31
     b62:	90 91 68 02 	lds	r25, 0x0268	; 0x800268 <UART_TxHead>
     b66:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <UART_TxTail>
     b6a:	98 13       	cpse	r25, r24
     b6c:	02 c0       	rjmp	.+4      	; 0xb72 <__vector_19+0x26>
     b6e:	55 98       	cbi	0x0a, 5	; 10
     b70:	0b c0       	rjmp	.+22     	; 0xb88 <__vector_19+0x3c>
     b72:	e0 91 67 02 	lds	r30, 0x0267	; 0x800267 <UART_TxTail>
     b76:	ef 5f       	subi	r30, 0xFF	; 255
     b78:	ef 71       	andi	r30, 0x1F	; 31
     b7a:	e0 93 67 02 	sts	0x0267, r30	; 0x800267 <UART_TxTail>
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	e7 57       	subi	r30, 0x77	; 119
     b82:	fd 4f       	sbci	r31, 0xFD	; 253
     b84:	80 81       	ld	r24, Z
     b86:	8c b9       	out	0x0c, r24	; 12
     b88:	ff 91       	pop	r31
     b8a:	ef 91       	pop	r30
     b8c:	9f 91       	pop	r25
     b8e:	8f 91       	pop	r24
     b90:	0f 90       	pop	r0
     b92:	0b be       	out	0x3b, r0	; 59
     b94:	0f 90       	pop	r0
     b96:	0f be       	out	0x3f, r0	; 63
     b98:	0f 90       	pop	r0
     b9a:	1f 90       	pop	r1
     b9c:	18 95       	reti

00000b9e <UART1enable>:
     b9e:	ff 92       	push	r15
     ba0:	0f 93       	push	r16
     ba2:	1f 93       	push	r17
     ba4:	cf 93       	push	r28
     ba6:	df 93       	push	r29
     ba8:	fc 01       	movw	r30, r24
     baa:	ff b6       	in	r15, 0x3f	; 63
     bac:	8f b7       	in	r24, 0x3f	; 63
     bae:	8f 77       	andi	r24, 0x7F	; 127
     bb0:	8f bf       	out	0x3f, r24	; 63
     bb2:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <UART1_TxHead>
     bb6:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <UART1_TxTail>
     bba:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <UART1_RxHead>
     bbe:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <UART1_RxTail>
     bc2:	10 92 dc 02 	sts	0x02DC, r1	; 0x8002dc <uart1_index+0x1>
     bc6:	10 92 db 02 	sts	0x02DB, r1	; 0x8002db <uart1_index>
     bca:	10 92 dd 02 	sts	0x02DD, r1	; 0x8002dd <uart1_msg>
     bce:	77 23       	and	r23, r23
     bd0:	34 f4       	brge	.+12     	; 0xbde <UART1enable+0x40>
     bd2:	82 e0       	ldi	r24, 0x02	; 2
     bd4:	80 93 9b 00 	sts	0x009B, r24	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     bd8:	cb 01       	movw	r24, r22
     bda:	9f 77       	andi	r25, 0x7F	; 127
     bdc:	01 c0       	rjmp	.+2      	; 0xbe0 <UART1enable+0x42>
     bde:	cb 01       	movw	r24, r22
     be0:	90 93 98 00 	sts	0x0098, r25	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
     be4:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     be8:	88 e9       	ldi	r24, 0x98	; 152
     bea:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
     bee:	47 30       	cpi	r20, 0x07	; 7
     bf0:	51 05       	cpc	r21, r1
     bf2:	51 f1       	breq	.+84     	; 0xc48 <UART1enable+0xaa>
     bf4:	40 f4       	brcc	.+16     	; 0xc06 <UART1enable+0x68>
     bf6:	45 30       	cpi	r20, 0x05	; 5
     bf8:	51 05       	cpc	r21, r1
     bfa:	09 f4       	brne	.+2      	; 0xbfe <UART1enable+0x60>
     bfc:	45 c0       	rjmp	.+138    	; 0xc88 <UART1enable+0xea>
     bfe:	46 30       	cpi	r20, 0x06	; 6
     c00:	51 05       	cpc	r21, r1
     c02:	91 f1       	breq	.+100    	; 0xc68 <UART1enable+0xca>
     c04:	4e c0       	rjmp	.+156    	; 0xca2 <UART1enable+0x104>
     c06:	48 30       	cpi	r20, 0x08	; 8
     c08:	51 05       	cpc	r21, r1
     c0a:	89 f0       	breq	.+34     	; 0xc2e <UART1enable+0x90>
     c0c:	49 30       	cpi	r20, 0x09	; 9
     c0e:	51 05       	cpc	r21, r1
     c10:	09 f0       	breq	.+2      	; 0xc14 <UART1enable+0x76>
     c12:	47 c0       	rjmp	.+142    	; 0xca2 <UART1enable+0x104>
     c14:	ca e9       	ldi	r28, 0x9A	; 154
     c16:	d0 e0       	ldi	r29, 0x00	; 0
     c18:	88 81       	ld	r24, Y
     c1a:	84 60       	ori	r24, 0x04	; 4
     c1c:	88 83       	st	Y, r24
     c1e:	cd e9       	ldi	r28, 0x9D	; 157
     c20:	d0 e0       	ldi	r29, 0x00	; 0
     c22:	88 81       	ld	r24, Y
     c24:	86 60       	ori	r24, 0x06	; 6
     c26:	88 83       	st	Y, r24
     c28:	c9 e0       	ldi	r28, 0x09	; 9
     c2a:	d0 e0       	ldi	r29, 0x00	; 0
     c2c:	46 c0       	rjmp	.+140    	; 0xcba <UART1enable+0x11c>
     c2e:	ca e9       	ldi	r28, 0x9A	; 154
     c30:	d0 e0       	ldi	r29, 0x00	; 0
     c32:	88 81       	ld	r24, Y
     c34:	8b 7f       	andi	r24, 0xFB	; 251
     c36:	88 83       	st	Y, r24
     c38:	cd e9       	ldi	r28, 0x9D	; 157
     c3a:	d0 e0       	ldi	r29, 0x00	; 0
     c3c:	88 81       	ld	r24, Y
     c3e:	86 60       	ori	r24, 0x06	; 6
     c40:	88 83       	st	Y, r24
     c42:	c8 e0       	ldi	r28, 0x08	; 8
     c44:	d0 e0       	ldi	r29, 0x00	; 0
     c46:	39 c0       	rjmp	.+114    	; 0xcba <UART1enable+0x11c>
     c48:	ca e9       	ldi	r28, 0x9A	; 154
     c4a:	d0 e0       	ldi	r29, 0x00	; 0
     c4c:	88 81       	ld	r24, Y
     c4e:	8b 7f       	andi	r24, 0xFB	; 251
     c50:	88 83       	st	Y, r24
     c52:	cd e9       	ldi	r28, 0x9D	; 157
     c54:	d0 e0       	ldi	r29, 0x00	; 0
     c56:	88 81       	ld	r24, Y
     c58:	84 60       	ori	r24, 0x04	; 4
     c5a:	88 83       	st	Y, r24
     c5c:	88 81       	ld	r24, Y
     c5e:	8d 7f       	andi	r24, 0xFD	; 253
     c60:	88 83       	st	Y, r24
     c62:	c7 e0       	ldi	r28, 0x07	; 7
     c64:	d0 e0       	ldi	r29, 0x00	; 0
     c66:	29 c0       	rjmp	.+82     	; 0xcba <UART1enable+0x11c>
     c68:	ca e9       	ldi	r28, 0x9A	; 154
     c6a:	d0 e0       	ldi	r29, 0x00	; 0
     c6c:	88 81       	ld	r24, Y
     c6e:	8b 7f       	andi	r24, 0xFB	; 251
     c70:	88 83       	st	Y, r24
     c72:	cd e9       	ldi	r28, 0x9D	; 157
     c74:	d0 e0       	ldi	r29, 0x00	; 0
     c76:	88 81       	ld	r24, Y
     c78:	8b 7f       	andi	r24, 0xFB	; 251
     c7a:	88 83       	st	Y, r24
     c7c:	88 81       	ld	r24, Y
     c7e:	82 60       	ori	r24, 0x02	; 2
     c80:	88 83       	st	Y, r24
     c82:	c6 e0       	ldi	r28, 0x06	; 6
     c84:	d0 e0       	ldi	r29, 0x00	; 0
     c86:	19 c0       	rjmp	.+50     	; 0xcba <UART1enable+0x11c>
     c88:	ca e9       	ldi	r28, 0x9A	; 154
     c8a:	d0 e0       	ldi	r29, 0x00	; 0
     c8c:	88 81       	ld	r24, Y
     c8e:	8b 7f       	andi	r24, 0xFB	; 251
     c90:	88 83       	st	Y, r24
     c92:	cd e9       	ldi	r28, 0x9D	; 157
     c94:	d0 e0       	ldi	r29, 0x00	; 0
     c96:	88 81       	ld	r24, Y
     c98:	89 7f       	andi	r24, 0xF9	; 249
     c9a:	88 83       	st	Y, r24
     c9c:	c5 e0       	ldi	r28, 0x05	; 5
     c9e:	d0 e0       	ldi	r29, 0x00	; 0
     ca0:	0c c0       	rjmp	.+24     	; 0xcba <UART1enable+0x11c>
     ca2:	ca e9       	ldi	r28, 0x9A	; 154
     ca4:	d0 e0       	ldi	r29, 0x00	; 0
     ca6:	88 81       	ld	r24, Y
     ca8:	8b 7f       	andi	r24, 0xFB	; 251
     caa:	88 83       	st	Y, r24
     cac:	cd e9       	ldi	r28, 0x9D	; 157
     cae:	d0 e0       	ldi	r29, 0x00	; 0
     cb0:	88 81       	ld	r24, Y
     cb2:	86 60       	ori	r24, 0x06	; 6
     cb4:	88 83       	st	Y, r24
     cb6:	c8 e0       	ldi	r28, 0x08	; 8
     cb8:	d0 e0       	ldi	r29, 0x00	; 0
     cba:	21 30       	cpi	r18, 0x01	; 1
     cbc:	31 05       	cpc	r19, r1
     cbe:	21 f0       	breq	.+8      	; 0xcc8 <UART1enable+0x12a>
     cc0:	22 30       	cpi	r18, 0x02	; 2
     cc2:	31 05       	cpc	r19, r1
     cc4:	51 f0       	breq	.+20     	; 0xcda <UART1enable+0x13c>
     cc6:	12 c0       	rjmp	.+36     	; 0xcec <UART1enable+0x14e>
     cc8:	2d e9       	ldi	r18, 0x9D	; 157
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	d9 01       	movw	r26, r18
     cce:	8c 91       	ld	r24, X
     cd0:	87 7f       	andi	r24, 0xF7	; 247
     cd2:	8c 93       	st	X, r24
     cd4:	41 e0       	ldi	r20, 0x01	; 1
     cd6:	50 e0       	ldi	r21, 0x00	; 0
     cd8:	11 c0       	rjmp	.+34     	; 0xcfc <UART1enable+0x15e>
     cda:	2d e9       	ldi	r18, 0x9D	; 157
     cdc:	30 e0       	ldi	r19, 0x00	; 0
     cde:	d9 01       	movw	r26, r18
     ce0:	8c 91       	ld	r24, X
     ce2:	88 60       	ori	r24, 0x08	; 8
     ce4:	8c 93       	st	X, r24
     ce6:	42 e0       	ldi	r20, 0x02	; 2
     ce8:	50 e0       	ldi	r21, 0x00	; 0
     cea:	08 c0       	rjmp	.+16     	; 0xcfc <UART1enable+0x15e>
     cec:	2d e9       	ldi	r18, 0x9D	; 157
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	d9 01       	movw	r26, r18
     cf2:	8c 91       	ld	r24, X
     cf4:	87 7f       	andi	r24, 0xF7	; 247
     cf6:	8c 93       	st	X, r24
     cf8:	41 e0       	ldi	r20, 0x01	; 1
     cfa:	50 e0       	ldi	r21, 0x00	; 0
     cfc:	02 30       	cpi	r16, 0x02	; 2
     cfe:	11 05       	cpc	r17, r1
     d00:	71 f0       	breq	.+28     	; 0xd1e <UART1enable+0x180>
     d02:	03 30       	cpi	r16, 0x03	; 3
     d04:	11 05       	cpc	r17, r1
     d06:	b9 f0       	breq	.+46     	; 0xd36 <UART1enable+0x198>
     d08:	01 2b       	or	r16, r17
     d0a:	f1 f4       	brne	.+60     	; 0xd48 <UART1enable+0x1aa>
     d0c:	2d e9       	ldi	r18, 0x9D	; 157
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	d9 01       	movw	r26, r18
     d12:	8c 91       	ld	r24, X
     d14:	8f 7c       	andi	r24, 0xCF	; 207
     d16:	8c 93       	st	X, r24
     d18:	20 e0       	ldi	r18, 0x00	; 0
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	1d c0       	rjmp	.+58     	; 0xd58 <UART1enable+0x1ba>
     d1e:	8d e9       	ldi	r24, 0x9D	; 157
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	dc 01       	movw	r26, r24
     d24:	2c 91       	ld	r18, X
     d26:	20 62       	ori	r18, 0x20	; 32
     d28:	2c 93       	st	X, r18
     d2a:	2c 91       	ld	r18, X
     d2c:	2f 7e       	andi	r18, 0xEF	; 239
     d2e:	2c 93       	st	X, r18
     d30:	22 e0       	ldi	r18, 0x02	; 2
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	11 c0       	rjmp	.+34     	; 0xd58 <UART1enable+0x1ba>
     d36:	2d e9       	ldi	r18, 0x9D	; 157
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	d9 01       	movw	r26, r18
     d3c:	8c 91       	ld	r24, X
     d3e:	80 63       	ori	r24, 0x30	; 48
     d40:	8c 93       	st	X, r24
     d42:	23 e0       	ldi	r18, 0x03	; 3
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	08 c0       	rjmp	.+16     	; 0xd58 <UART1enable+0x1ba>
     d48:	2d e9       	ldi	r18, 0x9D	; 157
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	d9 01       	movw	r26, r18
     d4e:	8c 91       	ld	r24, X
     d50:	8f 7c       	andi	r24, 0xCF	; 207
     d52:	8c 93       	st	X, r24
     d54:	20 e0       	ldi	r18, 0x00	; 0
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	ff be       	out	0x3f, r15	; 63
     d5a:	8f b7       	in	r24, 0x3f	; 63
     d5c:	80 68       	ori	r24, 0x80	; 128
     d5e:	8f bf       	out	0x3f, r24	; 63
     d60:	71 83       	std	Z+1, r23	; 0x01
     d62:	60 83       	st	Z, r22
     d64:	d3 83       	std	Z+3, r29	; 0x03
     d66:	c2 83       	std	Z+2, r28	; 0x02
     d68:	55 83       	std	Z+5, r21	; 0x05
     d6a:	44 83       	std	Z+4, r20	; 0x04
     d6c:	37 83       	std	Z+7, r19	; 0x07
     d6e:	26 83       	std	Z+6, r18	; 0x06
     d70:	8c ee       	ldi	r24, 0xEC	; 236
     d72:	96 e0       	ldi	r25, 0x06	; 6
     d74:	91 87       	std	Z+9, r25	; 0x09
     d76:	80 87       	std	Z+8, r24	; 0x08
     d78:	8f e3       	ldi	r24, 0x3F	; 63
     d7a:	95 e0       	ldi	r25, 0x05	; 5
     d7c:	93 87       	std	Z+11, r25	; 0x0b
     d7e:	82 87       	std	Z+10, r24	; 0x0a
     d80:	8b e2       	ldi	r24, 0x2B	; 43
     d82:	97 e0       	ldi	r25, 0x07	; 7
     d84:	95 87       	std	Z+13, r25	; 0x0d
     d86:	84 87       	std	Z+12, r24	; 0x0c
     d88:	82 e3       	ldi	r24, 0x32	; 50
     d8a:	97 e0       	ldi	r25, 0x07	; 7
     d8c:	97 87       	std	Z+15, r25	; 0x0f
     d8e:	86 87       	std	Z+14, r24	; 0x0e
     d90:	8c e5       	ldi	r24, 0x5C	; 92
     d92:	95 e0       	ldi	r25, 0x05	; 5
     d94:	91 8b       	std	Z+17, r25	; 0x11
     d96:	80 8b       	std	Z+16, r24	; 0x10
     d98:	89 e6       	ldi	r24, 0x69	; 105
     d9a:	95 e0       	ldi	r25, 0x05	; 5
     d9c:	93 8b       	std	Z+19, r25	; 0x13
     d9e:	82 8b       	std	Z+18, r24	; 0x12
     da0:	cf 01       	movw	r24, r30
     da2:	df 91       	pop	r29
     da4:	cf 91       	pop	r28
     da6:	1f 91       	pop	r17
     da8:	0f 91       	pop	r16
     daa:	ff 90       	pop	r15
     dac:	08 95       	ret

00000dae <UART1_Rx_pop>:
     dae:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <UART1_RxHead>
     db2:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <UART1_RxTail>
     db6:	98 17       	cp	r25, r24
     db8:	69 f0       	breq	.+26     	; 0xdd4 <UART1_Rx_pop+0x26>
     dba:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <UART1_RxTail>
     dbe:	8f 5f       	subi	r24, 0xFF	; 255
     dc0:	8f 71       	andi	r24, 0x1F	; 31
     dc2:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <UART1_RxTail>
     dc6:	e0 91 20 02 	lds	r30, 0x0220	; 0x800220 <UART1_RxTail>
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	ec 5d       	subi	r30, 0xDC	; 220
     dce:	fd 4f       	sbci	r31, 0xFD	; 253
     dd0:	80 81       	ld	r24, Z
     dd2:	08 95       	ret
     dd4:	80 e0       	ldi	r24, 0x00	; 0
     dd6:	08 95       	ret

00000dd8 <uart1_read>:
     dd8:	cf 93       	push	r28
     dda:	df 93       	push	r29
     ddc:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <UART1_RxTail>
     de0:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <UART1_RxHead>
     de4:	98 17       	cp	r25, r24
     de6:	d9 f0       	breq	.+54     	; 0xe1e <uart1_read+0x46>
     de8:	c0 91 db 02 	lds	r28, 0x02DB	; 0x8002db <uart1_index>
     dec:	d0 91 dc 02 	lds	r29, 0x02DC	; 0x8002dc <uart1_index+0x1>
     df0:	cf 31       	cpi	r28, 0x1F	; 31
     df2:	d1 05       	cpc	r29, r1
     df4:	a4 f4       	brge	.+40     	; 0xe1e <uart1_read+0x46>
     df6:	db df       	rcall	.-74     	; 0xdae <UART1_Rx_pop>
     df8:	c3 52       	subi	r28, 0x23	; 35
     dfa:	dd 4f       	sbci	r29, 0xFD	; 253
     dfc:	88 83       	st	Y, r24
     dfe:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <uart1_index>
     e02:	90 91 dc 02 	lds	r25, 0x02DC	; 0x8002dc <uart1_index+0x1>
     e06:	01 96       	adiw	r24, 0x01	; 1
     e08:	90 93 dc 02 	sts	0x02DC, r25	; 0x8002dc <uart1_index+0x1>
     e0c:	80 93 db 02 	sts	0x02DB, r24	; 0x8002db <uart1_index>
     e10:	fc 01       	movw	r30, r24
     e12:	e3 52       	subi	r30, 0x23	; 35
     e14:	fd 4f       	sbci	r31, 0xFD	; 253
     e16:	10 82       	st	Z, r1
     e18:	80 e1       	ldi	r24, 0x10	; 16
     e1a:	91 e0       	ldi	r25, 0x01	; 1
     e1c:	06 c0       	rjmp	.+12     	; 0xe2a <uart1_read+0x52>
     e1e:	10 92 dc 02 	sts	0x02DC, r1	; 0x8002dc <uart1_index+0x1>
     e22:	10 92 db 02 	sts	0x02DB, r1	; 0x8002db <uart1_index>
     e26:	8d ed       	ldi	r24, 0xDD	; 221
     e28:	92 e0       	ldi	r25, 0x02	; 2
     e2a:	df 91       	pop	r29
     e2c:	cf 91       	pop	r28
     e2e:	08 95       	ret

00000e30 <UART1_Tx_push>:
     e30:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <UART1_TxHead>
     e34:	9f 5f       	subi	r25, 0xFF	; 255
     e36:	9f 71       	andi	r25, 0x1F	; 31
     e38:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <UART1_TxHead>
     e3c:	20 91 23 02 	lds	r18, 0x0223	; 0x800223 <UART1_TxHead>
     e40:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <UART1_TxTail>
     e44:	29 17       	cp	r18, r25
     e46:	d1 f3       	breq	.-12     	; 0xe3c <UART1_Tx_push+0xc>
     e48:	e0 91 23 02 	lds	r30, 0x0223	; 0x800223 <UART1_TxHead>
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	ec 5b       	subi	r30, 0xBC	; 188
     e50:	fd 4f       	sbci	r31, 0xFD	; 253
     e52:	80 83       	st	Z, r24
     e54:	08 95       	ret

00000e56 <uart1_putc>:
     e56:	ec df       	rcall	.-40     	; 0xe30 <UART1_Tx_push>
     e58:	ea e9       	ldi	r30, 0x9A	; 154
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	80 81       	ld	r24, Z
     e5e:	80 62       	ori	r24, 0x20	; 32
     e60:	80 83       	st	Z, r24
     e62:	08 95       	ret

00000e64 <uart1_puts>:
     e64:	cf 93       	push	r28
     e66:	df 93       	push	r29
     e68:	ec 01       	movw	r28, r24
     e6a:	88 81       	ld	r24, Y
     e6c:	88 23       	and	r24, r24
     e6e:	29 f0       	breq	.+10     	; 0xe7a <uart1_puts+0x16>
     e70:	21 96       	adiw	r28, 0x01	; 1
     e72:	f1 df       	rcall	.-30     	; 0xe56 <uart1_putc>
     e74:	89 91       	ld	r24, Y+
     e76:	81 11       	cpse	r24, r1
     e78:	fc cf       	rjmp	.-8      	; 0xe72 <uart1_puts+0xe>
     e7a:	df 91       	pop	r29
     e7c:	cf 91       	pop	r28
     e7e:	08 95       	ret

00000e80 <__vector_30>:
SIGNAL(UART1_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART1 Receive Complete interrupt
Purpose:  called when the UART1 has received a character
**************************************************************************/
{
     e80:	1f 92       	push	r1
     e82:	0f 92       	push	r0
     e84:	0f b6       	in	r0, 0x3f	; 63
     e86:	0f 92       	push	r0
     e88:	11 24       	eor	r1, r1
     e8a:	0b b6       	in	r0, 0x3b	; 59
     e8c:	0f 92       	push	r0
     e8e:	8f 93       	push	r24
     e90:	9f 93       	push	r25
     e92:	ef 93       	push	r30
     e94:	ff 93       	push	r31
    unsigned char tmphead;
	unsigned char data;
	unsigned char bit9;
    unsigned char usr;
    /* read UART status register and UART data register */
	usr  = UART1_STATUS;
     e96:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    bit9 = UART1_CONTROL;
     e9a:	90 91 9a 00 	lds	r25, 0x009A	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
    bit9 = 0x01 & (bit9>>1);
    /* */
    UART1_LastRxError = (usr & (_BV(FE1)|_BV(DOR1)));
     e9e:	88 71       	andi	r24, 0x18	; 24
     ea0:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <UART1_LastRxError>
	/* calculate buffer index */
    tmphead = ( UART1_RxHead + 1) & UART_RX_BUFFER_MASK;
     ea4:	e0 91 21 02 	lds	r30, 0x0221	; 0x800221 <UART1_RxHead>
     ea8:	ef 5f       	subi	r30, 0xFF	; 255
     eaa:	ef 71       	andi	r30, 0x1F	; 31
    if ( tmphead == UART1_RxTail ) {	
     eac:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <UART1_RxTail>
     eb0:	e8 13       	cpse	r30, r24
     eb2:	04 c0       	rjmp	.+8      	; 0xebc <__vector_30+0x3c>
        /* error: receive buffer overflow, caracter is lost*/
        UART1_LastRxError = UART_BUFFER_OVERFLOW >> 8; 
     eb4:	82 e0       	ldi	r24, 0x02	; 2
     eb6:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <UART1_LastRxError>
     eba:	12 c0       	rjmp	.+36     	; 0xee0 <__vector_30+0x60>
	}else{
		data = UART1_DATA;
     ebc:	90 91 9c 00 	lds	r25, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
        /* store new index */
        UART1_RxHead = tmphead;
     ec0:	e0 93 21 02 	sts	0x0221, r30	; 0x800221 <UART1_RxHead>
		if(UART1_LastRxError){
     ec4:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <UART1_LastRxError>
     ec8:	88 23       	and	r24, r24
     eca:	31 f0       	breq	.+12     	; 0xed8 <__vector_30+0x58>
			/* store indication data error in buffer */
			UART1_RxBuf[tmphead] = 'X';
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	ec 5d       	subi	r30, 0xDC	; 220
     ed0:	fd 4f       	sbci	r31, 0xFD	; 253
     ed2:	88 e5       	ldi	r24, 0x58	; 88
     ed4:	80 83       	st	Z, r24
     ed6:	04 c0       	rjmp	.+8      	; 0xee0 <__vector_30+0x60>
		}else{
			/* store received data in buffer */
			UART1_RxBuf[tmphead] = data;
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	ec 5d       	subi	r30, 0xDC	; 220
     edc:	fd 4f       	sbci	r31, 0xFD	; 253
     ede:	90 83       	st	Z, r25
		}
    }
}
     ee0:	ff 91       	pop	r31
     ee2:	ef 91       	pop	r30
     ee4:	9f 91       	pop	r25
     ee6:	8f 91       	pop	r24
     ee8:	0f 90       	pop	r0
     eea:	0b be       	out	0x3b, r0	; 59
     eec:	0f 90       	pop	r0
     eee:	0f be       	out	0x3f, r0	; 63
     ef0:	0f 90       	pop	r0
     ef2:	1f 90       	pop	r1
     ef4:	18 95       	reti

00000ef6 <__vector_31>:
SIGNAL(UART1_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART1 Data Register Empty interrupt
Purpose:  called when the UART1 is ready to transmit the next byte
**************************************************************************/
{
     ef6:	1f 92       	push	r1
     ef8:	0f 92       	push	r0
     efa:	0f b6       	in	r0, 0x3f	; 63
     efc:	0f 92       	push	r0
     efe:	11 24       	eor	r1, r1
     f00:	0b b6       	in	r0, 0x3b	; 59
     f02:	0f 92       	push	r0
     f04:	8f 93       	push	r24
     f06:	9f 93       	push	r25
     f08:	ef 93       	push	r30
     f0a:	ff 93       	push	r31
    if ( UART1_TxHead == UART1_TxTail ) {
     f0c:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <UART1_TxHead>
     f10:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <UART1_TxTail>
     f14:	98 13       	cpse	r25, r24
     f16:	06 c0       	rjmp	.+12     	; 0xf24 <__vector_31+0x2e>
        /* tx buffer empty, disable UDRE interrupt */
        UART1_CONTROL &= ~_BV(UART1_UDRIE);
     f18:	ea e9       	ldi	r30, 0x9A	; 154
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	8f 7d       	andi	r24, 0xDF	; 223
     f20:	80 83       	st	Z, r24
     f22:	0e c0       	rjmp	.+28     	; 0xf40 <__vector_31+0x4a>
    }else{
		/* calculate and store new buffer index */
        UART1_TxTail = (UART1_TxTail + 1) & UART_TX_BUFFER_MASK;
     f24:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <UART1_TxTail>
     f28:	8f 5f       	subi	r24, 0xFF	; 255
     f2a:	8f 71       	andi	r24, 0x1F	; 31
     f2c:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <UART1_TxTail>
        /* get one byte from buffer and write it to UART */
		UART1_DATA = UART1_TxBuf[UART1_TxTail];  /* start transmission */
     f30:	e0 91 22 02 	lds	r30, 0x0222	; 0x800222 <UART1_TxTail>
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	ec 5b       	subi	r30, 0xBC	; 188
     f38:	fd 4f       	sbci	r31, 0xFD	; 253
     f3a:	80 81       	ld	r24, Z
     f3c:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
	}
}
     f40:	ff 91       	pop	r31
     f42:	ef 91       	pop	r30
     f44:	9f 91       	pop	r25
     f46:	8f 91       	pop	r24
     f48:	0f 90       	pop	r0
     f4a:	0b be       	out	0x3b, r0	; 59
     f4c:	0f 90       	pop	r0
     f4e:	0f be       	out	0x3f, r0	; 63
     f50:	0f 90       	pop	r0
     f52:	1f 90       	pop	r1
     f54:	18 95       	reti

00000f56 <FUNCpinmatch>:
}
//pinmatch
uint8_t FUNCpinmatch(uint8_t match, uint8_t pin, uint8_t HL)
{
	uint8_t result;
	result=match&pin;
     f56:	68 23       	and	r22, r24
	if(HL){
     f58:	44 23       	and	r20, r20
     f5a:	21 f0       	breq	.+8      	; 0xf64 <FUNCpinmatch+0xe>
		if(result==match);
     f5c:	86 17       	cp	r24, r22
     f5e:	21 f0       	breq	.+8      	; 0xf68 <FUNCpinmatch+0x12>
		else
			result=0;
     f60:	80 e0       	ldi	r24, 0x00	; 0
     f62:	08 95       	ret
	}else{
		if(result)
     f64:	61 11       	cpse	r22, r1
			result=0;
     f66:	80 e0       	ldi	r24, 0x00	; 0
		else
			result=match;
	}
	return result;
}
     f68:	08 95       	ret

00000f6a <FUNChmerge>:
// hmerge
uint8_t FUNChmerge(uint8_t X, uint8_t Y)
{
	return (X | Y);
}
     f6a:	86 2b       	or	r24, r22
     f6c:	08 95       	ret

00000f6e <FUNClmerge>:
// lmerge
uint8_t FUNClmerge(uint8_t X, uint8_t Y)
{
	return (X & Y);
}
     f6e:	86 23       	and	r24, r22
     f70:	08 95       	ret

00000f72 <FUNChh>:
uint8_t FUNChh(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xi&xf;
	return i;
}
     f72:	86 23       	and	r24, r22
     f74:	08 95       	ret

00000f76 <FUNCll>:
// ll
uint8_t FUNCll(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xi|xf;
	return ~i;
     f76:	86 2b       	or	r24, r22
}
     f78:	80 95       	com	r24
     f7a:	08 95       	ret

00000f7c <FUNClh>:
// lh
uint8_t FUNClh(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xi^xf;
     f7c:	86 27       	eor	r24, r22
	i&=xf;
	return i;
}
     f7e:	86 23       	and	r24, r22
     f80:	08 95       	ret

00000f82 <FUNChl>:
// hl
uint8_t FUNChl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xf^xi;
     f82:	60 95       	com	r22
	i&=xi;
	return i;
}
     f84:	86 23       	and	r24, r22
     f86:	08 95       	ret

00000f88 <FUNCdiff>:
// diff
uint8_t FUNCdiff(uint8_t xi, uint8_t xf)
{
	return xf^xi;
}
     f88:	86 27       	eor	r24, r22
     f8a:	08 95       	ret

00000f8c <FUNCswap>:
// interchange *px and *py
void FUNCswap(long *px, long *py)
{
     f8c:	cf 92       	push	r12
     f8e:	df 92       	push	r13
     f90:	ef 92       	push	r14
     f92:	ff 92       	push	r15
     f94:	0f 93       	push	r16
     f96:	1f 93       	push	r17
	long temp;
	temp = *px;
     f98:	fc 01       	movw	r30, r24
     f9a:	00 81       	ld	r16, Z
     f9c:	11 81       	ldd	r17, Z+1	; 0x01
     f9e:	22 81       	ldd	r18, Z+2	; 0x02
     fa0:	33 81       	ldd	r19, Z+3	; 0x03
	*px = *py;
     fa2:	fb 01       	movw	r30, r22
     fa4:	c0 80       	ld	r12, Z
     fa6:	d1 80       	ldd	r13, Z+1	; 0x01
     fa8:	e2 80       	ldd	r14, Z+2	; 0x02
     faa:	f3 80       	ldd	r15, Z+3	; 0x03
     fac:	fc 01       	movw	r30, r24
     fae:	c0 82       	st	Z, r12
     fb0:	d1 82       	std	Z+1, r13	; 0x01
     fb2:	e2 82       	std	Z+2, r14	; 0x02
     fb4:	f3 82       	std	Z+3, r15	; 0x03
	*py = temp;
     fb6:	fb 01       	movw	r30, r22
     fb8:	00 83       	st	Z, r16
     fba:	11 83       	std	Z+1, r17	; 0x01
     fbc:	22 83       	std	Z+2, r18	; 0x02
     fbe:	33 83       	std	Z+3, r19	; 0x03
}
     fc0:	1f 91       	pop	r17
     fc2:	0f 91       	pop	r16
     fc4:	ff 90       	pop	r15
     fc6:	ef 90       	pop	r14
     fc8:	df 90       	pop	r13
     fca:	cf 90       	pop	r12
     fcc:	08 95       	ret

00000fce <FUNCcopy>:
// copy: copy 'from' into 'to'; assume to is big enough
void FUNCcopy(char to[], char from[])
{
	int i;
	i = 0;
	while ((to[i] = from[i]) != '\0')
     fce:	fb 01       	movw	r30, r22
     fd0:	20 81       	ld	r18, Z
     fd2:	fc 01       	movw	r30, r24
     fd4:	20 83       	st	Z, r18
     fd6:	22 23       	and	r18, r18
     fd8:	39 f0       	breq	.+14     	; 0xfe8 <FUNCcopy+0x1a>
     fda:	db 01       	movw	r26, r22
     fdc:	11 96       	adiw	r26, 0x01	; 1
     fde:	31 96       	adiw	r30, 0x01	; 1
     fe0:	9d 91       	ld	r25, X+
     fe2:	91 93       	st	Z+, r25
     fe4:	91 11       	cpse	r25, r1
     fe6:	fc cf       	rjmp	.-8      	; 0xfe0 <FUNCcopy+0x12>
     fe8:	08 95       	ret

00000fea <FUNCsqueeze>:
		++i;
}
// squeeze: delete all c from s
void FUNCsqueeze(char s[], int c)
{
     fea:	cf 93       	push	r28
     fec:	df 93       	push	r29
     fee:	ec 01       	movw	r28, r24
	int i, j;
	for (i = j = 0; s[i] != '\0'; i++)
     ff0:	98 81       	ld	r25, Y
     ff2:	99 23       	and	r25, r25
     ff4:	99 f0       	breq	.+38     	; 0x101c <FUNCsqueeze+0x32>
     ff6:	fe 01       	movw	r30, r28
     ff8:	31 96       	adiw	r30, 0x01	; 1
     ffa:	20 e0       	ldi	r18, 0x00	; 0
     ffc:	30 e0       	ldi	r19, 0x00	; 0
		if (s[i] != c)
     ffe:	49 2f       	mov	r20, r25
    1000:	50 e0       	ldi	r21, 0x00	; 0
    1002:	46 17       	cp	r20, r22
    1004:	57 07       	cpc	r21, r23
    1006:	31 f0       	breq	.+12     	; 0x1014 <FUNCsqueeze+0x2a>
			s[j++] = s[i];
    1008:	de 01       	movw	r26, r28
    100a:	a2 0f       	add	r26, r18
    100c:	b3 1f       	adc	r27, r19
    100e:	9c 93       	st	X, r25
    1010:	2f 5f       	subi	r18, 0xFF	; 255
    1012:	3f 4f       	sbci	r19, 0xFF	; 255
}
// squeeze: delete all c from s
void FUNCsqueeze(char s[], int c)
{
	int i, j;
	for (i = j = 0; s[i] != '\0'; i++)
    1014:	91 91       	ld	r25, Z+
    1016:	91 11       	cpse	r25, r1
    1018:	f2 cf       	rjmp	.-28     	; 0xffe <FUNCsqueeze+0x14>
    101a:	02 c0       	rjmp	.+4      	; 0x1020 <FUNCsqueeze+0x36>
    101c:	20 e0       	ldi	r18, 0x00	; 0
    101e:	30 e0       	ldi	r19, 0x00	; 0
		if (s[i] != c)
			s[j++] = s[i];
		s[j] = '\0';
    1020:	fe 01       	movw	r30, r28
    1022:	e2 0f       	add	r30, r18
    1024:	f3 1f       	adc	r31, r19
    1026:	10 82       	st	Z, r1
}
    1028:	df 91       	pop	r29
    102a:	cf 91       	pop	r28
    102c:	08 95       	ret

0000102e <FUNCshellsort>:
// shellsort: sort v[0]...v[n-1] into increasing order
void FUNCshellsort(int v[], int n)
{
    102e:	2f 92       	push	r2
    1030:	3f 92       	push	r3
    1032:	4f 92       	push	r4
    1034:	5f 92       	push	r5
    1036:	6f 92       	push	r6
    1038:	7f 92       	push	r7
    103a:	8f 92       	push	r8
    103c:	9f 92       	push	r9
    103e:	af 92       	push	r10
    1040:	bf 92       	push	r11
    1042:	cf 92       	push	r12
    1044:	df 92       	push	r13
    1046:	ef 92       	push	r14
    1048:	ff 92       	push	r15
    104a:	0f 93       	push	r16
    104c:	1f 93       	push	r17
    104e:	cf 93       	push	r28
    1050:	df 93       	push	r29
    1052:	00 d0       	rcall	.+0      	; 0x1054 <FUNCshellsort+0x26>
    1054:	00 d0       	rcall	.+0      	; 0x1056 <FUNCshellsort+0x28>
    1056:	cd b7       	in	r28, 0x3d	; 61
    1058:	de b7       	in	r29, 0x3e	; 62
    105a:	2c 01       	movw	r4, r24
    105c:	1b 01       	movw	r2, r22
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
    105e:	4b 01       	movw	r8, r22
    1060:	77 23       	and	r23, r23
    1062:	1c f4       	brge	.+6      	; 0x106a <FUNCshellsort+0x3c>
    1064:	2f ef       	ldi	r18, 0xFF	; 255
    1066:	82 1a       	sub	r8, r18
    1068:	92 0a       	sbc	r9, r18
    106a:	95 94       	asr	r9
    106c:	87 94       	ror	r8
    106e:	18 14       	cp	r1, r8
    1070:	19 04       	cpc	r1, r9
    1072:	0c f4       	brge	.+2      	; 0x1076 <FUNCshellsort+0x48>
    1074:	51 c0       	rjmp	.+162    	; 0x1118 <__stack+0x19>
    1076:	6a c0       	rjmp	.+212    	; 0x114c <__stack+0x4d>
		for (i = gap; i < n; i++)
			for (j=i-gap; j>=0 && v[j]>v[j+gap]; j-=gap){
    1078:	96 01       	movw	r18, r12
    107a:	dd 20       	and	r13, r13
    107c:	9c f1       	brlt	.+102    	; 0x10e4 <FUNCshellsort+0xb6>
    107e:	f5 01       	movw	r30, r10
    1080:	40 81       	ld	r20, Z
    1082:	51 81       	ldd	r21, Z+1	; 0x01
    1084:	f4 01       	movw	r30, r8
    1086:	60 81       	ld	r22, Z
    1088:	71 81       	ldd	r23, Z+1	; 0x01
    108a:	64 17       	cp	r22, r20
    108c:	75 07       	cpc	r23, r21
    108e:	54 f5       	brge	.+84     	; 0x10e4 <FUNCshellsort+0xb6>
    1090:	8c 01       	movw	r16, r24
    1092:	0a 0d       	add	r16, r10
    1094:	1b 1d       	adc	r17, r11
    1096:	d4 01       	movw	r26, r8
    1098:	bc 82       	std	Y+4, r11	; 0x04
    109a:	ab 82       	std	Y+3, r10	; 0x03
    109c:	ba 82       	std	Y+2, r11	; 0x02
    109e:	a9 82       	std	Y+1, r10	; 0x01
				temp = v[j];
				v[j] = v[j+gap];
    10a0:	eb 81       	ldd	r30, Y+3	; 0x03
    10a2:	fc 81       	ldd	r31, Y+4	; 0x04
    10a4:	71 83       	std	Z+1, r23	; 0x01
    10a6:	60 83       	st	Z, r22
				v[j+gap] = temp;
    10a8:	11 96       	adiw	r26, 0x01	; 1
    10aa:	5c 93       	st	X, r21
    10ac:	4e 93       	st	-X, r20
void FUNCshellsort(int v[], int n)
{
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
		for (i = gap; i < n; i++)
			for (j=i-gap; j>=0 && v[j]>v[j+gap]; j-=gap){
    10ae:	2e 19       	sub	r18, r14
    10b0:	3f 09       	sbc	r19, r15
    10b2:	c2 f0       	brmi	.+48     	; 0x10e4 <FUNCshellsort+0xb6>
    10b4:	f8 01       	movw	r30, r16
    10b6:	40 81       	ld	r20, Z
    10b8:	51 81       	ldd	r21, Z+1	; 0x01
    10ba:	e9 81       	ldd	r30, Y+1	; 0x01
    10bc:	fa 81       	ldd	r31, Y+2	; 0x02
    10be:	60 81       	ld	r22, Z
    10c0:	71 81       	ldd	r23, Z+1	; 0x01
    10c2:	08 0f       	add	r16, r24
    10c4:	19 1f       	adc	r17, r25
    10c6:	e8 0f       	add	r30, r24
    10c8:	f9 1f       	adc	r31, r25
    10ca:	fa 83       	std	Y+2, r31	; 0x02
    10cc:	e9 83       	std	Y+1, r30	; 0x01
    10ce:	eb 81       	ldd	r30, Y+3	; 0x03
    10d0:	fc 81       	ldd	r31, Y+4	; 0x04
    10d2:	e8 0f       	add	r30, r24
    10d4:	f9 1f       	adc	r31, r25
    10d6:	fc 83       	std	Y+4, r31	; 0x04
    10d8:	eb 83       	std	Y+3, r30	; 0x03
    10da:	a8 0f       	add	r26, r24
    10dc:	b9 1f       	adc	r27, r25
    10de:	64 17       	cp	r22, r20
    10e0:	75 07       	cpc	r23, r21
    10e2:	f4 f2       	brlt	.-68     	; 0x10a0 <FUNCshellsort+0x72>
    10e4:	ff ef       	ldi	r31, 0xFF	; 255
    10e6:	cf 1a       	sub	r12, r31
    10e8:	df 0a       	sbc	r13, r31
    10ea:	22 e0       	ldi	r18, 0x02	; 2
    10ec:	a2 0e       	add	r10, r18
    10ee:	b1 1c       	adc	r11, r1
    10f0:	e2 e0       	ldi	r30, 0x02	; 2
    10f2:	8e 0e       	add	r8, r30
    10f4:	91 1c       	adc	r9, r1
// shellsort: sort v[0]...v[n-1] into increasing order
void FUNCshellsort(int v[], int n)
{
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
		for (i = gap; i < n; i++)
    10f6:	c6 14       	cp	r12, r6
    10f8:	d7 04       	cpc	r13, r7
    10fa:	09 f0       	breq	.+2      	; 0x10fe <FUNCshellsort+0xd0>
    10fc:	bd cf       	rjmp	.-134    	; 0x1078 <FUNCshellsort+0x4a>
}
// shellsort: sort v[0]...v[n-1] into increasing order
void FUNCshellsort(int v[], int n)
{
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
    10fe:	47 01       	movw	r8, r14
    1100:	ff 20       	and	r15, r15
    1102:	1c f4       	brge	.+6      	; 0x110a <__stack+0xb>
    1104:	ff ef       	ldi	r31, 0xFF	; 255
    1106:	8f 1a       	sub	r8, r31
    1108:	9f 0a       	sbc	r9, r31
    110a:	95 94       	asr	r9
    110c:	87 94       	ror	r8
    110e:	18 14       	cp	r1, r8
    1110:	19 04       	cpc	r1, r9
    1112:	e4 f4       	brge	.+56     	; 0x114c <__stack+0x4d>
    1114:	74 01       	movw	r14, r8
    1116:	01 c0       	rjmp	.+2      	; 0x111a <__stack+0x1b>
    1118:	74 01       	movw	r14, r8
		for (i = gap; i < n; i++)
    111a:	82 14       	cp	r8, r2
    111c:	93 04       	cpc	r9, r3
    111e:	7c f7       	brge	.-34     	; 0x10fe <FUNCshellsort+0xd0>
    1120:	64 01       	movw	r12, r8
    1122:	ce 18       	sub	r12, r14
    1124:	df 08       	sbc	r13, r15
    1126:	56 01       	movw	r10, r12
    1128:	aa 0c       	add	r10, r10
    112a:	bb 1c       	adc	r11, r11
    112c:	a4 0c       	add	r10, r4
    112e:	b5 1c       	adc	r11, r5
    1130:	88 0c       	add	r8, r8
    1132:	99 1c       	adc	r9, r9
    1134:	84 0c       	add	r8, r4
    1136:	95 1c       	adc	r9, r5
    1138:	31 01       	movw	r6, r2
    113a:	6e 18       	sub	r6, r14
    113c:	7f 08       	sbc	r7, r15
    113e:	c7 01       	movw	r24, r14
    1140:	88 0f       	add	r24, r24
    1142:	99 1f       	adc	r25, r25
    1144:	91 95       	neg	r25
    1146:	81 95       	neg	r24
    1148:	91 09       	sbc	r25, r1
    114a:	96 cf       	rjmp	.-212    	; 0x1078 <FUNCshellsort+0x4a>
			for (j=i-gap; j>=0 && v[j]>v[j+gap]; j-=gap){
				temp = v[j];
				v[j] = v[j+gap];
				v[j+gap] = temp;
			}
}
    114c:	0f 90       	pop	r0
    114e:	0f 90       	pop	r0
    1150:	0f 90       	pop	r0
    1152:	0f 90       	pop	r0
    1154:	df 91       	pop	r29
    1156:	cf 91       	pop	r28
    1158:	1f 91       	pop	r17
    115a:	0f 91       	pop	r16
    115c:	ff 90       	pop	r15
    115e:	ef 90       	pop	r14
    1160:	df 90       	pop	r13
    1162:	cf 90       	pop	r12
    1164:	bf 90       	pop	r11
    1166:	af 90       	pop	r10
    1168:	9f 90       	pop	r9
    116a:	8f 90       	pop	r8
    116c:	7f 90       	pop	r7
    116e:	6f 90       	pop	r6
    1170:	5f 90       	pop	r5
    1172:	4f 90       	pop	r4
    1174:	3f 90       	pop	r3
    1176:	2f 90       	pop	r2
    1178:	08 95       	ret

0000117a <FUNCpmax>:
	if(a1 > a2){
		biggest = a1;
	}else{
		biggest = a2;
	}
	return biggest;
    117a:	86 17       	cp	r24, r22
    117c:	97 07       	cpc	r25, r23
    117e:	0c f4       	brge	.+2      	; 0x1182 <FUNCpmax+0x8>
    1180:	cb 01       	movw	r24, r22
}
    1182:	08 95       	ret

00001184 <FUNCgcd>:
// common divisor
int FUNCgcd (int u, int v)
{
    1184:	9b 01       	movw	r18, r22
	int temp;
	while ( v != 0 ) {
    1186:	67 2b       	or	r22, r23
    1188:	11 f4       	brne	.+4      	; 0x118e <FUNCgcd+0xa>
    118a:	08 95       	ret
		temp = u % v;
		u = v;
		v = temp;
    118c:	9a 01       	movw	r18, r20
// common divisor
int FUNCgcd (int u, int v)
{
	int temp;
	while ( v != 0 ) {
		temp = u % v;
    118e:	b9 01       	movw	r22, r18
    1190:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <__divmodhi4>
    1194:	ac 01       	movw	r20, r24
    1196:	82 2f       	mov	r24, r18
    1198:	93 2f       	mov	r25, r19
}
// common divisor
int FUNCgcd (int u, int v)
{
	int temp;
	while ( v != 0 ) {
    119a:	41 15       	cp	r20, r1
    119c:	51 05       	cpc	r21, r1
    119e:	b1 f7       	brne	.-20     	; 0x118c <FUNCgcd+0x8>
		temp = u % v;
		u = v;
		v = temp;
	}
	return u;
}
    11a0:	08 95       	ret

000011a2 <FUNCstrToInt>:
// Function to convert a string to an integer
int FUNCstrToInt (const char string[])
{
    11a2:	fc 01       	movw	r30, r24
	int i, intValue, result = 0;
	for ( i = 0; string[i] >= '0' && string[i] <= '9'; ++i ){
    11a4:	90 81       	ld	r25, Z
    11a6:	80 ed       	ldi	r24, 0xD0	; 208
    11a8:	89 0f       	add	r24, r25
    11aa:	8a 30       	cpi	r24, 0x0A	; 10
    11ac:	d0 f4       	brcc	.+52     	; 0x11e2 <FUNCstrToInt+0x40>
    11ae:	31 96       	adiw	r30, 0x01	; 1
    11b0:	20 e0       	ldi	r18, 0x00	; 0
    11b2:	30 e0       	ldi	r19, 0x00	; 0
		intValue = string[i] - '0';
		result = result * 10 + intValue;
    11b4:	a9 01       	movw	r20, r18
    11b6:	44 0f       	add	r20, r20
    11b8:	55 1f       	adc	r21, r21
    11ba:	22 0f       	add	r18, r18
    11bc:	33 1f       	adc	r19, r19
    11be:	22 0f       	add	r18, r18
    11c0:	33 1f       	adc	r19, r19
    11c2:	22 0f       	add	r18, r18
    11c4:	33 1f       	adc	r19, r19
    11c6:	42 0f       	add	r20, r18
    11c8:	53 1f       	adc	r21, r19
    11ca:	29 2f       	mov	r18, r25
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	20 53       	subi	r18, 0x30	; 48
    11d0:	31 09       	sbc	r19, r1
    11d2:	24 0f       	add	r18, r20
    11d4:	35 1f       	adc	r19, r21
}
// Function to convert a string to an integer
int FUNCstrToInt (const char string[])
{
	int i, intValue, result = 0;
	for ( i = 0; string[i] >= '0' && string[i] <= '9'; ++i ){
    11d6:	91 91       	ld	r25, Z+
    11d8:	80 ed       	ldi	r24, 0xD0	; 208
    11da:	89 0f       	add	r24, r25
    11dc:	8a 30       	cpi	r24, 0x0A	; 10
    11de:	50 f3       	brcs	.-44     	; 0x11b4 <FUNCstrToInt+0x12>
    11e0:	02 c0       	rjmp	.+4      	; 0x11e6 <FUNCstrToInt+0x44>
	return u;
}
// Function to convert a string to an integer
int FUNCstrToInt (const char string[])
{
	int i, intValue, result = 0;
    11e2:	20 e0       	ldi	r18, 0x00	; 0
    11e4:	30 e0       	ldi	r19, 0x00	; 0
	for ( i = 0; string[i] >= '0' && string[i] <= '9'; ++i ){
		intValue = string[i] - '0';
		result = result * 10 + intValue;
	}
	return result;
}
    11e6:	c9 01       	movw	r24, r18
    11e8:	08 95       	ret

000011ea <FUNCfilter>:
uint8_t FUNCfilter(uint8_t mask, uint8_t data)
{
	uint8_t Z;
	Z=mask & data;
	return Z;
}
    11ea:	86 23       	and	r24, r22
    11ec:	08 95       	ret

000011ee <FUNCticks>:
// ticks
unsigned int FUNCticks(unsigned int num)
{
	unsigned int count;
	for(count=0;count<num;count++)
    11ee:	00 97       	sbiw	r24, 0x00	; 0
    11f0:	39 f0       	breq	.+14     	; 0x1200 <FUNCticks+0x12>
    11f2:	20 e0       	ldi	r18, 0x00	; 0
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	2f 5f       	subi	r18, 0xFF	; 255
    11f8:	3f 4f       	sbci	r19, 0xFF	; 255
    11fa:	82 17       	cp	r24, r18
    11fc:	93 07       	cpc	r25, r19
    11fe:	d9 f7       	brne	.-10     	; 0x11f6 <FUNCticks+0x8>
		;
	return count;
}
    1200:	08 95       	ret

00001202 <FUNCtwocomptoint8bit>:
// Two's Complement function
int FUNCtwocomptoint8bit(int twoscomp){
  
  //Let's see if the byte is negative
  if (twoscomp & 0B10000000){
    1202:	87 ff       	sbrs	r24, 7
    1204:	08 c0       	rjmp	.+16     	; 0x1216 <FUNCtwocomptoint8bit+0x14>
    //Invert
    twoscomp = ~twoscomp + 1;
    1206:	91 95       	neg	r25
    1208:	81 95       	neg	r24
    120a:	91 09       	sbc	r25, r1
	twoscomp = (twoscomp & 0B11111111);
    //Cast as int and multiply by negative one
    int value = (int)(twoscomp)*(-1);
    120c:	99 27       	eor	r25, r25
    120e:	91 95       	neg	r25
    1210:	81 95       	neg	r24
    1212:	91 09       	sbc	r25, r1
    return value;
    1214:	08 95       	ret
    //Byte is non-negative, therefore convert to decimal and display
    //Make sure we are never over 1279
    twoscomp = (twoscomp & 0B01111111);
    //Cast as int and return
    int value = (int)(twoscomp);
    return value;
    1216:	8f 77       	andi	r24, 0x7F	; 127
    1218:	99 27       	eor	r25, r25
  }
}
    121a:	08 95       	ret

0000121c <FUNCtwocomptoint10bit>:
// Two's Complement function, shifts 10 bit binary to signed integers (-512 to 512)
int FUNCtwocomptoint10bit(int twoscomp){
	
  //Let's see if the byte is negative
  if (twoscomp & 0x200){
    121c:	91 ff       	sbrs	r25, 1
    121e:	08 c0       	rjmp	.+16     	; 0x1230 <FUNCtwocomptoint10bit+0x14>
    //Invert
    twoscomp = ~twoscomp + 1;
    1220:	91 95       	neg	r25
    1222:	81 95       	neg	r24
    1224:	91 09       	sbc	r25, r1
    twoscomp = (twoscomp & 0x3FF);
    //Cast as int and multiply by negative one
    int value = (int)(twoscomp)*(-1);
    1226:	93 70       	andi	r25, 0x03	; 3
    1228:	91 95       	neg	r25
    122a:	81 95       	neg	r24
    122c:	91 09       	sbc	r25, r1
    return value;
    122e:	08 95       	ret
    //Byte is non-negative, therefore convert to decimal and display
    twoscomp = (twoscomp & 0x1FF);
    //Cast as int and return
    //Serial.println(twoscomp);
    int value = (int)(twoscomp);
    return value;
    1230:	91 70       	andi	r25, 0x01	; 1
  }
}
    1232:	08 95       	ret

00001234 <FUNCtwocomptointnbit>:
// Two's Complement function, nbits
int FUNCtwocomptointnbit(int twoscomp, uint8_t nbits){
  unsigned int signmask;
  unsigned int mask;
  signmask = (1<<(nbits-1));
    1234:	61 50       	subi	r22, 0x01	; 1
    1236:	21 e0       	ldi	r18, 0x01	; 1
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	02 c0       	rjmp	.+4      	; 0x1240 <FUNCtwocomptointnbit+0xc>
    123c:	22 0f       	add	r18, r18
    123e:	33 1f       	adc	r19, r19
    1240:	6a 95       	dec	r22
    1242:	e2 f7       	brpl	.-8      	; 0x123c <FUNCtwocomptointnbit+0x8>
  mask=signmask-1;
    1244:	a9 01       	movw	r20, r18
    1246:	41 50       	subi	r20, 0x01	; 1
    1248:	51 09       	sbc	r21, r1
  //Let's see if the number is negative
  if (twoscomp & signmask){
    124a:	b9 01       	movw	r22, r18
    124c:	68 23       	and	r22, r24
    124e:	79 23       	and	r23, r25
    1250:	67 2b       	or	r22, r23
    1252:	29 f0       	breq	.+10     	; 0x125e <FUNCtwocomptointnbit+0x2a>
	twoscomp &= mask;
    twoscomp -= signmask;
    1254:	84 23       	and	r24, r20
    1256:	95 23       	and	r25, r21
    1258:	82 1b       	sub	r24, r18
    125a:	93 0b       	sbc	r25, r19
    125c:	08 95       	ret
  }else{
	  twoscomp &= mask;
    125e:	84 23       	and	r24, r20
    1260:	95 23       	and	r25, r21
  }
  return twoscomp;
}
    1262:	08 95       	ret

00001264 <FUNCdec2bcd>:
// Convert Decimal to Binary Coded Decimal (BCD)
char FUNCdec2bcd(char num)
{
	return ((num/10 * 16) + (num % 10));
    1264:	9d ec       	ldi	r25, 0xCD	; 205
    1266:	89 9f       	mul	r24, r25
    1268:	91 2d       	mov	r25, r1
    126a:	11 24       	eor	r1, r1
    126c:	96 95       	lsr	r25
    126e:	96 95       	lsr	r25
    1270:	96 95       	lsr	r25
    1272:	39 2f       	mov	r19, r25
    1274:	33 0f       	add	r19, r19
    1276:	23 2f       	mov	r18, r19
    1278:	22 0f       	add	r18, r18
    127a:	22 0f       	add	r18, r18
    127c:	23 0f       	add	r18, r19
    127e:	82 1b       	sub	r24, r18
}
    1280:	20 e1       	ldi	r18, 0x10	; 16
    1282:	92 9f       	mul	r25, r18
    1284:	80 0d       	add	r24, r0
    1286:	11 24       	eor	r1, r1
    1288:	08 95       	ret

0000128a <FUNCbcd2dec>:
// Convert Binary Coded Decimal (BCD) to Decimal
char FUNCbcd2dec(char num)
{
	return ((num/16 * 10) + (num % 16));
    128a:	98 2f       	mov	r25, r24
    128c:	92 95       	swap	r25
    128e:	9f 70       	andi	r25, 0x0F	; 15
    1290:	99 0f       	add	r25, r25
    1292:	29 2f       	mov	r18, r25
    1294:	22 0f       	add	r18, r18
    1296:	22 0f       	add	r18, r18
    1298:	92 0f       	add	r25, r18
    129a:	8f 70       	andi	r24, 0x0F	; 15
}
    129c:	89 0f       	add	r24, r25
    129e:	08 95       	ret

000012a0 <FUNCresizestr>:
char* FUNCresizestr(char *string, int size)
{
    12a0:	fc 01       	movw	r30, r24
	int i;
	FUNCstr[size]='\0';
    12a2:	db 01       	movw	r26, r22
    12a4:	a1 50       	subi	r26, 0x01	; 1
    12a6:	bd 4f       	sbci	r27, 0xFD	; 253
    12a8:	1c 92       	st	X, r1
	for(i=0;i<size;i++){
    12aa:	16 16       	cp	r1, r22
    12ac:	17 06       	cpc	r1, r23
    12ae:	14 f5       	brge	.+68     	; 0x12f4 <FUNCresizestr+0x54>
		if(*(string+i)=='\0'){
    12b0:	90 81       	ld	r25, Z
    12b2:	91 11       	cpse	r25, r1
    12b4:	0c c0       	rjmp	.+24     	; 0x12ce <FUNCresizestr+0x2e>
    12b6:	17 c0       	rjmp	.+46     	; 0x12e6 <FUNCresizestr+0x46>
    12b8:	91 91       	ld	r25, Z+
    12ba:	91 11       	cpse	r25, r1
    12bc:	0d c0       	rjmp	.+26     	; 0x12d8 <FUNCresizestr+0x38>
    12be:	15 c0       	rjmp	.+42     	; 0x12ea <FUNCresizestr+0x4a>
			for(;i<size;i++){
				FUNCstr[i]=' ';
    12c0:	81 93       	st	Z+, r24
{
	int i;
	FUNCstr[size]='\0';
	for(i=0;i<size;i++){
		if(*(string+i)=='\0'){
			for(;i<size;i++){
    12c2:	2f 5f       	subi	r18, 0xFF	; 255
    12c4:	3f 4f       	sbci	r19, 0xFF	; 255
    12c6:	26 17       	cp	r18, r22
    12c8:	37 07       	cpc	r19, r23
    12ca:	d4 f3       	brlt	.-12     	; 0x12c0 <FUNCresizestr+0x20>
    12cc:	13 c0       	rjmp	.+38     	; 0x12f4 <FUNCresizestr+0x54>
    12ce:	af ef       	ldi	r26, 0xFF	; 255
    12d0:	b2 e0       	ldi	r27, 0x02	; 2
    12d2:	31 96       	adiw	r30, 0x01	; 1
char* FUNCresizestr(char *string, int size)
{
	int i;
	FUNCstr[size]='\0';
	for(i=0;i<size;i++){
		if(*(string+i)=='\0'){
    12d4:	20 e0       	ldi	r18, 0x00	; 0
    12d6:	30 e0       	ldi	r19, 0x00	; 0
			for(;i<size;i++){
				FUNCstr[i]=' ';
			}
			break;
		}
		FUNCstr[i]=*(string+i);
    12d8:	9d 93       	st	X+, r25
}
char* FUNCresizestr(char *string, int size)
{
	int i;
	FUNCstr[size]='\0';
	for(i=0;i<size;i++){
    12da:	2f 5f       	subi	r18, 0xFF	; 255
    12dc:	3f 4f       	sbci	r19, 0xFF	; 255
    12de:	62 17       	cp	r22, r18
    12e0:	73 07       	cpc	r23, r19
    12e2:	51 f7       	brne	.-44     	; 0x12b8 <FUNCresizestr+0x18>
    12e4:	07 c0       	rjmp	.+14     	; 0x12f4 <FUNCresizestr+0x54>
    12e6:	20 e0       	ldi	r18, 0x00	; 0
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	f9 01       	movw	r30, r18
    12ec:	e1 50       	subi	r30, 0x01	; 1
    12ee:	fd 4f       	sbci	r31, 0xFD	; 253
		if(*(string+i)=='\0'){
			for(;i<size;i++){
				FUNCstr[i]=' ';
    12f0:	80 e2       	ldi	r24, 0x20	; 32
    12f2:	e6 cf       	rjmp	.-52     	; 0x12c0 <FUNCresizestr+0x20>
			break;
		}
		FUNCstr[i]=*(string+i);
	}
	return FUNCstr;
}
    12f4:	8f ef       	ldi	r24, 0xFF	; 255
    12f6:	92 e0       	ldi	r25, 0x02	; 2
    12f8:	08 95       	ret

000012fa <FUNCtrimmer>:
long FUNCtrimmer(long x, long in_min, long in_max, long out_min, long out_max)
/*
	same as arduino map function.
*/
{
    12fa:	4f 92       	push	r4
    12fc:	5f 92       	push	r5
    12fe:	6f 92       	push	r6
    1300:	7f 92       	push	r7
    1302:	af 92       	push	r10
    1304:	bf 92       	push	r11
    1306:	cf 92       	push	r12
    1308:	df 92       	push	r13
    130a:	ef 92       	push	r14
    130c:	ff 92       	push	r15
    130e:	0f 93       	push	r16
    1310:	1f 93       	push	r17
    1312:	cf 93       	push	r28
    1314:	df 93       	push	r29
    1316:	cd b7       	in	r28, 0x3d	; 61
    1318:	de b7       	in	r29, 0x3e	; 62
    131a:	29 01       	movw	r4, r18
    131c:	3a 01       	movw	r6, r20
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    131e:	9b 01       	movw	r18, r22
    1320:	ac 01       	movw	r20, r24
    1322:	24 19       	sub	r18, r4
    1324:	35 09       	sbc	r19, r5
    1326:	46 09       	sbc	r20, r6
    1328:	57 09       	sbc	r21, r7
    132a:	89 89       	ldd	r24, Y+17	; 0x11
    132c:	9a 89       	ldd	r25, Y+18	; 0x12
    132e:	ab 89       	ldd	r26, Y+19	; 0x13
    1330:	bc 89       	ldd	r27, Y+20	; 0x14
    1332:	bc 01       	movw	r22, r24
    1334:	cd 01       	movw	r24, r26
    1336:	6a 19       	sub	r22, r10
    1338:	7b 09       	sbc	r23, r11
    133a:	8c 09       	sbc	r24, r12
    133c:	9d 09       	sbc	r25, r13
    133e:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <__mulsi3>
    1342:	a8 01       	movw	r20, r16
    1344:	97 01       	movw	r18, r14
    1346:	24 19       	sub	r18, r4
    1348:	35 09       	sbc	r19, r5
    134a:	46 09       	sbc	r20, r6
    134c:	57 09       	sbc	r21, r7
    134e:	0e 94 46 1d 	call	0x3a8c	; 0x3a8c <__divmodsi4>
    1352:	ca 01       	movw	r24, r20
    1354:	b9 01       	movw	r22, r18
    1356:	6a 0d       	add	r22, r10
    1358:	7b 1d       	adc	r23, r11
    135a:	8c 1d       	adc	r24, r12
    135c:	9d 1d       	adc	r25, r13
}
    135e:	df 91       	pop	r29
    1360:	cf 91       	pop	r28
    1362:	1f 91       	pop	r17
    1364:	0f 91       	pop	r16
    1366:	ff 90       	pop	r15
    1368:	ef 90       	pop	r14
    136a:	df 90       	pop	r13
    136c:	cf 90       	pop	r12
    136e:	bf 90       	pop	r11
    1370:	af 90       	pop	r10
    1372:	7f 90       	pop	r7
    1374:	6f 90       	pop	r6
    1376:	5f 90       	pop	r5
    1378:	4f 90       	pop	r4
    137a:	08 95       	ret

0000137c <Pwr>:
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
    137c:	70 e0       	ldi	r23, 0x00	; 0
    137e:	61 15       	cp	r22, r1
    1380:	71 05       	cpc	r23, r1
    1382:	99 f0       	breq	.+38     	; 0x13aa <Pwr+0x2e>
    1384:	41 e0       	ldi	r20, 0x01	; 1
    1386:	50 e0       	ldi	r21, 0x00	; 0
    1388:	21 e0       	ldi	r18, 0x01	; 1
    138a:	30 e0       	ldi	r19, 0x00	; 0
        p = p * bs;
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	fa 01       	movw	r30, r20
    1390:	e8 9f       	mul	r30, r24
    1392:	a0 01       	movw	r20, r0
    1394:	e9 9f       	mul	r30, r25
    1396:	50 0d       	add	r21, r0
    1398:	f8 9f       	mul	r31, r24
    139a:	50 0d       	add	r21, r0
    139c:	11 24       	eor	r1, r1
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
    139e:	2f 5f       	subi	r18, 0xFF	; 255
    13a0:	3f 4f       	sbci	r19, 0xFF	; 255
    13a2:	62 17       	cp	r22, r18
    13a4:	73 07       	cpc	r23, r19
    13a6:	98 f7       	brcc	.-26     	; 0x138e <Pwr+0x12>
    13a8:	02 c0       	rjmp	.+4      	; 0x13ae <Pwr+0x32>
}
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    13aa:	41 e0       	ldi	r20, 0x01	; 1
    13ac:	50 e0       	ldi	r21, 0x00	; 0
    for (i = 1; i <= n; ++i)
        p = p * bs;
    return p;
}
    13ae:	ca 01       	movw	r24, r20
    13b0:	08 95       	ret

000013b2 <StringLength>:
// Function to count the number of characters in a string
int StringLength (const char string[])
{
	int count = 0;
	while ( string[count] != '\0' )
    13b2:	fc 01       	movw	r30, r24
    13b4:	20 81       	ld	r18, Z
    13b6:	22 23       	and	r18, r18
    13b8:	41 f0       	breq	.+16     	; 0x13ca <StringLength+0x18>
    13ba:	31 96       	adiw	r30, 0x01	; 1
    13bc:	80 e0       	ldi	r24, 0x00	; 0
    13be:	90 e0       	ldi	r25, 0x00	; 0
		++count;
    13c0:	01 96       	adiw	r24, 0x01	; 1
}
// Function to count the number of characters in a string
int StringLength (const char string[])
{
	int count = 0;
	while ( string[count] != '\0' )
    13c2:	21 91       	ld	r18, Z+
    13c4:	21 11       	cpse	r18, r1
    13c6:	fc cf       	rjmp	.-8      	; 0x13c0 <StringLength+0xe>
    13c8:	08 95       	ret
    return p;
}
// Function to count the number of characters in a string
int StringLength (const char string[])
{
	int count = 0;
    13ca:	80 e0       	ldi	r24, 0x00	; 0
    13cc:	90 e0       	ldi	r25, 0x00	; 0
	while ( string[count] != '\0' )
		++count;
	return count;
}
    13ce:	08 95       	ret

000013d0 <FUNCtrim>:
	Reverse(FUNCstr);
	return FUNCstr;
}
// trim: remove trailing blanks, tabs, newlines
int FUNCtrim(char s[])
{
    13d0:	cf 93       	push	r28
    13d2:	df 93       	push	r29
    13d4:	ec 01       	movw	r28, r24
	int n;
	for (n = StringLength(s)-1; n >= 0; n--)
    13d6:	ed df       	rcall	.-38     	; 0x13b2 <StringLength>
    13d8:	9c 01       	movw	r18, r24
    13da:	21 50       	subi	r18, 0x01	; 1
    13dc:	31 09       	sbc	r19, r1
    13de:	62 f0       	brmi	.+24     	; 0x13f8 <FUNCtrim+0x28>
    13e0:	fe 01       	movw	r30, r28
    13e2:	e8 0f       	add	r30, r24
    13e4:	f9 1f       	adc	r31, r25
		if (s[n] != ' ' && s[n] != '\t' && s[n] != '\n')
    13e6:	92 91       	ld	r25, -Z
    13e8:	90 32       	cpi	r25, 0x20	; 32
    13ea:	19 f0       	breq	.+6      	; 0x13f2 <FUNCtrim+0x22>
    13ec:	99 50       	subi	r25, 0x09	; 9
    13ee:	92 30       	cpi	r25, 0x02	; 2
    13f0:	18 f4       	brcc	.+6      	; 0x13f8 <FUNCtrim+0x28>
}
// trim: remove trailing blanks, tabs, newlines
int FUNCtrim(char s[])
{
	int n;
	for (n = StringLength(s)-1; n >= 0; n--)
    13f2:	21 50       	subi	r18, 0x01	; 1
    13f4:	31 09       	sbc	r19, r1
    13f6:	b8 f7       	brcc	.-18     	; 0x13e6 <FUNCtrim+0x16>
		if (s[n] != ' ' && s[n] != '\t' && s[n] != '\n')
			break;
	s[n+1] = '\0';
    13f8:	c2 0f       	add	r28, r18
    13fa:	d3 1f       	adc	r29, r19
    13fc:	19 82       	std	Y+1, r1	; 0x01
	return n;
}
    13fe:	c9 01       	movw	r24, r18
    1400:	df 91       	pop	r29
    1402:	cf 91       	pop	r28
    1404:	08 95       	ret

00001406 <Reverse>:
		++count;
	return count;
}
// reverse: reverse string s in place
void Reverse(char s[])
{
    1406:	cf 93       	push	r28
    1408:	df 93       	push	r29
    140a:	ec 01       	movw	r28, r24
	int c, i, j;
	for (i = 0, j = StringLength(s)-1; i < j; i++, j--){
    140c:	d2 df       	rcall	.-92     	; 0x13b2 <StringLength>
    140e:	9c 01       	movw	r18, r24
    1410:	21 50       	subi	r18, 0x01	; 1
    1412:	31 09       	sbc	r19, r1
    1414:	12 16       	cp	r1, r18
    1416:	13 06       	cpc	r1, r19
    1418:	84 f4       	brge	.+32     	; 0x143a <Reverse+0x34>
    141a:	de 01       	movw	r26, r28
    141c:	a8 0f       	add	r26, r24
    141e:	b9 1f       	adc	r27, r25
    1420:	fe 01       	movw	r30, r28
    1422:	80 e0       	ldi	r24, 0x00	; 0
    1424:	90 e0       	ldi	r25, 0x00	; 0
		c = s[i];
    1426:	40 81       	ld	r20, Z
		s[i] = s[j];
    1428:	5e 91       	ld	r21, -X
    142a:	51 93       	st	Z+, r21
		s[j] = c;
    142c:	4c 93       	st	X, r20
}
// reverse: reverse string s in place
void Reverse(char s[])
{
	int c, i, j;
	for (i = 0, j = StringLength(s)-1; i < j; i++, j--){
    142e:	01 96       	adiw	r24, 0x01	; 1
    1430:	21 50       	subi	r18, 0x01	; 1
    1432:	31 09       	sbc	r19, r1
    1434:	82 17       	cp	r24, r18
    1436:	93 07       	cpc	r25, r19
    1438:	b4 f3       	brlt	.-20     	; 0x1426 <Reverse+0x20>
		c = s[i];
		s[i] = s[j];
		s[j] = c;
	}
}
    143a:	df 91       	pop	r29
    143c:	cf 91       	pop	r28
    143e:	08 95       	ret

00001440 <FUNCi32toa>:
				v[j+gap] = temp;
			}
}
// i32toa: convert n to characters in s
char* FUNCi32toa(int32_t n)
{
    1440:	8f 92       	push	r8
    1442:	9f 92       	push	r9
    1444:	af 92       	push	r10
    1446:	bf 92       	push	r11
    1448:	cf 92       	push	r12
    144a:	df 92       	push	r13
    144c:	ef 92       	push	r14
    144e:	ff 92       	push	r15
    1450:	0f 93       	push	r16
    1452:	1f 93       	push	r17
    1454:	cf 93       	push	r28
    1456:	df 93       	push	r29
    1458:	6b 01       	movw	r12, r22
    145a:	7c 01       	movw	r14, r24
    145c:	dc 01       	movw	r26, r24
    145e:	cb 01       	movw	r24, r22
    1460:	ff 20       	and	r15, r15
    1462:	3c f4       	brge	.+14     	; 0x1472 <FUNCi32toa+0x32>
    1464:	88 27       	eor	r24, r24
    1466:	99 27       	eor	r25, r25
    1468:	dc 01       	movw	r26, r24
    146a:	8c 19       	sub	r24, r12
    146c:	9d 09       	sbc	r25, r13
    146e:	ae 09       	sbc	r26, r14
    1470:	bf 09       	sbc	r27, r15
    1472:	bc 01       	movw	r22, r24
    1474:	cd 01       	movw	r24, r26
    1476:	10 e0       	ldi	r17, 0x00	; 0
	int32_t sign;
	if ((sign = n) < 0) // record sign
	n = -n; // make n positive
	i = 0;
	do { // generate digits in reverse order
		FUNCstr[i++] = n % 10 + '0'; // get next digit
    1478:	0f 2e       	mov	r0, r31
    147a:	fa e0       	ldi	r31, 0x0A	; 10
    147c:	8f 2e       	mov	r8, r31
    147e:	91 2c       	mov	r9, r1
    1480:	a1 2c       	mov	r10, r1
    1482:	b1 2c       	mov	r11, r1
    1484:	f0 2d       	mov	r31, r0
    1486:	01 c0       	rjmp	.+2      	; 0x148a <FUNCi32toa+0x4a>
    1488:	10 2f       	mov	r17, r16
    148a:	01 e0       	ldi	r16, 0x01	; 1
    148c:	01 0f       	add	r16, r17
    148e:	c1 2f       	mov	r28, r17
    1490:	d0 e0       	ldi	r29, 0x00	; 0
    1492:	c1 50       	subi	r28, 0x01	; 1
    1494:	dd 4f       	sbci	r29, 0xFD	; 253
    1496:	a5 01       	movw	r20, r10
    1498:	94 01       	movw	r18, r8
    149a:	0e 94 46 1d 	call	0x3a8c	; 0x3a8c <__divmodsi4>
    149e:	60 5d       	subi	r22, 0xD0	; 208
    14a0:	68 83       	st	Y, r22
	}while ((n /= 10) > 0); // delete it
    14a2:	62 2f       	mov	r22, r18
    14a4:	73 2f       	mov	r23, r19
    14a6:	84 2f       	mov	r24, r20
    14a8:	95 2f       	mov	r25, r21
    14aa:	16 16       	cp	r1, r22
    14ac:	17 06       	cpc	r1, r23
    14ae:	18 06       	cpc	r1, r24
    14b0:	19 06       	cpc	r1, r25
    14b2:	54 f3       	brlt	.-44     	; 0x1488 <FUNCi32toa+0x48>
	if (sign < 0)
    14b4:	ff 20       	and	r15, r15
    14b6:	44 f4       	brge	.+16     	; 0x14c8 <FUNCi32toa+0x88>
	FUNCstr[i++] = '-';
    14b8:	e0 2f       	mov	r30, r16
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	e1 50       	subi	r30, 0x01	; 1
    14be:	fd 4f       	sbci	r31, 0xFD	; 253
    14c0:	8d e2       	ldi	r24, 0x2D	; 45
    14c2:	80 83       	st	Z, r24
    14c4:	02 e0       	ldi	r16, 0x02	; 2
    14c6:	01 0f       	add	r16, r17
	FUNCstr[i] = '\0';
    14c8:	e0 2f       	mov	r30, r16
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	e1 50       	subi	r30, 0x01	; 1
    14ce:	fd 4f       	sbci	r31, 0xFD	; 253
    14d0:	10 82       	st	Z, r1
	Reverse(FUNCstr);
    14d2:	8f ef       	ldi	r24, 0xFF	; 255
    14d4:	92 e0       	ldi	r25, 0x02	; 2
    14d6:	97 df       	rcall	.-210    	; 0x1406 <Reverse>
	return FUNCstr;
}
    14d8:	8f ef       	ldi	r24, 0xFF	; 255
    14da:	92 e0       	ldi	r25, 0x02	; 2
    14dc:	df 91       	pop	r29
    14de:	cf 91       	pop	r28
    14e0:	1f 91       	pop	r17
    14e2:	0f 91       	pop	r16
    14e4:	ff 90       	pop	r15
    14e6:	ef 90       	pop	r14
    14e8:	df 90       	pop	r13
    14ea:	cf 90       	pop	r12
    14ec:	bf 90       	pop	r11
    14ee:	af 90       	pop	r10
    14f0:	9f 90       	pop	r9
    14f2:	8f 90       	pop	r8
    14f4:	08 95       	ret

000014f6 <FUNCi16toa>:
// i16toa: convert n to characters in s
char* FUNCi16toa(int16_t n)
{
    14f6:	0f 93       	push	r16
    14f8:	1f 93       	push	r17
    14fa:	cf 93       	push	r28
    14fc:	df 93       	push	r29
    14fe:	ec 01       	movw	r28, r24
    1500:	99 23       	and	r25, r25
    1502:	24 f4       	brge	.+8      	; 0x150c <FUNCi16toa+0x16>
    1504:	88 27       	eor	r24, r24
    1506:	99 27       	eor	r25, r25
    1508:	8c 1b       	sub	r24, r28
    150a:	9d 0b       	sbc	r25, r29
    150c:	20 e0       	ldi	r18, 0x00	; 0
	int16_t sign;
	if ((sign = n) < 0) // record sign
		n = -n; // make n positive
	i = 0;
	do { // generate digits in reverse order
		FUNCstr[i++] = n % 10 + '0'; // get next digit
    150e:	0a e0       	ldi	r16, 0x0A	; 10
    1510:	10 e0       	ldi	r17, 0x00	; 0
    1512:	01 c0       	rjmp	.+2      	; 0x1516 <FUNCi16toa+0x20>
    1514:	23 2f       	mov	r18, r19
    1516:	31 e0       	ldi	r19, 0x01	; 1
    1518:	32 0f       	add	r19, r18
    151a:	e2 2f       	mov	r30, r18
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	e1 50       	subi	r30, 0x01	; 1
    1520:	fd 4f       	sbci	r31, 0xFD	; 253
    1522:	b8 01       	movw	r22, r16
    1524:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <__divmodhi4>
    1528:	80 5d       	subi	r24, 0xD0	; 208
    152a:	80 83       	st	Z, r24
	}while ((n /= 10) > 0); // delete it
    152c:	86 2f       	mov	r24, r22
    152e:	97 2f       	mov	r25, r23
    1530:	18 16       	cp	r1, r24
    1532:	19 06       	cpc	r1, r25
    1534:	7c f3       	brlt	.-34     	; 0x1514 <FUNCi16toa+0x1e>
	if (sign < 0)
    1536:	dd 23       	and	r29, r29
    1538:	44 f4       	brge	.+16     	; 0x154a <FUNCi16toa+0x54>
		FUNCstr[i++] = '-';
    153a:	e3 2f       	mov	r30, r19
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	e1 50       	subi	r30, 0x01	; 1
    1540:	fd 4f       	sbci	r31, 0xFD	; 253
    1542:	8d e2       	ldi	r24, 0x2D	; 45
    1544:	80 83       	st	Z, r24
    1546:	32 e0       	ldi	r19, 0x02	; 2
    1548:	32 0f       	add	r19, r18
	FUNCstr[i] = '\0';
    154a:	e3 2f       	mov	r30, r19
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	e1 50       	subi	r30, 0x01	; 1
    1550:	fd 4f       	sbci	r31, 0xFD	; 253
    1552:	10 82       	st	Z, r1
	Reverse(FUNCstr);
    1554:	8f ef       	ldi	r24, 0xFF	; 255
    1556:	92 e0       	ldi	r25, 0x02	; 2
    1558:	56 df       	rcall	.-340    	; 0x1406 <Reverse>
	return FUNCstr;
}
    155a:	8f ef       	ldi	r24, 0xFF	; 255
    155c:	92 e0       	ldi	r25, 0x02	; 2
    155e:	df 91       	pop	r29
    1560:	cf 91       	pop	r28
    1562:	1f 91       	pop	r17
    1564:	0f 91       	pop	r16
    1566:	08 95       	ret

00001568 <FUNCui16toa>:
// ui16toa: convert n to characters in s
char* FUNCui16toa(uint16_t n)
{
    1568:	cf 93       	push	r28
    156a:	ac 01       	movw	r20, r24
	uint8_t i;
	i = 0;
    156c:	e0 e0       	ldi	r30, 0x00	; 0
	do { // generate digits in reverse order
		FUNCstr[i++] = n % 10 + '0'; // get next digit
    156e:	c1 e0       	ldi	r28, 0x01	; 1
    1570:	ce 0f       	add	r28, r30
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	e1 50       	subi	r30, 0x01	; 1
    1576:	fd 4f       	sbci	r31, 0xFD	; 253
    1578:	9a 01       	movw	r18, r20
    157a:	ad ec       	ldi	r26, 0xCD	; 205
    157c:	bc ec       	ldi	r27, 0xCC	; 204
    157e:	0e 94 6b 1d 	call	0x3ad6	; 0x3ad6 <__umulhisi3>
    1582:	96 95       	lsr	r25
    1584:	87 95       	ror	r24
    1586:	96 95       	lsr	r25
    1588:	87 95       	ror	r24
    158a:	96 95       	lsr	r25
    158c:	87 95       	ror	r24
    158e:	9c 01       	movw	r18, r24
    1590:	22 0f       	add	r18, r18
    1592:	33 1f       	adc	r19, r19
    1594:	88 0f       	add	r24, r24
    1596:	99 1f       	adc	r25, r25
    1598:	88 0f       	add	r24, r24
    159a:	99 1f       	adc	r25, r25
    159c:	88 0f       	add	r24, r24
    159e:	99 1f       	adc	r25, r25
    15a0:	82 0f       	add	r24, r18
    15a2:	93 1f       	adc	r25, r19
    15a4:	9a 01       	movw	r18, r20
    15a6:	28 1b       	sub	r18, r24
    15a8:	39 0b       	sbc	r19, r25
    15aa:	c9 01       	movw	r24, r18
    15ac:	80 5d       	subi	r24, 0xD0	; 208
    15ae:	80 83       	st	Z, r24
	}while ((n /= 10) > 0); // delete it
    15b0:	9a 01       	movw	r18, r20
    15b2:	0e 94 6b 1d 	call	0x3ad6	; 0x3ad6 <__umulhisi3>
    15b6:	ac 01       	movw	r20, r24
    15b8:	56 95       	lsr	r21
    15ba:	47 95       	ror	r20
    15bc:	56 95       	lsr	r21
    15be:	47 95       	ror	r20
    15c0:	56 95       	lsr	r21
    15c2:	47 95       	ror	r20
char* FUNCui16toa(uint16_t n)
{
	uint8_t i;
	i = 0;
	do { // generate digits in reverse order
		FUNCstr[i++] = n % 10 + '0'; // get next digit
    15c4:	ec 2f       	mov	r30, r28
	}while ((n /= 10) > 0); // delete it
    15c6:	41 15       	cp	r20, r1
    15c8:	51 05       	cpc	r21, r1
    15ca:	89 f6       	brne	.-94     	; 0x156e <FUNCui16toa+0x6>
	FUNCstr[i] = '\0';
    15cc:	ec 2f       	mov	r30, r28
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	e1 50       	subi	r30, 0x01	; 1
    15d2:	fd 4f       	sbci	r31, 0xFD	; 253
    15d4:	10 82       	st	Z, r1
	Reverse(FUNCstr);
    15d6:	8f ef       	ldi	r24, 0xFF	; 255
    15d8:	92 e0       	ldi	r25, 0x02	; 2
    15da:	15 df       	rcall	.-470    	; 0x1406 <Reverse>
	return FUNCstr;
}
    15dc:	8f ef       	ldi	r24, 0xFF	; 255
    15de:	92 e0       	ldi	r25, 0x02	; 2
    15e0:	cf 91       	pop	r28
    15e2:	08 95       	ret

000015e4 <FUNCbcd2bin>:
		s[j] = c;
	}
}
unsigned char FUNCbcd2bin(unsigned char val)
{
	return (val & 0x0f) + (val >> 4) * 10;
    15e4:	98 2f       	mov	r25, r24
    15e6:	92 95       	swap	r25
    15e8:	9f 70       	andi	r25, 0x0F	; 15
    15ea:	99 0f       	add	r25, r25
    15ec:	29 2f       	mov	r18, r25
    15ee:	22 0f       	add	r18, r18
    15f0:	22 0f       	add	r18, r18
    15f2:	92 0f       	add	r25, r18
    15f4:	8f 70       	andi	r24, 0x0F	; 15
}
    15f6:	89 0f       	add	r24, r25
    15f8:	08 95       	ret

000015fa <FUNCbin2bcd>:
unsigned char FUNCbin2bcd(unsigned val)
{
    15fa:	ac 01       	movw	r20, r24
	return ((val / 10) << 4) + val % 10;
    15fc:	9c 01       	movw	r18, r24
    15fe:	ad ec       	ldi	r26, 0xCD	; 205
    1600:	bc ec       	ldi	r27, 0xCC	; 204
    1602:	0e 94 6b 1d 	call	0x3ad6	; 0x3ad6 <__umulhisi3>
    1606:	96 95       	lsr	r25
    1608:	87 95       	ror	r24
    160a:	96 95       	lsr	r25
    160c:	87 95       	ror	r24
    160e:	96 95       	lsr	r25
    1610:	87 95       	ror	r24
    1612:	bc 01       	movw	r22, r24
    1614:	66 0f       	add	r22, r22
    1616:	77 1f       	adc	r23, r23
    1618:	9c 01       	movw	r18, r24
    161a:	22 0f       	add	r18, r18
    161c:	33 1f       	adc	r19, r19
    161e:	22 0f       	add	r18, r18
    1620:	33 1f       	adc	r19, r19
    1622:	22 0f       	add	r18, r18
    1624:	33 1f       	adc	r19, r19
    1626:	26 0f       	add	r18, r22
    1628:	37 1f       	adc	r19, r23
    162a:	42 1b       	sub	r20, r18
    162c:	53 0b       	sbc	r21, r19
}
    162e:	34 2f       	mov	r19, r20
    1630:	20 e1       	ldi	r18, 0x10	; 16
    1632:	82 9f       	mul	r24, r18
    1634:	30 0d       	add	r19, r0
    1636:	11 24       	eor	r1, r1
    1638:	83 2f       	mov	r24, r19
    163a:	08 95       	ret

0000163c <FUNCgcd1>:
long FUNCgcd1(long a, long b)
{
    163c:	cf 92       	push	r12
    163e:	df 92       	push	r13
    1640:	ef 92       	push	r14
    1642:	ff 92       	push	r15
    1644:	cf 93       	push	r28
    1646:	df 93       	push	r29
    1648:	cd b7       	in	r28, 0x3d	; 61
    164a:	de b7       	in	r29, 0x3e	; 62
    164c:	28 97       	sbiw	r28, 0x08	; 8
    164e:	0f b6       	in	r0, 0x3f	; 63
    1650:	f8 94       	cli
    1652:	de bf       	out	0x3e, r29	; 62
    1654:	0f be       	out	0x3f, r0	; 63
    1656:	cd bf       	out	0x3d, r28	; 61
    1658:	6b 01       	movw	r12, r22
    165a:	7c 01       	movw	r14, r24
    165c:	69 83       	std	Y+1, r22	; 0x01
    165e:	7a 83       	std	Y+2, r23	; 0x02
    1660:	8b 83       	std	Y+3, r24	; 0x03
    1662:	9c 83       	std	Y+4, r25	; 0x04
    1664:	2d 83       	std	Y+5, r18	; 0x05
    1666:	3e 83       	std	Y+6, r19	; 0x06
    1668:	4f 83       	std	Y+7, r20	; 0x07
    166a:	58 87       	std	Y+8, r21	; 0x08
	long r;
	if (a < b)
    166c:	c2 16       	cp	r12, r18
    166e:	d3 06       	cpc	r13, r19
    1670:	e4 06       	cpc	r14, r20
    1672:	f5 06       	cpc	r15, r21
    1674:	34 f4       	brge	.+12     	; 0x1682 <FUNCgcd1+0x46>
		FUNCswap(&a, &b);
    1676:	be 01       	movw	r22, r28
    1678:	6b 5f       	subi	r22, 0xFB	; 251
    167a:	7f 4f       	sbci	r23, 0xFF	; 255
    167c:	ce 01       	movw	r24, r28
    167e:	01 96       	adiw	r24, 0x01	; 1
    1680:	85 dc       	rcall	.-1782   	; 0xf8c <FUNCswap>
	if (!b){
    1682:	8d 81       	ldd	r24, Y+5	; 0x05
    1684:	9e 81       	ldd	r25, Y+6	; 0x06
    1686:	af 81       	ldd	r26, Y+7	; 0x07
    1688:	b8 85       	ldd	r27, Y+8	; 0x08
    168a:	89 2b       	or	r24, r25
    168c:	8a 2b       	or	r24, r26
    168e:	8b 2b       	or	r24, r27
    1690:	71 f4       	brne	.+28     	; 0x16ae <FUNCgcd1+0x72>
		while ((r = a % b) != 0) {
    1692:	69 81       	ldd	r22, Y+1	; 0x01
    1694:	7a 81       	ldd	r23, Y+2	; 0x02
    1696:	8b 81       	ldd	r24, Y+3	; 0x03
    1698:	9c 81       	ldd	r25, Y+4	; 0x04
    169a:	20 e0       	ldi	r18, 0x00	; 0
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	a9 01       	movw	r20, r18
    16a0:	0e 94 46 1d 	call	0x3a8c	; 0x3a8c <__divmodsi4>
    16a4:	61 15       	cp	r22, r1
    16a6:	71 05       	cpc	r23, r1
    16a8:	81 05       	cpc	r24, r1
    16aa:	91 05       	cpc	r25, r1
    16ac:	29 f4       	brne	.+10     	; 0x16b8 <FUNCgcd1+0x7c>
			a = b;
			b = r;
		}
	}	
	return b;
    16ae:	6d 81       	ldd	r22, Y+5	; 0x05
    16b0:	7e 81       	ldd	r23, Y+6	; 0x06
    16b2:	8f 81       	ldd	r24, Y+7	; 0x07
    16b4:	98 85       	ldd	r25, Y+8	; 0x08
    16b6:	05 c0       	rjmp	.+10     	; 0x16c2 <FUNCgcd1+0x86>
	if (a < b)
		FUNCswap(&a, &b);
	if (!b){
		while ((r = a % b) != 0) {
			a = b;
			b = r;
    16b8:	6d 83       	std	Y+5, r22	; 0x05
    16ba:	7e 83       	std	Y+6, r23	; 0x06
    16bc:	8f 83       	std	Y+7, r24	; 0x07
    16be:	98 87       	std	Y+8, r25	; 0x08
    16c0:	f6 cf       	rjmp	.-20     	; 0x16ae <FUNCgcd1+0x72>
		}
	}	
	return b;
}
    16c2:	28 96       	adiw	r28, 0x08	; 8
    16c4:	0f b6       	in	r0, 0x3f	; 63
    16c6:	f8 94       	cli
    16c8:	de bf       	out	0x3e, r29	; 62
    16ca:	0f be       	out	0x3f, r0	; 63
    16cc:	cd bf       	out	0x3d, r28	; 61
    16ce:	df 91       	pop	r29
    16d0:	cf 91       	pop	r28
    16d2:	ff 90       	pop	r15
    16d4:	ef 90       	pop	r14
    16d6:	df 90       	pop	r13
    16d8:	cf 90       	pop	r12
    16da:	08 95       	ret

000016dc <FUNCpincheck>:
	uint8_t lh;
	if(port & (1<<pin))
		lh=1;
	else
		lh=0;
	return lh;
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	02 c0       	rjmp	.+4      	; 0x16e4 <FUNCpincheck+0x8>
    16e0:	95 95       	asr	r25
    16e2:	87 95       	ror	r24
    16e4:	6a 95       	dec	r22
    16e6:	e2 f7       	brpl	.-8      	; 0x16e0 <FUNCpincheck+0x4>
}
    16e8:	81 70       	andi	r24, 0x01	; 1
    16ea:	08 95       	ret

000016ec <FUNCprint_binary>:
char* FUNCprint_binary(uint8_t number)
{
    16ec:	ef ef       	ldi	r30, 0xFF	; 255
    16ee:	f2 e0       	ldi	r31, 0x02	; 2
	uint8_t i,c;
    for(i=128,c=0;i;i>>=1,c++){
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	20 e8       	ldi	r18, 0x80	; 128
	(number & i) ? (FUNCstr[c]='1') : (FUNCstr[c]='0');
    16f4:	50 e3       	ldi	r21, 0x30	; 48
    16f6:	41 e3       	ldi	r20, 0x31	; 49
    16f8:	38 2f       	mov	r19, r24
    16fa:	32 23       	and	r19, r18
    16fc:	11 f0       	breq	.+4      	; 0x1702 <FUNCprint_binary+0x16>
    16fe:	40 83       	st	Z, r20
    1700:	01 c0       	rjmp	.+2      	; 0x1704 <FUNCprint_binary+0x18>
    1702:	50 83       	st	Z, r21
	return lh;
}
char* FUNCprint_binary(uint8_t number)
{
	uint8_t i,c;
    for(i=128,c=0;i;i>>=1,c++){
    1704:	26 95       	lsr	r18
    1706:	9f 5f       	subi	r25, 0xFF	; 255
    1708:	31 96       	adiw	r30, 0x01	; 1
    170a:	98 30       	cpi	r25, 0x08	; 8
    170c:	a9 f7       	brne	.-22     	; 0x16f8 <FUNCprint_binary+0xc>
	(number & i) ? (FUNCstr[c]='1') : (FUNCstr[c]='0');
	}
	FUNCstr[c]='\0';
    170e:	10 92 07 03 	sts	0x0307, r1	; 0x800307 <FUNCstr+0x8>
	return FUNCstr;
}
    1712:	8f ef       	ldi	r24, 0xFF	; 255
    1714:	92 e0       	ldi	r25, 0x02	; 2
    1716:	08 95       	ret

00001718 <FUNCmayia>:
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
    1718:	a4 2f       	mov	r26, r20
    171a:	b0 e0       	ldi	r27, 0x00	; 0
    171c:	10 97       	sbiw	r26, 0x00	; 0
    171e:	61 f0       	breq	.+24     	; 0x1738 <FUNCmayia+0x20>
    1720:	21 e0       	ldi	r18, 0x01	; 1
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	e1 e0       	ldi	r30, 0x01	; 1
    1726:	f0 e0       	ldi	r31, 0x00	; 0
        p = p * bs;
    1728:	ee 0f       	add	r30, r30
    172a:	ff 1f       	adc	r31, r31
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
    172c:	2f 5f       	subi	r18, 0xFF	; 255
    172e:	3f 4f       	sbci	r19, 0xFF	; 255
    1730:	a2 17       	cp	r26, r18
    1732:	b3 07       	cpc	r27, r19
    1734:	c8 f7       	brcc	.-14     	; 0x1728 <FUNCmayia+0x10>
    1736:	02 c0       	rjmp	.+4      	; 0x173c <FUNCmayia+0x24>
}
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    1738:	e1 e0       	ldi	r30, 0x01	; 1
    173a:	f0 e0       	ldi	r31, 0x00	; 0
unsigned int FUNCmayia(unsigned int xi, unsigned int xf, uint8_t nbits)
{//magic formula
	unsigned int mask;
	unsigned int diff;
	unsigned int trans;
	mask=Pwr(2,nbits)-1;
    173c:	31 97       	sbiw	r30, 0x01	; 1
	xi&=mask;
	xf&=mask;
    173e:	6e 23       	and	r22, r30
    1740:	7f 23       	and	r23, r31
	diff=xf^xi;
    1742:	8e 23       	and	r24, r30
    1744:	9f 23       	and	r25, r31
    1746:	86 27       	eor	r24, r22
    1748:	97 27       	eor	r25, r23
	trans=diff&xf;
	return (trans<<nbits)|diff;
    174a:	68 23       	and	r22, r24
    174c:	79 23       	and	r23, r25
    174e:	02 c0       	rjmp	.+4      	; 0x1754 <FUNCmayia+0x3c>
    1750:	66 0f       	add	r22, r22
    1752:	77 1f       	adc	r23, r23
    1754:	4a 95       	dec	r20
    1756:	e2 f7       	brpl	.-8      	; 0x1750 <FUNCmayia+0x38>
}
    1758:	86 2b       	or	r24, r22
    175a:	97 2b       	or	r25, r23
    175c:	08 95       	ret

0000175e <FUNCenable>:
// uint8_t TRANupdate(struct TRAN *tr, uint8_t idata);
/*
** procedure and function
*/
FUNC FUNCenable( void )
{
    175e:	fc 01       	movw	r30, r24
	uint8_t tSREG;
	tSREG=SREG;
    1760:	9f b7       	in	r25, 0x3f	; 63
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
    1762:	8f b7       	in	r24, 0x3f	; 63
    1764:	8f 77       	andi	r24, 0x7F	; 127
    1766:	8f bf       	out	0x3f, r24	; 63
	func.putstr=FUNCputstr;
	func.getnum=FUNCgetnum;
	func.getnumv2=FUNCgetnumv2;
	func.readint=FUNCreadint;
	*/
	SREG=tSREG;
    1768:	9f bf       	out	0x3f, r25	; 63
	/******/
	return func;
    176a:	8e eb       	ldi	r24, 0xBE	; 190
    176c:	99 e0       	ldi	r25, 0x09	; 9
    176e:	91 83       	std	Z+1, r25	; 0x01
    1770:	80 83       	st	Z, r24
    1772:	89 ed       	ldi	r24, 0xD9	; 217
    1774:	99 e0       	ldi	r25, 0x09	; 9
    1776:	93 83       	std	Z+3, r25	; 0x03
    1778:	82 83       	std	Z+2, r24	; 0x02
    177a:	83 e0       	ldi	r24, 0x03	; 3
    177c:	9a e0       	ldi	r25, 0x0A	; 10
    177e:	95 83       	std	Z+5, r25	; 0x05
    1780:	84 83       	std	Z+4, r24	; 0x04
    1782:	8c e8       	ldi	r24, 0x8C	; 140
    1784:	9b e0       	ldi	r25, 0x0B	; 11
    1786:	97 83       	std	Z+7, r25	; 0x07
    1788:	86 83       	std	Z+6, r24	; 0x06
    178a:	8b ea       	ldi	r24, 0xAB	; 171
    178c:	97 e0       	ldi	r25, 0x07	; 7
    178e:	91 87       	std	Z+9, r25	; 0x09
    1790:	80 87       	std	Z+8, r24	; 0x08
    1792:	89 eb       	ldi	r24, 0xB9	; 185
    1794:	97 e0       	ldi	r25, 0x07	; 7
    1796:	93 87       	std	Z+11, r25	; 0x0b
    1798:	82 87       	std	Z+10, r24	; 0x0a
    179a:	8b eb       	ldi	r24, 0xBB	; 187
    179c:	97 e0       	ldi	r25, 0x07	; 7
    179e:	95 87       	std	Z+13, r25	; 0x0d
    17a0:	84 87       	std	Z+12, r24	; 0x0c
    17a2:	8e eb       	ldi	r24, 0xBE	; 190
    17a4:	97 e0       	ldi	r25, 0x07	; 7
    17a6:	97 87       	std	Z+15, r25	; 0x0f
    17a8:	86 87       	std	Z+14, r24	; 0x0e
    17aa:	81 ec       	ldi	r24, 0xC1	; 193
    17ac:	97 e0       	ldi	r25, 0x07	; 7
    17ae:	91 8b       	std	Z+17, r25	; 0x11
    17b0:	80 8b       	std	Z+16, r24	; 0x10
    17b2:	84 ec       	ldi	r24, 0xC4	; 196
    17b4:	97 e0       	ldi	r25, 0x07	; 7
    17b6:	93 8b       	std	Z+19, r25	; 0x13
    17b8:	82 8b       	std	Z+18, r24	; 0x12
    17ba:	85 eb       	ldi	r24, 0xB5	; 181
    17bc:	97 e0       	ldi	r25, 0x07	; 7
    17be:	95 8b       	std	Z+21, r25	; 0x15
    17c0:	84 8b       	std	Z+20, r24	; 0x14
    17c2:	87 eb       	ldi	r24, 0xB7	; 183
    17c4:	97 e0       	ldi	r25, 0x07	; 7
    17c6:	97 8b       	std	Z+23, r25	; 0x17
    17c8:	86 8b       	std	Z+22, r24	; 0x16
    17ca:	86 ec       	ldi	r24, 0xC6	; 198
    17cc:	97 e0       	ldi	r25, 0x07	; 7
    17ce:	91 8f       	std	Z+25, r25	; 0x19
    17d0:	80 8f       	std	Z+24, r24	; 0x18
    17d2:	87 ee       	ldi	r24, 0xE7	; 231
    17d4:	97 e0       	ldi	r25, 0x07	; 7
    17d6:	93 8f       	std	Z+27, r25	; 0x1b
    17d8:	82 8f       	std	Z+26, r24	; 0x1a
    17da:	85 ef       	ldi	r24, 0xF5	; 245
    17dc:	97 e0       	ldi	r25, 0x07	; 7
    17de:	95 8f       	std	Z+29, r25	; 0x1d
    17e0:	84 8f       	std	Z+28, r24	; 0x1c
    17e2:	87 e1       	ldi	r24, 0x17	; 23
    17e4:	98 e0       	ldi	r25, 0x08	; 8
    17e6:	97 8f       	std	Z+31, r25	; 0x1f
    17e8:	86 8f       	std	Z+30, r24	; 0x1e
    17ea:	8b e7       	ldi	r24, 0x7B	; 123
    17ec:	9a e0       	ldi	r25, 0x0A	; 10
    17ee:	91 a3       	std	Z+33, r25	; 0x21
    17f0:	80 a3       	std	Z+32, r24	; 0x20
    17f2:	84 eb       	ldi	r24, 0xB4	; 180
    17f4:	9a e0       	ldi	r25, 0x0A	; 10
    17f6:	93 a3       	std	Z+35, r25	; 0x23
    17f8:	82 a3       	std	Z+34, r24	; 0x22
    17fa:	80 e2       	ldi	r24, 0x20	; 32
    17fc:	9a e0       	ldi	r25, 0x0A	; 10
    17fe:	95 a3       	std	Z+37, r25	; 0x25
    1800:	84 a3       	std	Z+36, r24	; 0x24
    1802:	88 ee       	ldi	r24, 0xE8	; 232
    1804:	99 e0       	ldi	r25, 0x09	; 9
    1806:	97 a3       	std	Z+39, r25	; 0x27
    1808:	86 a3       	std	Z+38, r24	; 0x26
    180a:	8d eb       	ldi	r24, 0xBD	; 189
    180c:	98 e0       	ldi	r25, 0x08	; 8
    180e:	91 a7       	std	Z+41, r25	; 0x29
    1810:	80 a7       	std	Z+40, r24	; 0x28
    1812:	82 ec       	ldi	r24, 0xC2	; 194
    1814:	98 e0       	ldi	r25, 0x08	; 8
    1816:	93 a7       	std	Z+43, r25	; 0x2b
    1818:	82 a7       	std	Z+42, r24	; 0x2a
    181a:	81 ed       	ldi	r24, 0xD1	; 209
    181c:	98 e0       	ldi	r25, 0x08	; 8
    181e:	95 a7       	std	Z+45, r25	; 0x2d
    1820:	84 a7       	std	Z+44, r24	; 0x2c
    1822:	85 ef       	ldi	r24, 0xF5	; 245
    1824:	98 e0       	ldi	r25, 0x08	; 8
    1826:	97 a7       	std	Z+47, r25	; 0x2f
    1828:	86 a7       	std	Z+46, r24	; 0x2e
    182a:	87 ef       	ldi	r24, 0xF7	; 247
    182c:	98 e0       	ldi	r25, 0x08	; 8
    182e:	91 ab       	std	Z+49, r25	; 0x31
    1830:	80 ab       	std	Z+48, r24	; 0x30
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	99 e0       	ldi	r25, 0x09	; 9
    1836:	93 ab       	std	Z+51, r25	; 0x33
    1838:	82 ab       	std	Z+50, r24	; 0x32
    183a:	8e e0       	ldi	r24, 0x0E	; 14
    183c:	99 e0       	ldi	r25, 0x09	; 9
    183e:	95 ab       	std	Z+53, r25	; 0x35
    1840:	84 ab       	std	Z+52, r24	; 0x34
    1842:	8a e1       	ldi	r24, 0x1A	; 26
    1844:	99 e0       	ldi	r25, 0x09	; 9
    1846:	97 ab       	std	Z+55, r25	; 0x37
    1848:	86 ab       	std	Z+54, r24	; 0x36
    184a:	82 e3       	ldi	r24, 0x32	; 50
    184c:	99 e0       	ldi	r25, 0x09	; 9
    184e:	91 af       	std	Z+57, r25	; 0x39
    1850:	80 af       	std	Z+56, r24	; 0x38
    1852:	85 e4       	ldi	r24, 0x45	; 69
    1854:	99 e0       	ldi	r25, 0x09	; 9
    1856:	93 af       	std	Z+59, r25	; 0x3b
    1858:	82 af       	std	Z+58, r24	; 0x3a
    185a:	80 e5       	ldi	r24, 0x50	; 80
    185c:	99 e0       	ldi	r25, 0x09	; 9
    185e:	95 af       	std	Z+61, r25	; 0x3d
    1860:	84 af       	std	Z+60, r24	; 0x3c
    1862:	8d e7       	ldi	r24, 0x7D	; 125
    1864:	99 e0       	ldi	r25, 0x09	; 9
    1866:	97 af       	std	Z+63, r25	; 0x3f
    1868:	86 af       	std	Z+62, r24	; 0x3e
    186a:	df 01       	movw	r26, r30
    186c:	a0 5c       	subi	r26, 0xC0	; 192
    186e:	bf 4f       	sbci	r27, 0xFF	; 255
    1870:	82 ef       	ldi	r24, 0xF2	; 242
    1872:	9a e0       	ldi	r25, 0x0A	; 10
    1874:	11 96       	adiw	r26, 0x01	; 1
    1876:	9c 93       	st	X, r25
    1878:	8e 93       	st	-X, r24
    187a:	12 96       	adiw	r26, 0x02	; 2
    187c:	8d ef       	ldi	r24, 0xFD	; 253
    187e:	9a e0       	ldi	r25, 0x0A	; 10
    1880:	11 96       	adiw	r26, 0x01	; 1
    1882:	9c 93       	st	X, r25
    1884:	8e 93       	st	-X, r24
    1886:	12 96       	adiw	r26, 0x02	; 2
    1888:	8e e1       	ldi	r24, 0x1E	; 30
    188a:	9b e0       	ldi	r25, 0x0B	; 11
    188c:	11 96       	adiw	r26, 0x01	; 1
    188e:	9c 93       	st	X, r25
    1890:	8e 93       	st	-X, r24
    1892:	12 96       	adiw	r26, 0x02	; 2
    1894:	8e e6       	ldi	r24, 0x6E	; 110
    1896:	9b e0       	ldi	r25, 0x0B	; 11
    1898:	11 96       	adiw	r26, 0x01	; 1
    189a:	9c 93       	st	X, r25
    189c:	8e 93       	st	-X, r24
    189e:	12 96       	adiw	r26, 0x02	; 2
    18a0:	86 e7       	ldi	r24, 0x76	; 118
    18a2:	9b e0       	ldi	r25, 0x0B	; 11
    18a4:	8d 93       	st	X+, r24
    18a6:	9c 93       	st	X, r25
}
    18a8:	cf 01       	movw	r24, r30
    18aa:	08 95       	ret

000018ac <I2C_Start>:
	/***Vtable***/
}
/***void I2C_Start(void)***/
void I2C_Start(void)
{
  TWI_CONTROL_REGISTER = ((1<<TWINT) | (1<<TWSTA) | (1<<TWEN));
    18ac:	e4 e7       	ldi	r30, 0x74	; 116
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	84 ea       	ldi	r24, 0xA4	; 164
    18b2:	80 83       	st	Z, r24
  for (ticks=Nticks; !(TWI_CONTROL_REGISTER & (1<<TWINT)) && ticks; ticks--);
    18b4:	8f ef       	ldi	r24, 0xFF	; 255
    18b6:	93 e0       	ldi	r25, 0x03	; 3
    18b8:	90 93 15 03 	sts	0x0315, r25	; 0x800315 <ticks+0x1>
    18bc:	80 93 14 03 	sts	0x0314, r24	; 0x800314 <ticks>
    18c0:	80 81       	ld	r24, Z
    18c2:	88 23       	and	r24, r24
    18c4:	5c f0       	brlt	.+22     	; 0x18dc <I2C_Start+0x30>
    18c6:	8e ef       	ldi	r24, 0xFE	; 254
    18c8:	93 e0       	ldi	r25, 0x03	; 3
    18ca:	90 93 15 03 	sts	0x0315, r25	; 0x800315 <ticks+0x1>
    18ce:	80 93 14 03 	sts	0x0314, r24	; 0x800314 <ticks>
    18d2:	20 81       	ld	r18, Z
    18d4:	22 23       	and	r18, r18
    18d6:	14 f0       	brlt	.+4      	; 0x18dc <I2C_Start+0x30>
    18d8:	01 97       	sbiw	r24, 0x01	; 1
    18da:	b8 f7       	brcc	.-18     	; 0x18ca <I2C_Start+0x1e>
    18dc:	08 95       	ret

000018de <I2C_Write>:
   _delay_us(100); //wait for a short time
}
/***void I2C_Write(uint8_t var_i2cData_u8)***/
void I2C_Write(uint8_t var_i2cData_u8)
{
  TWI_DATA_REGISTER = var_i2cData_u8 ;
    18de:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
  TWI_CONTROL_REGISTER = ((1<< TWINT) | (1<<TWEN));
    18e2:	e4 e7       	ldi	r30, 0x74	; 116
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	84 e8       	ldi	r24, 0x84	; 132
    18e8:	80 83       	st	Z, r24
  for (ticks=Nticks; !(TWI_CONTROL_REGISTER & (1 <<TWINT)) && ticks; ticks--);
    18ea:	8f ef       	ldi	r24, 0xFF	; 255
    18ec:	93 e0       	ldi	r25, 0x03	; 3
    18ee:	90 93 15 03 	sts	0x0315, r25	; 0x800315 <ticks+0x1>
    18f2:	80 93 14 03 	sts	0x0314, r24	; 0x800314 <ticks>
    18f6:	80 81       	ld	r24, Z
    18f8:	88 23       	and	r24, r24
    18fa:	5c f0       	brlt	.+22     	; 0x1912 <I2C_Write+0x34>
    18fc:	8e ef       	ldi	r24, 0xFE	; 254
    18fe:	93 e0       	ldi	r25, 0x03	; 3
    1900:	90 93 15 03 	sts	0x0315, r25	; 0x800315 <ticks+0x1>
    1904:	80 93 14 03 	sts	0x0314, r24	; 0x800314 <ticks>
    1908:	20 81       	ld	r18, Z
    190a:	22 23       	and	r18, r18
    190c:	14 f0       	brlt	.+4      	; 0x1912 <I2C_Write+0x34>
    190e:	01 97       	sbiw	r24, 0x01	; 1
    1910:	b8 f7       	brcc	.-18     	; 0x1900 <I2C_Write+0x22>
    1912:	08 95       	ret

00001914 <I2C_Read>:
}
/***uint8_t I2C_Read(uint8_t var_ackOption_u8)***/
uint8_t I2C_Read(uint8_t var_ackOption_u8)
{
 TWI_CONTROL_REGISTER = ((1<< TWINT) | (1<<TWEN) | (var_ackOption_u8<<TWEA));
    1914:	20 e4       	ldi	r18, 0x40	; 64
    1916:	82 9f       	mul	r24, r18
    1918:	c0 01       	movw	r24, r0
    191a:	11 24       	eor	r1, r1
    191c:	84 68       	ori	r24, 0x84	; 132
    191e:	e4 e7       	ldi	r30, 0x74	; 116
    1920:	f0 e0       	ldi	r31, 0x00	; 0
    1922:	80 83       	st	Z, r24
   for (ticks=Nticks; !(TWI_CONTROL_REGISTER & (1 <<TWINT)) && ticks; ticks--);
    1924:	8f ef       	ldi	r24, 0xFF	; 255
    1926:	93 e0       	ldi	r25, 0x03	; 3
    1928:	90 93 15 03 	sts	0x0315, r25	; 0x800315 <ticks+0x1>
    192c:	80 93 14 03 	sts	0x0314, r24	; 0x800314 <ticks>
    1930:	80 81       	ld	r24, Z
    1932:	88 23       	and	r24, r24
    1934:	5c f0       	brlt	.+22     	; 0x194c <I2C_Read+0x38>
    1936:	8e ef       	ldi	r24, 0xFE	; 254
    1938:	93 e0       	ldi	r25, 0x03	; 3
    193a:	90 93 15 03 	sts	0x0315, r25	; 0x800315 <ticks+0x1>
    193e:	80 93 14 03 	sts	0x0314, r24	; 0x800314 <ticks>
    1942:	20 81       	ld	r18, Z
    1944:	22 23       	and	r18, r18
    1946:	14 f0       	brlt	.+4      	; 0x194c <I2C_Read+0x38>
    1948:	01 97       	sbiw	r24, 0x01	; 1
    194a:	b8 f7       	brcc	.-18     	; 0x193a <I2C_Read+0x26>
   return TWI_DATA_REGISTER;
    194c:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
}
    1950:	08 95       	ret

00001952 <I2C_Status>:
/***uint8_t I2C_status(void)***/
uint8_t I2C_Status(void)
{
	return TWI_STATUS_REGISTER & TWI_STATUS_MASK;
    1952:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
}
    1956:	88 7f       	andi	r24, 0xF8	; 248
    1958:	08 95       	ret

0000195a <I2C_Stop>:
  for (ticks=Nticks; !(TWI_CONTROL_REGISTER & (1<<TWINT)) && ticks; ticks--);
}
/***void I2C_Stop(void)***/
void I2C_Stop(void)
{
  TWI_CONTROL_REGISTER = ((1<< TWINT) | (1<<TWEN) | (1<<TWSTO));
    195a:	84 e9       	ldi	r24, 0x94	; 148
    195c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1960:	8f e8       	ldi	r24, 0x8F	; 143
    1962:	91 e0       	ldi	r25, 0x01	; 1
    1964:	01 97       	sbiw	r24, 0x01	; 1
    1966:	f1 f7       	brne	.-4      	; 0x1964 <I2C_Stop+0xa>
    1968:	00 c0       	rjmp	.+0      	; 0x196a <I2C_Stop+0x10>
    196a:	00 00       	nop
    196c:	08 95       	ret

0000196e <I2C_Init>:
  return ic;
}
/***void I2C_Init(uint8_t prescaler)***/
void I2C_Init(uint8_t prescaler)
{
	I2C_DDR|=I2C_IO_MASK;
    196e:	91 b3       	in	r25, 0x11	; 17
    1970:	93 60       	ori	r25, 0x03	; 3
    1972:	91 bb       	out	0x11, r25	; 17
	I2C_PORT|=I2C_IO_MASK;
    1974:	92 b3       	in	r25, 0x12	; 18
    1976:	93 60       	ori	r25, 0x03	; 3
    1978:	92 bb       	out	0x12, r25	; 18
	switch(prescaler){
    197a:	84 30       	cpi	r24, 0x04	; 4
    197c:	79 f0       	breq	.+30     	; 0x199c <I2C_Init+0x2e>
    197e:	18 f4       	brcc	.+6      	; 0x1986 <I2C_Init+0x18>
    1980:	81 30       	cpi	r24, 0x01	; 1
    1982:	31 f0       	breq	.+12     	; 0x1990 <I2C_Init+0x22>
    1984:	1d c0       	rjmp	.+58     	; 0x19c0 <I2C_Init+0x52>
    1986:	80 31       	cpi	r24, 0x10	; 16
    1988:	79 f0       	breq	.+30     	; 0x19a8 <I2C_Init+0x3a>
    198a:	80 34       	cpi	r24, 0x40	; 64
    198c:	99 f0       	breq	.+38     	; 0x19b4 <I2C_Init+0x46>
    198e:	18 c0       	rjmp	.+48     	; 0x19c0 <I2C_Init+0x52>
		case 1:
		TWI_STATUS_REGISTER &= ~TWI_PRESCALER_MASK;
    1990:	e1 e7       	ldi	r30, 0x71	; 113
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	90 81       	ld	r25, Z
    1996:	9c 7f       	andi	r25, 0xFC	; 252
    1998:	90 83       	st	Z, r25
		break;
    199a:	18 c0       	rjmp	.+48     	; 0x19cc <I2C_Init+0x5e>
		case 4:
		TWI_STATUS_REGISTER |= (1<<TWPS0);
    199c:	e1 e7       	ldi	r30, 0x71	; 113
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	90 81       	ld	r25, Z
    19a2:	91 60       	ori	r25, 0x01	; 1
    19a4:	90 83       	st	Z, r25
		break;
    19a6:	12 c0       	rjmp	.+36     	; 0x19cc <I2C_Init+0x5e>
		case 16:
		TWI_STATUS_REGISTER |= (2<<TWPS0);
    19a8:	e1 e7       	ldi	r30, 0x71	; 113
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	90 81       	ld	r25, Z
    19ae:	92 60       	ori	r25, 0x02	; 2
    19b0:	90 83       	st	Z, r25
		break;
    19b2:	0c c0       	rjmp	.+24     	; 0x19cc <I2C_Init+0x5e>
		case 64:
		TWI_STATUS_REGISTER |= (3<<TWPS0);
    19b4:	e1 e7       	ldi	r30, 0x71	; 113
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	90 81       	ld	r25, Z
    19ba:	93 60       	ori	r25, 0x03	; 3
    19bc:	90 83       	st	Z, r25
		break;
    19be:	06 c0       	rjmp	.+12     	; 0x19cc <I2C_Init+0x5e>
		default:
		prescaler=1;
		TWI_STATUS_REGISTER &= ~TWI_PRESCALER_MASK;
    19c0:	e1 e7       	ldi	r30, 0x71	; 113
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	80 81       	ld	r24, Z
    19c6:	8c 7f       	andi	r24, 0xFC	; 252
    19c8:	80 83       	st	Z, r24
		break;
		case 64:
		TWI_STATUS_REGISTER |= (3<<TWPS0);
		break;
		default:
		prescaler=1;
    19ca:	81 e0       	ldi	r24, 0x01	; 1
		TWI_STATUS_REGISTER &= ~TWI_PRESCALER_MASK;
		break;
	}
	TWI_BIT_RATE_REGISTER = ((F_CPU/I2C_SCL_CLOCK)-16)/(2*prescaler);
    19cc:	28 2f       	mov	r18, r24
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	22 0f       	add	r18, r18
    19d2:	33 1f       	adc	r19, r19
    19d4:	03 2e       	mov	r0, r19
    19d6:	00 0c       	add	r0, r0
    19d8:	44 0b       	sbc	r20, r20
    19da:	55 0b       	sbc	r21, r21
    19dc:	60 e9       	ldi	r22, 0x90	; 144
    19de:	70 e0       	ldi	r23, 0x00	; 0
    19e0:	80 e0       	ldi	r24, 0x00	; 0
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <__udivmodsi4>
    19e8:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
    19ec:	08 95       	ret

000019ee <I2Cenable>:
void I2C_Write(uint8_t var_i2cData_u8);
uint8_t I2C_Read(uint8_t var_ackOption_u8);
uint8_t I2C_Status(void);
/***I2C I2Cenable(uint8_t prescaler)***/
I2C I2Cenable(uint8_t prescaler)
{
    19ee:	1f 93       	push	r17
    19f0:	cf 93       	push	r28
    19f2:	df 93       	push	r29
    19f4:	ec 01       	movw	r28, r24
    19f6:	86 2f       	mov	r24, r22
  uint8_t tSREG;
  tSREG=SREG;
    19f8:	1f b7       	in	r17, 0x3f	; 63
  SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
    19fa:	9f b7       	in	r25, 0x3f	; 63
    19fc:	9f 77       	andi	r25, 0x7F	; 127
    19fe:	9f bf       	out	0x3f, r25	; 63
  I2C ic;
  I2C_Init(prescaler);
    1a00:	b6 df       	rcall	.-148    	; 0x196e <I2C_Init>
  ic.Stop=I2C_Stop;
  ic.Write=I2C_Write;
  ic.Read=I2C_Read;
  ic.Status=I2C_Status;
  /******/
  SREG=tSREG;
    1a02:	1f bf       	out	0x3f, r17	; 63
  return ic;
    1a04:	86 e5       	ldi	r24, 0x56	; 86
    1a06:	9c e0       	ldi	r25, 0x0C	; 12
    1a08:	99 83       	std	Y+1, r25	; 0x01
    1a0a:	88 83       	st	Y, r24
    1a0c:	8d ea       	ldi	r24, 0xAD	; 173
    1a0e:	9c e0       	ldi	r25, 0x0C	; 12
    1a10:	9b 83       	std	Y+3, r25	; 0x03
    1a12:	8a 83       	std	Y+2, r24	; 0x02
    1a14:	8f e6       	ldi	r24, 0x6F	; 111
    1a16:	9c e0       	ldi	r25, 0x0C	; 12
    1a18:	9d 83       	std	Y+5, r25	; 0x05
    1a1a:	8c 83       	std	Y+4, r24	; 0x04
    1a1c:	8a e8       	ldi	r24, 0x8A	; 138
    1a1e:	9c e0       	ldi	r25, 0x0C	; 12
    1a20:	9f 83       	std	Y+7, r25	; 0x07
    1a22:	8e 83       	std	Y+6, r24	; 0x06
    1a24:	89 ea       	ldi	r24, 0xA9	; 169
    1a26:	9c e0       	ldi	r25, 0x0C	; 12
    1a28:	99 87       	std	Y+9, r25	; 0x09
    1a2a:	88 87       	std	Y+8, r24	; 0x08
}
    1a2c:	ce 01       	movw	r24, r28
    1a2e:	df 91       	pop	r29
    1a30:	cf 91       	pop	r28
    1a32:	1f 91       	pop	r17
    1a34:	08 95       	ret

00001a36 <KEYPAD_get>:
	}
	return data;
}
/***read***/
struct keypadata KEYPAD_get(void)
{
    1a36:	cf 93       	push	r28
    1a38:	df 93       	push	r29
    1a3a:	00 d0       	rcall	.+0      	; 0x1a3c <KEYPAD_get+0x6>
    1a3c:	00 d0       	rcall	.+0      	; 0x1a3e <KEYPAD_get+0x8>
    1a3e:	1f 92       	push	r1
    1a40:	cd b7       	in	r28, 0x3d	; 61
    1a42:	de b7       	in	r29, 0x3e	; 62
	return data;
    1a44:	85 e0       	ldi	r24, 0x05	; 5
    1a46:	e4 e5       	ldi	r30, 0x54	; 84
    1a48:	f3 e0       	ldi	r31, 0x03	; 3
    1a4a:	de 01       	movw	r26, r28
    1a4c:	11 96       	adiw	r26, 0x01	; 1
    1a4e:	01 90       	ld	r0, Z+
    1a50:	0d 92       	st	X+, r0
    1a52:	8a 95       	dec	r24
    1a54:	e1 f7       	brne	.-8      	; 0x1a4e <KEYPAD_get+0x18>
    1a56:	29 81       	ldd	r18, Y+1	; 0x01
    1a58:	3a 81       	ldd	r19, Y+2	; 0x02
    1a5a:	4b 81       	ldd	r20, Y+3	; 0x03
    1a5c:	5c 81       	ldd	r21, Y+4	; 0x04
    1a5e:	6d 81       	ldd	r22, Y+5	; 0x05
}
    1a60:	70 e0       	ldi	r23, 0x00	; 0
    1a62:	80 e0       	ldi	r24, 0x00	; 0
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	0f 90       	pop	r0
    1a68:	0f 90       	pop	r0
    1a6a:	0f 90       	pop	r0
    1a6c:	0f 90       	pop	r0
    1a6e:	0f 90       	pop	r0
    1a70:	df 91       	pop	r29
    1a72:	cf 91       	pop	r28
    1a74:	08 95       	ret

00001a76 <KEYPAD_flush>:
/***flush***/
void KEYPAD_flush(void)
{
	KEYPADSTRINGINDEX=0;
    1a76:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <KEYPADSTRINGINDEX>
	data.character=' ';
    1a7a:	e4 e5       	ldi	r30, 0x54	; 84
    1a7c:	f3 e0       	ldi	r31, 0x03	; 3
    1a7e:	80 e2       	ldi	r24, 0x20	; 32
    1a80:	80 83       	st	Z, r24
	data.printstring="\0";
    1a82:	82 e1       	ldi	r24, 0x12	; 18
    1a84:	91 e0       	ldi	r25, 0x01	; 1
    1a86:	92 83       	std	Z+2, r25	; 0x02
    1a88:	81 83       	std	Z+1, r24	; 0x01
	data.string="\0";
    1a8a:	94 83       	std	Z+4, r25	; 0x04
    1a8c:	83 83       	std	Z+3, r24	; 0x03
    1a8e:	08 95       	ret

00001a90 <KEYPAD_getkey>:
	*keypad_PORT|=(1<<KEYPADLINE_1) | (1<<KEYPADLINE_2) | (1<<KEYPADLINE_3) | (1<<KEYPADLINE_4);
	//Going to use pull down method.
	return keypad;
}
char KEYPAD_getkey(void)
{
    1a90:	cf 93       	push	r28
    1a92:	df 93       	push	r29
    1a94:	21 e0       	ldi	r18, 0x01	; 1
	uint8_t HL;
	char c='\0';
    1a96:	80 e0       	ldi	r24, 0x00	; 0
				*keypad_PORT|=(1<<KEYPADLINE_1);
				break;
			case 1: //line 2 index 1
				*keypad_DDR|=(1<<KEYPADLINE_2);
				*keypad_PORT&=~(1<<KEYPADLINE_2);
				keypad_dataf.line_2=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
    1a98:	a9 e1       	ldi	r26, 0x19	; 25
    1a9a:	b3 e0       	ldi	r27, 0x03	; 3
				HL=KEYPADhl(keypad_datai.line_2,keypad_dataf.line_2);
    1a9c:	ed e1       	ldi	r30, 0x1D	; 29
    1a9e:	f3 e0       	ldi	r31, 0x03	; 3
					if(HL == (1<<KEYPADDATA_2))
						c=keypadvalue[1][1];
					if(HL == (1<<KEYPADDATA_3))
						c=keypadvalue[1][2];
					if(HL == (1<<KEYPADDATA_4))
						c=keypadvalue[1][3];
    1aa0:	60 e0       	ldi	r22, 0x00	; 0
    1aa2:	71 e0       	ldi	r23, 0x01	; 1
    1aa4:	01 c0       	rjmp	.+2      	; 0x1aa8 <KEYPAD_getkey+0x18>
    1aa6:	2f 5f       	subi	r18, 0xFF	; 255
{
	uint8_t HL;
	char c='\0';
	uint8_t keypad_option;
	for(keypad_option=0;keypad_option<KEYPADLINES;keypad_option++){
		switch (keypad_option)
    1aa8:	9f ef       	ldi	r25, 0xFF	; 255
    1aaa:	92 0f       	add	r25, r18
    1aac:	91 30       	cpi	r25, 0x01	; 1
    1aae:	09 f4       	brne	.+2      	; 0x1ab2 <KEYPAD_getkey+0x22>
    1ab0:	4b c0       	rjmp	.+150    	; 0x1b48 <KEYPAD_getkey+0xb8>
    1ab2:	38 f0       	brcs	.+14     	; 0x1ac2 <KEYPAD_getkey+0x32>
    1ab4:	92 30       	cpi	r25, 0x02	; 2
    1ab6:	09 f4       	brne	.+2      	; 0x1aba <KEYPAD_getkey+0x2a>
    1ab8:	8c c0       	rjmp	.+280    	; 0x1bd2 <KEYPAD_getkey+0x142>
    1aba:	93 30       	cpi	r25, 0x03	; 3
    1abc:	09 f4       	brne	.+2      	; 0x1ac0 <KEYPAD_getkey+0x30>
    1abe:	ce c0       	rjmp	.+412    	; 0x1c5c <KEYPAD_getkey+0x1cc>
    1ac0:	0e c1       	rjmp	.+540    	; 0x1cde <KEYPAD_getkey+0x24e>
		{
			case 0: //line 1 index 0
				*keypad_DDR|=(1<<KEYPADLINE_1);
    1ac2:	40 91 24 03 	lds	r20, 0x0324	; 0x800324 <keypad_DDR>
    1ac6:	50 91 25 03 	lds	r21, 0x0325	; 0x800325 <keypad_DDR+0x1>
    1aca:	ea 01       	movw	r28, r20
    1acc:	98 81       	ld	r25, Y
    1ace:	90 68       	ori	r25, 0x80	; 128
    1ad0:	98 83       	st	Y, r25
				*keypad_PORT&=~(1<<KEYPADLINE_1);
    1ad2:	40 91 16 03 	lds	r20, 0x0316	; 0x800316 <keypad_PORT>
    1ad6:	50 91 17 03 	lds	r21, 0x0317	; 0x800317 <keypad_PORT+0x1>
    1ada:	ea 01       	movw	r28, r20
    1adc:	98 81       	ld	r25, Y
    1ade:	9f 77       	andi	r25, 0x7F	; 127
    1ae0:	98 83       	st	Y, r25
				keypad_dataf.line_1=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
    1ae2:	40 91 22 03 	lds	r20, 0x0322	; 0x800322 <keypad_PIN>
    1ae6:	50 91 23 03 	lds	r21, 0x0323	; 0x800323 <keypad_PIN+0x1>
    1aea:	ea 01       	movw	r28, r20
    1aec:	38 81       	ld	r19, Y
    1aee:	34 77       	andi	r19, 0x74	; 116
    1af0:	3c 93       	st	X, r19
				HL=KEYPADhl(keypad_datai.line_1,keypad_dataf.line_1);
    1af2:	90 81       	ld	r25, Z
uint8_t KEYPADhl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	//printf("KEYPADhl\n");
	i=xf^xi;
	i&=xi;
    1af4:	43 2f       	mov	r20, r19
    1af6:	49 27       	eor	r20, r25
    1af8:	94 23       	and	r25, r20
			case 0: //line 1 index 0
				*keypad_DDR|=(1<<KEYPADLINE_1);
				*keypad_PORT&=~(1<<KEYPADLINE_1);
				keypad_dataf.line_1=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
				HL=KEYPADhl(keypad_datai.line_1,keypad_dataf.line_1);
				keypad_datai.line_1=keypad_dataf.line_1;
    1afa:	30 83       	st	Z, r19
				if(HL){
    1afc:	99 23       	and	r25, r25
    1afe:	99 f0       	breq	.+38     	; 0x1b26 <KEYPAD_getkey+0x96>
					//decode index line one column what ?
					if(HL == (1<<KEYPADDATA_1))
    1b00:	94 30       	cpi	r25, 0x04	; 4
    1b02:	19 f4       	brne	.+6      	; 0x1b0a <KEYPAD_getkey+0x7a>
						c=keypadvalue[0][0];
    1b04:	eb 01       	movw	r28, r22
    1b06:	88 81       	ld	r24, Y
    1b08:	0a c0       	rjmp	.+20     	; 0x1b1e <KEYPAD_getkey+0x8e>
					if(HL == (1<<KEYPADDATA_2))
    1b0a:	90 31       	cpi	r25, 0x10	; 16
    1b0c:	19 f4       	brne	.+6      	; 0x1b14 <KEYPAD_getkey+0x84>
						c=keypadvalue[0][1];
    1b0e:	eb 01       	movw	r28, r22
    1b10:	89 81       	ldd	r24, Y+1	; 0x01
    1b12:	09 c0       	rjmp	.+18     	; 0x1b26 <KEYPAD_getkey+0x96>
					if(HL == (1<<KEYPADDATA_3))
    1b14:	90 32       	cpi	r25, 0x20	; 32
    1b16:	19 f4       	brne	.+6      	; 0x1b1e <KEYPAD_getkey+0x8e>
						c=keypadvalue[0][2];
    1b18:	eb 01       	movw	r28, r22
    1b1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1c:	04 c0       	rjmp	.+8      	; 0x1b26 <KEYPAD_getkey+0x96>
					if(HL == (1<<KEYPADDATA_4))
    1b1e:	90 34       	cpi	r25, 0x40	; 64
    1b20:	11 f4       	brne	.+4      	; 0x1b26 <KEYPAD_getkey+0x96>
						c=keypadvalue[0][3];
    1b22:	eb 01       	movw	r28, r22
    1b24:	8b 81       	ldd	r24, Y+3	; 0x03
				}
				*keypad_DDR&=~(1<<KEYPADLINE_1);
    1b26:	40 91 24 03 	lds	r20, 0x0324	; 0x800324 <keypad_DDR>
    1b2a:	50 91 25 03 	lds	r21, 0x0325	; 0x800325 <keypad_DDR+0x1>
    1b2e:	ea 01       	movw	r28, r20
    1b30:	98 81       	ld	r25, Y
    1b32:	9f 77       	andi	r25, 0x7F	; 127
    1b34:	98 83       	st	Y, r25
				*keypad_PORT|=(1<<KEYPADLINE_1);
    1b36:	40 91 16 03 	lds	r20, 0x0316	; 0x800316 <keypad_PORT>
    1b3a:	50 91 17 03 	lds	r21, 0x0317	; 0x800317 <keypad_PORT+0x1>
    1b3e:	ea 01       	movw	r28, r20
    1b40:	98 81       	ld	r25, Y
    1b42:	90 68       	ori	r25, 0x80	; 128
    1b44:	98 83       	st	Y, r25
				break;
    1b46:	af cf       	rjmp	.-162    	; 0x1aa6 <KEYPAD_getkey+0x16>
			case 1: //line 2 index 1
				*keypad_DDR|=(1<<KEYPADLINE_2);
    1b48:	40 91 24 03 	lds	r20, 0x0324	; 0x800324 <keypad_DDR>
    1b4c:	50 91 25 03 	lds	r21, 0x0325	; 0x800325 <keypad_DDR+0x1>
    1b50:	ea 01       	movw	r28, r20
    1b52:	98 81       	ld	r25, Y
    1b54:	91 60       	ori	r25, 0x01	; 1
    1b56:	98 83       	st	Y, r25
				*keypad_PORT&=~(1<<KEYPADLINE_2);
    1b58:	40 91 16 03 	lds	r20, 0x0316	; 0x800316 <keypad_PORT>
    1b5c:	50 91 17 03 	lds	r21, 0x0317	; 0x800317 <keypad_PORT+0x1>
    1b60:	ea 01       	movw	r28, r20
    1b62:	98 81       	ld	r25, Y
    1b64:	9e 7f       	andi	r25, 0xFE	; 254
    1b66:	98 83       	st	Y, r25
				keypad_dataf.line_2=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
    1b68:	40 91 22 03 	lds	r20, 0x0322	; 0x800322 <keypad_PIN>
    1b6c:	50 91 23 03 	lds	r21, 0x0323	; 0x800323 <keypad_PIN+0x1>
    1b70:	ea 01       	movw	r28, r20
    1b72:	38 81       	ld	r19, Y
    1b74:	34 77       	andi	r19, 0x74	; 116
    1b76:	11 96       	adiw	r26, 0x01	; 1
    1b78:	3c 93       	st	X, r19
    1b7a:	11 97       	sbiw	r26, 0x01	; 1
				HL=KEYPADhl(keypad_datai.line_2,keypad_dataf.line_2);
    1b7c:	91 81       	ldd	r25, Z+1	; 0x01
uint8_t KEYPADhl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	//printf("KEYPADhl\n");
	i=xf^xi;
	i&=xi;
    1b7e:	43 2f       	mov	r20, r19
    1b80:	49 27       	eor	r20, r25
    1b82:	94 23       	and	r25, r20
			case 1: //line 2 index 1
				*keypad_DDR|=(1<<KEYPADLINE_2);
				*keypad_PORT&=~(1<<KEYPADLINE_2);
				keypad_dataf.line_2=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
				HL=KEYPADhl(keypad_datai.line_2,keypad_dataf.line_2);
				keypad_datai.line_2=keypad_dataf.line_2;
    1b84:	31 83       	std	Z+1, r19	; 0x01
				if(HL){
    1b86:	99 23       	and	r25, r25
    1b88:	99 f0       	breq	.+38     	; 0x1bb0 <KEYPAD_getkey+0x120>
					//decode index line two column what ?
					if(HL == (1<<KEYPADDATA_1))
    1b8a:	94 30       	cpi	r25, 0x04	; 4
    1b8c:	19 f4       	brne	.+6      	; 0x1b94 <KEYPAD_getkey+0x104>
						c=keypadvalue[1][0];
    1b8e:	eb 01       	movw	r28, r22
    1b90:	8c 81       	ldd	r24, Y+4	; 0x04
    1b92:	0a c0       	rjmp	.+20     	; 0x1ba8 <KEYPAD_getkey+0x118>
					if(HL == (1<<KEYPADDATA_2))
    1b94:	90 31       	cpi	r25, 0x10	; 16
    1b96:	19 f4       	brne	.+6      	; 0x1b9e <KEYPAD_getkey+0x10e>
						c=keypadvalue[1][1];
    1b98:	eb 01       	movw	r28, r22
    1b9a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b9c:	09 c0       	rjmp	.+18     	; 0x1bb0 <KEYPAD_getkey+0x120>
					if(HL == (1<<KEYPADDATA_3))
    1b9e:	90 32       	cpi	r25, 0x20	; 32
    1ba0:	19 f4       	brne	.+6      	; 0x1ba8 <KEYPAD_getkey+0x118>
						c=keypadvalue[1][2];
    1ba2:	eb 01       	movw	r28, r22
    1ba4:	8e 81       	ldd	r24, Y+6	; 0x06
    1ba6:	04 c0       	rjmp	.+8      	; 0x1bb0 <KEYPAD_getkey+0x120>
					if(HL == (1<<KEYPADDATA_4))
    1ba8:	90 34       	cpi	r25, 0x40	; 64
    1baa:	11 f4       	brne	.+4      	; 0x1bb0 <KEYPAD_getkey+0x120>
						c=keypadvalue[1][3];
    1bac:	eb 01       	movw	r28, r22
    1bae:	8f 81       	ldd	r24, Y+7	; 0x07
				}
				*keypad_DDR&=~(1<<KEYPADLINE_2);
    1bb0:	40 91 24 03 	lds	r20, 0x0324	; 0x800324 <keypad_DDR>
    1bb4:	50 91 25 03 	lds	r21, 0x0325	; 0x800325 <keypad_DDR+0x1>
    1bb8:	ea 01       	movw	r28, r20
    1bba:	98 81       	ld	r25, Y
    1bbc:	9e 7f       	andi	r25, 0xFE	; 254
    1bbe:	98 83       	st	Y, r25
				*keypad_PORT|=(1<<KEYPADLINE_2);
    1bc0:	40 91 16 03 	lds	r20, 0x0316	; 0x800316 <keypad_PORT>
    1bc4:	50 91 17 03 	lds	r21, 0x0317	; 0x800317 <keypad_PORT+0x1>
    1bc8:	ea 01       	movw	r28, r20
    1bca:	98 81       	ld	r25, Y
    1bcc:	91 60       	ori	r25, 0x01	; 1
    1bce:	98 83       	st	Y, r25
				break;
    1bd0:	6a cf       	rjmp	.-300    	; 0x1aa6 <KEYPAD_getkey+0x16>
			case 2: //line 3 index 2
				*keypad_DDR|=(1<<KEYPADLINE_3);
    1bd2:	40 91 24 03 	lds	r20, 0x0324	; 0x800324 <keypad_DDR>
    1bd6:	50 91 25 03 	lds	r21, 0x0325	; 0x800325 <keypad_DDR+0x1>
    1bda:	ea 01       	movw	r28, r20
    1bdc:	98 81       	ld	r25, Y
    1bde:	92 60       	ori	r25, 0x02	; 2
    1be0:	98 83       	st	Y, r25
				*keypad_PORT&=~(1<<KEYPADLINE_3);
    1be2:	40 91 16 03 	lds	r20, 0x0316	; 0x800316 <keypad_PORT>
    1be6:	50 91 17 03 	lds	r21, 0x0317	; 0x800317 <keypad_PORT+0x1>
    1bea:	ea 01       	movw	r28, r20
    1bec:	98 81       	ld	r25, Y
    1bee:	9d 7f       	andi	r25, 0xFD	; 253
    1bf0:	98 83       	st	Y, r25
				keypad_dataf.line_3=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
    1bf2:	40 91 22 03 	lds	r20, 0x0322	; 0x800322 <keypad_PIN>
    1bf6:	50 91 23 03 	lds	r21, 0x0323	; 0x800323 <keypad_PIN+0x1>
    1bfa:	ea 01       	movw	r28, r20
    1bfc:	38 81       	ld	r19, Y
    1bfe:	34 77       	andi	r19, 0x74	; 116
    1c00:	12 96       	adiw	r26, 0x02	; 2
    1c02:	3c 93       	st	X, r19
    1c04:	12 97       	sbiw	r26, 0x02	; 2
				HL=KEYPADhl(keypad_datai.line_3,keypad_dataf.line_3);
    1c06:	92 81       	ldd	r25, Z+2	; 0x02
uint8_t KEYPADhl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	//printf("KEYPADhl\n");
	i=xf^xi;
	i&=xi;
    1c08:	43 2f       	mov	r20, r19
    1c0a:	49 27       	eor	r20, r25
    1c0c:	94 23       	and	r25, r20
			case 2: //line 3 index 2
				*keypad_DDR|=(1<<KEYPADLINE_3);
				*keypad_PORT&=~(1<<KEYPADLINE_3);
				keypad_dataf.line_3=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
				HL=KEYPADhl(keypad_datai.line_3,keypad_dataf.line_3);
				keypad_datai.line_3=keypad_dataf.line_3;
    1c0e:	32 83       	std	Z+2, r19	; 0x02
				if(HL){
    1c10:	99 23       	and	r25, r25
    1c12:	99 f0       	breq	.+38     	; 0x1c3a <KEYPAD_getkey+0x1aa>
					//decode index line three column what ?
					if(HL == (1<<KEYPADDATA_1))
    1c14:	94 30       	cpi	r25, 0x04	; 4
    1c16:	19 f4       	brne	.+6      	; 0x1c1e <KEYPAD_getkey+0x18e>
						c=keypadvalue[2][0];
    1c18:	eb 01       	movw	r28, r22
    1c1a:	88 85       	ldd	r24, Y+8	; 0x08
    1c1c:	0a c0       	rjmp	.+20     	; 0x1c32 <KEYPAD_getkey+0x1a2>
					if(HL == (1<<KEYPADDATA_2))
    1c1e:	90 31       	cpi	r25, 0x10	; 16
    1c20:	19 f4       	brne	.+6      	; 0x1c28 <KEYPAD_getkey+0x198>
						c=keypadvalue[2][1];
    1c22:	eb 01       	movw	r28, r22
    1c24:	89 85       	ldd	r24, Y+9	; 0x09
    1c26:	09 c0       	rjmp	.+18     	; 0x1c3a <KEYPAD_getkey+0x1aa>
					if(HL == (1<<KEYPADDATA_3))
    1c28:	90 32       	cpi	r25, 0x20	; 32
    1c2a:	19 f4       	brne	.+6      	; 0x1c32 <KEYPAD_getkey+0x1a2>
						c=keypadvalue[2][2];
    1c2c:	eb 01       	movw	r28, r22
    1c2e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c30:	04 c0       	rjmp	.+8      	; 0x1c3a <KEYPAD_getkey+0x1aa>
					if(HL == (1<<KEYPADDATA_4))
    1c32:	90 34       	cpi	r25, 0x40	; 64
    1c34:	11 f4       	brne	.+4      	; 0x1c3a <KEYPAD_getkey+0x1aa>
						c=keypadvalue[2][3];
    1c36:	eb 01       	movw	r28, r22
    1c38:	8b 85       	ldd	r24, Y+11	; 0x0b
				}
				*keypad_DDR&=~(1<<KEYPADLINE_3);
    1c3a:	40 91 24 03 	lds	r20, 0x0324	; 0x800324 <keypad_DDR>
    1c3e:	50 91 25 03 	lds	r21, 0x0325	; 0x800325 <keypad_DDR+0x1>
    1c42:	ea 01       	movw	r28, r20
    1c44:	98 81       	ld	r25, Y
    1c46:	9d 7f       	andi	r25, 0xFD	; 253
    1c48:	98 83       	st	Y, r25
				*keypad_PORT|=(1<<KEYPADLINE_3);
    1c4a:	40 91 16 03 	lds	r20, 0x0316	; 0x800316 <keypad_PORT>
    1c4e:	50 91 17 03 	lds	r21, 0x0317	; 0x800317 <keypad_PORT+0x1>
    1c52:	ea 01       	movw	r28, r20
    1c54:	98 81       	ld	r25, Y
    1c56:	92 60       	ori	r25, 0x02	; 2
    1c58:	98 83       	st	Y, r25
				break;
    1c5a:	25 cf       	rjmp	.-438    	; 0x1aa6 <KEYPAD_getkey+0x16>
			case 3: //line 4 index 3
				*keypad_DDR|=(1<<KEYPADLINE_4);
    1c5c:	e0 91 24 03 	lds	r30, 0x0324	; 0x800324 <keypad_DDR>
    1c60:	f0 91 25 03 	lds	r31, 0x0325	; 0x800325 <keypad_DDR+0x1>
    1c64:	90 81       	ld	r25, Z
    1c66:	98 60       	ori	r25, 0x08	; 8
    1c68:	90 83       	st	Z, r25
				*keypad_PORT&=~(1<<KEYPADLINE_4);
    1c6a:	e0 91 16 03 	lds	r30, 0x0316	; 0x800316 <keypad_PORT>
    1c6e:	f0 91 17 03 	lds	r31, 0x0317	; 0x800317 <keypad_PORT+0x1>
    1c72:	90 81       	ld	r25, Z
    1c74:	97 7f       	andi	r25, 0xF7	; 247
    1c76:	90 83       	st	Z, r25
				keypad_dataf.line_4=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
    1c78:	e0 91 22 03 	lds	r30, 0x0322	; 0x800322 <keypad_PIN>
    1c7c:	f0 91 23 03 	lds	r31, 0x0323	; 0x800323 <keypad_PIN+0x1>
    1c80:	20 81       	ld	r18, Z
    1c82:	24 77       	andi	r18, 0x74	; 116
    1c84:	20 93 1c 03 	sts	0x031C, r18	; 0x80031c <keypad_dataf+0x3>
				HL=KEYPADhl(keypad_datai.line_4,keypad_dataf.line_4);
    1c88:	ed e1       	ldi	r30, 0x1D	; 29
    1c8a:	f3 e0       	ldi	r31, 0x03	; 3
    1c8c:	93 81       	ldd	r25, Z+3	; 0x03
uint8_t KEYPADhl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	//printf("KEYPADhl\n");
	i=xf^xi;
	i&=xi;
    1c8e:	32 2f       	mov	r19, r18
    1c90:	39 27       	eor	r19, r25
    1c92:	93 23       	and	r25, r19
			case 3: //line 4 index 3
				*keypad_DDR|=(1<<KEYPADLINE_4);
				*keypad_PORT&=~(1<<KEYPADLINE_4);
				keypad_dataf.line_4=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
				HL=KEYPADhl(keypad_datai.line_4,keypad_dataf.line_4);
				keypad_datai.line_4=keypad_dataf.line_4;
    1c94:	23 83       	std	Z+3, r18	; 0x03
				if(HL){
    1c96:	99 23       	and	r25, r25
    1c98:	99 f0       	breq	.+38     	; 0x1cc0 <KEYPAD_getkey+0x230>
					//decode index line four column what ?
					if(HL == (1<<KEYPADDATA_1))
    1c9a:	94 30       	cpi	r25, 0x04	; 4
    1c9c:	19 f4       	brne	.+6      	; 0x1ca4 <KEYPAD_getkey+0x214>
						c=keypadvalue[3][0];
    1c9e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__DATA_REGION_ORIGIN__+0xc>
    1ca2:	0a c0       	rjmp	.+20     	; 0x1cb8 <KEYPAD_getkey+0x228>
					if(HL == (1<<KEYPADDATA_2))
    1ca4:	90 31       	cpi	r25, 0x10	; 16
    1ca6:	19 f4       	brne	.+6      	; 0x1cae <KEYPAD_getkey+0x21e>
						c=keypadvalue[3][1];
    1ca8:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <__DATA_REGION_ORIGIN__+0xd>
    1cac:	09 c0       	rjmp	.+18     	; 0x1cc0 <KEYPAD_getkey+0x230>
					if(HL == (1<<KEYPADDATA_3))
    1cae:	90 32       	cpi	r25, 0x20	; 32
    1cb0:	19 f4       	brne	.+6      	; 0x1cb8 <KEYPAD_getkey+0x228>
						c=keypadvalue[3][2];
    1cb2:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__DATA_REGION_ORIGIN__+0xe>
    1cb6:	04 c0       	rjmp	.+8      	; 0x1cc0 <KEYPAD_getkey+0x230>
					if(HL == (1<<KEYPADDATA_4))
    1cb8:	90 34       	cpi	r25, 0x40	; 64
    1cba:	11 f4       	brne	.+4      	; 0x1cc0 <KEYPAD_getkey+0x230>
						c=keypadvalue[3][3];
    1cbc:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <__DATA_REGION_ORIGIN__+0xf>
				}
				*keypad_DDR&=~(1<<KEYPADLINE_4);
    1cc0:	e0 91 24 03 	lds	r30, 0x0324	; 0x800324 <keypad_DDR>
    1cc4:	f0 91 25 03 	lds	r31, 0x0325	; 0x800325 <keypad_DDR+0x1>
    1cc8:	90 81       	ld	r25, Z
    1cca:	97 7f       	andi	r25, 0xF7	; 247
    1ccc:	90 83       	st	Z, r25
				*keypad_PORT|=(1<<KEYPADLINE_4);
    1cce:	e0 91 16 03 	lds	r30, 0x0316	; 0x800316 <keypad_PORT>
    1cd2:	f0 91 17 03 	lds	r31, 0x0317	; 0x800317 <keypad_PORT+0x1>
    1cd6:	90 81       	ld	r25, Z
    1cd8:	98 60       	ori	r25, 0x08	; 8
    1cda:	90 83       	st	Z, r25
    1cdc:	03 c0       	rjmp	.+6      	; 0x1ce4 <KEYPAD_getkey+0x254>
char KEYPAD_getkey(void)
{
	uint8_t HL;
	char c='\0';
	uint8_t keypad_option;
	for(keypad_option=0;keypad_option<KEYPADLINES;keypad_option++){
    1cde:	24 30       	cpi	r18, 0x04	; 4
    1ce0:	08 f4       	brcc	.+2      	; 0x1ce4 <KEYPAD_getkey+0x254>
    1ce2:	e1 ce       	rjmp	.-574    	; 0x1aa6 <KEYPAD_getkey+0x16>
			default:
				break;
		}//endswitch
	}//endfor
	return c;
}
    1ce4:	df 91       	pop	r29
    1ce6:	cf 91       	pop	r28
    1ce8:	08 95       	ret

00001cea <KEYPAD_read>:
/***read***/
struct keypadata KEYPAD_read(void)
{
    1cea:	cf 93       	push	r28
    1cec:	df 93       	push	r29
    1cee:	00 d0       	rcall	.+0      	; 0x1cf0 <KEYPAD_read+0x6>
    1cf0:	00 d0       	rcall	.+0      	; 0x1cf2 <KEYPAD_read+0x8>
    1cf2:	1f 92       	push	r1
    1cf4:	cd b7       	in	r28, 0x3d	; 61
    1cf6:	de b7       	in	r29, 0x3e	; 62
	char c;
	c=KEYPAD_getkey(); //returns null all the time when no entry
    1cf8:	cb de       	rcall	.-618    	; 0x1a90 <KEYPAD_getkey>
	if(c){
    1cfa:	88 23       	and	r24, r24
    1cfc:	b1 f1       	breq	.+108    	; 0x1d6a <KEYPAD_read+0x80>
		data.character=c;
    1cfe:	80 93 54 03 	sts	0x0354, r24	; 0x800354 <data>
		if(KEYPADSTRINGINDEX<(KEYPADSTRINGSIZE)){
    1d02:	90 91 21 03 	lds	r25, 0x0321	; 0x800321 <KEYPADSTRINGINDEX>
    1d06:	94 31       	cpi	r25, 0x14	; 20
    1d08:	88 f4       	brcc	.+34     	; 0x1d2c <KEYPAD_read+0x42>
			KEYPAD_string[KEYPADSTRINGINDEX]=c;
    1d0a:	e0 91 21 03 	lds	r30, 0x0321	; 0x800321 <KEYPADSTRINGINDEX>
    1d0e:	f0 e0       	ldi	r31, 0x00	; 0
    1d10:	ea 5d       	subi	r30, 0xDA	; 218
    1d12:	fc 4f       	sbci	r31, 0xFC	; 252
    1d14:	80 83       	st	Z, r24
			KEYPADSTRINGINDEX++;
    1d16:	90 91 21 03 	lds	r25, 0x0321	; 0x800321 <KEYPADSTRINGINDEX>
    1d1a:	9f 5f       	subi	r25, 0xFF	; 255
    1d1c:	90 93 21 03 	sts	0x0321, r25	; 0x800321 <KEYPADSTRINGINDEX>
			KEYPAD_string[KEYPADSTRINGINDEX]='\0';
    1d20:	e0 91 21 03 	lds	r30, 0x0321	; 0x800321 <KEYPADSTRINGINDEX>
    1d24:	f0 e0       	ldi	r31, 0x00	; 0
    1d26:	ea 5d       	subi	r30, 0xDA	; 218
    1d28:	fc 4f       	sbci	r31, 0xFC	; 252
    1d2a:	10 82       	st	Z, r1
		}
		if(c==KEYPADENTERKEY){
    1d2c:	84 34       	cpi	r24, 0x44	; 68
    1d2e:	99 f4       	brne	.+38     	; 0x1d56 <KEYPAD_read+0x6c>
			KEYPAD_string[KEYPADSTRINGINDEX-1]='\0';
    1d30:	e0 91 21 03 	lds	r30, 0x0321	; 0x800321 <KEYPADSTRINGINDEX>
    1d34:	f0 e0       	ldi	r31, 0x00	; 0
    1d36:	eb 5d       	subi	r30, 0xDB	; 219
    1d38:	fc 4f       	sbci	r31, 0xFC	; 252
    1d3a:	10 82       	st	Z, r1
			KEYPADSTRINGINDEX=0;
    1d3c:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <KEYPADSTRINGINDEX>
			data.printstring="\0";
    1d40:	e4 e5       	ldi	r30, 0x54	; 84
    1d42:	f3 e0       	ldi	r31, 0x03	; 3
    1d44:	82 e1       	ldi	r24, 0x12	; 18
    1d46:	91 e0       	ldi	r25, 0x01	; 1
    1d48:	92 83       	std	Z+2, r25	; 0x02
    1d4a:	81 83       	std	Z+1, r24	; 0x01
			data.string=KEYPAD_string; // shift output
    1d4c:	86 e2       	ldi	r24, 0x26	; 38
    1d4e:	93 e0       	ldi	r25, 0x03	; 3
    1d50:	94 83       	std	Z+4, r25	; 0x04
    1d52:	83 83       	std	Z+3, r24	; 0x03
    1d54:	0a c0       	rjmp	.+20     	; 0x1d6a <KEYPAD_read+0x80>
		}else{
			data.printstring=KEYPAD_string;
    1d56:	e4 e5       	ldi	r30, 0x54	; 84
    1d58:	f3 e0       	ldi	r31, 0x03	; 3
    1d5a:	86 e2       	ldi	r24, 0x26	; 38
    1d5c:	93 e0       	ldi	r25, 0x03	; 3
    1d5e:	92 83       	std	Z+2, r25	; 0x02
    1d60:	81 83       	std	Z+1, r24	; 0x01
			data.string="\0"; // clear output
    1d62:	82 e1       	ldi	r24, 0x12	; 18
    1d64:	91 e0       	ldi	r25, 0x01	; 1
    1d66:	94 83       	std	Z+4, r25	; 0x04
    1d68:	83 83       	std	Z+3, r24	; 0x03
		}
	}
	return data;
    1d6a:	85 e0       	ldi	r24, 0x05	; 5
    1d6c:	e4 e5       	ldi	r30, 0x54	; 84
    1d6e:	f3 e0       	ldi	r31, 0x03	; 3
    1d70:	de 01       	movw	r26, r28
    1d72:	11 96       	adiw	r26, 0x01	; 1
    1d74:	01 90       	ld	r0, Z+
    1d76:	0d 92       	st	X+, r0
    1d78:	8a 95       	dec	r24
    1d7a:	e1 f7       	brne	.-8      	; 0x1d74 <KEYPAD_read+0x8a>
    1d7c:	29 81       	ldd	r18, Y+1	; 0x01
    1d7e:	3a 81       	ldd	r19, Y+2	; 0x02
    1d80:	4b 81       	ldd	r20, Y+3	; 0x03
    1d82:	5c 81       	ldd	r21, Y+4	; 0x04
    1d84:	6d 81       	ldd	r22, Y+5	; 0x05
}
    1d86:	70 e0       	ldi	r23, 0x00	; 0
    1d88:	80 e0       	ldi	r24, 0x00	; 0
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	0f 90       	pop	r0
    1d8e:	0f 90       	pop	r0
    1d90:	0f 90       	pop	r0
    1d92:	0f 90       	pop	r0
    1d94:	0f 90       	pop	r0
    1d96:	df 91       	pop	r29
    1d98:	cf 91       	pop	r28
    1d9a:	08 95       	ret

00001d9c <KEYPADenable>:
uint8_t KEYPADhl(uint8_t xi, uint8_t xf);
/*
** procedure and function
*/
KEYPAD KEYPADenable(volatile uint8_t *ddr, volatile uint8_t *pin, volatile uint8_t *port)
{
    1d9c:	cf 93       	push	r28
    1d9e:	df 93       	push	r29
    1da0:	cd b7       	in	r28, 0x3d	; 61
    1da2:	de b7       	in	r29, 0x3e	; 62
    1da4:	28 97       	sbiw	r28, 0x08	; 8
    1da6:	0f b6       	in	r0, 0x3f	; 63
    1da8:	f8 94       	cli
    1daa:	de bf       	out	0x3e, r29	; 62
    1dac:	0f be       	out	0x3f, r0	; 63
    1dae:	cd bf       	out	0x3d, r28	; 61
	//LOCAL VARIABLE
	uint8_t tSREG;
	tSREG=SREG;
    1db0:	2f b7       	in	r18, 0x3f	; 63
	data.character=' ';
    1db2:	30 e2       	ldi	r19, 0x20	; 32
    1db4:	30 93 54 03 	sts	0x0354, r19	; 0x800354 <data>
	//ALLOCAÇÂO MEMORIA PARA Estrutura
	KEYPAD keypad;
	//import parametros
	keypad_DDR=ddr;
    1db8:	90 93 25 03 	sts	0x0325, r25	; 0x800325 <keypad_DDR+0x1>
    1dbc:	80 93 24 03 	sts	0x0324, r24	; 0x800324 <keypad_DDR>
	keypad_PIN=pin;
    1dc0:	70 93 23 03 	sts	0x0323, r23	; 0x800323 <keypad_PIN+0x1>
    1dc4:	60 93 22 03 	sts	0x0322, r22	; 0x800322 <keypad_PIN>
	keypad_PORT=port;
    1dc8:	50 93 17 03 	sts	0x0317, r21	; 0x800317 <keypad_PORT+0x1>
    1dcc:	40 93 16 03 	sts	0x0316, r20	; 0x800316 <keypad_PORT>
	//inic variables
	*keypad_DDR=(1<<KEYPADLINE_1) | (1<<KEYPADLINE_2) | (1<<KEYPADLINE_3) | (1<<KEYPADLINE_4);
    1dd0:	3b e8       	ldi	r19, 0x8B	; 139
    1dd2:	fc 01       	movw	r30, r24
    1dd4:	30 83       	st	Z, r19
	*keypad_PORT=(1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4);
    1dd6:	e0 91 16 03 	lds	r30, 0x0316	; 0x800316 <keypad_PORT>
    1dda:	f0 91 17 03 	lds	r31, 0x0317	; 0x800317 <keypad_PORT+0x1>
    1dde:	84 e7       	ldi	r24, 0x74	; 116
    1de0:	80 83       	st	Z, r24
	keypad_datai.line_1=keypad_dataf.line_1=(1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4);
    1de2:	a9 e1       	ldi	r26, 0x19	; 25
    1de4:	b3 e0       	ldi	r27, 0x03	; 3
    1de6:	8c 93       	st	X, r24
    1de8:	ed e1       	ldi	r30, 0x1D	; 29
    1dea:	f3 e0       	ldi	r31, 0x03	; 3
    1dec:	80 83       	st	Z, r24
	keypad_datai.line_2=keypad_dataf.line_2=(1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4);
    1dee:	11 96       	adiw	r26, 0x01	; 1
    1df0:	8c 93       	st	X, r24
    1df2:	11 97       	sbiw	r26, 0x01	; 1
    1df4:	81 83       	std	Z+1, r24	; 0x01
	keypad_datai.line_3=keypad_dataf.line_3=(1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4);
    1df6:	12 96       	adiw	r26, 0x02	; 2
    1df8:	8c 93       	st	X, r24
    1dfa:	12 97       	sbiw	r26, 0x02	; 2
    1dfc:	82 83       	std	Z+2, r24	; 0x02
	keypad_datai.line_4=keypad_dataf.line_4=(1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4);
    1dfe:	13 96       	adiw	r26, 0x03	; 3
    1e00:	8c 93       	st	X, r24
    1e02:	83 83       	std	Z+3, r24	; 0x03
	KEYPADSTRINGINDEX=0;
    1e04:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <KEYPADSTRINGINDEX>
	//Vtable
	keypad.getkey=KEYPAD_getkey;
	keypad.read=KEYPAD_read;
	keypad.get=KEYPAD_get;
	keypad.flush=KEYPAD_flush;
	SREG=tSREG;
    1e08:	2f bf       	out	0x3f, r18	; 63
	//
	*keypad_PORT|=(1<<KEYPADLINE_1) | (1<<KEYPADLINE_2) | (1<<KEYPADLINE_3) | (1<<KEYPADLINE_4);
    1e0a:	e0 91 16 03 	lds	r30, 0x0316	; 0x800316 <keypad_PORT>
    1e0e:	f0 91 17 03 	lds	r31, 0x0317	; 0x800317 <keypad_PORT+0x1>
    1e12:	80 81       	ld	r24, Z
    1e14:	8b 68       	ori	r24, 0x8B	; 139
    1e16:	80 83       	st	Z, r24
	//Going to use pull down method.
	return keypad;
    1e18:	28 e4       	ldi	r18, 0x48	; 72
    1e1a:	3d e0       	ldi	r19, 0x0D	; 13
    1e1c:	3a 83       	std	Y+2, r19	; 0x02
    1e1e:	29 83       	std	Y+1, r18	; 0x01
    1e20:	45 e7       	ldi	r20, 0x75	; 117
    1e22:	5e e0       	ldi	r21, 0x0E	; 14
    1e24:	5c 83       	std	Y+4, r21	; 0x04
    1e26:	4b 83       	std	Y+3, r20	; 0x03
    1e28:	6b e1       	ldi	r22, 0x1B	; 27
    1e2a:	7d e0       	ldi	r23, 0x0D	; 13
    1e2c:	7e 83       	std	Y+6, r23	; 0x06
    1e2e:	6d 83       	std	Y+5, r22	; 0x05
    1e30:	8b e3       	ldi	r24, 0x3B	; 59
    1e32:	9d e0       	ldi	r25, 0x0D	; 13
    1e34:	98 87       	std	Y+8, r25	; 0x08
    1e36:	8f 83       	std	Y+7, r24	; 0x07
    1e38:	3a 81       	ldd	r19, Y+2	; 0x02
    1e3a:	5c 81       	ldd	r21, Y+4	; 0x04
    1e3c:	7e 81       	ldd	r23, Y+6	; 0x06
}
    1e3e:	98 85       	ldd	r25, Y+8	; 0x08
    1e40:	28 96       	adiw	r28, 0x08	; 8
    1e42:	0f b6       	in	r0, 0x3f	; 63
    1e44:	f8 94       	cli
    1e46:	de bf       	out	0x3e, r29	; 62
    1e48:	0f be       	out	0x3f, r0	; 63
    1e4a:	cd bf       	out	0x3d, r28	; 61
    1e4c:	df 91       	pop	r29
    1e4e:	cf 91       	pop	r28
    1e50:	08 95       	ret

00001e52 <LCD0_write>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1e52:	e0 91 45 03 	lds	r30, 0x0345	; 0x800345 <lcd0_PORT>
    1e56:	f0 91 46 03 	lds	r31, 0x0346	; 0x800346 <lcd0_PORT+0x1>
    1e5a:	90 81       	ld	r25, Z
    1e5c:	9d 7f       	andi	r25, 0xFD	; 253
    1e5e:	90 83       	st	Z, r25
    1e60:	67 2b       	or	r22, r23
    1e62:	41 f0       	breq	.+16     	; 0x1e74 <LCD0_write+0x22>
    1e64:	e0 91 45 03 	lds	r30, 0x0345	; 0x800345 <lcd0_PORT>
    1e68:	f0 91 46 03 	lds	r31, 0x0346	; 0x800346 <lcd0_PORT+0x1>
    1e6c:	90 81       	ld	r25, Z
    1e6e:	91 60       	ori	r25, 0x01	; 1
    1e70:	90 83       	st	Z, r25
    1e72:	07 c0       	rjmp	.+14     	; 0x1e82 <LCD0_write+0x30>
    1e74:	e0 91 45 03 	lds	r30, 0x0345	; 0x800345 <lcd0_PORT>
    1e78:	f0 91 46 03 	lds	r31, 0x0346	; 0x800346 <lcd0_PORT+0x1>
    1e7c:	90 81       	ld	r25, Z
    1e7e:	9e 7f       	andi	r25, 0xFE	; 254
    1e80:	90 83       	st	Z, r25
    1e82:	e0 91 42 03 	lds	r30, 0x0342	; 0x800342 <lcd0_DDR>
    1e86:	f0 91 43 03 	lds	r31, 0x0343	; 0x800343 <lcd0_DDR+0x1>
    1e8a:	90 81       	ld	r25, Z
    1e8c:	90 6f       	ori	r25, 0xF0	; 240
    1e8e:	90 83       	st	Z, r25
    1e90:	e0 91 45 03 	lds	r30, 0x0345	; 0x800345 <lcd0_PORT>
    1e94:	f0 91 46 03 	lds	r31, 0x0346	; 0x800346 <lcd0_PORT+0x1>
    1e98:	90 81       	ld	r25, Z
    1e9a:	94 60       	ori	r25, 0x04	; 4
    1e9c:	90 83       	st	Z, r25
    1e9e:	88 23       	and	r24, r24
    1ea0:	44 f4       	brge	.+16     	; 0x1eb2 <LCD0_write+0x60>
    1ea2:	e0 91 45 03 	lds	r30, 0x0345	; 0x800345 <lcd0_PORT>
    1ea6:	f0 91 46 03 	lds	r31, 0x0346	; 0x800346 <lcd0_PORT+0x1>
    1eaa:	90 81       	ld	r25, Z
    1eac:	90 68       	ori	r25, 0x80	; 128
    1eae:	90 83       	st	Z, r25
    1eb0:	07 c0       	rjmp	.+14     	; 0x1ec0 <LCD0_write+0x6e>
    1eb2:	e0 91 45 03 	lds	r30, 0x0345	; 0x800345 <lcd0_PORT>
    1eb6:	f0 91 46 03 	lds	r31, 0x0346	; 0x800346 <lcd0_PORT+0x1>
    1eba:	90 81       	ld	r25, Z
    1ebc:	9f 77       	andi	r25, 0x7F	; 127
    1ebe:	90 83       	st	Z, r25
    1ec0:	86 ff       	sbrs	r24, 6
    1ec2:	08 c0       	rjmp	.+16     	; 0x1ed4 <LCD0_write+0x82>
    1ec4:	e0 91 45 03 	lds	r30, 0x0345	; 0x800345 <lcd0_PORT>
    1ec8:	f0 91 46 03 	lds	r31, 0x0346	; 0x800346 <lcd0_PORT+0x1>
    1ecc:	90 81       	ld	r25, Z
    1ece:	90 64       	ori	r25, 0x40	; 64
    1ed0:	90 83       	st	Z, r25
    1ed2:	07 c0       	rjmp	.+14     	; 0x1ee2 <LCD0_write+0x90>
    1ed4:	e0 91 45 03 	lds	r30, 0x0345	; 0x800345 <lcd0_PORT>
    1ed8:	f0 91 46 03 	lds	r31, 0x0346	; 0x800346 <lcd0_PORT+0x1>
    1edc:	90 81       	ld	r25, Z
    1ede:	9f 7b       	andi	r25, 0xBF	; 191
    1ee0:	90 83       	st	Z, r25
    1ee2:	85 ff       	sbrs	r24, 5
    1ee4:	08 c0       	rjmp	.+16     	; 0x1ef6 <LCD0_write+0xa4>
    1ee6:	e0 91 45 03 	lds	r30, 0x0345	; 0x800345 <lcd0_PORT>
    1eea:	f0 91 46 03 	lds	r31, 0x0346	; 0x800346 <lcd0_PORT+0x1>
    1eee:	90 81       	ld	r25, Z
    1ef0:	90 62       	ori	r25, 0x20	; 32
    1ef2:	90 83       	st	Z, r25
    1ef4:	07 c0       	rjmp	.+14     	; 0x1f04 <LCD0_write+0xb2>
    1ef6:	e0 91 45 03 	lds	r30, 0x0345	; 0x800345 <lcd0_PORT>
    1efa:	f0 91 46 03 	lds	r31, 0x0346	; 0x800346 <lcd0_PORT+0x1>
    1efe:	90 81       	ld	r25, Z
    1f00:	9f 7d       	andi	r25, 0xDF	; 223
    1f02:	90 83       	st	Z, r25
    1f04:	84 ff       	sbrs	r24, 4
    1f06:	08 c0       	rjmp	.+16     	; 0x1f18 <LCD0_write+0xc6>
    1f08:	e0 91 45 03 	lds	r30, 0x0345	; 0x800345 <lcd0_PORT>
    1f0c:	f0 91 46 03 	lds	r31, 0x0346	; 0x800346 <lcd0_PORT+0x1>
    1f10:	90 81       	ld	r25, Z
    1f12:	90 61       	ori	r25, 0x10	; 16
    1f14:	90 83       	st	Z, r25
    1f16:	07 c0       	rjmp	.+14     	; 0x1f26 <LCD0_write+0xd4>
    1f18:	e0 91 45 03 	lds	r30, 0x0345	; 0x800345 <lcd0_PORT>
    1f1c:	f0 91 46 03 	lds	r31, 0x0346	; 0x800346 <lcd0_PORT+0x1>
    1f20:	90 81       	ld	r25, Z
    1f22:	9f 7e       	andi	r25, 0xEF	; 239
    1f24:	90 83       	st	Z, r25
    1f26:	e0 91 45 03 	lds	r30, 0x0345	; 0x800345 <lcd0_PORT>
    1f2a:	f0 91 46 03 	lds	r31, 0x0346	; 0x800346 <lcd0_PORT+0x1>
    1f2e:	90 81       	ld	r25, Z
    1f30:	9b 7f       	andi	r25, 0xFB	; 251
    1f32:	90 83       	st	Z, r25
    1f34:	e0 91 45 03 	lds	r30, 0x0345	; 0x800345 <lcd0_PORT>
    1f38:	f0 91 46 03 	lds	r31, 0x0346	; 0x800346 <lcd0_PORT+0x1>
    1f3c:	90 81       	ld	r25, Z
    1f3e:	94 60       	ori	r25, 0x04	; 4
    1f40:	90 83       	st	Z, r25
    1f42:	83 ff       	sbrs	r24, 3
    1f44:	08 c0       	rjmp	.+16     	; 0x1f56 <LCD0_write+0x104>
    1f46:	e0 91 45 03 	lds	r30, 0x0345	; 0x800345 <lcd0_PORT>
    1f4a:	f0 91 46 03 	lds	r31, 0x0346	; 0x800346 <lcd0_PORT+0x1>
    1f4e:	90 81       	ld	r25, Z
    1f50:	90 68       	ori	r25, 0x80	; 128
    1f52:	90 83       	st	Z, r25
    1f54:	07 c0       	rjmp	.+14     	; 0x1f64 <LCD0_write+0x112>
    1f56:	e0 91 45 03 	lds	r30, 0x0345	; 0x800345 <lcd0_PORT>
    1f5a:	f0 91 46 03 	lds	r31, 0x0346	; 0x800346 <lcd0_PORT+0x1>
    1f5e:	90 81       	ld	r25, Z
    1f60:	9f 77       	andi	r25, 0x7F	; 127
    1f62:	90 83       	st	Z, r25
    1f64:	82 ff       	sbrs	r24, 2
    1f66:	08 c0       	rjmp	.+16     	; 0x1f78 <LCD0_write+0x126>
    1f68:	e0 91 45 03 	lds	r30, 0x0345	; 0x800345 <lcd0_PORT>
    1f6c:	f0 91 46 03 	lds	r31, 0x0346	; 0x800346 <lcd0_PORT+0x1>
    1f70:	90 81       	ld	r25, Z
    1f72:	90 64       	ori	r25, 0x40	; 64
    1f74:	90 83       	st	Z, r25
    1f76:	07 c0       	rjmp	.+14     	; 0x1f86 <LCD0_write+0x134>
    1f78:	e0 91 45 03 	lds	r30, 0x0345	; 0x800345 <lcd0_PORT>
    1f7c:	f0 91 46 03 	lds	r31, 0x0346	; 0x800346 <lcd0_PORT+0x1>
    1f80:	90 81       	ld	r25, Z
    1f82:	9f 7b       	andi	r25, 0xBF	; 191
    1f84:	90 83       	st	Z, r25
    1f86:	81 ff       	sbrs	r24, 1
    1f88:	08 c0       	rjmp	.+16     	; 0x1f9a <LCD0_write+0x148>
    1f8a:	e0 91 45 03 	lds	r30, 0x0345	; 0x800345 <lcd0_PORT>
    1f8e:	f0 91 46 03 	lds	r31, 0x0346	; 0x800346 <lcd0_PORT+0x1>
    1f92:	90 81       	ld	r25, Z
    1f94:	90 62       	ori	r25, 0x20	; 32
    1f96:	90 83       	st	Z, r25
    1f98:	07 c0       	rjmp	.+14     	; 0x1fa8 <LCD0_write+0x156>
    1f9a:	e0 91 45 03 	lds	r30, 0x0345	; 0x800345 <lcd0_PORT>
    1f9e:	f0 91 46 03 	lds	r31, 0x0346	; 0x800346 <lcd0_PORT+0x1>
    1fa2:	90 81       	ld	r25, Z
    1fa4:	9f 7d       	andi	r25, 0xDF	; 223
    1fa6:	90 83       	st	Z, r25
    1fa8:	80 ff       	sbrs	r24, 0
    1faa:	08 c0       	rjmp	.+16     	; 0x1fbc <LCD0_write+0x16a>
    1fac:	e0 91 45 03 	lds	r30, 0x0345	; 0x800345 <lcd0_PORT>
    1fb0:	f0 91 46 03 	lds	r31, 0x0346	; 0x800346 <lcd0_PORT+0x1>
    1fb4:	80 81       	ld	r24, Z
    1fb6:	80 61       	ori	r24, 0x10	; 16
    1fb8:	80 83       	st	Z, r24
    1fba:	07 c0       	rjmp	.+14     	; 0x1fca <LCD0_write+0x178>
    1fbc:	e0 91 45 03 	lds	r30, 0x0345	; 0x800345 <lcd0_PORT>
    1fc0:	f0 91 46 03 	lds	r31, 0x0346	; 0x800346 <lcd0_PORT+0x1>
    1fc4:	80 81       	ld	r24, Z
    1fc6:	8f 7e       	andi	r24, 0xEF	; 239
    1fc8:	80 83       	st	Z, r24
    1fca:	e0 91 45 03 	lds	r30, 0x0345	; 0x800345 <lcd0_PORT>
    1fce:	f0 91 46 03 	lds	r31, 0x0346	; 0x800346 <lcd0_PORT+0x1>
    1fd2:	80 81       	ld	r24, Z
    1fd4:	8b 7f       	andi	r24, 0xFB	; 251
    1fd6:	80 83       	st	Z, r24
    1fd8:	08 95       	ret

00001fda <LCD0_read>:
    1fda:	e0 91 42 03 	lds	r30, 0x0342	; 0x800342 <lcd0_DDR>
    1fde:	f0 91 43 03 	lds	r31, 0x0343	; 0x800343 <lcd0_DDR+0x1>
    1fe2:	20 81       	ld	r18, Z
    1fe4:	2f 70       	andi	r18, 0x0F	; 15
    1fe6:	20 83       	st	Z, r18
    1fe8:	e0 91 45 03 	lds	r30, 0x0345	; 0x800345 <lcd0_PORT>
    1fec:	f0 91 46 03 	lds	r31, 0x0346	; 0x800346 <lcd0_PORT+0x1>
    1ff0:	20 81       	ld	r18, Z
    1ff2:	20 6f       	ori	r18, 0xF0	; 240
    1ff4:	20 83       	st	Z, r18
    1ff6:	e0 91 45 03 	lds	r30, 0x0345	; 0x800345 <lcd0_PORT>
    1ffa:	f0 91 46 03 	lds	r31, 0x0346	; 0x800346 <lcd0_PORT+0x1>
    1ffe:	20 81       	ld	r18, Z
    2000:	22 60       	ori	r18, 0x02	; 2
    2002:	20 83       	st	Z, r18
    2004:	89 2b       	or	r24, r25
    2006:	41 f0       	breq	.+16     	; 0x2018 <LCD0_read+0x3e>
    2008:	e0 91 45 03 	lds	r30, 0x0345	; 0x800345 <lcd0_PORT>
    200c:	f0 91 46 03 	lds	r31, 0x0346	; 0x800346 <lcd0_PORT+0x1>
    2010:	80 81       	ld	r24, Z
    2012:	81 60       	ori	r24, 0x01	; 1
    2014:	80 83       	st	Z, r24
    2016:	07 c0       	rjmp	.+14     	; 0x2026 <LCD0_read+0x4c>
    2018:	e0 91 45 03 	lds	r30, 0x0345	; 0x800345 <lcd0_PORT>
    201c:	f0 91 46 03 	lds	r31, 0x0346	; 0x800346 <lcd0_PORT+0x1>
    2020:	80 81       	ld	r24, Z
    2022:	8e 7f       	andi	r24, 0xFE	; 254
    2024:	80 83       	st	Z, r24
    2026:	e0 91 45 03 	lds	r30, 0x0345	; 0x800345 <lcd0_PORT>
    202a:	f0 91 46 03 	lds	r31, 0x0346	; 0x800346 <lcd0_PORT+0x1>
    202e:	80 81       	ld	r24, Z
    2030:	84 60       	ori	r24, 0x04	; 4
    2032:	80 83       	st	Z, r24
    2034:	e0 91 3b 03 	lds	r30, 0x033B	; 0x80033b <lcd0_PIN>
    2038:	f0 91 3c 03 	lds	r31, 0x033C	; 0x80033c <lcd0_PIN+0x1>
    203c:	80 81       	ld	r24, Z
    203e:	88 23       	and	r24, r24
    2040:	14 f0       	brlt	.+4      	; 0x2046 <LCD0_read+0x6c>
    2042:	80 e0       	ldi	r24, 0x00	; 0
    2044:	01 c0       	rjmp	.+2      	; 0x2048 <LCD0_read+0x6e>
    2046:	80 e8       	ldi	r24, 0x80	; 128
    2048:	90 81       	ld	r25, Z
    204a:	96 ff       	sbrs	r25, 6
    204c:	02 c0       	rjmp	.+4      	; 0x2052 <LCD0_read+0x78>
    204e:	80 64       	ori	r24, 0x40	; 64
    2050:	01 c0       	rjmp	.+2      	; 0x2054 <LCD0_read+0x7a>
    2052:	8f 7b       	andi	r24, 0xBF	; 191
    2054:	90 81       	ld	r25, Z
    2056:	95 ff       	sbrs	r25, 5
    2058:	02 c0       	rjmp	.+4      	; 0x205e <LCD0_read+0x84>
    205a:	80 62       	ori	r24, 0x20	; 32
    205c:	01 c0       	rjmp	.+2      	; 0x2060 <LCD0_read+0x86>
    205e:	8f 7d       	andi	r24, 0xDF	; 223
    2060:	90 81       	ld	r25, Z
    2062:	94 ff       	sbrs	r25, 4
    2064:	02 c0       	rjmp	.+4      	; 0x206a <LCD0_read+0x90>
    2066:	80 61       	ori	r24, 0x10	; 16
    2068:	01 c0       	rjmp	.+2      	; 0x206c <LCD0_read+0x92>
    206a:	8f 7e       	andi	r24, 0xEF	; 239
    206c:	e0 91 45 03 	lds	r30, 0x0345	; 0x800345 <lcd0_PORT>
    2070:	f0 91 46 03 	lds	r31, 0x0346	; 0x800346 <lcd0_PORT+0x1>
    2074:	90 81       	ld	r25, Z
    2076:	9b 7f       	andi	r25, 0xFB	; 251
    2078:	90 83       	st	Z, r25
    207a:	e0 91 45 03 	lds	r30, 0x0345	; 0x800345 <lcd0_PORT>
    207e:	f0 91 46 03 	lds	r31, 0x0346	; 0x800346 <lcd0_PORT+0x1>
    2082:	90 81       	ld	r25, Z
    2084:	94 60       	ori	r25, 0x04	; 4
    2086:	90 83       	st	Z, r25
    2088:	e0 91 3b 03 	lds	r30, 0x033B	; 0x80033b <lcd0_PIN>
    208c:	f0 91 3c 03 	lds	r31, 0x033C	; 0x80033c <lcd0_PIN+0x1>
    2090:	90 81       	ld	r25, Z
    2092:	99 23       	and	r25, r25
    2094:	14 f4       	brge	.+4      	; 0x209a <LCD0_read+0xc0>
    2096:	88 60       	ori	r24, 0x08	; 8
    2098:	01 c0       	rjmp	.+2      	; 0x209c <LCD0_read+0xc2>
    209a:	87 7f       	andi	r24, 0xF7	; 247
    209c:	90 81       	ld	r25, Z
    209e:	96 ff       	sbrs	r25, 6
    20a0:	02 c0       	rjmp	.+4      	; 0x20a6 <LCD0_read+0xcc>
    20a2:	84 60       	ori	r24, 0x04	; 4
    20a4:	01 c0       	rjmp	.+2      	; 0x20a8 <LCD0_read+0xce>
    20a6:	8b 7f       	andi	r24, 0xFB	; 251
    20a8:	90 81       	ld	r25, Z
    20aa:	95 ff       	sbrs	r25, 5
    20ac:	02 c0       	rjmp	.+4      	; 0x20b2 <LCD0_read+0xd8>
    20ae:	82 60       	ori	r24, 0x02	; 2
    20b0:	01 c0       	rjmp	.+2      	; 0x20b4 <LCD0_read+0xda>
    20b2:	8d 7f       	andi	r24, 0xFD	; 253
    20b4:	90 81       	ld	r25, Z
    20b6:	94 ff       	sbrs	r25, 4
    20b8:	02 c0       	rjmp	.+4      	; 0x20be <LCD0_read+0xe4>
    20ba:	81 60       	ori	r24, 0x01	; 1
    20bc:	01 c0       	rjmp	.+2      	; 0x20c0 <LCD0_read+0xe6>
    20be:	8e 7f       	andi	r24, 0xFE	; 254
    20c0:	e0 91 45 03 	lds	r30, 0x0345	; 0x800345 <lcd0_PORT>
    20c4:	f0 91 46 03 	lds	r31, 0x0346	; 0x800346 <lcd0_PORT+0x1>
    20c8:	90 81       	ld	r25, Z
    20ca:	9b 7f       	andi	r25, 0xFB	; 251
    20cc:	90 83       	st	Z, r25
    20ce:	08 95       	ret

000020d0 <LCD0_BF>:
    20d0:	cf 93       	push	r28
    20d2:	df 93       	push	r29
    20d4:	80 e0       	ldi	r24, 0x00	; 0
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	80 df       	rcall	.-256    	; 0x1fda <LCD0_read>
    20da:	cb e0       	ldi	r28, 0x0B	; 11
    20dc:	d0 e0       	ldi	r29, 0x00	; 0
    20de:	05 c0       	rjmp	.+10     	; 0x20ea <LCD0_BF+0x1a>
    20e0:	80 e0       	ldi	r24, 0x00	; 0
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	7a df       	rcall	.-268    	; 0x1fda <LCD0_read>
    20e6:	21 97       	sbiw	r28, 0x01	; 1
    20e8:	11 f0       	breq	.+4      	; 0x20ee <LCD0_BF+0x1e>
    20ea:	88 23       	and	r24, r24
    20ec:	cc f3       	brlt	.-14     	; 0x20e0 <LCD0_BF+0x10>
    20ee:	df 91       	pop	r29
    20f0:	cf 91       	pop	r28
    20f2:	08 95       	ret

000020f4 <LCD0_putch>:
    20f4:	61 e0       	ldi	r22, 0x01	; 1
    20f6:	70 e0       	ldi	r23, 0x00	; 0
    20f8:	ac de       	rcall	.-680    	; 0x1e52 <LCD0_write>
    20fa:	ea cf       	rjmp	.-44     	; 0x20d0 <LCD0_BF>
    20fc:	08 95       	ret

000020fe <LCD0_getch>:
    20fe:	cf 93       	push	r28
    2100:	81 e0       	ldi	r24, 0x01	; 1
    2102:	90 e0       	ldi	r25, 0x00	; 0
    2104:	6a df       	rcall	.-300    	; 0x1fda <LCD0_read>
    2106:	c8 2f       	mov	r28, r24
    2108:	e3 df       	rcall	.-58     	; 0x20d0 <LCD0_BF>
    210a:	8c 2f       	mov	r24, r28
    210c:	cf 91       	pop	r28
    210e:	08 95       	ret

00002110 <LCD0_string>:
    2110:	cf 93       	push	r28
    2112:	df 93       	push	r29
    2114:	ec 01       	movw	r28, r24
    2116:	88 81       	ld	r24, Y
    2118:	88 23       	and	r24, r24
    211a:	41 f0       	breq	.+16     	; 0x212c <LCD0_string+0x1c>
    211c:	21 96       	adiw	r28, 0x01	; 1
    211e:	61 e0       	ldi	r22, 0x01	; 1
    2120:	70 e0       	ldi	r23, 0x00	; 0
    2122:	97 de       	rcall	.-722    	; 0x1e52 <LCD0_write>
    2124:	d5 df       	rcall	.-86     	; 0x20d0 <LCD0_BF>
    2126:	89 91       	ld	r24, Y+
    2128:	81 11       	cpse	r24, r1
    212a:	f9 cf       	rjmp	.-14     	; 0x211e <LCD0_string+0xe>
    212c:	df 91       	pop	r29
    212e:	cf 91       	pop	r28
    2130:	08 95       	ret

00002132 <LCD0_string_size>:
    2132:	0f 93       	push	r16
    2134:	1f 93       	push	r17
    2136:	cf 93       	push	r28
    2138:	df 93       	push	r29
    213a:	fc 01       	movw	r30, r24
    213c:	d6 2f       	mov	r29, r22
    213e:	80 81       	ld	r24, Z
    2140:	88 23       	and	r24, r24
    2142:	51 f0       	breq	.+20     	; 0x2158 <LCD0_string_size+0x26>
    2144:	8f 01       	movw	r16, r30
    2146:	0f 5f       	subi	r16, 0xFF	; 255
    2148:	1f 4f       	sbci	r17, 0xFF	; 255
    214a:	61 11       	cpse	r22, r1
    214c:	09 c0       	rjmp	.+18     	; 0x2160 <LCD0_string_size+0x2e>
    214e:	1b c0       	rjmp	.+54     	; 0x2186 <LCD0_string_size+0x54>
    2150:	cf 5f       	subi	r28, 0xFF	; 255
    2152:	dc 17       	cp	r29, r28
    2154:	30 f4       	brcc	.+12     	; 0x2162 <LCD0_string_size+0x30>
    2156:	01 c0       	rjmp	.+2      	; 0x215a <LCD0_string_size+0x28>
    2158:	c0 e0       	ldi	r28, 0x00	; 0
    215a:	cd 17       	cp	r28, r29
    215c:	60 f0       	brcs	.+24     	; 0x2176 <LCD0_string_size+0x44>
    215e:	13 c0       	rjmp	.+38     	; 0x2186 <LCD0_string_size+0x54>
    2160:	c1 e0       	ldi	r28, 0x01	; 1
    2162:	61 e0       	ldi	r22, 0x01	; 1
    2164:	70 e0       	ldi	r23, 0x00	; 0
    2166:	75 de       	rcall	.-790    	; 0x1e52 <LCD0_write>
    2168:	b3 df       	rcall	.-154    	; 0x20d0 <LCD0_BF>
    216a:	f8 01       	movw	r30, r16
    216c:	81 91       	ld	r24, Z+
    216e:	8f 01       	movw	r16, r30
    2170:	81 11       	cpse	r24, r1
    2172:	ee cf       	rjmp	.-36     	; 0x2150 <LCD0_string_size+0x1e>
    2174:	f2 cf       	rjmp	.-28     	; 0x215a <LCD0_string_size+0x28>
    2176:	cf 5f       	subi	r28, 0xFF	; 255
    2178:	61 e0       	ldi	r22, 0x01	; 1
    217a:	70 e0       	ldi	r23, 0x00	; 0
    217c:	80 e2       	ldi	r24, 0x20	; 32
    217e:	69 de       	rcall	.-814    	; 0x1e52 <LCD0_write>
    2180:	a7 df       	rcall	.-178    	; 0x20d0 <LCD0_BF>
    2182:	cd 17       	cp	r28, r29
    2184:	c0 f3       	brcs	.-16     	; 0x2176 <LCD0_string_size+0x44>
    2186:	df 91       	pop	r29
    2188:	cf 91       	pop	r28
    218a:	1f 91       	pop	r17
    218c:	0f 91       	pop	r16
    218e:	08 95       	ret

00002190 <LCD0_hspace>:
    2190:	cf 93       	push	r28
    2192:	c8 2f       	mov	r28, r24
    2194:	88 23       	and	r24, r24
    2196:	39 f0       	breq	.+14     	; 0x21a6 <LCD0_hspace+0x16>
    2198:	61 e0       	ldi	r22, 0x01	; 1
    219a:	70 e0       	ldi	r23, 0x00	; 0
    219c:	80 e2       	ldi	r24, 0x20	; 32
    219e:	59 de       	rcall	.-846    	; 0x1e52 <LCD0_write>
    21a0:	97 df       	rcall	.-210    	; 0x20d0 <LCD0_BF>
    21a2:	c1 50       	subi	r28, 0x01	; 1
    21a4:	c9 f7       	brne	.-14     	; 0x2198 <LCD0_hspace+0x8>
    21a6:	cf 91       	pop	r28
    21a8:	08 95       	ret

000021aa <LCD0_gotoxy>:
    21aa:	26 2f       	mov	r18, r22
    21ac:	81 30       	cpi	r24, 0x01	; 1
    21ae:	91 05       	cpc	r25, r1
    21b0:	71 f0       	breq	.+28     	; 0x21ce <LCD0_gotoxy+0x24>
    21b2:	30 f0       	brcs	.+12     	; 0x21c0 <LCD0_gotoxy+0x16>
    21b4:	82 30       	cpi	r24, 0x02	; 2
    21b6:	91 05       	cpc	r25, r1
    21b8:	89 f0       	breq	.+34     	; 0x21dc <LCD0_gotoxy+0x32>
    21ba:	03 97       	sbiw	r24, 0x03	; 3
    21bc:	b1 f0       	breq	.+44     	; 0x21ea <LCD0_gotoxy+0x40>
    21be:	08 95       	ret
    21c0:	60 e0       	ldi	r22, 0x00	; 0
    21c2:	70 e0       	ldi	r23, 0x00	; 0
    21c4:	80 e8       	ldi	r24, 0x80	; 128
    21c6:	82 0f       	add	r24, r18
    21c8:	44 de       	rcall	.-888    	; 0x1e52 <LCD0_write>
    21ca:	82 cf       	rjmp	.-252    	; 0x20d0 <LCD0_BF>
    21cc:	08 95       	ret
    21ce:	60 e0       	ldi	r22, 0x00	; 0
    21d0:	70 e0       	ldi	r23, 0x00	; 0
    21d2:	80 ec       	ldi	r24, 0xC0	; 192
    21d4:	82 0f       	add	r24, r18
    21d6:	3d de       	rcall	.-902    	; 0x1e52 <LCD0_write>
    21d8:	7b cf       	rjmp	.-266    	; 0x20d0 <LCD0_BF>
    21da:	08 95       	ret
    21dc:	60 e0       	ldi	r22, 0x00	; 0
    21de:	70 e0       	ldi	r23, 0x00	; 0
    21e0:	84 e9       	ldi	r24, 0x94	; 148
    21e2:	82 0f       	add	r24, r18
    21e4:	36 de       	rcall	.-916    	; 0x1e52 <LCD0_write>
    21e6:	74 cf       	rjmp	.-280    	; 0x20d0 <LCD0_BF>
    21e8:	08 95       	ret
    21ea:	60 e0       	ldi	r22, 0x00	; 0
    21ec:	70 e0       	ldi	r23, 0x00	; 0
    21ee:	84 ed       	ldi	r24, 0xD4	; 212
    21f0:	82 0f       	add	r24, r18
    21f2:	2f de       	rcall	.-930    	; 0x1e52 <LCD0_write>
    21f4:	6d cf       	rjmp	.-294    	; 0x20d0 <LCD0_BF>
    21f6:	08 95       	ret

000021f8 <LCD0_clear>:
    21f8:	60 e0       	ldi	r22, 0x00	; 0
    21fa:	70 e0       	ldi	r23, 0x00	; 0
    21fc:	81 e0       	ldi	r24, 0x01	; 1
    21fe:	29 de       	rcall	.-942    	; 0x1e52 <LCD0_write>
    2200:	87 ee       	ldi	r24, 0xE7	; 231
    2202:	97 e1       	ldi	r25, 0x17	; 23
    2204:	01 97       	sbiw	r24, 0x01	; 1
    2206:	f1 f7       	brne	.-4      	; 0x2204 <LCD0_clear+0xc>
    2208:	00 c0       	rjmp	.+0      	; 0x220a <LCD0_clear+0x12>
    220a:	00 00       	nop
    220c:	08 95       	ret

0000220e <LCD0_inic>:
	return lcd0;
}
void LCD0_inic(void)
{
	//LCD INIC
	*lcd0_DDR=(1<<RS)|(1<<RW)|(1<<EN)|(0<<NC);
    220e:	e0 91 42 03 	lds	r30, 0x0342	; 0x800342 <lcd0_DDR>
    2212:	f0 91 43 03 	lds	r31, 0x0343	; 0x800343 <lcd0_DDR+0x1>
    2216:	87 e0       	ldi	r24, 0x07	; 7
    2218:	80 83       	st	Z, r24
	*lcd0_PORT=(1<<NC);
    221a:	e0 91 45 03 	lds	r30, 0x0345	; 0x800345 <lcd0_PORT>
    221e:	f0 91 46 03 	lds	r31, 0x0346	; 0x800346 <lcd0_PORT+0x1>
    2222:	88 e0       	ldi	r24, 0x08	; 8
    2224:	80 83       	st	Z, r24
    2226:	2f ef       	ldi	r18, 0xFF	; 255
    2228:	83 ef       	ldi	r24, 0xF3	; 243
    222a:	91 e0       	ldi	r25, 0x01	; 1
    222c:	21 50       	subi	r18, 0x01	; 1
    222e:	80 40       	sbci	r24, 0x00	; 0
    2230:	90 40       	sbci	r25, 0x00	; 0
    2232:	e1 f7       	brne	.-8      	; 0x222c <LCD0_inic+0x1e>
    2234:	00 c0       	rjmp	.+0      	; 0x2236 <LCD0_inic+0x28>
    2236:	00 00       	nop
	/***INICIALIZACAO LCD**datasheet*/
	_delay_ms(40);
	LCD0_write(0x33,INST); //function set
    2238:	60 e0       	ldi	r22, 0x00	; 0
    223a:	70 e0       	ldi	r23, 0x00	; 0
    223c:	83 e3       	ldi	r24, 0x33	; 51
    223e:	09 de       	rcall	.-1006   	; 0x1e52 <LCD0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2240:	20 ed       	ldi	r18, 0xD0	; 208
    2242:	2a 95       	dec	r18
    2244:	f1 f7       	brne	.-4      	; 0x2242 <LCD0_inic+0x34>
	_delay_us(39);
	LCD0_write(0x33,INST); //function set
    2246:	60 e0       	ldi	r22, 0x00	; 0
    2248:	70 e0       	ldi	r23, 0x00	; 0
    224a:	83 e3       	ldi	r24, 0x33	; 51
    224c:	02 de       	rcall	.-1020   	; 0x1e52 <LCD0_write>
    224e:	80 ed       	ldi	r24, 0xD0	; 208
    2250:	8a 95       	dec	r24
    2252:	f1 f7       	brne	.-4      	; 0x2250 <LCD0_inic+0x42>
	_delay_us(39);
	LCD0_write(0x2B,INST); //function set
    2254:	60 e0       	ldi	r22, 0x00	; 0
    2256:	70 e0       	ldi	r23, 0x00	; 0
    2258:	8b e2       	ldi	r24, 0x2B	; 43
    225a:	fb dd       	rcall	.-1034   	; 0x1e52 <LCD0_write>
    225c:	95 ec       	ldi	r25, 0xC5	; 197
    225e:	9a 95       	dec	r25
    2260:	f1 f7       	brne	.-4      	; 0x225e <LCD0_inic+0x50>
    2262:	00 00       	nop
	_delay_us(37);
	LCD0_write(0x0C,INST);// display on/off control
    2264:	60 e0       	ldi	r22, 0x00	; 0
    2266:	70 e0       	ldi	r23, 0x00	; 0
    2268:	8c e0       	ldi	r24, 0x0C	; 12
    226a:	f3 dd       	rcall	.-1050   	; 0x1e52 <LCD0_write>
    226c:	25 ec       	ldi	r18, 0xC5	; 197
    226e:	2a 95       	dec	r18
    2270:	f1 f7       	brne	.-4      	; 0x226e <LCD0_inic+0x60>
	_delay_us(37);
	LCD0_write(0x01,INST);// clear display
    2272:	00 00       	nop
    2274:	60 e0       	ldi	r22, 0x00	; 0
    2276:	70 e0       	ldi	r23, 0x00	; 0
    2278:	81 e0       	ldi	r24, 0x01	; 1
    227a:	eb dd       	rcall	.-1066   	; 0x1e52 <LCD0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    227c:	87 ee       	ldi	r24, 0xE7	; 231
    227e:	97 e1       	ldi	r25, 0x17	; 23
    2280:	01 97       	sbiw	r24, 0x01	; 1
    2282:	f1 f7       	brne	.-4      	; 0x2280 <LCD0_inic+0x72>
    2284:	00 c0       	rjmp	.+0      	; 0x2286 <LCD0_inic+0x78>
	_delay_ms(1.53);
	LCD0_write(0x06,INST);// entry mode set (crazy settings)
    2286:	00 00       	nop
    2288:	60 e0       	ldi	r22, 0x00	; 0
    228a:	70 e0       	ldi	r23, 0x00	; 0
    228c:	86 e0       	ldi	r24, 0x06	; 6
    228e:	e1 dd       	rcall	.-1086   	; 0x1e52 <LCD0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2290:	95 ec       	ldi	r25, 0xC5	; 197
    2292:	9a 95       	dec	r25
    2294:	f1 f7       	brne	.-4      	; 0x2292 <LCD0_inic+0x84>
    2296:	00 00       	nop
    2298:	08 95       	ret

0000229a <LCD0enable>:
unsigned int LCD_ticks(unsigned int num);
/*
** procedure and function
*/
LCD0 LCD0enable(volatile uint8_t *ddr, volatile uint8_t *pin, volatile uint8_t *port)
{
    229a:	1f 93       	push	r17
    229c:	cf 93       	push	r28
    229e:	df 93       	push	r29
    22a0:	ec 01       	movw	r28, r24
	//LOCAL VARIABLES
	uint8_t tSREG;
	tSREG=SREG;
    22a2:	1f b7       	in	r17, 0x3f	; 63
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
    22a4:	8f b7       	in	r24, 0x3f	; 63
    22a6:	8f 77       	andi	r24, 0x7F	; 127
    22a8:	8f bf       	out	0x3f, r24	; 63
	//ALLOCAÇÂO MEMORIA PARA Estrutura
	LCD0 lcd0;
	//import parametros
	lcd0_DDR=ddr;
    22aa:	70 93 43 03 	sts	0x0343, r23	; 0x800343 <lcd0_DDR+0x1>
    22ae:	60 93 42 03 	sts	0x0342, r22	; 0x800342 <lcd0_DDR>
	lcd0_PIN=pin;
    22b2:	50 93 3c 03 	sts	0x033C, r21	; 0x80033c <lcd0_PIN+0x1>
    22b6:	40 93 3b 03 	sts	0x033B, r20	; 0x80033b <lcd0_PIN>
	lcd0_PORT=port;
    22ba:	30 93 46 03 	sts	0x0346, r19	; 0x800346 <lcd0_PORT+0x1>
    22be:	20 93 45 03 	sts	0x0345, r18	; 0x800345 <lcd0_PORT>
	//inic variables
	*lcd0_DDR=0x00;
    22c2:	fb 01       	movw	r30, r22
    22c4:	10 82       	st	Z, r1
	*lcd0_PORT=0xFF;
    22c6:	e0 91 45 03 	lds	r30, 0x0345	; 0x800345 <lcd0_PORT>
    22ca:	f0 91 46 03 	lds	r31, 0x0346	; 0x800346 <lcd0_PORT+0x1>
    22ce:	8f ef       	ldi	r24, 0xFF	; 255
    22d0:	80 83       	st	Z, r24
	lcd0_detect=*lcd0_PIN & (1<<NC);
    22d2:	e0 91 3b 03 	lds	r30, 0x033B	; 0x80033b <lcd0_PIN>
    22d6:	f0 91 3c 03 	lds	r31, 0x033C	; 0x80033c <lcd0_PIN+0x1>
    22da:	80 81       	ld	r24, Z
    22dc:	88 70       	andi	r24, 0x08	; 8
    22de:	80 93 44 03 	sts	0x0344, r24	; 0x800344 <lcd0_detect>
	lcd0.hspace=LCD0_hspace;
	lcd0.clear=LCD0_clear;
	lcd0.gotoxy=LCD0_gotoxy;
	lcd0.reboot=LCD0_reboot;
	//LCD INIC
	LCD0_inic();
    22e2:	95 df       	rcall	.-214    	; 0x220e <LCD0_inic>
	SREG=tSREG;
    22e4:	1f bf       	out	0x3f, r17	; 63
	//
	return lcd0;
    22e6:	89 e2       	ldi	r24, 0x29	; 41
    22e8:	9f e0       	ldi	r25, 0x0F	; 15
    22ea:	99 83       	std	Y+1, r25	; 0x01
    22ec:	88 83       	st	Y, r24
    22ee:	8d ee       	ldi	r24, 0xED	; 237
    22f0:	9f e0       	ldi	r25, 0x0F	; 15
    22f2:	9b 83       	std	Y+3, r25	; 0x03
    22f4:	8a 83       	std	Y+2, r24	; 0x02
    22f6:	88 e6       	ldi	r24, 0x68	; 104
    22f8:	90 e1       	ldi	r25, 0x10	; 16
    22fa:	9d 83       	std	Y+5, r25	; 0x05
    22fc:	8c 83       	std	Y+4, r24	; 0x04
    22fe:	8a e7       	ldi	r24, 0x7A	; 122
    2300:	90 e1       	ldi	r25, 0x10	; 16
    2302:	9f 83       	std	Y+7, r25	; 0x07
    2304:	8e 83       	std	Y+6, r24	; 0x06
    2306:	8f e7       	ldi	r24, 0x7F	; 127
    2308:	90 e1       	ldi	r25, 0x10	; 16
    230a:	99 87       	std	Y+9, r25	; 0x09
    230c:	88 87       	std	Y+8, r24	; 0x08
    230e:	88 e8       	ldi	r24, 0x88	; 136
    2310:	90 e1       	ldi	r25, 0x10	; 16
    2312:	9b 87       	std	Y+11, r25	; 0x0b
    2314:	8a 87       	std	Y+10, r24	; 0x0a
    2316:	89 e9       	ldi	r24, 0x99	; 153
    2318:	90 e1       	ldi	r25, 0x10	; 16
    231a:	9d 87       	std	Y+13, r25	; 0x0d
    231c:	8c 87       	std	Y+12, r24	; 0x0c
    231e:	88 ec       	ldi	r24, 0xC8	; 200
    2320:	90 e1       	ldi	r25, 0x10	; 16
    2322:	9f 87       	std	Y+15, r25	; 0x0f
    2324:	8e 87       	std	Y+14, r24	; 0x0e
    2326:	8c ef       	ldi	r24, 0xFC	; 252
    2328:	90 e1       	ldi	r25, 0x10	; 16
    232a:	99 8b       	std	Y+17, r25	; 0x11
    232c:	88 8b       	std	Y+16, r24	; 0x10
    232e:	85 ed       	ldi	r24, 0xD5	; 213
    2330:	90 e1       	ldi	r25, 0x10	; 16
    2332:	9b 8b       	std	Y+19, r25	; 0x13
    2334:	8a 8b       	std	Y+18, r24	; 0x12
    2336:	84 ea       	ldi	r24, 0xA4	; 164
    2338:	91 e1       	ldi	r25, 0x11	; 17
    233a:	9d 8b       	std	Y+21, r25	; 0x15
    233c:	8c 8b       	std	Y+20, r24	; 0x14
}
    233e:	ce 01       	movw	r24, r28
    2340:	df 91       	pop	r29
    2342:	cf 91       	pop	r28
    2344:	1f 91       	pop	r17
    2346:	08 95       	ret

00002348 <LCD0_reboot>:
	*lcd0_PORT|=(1<<EN);
	LCD_ticks(num);
	*lcd0_PORT&=~(1<<EN);
}
void LCD0_reboot(void)
{
    2348:	cf 93       	push	r28
	//low high detect pin NC
	uint8_t i;
	uint8_t tmp;
	tmp=*lcd0_PIN & (1<<NC);
    234a:	e0 91 3b 03 	lds	r30, 0x033B	; 0x80033b <lcd0_PIN>
    234e:	f0 91 3c 03 	lds	r31, 0x033C	; 0x80033c <lcd0_PIN+0x1>
    2352:	c0 81       	ld	r28, Z
    2354:	c8 70       	andi	r28, 0x08	; 8
	i=tmp^lcd0_detect;
    2356:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <lcd0_detect>
    235a:	8c 27       	eor	r24, r28
	i&=tmp;
	if(i)
    235c:	8c 23       	and	r24, r28
    235e:	09 f0       	breq	.+2      	; 0x2362 <LCD0_reboot+0x1a>
		LCD0_inic();
    2360:	56 df       	rcall	.-340    	; 0x220e <LCD0_inic>
	lcd0_detect=tmp;
    2362:	c0 93 44 03 	sts	0x0344, r28	; 0x800344 <lcd0_detect>
}
    2366:	cf 91       	pop	r28
    2368:	08 95       	ret

0000236a <PCF8563RTC_SetTime>:
	i2c.Write(0x00);						// Write 0x00 to Control register to disable SQW-Out
	i2c.Stop();								// Stop I2C communication after initializing PCF8563
}
/***void PCF8563RTC_SetTime(uint8_t var_hour_u8, uint8_t var_min_u8, uint8_t var_sec_u8)***/
void PCF8563RTC_SetTime(uint8_t var_hour_u8, uint8_t var_min_u8, uint8_t var_sec_u8)
{
    236a:	ff 92       	push	r15
    236c:	0f 93       	push	r16
    236e:	1f 93       	push	r17
    2370:	cf 93       	push	r28
    2372:	df 93       	push	r29
    2374:	18 2f       	mov	r17, r24
    2376:	06 2f       	mov	r16, r22
    2378:	f4 2e       	mov	r15, r20
	i2c.Start();                            // Start I2C communication
    237a:	ca e6       	ldi	r28, 0x6A	; 106
    237c:	d3 e0       	ldi	r29, 0x03	; 3
    237e:	e8 81       	ld	r30, Y
    2380:	f9 81       	ldd	r31, Y+1	; 0x01
    2382:	09 95       	icall
	i2c.Write(PCF8563WriteMode_U8);         // connect to PCF8563 by sending its ID on I2c Bus
    2384:	ec 81       	ldd	r30, Y+4	; 0x04
    2386:	fd 81       	ldd	r31, Y+5	; 0x05
    2388:	82 ea       	ldi	r24, 0xA2	; 162
    238a:	09 95       	icall
	i2c.Write(PCF8563SecondRegAddress_U8);  // Select the SEC RAM address
    238c:	ec 81       	ldd	r30, Y+4	; 0x04
    238e:	fd 81       	ldd	r31, Y+5	; 0x05
    2390:	82 e0       	ldi	r24, 0x02	; 2
    2392:	09 95       	icall
	i2c.Write(var_sec_u8);			        // Write sec from RAM address 02H
    2394:	ec 81       	ldd	r30, Y+4	; 0x04
    2396:	fd 81       	ldd	r31, Y+5	; 0x05
    2398:	8f 2d       	mov	r24, r15
    239a:	09 95       	icall
	i2c.Write(var_min_u8);			        // Write min from RAM address 03H
    239c:	ec 81       	ldd	r30, Y+4	; 0x04
    239e:	fd 81       	ldd	r31, Y+5	; 0x05
    23a0:	80 2f       	mov	r24, r16
    23a2:	09 95       	icall
	i2c.Write(var_hour_u8);			        // Write hour from RAM address 04H
    23a4:	ec 81       	ldd	r30, Y+4	; 0x04
    23a6:	fd 81       	ldd	r31, Y+5	; 0x05
    23a8:	81 2f       	mov	r24, r17
    23aa:	09 95       	icall
	i2c.Stop();           	                // Stop I2C communication after Setting the Time
    23ac:	ea 81       	ldd	r30, Y+2	; 0x02
    23ae:	fb 81       	ldd	r31, Y+3	; 0x03
    23b0:	09 95       	icall
}
    23b2:	df 91       	pop	r29
    23b4:	cf 91       	pop	r28
    23b6:	1f 91       	pop	r17
    23b8:	0f 91       	pop	r16
    23ba:	ff 90       	pop	r15
    23bc:	08 95       	ret

000023be <PCF8563RTC_SetHour>:
/***void PCF8563RTC_SetHour(uint8_t var_hour_u8)***/
void PCF8563RTC_SetHour(uint8_t var_hour_u8)
{
    23be:	1f 93       	push	r17
    23c0:	cf 93       	push	r28
    23c2:	df 93       	push	r29
    23c4:	18 2f       	mov	r17, r24
	i2c.Start();                            // Start I2C communication
    23c6:	ca e6       	ldi	r28, 0x6A	; 106
    23c8:	d3 e0       	ldi	r29, 0x03	; 3
    23ca:	e8 81       	ld	r30, Y
    23cc:	f9 81       	ldd	r31, Y+1	; 0x01
    23ce:	09 95       	icall
	i2c.Write(PCF8563WriteMode_U8);         // connect to PCF8563 by sending its ID on I2c Bus
    23d0:	ec 81       	ldd	r30, Y+4	; 0x04
    23d2:	fd 81       	ldd	r31, Y+5	; 0x05
    23d4:	82 ea       	ldi	r24, 0xA2	; 162
    23d6:	09 95       	icall
	i2c.Write(PCF8563HourRegAddress_U8);    // Select the SEC RAM address
    23d8:	ec 81       	ldd	r30, Y+4	; 0x04
    23da:	fd 81       	ldd	r31, Y+5	; 0x05
    23dc:	84 e0       	ldi	r24, 0x04	; 4
    23de:	09 95       	icall
	i2c.Write(var_hour_u8);			        // Write hour from RAM address 04H
    23e0:	ec 81       	ldd	r30, Y+4	; 0x04
    23e2:	fd 81       	ldd	r31, Y+5	; 0x05
    23e4:	81 2f       	mov	r24, r17
    23e6:	09 95       	icall
	i2c.Stop();           	                // Stop I2C communication after Setting the Time
    23e8:	ea 81       	ldd	r30, Y+2	; 0x02
    23ea:	fb 81       	ldd	r31, Y+3	; 0x03
    23ec:	09 95       	icall
}
    23ee:	df 91       	pop	r29
    23f0:	cf 91       	pop	r28
    23f2:	1f 91       	pop	r17
    23f4:	08 95       	ret

000023f6 <PCF8563RTC_SetMinute>:
/***void PCF8563RTC_SetMinute(uint8_t var_min_u8)***/
void PCF8563RTC_SetMinute(uint8_t var_min_u8)
{
    23f6:	1f 93       	push	r17
    23f8:	cf 93       	push	r28
    23fa:	df 93       	push	r29
    23fc:	18 2f       	mov	r17, r24
	i2c.Start();                            // Start I2C communication
    23fe:	ca e6       	ldi	r28, 0x6A	; 106
    2400:	d3 e0       	ldi	r29, 0x03	; 3
    2402:	e8 81       	ld	r30, Y
    2404:	f9 81       	ldd	r31, Y+1	; 0x01
    2406:	09 95       	icall
	i2c.Write(PCF8563WriteMode_U8);         // connect to PCF8563 by sending its ID on I2c Bus
    2408:	ec 81       	ldd	r30, Y+4	; 0x04
    240a:	fd 81       	ldd	r31, Y+5	; 0x05
    240c:	82 ea       	ldi	r24, 0xA2	; 162
    240e:	09 95       	icall
	i2c.Write(PCF8563MinuteRegAddress_U8);  // Select the SEC RAM address
    2410:	ec 81       	ldd	r30, Y+4	; 0x04
    2412:	fd 81       	ldd	r31, Y+5	; 0x05
    2414:	83 e0       	ldi	r24, 0x03	; 3
    2416:	09 95       	icall
	i2c.Write(var_min_u8);			        // Write min from RAM address 03H
    2418:	ec 81       	ldd	r30, Y+4	; 0x04
    241a:	fd 81       	ldd	r31, Y+5	; 0x05
    241c:	81 2f       	mov	r24, r17
    241e:	09 95       	icall
	i2c.Stop();           	                // Stop I2C communication after Setting the Time
    2420:	ea 81       	ldd	r30, Y+2	; 0x02
    2422:	fb 81       	ldd	r31, Y+3	; 0x03
    2424:	09 95       	icall
}
    2426:	df 91       	pop	r29
    2428:	cf 91       	pop	r28
    242a:	1f 91       	pop	r17
    242c:	08 95       	ret

0000242e <PCF8563RTC_SetSecond>:
/***void PCF8563RTC_SetSecond(uint8_t var_sec_u8)***/
void PCF8563RTC_SetSecond(uint8_t var_sec_u8)
{
    242e:	1f 93       	push	r17
    2430:	cf 93       	push	r28
    2432:	df 93       	push	r29
    2434:	18 2f       	mov	r17, r24
	i2c.Start();                            // Start I2C communication
    2436:	ca e6       	ldi	r28, 0x6A	; 106
    2438:	d3 e0       	ldi	r29, 0x03	; 3
    243a:	e8 81       	ld	r30, Y
    243c:	f9 81       	ldd	r31, Y+1	; 0x01
    243e:	09 95       	icall
	i2c.Write(PCF8563WriteMode_U8);         // connect to PCF8563 by sending its ID on I2c Bus
    2440:	ec 81       	ldd	r30, Y+4	; 0x04
    2442:	fd 81       	ldd	r31, Y+5	; 0x05
    2444:	82 ea       	ldi	r24, 0xA2	; 162
    2446:	09 95       	icall
	i2c.Write(PCF8563SecondRegAddress_U8);  // Select the SEC RAM address
    2448:	ec 81       	ldd	r30, Y+4	; 0x04
    244a:	fd 81       	ldd	r31, Y+5	; 0x05
    244c:	82 e0       	ldi	r24, 0x02	; 2
    244e:	09 95       	icall
	i2c.Write(var_sec_u8);			        // Write sec from RAM address 02H
    2450:	ec 81       	ldd	r30, Y+4	; 0x04
    2452:	fd 81       	ldd	r31, Y+5	; 0x05
    2454:	81 2f       	mov	r24, r17
    2456:	09 95       	icall
	i2c.Stop();           	                // Stop I2C communication after Setting the Time
    2458:	ea 81       	ldd	r30, Y+2	; 0x02
    245a:	fb 81       	ldd	r31, Y+3	; 0x03
    245c:	09 95       	icall
}
    245e:	df 91       	pop	r29
    2460:	cf 91       	pop	r28
    2462:	1f 91       	pop	r17
    2464:	08 95       	ret

00002466 <PCF8563RTC_SetClkOut>:
/***void PCF8563RTC_SetClkOut(uint8_t onoff, uint8_t freq)***/
void PCF8563RTC_SetClkOut(uint8_t onoff, uint8_t freq)
{
    2466:	1f 93       	push	r17
    2468:	cf 93       	push	r28
    246a:	df 93       	push	r29
	uint8_t word=0;
	if(onoff)
    246c:	88 23       	and	r24, r24
    246e:	21 f0       	breq	.+8      	; 0x2478 <PCF8563RTC_SetClkOut+0x12>
		word=0x80 | (freq & 0x03);
    2470:	63 70       	andi	r22, 0x03	; 3
    2472:	16 2f       	mov	r17, r22
    2474:	10 68       	ori	r17, 0x80	; 128
    2476:	01 c0       	rjmp	.+2      	; 0x247a <PCF8563RTC_SetClkOut+0x14>
	i2c.Stop();           	                // Stop I2C communication after Setting the Time
}
/***void PCF8563RTC_SetClkOut(uint8_t onoff, uint8_t freq)***/
void PCF8563RTC_SetClkOut(uint8_t onoff, uint8_t freq)
{
	uint8_t word=0;
    2478:	10 e0       	ldi	r17, 0x00	; 0
	if(onoff)
		word=0x80 | (freq & 0x03);
	i2c.Start();                            // Start I2C communication
    247a:	ca e6       	ldi	r28, 0x6A	; 106
    247c:	d3 e0       	ldi	r29, 0x03	; 3
    247e:	e8 81       	ld	r30, Y
    2480:	f9 81       	ldd	r31, Y+1	; 0x01
    2482:	09 95       	icall
	i2c.Write(PCF8563WriteMode_U8);			// connect to PCF8563 by sending its ID on I2c Bus
    2484:	ec 81       	ldd	r30, Y+4	; 0x04
    2486:	fd 81       	ldd	r31, Y+5	; 0x05
    2488:	82 ea       	ldi	r24, 0xA2	; 162
    248a:	09 95       	icall
	i2c.Write(PCF8563CLKOUT_control_U8);	// Select the CLKOUT RAM address
    248c:	ec 81       	ldd	r30, Y+4	; 0x04
    248e:	fd 81       	ldd	r31, Y+5	; 0x05
    2490:	8d e0       	ldi	r24, 0x0D	; 13
    2492:	09 95       	icall
	i2c.Write(word);						// Write Clock from RAM address 0DH						
    2494:	ec 81       	ldd	r30, Y+4	; 0x04
    2496:	fd 81       	ldd	r31, Y+5	; 0x05
    2498:	81 2f       	mov	r24, r17
    249a:	09 95       	icall
	i2c.Stop();           	                // Stop I2C communication after Setting the Time
    249c:	ea 81       	ldd	r30, Y+2	; 0x02
    249e:	fb 81       	ldd	r31, Y+3	; 0x03
    24a0:	09 95       	icall
}
    24a2:	df 91       	pop	r29
    24a4:	cf 91       	pop	r28
    24a6:	1f 91       	pop	r17
    24a8:	08 95       	ret

000024aa <PCF8563RTC_SetDate>:
/***void PCF8563RTC_SetDate(uint8_t var_day_u8, uint8_t var_weekday_u8, uint8_t var_month_u8, uint8_t var_year_u8)***/
void PCF8563RTC_SetDate(uint8_t var_day_u8, uint8_t var_weekday_u8, uint8_t var_month_u8, uint8_t var_year_u8)
{
    24aa:	ef 92       	push	r14
    24ac:	ff 92       	push	r15
    24ae:	0f 93       	push	r16
    24b0:	1f 93       	push	r17
    24b2:	cf 93       	push	r28
    24b4:	df 93       	push	r29
    24b6:	e8 2e       	mov	r14, r24
    24b8:	f6 2e       	mov	r15, r22
    24ba:	04 2f       	mov	r16, r20
    24bc:	12 2f       	mov	r17, r18
	i2c.Start();                          // Start I2C communication
    24be:	ca e6       	ldi	r28, 0x6A	; 106
    24c0:	d3 e0       	ldi	r29, 0x03	; 3
    24c2:	e8 81       	ld	r30, Y
    24c4:	f9 81       	ldd	r31, Y+1	; 0x01
    24c6:	09 95       	icall
	i2c.Write(PCF8563WriteMode_U8);	      // connect to PCF8563 by sending its ID on I2c Bus
    24c8:	ec 81       	ldd	r30, Y+4	; 0x04
    24ca:	fd 81       	ldd	r31, Y+5	; 0x05
    24cc:	82 ea       	ldi	r24, 0xA2	; 162
    24ce:	09 95       	icall
	i2c.Write(PCF8563DayRegAddress_U8);  // Request DAY RAM address at 05H
    24d0:	ec 81       	ldd	r30, Y+4	; 0x04
    24d2:	fd 81       	ldd	r31, Y+5	; 0x05
    24d4:	85 e0       	ldi	r24, 0x05	; 5
    24d6:	09 95       	icall
	i2c.Write(var_day_u8);			      // Write date on RAM address 05H
    24d8:	ec 81       	ldd	r30, Y+4	; 0x04
    24da:	fd 81       	ldd	r31, Y+5	; 0x05
    24dc:	8e 2d       	mov	r24, r14
    24de:	09 95       	icall
	i2c.Write(var_weekday_u8);            // Write date on RAM address 06H
    24e0:	ec 81       	ldd	r30, Y+4	; 0x04
    24e2:	fd 81       	ldd	r31, Y+5	; 0x05
    24e4:	8f 2d       	mov	r24, r15
    24e6:	09 95       	icall
	i2c.Write(var_month_u8);			  // Write month on RAM address 07H
    24e8:	ec 81       	ldd	r30, Y+4	; 0x04
    24ea:	fd 81       	ldd	r31, Y+5	; 0x05
    24ec:	80 2f       	mov	r24, r16
    24ee:	09 95       	icall
	i2c.Write(var_year_u8);			      // Write year on RAM address 08h
    24f0:	ec 81       	ldd	r30, Y+4	; 0x04
    24f2:	fd 81       	ldd	r31, Y+5	; 0x05
    24f4:	81 2f       	mov	r24, r17
    24f6:	09 95       	icall
	i2c.Stop();				              // Stop I2C communication after Setting the Date
    24f8:	ea 81       	ldd	r30, Y+2	; 0x02
    24fa:	fb 81       	ldd	r31, Y+3	; 0x03
    24fc:	09 95       	icall
}
    24fe:	df 91       	pop	r29
    2500:	cf 91       	pop	r28
    2502:	1f 91       	pop	r17
    2504:	0f 91       	pop	r16
    2506:	ff 90       	pop	r15
    2508:	ef 90       	pop	r14
    250a:	08 95       	ret

0000250c <PCF8563RTC_SetYear>:
/***void PCF8563RTC_SetYear(uint8_t var_year_u8)***/
void PCF8563RTC_SetYear(uint8_t var_year_u8)
{
    250c:	1f 93       	push	r17
    250e:	cf 93       	push	r28
    2510:	df 93       	push	r29
    2512:	18 2f       	mov	r17, r24
	i2c.Start();                          // Start I2C communication
    2514:	ca e6       	ldi	r28, 0x6A	; 106
    2516:	d3 e0       	ldi	r29, 0x03	; 3
    2518:	e8 81       	ld	r30, Y
    251a:	f9 81       	ldd	r31, Y+1	; 0x01
    251c:	09 95       	icall
	i2c.Write(PCF8563WriteMode_U8);	      // connect to PCF8563 by sending its ID on I2c Bus
    251e:	ec 81       	ldd	r30, Y+4	; 0x04
    2520:	fd 81       	ldd	r31, Y+5	; 0x05
    2522:	82 ea       	ldi	r24, 0xA2	; 162
    2524:	09 95       	icall
	i2c.Write(PCF8563YearRegAddress_U8);  // Request DAY RAM address at 08H
    2526:	ec 81       	ldd	r30, Y+4	; 0x04
    2528:	fd 81       	ldd	r31, Y+5	; 0x05
    252a:	88 e0       	ldi	r24, 0x08	; 8
    252c:	09 95       	icall
	i2c.Write(var_year_u8);			      // Write year on RAM address 08h
    252e:	ec 81       	ldd	r30, Y+4	; 0x04
    2530:	fd 81       	ldd	r31, Y+5	; 0x05
    2532:	81 2f       	mov	r24, r17
    2534:	09 95       	icall
	i2c.Stop();				              // Stop I2C communication after Setting the Date
    2536:	ea 81       	ldd	r30, Y+2	; 0x02
    2538:	fb 81       	ldd	r31, Y+3	; 0x03
    253a:	09 95       	icall
}
    253c:	df 91       	pop	r29
    253e:	cf 91       	pop	r28
    2540:	1f 91       	pop	r17
    2542:	08 95       	ret

00002544 <PCF8563RTC_SetMonth>:
/***void PCF8563RTC_SetMonth(uint8_t var_month_u8)***/
void PCF8563RTC_SetMonth(uint8_t var_month_u8)
{
    2544:	1f 93       	push	r17
    2546:	cf 93       	push	r28
    2548:	df 93       	push	r29
    254a:	18 2f       	mov	r17, r24
	i2c.Start();                           // Start I2C communication
    254c:	ca e6       	ldi	r28, 0x6A	; 106
    254e:	d3 e0       	ldi	r29, 0x03	; 3
    2550:	e8 81       	ld	r30, Y
    2552:	f9 81       	ldd	r31, Y+1	; 0x01
    2554:	09 95       	icall
	i2c.Write(PCF8563WriteMode_U8);	       // connect to PCF8563 by sending its ID on I2c Bus
    2556:	ec 81       	ldd	r30, Y+4	; 0x04
    2558:	fd 81       	ldd	r31, Y+5	; 0x05
    255a:	82 ea       	ldi	r24, 0xA2	; 162
    255c:	09 95       	icall
	i2c.Write(PCF8563MonthRegAddress_U8);  // Request DAY RAM address at 07H
    255e:	ec 81       	ldd	r30, Y+4	; 0x04
    2560:	fd 81       	ldd	r31, Y+5	; 0x05
    2562:	87 e0       	ldi	r24, 0x07	; 7
    2564:	09 95       	icall
	i2c.Write(var_month_u8);			   // Write month on RAM address 07H
    2566:	ec 81       	ldd	r30, Y+4	; 0x04
    2568:	fd 81       	ldd	r31, Y+5	; 0x05
    256a:	81 2f       	mov	r24, r17
    256c:	09 95       	icall
	i2c.Stop();				               // Stop I2C communication after Setting the Date
    256e:	ea 81       	ldd	r30, Y+2	; 0x02
    2570:	fb 81       	ldd	r31, Y+3	; 0x03
    2572:	09 95       	icall
}
    2574:	df 91       	pop	r29
    2576:	cf 91       	pop	r28
    2578:	1f 91       	pop	r17
    257a:	08 95       	ret

0000257c <PCF8563RTC_SetWeekday>:
/***void PCF8563RTC_SetWeekday(uint8_t var_weekday_u8)***/
void PCF8563RTC_SetWeekday(uint8_t var_weekday_u8)
{
    257c:	1f 93       	push	r17
    257e:	cf 93       	push	r28
    2580:	df 93       	push	r29
    2582:	18 2f       	mov	r17, r24
	i2c.Start();                             // Start I2C communication
    2584:	ca e6       	ldi	r28, 0x6A	; 106
    2586:	d3 e0       	ldi	r29, 0x03	; 3
    2588:	e8 81       	ld	r30, Y
    258a:	f9 81       	ldd	r31, Y+1	; 0x01
    258c:	09 95       	icall
	i2c.Write(PCF8563WriteMode_U8);	         // connect to PCF8563 by sending its ID on I2c Bus
    258e:	ec 81       	ldd	r30, Y+4	; 0x04
    2590:	fd 81       	ldd	r31, Y+5	; 0x05
    2592:	82 ea       	ldi	r24, 0xA2	; 162
    2594:	09 95       	icall
	i2c.Write(PCF8563WeekdayRegAddress_U8);  // Request DAY RAM address at 06H
    2596:	ec 81       	ldd	r30, Y+4	; 0x04
    2598:	fd 81       	ldd	r31, Y+5	; 0x05
    259a:	86 e0       	ldi	r24, 0x06	; 6
    259c:	09 95       	icall
	i2c.Write(var_weekday_u8);               // Write date on RAM address 06H
    259e:	ec 81       	ldd	r30, Y+4	; 0x04
    25a0:	fd 81       	ldd	r31, Y+5	; 0x05
    25a2:	81 2f       	mov	r24, r17
    25a4:	09 95       	icall
	i2c.Stop();				                 // Stop I2C communication after Setting the Date
    25a6:	ea 81       	ldd	r30, Y+2	; 0x02
    25a8:	fb 81       	ldd	r31, Y+3	; 0x03
    25aa:	09 95       	icall
}
    25ac:	df 91       	pop	r29
    25ae:	cf 91       	pop	r28
    25b0:	1f 91       	pop	r17
    25b2:	08 95       	ret

000025b4 <PCF8563RTC_SetDay>:
/***void PCF8563RTC_SetDay(uint8_t var_day_u8)***/
void PCF8563RTC_SetDay(uint8_t var_day_u8)
{
    25b4:	1f 93       	push	r17
    25b6:	cf 93       	push	r28
    25b8:	df 93       	push	r29
    25ba:	18 2f       	mov	r17, r24
	i2c.Start();                          // Start I2C communication
    25bc:	ca e6       	ldi	r28, 0x6A	; 106
    25be:	d3 e0       	ldi	r29, 0x03	; 3
    25c0:	e8 81       	ld	r30, Y
    25c2:	f9 81       	ldd	r31, Y+1	; 0x01
    25c4:	09 95       	icall
	i2c.Write(PCF8563WriteMode_U8);	      // connect to PCF8563 by sending its ID on I2c Bus
    25c6:	ec 81       	ldd	r30, Y+4	; 0x04
    25c8:	fd 81       	ldd	r31, Y+5	; 0x05
    25ca:	82 ea       	ldi	r24, 0xA2	; 162
    25cc:	09 95       	icall
	i2c.Write(PCF8563DayRegAddress_U8);  // Request DAY RAM address at 05H
    25ce:	ec 81       	ldd	r30, Y+4	; 0x04
    25d0:	fd 81       	ldd	r31, Y+5	; 0x05
    25d2:	85 e0       	ldi	r24, 0x05	; 5
    25d4:	09 95       	icall
	i2c.Write(var_day_u8);			      // Write date on RAM address 05H
    25d6:	ec 81       	ldd	r30, Y+4	; 0x04
    25d8:	fd 81       	ldd	r31, Y+5	; 0x05
    25da:	81 2f       	mov	r24, r17
    25dc:	09 95       	icall
	i2c.Stop();				              // Stop I2C communication after Setting the Date
    25de:	ea 81       	ldd	r30, Y+2	; 0x02
    25e0:	fb 81       	ldd	r31, Y+3	; 0x03
    25e2:	09 95       	icall
}
    25e4:	df 91       	pop	r29
    25e6:	cf 91       	pop	r28
    25e8:	1f 91       	pop	r17
    25ea:	08 95       	ret

000025ec <PCF8563RTC_GetTime>:
/***struct time PCF8563RTC_GetTime(void)***/
struct time PCF8563RTC_GetTime(void)
{
    25ec:	ff 92       	push	r15
    25ee:	0f 93       	push	r16
    25f0:	1f 93       	push	r17
    25f2:	cf 93       	push	r28
    25f4:	df 93       	push	r29
	struct time result;
	i2c.Start();							       // Start I2C communication
    25f6:	ca e6       	ldi	r28, 0x6A	; 106
    25f8:	d3 e0       	ldi	r29, 0x03	; 3
    25fa:	e8 81       	ld	r30, Y
    25fc:	f9 81       	ldd	r31, Y+1	; 0x01
    25fe:	09 95       	icall
	i2c.Write(PCF8563WriteMode_U8);			       // connect to PCF8563 by sending its ID on I2c Bus
    2600:	ec 81       	ldd	r30, Y+4	; 0x04
    2602:	fd 81       	ldd	r31, Y+5	; 0x05
    2604:	82 ea       	ldi	r24, 0xA2	; 162
    2606:	09 95       	icall
	i2c.Write(PCF8563SecondRegAddress_U8);	       // Request Sec RAM address at 00H
    2608:	ec 81       	ldd	r30, Y+4	; 0x04
    260a:	fd 81       	ldd	r31, Y+5	; 0x05
    260c:	82 e0       	ldi	r24, 0x02	; 2
    260e:	09 95       	icall
	i2c.Stop();								       // Stop I2C communication after selecting Sec Register
    2610:	ea 81       	ldd	r30, Y+2	; 0x02
    2612:	fb 81       	ldd	r31, Y+3	; 0x03
    2614:	09 95       	icall
	i2c.Start();							       // Start I2C communication
    2616:	e8 81       	ld	r30, Y
    2618:	f9 81       	ldd	r31, Y+1	; 0x01
    261a:	09 95       	icall
	i2c.Write(PCF8563ReadMode_U8);			       // connect to PCF8563(Read mode) by sending its ID
    261c:	ec 81       	ldd	r30, Y+4	; 0x04
    261e:	fd 81       	ldd	r31, Y+5	; 0x05
    2620:	83 ea       	ldi	r24, 0xA3	; 163
    2622:	09 95       	icall
	result.VL_seconds = i2c.Read(1) & ~0x80;	   // read second and return Positive ACK
    2624:	ee 81       	ldd	r30, Y+6	; 0x06
    2626:	ff 81       	ldd	r31, Y+7	; 0x07
    2628:	81 e0       	ldi	r24, 0x01	; 1
    262a:	09 95       	icall
    262c:	f8 2e       	mov	r15, r24
	result.minutes = i2c.Read(1) & ~0x80;		   // read minute and return Positive ACK
    262e:	ee 81       	ldd	r30, Y+6	; 0x06
    2630:	ff 81       	ldd	r31, Y+7	; 0x07
    2632:	81 e0       	ldi	r24, 0x01	; 1
    2634:	09 95       	icall
    2636:	18 2f       	mov	r17, r24
	result.hours = i2c.Read(0) & ~0xC0;			   // read hour and return Negative/No ACK
    2638:	ee 81       	ldd	r30, Y+6	; 0x06
    263a:	ff 81       	ldd	r31, Y+7	; 0x07
    263c:	80 e0       	ldi	r24, 0x00	; 0
    263e:	09 95       	icall
    2640:	08 2f       	mov	r16, r24
	i2c.Stop();								       // Stop I2C communication after reading the Time
    2642:	ea 81       	ldd	r30, Y+2	; 0x02
    2644:	fb 81       	ldd	r31, Y+3	; 0x03
    2646:	09 95       	icall
	return result;
    2648:	60 2f       	mov	r22, r16
    264a:	6f 73       	andi	r22, 0x3F	; 63
    264c:	71 2f       	mov	r23, r17
    264e:	7f 77       	andi	r23, 0x7F	; 127
}
    2650:	8f 2d       	mov	r24, r15
    2652:	8f 77       	andi	r24, 0x7F	; 127
    2654:	df 91       	pop	r29
    2656:	cf 91       	pop	r28
    2658:	1f 91       	pop	r17
    265a:	0f 91       	pop	r16
    265c:	ff 90       	pop	r15
    265e:	08 95       	ret

00002660 <PCF8563RTC_GetDate>:
/***struct date PCF8563RTC_GetDate(void)***/
struct date PCF8563RTC_GetDate(void)
{
    2660:	ef 92       	push	r14
    2662:	ff 92       	push	r15
    2664:	0f 93       	push	r16
    2666:	1f 93       	push	r17
    2668:	cf 93       	push	r28
    266a:	df 93       	push	r29
	struct date result;
	i2c.Start();							        // Start I2C communication
    266c:	ca e6       	ldi	r28, 0x6A	; 106
    266e:	d3 e0       	ldi	r29, 0x03	; 3
    2670:	e8 81       	ld	r30, Y
    2672:	f9 81       	ldd	r31, Y+1	; 0x01
    2674:	09 95       	icall
	i2c.Write(PCF8563WriteMode_U8);			        // connect to PCF8563 by sending its ID on I2c Bus
    2676:	ec 81       	ldd	r30, Y+4	; 0x04
    2678:	fd 81       	ldd	r31, Y+5	; 0x05
    267a:	82 ea       	ldi	r24, 0xA2	; 162
    267c:	09 95       	icall
	i2c.Write(PCF8563DayRegAddress_U8);	            // Request DAY RAM address at 04H
    267e:	ec 81       	ldd	r30, Y+4	; 0x04
    2680:	fd 81       	ldd	r31, Y+5	; 0x05
    2682:	85 e0       	ldi	r24, 0x05	; 5
    2684:	09 95       	icall
	i2c.Stop();								        // Stop I2C communication after selecting DAY Register
    2686:	ea 81       	ldd	r30, Y+2	; 0x02
    2688:	fb 81       	ldd	r31, Y+3	; 0x03
    268a:	09 95       	icall
	i2c.Start();							        // Start I2C communication
    268c:	e8 81       	ld	r30, Y
    268e:	f9 81       	ldd	r31, Y+1	; 0x01
    2690:	09 95       	icall
	i2c.Write(PCF8563ReadMode_U8);			        // connect to PCF8563 (Read mode) by sending its ID
    2692:	ec 81       	ldd	r30, Y+4	; 0x04
    2694:	fd 81       	ldd	r31, Y+5	; 0x05
    2696:	83 ea       	ldi	r24, 0xA3	; 163
    2698:	09 95       	icall
	result.days = i2c.Read(1) & ~0xC0;				// read Day and return Positive ACK
    269a:	ee 81       	ldd	r30, Y+6	; 0x06
    269c:	ff 81       	ldd	r31, Y+7	; 0x07
    269e:	81 e0       	ldi	r24, 0x01	; 1
    26a0:	09 95       	icall
    26a2:	08 2f       	mov	r16, r24
	result.weekdays = i2c.Read(1) & ~0xF8;			// read Month and return Positive ACK
    26a4:	ee 81       	ldd	r30, Y+6	; 0x06
    26a6:	ff 81       	ldd	r31, Y+7	; 0x07
    26a8:	81 e0       	ldi	r24, 0x01	; 1
    26aa:	09 95       	icall
    26ac:	f8 2e       	mov	r15, r24
	result.century_months = i2c.Read(1) & ~0xE0;
    26ae:	ee 81       	ldd	r30, Y+6	; 0x06
    26b0:	ff 81       	ldd	r31, Y+7	; 0x07
    26b2:	81 e0       	ldi	r24, 0x01	; 1
    26b4:	09 95       	icall
    26b6:	18 2f       	mov	r17, r24
	result.years = i2c.Read(0);				        // read Year and return Negative/No ACK
    26b8:	ee 81       	ldd	r30, Y+6	; 0x06
    26ba:	ff 81       	ldd	r31, Y+7	; 0x07
    26bc:	80 e0       	ldi	r24, 0x00	; 0
    26be:	09 95       	icall
    26c0:	e8 2e       	mov	r14, r24
	i2c.Stop();								        // Stop I2C communication after reading the Date
    26c2:	ea 81       	ldd	r30, Y+2	; 0x02
    26c4:	fb 81       	ldd	r31, Y+3	; 0x03
    26c6:	09 95       	icall
	return result;
    26c8:	71 2f       	mov	r23, r17
    26ca:	7f 71       	andi	r23, 0x1F	; 31
}
    26cc:	6e 2d       	mov	r22, r14
    26ce:	8f 2d       	mov	r24, r15
    26d0:	87 70       	andi	r24, 0x07	; 7
    26d2:	90 2f       	mov	r25, r16
    26d4:	9f 73       	andi	r25, 0x3F	; 63
    26d6:	df 91       	pop	r29
    26d8:	cf 91       	pop	r28
    26da:	1f 91       	pop	r17
    26dc:	0f 91       	pop	r16
    26de:	ff 90       	pop	r15
    26e0:	ef 90       	pop	r14
    26e2:	08 95       	ret

000026e4 <PCF8563RTC_bcd2dec>:
/***uint8_t PCF8563RTC_bcd2dec(uint8_t num)***/
uint8_t PCF8563RTC_bcd2dec(uint8_t num)
{
	return ((num/16 * 10) + (num % 16));
    26e4:	98 2f       	mov	r25, r24
    26e6:	92 95       	swap	r25
    26e8:	9f 70       	andi	r25, 0x0F	; 15
    26ea:	99 0f       	add	r25, r25
    26ec:	29 2f       	mov	r18, r25
    26ee:	22 0f       	add	r18, r18
    26f0:	22 0f       	add	r18, r18
    26f2:	92 0f       	add	r25, r18
    26f4:	8f 70       	andi	r24, 0x0F	; 15
}
    26f6:	89 0f       	add	r24, r25
    26f8:	08 95       	ret

000026fa <PCF8563RTC_bintobcd>:
/***uint8_t PCF8563RTC_bintobcd(uint8_t bin)***/
uint8_t PCF8563RTC_bintobcd(uint8_t bin)
{
	return (((bin) / 10) << 4) + ((bin) % 10);
    26fa:	9d ec       	ldi	r25, 0xCD	; 205
    26fc:	89 9f       	mul	r24, r25
    26fe:	91 2d       	mov	r25, r1
    2700:	11 24       	eor	r1, r1
    2702:	96 95       	lsr	r25
    2704:	96 95       	lsr	r25
    2706:	96 95       	lsr	r25
    2708:	39 2f       	mov	r19, r25
    270a:	33 0f       	add	r19, r19
    270c:	23 2f       	mov	r18, r19
    270e:	22 0f       	add	r18, r18
    2710:	22 0f       	add	r18, r18
    2712:	23 0f       	add	r18, r19
    2714:	82 1b       	sub	r24, r18
}
    2716:	20 e1       	ldi	r18, 0x10	; 16
    2718:	92 9f       	mul	r25, r18
    271a:	80 0d       	add	r24, r0
    271c:	11 24       	eor	r1, r1
    271e:	08 95       	ret

00002720 <PCF8563RTC_Init>:
	SREG=tSREG;
	return pcf;
}
/***void PCF8563RTC_Init(uint8_t prescaler)***/
void PCF8563RTC_Init(void)
{
    2720:	cf 93       	push	r28
    2722:	df 93       	push	r29
	i2c.Start();							// Start I2C communication
    2724:	ca e6       	ldi	r28, 0x6A	; 106
    2726:	d3 e0       	ldi	r29, 0x03	; 3
    2728:	e8 81       	ld	r30, Y
    272a:	f9 81       	ldd	r31, Y+1	; 0x01
    272c:	09 95       	icall
	i2c.Write(PCF8563WriteMode_U8);			// Connect to PCF8563 by sending its ID on I2c Bus
    272e:	ec 81       	ldd	r30, Y+4	; 0x04
    2730:	fd 81       	ldd	r31, Y+5	; 0x05
    2732:	82 ea       	ldi	r24, 0xA2	; 162
    2734:	09 95       	icall
	i2c.Write(PCF8563ControlRegAddress_U8);	// Select the PCF8563 ControlRegister to configure PCF8563
    2736:	ec 81       	ldd	r30, Y+4	; 0x04
    2738:	fd 81       	ldd	r31, Y+5	; 0x05
    273a:	80 e0       	ldi	r24, 0x00	; 0
    273c:	09 95       	icall
	i2c.Write(0x00);						// Write 0x00 to Control register to disable SQW-Out
    273e:	ec 81       	ldd	r30, Y+4	; 0x04
    2740:	fd 81       	ldd	r31, Y+5	; 0x05
    2742:	80 e0       	ldi	r24, 0x00	; 0
    2744:	09 95       	icall
	i2c.Stop();								// Stop I2C communication after initializing PCF8563
    2746:	ea 81       	ldd	r30, Y+2	; 0x02
    2748:	fb 81       	ldd	r31, Y+3	; 0x03
    274a:	09 95       	icall
}
    274c:	df 91       	pop	r29
    274e:	cf 91       	pop	r28
    2750:	08 95       	ret

00002752 <PCF8563RTCenable>:
struct date PCF8563RTC_GetDate(void);
uint8_t PCF8563RTC_bcd2dec(uint8_t num);
uint8_t PCF8563RTC_bintobcd(uint8_t bin);
/***PCF8563RTC PCF8563RTCenable(uint8_t prescaler)***/
PCF8563RTC PCF8563RTCenable(uint8_t prescaler)
{
    2752:	ff 92       	push	r15
    2754:	0f 93       	push	r16
    2756:	1f 93       	push	r17
    2758:	cf 93       	push	r28
    275a:	df 93       	push	r29
    275c:	cd b7       	in	r28, 0x3d	; 61
    275e:	de b7       	in	r29, 0x3e	; 62
    2760:	2a 97       	sbiw	r28, 0x0a	; 10
    2762:	0f b6       	in	r0, 0x3f	; 63
    2764:	f8 94       	cli
    2766:	de bf       	out	0x3e, r29	; 62
    2768:	0f be       	out	0x3f, r0	; 63
    276a:	cd bf       	out	0x3d, r28	; 61
    276c:	8c 01       	movw	r16, r24
	uint8_t tSREG;
	tSREG=SREG;
    276e:	ff b6       	in	r15, 0x3f	; 63
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
    2770:	8f b7       	in	r24, 0x3f	; 63
    2772:	8f 77       	andi	r24, 0x7F	; 127
    2774:	8f bf       	out	0x3f, r24	; 63
	PCF8563RTC pcf;
	i2c = I2Cenable(prescaler);  			// Initialize the I2c module.
    2776:	ce 01       	movw	r24, r28
    2778:	01 96       	adiw	r24, 0x01	; 1
    277a:	39 d9       	rcall	.-3470   	; 0x19ee <I2Cenable>
    277c:	8a e0       	ldi	r24, 0x0A	; 10
    277e:	fe 01       	movw	r30, r28
    2780:	31 96       	adiw	r30, 0x01	; 1
    2782:	aa e6       	ldi	r26, 0x6A	; 106
    2784:	b3 e0       	ldi	r27, 0x03	; 3
    2786:	01 90       	ld	r0, Z+
    2788:	0d 92       	st	X+, r0
    278a:	8a 95       	dec	r24
    278c:	e1 f7       	brne	.-8      	; 0x2786 <PCF8563RTCenable+0x34>
	PCF8563RTC_Init();                      //Initialize RTC
    278e:	c8 df       	rcall	.-112    	; 0x2720 <PCF8563RTC_Init>
    2790:	ff be       	out	0x3f, r15	; 63
	pcf.GetTime=PCF8563RTC_GetTime;
	pcf.GetDate=PCF8563RTC_GetDate;
	pcf.bcd2dec=PCF8563RTC_bcd2dec;
	pcf.bintobcd=PCF8563RTC_bintobcd;
	/******/
	SREG=tSREG;
    2792:	85 eb       	ldi	r24, 0xB5	; 181
	return pcf;
    2794:	91 e1       	ldi	r25, 0x11	; 17
    2796:	f8 01       	movw	r30, r16
    2798:	91 83       	std	Z+1, r25	; 0x01
    279a:	80 83       	st	Z, r24
    279c:	8f ed       	ldi	r24, 0xDF	; 223
    279e:	91 e1       	ldi	r25, 0x11	; 17
    27a0:	93 83       	std	Z+3, r25	; 0x03
    27a2:	82 83       	std	Z+2, r24	; 0x02
    27a4:	8b ef       	ldi	r24, 0xFB	; 251
    27a6:	91 e1       	ldi	r25, 0x11	; 17
    27a8:	95 83       	std	Z+5, r25	; 0x05
    27aa:	84 83       	std	Z+4, r24	; 0x04
    27ac:	87 e1       	ldi	r24, 0x17	; 23
    27ae:	92 e1       	ldi	r25, 0x12	; 18
    27b0:	97 83       	std	Z+7, r25	; 0x07
    27b2:	86 83       	std	Z+6, r24	; 0x06
    27b4:	83 e3       	ldi	r24, 0x33	; 51
    27b6:	92 e1       	ldi	r25, 0x12	; 18
    27b8:	91 87       	std	Z+9, r25	; 0x09
    27ba:	80 87       	std	Z+8, r24	; 0x08
    27bc:	85 e5       	ldi	r24, 0x55	; 85
    27be:	92 e1       	ldi	r25, 0x12	; 18
    27c0:	93 87       	std	Z+11, r25	; 0x0b
    27c2:	82 87       	std	Z+10, r24	; 0x0a
    27c4:	8a ed       	ldi	r24, 0xDA	; 218
    27c6:	92 e1       	ldi	r25, 0x12	; 18
    27c8:	95 87       	std	Z+13, r25	; 0x0d
    27ca:	84 87       	std	Z+12, r24	; 0x0c
    27cc:	8e eb       	ldi	r24, 0xBE	; 190
    27ce:	92 e1       	ldi	r25, 0x12	; 18
    27d0:	97 87       	std	Z+15, r25	; 0x0f
    27d2:	86 87       	std	Z+14, r24	; 0x0e
    27d4:	82 ea       	ldi	r24, 0xA2	; 162
    27d6:	92 e1       	ldi	r25, 0x12	; 18
    27d8:	91 8b       	std	Z+17, r25	; 0x11
    27da:	80 8b       	std	Z+16, r24	; 0x10
    27dc:	86 e8       	ldi	r24, 0x86	; 134
    27de:	92 e1       	ldi	r25, 0x12	; 18
    27e0:	93 8b       	std	Z+19, r25	; 0x13
    27e2:	82 8b       	std	Z+18, r24	; 0x12
    27e4:	86 ef       	ldi	r24, 0xF6	; 246
    27e6:	92 e1       	ldi	r25, 0x12	; 18
    27e8:	95 8b       	std	Z+21, r25	; 0x15
    27ea:	84 8b       	std	Z+20, r24	; 0x14
    27ec:	80 e3       	ldi	r24, 0x30	; 48
    27ee:	93 e1       	ldi	r25, 0x13	; 19
    27f0:	97 8b       	std	Z+23, r25	; 0x17
    27f2:	86 8b       	std	Z+22, r24	; 0x16
    27f4:	82 e7       	ldi	r24, 0x72	; 114
    27f6:	93 e1       	ldi	r25, 0x13	; 19
    27f8:	91 8f       	std	Z+25, r25	; 0x19
    27fa:	80 8f       	std	Z+24, r24	; 0x18
    27fc:	8d e7       	ldi	r24, 0x7D	; 125
    27fe:	93 e1       	ldi	r25, 0x13	; 19
    2800:	93 8f       	std	Z+27, r25	; 0x1b
    2802:	82 8f       	std	Z+26, r24	; 0x1a
    2804:	c8 01       	movw	r24, r16
}
    2806:	2a 96       	adiw	r28, 0x0a	; 10
    2808:	0f b6       	in	r0, 0x3f	; 63
    280a:	f8 94       	cli
    280c:	de bf       	out	0x3e, r29	; 62
    280e:	0f be       	out	0x3f, r0	; 63
    2810:	cd bf       	out	0x3d, r28	; 61
    2812:	df 91       	pop	r29
    2814:	cf 91       	pop	r28
    2816:	1f 91       	pop	r17
    2818:	0f 91       	pop	r16
    281a:	ff 90       	pop	r15
    281c:	08 95       	ret

0000281e <PORTINIT>:
** procedure and function
*/
void PORTINIT(void)
{
	//INPUT
	DDRF=0x00;
    281e:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	PORTF=0x0F;
    2822:	8f e0       	ldi	r24, 0x0F	; 15
    2824:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	//OUTPUT
	DDRB|=(1<<5) | (1<<6) | (1<<7);
    2828:	87 b3       	in	r24, 0x17	; 23
    282a:	80 6e       	ori	r24, 0xE0	; 224
    282c:	87 bb       	out	0x17, r24	; 23
    282e:	08 95       	ret

00002830 <main>:
** Header
*/
void PORTINIT();
/****MAIN****/
int main(void)
{
    2830:	cf 93       	push	r28
    2832:	df 93       	push	r29
    2834:	cd b7       	in	r28, 0x3d	; 61
    2836:	de b7       	in	r29, 0x3e	; 62
    2838:	c3 57       	subi	r28, 0x73	; 115
    283a:	d1 40       	sbci	r29, 0x01	; 1
    283c:	0f b6       	in	r0, 0x3f	; 63
    283e:	f8 94       	cli
    2840:	de bf       	out	0x3e, r29	; 62
    2842:	0f be       	out	0x3f, r0	; 63
    2844:	cd bf       	out	0x3d, r28	; 61
	PORTINIT(); // Inic Ports
    2846:	eb df       	rcall	.-42     	; 0x281e <PORTINIT>
	/***INICIALIZE OBJECTS***/
	FUNC function= FUNCenable(); // Function Library
    2848:	ce 01       	movw	r24, r28
    284a:	8e 56       	subi	r24, 0x6E	; 110
    284c:	9f 4f       	sbci	r25, 0xFF	; 255
    284e:	0e 94 af 0b 	call	0x175e	; 0x175e <FUNCenable>
    2852:	cc 54       	subi	r28, 0x4C	; 76
    2854:	df 4f       	sbci	r29, 0xFF	; 255
    2856:	28 81       	ld	r18, Y
    2858:	39 81       	ldd	r19, Y+1	; 0x01
    285a:	c4 5b       	subi	r28, 0xB4	; 180
    285c:	d0 40       	sbci	r29, 0x00	; 0
    285e:	cf 59       	subi	r28, 0x9F	; 159
    2860:	de 4f       	sbci	r29, 0xFE	; 254
    2862:	39 83       	std	Y+1, r19	; 0x01
    2864:	28 83       	st	Y, r18
    2866:	c1 56       	subi	r28, 0x61	; 97
    2868:	d1 40       	sbci	r29, 0x01	; 1
    286a:	c2 54       	subi	r28, 0x42	; 66
    286c:	df 4f       	sbci	r29, 0xFF	; 255
    286e:	88 81       	ld	r24, Y
    2870:	99 81       	ldd	r25, Y+1	; 0x01
    2872:	ce 5b       	subi	r28, 0xBE	; 190
    2874:	d0 40       	sbci	r29, 0x00	; 0
    2876:	c0 59       	subi	r28, 0x90	; 144
    2878:	de 4f       	sbci	r29, 0xFE	; 254
    287a:	99 83       	std	Y+1, r25	; 0x01
    287c:	88 83       	st	Y, r24
    287e:	c0 57       	subi	r28, 0x70	; 112
    2880:	d1 40       	sbci	r29, 0x01	; 1
    2882:	c0 53       	subi	r28, 0x30	; 48
    2884:	df 4f       	sbci	r29, 0xFF	; 255
    2886:	a8 81       	ld	r26, Y
    2888:	b9 81       	ldd	r27, Y+1	; 0x01
    288a:	c0 5d       	subi	r28, 0xD0	; 208
    288c:	d0 40       	sbci	r29, 0x00	; 0
    288e:	c8 59       	subi	r28, 0x98	; 152
    2890:	de 4f       	sbci	r29, 0xFE	; 254
    2892:	b9 83       	std	Y+1, r27	; 0x01
    2894:	a8 83       	st	Y, r26
    2896:	c8 56       	subi	r28, 0x68	; 104
    2898:	d1 40       	sbci	r29, 0x01	; 1
	LCD0 lcd0 = LCD0enable(&DDRA,&PINA,&PORTA); // LCD Display 4X20
    289a:	2b e3       	ldi	r18, 0x3B	; 59
    289c:	30 e0       	ldi	r19, 0x00	; 0
    289e:	49 e3       	ldi	r20, 0x39	; 57
    28a0:	50 e0       	ldi	r21, 0x00	; 0
    28a2:	6a e3       	ldi	r22, 0x3A	; 58
    28a4:	70 e0       	ldi	r23, 0x00	; 0
    28a6:	ce 01       	movw	r24, r28
    28a8:	84 52       	subi	r24, 0x24	; 36
    28aa:	9f 4f       	sbci	r25, 0xFF	; 255
    28ac:	f6 dc       	rcall	.-1556   	; 0x229a <LCD0enable>
    28ae:	ce 51       	subi	r28, 0x1E	; 30
    28b0:	df 4f       	sbci	r29, 0xFF	; 255
    28b2:	48 80       	ld	r4, Y
    28b4:	59 80       	ldd	r5, Y+1	; 0x01
    28b6:	c2 5e       	subi	r28, 0xE2	; 226
    28b8:	d0 40       	sbci	r29, 0x00	; 0
    28ba:	c8 51       	subi	r28, 0x18	; 24
    28bc:	df 4f       	sbci	r29, 0xFF	; 255
    28be:	88 80       	ld	r8, Y
    28c0:	99 80       	ldd	r9, Y+1	; 0x01
    28c2:	c8 5e       	subi	r28, 0xE8	; 232
    28c4:	d0 40       	sbci	r29, 0x00	; 0
    28c6:	c4 51       	subi	r28, 0x14	; 20
    28c8:	df 4f       	sbci	r29, 0xFF	; 255
    28ca:	e8 81       	ld	r30, Y
    28cc:	f9 81       	ldd	r31, Y+1	; 0x01
    28ce:	cc 5e       	subi	r28, 0xEC	; 236
    28d0:	d0 40       	sbci	r29, 0x00	; 0
    28d2:	c1 5a       	subi	r28, 0xA1	; 161
    28d4:	de 4f       	sbci	r29, 0xFE	; 254
    28d6:	f9 83       	std	Y+1, r31	; 0x01
    28d8:	e8 83       	st	Y, r30
    28da:	cf 55       	subi	r28, 0x5F	; 95
    28dc:	d1 40       	sbci	r29, 0x01	; 1
    28de:	c2 51       	subi	r28, 0x12	; 18
    28e0:	df 4f       	sbci	r29, 0xFF	; 255
    28e2:	68 80       	ld	r6, Y
    28e4:	79 80       	ldd	r7, Y+1	; 0x01
    28e6:	ce 5e       	subi	r28, 0xEE	; 238
    28e8:	d0 40       	sbci	r29, 0x00	; 0
	KEYPAD keypad = KEYPADenable(&DDRE,&PINE,&PORTE); // Keyboard
    28ea:	43 e2       	ldi	r20, 0x23	; 35
    28ec:	50 e0       	ldi	r21, 0x00	; 0
    28ee:	61 e2       	ldi	r22, 0x21	; 33
    28f0:	70 e0       	ldi	r23, 0x00	; 0
    28f2:	82 e2       	ldi	r24, 0x22	; 34
    28f4:	90 e0       	ldi	r25, 0x00	; 0
    28f6:	52 da       	rcall	.-2908   	; 0x1d9c <KEYPADenable>
    28f8:	ce 50       	subi	r28, 0x0E	; 14
    28fa:	df 4f       	sbci	r29, 0xFF	; 255
    28fc:	28 83       	st	Y, r18
    28fe:	c2 5f       	subi	r28, 0xF2	; 242
    2900:	d0 40       	sbci	r29, 0x00	; 0
    2902:	cd 50       	subi	r28, 0x0D	; 13
    2904:	df 4f       	sbci	r29, 0xFF	; 255
    2906:	38 83       	st	Y, r19
    2908:	c3 5f       	subi	r28, 0xF3	; 243
    290a:	d0 40       	sbci	r29, 0x00	; 0
    290c:	cc 50       	subi	r28, 0x0C	; 12
    290e:	df 4f       	sbci	r29, 0xFF	; 255
    2910:	48 83       	st	Y, r20
    2912:	c4 5f       	subi	r28, 0xF4	; 244
    2914:	d0 40       	sbci	r29, 0x00	; 0
    2916:	cb 50       	subi	r28, 0x0B	; 11
    2918:	df 4f       	sbci	r29, 0xFF	; 255
    291a:	58 83       	st	Y, r21
    291c:	c5 5f       	subi	r28, 0xF5	; 245
    291e:	d0 40       	sbci	r29, 0x00	; 0
    2920:	ca 50       	subi	r28, 0x0A	; 10
    2922:	df 4f       	sbci	r29, 0xFF	; 255
    2924:	68 83       	st	Y, r22
    2926:	c6 5f       	subi	r28, 0xF6	; 246
    2928:	d0 40       	sbci	r29, 0x00	; 0
    292a:	c9 50       	subi	r28, 0x09	; 9
    292c:	df 4f       	sbci	r29, 0xFF	; 255
    292e:	78 83       	st	Y, r23
    2930:	c7 5f       	subi	r28, 0xF7	; 247
    2932:	d0 40       	sbci	r29, 0x00	; 0
    2934:	c8 50       	subi	r28, 0x08	; 8
    2936:	df 4f       	sbci	r29, 0xFF	; 255
    2938:	88 83       	st	Y, r24
    293a:	c8 5f       	subi	r28, 0xF8	; 248
    293c:	d0 40       	sbci	r29, 0x00	; 0
    293e:	c7 50       	subi	r28, 0x07	; 7
    2940:	df 4f       	sbci	r29, 0xFF	; 255
    2942:	98 83       	st	Y, r25
    2944:	c9 5f       	subi	r28, 0xF9	; 249
    2946:	d0 40       	sbci	r29, 0x00	; 0
    2948:	ca 50       	subi	r28, 0x0A	; 10
    294a:	df 4f       	sbci	r29, 0xFF	; 255
    294c:	28 80       	ld	r2, Y
    294e:	39 80       	ldd	r3, Y+1	; 0x01
    2950:	c6 5f       	subi	r28, 0xF6	; 246
    2952:	d0 40       	sbci	r29, 0x00	; 0
    2954:	c8 50       	subi	r28, 0x08	; 8
    2956:	df 4f       	sbci	r29, 0xFF	; 255
    2958:	28 81       	ld	r18, Y
    295a:	39 81       	ldd	r19, Y+1	; 0x01
    295c:	c8 5f       	subi	r28, 0xF8	; 248
    295e:	d0 40       	sbci	r29, 0x00	; 0
    2960:	c3 5a       	subi	r28, 0xA3	; 163
    2962:	de 4f       	sbci	r29, 0xFE	; 254
    2964:	39 83       	std	Y+1, r19	; 0x01
    2966:	28 83       	st	Y, r18
    2968:	cd 55       	subi	r28, 0x5D	; 93
    296a:	d1 40       	sbci	r29, 0x01	; 1
	ANALOG analog = ANALOGenable(1, 128, 1, 0); // Channel 0 for Position
    296c:	1f 92       	push	r1
    296e:	1f 92       	push	r1
    2970:	1f 92       	push	r1
    2972:	81 e0       	ldi	r24, 0x01	; 1
    2974:	8f 93       	push	r24
    2976:	90 e8       	ldi	r25, 0x80	; 128
    2978:	9f 93       	push	r25
    297a:	8f 93       	push	r24
    297c:	0e 94 6f 01 	call	0x2de	; 0x2de <ANALOGenable>
    2980:	c4 59       	subi	r28, 0x94	; 148
    2982:	de 4f       	sbci	r29, 0xFE	; 254
    2984:	68 83       	st	Y, r22
    2986:	79 83       	std	Y+1, r23	; 0x01
    2988:	8a 83       	std	Y+2, r24	; 0x02
    298a:	9b 83       	std	Y+3, r25	; 0x03
    298c:	cc 56       	subi	r28, 0x6C	; 108
    298e:	d1 40       	sbci	r29, 0x01	; 1
	TIMER_COUNTER0 timer0 = TIMER_COUNTER0enable(2,2); // 1Hz to HC595
    2990:	42 e0       	ldi	r20, 0x02	; 2
    2992:	62 e0       	ldi	r22, 0x02	; 2
    2994:	ce 01       	movw	r24, r28
    2996:	86 50       	subi	r24, 0x06	; 6
    2998:	9f 4f       	sbci	r25, 0xFF	; 255
    299a:	0e 94 8f 03 	call	0x71e	; 0x71e <TIMER_COUNTER0enable>
	TIMER_COUNTER1 timer1 = TIMER_COUNTER1enable(9,0); // PWM Positioning
    299e:	40 e0       	ldi	r20, 0x00	; 0
    29a0:	69 e0       	ldi	r22, 0x09	; 9
    29a2:	ce 01       	movw	r24, r28
    29a4:	86 5f       	subi	r24, 0xF6	; 246
    29a6:	9e 4f       	sbci	r25, 0xFE	; 254
    29a8:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <TIMER_COUNTER1enable>
    29ac:	ce 5e       	subi	r28, 0xEE	; 238
    29ae:	de 4f       	sbci	r29, 0xFE	; 254
    29b0:	88 81       	ld	r24, Y
    29b2:	99 81       	ldd	r25, Y+1	; 0x01
    29b4:	c2 51       	subi	r28, 0x12	; 18
    29b6:	d1 40       	sbci	r29, 0x01	; 1
    29b8:	c6 59       	subi	r28, 0x96	; 150
    29ba:	de 4f       	sbci	r29, 0xFE	; 254
    29bc:	99 83       	std	Y+1, r25	; 0x01
    29be:	88 83       	st	Y, r24
    29c0:	ca 56       	subi	r28, 0x6A	; 106
    29c2:	d1 40       	sbci	r29, 0x01	; 1
	PCF8563RTC rtc = PCF8563RTCenable(16); // RTC with I2C
    29c4:	60 e1       	ldi	r22, 0x10	; 16
    29c6:	ce 01       	movw	r24, r28
    29c8:	86 5e       	subi	r24, 0xE6	; 230
    29ca:	9e 4f       	sbci	r25, 0xFE	; 254
    29cc:	c2 de       	rcall	.-636    	; 0x2752 <PCF8563RTCenable>
    29ce:	ce 5c       	subi	r28, 0xCE	; 206
    29d0:	de 4f       	sbci	r29, 0xFE	; 254
    29d2:	a8 81       	ld	r26, Y
    29d4:	b9 81       	ldd	r27, Y+1	; 0x01
    29d6:	c2 53       	subi	r28, 0x32	; 50
    29d8:	d1 40       	sbci	r29, 0x01	; 1
    29da:	cd 59       	subi	r28, 0x9D	; 157
    29dc:	de 4f       	sbci	r29, 0xFE	; 254
    29de:	b9 83       	std	Y+1, r27	; 0x01
    29e0:	a8 83       	st	Y, r26
    29e2:	c3 56       	subi	r28, 0x63	; 99
    29e4:	d1 40       	sbci	r29, 0x01	; 1
    29e6:	cc 5c       	subi	r28, 0xCC	; 204
    29e8:	de 4f       	sbci	r29, 0xFE	; 254
    29ea:	e8 81       	ld	r30, Y
    29ec:	f9 81       	ldd	r31, Y+1	; 0x01
    29ee:	c4 53       	subi	r28, 0x34	; 52
    29f0:	d1 40       	sbci	r29, 0x01	; 1
    29f2:	ce 58       	subi	r28, 0x8E	; 142
    29f4:	de 4f       	sbci	r29, 0xFE	; 254
    29f6:	f9 83       	std	Y+1, r31	; 0x01
    29f8:	e8 83       	st	Y, r30
    29fa:	c2 57       	subi	r28, 0x72	; 114
    29fc:	d1 40       	sbci	r29, 0x01	; 1
	shift = HC595enable(&DDRG,&PORTG,2,0,1);
    29fe:	01 e0       	ldi	r16, 0x01	; 1
    2a00:	20 e0       	ldi	r18, 0x00	; 0
    2a02:	42 e0       	ldi	r20, 0x02	; 2
    2a04:	65 e6       	ldi	r22, 0x65	; 101
    2a06:	70 e0       	ldi	r23, 0x00	; 0
    2a08:	84 e6       	ldi	r24, 0x64	; 100
    2a0a:	90 e0       	ldi	r25, 0x00	; 0
    2a0c:	0e 94 0c 01 	call	0x218	; 0x218 <HC595enable>
    2a10:	20 93 74 03 	sts	0x0374, r18	; 0x800374 <shift>
    2a14:	30 93 75 03 	sts	0x0375, r19	; 0x800375 <shift+0x1>
    2a18:	40 93 76 03 	sts	0x0376, r20	; 0x800376 <shift+0x2>
    2a1c:	50 93 77 03 	sts	0x0377, r21	; 0x800377 <shift+0x3>
    2a20:	60 93 78 03 	sts	0x0378, r22	; 0x800378 <shift+0x4>
    2a24:	70 93 79 03 	sts	0x0379, r23	; 0x800379 <shift+0x5>
	uart = UART1enable(103,8,1,NONE);//UART 103 para 9600, 68 para 14400
    2a28:	00 e0       	ldi	r16, 0x00	; 0
    2a2a:	10 e0       	ldi	r17, 0x00	; 0
    2a2c:	21 e0       	ldi	r18, 0x01	; 1
    2a2e:	30 e0       	ldi	r19, 0x00	; 0
    2a30:	48 e0       	ldi	r20, 0x08	; 8
    2a32:	50 e0       	ldi	r21, 0x00	; 0
    2a34:	67 e6       	ldi	r22, 0x67	; 103
    2a36:	70 e0       	ldi	r23, 0x00	; 0
    2a38:	ce 01       	movw	r24, r28
    2a3a:	88 5b       	subi	r24, 0xB8	; 184
    2a3c:	9e 4f       	sbci	r25, 0xFE	; 254
    2a3e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <UART1enable>
    2a42:	84 e1       	ldi	r24, 0x14	; 20
    2a44:	fe 01       	movw	r30, r28
    2a46:	e8 5b       	subi	r30, 0xB8	; 184
    2a48:	fe 4f       	sbci	r31, 0xFE	; 254
    2a4a:	a1 e8       	ldi	r26, 0x81	; 129
    2a4c:	b3 e0       	ldi	r27, 0x03	; 3
    2a4e:	01 90       	ld	r0, Z+
    2a50:	0d 92       	st	X+, r0
    2a52:	8a 95       	dec	r24
    2a54:	e1 f7       	brne	.-8      	; 0x2a4e <main+0x21e>
	/******/
	char Menu='1'; // Main menu selector
	int16_t adcvalue; // analog reading
	char str[6]="0"; // analog vector
    2a56:	ce 01       	movw	r24, r28
    2a58:	8a 5c       	subi	r24, 0xCA	; 202
    2a5a:	9e 4f       	sbci	r25, 0xFE	; 254
    2a5c:	fc 01       	movw	r30, r24
    2a5e:	20 e3       	ldi	r18, 0x30	; 48
    2a60:	30 e0       	ldi	r19, 0x00	; 0
    2a62:	21 93       	st	Z+, r18
    2a64:	31 93       	st	Z+, r19
    2a66:	24 e0       	ldi	r18, 0x04	; 4
    2a68:	df 01       	movw	r26, r30
    2a6a:	1d 92       	st	X+, r1
    2a6c:	2a 95       	dec	r18
    2a6e:	e9 f7       	brne	.-6      	; 0x2a6a <main+0x23a>
	int16_t mvalue=90; // manual position reading
	int16_t m_value; // manual positioning
	char mstr[6]="90"; // manual position vector
    2a70:	29 e3       	ldi	r18, 0x39	; 57
    2a72:	30 e3       	ldi	r19, 0x30	; 48
    2a74:	c4 5c       	subi	r28, 0xC4	; 196
    2a76:	de 4f       	sbci	r29, 0xFE	; 254
    2a78:	39 83       	std	Y+1, r19	; 0x01
    2a7a:	28 83       	st	Y, r18
    2a7c:	cc 53       	subi	r28, 0x3C	; 60
    2a7e:	d1 40       	sbci	r29, 0x01	; 1
    2a80:	c2 5c       	subi	r28, 0xC2	; 194
    2a82:	de 4f       	sbci	r29, 0xFE	; 254
    2a84:	19 82       	std	Y+1, r1	; 0x01
    2a86:	18 82       	st	Y, r1
    2a88:	ce 53       	subi	r28, 0x3E	; 62
    2a8a:	d1 40       	sbci	r29, 0x01	; 1
    2a8c:	c0 5c       	subi	r28, 0xC0	; 192
    2a8e:	de 4f       	sbci	r29, 0xFE	; 254
    2a90:	19 82       	std	Y+1, r1	; 0x01
    2a92:	18 82       	st	Y, r1
    2a94:	c0 54       	subi	r28, 0x40	; 64
    2a96:	d1 40       	sbci	r29, 0x01	; 1
	char tstr[6]; // time vector
	char cal='0'; // Sub Menu for setting up date and time
	uint16_t set;
	ptr=str;
    2a98:	90 93 ac 02 	sts	0x02AC, r25	; 0x8002ac <ptr+0x1>
    2a9c:	80 93 ab 02 	sts	0x02AB, r24	; 0x8002ab <ptr>
	/***Parameters timers***/
	timer0.compare(249);
    2aa0:	c0 50       	subi	r28, 0x00	; 0
    2aa2:	df 4f       	sbci	r29, 0xFF	; 255
    2aa4:	e8 81       	ld	r30, Y
    2aa6:	f9 81       	ldd	r31, Y+1	; 0x01
    2aa8:	c0 50       	subi	r28, 0x00	; 0
    2aaa:	d1 40       	sbci	r29, 0x01	; 1
    2aac:	89 ef       	ldi	r24, 0xF9	; 249
    2aae:	09 95       	icall
	timer0.start(64);
    2ab0:	ca 5f       	subi	r28, 0xFA	; 250
    2ab2:	de 4f       	sbci	r29, 0xFE	; 254
    2ab4:	e8 81       	ld	r30, Y
    2ab6:	f9 81       	ldd	r31, Y+1	; 0x01
    2ab8:	c6 50       	subi	r28, 0x06	; 6
    2aba:	d1 40       	sbci	r29, 0x01	; 1
    2abc:	80 e4       	ldi	r24, 0x40	; 64
    2abe:	90 e0       	ldi	r25, 0x00	; 0
    2ac0:	09 95       	icall
	timer1.compoutmodeB(2);
    2ac2:	c4 5f       	subi	r28, 0xF4	; 244
    2ac4:	de 4f       	sbci	r29, 0xFE	; 254
    2ac6:	e8 81       	ld	r30, Y
    2ac8:	f9 81       	ldd	r31, Y+1	; 0x01
    2aca:	cc 50       	subi	r28, 0x0C	; 12
    2acc:	d1 40       	sbci	r29, 0x01	; 1
    2ace:	82 e0       	ldi	r24, 0x02	; 2
    2ad0:	09 95       	icall
	timer1.compareA(20000);
    2ad2:	c0 5f       	subi	r28, 0xF0	; 240
    2ad4:	de 4f       	sbci	r29, 0xFE	; 254
    2ad6:	e8 81       	ld	r30, Y
    2ad8:	f9 81       	ldd	r31, Y+1	; 0x01
    2ada:	c0 51       	subi	r28, 0x10	; 16
    2adc:	d1 40       	sbci	r29, 0x01	; 1
    2ade:	80 e2       	ldi	r24, 0x20	; 32
    2ae0:	9e e4       	ldi	r25, 0x4E	; 78
    2ae2:	09 95       	icall
	timer1.start(8);
    2ae4:	ca 5e       	subi	r28, 0xEA	; 234
    2ae6:	de 4f       	sbci	r29, 0xFE	; 254
    2ae8:	e8 81       	ld	r30, Y
    2aea:	f9 81       	ldd	r31, Y+1	; 0x01
    2aec:	c6 51       	subi	r28, 0x16	; 22
    2aee:	d1 40       	sbci	r29, 0x01	; 1
    2af0:	88 e0       	ldi	r24, 0x08	; 8
    2af2:	90 e0       	ldi	r25, 0x00	; 0
    2af4:	09 95       	icall
	rtc.SetClkOut(1, 2); // oscillate pin at 1 sec
    2af6:	ce 5d       	subi	r28, 0xDE	; 222
    2af8:	de 4f       	sbci	r29, 0xFE	; 254
    2afa:	e8 81       	ld	r30, Y
    2afc:	f9 81       	ldd	r31, Y+1	; 0x01
    2afe:	c2 52       	subi	r28, 0x22	; 34
    2b00:	d1 40       	sbci	r29, 0x01	; 1
    2b02:	62 e0       	ldi	r22, 0x02	; 2
    2b04:	81 e0       	ldi	r24, 0x01	; 1
    2b06:	09 95       	icall
    2b08:	0f 90       	pop	r0
    2b0a:	0f 90       	pop	r0
    2b0c:	0f 90       	pop	r0
    2b0e:	0f 90       	pop	r0
    2b10:	0f 90       	pop	r0
    2b12:	0f 90       	pop	r0
	char str[6]="0"; // analog vector
	int16_t mvalue=90; // manual position reading
	int16_t m_value; // manual positioning
	char mstr[6]="90"; // manual position vector
	char tstr[6]; // time vector
	char cal='0'; // Sub Menu for setting up date and time
    2b14:	b0 e3       	ldi	r27, 0x30	; 48
    2b16:	c9 59       	subi	r28, 0x99	; 153
    2b18:	de 4f       	sbci	r29, 0xFE	; 254
    2b1a:	b8 83       	st	Y, r27
    2b1c:	c7 56       	subi	r28, 0x67	; 103
    2b1e:	d1 40       	sbci	r29, 0x01	; 1
	TIMER_COUNTER1 timer1 = TIMER_COUNTER1enable(9,0); // PWM Positioning
	PCF8563RTC rtc = PCF8563RTCenable(16); // RTC with I2C
	shift = HC595enable(&DDRG,&PORTG,2,0,1);
	uart = UART1enable(103,8,1,NONE);//UART 103 para 9600, 68 para 14400
	/******/
	char Menu='1'; // Main menu selector
    2b20:	e1 e3       	ldi	r30, 0x31	; 49
    2b22:	c4 5a       	subi	r28, 0xA4	; 164
    2b24:	de 4f       	sbci	r29, 0xFE	; 254
    2b26:	e8 83       	st	Y, r30
    2b28:	cc 55       	subi	r28, 0x5C	; 92
    2b2a:	d1 40       	sbci	r29, 0x01	; 1
    2b2c:	06 c0       	rjmp	.+12     	; 0x2b3a <main+0x30a>
								}
								keypad.flush();
							}
						break;
						default:
							cal='0';
    2b2e:	f0 e3       	ldi	r31, 0x30	; 48
    2b30:	c9 59       	subi	r28, 0x99	; 153
    2b32:	de 4f       	sbci	r29, 0xFE	; 254
    2b34:	f8 83       	st	Y, r31
    2b36:	c7 56       	subi	r28, 0x67	; 103
    2b38:	d1 40       	sbci	r29, 0x01	; 1
    2b3a:	c4 5a       	subi	r28, 0xA4	; 164
    2b3c:	de 4f       	sbci	r29, 0xFE	; 254
    2b3e:	18 81       	ld	r17, Y
    2b40:	cc 55       	subi	r28, 0x5C	; 92
    2b42:	d1 40       	sbci	r29, 0x01	; 1
    2b44:	01 c0       	rjmp	.+2      	; 0x2b48 <main+0x318>
						break;
					};
				break;
				/********************************************************************/
			default:
				Menu='1';
    2b46:	11 e3       	ldi	r17, 0x31	; 49
	rtc.SetClkOut(1, 2); // oscillate pin at 1 sec
	/**********/
	//TODO:: Please write your application code
	while(TRUE){
		/***PREAMBLE***/
		lcd0.reboot();
    2b48:	c0 51       	subi	r28, 0x10	; 16
    2b4a:	df 4f       	sbci	r29, 0xFF	; 255
    2b4c:	e8 81       	ld	r30, Y
    2b4e:	f9 81       	ldd	r31, Y+1	; 0x01
    2b50:	c0 5f       	subi	r28, 0xF0	; 240
    2b52:	d0 40       	sbci	r29, 0x00	; 0
    2b54:	09 95       	icall
		keypad.read();
    2b56:	cc 50       	subi	r28, 0x0C	; 12
    2b58:	df 4f       	sbci	r29, 0xFF	; 255
    2b5a:	e8 81       	ld	r30, Y
    2b5c:	f9 81       	ldd	r31, Y+1	; 0x01
    2b5e:	c4 5f       	subi	r28, 0xF4	; 244
    2b60:	d0 40       	sbci	r29, 0x00	; 0
    2b62:	09 95       	icall
		uartreceive=uart.read();
    2b64:	e0 91 89 03 	lds	r30, 0x0389	; 0x800389 <uart+0x8>
    2b68:	f0 91 8a 03 	lds	r31, 0x038A	; 0x80038a <uart+0x9>
    2b6c:	09 95       	icall
    2b6e:	90 93 aa 02 	sts	0x02AA, r25	; 0x8002aa <uartreceive+0x1>
    2b72:	80 93 a9 02 	sts	0x02A9, r24	; 0x8002a9 <uartreceive>
		/***Reading input***/
		lcd0.gotoxy(3,13);
    2b76:	6d e0       	ldi	r22, 0x0D	; 13
    2b78:	70 e0       	ldi	r23, 0x00	; 0
    2b7a:	83 e0       	ldi	r24, 0x03	; 3
    2b7c:	90 e0       	ldi	r25, 0x00	; 0
    2b7e:	f3 01       	movw	r30, r6
    2b80:	09 95       	icall
		lcd0.putch(':');
    2b82:	8a e3       	ldi	r24, 0x3A	; 58
    2b84:	f2 01       	movw	r30, r4
    2b86:	09 95       	icall
		lcd0.string_size(keypad.get().printstring,6);
    2b88:	f1 01       	movw	r30, r2
    2b8a:	09 95       	icall
    2b8c:	c2 57       	subi	r28, 0x72	; 114
    2b8e:	df 4f       	sbci	r29, 0xFF	; 255
    2b90:	38 83       	st	Y, r19
    2b92:	ce 58       	subi	r28, 0x8E	; 142
    2b94:	d0 40       	sbci	r29, 0x00	; 0
    2b96:	c1 57       	subi	r28, 0x71	; 113
    2b98:	df 4f       	sbci	r29, 0xFF	; 255
    2b9a:	48 83       	st	Y, r20
    2b9c:	cf 58       	subi	r28, 0x8F	; 143
    2b9e:	d0 40       	sbci	r29, 0x00	; 0
    2ba0:	66 e0       	ldi	r22, 0x06	; 6
    2ba2:	c2 57       	subi	r28, 0x72	; 114
    2ba4:	df 4f       	sbci	r29, 0xFF	; 255
    2ba6:	88 81       	ld	r24, Y
    2ba8:	99 81       	ldd	r25, Y+1	; 0x01
    2baa:	ce 58       	subi	r28, 0x8E	; 142
    2bac:	d0 40       	sbci	r29, 0x00	; 0
    2bae:	f4 01       	movw	r30, r8
    2bb0:	09 95       	icall
		lcd0.gotoxy(2,0);
    2bb2:	60 e0       	ldi	r22, 0x00	; 0
    2bb4:	70 e0       	ldi	r23, 0x00	; 0
    2bb6:	82 e0       	ldi	r24, 0x02	; 2
    2bb8:	90 e0       	ldi	r25, 0x00	; 0
    2bba:	f3 01       	movw	r30, r6
    2bbc:	09 95       	icall
		lcd0.string_size(uartreceive,20);
    2bbe:	64 e1       	ldi	r22, 0x14	; 20
    2bc0:	80 91 a9 02 	lds	r24, 0x02A9	; 0x8002a9 <uartreceive>
    2bc4:	90 91 aa 02 	lds	r25, 0x02AA	; 0x8002aa <uartreceive+0x1>
    2bc8:	f4 01       	movw	r30, r8
    2bca:	09 95       	icall
		/***ENTRY END***/
		switch(Menu){
    2bcc:	12 33       	cpi	r17, 0x32	; 50
    2bce:	09 f4       	brne	.+2      	; 0x2bd2 <main+0x3a2>
    2bd0:	78 c1       	rjmp	.+752    	; 0x2ec2 <main+0x692>
    2bd2:	13 33       	cpi	r17, 0x33	; 51
    2bd4:	09 f4       	brne	.+2      	; 0x2bd8 <main+0x3a8>
    2bd6:	80 c2       	rjmp	.+1280   	; 0x30d8 <main+0x8a8>
    2bd8:	11 33       	cpi	r17, 0x31	; 49
    2bda:	09 f0       	breq	.+2      	; 0x2bde <main+0x3ae>
    2bdc:	b4 cf       	rjmp	.-152    	; 0x2b46 <main+0x316>
    2bde:	c4 5a       	subi	r28, 0xA4	; 164
    2be0:	de 4f       	sbci	r29, 0xFE	; 254
    2be2:	18 83       	st	Y, r17
    2be4:	cc 55       	subi	r28, 0x5C	; 92
    2be6:	d1 40       	sbci	r29, 0x01	; 1
			/***MENU 1***/
			case '1': // Main Program Menu
				if(!strcmp(keypad.get().string,"A")){Menu='2';keypad.flush();lcd0.clear();break;}
    2be8:	f1 01       	movw	r30, r2
    2bea:	09 95       	icall
    2bec:	c5 57       	subi	r28, 0x75	; 117
    2bee:	df 4f       	sbci	r29, 0xFF	; 255
    2bf0:	58 83       	st	Y, r21
    2bf2:	cb 58       	subi	r28, 0x8B	; 139
    2bf4:	d0 40       	sbci	r29, 0x00	; 0
    2bf6:	c4 57       	subi	r28, 0x74	; 116
    2bf8:	df 4f       	sbci	r29, 0xFF	; 255
    2bfa:	68 83       	st	Y, r22
    2bfc:	cc 58       	subi	r28, 0x8C	; 140
    2bfe:	d0 40       	sbci	r29, 0x00	; 0
    2c00:	64 e1       	ldi	r22, 0x14	; 20
    2c02:	71 e0       	ldi	r23, 0x01	; 1
    2c04:	c5 57       	subi	r28, 0x75	; 117
    2c06:	df 4f       	sbci	r29, 0xFF	; 255
    2c08:	88 81       	ld	r24, Y
    2c0a:	99 81       	ldd	r25, Y+1	; 0x01
    2c0c:	cb 58       	subi	r28, 0x8B	; 139
    2c0e:	d0 40       	sbci	r29, 0x00	; 0
    2c10:	7b d7       	rcall	.+3830   	; 0x3b08 <strcmp>
    2c12:	89 2b       	or	r24, r25
    2c14:	a9 f4       	brne	.+42     	; 0x2c40 <main+0x410>
    2c16:	c3 5a       	subi	r28, 0xA3	; 163
    2c18:	de 4f       	sbci	r29, 0xFE	; 254
    2c1a:	e8 81       	ld	r30, Y
    2c1c:	f9 81       	ldd	r31, Y+1	; 0x01
    2c1e:	cd 55       	subi	r28, 0x5D	; 93
    2c20:	d1 40       	sbci	r29, 0x01	; 1
    2c22:	09 95       	icall
    2c24:	c1 5a       	subi	r28, 0xA1	; 161
    2c26:	de 4f       	sbci	r29, 0xFE	; 254
    2c28:	e8 81       	ld	r30, Y
    2c2a:	f9 81       	ldd	r31, Y+1	; 0x01
    2c2c:	cf 55       	subi	r28, 0x5F	; 95
    2c2e:	d1 40       	sbci	r29, 0x01	; 1
    2c30:	09 95       	icall
    2c32:	f2 e3       	ldi	r31, 0x32	; 50
    2c34:	c4 5a       	subi	r28, 0xA4	; 164
    2c36:	de 4f       	sbci	r29, 0xFE	; 254
    2c38:	f8 83       	st	Y, r31
    2c3a:	cc 55       	subi	r28, 0x5C	; 92
    2c3c:	d1 40       	sbci	r29, 0x01	; 1
    2c3e:	7d cf       	rjmp	.-262    	; 0x2b3a <main+0x30a>
				if(!strcmp(keypad.get().string,"B")){Menu='3';keypad.flush();lcd0.clear();break;}
    2c40:	f1 01       	movw	r30, r2
    2c42:	09 95       	icall
    2c44:	ca 57       	subi	r28, 0x7A	; 122
    2c46:	df 4f       	sbci	r29, 0xFF	; 255
    2c48:	58 83       	st	Y, r21
    2c4a:	c6 58       	subi	r28, 0x86	; 134
    2c4c:	d0 40       	sbci	r29, 0x00	; 0
    2c4e:	c9 57       	subi	r28, 0x79	; 121
    2c50:	df 4f       	sbci	r29, 0xFF	; 255
    2c52:	68 83       	st	Y, r22
    2c54:	c7 58       	subi	r28, 0x87	; 135
    2c56:	d0 40       	sbci	r29, 0x00	; 0
    2c58:	66 e1       	ldi	r22, 0x16	; 22
    2c5a:	71 e0       	ldi	r23, 0x01	; 1
    2c5c:	ca 57       	subi	r28, 0x7A	; 122
    2c5e:	df 4f       	sbci	r29, 0xFF	; 255
    2c60:	88 81       	ld	r24, Y
    2c62:	99 81       	ldd	r25, Y+1	; 0x01
    2c64:	c6 58       	subi	r28, 0x86	; 134
    2c66:	d0 40       	sbci	r29, 0x00	; 0
    2c68:	4f d7       	rcall	.+3742   	; 0x3b08 <strcmp>
    2c6a:	89 2b       	or	r24, r25
    2c6c:	a9 f4       	brne	.+42     	; 0x2c98 <main+0x468>
    2c6e:	c3 5a       	subi	r28, 0xA3	; 163
    2c70:	de 4f       	sbci	r29, 0xFE	; 254
    2c72:	e8 81       	ld	r30, Y
    2c74:	f9 81       	ldd	r31, Y+1	; 0x01
    2c76:	cd 55       	subi	r28, 0x5D	; 93
    2c78:	d1 40       	sbci	r29, 0x01	; 1
    2c7a:	09 95       	icall
    2c7c:	c1 5a       	subi	r28, 0xA1	; 161
    2c7e:	de 4f       	sbci	r29, 0xFE	; 254
    2c80:	e8 81       	ld	r30, Y
    2c82:	f9 81       	ldd	r31, Y+1	; 0x01
    2c84:	cf 55       	subi	r28, 0x5F	; 95
    2c86:	d1 40       	sbci	r29, 0x01	; 1
    2c88:	09 95       	icall
    2c8a:	f3 e3       	ldi	r31, 0x33	; 51
    2c8c:	c4 5a       	subi	r28, 0xA4	; 164
    2c8e:	de 4f       	sbci	r29, 0xFE	; 254
    2c90:	f8 83       	st	Y, r31
    2c92:	cc 55       	subi	r28, 0x5C	; 92
    2c94:	d1 40       	sbci	r29, 0x01	; 1
    2c96:	51 cf       	rjmp	.-350    	; 0x2b3a <main+0x30a>
					/***RTC***/
					tm=rtc.GetTime();
    2c98:	c2 5d       	subi	r28, 0xD2	; 210
    2c9a:	de 4f       	sbci	r29, 0xFE	; 254
    2c9c:	e8 81       	ld	r30, Y
    2c9e:	f9 81       	ldd	r31, Y+1	; 0x01
    2ca0:	ce 52       	subi	r28, 0x2E	; 46
    2ca2:	d1 40       	sbci	r29, 0x01	; 1
    2ca4:	09 95       	icall
    2ca6:	60 93 7a 03 	sts	0x037A, r22	; 0x80037a <tm>
    2caa:	70 93 7b 03 	sts	0x037B, r23	; 0x80037b <tm+0x1>
    2cae:	80 93 7c 03 	sts	0x037C, r24	; 0x80037c <tm+0x2>
					dt=rtc.GetDate();
    2cb2:	c0 5d       	subi	r28, 0xD0	; 208
    2cb4:	de 4f       	sbci	r29, 0xFE	; 254
    2cb6:	e8 81       	ld	r30, Y
    2cb8:	f9 81       	ldd	r31, Y+1	; 0x01
    2cba:	c0 53       	subi	r28, 0x30	; 48
    2cbc:	d1 40       	sbci	r29, 0x01	; 1
    2cbe:	09 95       	icall
    2cc0:	60 93 7d 03 	sts	0x037D, r22	; 0x80037d <dt>
    2cc4:	70 93 7e 03 	sts	0x037E, r23	; 0x80037e <dt+0x1>
    2cc8:	80 93 7f 03 	sts	0x037F, r24	; 0x80037f <dt+0x2>
    2ccc:	90 93 80 03 	sts	0x0380, r25	; 0x800380 <dt+0x3>
					/***Reading analog***/
					adcvalue=analog.read(0);
    2cd0:	80 e0       	ldi	r24, 0x00	; 0
    2cd2:	90 e0       	ldi	r25, 0x00	; 0
    2cd4:	c2 59       	subi	r28, 0x92	; 146
    2cd6:	de 4f       	sbci	r29, 0xFE	; 254
    2cd8:	e8 81       	ld	r30, Y
    2cda:	f9 81       	ldd	r31, Y+1	; 0x01
    2cdc:	ce 56       	subi	r28, 0x6E	; 110
    2cde:	d1 40       	sbci	r29, 0x01	; 1
    2ce0:	09 95       	icall
    2ce2:	cb 59       	subi	r28, 0x9B	; 155
    2ce4:	de 4f       	sbci	r29, 0xFE	; 254
    2ce6:	99 83       	std	Y+1, r25	; 0x01
    2ce8:	88 83       	st	Y, r24
    2cea:	c5 56       	subi	r28, 0x65	; 101
    2cec:	d1 40       	sbci	r29, 0x01	; 1
					/***Set Position***/
					timer1.compareB(function.trimmer(adcvalue,0,1023,Min,Max));
    2cee:	bc 01       	movw	r22, r24
    2cf0:	99 0f       	add	r25, r25
    2cf2:	88 0b       	sbc	r24, r24
    2cf4:	99 0b       	sbc	r25, r25
    2cf6:	1f 92       	push	r1
    2cf8:	1f 92       	push	r1
    2cfa:	29 e0       	ldi	r18, 0x09	; 9
    2cfc:	2f 93       	push	r18
    2cfe:	2e e2       	ldi	r18, 0x2E	; 46
    2d00:	2f 93       	push	r18
    2d02:	0f 2e       	mov	r0, r31
    2d04:	f4 ef       	ldi	r31, 0xF4	; 244
    2d06:	af 2e       	mov	r10, r31
    2d08:	bb 24       	eor	r11, r11
    2d0a:	b3 94       	inc	r11
    2d0c:	c1 2c       	mov	r12, r1
    2d0e:	d1 2c       	mov	r13, r1
    2d10:	f0 2d       	mov	r31, r0
    2d12:	ee 24       	eor	r14, r14
    2d14:	ea 94       	dec	r14
    2d16:	13 e0       	ldi	r17, 0x03	; 3
    2d18:	f1 2e       	mov	r15, r17
    2d1a:	00 e0       	ldi	r16, 0x00	; 0
    2d1c:	10 e0       	ldi	r17, 0x00	; 0
    2d1e:	20 e0       	ldi	r18, 0x00	; 0
    2d20:	30 e0       	ldi	r19, 0x00	; 0
    2d22:	a9 01       	movw	r20, r18
    2d24:	c8 59       	subi	r28, 0x98	; 152
    2d26:	de 4f       	sbci	r29, 0xFE	; 254
    2d28:	e8 81       	ld	r30, Y
    2d2a:	f9 81       	ldd	r31, Y+1	; 0x01
    2d2c:	c8 56       	subi	r28, 0x68	; 104
    2d2e:	d1 40       	sbci	r29, 0x01	; 1
    2d30:	09 95       	icall
    2d32:	cb 01       	movw	r24, r22
    2d34:	c6 59       	subi	r28, 0x96	; 150
    2d36:	de 4f       	sbci	r29, 0xFE	; 254
    2d38:	e8 81       	ld	r30, Y
    2d3a:	f9 81       	ldd	r31, Y+1	; 0x01
    2d3c:	ca 56       	subi	r28, 0x6A	; 106
    2d3e:	d1 40       	sbci	r29, 0x01	; 1
    2d40:	09 95       	icall
					lcd0.gotoxy(0,0);
    2d42:	60 e0       	ldi	r22, 0x00	; 0
    2d44:	70 e0       	ldi	r23, 0x00	; 0
    2d46:	80 e0       	ldi	r24, 0x00	; 0
    2d48:	90 e0       	ldi	r25, 0x00	; 0
    2d4a:	f3 01       	movw	r30, r6
    2d4c:	09 95       	icall
					lcd0.string_size("Sense: ",7);
    2d4e:	67 e0       	ldi	r22, 0x07	; 7
    2d50:	88 e1       	ldi	r24, 0x18	; 24
    2d52:	91 e0       	ldi	r25, 0x01	; 1
    2d54:	f4 01       	movw	r30, r8
    2d56:	09 95       	icall
					//lcd0.hspace(1);
					strcpy(str,function.i16toa(adcvalue));
    2d58:	ce 54       	subi	r28, 0x4E	; 78
    2d5a:	df 4f       	sbci	r29, 0xFF	; 255
    2d5c:	e8 81       	ld	r30, Y
    2d5e:	f9 81       	ldd	r31, Y+1	; 0x01
    2d60:	c2 5b       	subi	r28, 0xB2	; 178
    2d62:	d0 40       	sbci	r29, 0x00	; 0
    2d64:	cb 59       	subi	r28, 0x9B	; 155
    2d66:	de 4f       	sbci	r29, 0xFE	; 254
    2d68:	88 81       	ld	r24, Y
    2d6a:	99 81       	ldd	r25, Y+1	; 0x01
    2d6c:	c5 56       	subi	r28, 0x65	; 101
    2d6e:	d1 40       	sbci	r29, 0x01	; 1
    2d70:	09 95       	icall
    2d72:	bc 01       	movw	r22, r24
    2d74:	ce 01       	movw	r24, r28
    2d76:	8a 5c       	subi	r24, 0xCA	; 202
    2d78:	9e 4f       	sbci	r25, 0xFE	; 254
    2d7a:	cf d6       	rcall	.+3486   	; 0x3b1a <strcpy>
					lcd0.string_size(str,4);
    2d7c:	64 e0       	ldi	r22, 0x04	; 4
    2d7e:	ce 01       	movw	r24, r28
    2d80:	8a 5c       	subi	r24, 0xCA	; 202
    2d82:	9e 4f       	sbci	r25, 0xFE	; 254
    2d84:	f4 01       	movw	r30, r8
    2d86:	09 95       	icall
					lcd0.gotoxy(0,12);
    2d88:	6c e0       	ldi	r22, 0x0C	; 12
    2d8a:	70 e0       	ldi	r23, 0x00	; 0
    2d8c:	80 e0       	ldi	r24, 0x00	; 0
    2d8e:	90 e0       	ldi	r25, 0x00	; 0
    2d90:	f3 01       	movw	r30, r6
    2d92:	09 95       	icall
					lcd0.string_size(function.ui16toa(rtc.bcd2dec(dt.days)),2);
    2d94:	0d e7       	ldi	r16, 0x7D	; 125
    2d96:	13 e0       	ldi	r17, 0x03	; 3
    2d98:	d8 01       	movw	r26, r16
    2d9a:	13 96       	adiw	r26, 0x03	; 3
    2d9c:	8c 91       	ld	r24, X
    2d9e:	cd 59       	subi	r28, 0x9D	; 157
    2da0:	de 4f       	sbci	r29, 0xFE	; 254
    2da2:	e8 81       	ld	r30, Y
    2da4:	f9 81       	ldd	r31, Y+1	; 0x01
    2da6:	c3 56       	subi	r28, 0x63	; 99
    2da8:	d1 40       	sbci	r29, 0x01	; 1
    2daa:	09 95       	icall
    2dac:	90 e0       	ldi	r25, 0x00	; 0
    2dae:	cf 59       	subi	r28, 0x9F	; 159
    2db0:	de 4f       	sbci	r29, 0xFE	; 254
    2db2:	e8 81       	ld	r30, Y
    2db4:	f9 81       	ldd	r31, Y+1	; 0x01
    2db6:	c1 56       	subi	r28, 0x61	; 97
    2db8:	d1 40       	sbci	r29, 0x01	; 1
    2dba:	09 95       	icall
    2dbc:	62 e0       	ldi	r22, 0x02	; 2
    2dbe:	f4 01       	movw	r30, r8
    2dc0:	09 95       	icall
					lcd0.putch(':');
    2dc2:	8a e3       	ldi	r24, 0x3A	; 58
    2dc4:	f2 01       	movw	r30, r4
    2dc6:	09 95       	icall
					lcd0.string_size(function.ui16toa(rtc.bcd2dec(dt.century_months)),2);
    2dc8:	d8 01       	movw	r26, r16
    2dca:	11 96       	adiw	r26, 0x01	; 1
    2dcc:	8c 91       	ld	r24, X
    2dce:	cd 59       	subi	r28, 0x9D	; 157
    2dd0:	de 4f       	sbci	r29, 0xFE	; 254
    2dd2:	e8 81       	ld	r30, Y
    2dd4:	f9 81       	ldd	r31, Y+1	; 0x01
    2dd6:	c3 56       	subi	r28, 0x63	; 99
    2dd8:	d1 40       	sbci	r29, 0x01	; 1
    2dda:	09 95       	icall
    2ddc:	90 e0       	ldi	r25, 0x00	; 0
    2dde:	cf 59       	subi	r28, 0x9F	; 159
    2de0:	de 4f       	sbci	r29, 0xFE	; 254
    2de2:	e8 81       	ld	r30, Y
    2de4:	f9 81       	ldd	r31, Y+1	; 0x01
    2de6:	c1 56       	subi	r28, 0x61	; 97
    2de8:	d1 40       	sbci	r29, 0x01	; 1
    2dea:	09 95       	icall
    2dec:	62 e0       	ldi	r22, 0x02	; 2
    2dee:	f4 01       	movw	r30, r8
    2df0:	09 95       	icall
					lcd0.putch(':');
    2df2:	8a e3       	ldi	r24, 0x3A	; 58
    2df4:	f2 01       	movw	r30, r4
    2df6:	09 95       	icall
					lcd0.string_size(function.ui16toa(rtc.bcd2dec(dt.years)),2);
    2df8:	d8 01       	movw	r26, r16
    2dfa:	8c 91       	ld	r24, X
    2dfc:	cd 59       	subi	r28, 0x9D	; 157
    2dfe:	de 4f       	sbci	r29, 0xFE	; 254
    2e00:	e8 81       	ld	r30, Y
    2e02:	f9 81       	ldd	r31, Y+1	; 0x01
    2e04:	c3 56       	subi	r28, 0x63	; 99
    2e06:	d1 40       	sbci	r29, 0x01	; 1
    2e08:	09 95       	icall
    2e0a:	90 e0       	ldi	r25, 0x00	; 0
    2e0c:	cf 59       	subi	r28, 0x9F	; 159
    2e0e:	de 4f       	sbci	r29, 0xFE	; 254
    2e10:	e8 81       	ld	r30, Y
    2e12:	f9 81       	ldd	r31, Y+1	; 0x01
    2e14:	c1 56       	subi	r28, 0x61	; 97
    2e16:	d1 40       	sbci	r29, 0x01	; 1
    2e18:	09 95       	icall
    2e1a:	62 e0       	ldi	r22, 0x02	; 2
    2e1c:	f4 01       	movw	r30, r8
    2e1e:	09 95       	icall
					lcd0.gotoxy(1,12);
    2e20:	6c e0       	ldi	r22, 0x0C	; 12
    2e22:	70 e0       	ldi	r23, 0x00	; 0
    2e24:	81 e0       	ldi	r24, 0x01	; 1
    2e26:	90 e0       	ldi	r25, 0x00	; 0
    2e28:	f3 01       	movw	r30, r6
    2e2a:	09 95       	icall
					lcd0.string_size(function.ui16toa(rtc.bcd2dec(tm.hours)),2);
    2e2c:	0a e7       	ldi	r16, 0x7A	; 122
    2e2e:	13 e0       	ldi	r17, 0x03	; 3
    2e30:	d8 01       	movw	r26, r16
    2e32:	8c 91       	ld	r24, X
    2e34:	cd 59       	subi	r28, 0x9D	; 157
    2e36:	de 4f       	sbci	r29, 0xFE	; 254
    2e38:	e8 81       	ld	r30, Y
    2e3a:	f9 81       	ldd	r31, Y+1	; 0x01
    2e3c:	c3 56       	subi	r28, 0x63	; 99
    2e3e:	d1 40       	sbci	r29, 0x01	; 1
    2e40:	09 95       	icall
    2e42:	90 e0       	ldi	r25, 0x00	; 0
    2e44:	cf 59       	subi	r28, 0x9F	; 159
    2e46:	de 4f       	sbci	r29, 0xFE	; 254
    2e48:	e8 81       	ld	r30, Y
    2e4a:	f9 81       	ldd	r31, Y+1	; 0x01
    2e4c:	c1 56       	subi	r28, 0x61	; 97
    2e4e:	d1 40       	sbci	r29, 0x01	; 1
    2e50:	09 95       	icall
    2e52:	62 e0       	ldi	r22, 0x02	; 2
    2e54:	f4 01       	movw	r30, r8
    2e56:	09 95       	icall
					lcd0.putch(':');
    2e58:	8a e3       	ldi	r24, 0x3A	; 58
    2e5a:	f2 01       	movw	r30, r4
    2e5c:	09 95       	icall
					lcd0.string_size(function.ui16toa(rtc.bcd2dec(tm.minutes)),2);
    2e5e:	d8 01       	movw	r26, r16
    2e60:	11 96       	adiw	r26, 0x01	; 1
    2e62:	8c 91       	ld	r24, X
    2e64:	cd 59       	subi	r28, 0x9D	; 157
    2e66:	de 4f       	sbci	r29, 0xFE	; 254
    2e68:	e8 81       	ld	r30, Y
    2e6a:	f9 81       	ldd	r31, Y+1	; 0x01
    2e6c:	c3 56       	subi	r28, 0x63	; 99
    2e6e:	d1 40       	sbci	r29, 0x01	; 1
    2e70:	09 95       	icall
    2e72:	90 e0       	ldi	r25, 0x00	; 0
    2e74:	cf 59       	subi	r28, 0x9F	; 159
    2e76:	de 4f       	sbci	r29, 0xFE	; 254
    2e78:	e8 81       	ld	r30, Y
    2e7a:	f9 81       	ldd	r31, Y+1	; 0x01
    2e7c:	c1 56       	subi	r28, 0x61	; 97
    2e7e:	d1 40       	sbci	r29, 0x01	; 1
    2e80:	09 95       	icall
    2e82:	62 e0       	ldi	r22, 0x02	; 2
    2e84:	f4 01       	movw	r30, r8
    2e86:	09 95       	icall
					lcd0.putch(':');
    2e88:	8a e3       	ldi	r24, 0x3A	; 58
    2e8a:	f2 01       	movw	r30, r4
    2e8c:	09 95       	icall
					lcd0.string_size(function.ui16toa(rtc.bcd2dec(tm.VL_seconds)),2);
    2e8e:	d8 01       	movw	r26, r16
    2e90:	12 96       	adiw	r26, 0x02	; 2
    2e92:	8c 91       	ld	r24, X
    2e94:	cd 59       	subi	r28, 0x9D	; 157
    2e96:	de 4f       	sbci	r29, 0xFE	; 254
    2e98:	e8 81       	ld	r30, Y
    2e9a:	f9 81       	ldd	r31, Y+1	; 0x01
    2e9c:	c3 56       	subi	r28, 0x63	; 99
    2e9e:	d1 40       	sbci	r29, 0x01	; 1
    2ea0:	09 95       	icall
    2ea2:	90 e0       	ldi	r25, 0x00	; 0
    2ea4:	cf 59       	subi	r28, 0x9F	; 159
    2ea6:	de 4f       	sbci	r29, 0xFE	; 254
    2ea8:	e8 81       	ld	r30, Y
    2eaa:	f9 81       	ldd	r31, Y+1	; 0x01
    2eac:	c1 56       	subi	r28, 0x61	; 97
    2eae:	d1 40       	sbci	r29, 0x01	; 1
    2eb0:	09 95       	icall
    2eb2:	62 e0       	ldi	r22, 0x02	; 2
    2eb4:	f4 01       	movw	r30, r8
    2eb6:	09 95       	icall
				break;
    2eb8:	0f 90       	pop	r0
    2eba:	0f 90       	pop	r0
    2ebc:	0f 90       	pop	r0
    2ebe:	0f 90       	pop	r0
    2ec0:	3c ce       	rjmp	.-904    	; 0x2b3a <main+0x30a>
    2ec2:	c4 5a       	subi	r28, 0xA4	; 164
    2ec4:	de 4f       	sbci	r29, 0xFE	; 254
    2ec6:	18 83       	st	Y, r17
    2ec8:	cc 55       	subi	r28, 0x5C	; 92
    2eca:	d1 40       	sbci	r29, 0x01	; 1
			/***MENU 2***/
			case '2': // Manual position override 
				if(!strcmp(keypad.get().string,"A")){Menu='3';keypad.flush();lcd0.clear();break;}
    2ecc:	f1 01       	movw	r30, r2
    2ece:	09 95       	icall
    2ed0:	cf 57       	subi	r28, 0x7F	; 127
    2ed2:	df 4f       	sbci	r29, 0xFF	; 255
    2ed4:	58 83       	st	Y, r21
    2ed6:	c1 58       	subi	r28, 0x81	; 129
    2ed8:	d0 40       	sbci	r29, 0x00	; 0
    2eda:	ce 57       	subi	r28, 0x7E	; 126
    2edc:	df 4f       	sbci	r29, 0xFF	; 255
    2ede:	68 83       	st	Y, r22
    2ee0:	c2 58       	subi	r28, 0x82	; 130
    2ee2:	d0 40       	sbci	r29, 0x00	; 0
    2ee4:	64 e1       	ldi	r22, 0x14	; 20
    2ee6:	71 e0       	ldi	r23, 0x01	; 1
    2ee8:	cf 57       	subi	r28, 0x7F	; 127
    2eea:	df 4f       	sbci	r29, 0xFF	; 255
    2eec:	88 81       	ld	r24, Y
    2eee:	99 81       	ldd	r25, Y+1	; 0x01
    2ef0:	c1 58       	subi	r28, 0x81	; 129
    2ef2:	d0 40       	sbci	r29, 0x00	; 0
    2ef4:	09 d6       	rcall	.+3090   	; 0x3b08 <strcmp>
    2ef6:	89 2b       	or	r24, r25
    2ef8:	a9 f4       	brne	.+42     	; 0x2f24 <main+0x6f4>
    2efa:	c3 5a       	subi	r28, 0xA3	; 163
    2efc:	de 4f       	sbci	r29, 0xFE	; 254
    2efe:	e8 81       	ld	r30, Y
    2f00:	f9 81       	ldd	r31, Y+1	; 0x01
    2f02:	cd 55       	subi	r28, 0x5D	; 93
    2f04:	d1 40       	sbci	r29, 0x01	; 1
    2f06:	09 95       	icall
    2f08:	c1 5a       	subi	r28, 0xA1	; 161
    2f0a:	de 4f       	sbci	r29, 0xFE	; 254
    2f0c:	e8 81       	ld	r30, Y
    2f0e:	f9 81       	ldd	r31, Y+1	; 0x01
    2f10:	cf 55       	subi	r28, 0x5F	; 95
    2f12:	d1 40       	sbci	r29, 0x01	; 1
    2f14:	09 95       	icall
    2f16:	f3 e3       	ldi	r31, 0x33	; 51
    2f18:	c4 5a       	subi	r28, 0xA4	; 164
    2f1a:	de 4f       	sbci	r29, 0xFE	; 254
    2f1c:	f8 83       	st	Y, r31
    2f1e:	cc 55       	subi	r28, 0x5C	; 92
    2f20:	d1 40       	sbci	r29, 0x01	; 1
    2f22:	0b ce       	rjmp	.-1002   	; 0x2b3a <main+0x30a>
				if(!strcmp(keypad.get().string,"B")){Menu='1';keypad.flush();lcd0.clear();break;}
    2f24:	f1 01       	movw	r30, r2
    2f26:	09 95       	icall
    2f28:	ed 96       	adiw	r28, 0x3d	; 61
    2f2a:	5f af       	std	Y+63, r21	; 0x3f
    2f2c:	ed 97       	sbiw	r28, 0x3d	; 61
    2f2e:	ee 96       	adiw	r28, 0x3e	; 62
    2f30:	6f af       	std	Y+63, r22	; 0x3f
    2f32:	ee 97       	sbiw	r28, 0x3e	; 62
    2f34:	66 e1       	ldi	r22, 0x16	; 22
    2f36:	71 e0       	ldi	r23, 0x01	; 1
    2f38:	ee 96       	adiw	r28, 0x3e	; 62
    2f3a:	8e ad       	ldd	r24, Y+62	; 0x3e
    2f3c:	9f ad       	ldd	r25, Y+63	; 0x3f
    2f3e:	ee 97       	sbiw	r28, 0x3e	; 62
    2f40:	e3 d5       	rcall	.+3014   	; 0x3b08 <strcmp>
    2f42:	89 2b       	or	r24, r25
    2f44:	a9 f4       	brne	.+42     	; 0x2f70 <main+0x740>
    2f46:	c3 5a       	subi	r28, 0xA3	; 163
    2f48:	de 4f       	sbci	r29, 0xFE	; 254
    2f4a:	e8 81       	ld	r30, Y
    2f4c:	f9 81       	ldd	r31, Y+1	; 0x01
    2f4e:	cd 55       	subi	r28, 0x5D	; 93
    2f50:	d1 40       	sbci	r29, 0x01	; 1
    2f52:	09 95       	icall
    2f54:	c1 5a       	subi	r28, 0xA1	; 161
    2f56:	de 4f       	sbci	r29, 0xFE	; 254
    2f58:	e8 81       	ld	r30, Y
    2f5a:	f9 81       	ldd	r31, Y+1	; 0x01
    2f5c:	cf 55       	subi	r28, 0x5F	; 95
    2f5e:	d1 40       	sbci	r29, 0x01	; 1
    2f60:	09 95       	icall
    2f62:	f1 e3       	ldi	r31, 0x31	; 49
    2f64:	c4 5a       	subi	r28, 0xA4	; 164
    2f66:	de 4f       	sbci	r29, 0xFE	; 254
    2f68:	f8 83       	st	Y, r31
    2f6a:	cc 55       	subi	r28, 0x5C	; 92
    2f6c:	d1 40       	sbci	r29, 0x01	; 1
    2f6e:	e5 cd       	rjmp	.-1078   	; 0x2b3a <main+0x30a>
				if(!strcmp(keypad.get().string,"C")){Menu='1';keypad.flush();lcd0.clear();break;}
    2f70:	f1 01       	movw	r30, r2
    2f72:	09 95       	icall
    2f74:	e8 96       	adiw	r28, 0x38	; 56
    2f76:	5f af       	std	Y+63, r21	; 0x3f
    2f78:	e8 97       	sbiw	r28, 0x38	; 56
    2f7a:	e9 96       	adiw	r28, 0x39	; 57
    2f7c:	6f af       	std	Y+63, r22	; 0x3f
    2f7e:	e9 97       	sbiw	r28, 0x39	; 57
    2f80:	60 e2       	ldi	r22, 0x20	; 32
    2f82:	71 e0       	ldi	r23, 0x01	; 1
    2f84:	e9 96       	adiw	r28, 0x39	; 57
    2f86:	8e ad       	ldd	r24, Y+62	; 0x3e
    2f88:	9f ad       	ldd	r25, Y+63	; 0x3f
    2f8a:	e9 97       	sbiw	r28, 0x39	; 57
    2f8c:	bd d5       	rcall	.+2938   	; 0x3b08 <strcmp>
    2f8e:	89 2b       	or	r24, r25
    2f90:	a9 f4       	brne	.+42     	; 0x2fbc <main+0x78c>
    2f92:	c3 5a       	subi	r28, 0xA3	; 163
    2f94:	de 4f       	sbci	r29, 0xFE	; 254
    2f96:	e8 81       	ld	r30, Y
    2f98:	f9 81       	ldd	r31, Y+1	; 0x01
    2f9a:	cd 55       	subi	r28, 0x5D	; 93
    2f9c:	d1 40       	sbci	r29, 0x01	; 1
    2f9e:	09 95       	icall
    2fa0:	c1 5a       	subi	r28, 0xA1	; 161
    2fa2:	de 4f       	sbci	r29, 0xFE	; 254
    2fa4:	e8 81       	ld	r30, Y
    2fa6:	f9 81       	ldd	r31, Y+1	; 0x01
    2fa8:	cf 55       	subi	r28, 0x5F	; 95
    2faa:	d1 40       	sbci	r29, 0x01	; 1
    2fac:	09 95       	icall
    2fae:	f1 e3       	ldi	r31, 0x31	; 49
    2fb0:	c4 5a       	subi	r28, 0xA4	; 164
    2fb2:	de 4f       	sbci	r29, 0xFE	; 254
    2fb4:	f8 83       	st	Y, r31
    2fb6:	cc 55       	subi	r28, 0x5C	; 92
    2fb8:	d1 40       	sbci	r29, 0x01	; 1
    2fba:	bf cd       	rjmp	.-1154   	; 0x2b3a <main+0x30a>
					lcd0.gotoxy(0,0);
    2fbc:	60 e0       	ldi	r22, 0x00	; 0
    2fbe:	70 e0       	ldi	r23, 0x00	; 0
    2fc0:	80 e0       	ldi	r24, 0x00	; 0
    2fc2:	90 e0       	ldi	r25, 0x00	; 0
    2fc4:	f3 01       	movw	r30, r6
    2fc6:	09 95       	icall
					lcd0.string_size("Manual: ",8);
    2fc8:	68 e0       	ldi	r22, 0x08	; 8
    2fca:	82 e2       	ldi	r24, 0x22	; 34
    2fcc:	91 e0       	ldi	r25, 0x01	; 1
    2fce:	f4 01       	movw	r30, r8
    2fd0:	09 95       	icall
					lcd0.string_size(mstr,3);
    2fd2:	63 e0       	ldi	r22, 0x03	; 3
    2fd4:	ce 01       	movw	r24, r28
    2fd6:	84 5c       	subi	r24, 0xC4	; 196
    2fd8:	9e 4f       	sbci	r25, 0xFE	; 254
    2fda:	f4 01       	movw	r30, r8
    2fdc:	09 95       	icall
					lcd0.gotoxy(1,0);
    2fde:	60 e0       	ldi	r22, 0x00	; 0
    2fe0:	70 e0       	ldi	r23, 0x00	; 0
    2fe2:	81 e0       	ldi	r24, 0x01	; 1
    2fe4:	90 e0       	ldi	r25, 0x00	; 0
    2fe6:	f3 01       	movw	r30, r6
    2fe8:	09 95       	icall
					lcd0.string_size("Enter Angle",11);
    2fea:	6b e0       	ldi	r22, 0x0B	; 11
    2fec:	8b e2       	ldi	r24, 0x2B	; 43
    2fee:	91 e0       	ldi	r25, 0x01	; 1
    2ff0:	f4 01       	movw	r30, r8
    2ff2:	09 95       	icall
					if(keypad.get().character==KEYPADENTERKEY){
    2ff4:	f1 01       	movw	r30, r2
    2ff6:	09 95       	icall
    2ff8:	24 34       	cpi	r18, 0x44	; 68
    2ffa:	09 f0       	breq	.+2      	; 0x2ffe <main+0x7ce>
    2ffc:	61 c0       	rjmp	.+194    	; 0x30c0 <main+0x890>
						strncpy(mstr,keypad.get().string,6);
    2ffe:	f1 01       	movw	r30, r2
    3000:	09 95       	icall
    3002:	ae 96       	adiw	r28, 0x2e	; 46
    3004:	5f af       	std	Y+63, r21	; 0x3f
    3006:	ae 97       	sbiw	r28, 0x2e	; 46
    3008:	af 96       	adiw	r28, 0x2f	; 47
    300a:	6f af       	std	Y+63, r22	; 0x3f
    300c:	af 97       	sbiw	r28, 0x2f	; 47
    300e:	af 96       	adiw	r28, 0x2f	; 47
    3010:	6e ad       	ldd	r22, Y+62	; 0x3e
    3012:	7f ad       	ldd	r23, Y+63	; 0x3f
    3014:	af 97       	sbiw	r28, 0x2f	; 47
    3016:	46 e0       	ldi	r20, 0x06	; 6
    3018:	50 e0       	ldi	r21, 0x00	; 0
    301a:	ce 01       	movw	r24, r28
    301c:	84 5c       	subi	r24, 0xC4	; 196
    301e:	9e 4f       	sbci	r25, 0xFE	; 254
    3020:	83 d5       	rcall	.+2822   	; 0x3b28 <strncpy>
						mvalue=function.strToInt(mstr);
    3022:	ce 01       	movw	r24, r28
    3024:	84 5c       	subi	r24, 0xC4	; 196
    3026:	9e 4f       	sbci	r25, 0xFE	; 254
    3028:	c0 59       	subi	r28, 0x90	; 144
    302a:	de 4f       	sbci	r29, 0xFE	; 254
    302c:	e8 81       	ld	r30, Y
    302e:	f9 81       	ldd	r31, Y+1	; 0x01
    3030:	c0 57       	subi	r28, 0x70	; 112
    3032:	d1 40       	sbci	r29, 0x01	; 1
    3034:	09 95       	icall
						if(mvalue >=0 && mvalue <181){
    3036:	85 3b       	cpi	r24, 0xB5	; 181
    3038:	91 05       	cpc	r25, r1
    303a:	b0 f5       	brcc	.+108    	; 0x30a8 <main+0x878>
							m_value=mvalue;
							timer1.compareB(function.trimmer(m_value,0,180,Min,Max));
    303c:	bc 01       	movw	r22, r24
    303e:	99 0f       	add	r25, r25
    3040:	88 0b       	sbc	r24, r24
    3042:	99 0b       	sbc	r25, r25
    3044:	1f 92       	push	r1
    3046:	1f 92       	push	r1
    3048:	29 e0       	ldi	r18, 0x09	; 9
    304a:	2f 93       	push	r18
    304c:	2e e2       	ldi	r18, 0x2E	; 46
    304e:	2f 93       	push	r18
    3050:	0f 2e       	mov	r0, r31
    3052:	f4 ef       	ldi	r31, 0xF4	; 244
    3054:	af 2e       	mov	r10, r31
    3056:	bb 24       	eor	r11, r11
    3058:	b3 94       	inc	r11
    305a:	c1 2c       	mov	r12, r1
    305c:	d1 2c       	mov	r13, r1
    305e:	f0 2d       	mov	r31, r0
    3060:	14 eb       	ldi	r17, 0xB4	; 180
    3062:	e1 2e       	mov	r14, r17
    3064:	f1 2c       	mov	r15, r1
    3066:	00 e0       	ldi	r16, 0x00	; 0
    3068:	10 e0       	ldi	r17, 0x00	; 0
    306a:	20 e0       	ldi	r18, 0x00	; 0
    306c:	30 e0       	ldi	r19, 0x00	; 0
    306e:	a9 01       	movw	r20, r18
    3070:	c8 59       	subi	r28, 0x98	; 152
    3072:	de 4f       	sbci	r29, 0xFE	; 254
    3074:	e8 81       	ld	r30, Y
    3076:	f9 81       	ldd	r31, Y+1	; 0x01
    3078:	c8 56       	subi	r28, 0x68	; 104
    307a:	d1 40       	sbci	r29, 0x01	; 1
    307c:	09 95       	icall
    307e:	cb 01       	movw	r24, r22
    3080:	c6 59       	subi	r28, 0x96	; 150
    3082:	de 4f       	sbci	r29, 0xFE	; 254
    3084:	e8 81       	ld	r30, Y
    3086:	f9 81       	ldd	r31, Y+1	; 0x01
    3088:	ca 56       	subi	r28, 0x6A	; 106
    308a:	d1 40       	sbci	r29, 0x01	; 1
    308c:	09 95       	icall
							lcd0.hspace(5);
    308e:	c6 51       	subi	r28, 0x16	; 22
    3090:	df 4f       	sbci	r29, 0xFF	; 255
    3092:	e8 81       	ld	r30, Y
    3094:	f9 81       	ldd	r31, Y+1	; 0x01
    3096:	ca 5e       	subi	r28, 0xEA	; 234
    3098:	d0 40       	sbci	r29, 0x00	; 0
    309a:	85 e0       	ldi	r24, 0x05	; 5
    309c:	09 95       	icall
    309e:	0f 90       	pop	r0
    30a0:	0f 90       	pop	r0
    30a2:	0f 90       	pop	r0
    30a4:	0f 90       	pop	r0
    30a6:	05 c0       	rjmp	.+10     	; 0x30b2 <main+0x882>
						}else{
							lcd0.string_size("  err",5);
    30a8:	65 e0       	ldi	r22, 0x05	; 5
    30aa:	87 e3       	ldi	r24, 0x37	; 55
    30ac:	91 e0       	ldi	r25, 0x01	; 1
    30ae:	f4 01       	movw	r30, r8
    30b0:	09 95       	icall
						}
						keypad.flush();
    30b2:	c3 5a       	subi	r28, 0xA3	; 163
    30b4:	de 4f       	sbci	r29, 0xFE	; 254
    30b6:	e8 81       	ld	r30, Y
    30b8:	f9 81       	ldd	r31, Y+1	; 0x01
    30ba:	cd 55       	subi	r28, 0x5D	; 93
    30bc:	d1 40       	sbci	r29, 0x01	; 1
    30be:	09 95       	icall
					}
					//else
					//	timer1.compareB(function.trimmer(m_value,0,180,Min,Max));
					lcd0.gotoxy(3,0);
    30c0:	60 e0       	ldi	r22, 0x00	; 0
    30c2:	70 e0       	ldi	r23, 0x00	; 0
    30c4:	83 e0       	ldi	r24, 0x03	; 3
    30c6:	90 e0       	ldi	r25, 0x00	; 0
    30c8:	f3 01       	movw	r30, r6
    30ca:	09 95       	icall
					lcd0.string_size("C - exit",8);
    30cc:	68 e0       	ldi	r22, 0x08	; 8
    30ce:	8d e3       	ldi	r24, 0x3D	; 61
    30d0:	91 e0       	ldi	r25, 0x01	; 1
    30d2:	f4 01       	movw	r30, r8
    30d4:	09 95       	icall
				break;
    30d6:	31 cd       	rjmp	.-1438   	; 0x2b3a <main+0x30a>
    30d8:	c4 5a       	subi	r28, 0xA4	; 164
    30da:	de 4f       	sbci	r29, 0xFE	; 254
    30dc:	18 83       	st	Y, r17
    30de:	cc 55       	subi	r28, 0x5C	; 92
    30e0:	d1 40       	sbci	r29, 0x01	; 1
			/***MENU 3***/
			case '3': //Set Time and Date
				if(!strcmp(keypad.get().string,"A")){Menu='1';keypad.flush();lcd0.clear();break;}
    30e2:	f1 01       	movw	r30, r2
    30e4:	09 95       	icall
    30e6:	a9 96       	adiw	r28, 0x29	; 41
    30e8:	5f af       	std	Y+63, r21	; 0x3f
    30ea:	a9 97       	sbiw	r28, 0x29	; 41
    30ec:	aa 96       	adiw	r28, 0x2a	; 42
    30ee:	6f af       	std	Y+63, r22	; 0x3f
    30f0:	aa 97       	sbiw	r28, 0x2a	; 42
    30f2:	64 e1       	ldi	r22, 0x14	; 20
    30f4:	71 e0       	ldi	r23, 0x01	; 1
    30f6:	aa 96       	adiw	r28, 0x2a	; 42
    30f8:	8e ad       	ldd	r24, Y+62	; 0x3e
    30fa:	9f ad       	ldd	r25, Y+63	; 0x3f
    30fc:	aa 97       	sbiw	r28, 0x2a	; 42
    30fe:	04 d5       	rcall	.+2568   	; 0x3b08 <strcmp>
    3100:	89 2b       	or	r24, r25
    3102:	a9 f4       	brne	.+42     	; 0x312e <main+0x8fe>
    3104:	c3 5a       	subi	r28, 0xA3	; 163
    3106:	de 4f       	sbci	r29, 0xFE	; 254
    3108:	e8 81       	ld	r30, Y
    310a:	f9 81       	ldd	r31, Y+1	; 0x01
    310c:	cd 55       	subi	r28, 0x5D	; 93
    310e:	d1 40       	sbci	r29, 0x01	; 1
    3110:	09 95       	icall
    3112:	c1 5a       	subi	r28, 0xA1	; 161
    3114:	de 4f       	sbci	r29, 0xFE	; 254
    3116:	e8 81       	ld	r30, Y
    3118:	f9 81       	ldd	r31, Y+1	; 0x01
    311a:	cf 55       	subi	r28, 0x5F	; 95
    311c:	d1 40       	sbci	r29, 0x01	; 1
    311e:	09 95       	icall
    3120:	f1 e3       	ldi	r31, 0x31	; 49
    3122:	c4 5a       	subi	r28, 0xA4	; 164
    3124:	de 4f       	sbci	r29, 0xFE	; 254
    3126:	f8 83       	st	Y, r31
    3128:	cc 55       	subi	r28, 0x5C	; 92
    312a:	d1 40       	sbci	r29, 0x01	; 1
    312c:	06 cd       	rjmp	.-1524   	; 0x2b3a <main+0x30a>
				if(!strcmp(keypad.get().string,"B")){Menu='2';keypad.flush();lcd0.clear();break;}
    312e:	f1 01       	movw	r30, r2
    3130:	09 95       	icall
    3132:	a4 96       	adiw	r28, 0x24	; 36
    3134:	5f af       	std	Y+63, r21	; 0x3f
    3136:	a4 97       	sbiw	r28, 0x24	; 36
    3138:	a5 96       	adiw	r28, 0x25	; 37
    313a:	6f af       	std	Y+63, r22	; 0x3f
    313c:	a5 97       	sbiw	r28, 0x25	; 37
    313e:	66 e1       	ldi	r22, 0x16	; 22
    3140:	71 e0       	ldi	r23, 0x01	; 1
    3142:	a5 96       	adiw	r28, 0x25	; 37
    3144:	8e ad       	ldd	r24, Y+62	; 0x3e
    3146:	9f ad       	ldd	r25, Y+63	; 0x3f
    3148:	a5 97       	sbiw	r28, 0x25	; 37
    314a:	de d4       	rcall	.+2492   	; 0x3b08 <strcmp>
    314c:	89 2b       	or	r24, r25
    314e:	a9 f4       	brne	.+42     	; 0x317a <main+0x94a>
    3150:	c3 5a       	subi	r28, 0xA3	; 163
    3152:	de 4f       	sbci	r29, 0xFE	; 254
    3154:	e8 81       	ld	r30, Y
    3156:	f9 81       	ldd	r31, Y+1	; 0x01
    3158:	cd 55       	subi	r28, 0x5D	; 93
    315a:	d1 40       	sbci	r29, 0x01	; 1
    315c:	09 95       	icall
    315e:	c1 5a       	subi	r28, 0xA1	; 161
    3160:	de 4f       	sbci	r29, 0xFE	; 254
    3162:	e8 81       	ld	r30, Y
    3164:	f9 81       	ldd	r31, Y+1	; 0x01
    3166:	cf 55       	subi	r28, 0x5F	; 95
    3168:	d1 40       	sbci	r29, 0x01	; 1
    316a:	09 95       	icall
    316c:	f2 e3       	ldi	r31, 0x32	; 50
    316e:	c4 5a       	subi	r28, 0xA4	; 164
    3170:	de 4f       	sbci	r29, 0xFE	; 254
    3172:	f8 83       	st	Y, r31
    3174:	cc 55       	subi	r28, 0x5C	; 92
    3176:	d1 40       	sbci	r29, 0x01	; 1
    3178:	e0 cc       	rjmp	.-1600   	; 0x2b3a <main+0x30a>
				if(!strcmp(keypad.get().string,"C")){Menu='1';cal='0';keypad.flush();lcd0.clear();break;}
    317a:	f1 01       	movw	r30, r2
    317c:	09 95       	icall
    317e:	6f 96       	adiw	r28, 0x1f	; 31
    3180:	5f af       	std	Y+63, r21	; 0x3f
    3182:	6f 97       	sbiw	r28, 0x1f	; 31
    3184:	a0 96       	adiw	r28, 0x20	; 32
    3186:	6f af       	std	Y+63, r22	; 0x3f
    3188:	a0 97       	sbiw	r28, 0x20	; 32
    318a:	60 e2       	ldi	r22, 0x20	; 32
    318c:	71 e0       	ldi	r23, 0x01	; 1
    318e:	a0 96       	adiw	r28, 0x20	; 32
    3190:	8e ad       	ldd	r24, Y+62	; 0x3e
    3192:	9f ad       	ldd	r25, Y+63	; 0x3f
    3194:	a0 97       	sbiw	r28, 0x20	; 32
    3196:	b8 d4       	rcall	.+2416   	; 0x3b08 <strcmp>
    3198:	89 2b       	or	r24, r25
    319a:	d9 f4       	brne	.+54     	; 0x31d2 <main+0x9a2>
    319c:	c3 5a       	subi	r28, 0xA3	; 163
    319e:	de 4f       	sbci	r29, 0xFE	; 254
    31a0:	e8 81       	ld	r30, Y
    31a2:	f9 81       	ldd	r31, Y+1	; 0x01
    31a4:	cd 55       	subi	r28, 0x5D	; 93
    31a6:	d1 40       	sbci	r29, 0x01	; 1
    31a8:	09 95       	icall
    31aa:	c1 5a       	subi	r28, 0xA1	; 161
    31ac:	de 4f       	sbci	r29, 0xFE	; 254
    31ae:	e8 81       	ld	r30, Y
    31b0:	f9 81       	ldd	r31, Y+1	; 0x01
    31b2:	cf 55       	subi	r28, 0x5F	; 95
    31b4:	d1 40       	sbci	r29, 0x01	; 1
    31b6:	09 95       	icall
    31b8:	f0 e3       	ldi	r31, 0x30	; 48
    31ba:	c9 59       	subi	r28, 0x99	; 153
    31bc:	de 4f       	sbci	r29, 0xFE	; 254
    31be:	f8 83       	st	Y, r31
    31c0:	c7 56       	subi	r28, 0x67	; 103
    31c2:	d1 40       	sbci	r29, 0x01	; 1
    31c4:	21 e3       	ldi	r18, 0x31	; 49
    31c6:	c4 5a       	subi	r28, 0xA4	; 164
    31c8:	de 4f       	sbci	r29, 0xFE	; 254
    31ca:	28 83       	st	Y, r18
    31cc:	cc 55       	subi	r28, 0x5C	; 92
    31ce:	d1 40       	sbci	r29, 0x01	; 1
    31d0:	b4 cc       	rjmp	.-1688   	; 0x2b3a <main+0x30a>
					/*** Menu to set RTC Time and Date ***/
					lcd0.gotoxy(0,0);
    31d2:	60 e0       	ldi	r22, 0x00	; 0
    31d4:	70 e0       	ldi	r23, 0x00	; 0
    31d6:	80 e0       	ldi	r24, 0x00	; 0
    31d8:	90 e0       	ldi	r25, 0x00	; 0
    31da:	f3 01       	movw	r30, r6
    31dc:	09 95       	icall
					lcd0.string_size("Date and Time Setup",19);
    31de:	63 e1       	ldi	r22, 0x13	; 19
    31e0:	86 e4       	ldi	r24, 0x46	; 70
    31e2:	91 e0       	ldi	r25, 0x01	; 1
    31e4:	f4 01       	movw	r30, r8
    31e6:	09 95       	icall
					/***Calibrate Menu***/
					switch(cal){
    31e8:	c9 59       	subi	r28, 0x99	; 153
    31ea:	de 4f       	sbci	r29, 0xFE	; 254
    31ec:	f8 81       	ld	r31, Y
    31ee:	c7 56       	subi	r28, 0x67	; 103
    31f0:	d1 40       	sbci	r29, 0x01	; 1
    31f2:	8f 2f       	mov	r24, r31
    31f4:	90 e0       	ldi	r25, 0x00	; 0
    31f6:	fc 01       	movw	r30, r24
    31f8:	f0 97       	sbiw	r30, 0x30	; 48
    31fa:	e7 30       	cpi	r30, 0x07	; 7
    31fc:	f1 05       	cpc	r31, r1
    31fe:	08 f0       	brcs	.+2      	; 0x3202 <main+0x9d2>
    3200:	96 cc       	rjmp	.-1748   	; 0x2b2e <main+0x2fe>
    3202:	ef 59       	subi	r30, 0x9F	; 159
    3204:	ff 4f       	sbci	r31, 0xFF	; 255
    3206:	5e c4       	rjmp	.+2236   	; 0x3ac4 <__tablejump2__>
						case '0': // choice
							lcd0.gotoxy(1,0);
    3208:	60 e0       	ldi	r22, 0x00	; 0
    320a:	70 e0       	ldi	r23, 0x00	; 0
    320c:	81 e0       	ldi	r24, 0x01	; 1
    320e:	90 e0       	ldi	r25, 0x00	; 0
    3210:	f3 01       	movw	r30, r6
    3212:	09 95       	icall
							lcd0.string_size("1-Year",7);
    3214:	67 e0       	ldi	r22, 0x07	; 7
    3216:	8a e5       	ldi	r24, 0x5A	; 90
    3218:	91 e0       	ldi	r25, 0x01	; 1
    321a:	f4 01       	movw	r30, r8
    321c:	09 95       	icall
							lcd0.string_size("2-Month",8);
    321e:	68 e0       	ldi	r22, 0x08	; 8
    3220:	81 e6       	ldi	r24, 0x61	; 97
    3222:	91 e0       	ldi	r25, 0x01	; 1
    3224:	f4 01       	movw	r30, r8
    3226:	09 95       	icall
							lcd0.string_size("3-Day",5);
    3228:	65 e0       	ldi	r22, 0x05	; 5
    322a:	89 e6       	ldi	r24, 0x69	; 105
    322c:	91 e0       	ldi	r25, 0x01	; 1
    322e:	f4 01       	movw	r30, r8
    3230:	09 95       	icall
							lcd0.gotoxy(2,0);
    3232:	60 e0       	ldi	r22, 0x00	; 0
    3234:	70 e0       	ldi	r23, 0x00	; 0
    3236:	82 e0       	ldi	r24, 0x02	; 2
    3238:	90 e0       	ldi	r25, 0x00	; 0
    323a:	f3 01       	movw	r30, r6
    323c:	09 95       	icall
							lcd0.string_size("4-Hour",7);
    323e:	67 e0       	ldi	r22, 0x07	; 7
    3240:	8f e6       	ldi	r24, 0x6F	; 111
    3242:	91 e0       	ldi	r25, 0x01	; 1
    3244:	f4 01       	movw	r30, r8
    3246:	09 95       	icall
							lcd0.string_size("5-Min",8);
    3248:	68 e0       	ldi	r22, 0x08	; 8
    324a:	86 e7       	ldi	r24, 0x76	; 118
    324c:	91 e0       	ldi	r25, 0x01	; 1
    324e:	f4 01       	movw	r30, r8
    3250:	09 95       	icall
							lcd0.string_size("6-Sec",5);
    3252:	65 e0       	ldi	r22, 0x05	; 5
    3254:	8c e7       	ldi	r24, 0x7C	; 124
    3256:	91 e0       	ldi	r25, 0x01	; 1
    3258:	f4 01       	movw	r30, r8
    325a:	09 95       	icall
							lcd0.gotoxy(3,0);
    325c:	60 e0       	ldi	r22, 0x00	; 0
    325e:	70 e0       	ldi	r23, 0x00	; 0
    3260:	83 e0       	ldi	r24, 0x03	; 3
    3262:	90 e0       	ldi	r25, 0x00	; 0
    3264:	f3 01       	movw	r30, r6
    3266:	09 95       	icall
							lcd0.string_size("C - exit",8);
    3268:	68 e0       	ldi	r22, 0x08	; 8
    326a:	8d e3       	ldi	r24, 0x3D	; 61
    326c:	91 e0       	ldi	r25, 0x01	; 1
    326e:	f4 01       	movw	r30, r8
							if(!strcmp(keypad.get().string,"1")){cal='1';keypad.flush();lcd0.clear();}
    3270:	09 95       	icall
    3272:	f1 01       	movw	r30, r2
    3274:	09 95       	icall
    3276:	6a 96       	adiw	r28, 0x1a	; 26
    3278:	5f af       	std	Y+63, r21	; 0x3f
    327a:	6a 97       	sbiw	r28, 0x1a	; 26
    327c:	6b 96       	adiw	r28, 0x1b	; 27
    327e:	6f af       	std	Y+63, r22	; 0x3f
    3280:	6b 97       	sbiw	r28, 0x1b	; 27
    3282:	62 e8       	ldi	r22, 0x82	; 130
    3284:	71 e0       	ldi	r23, 0x01	; 1
    3286:	6b 96       	adiw	r28, 0x1b	; 27
    3288:	8e ad       	ldd	r24, Y+62	; 0x3e
    328a:	9f ad       	ldd	r25, Y+63	; 0x3f
    328c:	6b 97       	sbiw	r28, 0x1b	; 27
    328e:	3c d4       	rcall	.+2168   	; 0x3b08 <strcmp>
    3290:	89 2b       	or	r24, r25
    3292:	a1 f4       	brne	.+40     	; 0x32bc <main+0xa8c>
    3294:	c3 5a       	subi	r28, 0xA3	; 163
    3296:	de 4f       	sbci	r29, 0xFE	; 254
    3298:	e8 81       	ld	r30, Y
    329a:	f9 81       	ldd	r31, Y+1	; 0x01
    329c:	cd 55       	subi	r28, 0x5D	; 93
    329e:	d1 40       	sbci	r29, 0x01	; 1
    32a0:	09 95       	icall
    32a2:	c1 5a       	subi	r28, 0xA1	; 161
    32a4:	de 4f       	sbci	r29, 0xFE	; 254
    32a6:	e8 81       	ld	r30, Y
    32a8:	f9 81       	ldd	r31, Y+1	; 0x01
    32aa:	cf 55       	subi	r28, 0x5F	; 95
    32ac:	d1 40       	sbci	r29, 0x01	; 1
    32ae:	09 95       	icall
    32b0:	f1 e3       	ldi	r31, 0x31	; 49
    32b2:	c9 59       	subi	r28, 0x99	; 153
    32b4:	de 4f       	sbci	r29, 0xFE	; 254
    32b6:	f8 83       	st	Y, r31
    32b8:	c7 56       	subi	r28, 0x67	; 103
							if(!strcmp(keypad.get().string,"2")){cal='2';keypad.flush();lcd0.clear();}
    32ba:	d1 40       	sbci	r29, 0x01	; 1
    32bc:	f1 01       	movw	r30, r2
    32be:	09 95       	icall
    32c0:	65 96       	adiw	r28, 0x15	; 21
    32c2:	5f af       	std	Y+63, r21	; 0x3f
    32c4:	65 97       	sbiw	r28, 0x15	; 21
    32c6:	66 96       	adiw	r28, 0x16	; 22
    32c8:	6f af       	std	Y+63, r22	; 0x3f
    32ca:	66 97       	sbiw	r28, 0x16	; 22
    32cc:	64 e8       	ldi	r22, 0x84	; 132
    32ce:	71 e0       	ldi	r23, 0x01	; 1
    32d0:	66 96       	adiw	r28, 0x16	; 22
    32d2:	8e ad       	ldd	r24, Y+62	; 0x3e
    32d4:	9f ad       	ldd	r25, Y+63	; 0x3f
    32d6:	66 97       	sbiw	r28, 0x16	; 22
    32d8:	17 d4       	rcall	.+2094   	; 0x3b08 <strcmp>
    32da:	89 2b       	or	r24, r25
    32dc:	a1 f4       	brne	.+40     	; 0x3306 <main+0xad6>
    32de:	c3 5a       	subi	r28, 0xA3	; 163
    32e0:	de 4f       	sbci	r29, 0xFE	; 254
    32e2:	e8 81       	ld	r30, Y
    32e4:	f9 81       	ldd	r31, Y+1	; 0x01
    32e6:	cd 55       	subi	r28, 0x5D	; 93
    32e8:	d1 40       	sbci	r29, 0x01	; 1
    32ea:	09 95       	icall
    32ec:	c1 5a       	subi	r28, 0xA1	; 161
    32ee:	de 4f       	sbci	r29, 0xFE	; 254
    32f0:	e8 81       	ld	r30, Y
    32f2:	f9 81       	ldd	r31, Y+1	; 0x01
    32f4:	cf 55       	subi	r28, 0x5F	; 95
    32f6:	d1 40       	sbci	r29, 0x01	; 1
    32f8:	09 95       	icall
    32fa:	f2 e3       	ldi	r31, 0x32	; 50
    32fc:	c9 59       	subi	r28, 0x99	; 153
    32fe:	de 4f       	sbci	r29, 0xFE	; 254
    3300:	f8 83       	st	Y, r31
    3302:	c7 56       	subi	r28, 0x67	; 103
							if(!strcmp(keypad.get().string,"3")){cal='3';keypad.flush();lcd0.clear();}
    3304:	d1 40       	sbci	r29, 0x01	; 1
    3306:	f1 01       	movw	r30, r2
    3308:	09 95       	icall
    330a:	60 96       	adiw	r28, 0x10	; 16
    330c:	5f af       	std	Y+63, r21	; 0x3f
    330e:	60 97       	sbiw	r28, 0x10	; 16
    3310:	61 96       	adiw	r28, 0x11	; 17
    3312:	6f af       	std	Y+63, r22	; 0x3f
    3314:	61 97       	sbiw	r28, 0x11	; 17
    3316:	66 e8       	ldi	r22, 0x86	; 134
    3318:	71 e0       	ldi	r23, 0x01	; 1
    331a:	61 96       	adiw	r28, 0x11	; 17
    331c:	8e ad       	ldd	r24, Y+62	; 0x3e
    331e:	9f ad       	ldd	r25, Y+63	; 0x3f
    3320:	61 97       	sbiw	r28, 0x11	; 17
    3322:	f2 d3       	rcall	.+2020   	; 0x3b08 <strcmp>
    3324:	89 2b       	or	r24, r25
    3326:	a1 f4       	brne	.+40     	; 0x3350 <main+0xb20>
    3328:	c3 5a       	subi	r28, 0xA3	; 163
    332a:	de 4f       	sbci	r29, 0xFE	; 254
    332c:	e8 81       	ld	r30, Y
    332e:	f9 81       	ldd	r31, Y+1	; 0x01
    3330:	cd 55       	subi	r28, 0x5D	; 93
    3332:	d1 40       	sbci	r29, 0x01	; 1
    3334:	09 95       	icall
    3336:	c1 5a       	subi	r28, 0xA1	; 161
    3338:	de 4f       	sbci	r29, 0xFE	; 254
    333a:	e8 81       	ld	r30, Y
    333c:	f9 81       	ldd	r31, Y+1	; 0x01
    333e:	cf 55       	subi	r28, 0x5F	; 95
    3340:	d1 40       	sbci	r29, 0x01	; 1
    3342:	09 95       	icall
    3344:	f3 e3       	ldi	r31, 0x33	; 51
    3346:	c9 59       	subi	r28, 0x99	; 153
    3348:	de 4f       	sbci	r29, 0xFE	; 254
    334a:	f8 83       	st	Y, r31
    334c:	c7 56       	subi	r28, 0x67	; 103
							if(!strcmp(keypad.get().string,"4")){cal='4';keypad.flush();lcd0.clear();}
    334e:	d1 40       	sbci	r29, 0x01	; 1
    3350:	f1 01       	movw	r30, r2
    3352:	09 95       	icall
    3354:	2b 96       	adiw	r28, 0x0b	; 11
    3356:	5f af       	std	Y+63, r21	; 0x3f
    3358:	2b 97       	sbiw	r28, 0x0b	; 11
    335a:	2c 96       	adiw	r28, 0x0c	; 12
    335c:	6f af       	std	Y+63, r22	; 0x3f
    335e:	2c 97       	sbiw	r28, 0x0c	; 12
    3360:	68 e8       	ldi	r22, 0x88	; 136
    3362:	71 e0       	ldi	r23, 0x01	; 1
    3364:	2c 96       	adiw	r28, 0x0c	; 12
    3366:	8e ad       	ldd	r24, Y+62	; 0x3e
    3368:	9f ad       	ldd	r25, Y+63	; 0x3f
    336a:	2c 97       	sbiw	r28, 0x0c	; 12
    336c:	cd d3       	rcall	.+1946   	; 0x3b08 <strcmp>
    336e:	89 2b       	or	r24, r25
    3370:	a1 f4       	brne	.+40     	; 0x339a <main+0xb6a>
    3372:	c3 5a       	subi	r28, 0xA3	; 163
    3374:	de 4f       	sbci	r29, 0xFE	; 254
    3376:	e8 81       	ld	r30, Y
    3378:	f9 81       	ldd	r31, Y+1	; 0x01
    337a:	cd 55       	subi	r28, 0x5D	; 93
    337c:	d1 40       	sbci	r29, 0x01	; 1
    337e:	09 95       	icall
    3380:	c1 5a       	subi	r28, 0xA1	; 161
    3382:	de 4f       	sbci	r29, 0xFE	; 254
    3384:	e8 81       	ld	r30, Y
    3386:	f9 81       	ldd	r31, Y+1	; 0x01
    3388:	cf 55       	subi	r28, 0x5F	; 95
    338a:	d1 40       	sbci	r29, 0x01	; 1
    338c:	09 95       	icall
    338e:	f4 e3       	ldi	r31, 0x34	; 52
    3390:	c9 59       	subi	r28, 0x99	; 153
    3392:	de 4f       	sbci	r29, 0xFE	; 254
    3394:	f8 83       	st	Y, r31
    3396:	c7 56       	subi	r28, 0x67	; 103
							if(!strcmp(keypad.get().string,"5")){cal='5';keypad.flush();lcd0.clear();}
    3398:	d1 40       	sbci	r29, 0x01	; 1
    339a:	f1 01       	movw	r30, r2
    339c:	09 95       	icall
    339e:	26 96       	adiw	r28, 0x06	; 6
    33a0:	5f af       	std	Y+63, r21	; 0x3f
    33a2:	26 97       	sbiw	r28, 0x06	; 6
    33a4:	27 96       	adiw	r28, 0x07	; 7
    33a6:	6f af       	std	Y+63, r22	; 0x3f
    33a8:	27 97       	sbiw	r28, 0x07	; 7
    33aa:	6a e8       	ldi	r22, 0x8A	; 138
    33ac:	71 e0       	ldi	r23, 0x01	; 1
    33ae:	27 96       	adiw	r28, 0x07	; 7
    33b0:	8e ad       	ldd	r24, Y+62	; 0x3e
    33b2:	9f ad       	ldd	r25, Y+63	; 0x3f
    33b4:	27 97       	sbiw	r28, 0x07	; 7
    33b6:	a8 d3       	rcall	.+1872   	; 0x3b08 <strcmp>
    33b8:	89 2b       	or	r24, r25
    33ba:	a1 f4       	brne	.+40     	; 0x33e4 <main+0xbb4>
    33bc:	c3 5a       	subi	r28, 0xA3	; 163
    33be:	de 4f       	sbci	r29, 0xFE	; 254
    33c0:	e8 81       	ld	r30, Y
    33c2:	f9 81       	ldd	r31, Y+1	; 0x01
    33c4:	cd 55       	subi	r28, 0x5D	; 93
    33c6:	d1 40       	sbci	r29, 0x01	; 1
    33c8:	09 95       	icall
    33ca:	c1 5a       	subi	r28, 0xA1	; 161
    33cc:	de 4f       	sbci	r29, 0xFE	; 254
    33ce:	e8 81       	ld	r30, Y
    33d0:	f9 81       	ldd	r31, Y+1	; 0x01
    33d2:	cf 55       	subi	r28, 0x5F	; 95
    33d4:	d1 40       	sbci	r29, 0x01	; 1
    33d6:	09 95       	icall
    33d8:	f5 e3       	ldi	r31, 0x35	; 53
    33da:	c9 59       	subi	r28, 0x99	; 153
    33dc:	de 4f       	sbci	r29, 0xFE	; 254
    33de:	f8 83       	st	Y, r31
    33e0:	c7 56       	subi	r28, 0x67	; 103
							if(!strcmp(keypad.get().string,"6")){cal='6';keypad.flush();lcd0.clear();}
    33e2:	d1 40       	sbci	r29, 0x01	; 1
    33e4:	f1 01       	movw	r30, r2
    33e6:	09 95       	icall
    33e8:	21 96       	adiw	r28, 0x01	; 1
    33ea:	5f af       	std	Y+63, r21	; 0x3f
    33ec:	21 97       	sbiw	r28, 0x01	; 1
    33ee:	22 96       	adiw	r28, 0x02	; 2
    33f0:	6f af       	std	Y+63, r22	; 0x3f
    33f2:	22 97       	sbiw	r28, 0x02	; 2
    33f4:	6c e8       	ldi	r22, 0x8C	; 140
    33f6:	71 e0       	ldi	r23, 0x01	; 1
    33f8:	22 96       	adiw	r28, 0x02	; 2
    33fa:	8e ad       	ldd	r24, Y+62	; 0x3e
    33fc:	9f ad       	ldd	r25, Y+63	; 0x3f
    33fe:	22 97       	sbiw	r28, 0x02	; 2
    3400:	83 d3       	rcall	.+1798   	; 0x3b08 <strcmp>
    3402:	89 2b       	or	r24, r25
    3404:	09 f0       	breq	.+2      	; 0x3408 <main+0xbd8>
    3406:	99 cb       	rjmp	.-2254   	; 0x2b3a <main+0x30a>
    3408:	c3 5a       	subi	r28, 0xA3	; 163
    340a:	de 4f       	sbci	r29, 0xFE	; 254
    340c:	e8 81       	ld	r30, Y
    340e:	f9 81       	ldd	r31, Y+1	; 0x01
    3410:	cd 55       	subi	r28, 0x5D	; 93
    3412:	d1 40       	sbci	r29, 0x01	; 1
    3414:	09 95       	icall
    3416:	c1 5a       	subi	r28, 0xA1	; 161
    3418:	de 4f       	sbci	r29, 0xFE	; 254
    341a:	e8 81       	ld	r30, Y
    341c:	f9 81       	ldd	r31, Y+1	; 0x01
    341e:	cf 55       	subi	r28, 0x5F	; 95
    3420:	d1 40       	sbci	r29, 0x01	; 1
    3422:	09 95       	icall
    3424:	f6 e3       	ldi	r31, 0x36	; 54
    3426:	c9 59       	subi	r28, 0x99	; 153
    3428:	de 4f       	sbci	r29, 0xFE	; 254
    342a:	f8 83       	st	Y, r31
    342c:	c7 56       	subi	r28, 0x67	; 103
    342e:	d1 40       	sbci	r29, 0x01	; 1
    3430:	84 cb       	rjmp	.-2296   	; 0x2b3a <main+0x30a>
							//if(keypad.get().character=='1'){cal='1';keypad.flush();lcd0.clear();}
							break;
						/********************************************************************/
						case '1': // YEAR
							lcd0.gotoxy(1,0);
    3432:	60 e0       	ldi	r22, 0x00	; 0
    3434:	70 e0       	ldi	r23, 0x00	; 0
    3436:	81 e0       	ldi	r24, 0x01	; 1
    3438:	90 e0       	ldi	r25, 0x00	; 0
    343a:	f3 01       	movw	r30, r6
    343c:	09 95       	icall
							lcd0.string_size("Enter Year:",11);
    343e:	6b e0       	ldi	r22, 0x0B	; 11
    3440:	8e e8       	ldi	r24, 0x8E	; 142
    3442:	91 e0       	ldi	r25, 0x01	; 1
    3444:	f4 01       	movw	r30, r8
    3446:	09 95       	icall
							lcd0.gotoxy(3,0);
    3448:	60 e0       	ldi	r22, 0x00	; 0
    344a:	70 e0       	ldi	r23, 0x00	; 0
    344c:	83 e0       	ldi	r24, 0x03	; 3
    344e:	90 e0       	ldi	r25, 0x00	; 0
    3450:	f3 01       	movw	r30, r6
							lcd0.string_size("C - exit",8);	
    3452:	09 95       	icall
    3454:	68 e0       	ldi	r22, 0x08	; 8
    3456:	8d e3       	ldi	r24, 0x3D	; 61
    3458:	91 e0       	ldi	r25, 0x01	; 1
    345a:	f4 01       	movw	r30, r8
							/***YEAR***/
							if(keypad.get().character==KEYPADENTERKEY){
    345c:	09 95       	icall
    345e:	f1 01       	movw	r30, r2
    3460:	09 95       	icall
    3462:	24 34       	cpi	r18, 0x44	; 68
    3464:	09 f0       	breq	.+2      	; 0x3468 <main+0xc38>
								strcpy(tstr,keypad.get().string);
    3466:	69 cb       	rjmp	.-2350   	; 0x2b3a <main+0x30a>
    3468:	f1 01       	movw	r30, r2
    346a:	09 95       	icall
    346c:	5e ab       	std	Y+54, r21	; 0x36
    346e:	6f ab       	std	Y+55, r22	; 0x37
    3470:	6e a9       	ldd	r22, Y+54	; 0x36
    3472:	7f a9       	ldd	r23, Y+55	; 0x37
    3474:	ce 01       	movw	r24, r28
    3476:	8e 5b       	subi	r24, 0xBE	; 190
    3478:	9e 4f       	sbci	r25, 0xFE	; 254
    347a:	4f d3       	rcall	.+1694   	; 0x3b1a <strcpy>
								set=function.strToInt(tstr);
    347c:	ce 01       	movw	r24, r28
    347e:	8e 5b       	subi	r24, 0xBE	; 190
    3480:	9e 4f       	sbci	r25, 0xFE	; 254
    3482:	c0 59       	subi	r28, 0x90	; 144
    3484:	de 4f       	sbci	r29, 0xFE	; 254
    3486:	e8 81       	ld	r30, Y
    3488:	f9 81       	ldd	r31, Y+1	; 0x01
    348a:	c0 57       	subi	r28, 0x70	; 112
    348c:	d1 40       	sbci	r29, 0x01	; 1
    348e:	09 95       	icall
								if(set >=0 && set <100){
    3490:	84 36       	cpi	r24, 0x64	; 100
    3492:	91 05       	cpc	r25, r1
    3494:	b0 f4       	brcc	.+44     	; 0x34c2 <main+0xc92>
									rtc.SetYear(rtc.bintobcd(set));
    3496:	c4 5d       	subi	r28, 0xD4	; 212
    3498:	de 4f       	sbci	r29, 0xFE	; 254
    349a:	08 81       	ld	r16, Y
    349c:	19 81       	ldd	r17, Y+1	; 0x01
    349e:	cc 52       	subi	r28, 0x2C	; 44
    34a0:	d1 40       	sbci	r29, 0x01	; 1
    34a2:	ce 58       	subi	r28, 0x8E	; 142
    34a4:	de 4f       	sbci	r29, 0xFE	; 254
    34a6:	e8 81       	ld	r30, Y
    34a8:	f9 81       	ldd	r31, Y+1	; 0x01
    34aa:	c2 57       	subi	r28, 0x72	; 114
    34ac:	d1 40       	sbci	r29, 0x01	; 1
    34ae:	09 95       	icall
    34b0:	f8 01       	movw	r30, r16
    34b2:	09 95       	icall
									cal='0';
    34b4:	f0 e3       	ldi	r31, 0x30	; 48
    34b6:	c9 59       	subi	r28, 0x99	; 153
    34b8:	de 4f       	sbci	r29, 0xFE	; 254
    34ba:	f8 83       	st	Y, r31
    34bc:	c7 56       	subi	r28, 0x67	; 103
    34be:	d1 40       	sbci	r29, 0x01	; 1
    34c0:	10 c0       	rjmp	.+32     	; 0x34e2 <main+0xcb2>
									}else{
									strcpy(tstr,"err");
    34c2:	85 e6       	ldi	r24, 0x65	; 101
    34c4:	92 e7       	ldi	r25, 0x72	; 114
    34c6:	ce 5b       	subi	r28, 0xBE	; 190
    34c8:	de 4f       	sbci	r29, 0xFE	; 254
    34ca:	99 83       	std	Y+1, r25	; 0x01
    34cc:	88 83       	st	Y, r24
    34ce:	c2 54       	subi	r28, 0x42	; 66
    34d0:	d1 40       	sbci	r29, 0x01	; 1
    34d2:	82 e7       	ldi	r24, 0x72	; 114
    34d4:	90 e0       	ldi	r25, 0x00	; 0
    34d6:	cc 5b       	subi	r28, 0xBC	; 188
    34d8:	de 4f       	sbci	r29, 0xFE	; 254
    34da:	99 83       	std	Y+1, r25	; 0x01
    34dc:	88 83       	st	Y, r24
    34de:	c4 54       	subi	r28, 0x44	; 68
    34e0:	d1 40       	sbci	r29, 0x01	; 1
								}
								keypad.flush();
    34e2:	c3 5a       	subi	r28, 0xA3	; 163
    34e4:	de 4f       	sbci	r29, 0xFE	; 254
    34e6:	e8 81       	ld	r30, Y
    34e8:	f9 81       	ldd	r31, Y+1	; 0x01
    34ea:	cd 55       	subi	r28, 0x5D	; 93
    34ec:	d1 40       	sbci	r29, 0x01	; 1
    34ee:	09 95       	icall
    34f0:	24 cb       	rjmp	.-2488   	; 0x2b3a <main+0x30a>
							}
						break;
						/********************************************************************/
						case '2': // MONTH
							lcd0.gotoxy(1,0);
    34f2:	60 e0       	ldi	r22, 0x00	; 0
    34f4:	70 e0       	ldi	r23, 0x00	; 0
    34f6:	81 e0       	ldi	r24, 0x01	; 1
    34f8:	90 e0       	ldi	r25, 0x00	; 0
    34fa:	f3 01       	movw	r30, r6
    34fc:	09 95       	icall
							lcd0.string_size("Enter Month:",12);
    34fe:	6c e0       	ldi	r22, 0x0C	; 12
    3500:	8a e9       	ldi	r24, 0x9A	; 154
    3502:	91 e0       	ldi	r25, 0x01	; 1
    3504:	f4 01       	movw	r30, r8
    3506:	09 95       	icall
							lcd0.gotoxy(3,0);
    3508:	60 e0       	ldi	r22, 0x00	; 0
    350a:	70 e0       	ldi	r23, 0x00	; 0
    350c:	83 e0       	ldi	r24, 0x03	; 3
    350e:	90 e0       	ldi	r25, 0x00	; 0
    3510:	f3 01       	movw	r30, r6
							lcd0.string_size("C - exit",8);
    3512:	09 95       	icall
    3514:	68 e0       	ldi	r22, 0x08	; 8
    3516:	8d e3       	ldi	r24, 0x3D	; 61
    3518:	91 e0       	ldi	r25, 0x01	; 1
    351a:	f4 01       	movw	r30, r8
							/***MONTH***/
							if(keypad.get().character==KEYPADENTERKEY){
    351c:	09 95       	icall
    351e:	f1 01       	movw	r30, r2
    3520:	09 95       	icall
    3522:	24 34       	cpi	r18, 0x44	; 68
    3524:	09 f0       	breq	.+2      	; 0x3528 <main+0xcf8>
								strcpy(tstr,keypad.get().string);
    3526:	09 cb       	rjmp	.-2542   	; 0x2b3a <main+0x30a>
    3528:	f1 01       	movw	r30, r2
    352a:	09 95       	icall
    352c:	5c a7       	std	Y+44, r21	; 0x2c
    352e:	6d a7       	std	Y+45, r22	; 0x2d
    3530:	6c a5       	ldd	r22, Y+44	; 0x2c
    3532:	7d a5       	ldd	r23, Y+45	; 0x2d
    3534:	ce 01       	movw	r24, r28
    3536:	8e 5b       	subi	r24, 0xBE	; 190
    3538:	9e 4f       	sbci	r25, 0xFE	; 254
    353a:	ef d2       	rcall	.+1502   	; 0x3b1a <strcpy>
								set=function.strToInt(tstr);
    353c:	ce 01       	movw	r24, r28
    353e:	8e 5b       	subi	r24, 0xBE	; 190
    3540:	9e 4f       	sbci	r25, 0xFE	; 254
    3542:	c0 59       	subi	r28, 0x90	; 144
    3544:	de 4f       	sbci	r29, 0xFE	; 254
    3546:	e8 81       	ld	r30, Y
    3548:	f9 81       	ldd	r31, Y+1	; 0x01
    354a:	c0 57       	subi	r28, 0x70	; 112
    354c:	d1 40       	sbci	r29, 0x01	; 1
    354e:	09 95       	icall
								if(set >=0 && set <13){
    3550:	8d 30       	cpi	r24, 0x0D	; 13
    3552:	91 05       	cpc	r25, r1
    3554:	b0 f4       	brcc	.+44     	; 0x3582 <main+0xd52>
									rtc.SetMonth(rtc.bintobcd(set));
    3556:	c6 5d       	subi	r28, 0xD6	; 214
    3558:	de 4f       	sbci	r29, 0xFE	; 254
    355a:	08 81       	ld	r16, Y
    355c:	19 81       	ldd	r17, Y+1	; 0x01
    355e:	ca 52       	subi	r28, 0x2A	; 42
    3560:	d1 40       	sbci	r29, 0x01	; 1
    3562:	ce 58       	subi	r28, 0x8E	; 142
    3564:	de 4f       	sbci	r29, 0xFE	; 254
    3566:	e8 81       	ld	r30, Y
    3568:	f9 81       	ldd	r31, Y+1	; 0x01
    356a:	c2 57       	subi	r28, 0x72	; 114
    356c:	d1 40       	sbci	r29, 0x01	; 1
    356e:	09 95       	icall
    3570:	f8 01       	movw	r30, r16
    3572:	09 95       	icall
									cal='0';
    3574:	f0 e3       	ldi	r31, 0x30	; 48
    3576:	c9 59       	subi	r28, 0x99	; 153
    3578:	de 4f       	sbci	r29, 0xFE	; 254
    357a:	f8 83       	st	Y, r31
    357c:	c7 56       	subi	r28, 0x67	; 103
    357e:	d1 40       	sbci	r29, 0x01	; 1
    3580:	10 c0       	rjmp	.+32     	; 0x35a2 <main+0xd72>
								}else{
									strcpy(tstr,"err");
    3582:	85 e6       	ldi	r24, 0x65	; 101
    3584:	92 e7       	ldi	r25, 0x72	; 114
    3586:	ce 5b       	subi	r28, 0xBE	; 190
    3588:	de 4f       	sbci	r29, 0xFE	; 254
    358a:	99 83       	std	Y+1, r25	; 0x01
    358c:	88 83       	st	Y, r24
    358e:	c2 54       	subi	r28, 0x42	; 66
    3590:	d1 40       	sbci	r29, 0x01	; 1
    3592:	82 e7       	ldi	r24, 0x72	; 114
    3594:	90 e0       	ldi	r25, 0x00	; 0
    3596:	cc 5b       	subi	r28, 0xBC	; 188
    3598:	de 4f       	sbci	r29, 0xFE	; 254
    359a:	99 83       	std	Y+1, r25	; 0x01
    359c:	88 83       	st	Y, r24
    359e:	c4 54       	subi	r28, 0x44	; 68
    35a0:	d1 40       	sbci	r29, 0x01	; 1
								}
								keypad.flush();
    35a2:	c3 5a       	subi	r28, 0xA3	; 163
    35a4:	de 4f       	sbci	r29, 0xFE	; 254
    35a6:	e8 81       	ld	r30, Y
    35a8:	f9 81       	ldd	r31, Y+1	; 0x01
    35aa:	cd 55       	subi	r28, 0x5D	; 93
    35ac:	d1 40       	sbci	r29, 0x01	; 1
    35ae:	09 95       	icall
    35b0:	c4 ca       	rjmp	.-2680   	; 0x2b3a <main+0x30a>
							}
							break;
						/********************************************************************/
						case '3': // DAY
							lcd0.gotoxy(1,0);
    35b2:	60 e0       	ldi	r22, 0x00	; 0
    35b4:	70 e0       	ldi	r23, 0x00	; 0
    35b6:	81 e0       	ldi	r24, 0x01	; 1
    35b8:	90 e0       	ldi	r25, 0x00	; 0
    35ba:	f3 01       	movw	r30, r6
    35bc:	09 95       	icall
							lcd0.string_size("Enter Day:",10);
    35be:	6a e0       	ldi	r22, 0x0A	; 10
    35c0:	87 ea       	ldi	r24, 0xA7	; 167
    35c2:	91 e0       	ldi	r25, 0x01	; 1
    35c4:	f4 01       	movw	r30, r8
    35c6:	09 95       	icall
							lcd0.gotoxy(3,0);
    35c8:	60 e0       	ldi	r22, 0x00	; 0
    35ca:	70 e0       	ldi	r23, 0x00	; 0
    35cc:	83 e0       	ldi	r24, 0x03	; 3
    35ce:	90 e0       	ldi	r25, 0x00	; 0
    35d0:	f3 01       	movw	r30, r6
							lcd0.string_size("C - exit",8);
    35d2:	09 95       	icall
    35d4:	68 e0       	ldi	r22, 0x08	; 8
    35d6:	8d e3       	ldi	r24, 0x3D	; 61
    35d8:	91 e0       	ldi	r25, 0x01	; 1
    35da:	f4 01       	movw	r30, r8
							/***DAY***/
							if(keypad.get().character==KEYPADENTERKEY){
    35dc:	09 95       	icall
    35de:	f1 01       	movw	r30, r2
    35e0:	09 95       	icall
    35e2:	24 34       	cpi	r18, 0x44	; 68
    35e4:	09 f0       	breq	.+2      	; 0x35e8 <main+0xdb8>
								strcpy(tstr,keypad.get().string);
    35e6:	a9 ca       	rjmp	.-2734   	; 0x2b3a <main+0x30a>
    35e8:	f1 01       	movw	r30, r2
    35ea:	09 95       	icall
    35ec:	5a a3       	std	Y+34, r21	; 0x22
    35ee:	6b a3       	std	Y+35, r22	; 0x23
    35f0:	6a a1       	ldd	r22, Y+34	; 0x22
    35f2:	7b a1       	ldd	r23, Y+35	; 0x23
    35f4:	ce 01       	movw	r24, r28
    35f6:	8e 5b       	subi	r24, 0xBE	; 190
    35f8:	9e 4f       	sbci	r25, 0xFE	; 254
    35fa:	8f d2       	rcall	.+1310   	; 0x3b1a <strcpy>
								set=function.strToInt(tstr);
    35fc:	ce 01       	movw	r24, r28
    35fe:	8e 5b       	subi	r24, 0xBE	; 190
    3600:	9e 4f       	sbci	r25, 0xFE	; 254
    3602:	c0 59       	subi	r28, 0x90	; 144
    3604:	de 4f       	sbci	r29, 0xFE	; 254
    3606:	e8 81       	ld	r30, Y
    3608:	f9 81       	ldd	r31, Y+1	; 0x01
    360a:	c0 57       	subi	r28, 0x70	; 112
    360c:	d1 40       	sbci	r29, 0x01	; 1
    360e:	09 95       	icall
								if(set >=0 && set <32){
    3610:	80 32       	cpi	r24, 0x20	; 32
    3612:	91 05       	cpc	r25, r1
    3614:	b0 f4       	brcc	.+44     	; 0x3642 <main+0xe12>
									rtc.SetDay(rtc.bintobcd(set));
    3616:	ca 5d       	subi	r28, 0xDA	; 218
    3618:	de 4f       	sbci	r29, 0xFE	; 254
    361a:	08 81       	ld	r16, Y
    361c:	19 81       	ldd	r17, Y+1	; 0x01
    361e:	c6 52       	subi	r28, 0x26	; 38
    3620:	d1 40       	sbci	r29, 0x01	; 1
    3622:	ce 58       	subi	r28, 0x8E	; 142
    3624:	de 4f       	sbci	r29, 0xFE	; 254
    3626:	e8 81       	ld	r30, Y
    3628:	f9 81       	ldd	r31, Y+1	; 0x01
    362a:	c2 57       	subi	r28, 0x72	; 114
    362c:	d1 40       	sbci	r29, 0x01	; 1
    362e:	09 95       	icall
    3630:	f8 01       	movw	r30, r16
    3632:	09 95       	icall
									cal='0';
    3634:	f0 e3       	ldi	r31, 0x30	; 48
    3636:	c9 59       	subi	r28, 0x99	; 153
    3638:	de 4f       	sbci	r29, 0xFE	; 254
    363a:	f8 83       	st	Y, r31
    363c:	c7 56       	subi	r28, 0x67	; 103
    363e:	d1 40       	sbci	r29, 0x01	; 1
    3640:	10 c0       	rjmp	.+32     	; 0x3662 <main+0xe32>
								}else{
									strcpy(tstr,"err");
    3642:	85 e6       	ldi	r24, 0x65	; 101
    3644:	92 e7       	ldi	r25, 0x72	; 114
    3646:	ce 5b       	subi	r28, 0xBE	; 190
    3648:	de 4f       	sbci	r29, 0xFE	; 254
    364a:	99 83       	std	Y+1, r25	; 0x01
    364c:	88 83       	st	Y, r24
    364e:	c2 54       	subi	r28, 0x42	; 66
    3650:	d1 40       	sbci	r29, 0x01	; 1
    3652:	82 e7       	ldi	r24, 0x72	; 114
    3654:	90 e0       	ldi	r25, 0x00	; 0
    3656:	cc 5b       	subi	r28, 0xBC	; 188
    3658:	de 4f       	sbci	r29, 0xFE	; 254
    365a:	99 83       	std	Y+1, r25	; 0x01
    365c:	88 83       	st	Y, r24
    365e:	c4 54       	subi	r28, 0x44	; 68
    3660:	d1 40       	sbci	r29, 0x01	; 1
								}
								keypad.flush();
    3662:	c3 5a       	subi	r28, 0xA3	; 163
    3664:	de 4f       	sbci	r29, 0xFE	; 254
    3666:	e8 81       	ld	r30, Y
    3668:	f9 81       	ldd	r31, Y+1	; 0x01
    366a:	cd 55       	subi	r28, 0x5D	; 93
    366c:	d1 40       	sbci	r29, 0x01	; 1
    366e:	09 95       	icall
    3670:	64 ca       	rjmp	.-2872   	; 0x2b3a <main+0x30a>
							}
						break;
						/********************************************************************/
						case '4': // HOUR
							lcd0.gotoxy(1,0);
    3672:	60 e0       	ldi	r22, 0x00	; 0
    3674:	70 e0       	ldi	r23, 0x00	; 0
    3676:	81 e0       	ldi	r24, 0x01	; 1
    3678:	90 e0       	ldi	r25, 0x00	; 0
    367a:	f3 01       	movw	r30, r6
    367c:	09 95       	icall
							lcd0.string_size("Enter Hour:",11);
    367e:	6b e0       	ldi	r22, 0x0B	; 11
    3680:	82 eb       	ldi	r24, 0xB2	; 178
    3682:	91 e0       	ldi	r25, 0x01	; 1
    3684:	f4 01       	movw	r30, r8
    3686:	09 95       	icall
							lcd0.gotoxy(3,0);
    3688:	60 e0       	ldi	r22, 0x00	; 0
    368a:	70 e0       	ldi	r23, 0x00	; 0
    368c:	83 e0       	ldi	r24, 0x03	; 3
    368e:	90 e0       	ldi	r25, 0x00	; 0
    3690:	f3 01       	movw	r30, r6
							lcd0.string_size("C - exit",8);
    3692:	09 95       	icall
    3694:	68 e0       	ldi	r22, 0x08	; 8
    3696:	8d e3       	ldi	r24, 0x3D	; 61
    3698:	91 e0       	ldi	r25, 0x01	; 1
    369a:	f4 01       	movw	r30, r8
							/***HOUR***/
							if(keypad.get().character==KEYPADENTERKEY){
    369c:	09 95       	icall
    369e:	f1 01       	movw	r30, r2
    36a0:	09 95       	icall
    36a2:	24 34       	cpi	r18, 0x44	; 68
    36a4:	09 f0       	breq	.+2      	; 0x36a8 <main+0xe78>
								strcpy(tstr,keypad.get().string);
    36a6:	49 ca       	rjmp	.-2926   	; 0x2b3a <main+0x30a>
    36a8:	f1 01       	movw	r30, r2
    36aa:	09 95       	icall
    36ac:	58 8f       	std	Y+24, r21	; 0x18
    36ae:	69 8f       	std	Y+25, r22	; 0x19
    36b0:	68 8d       	ldd	r22, Y+24	; 0x18
    36b2:	79 8d       	ldd	r23, Y+25	; 0x19
    36b4:	ce 01       	movw	r24, r28
    36b6:	8e 5b       	subi	r24, 0xBE	; 190
    36b8:	9e 4f       	sbci	r25, 0xFE	; 254
    36ba:	2f d2       	rcall	.+1118   	; 0x3b1a <strcpy>
								set=function.strToInt(tstr);
    36bc:	ce 01       	movw	r24, r28
    36be:	8e 5b       	subi	r24, 0xBE	; 190
    36c0:	9e 4f       	sbci	r25, 0xFE	; 254
    36c2:	c0 59       	subi	r28, 0x90	; 144
    36c4:	de 4f       	sbci	r29, 0xFE	; 254
    36c6:	e8 81       	ld	r30, Y
    36c8:	f9 81       	ldd	r31, Y+1	; 0x01
    36ca:	c0 57       	subi	r28, 0x70	; 112
    36cc:	d1 40       	sbci	r29, 0x01	; 1
    36ce:	09 95       	icall
								if(set >=0 && set <24){
    36d0:	88 31       	cpi	r24, 0x18	; 24
    36d2:	91 05       	cpc	r25, r1
    36d4:	b0 f4       	brcc	.+44     	; 0x3702 <main+0xed2>
									rtc.SetHour(rtc.bintobcd(set));
    36d6:	c4 5e       	subi	r28, 0xE4	; 228
    36d8:	de 4f       	sbci	r29, 0xFE	; 254
    36da:	08 81       	ld	r16, Y
    36dc:	19 81       	ldd	r17, Y+1	; 0x01
    36de:	cc 51       	subi	r28, 0x1C	; 28
    36e0:	d1 40       	sbci	r29, 0x01	; 1
    36e2:	ce 58       	subi	r28, 0x8E	; 142
    36e4:	de 4f       	sbci	r29, 0xFE	; 254
    36e6:	e8 81       	ld	r30, Y
    36e8:	f9 81       	ldd	r31, Y+1	; 0x01
    36ea:	c2 57       	subi	r28, 0x72	; 114
    36ec:	d1 40       	sbci	r29, 0x01	; 1
    36ee:	09 95       	icall
    36f0:	f8 01       	movw	r30, r16
    36f2:	09 95       	icall
									cal='0';
    36f4:	f0 e3       	ldi	r31, 0x30	; 48
    36f6:	c9 59       	subi	r28, 0x99	; 153
    36f8:	de 4f       	sbci	r29, 0xFE	; 254
    36fa:	f8 83       	st	Y, r31
    36fc:	c7 56       	subi	r28, 0x67	; 103
    36fe:	d1 40       	sbci	r29, 0x01	; 1
    3700:	10 c0       	rjmp	.+32     	; 0x3722 <main+0xef2>
								}else{
									strcpy(tstr,"err");
    3702:	85 e6       	ldi	r24, 0x65	; 101
    3704:	92 e7       	ldi	r25, 0x72	; 114
    3706:	ce 5b       	subi	r28, 0xBE	; 190
    3708:	de 4f       	sbci	r29, 0xFE	; 254
    370a:	99 83       	std	Y+1, r25	; 0x01
    370c:	88 83       	st	Y, r24
    370e:	c2 54       	subi	r28, 0x42	; 66
    3710:	d1 40       	sbci	r29, 0x01	; 1
    3712:	82 e7       	ldi	r24, 0x72	; 114
    3714:	90 e0       	ldi	r25, 0x00	; 0
    3716:	cc 5b       	subi	r28, 0xBC	; 188
    3718:	de 4f       	sbci	r29, 0xFE	; 254
    371a:	99 83       	std	Y+1, r25	; 0x01
    371c:	88 83       	st	Y, r24
    371e:	c4 54       	subi	r28, 0x44	; 68
    3720:	d1 40       	sbci	r29, 0x01	; 1
								}
								keypad.flush();
    3722:	c3 5a       	subi	r28, 0xA3	; 163
    3724:	de 4f       	sbci	r29, 0xFE	; 254
    3726:	e8 81       	ld	r30, Y
    3728:	f9 81       	ldd	r31, Y+1	; 0x01
    372a:	cd 55       	subi	r28, 0x5D	; 93
    372c:	d1 40       	sbci	r29, 0x01	; 1
    372e:	09 95       	icall
    3730:	04 ca       	rjmp	.-3064   	; 0x2b3a <main+0x30a>
							}
						break;
						/********************************************************************/
						case '5': // MINUTE
							lcd0.gotoxy(1,0);
    3732:	60 e0       	ldi	r22, 0x00	; 0
    3734:	70 e0       	ldi	r23, 0x00	; 0
    3736:	81 e0       	ldi	r24, 0x01	; 1
    3738:	90 e0       	ldi	r25, 0x00	; 0
    373a:	f3 01       	movw	r30, r6
    373c:	09 95       	icall
							lcd0.string_size("Enter Minutes:",13);
    373e:	6d e0       	ldi	r22, 0x0D	; 13
    3740:	8e eb       	ldi	r24, 0xBE	; 190
    3742:	91 e0       	ldi	r25, 0x01	; 1
    3744:	f4 01       	movw	r30, r8
    3746:	09 95       	icall
							lcd0.gotoxy(3,0);
    3748:	60 e0       	ldi	r22, 0x00	; 0
    374a:	70 e0       	ldi	r23, 0x00	; 0
    374c:	83 e0       	ldi	r24, 0x03	; 3
    374e:	90 e0       	ldi	r25, 0x00	; 0
    3750:	f3 01       	movw	r30, r6
							lcd0.string_size("C - exit",8);
    3752:	09 95       	icall
    3754:	68 e0       	ldi	r22, 0x08	; 8
    3756:	8d e3       	ldi	r24, 0x3D	; 61
    3758:	91 e0       	ldi	r25, 0x01	; 1
    375a:	f4 01       	movw	r30, r8
							/***MINUTE***/
							if(keypad.get().character==KEYPADENTERKEY){
    375c:	09 95       	icall
    375e:	f1 01       	movw	r30, r2
    3760:	09 95       	icall
    3762:	24 34       	cpi	r18, 0x44	; 68
    3764:	09 f0       	breq	.+2      	; 0x3768 <main+0xf38>
								strcpy(tstr,keypad.get().string);
    3766:	e9 c9       	rjmp	.-3118   	; 0x2b3a <main+0x30a>
    3768:	f1 01       	movw	r30, r2
    376a:	09 95       	icall
    376c:	5e 87       	std	Y+14, r21	; 0x0e
    376e:	6f 87       	std	Y+15, r22	; 0x0f
    3770:	6e 85       	ldd	r22, Y+14	; 0x0e
    3772:	7f 85       	ldd	r23, Y+15	; 0x0f
    3774:	ce 01       	movw	r24, r28
    3776:	8e 5b       	subi	r24, 0xBE	; 190
    3778:	9e 4f       	sbci	r25, 0xFE	; 254
    377a:	cf d1       	rcall	.+926    	; 0x3b1a <strcpy>
								set=function.strToInt(tstr);
    377c:	ce 01       	movw	r24, r28
    377e:	8e 5b       	subi	r24, 0xBE	; 190
    3780:	9e 4f       	sbci	r25, 0xFE	; 254
    3782:	c0 59       	subi	r28, 0x90	; 144
    3784:	de 4f       	sbci	r29, 0xFE	; 254
    3786:	e8 81       	ld	r30, Y
    3788:	f9 81       	ldd	r31, Y+1	; 0x01
    378a:	c0 57       	subi	r28, 0x70	; 112
    378c:	d1 40       	sbci	r29, 0x01	; 1
    378e:	09 95       	icall
								if(set >=0 && set <60){
    3790:	8c 33       	cpi	r24, 0x3C	; 60
    3792:	91 05       	cpc	r25, r1
    3794:	b0 f4       	brcc	.+44     	; 0x37c2 <main+0xf92>
									rtc.SetMinute(rtc.bintobcd(set));
    3796:	c2 5e       	subi	r28, 0xE2	; 226
    3798:	de 4f       	sbci	r29, 0xFE	; 254
    379a:	08 81       	ld	r16, Y
    379c:	19 81       	ldd	r17, Y+1	; 0x01
    379e:	ce 51       	subi	r28, 0x1E	; 30
    37a0:	d1 40       	sbci	r29, 0x01	; 1
    37a2:	ce 58       	subi	r28, 0x8E	; 142
    37a4:	de 4f       	sbci	r29, 0xFE	; 254
    37a6:	e8 81       	ld	r30, Y
    37a8:	f9 81       	ldd	r31, Y+1	; 0x01
    37aa:	c2 57       	subi	r28, 0x72	; 114
    37ac:	d1 40       	sbci	r29, 0x01	; 1
    37ae:	09 95       	icall
    37b0:	f8 01       	movw	r30, r16
    37b2:	09 95       	icall
									cal='0';
    37b4:	f0 e3       	ldi	r31, 0x30	; 48
    37b6:	c9 59       	subi	r28, 0x99	; 153
    37b8:	de 4f       	sbci	r29, 0xFE	; 254
    37ba:	f8 83       	st	Y, r31
    37bc:	c7 56       	subi	r28, 0x67	; 103
    37be:	d1 40       	sbci	r29, 0x01	; 1
    37c0:	10 c0       	rjmp	.+32     	; 0x37e2 <main+0xfb2>
								}else{
									strcpy(tstr,"err");
    37c2:	85 e6       	ldi	r24, 0x65	; 101
    37c4:	92 e7       	ldi	r25, 0x72	; 114
    37c6:	ce 5b       	subi	r28, 0xBE	; 190
    37c8:	de 4f       	sbci	r29, 0xFE	; 254
    37ca:	99 83       	std	Y+1, r25	; 0x01
    37cc:	88 83       	st	Y, r24
    37ce:	c2 54       	subi	r28, 0x42	; 66
    37d0:	d1 40       	sbci	r29, 0x01	; 1
    37d2:	82 e7       	ldi	r24, 0x72	; 114
    37d4:	90 e0       	ldi	r25, 0x00	; 0
    37d6:	cc 5b       	subi	r28, 0xBC	; 188
    37d8:	de 4f       	sbci	r29, 0xFE	; 254
    37da:	99 83       	std	Y+1, r25	; 0x01
    37dc:	88 83       	st	Y, r24
    37de:	c4 54       	subi	r28, 0x44	; 68
    37e0:	d1 40       	sbci	r29, 0x01	; 1
								}
								keypad.flush();
    37e2:	c3 5a       	subi	r28, 0xA3	; 163
    37e4:	de 4f       	sbci	r29, 0xFE	; 254
    37e6:	e8 81       	ld	r30, Y
    37e8:	f9 81       	ldd	r31, Y+1	; 0x01
    37ea:	cd 55       	subi	r28, 0x5D	; 93
    37ec:	d1 40       	sbci	r29, 0x01	; 1
    37ee:	09 95       	icall
    37f0:	a4 c9       	rjmp	.-3256   	; 0x2b3a <main+0x30a>
							}
						break;
						/********************************************************************/
						case '6': // SECOND
							lcd0.gotoxy(1,0);
    37f2:	60 e0       	ldi	r22, 0x00	; 0
    37f4:	70 e0       	ldi	r23, 0x00	; 0
    37f6:	81 e0       	ldi	r24, 0x01	; 1
    37f8:	90 e0       	ldi	r25, 0x00	; 0
    37fa:	f3 01       	movw	r30, r6
    37fc:	09 95       	icall
							lcd0.string_size("Enter Seconds:",13);
    37fe:	6d e0       	ldi	r22, 0x0D	; 13
    3800:	8d ec       	ldi	r24, 0xCD	; 205
    3802:	91 e0       	ldi	r25, 0x01	; 1
    3804:	f4 01       	movw	r30, r8
							lcd0.gotoxy(3,0);
    3806:	09 95       	icall
    3808:	60 e0       	ldi	r22, 0x00	; 0
    380a:	70 e0       	ldi	r23, 0x00	; 0
    380c:	83 e0       	ldi	r24, 0x03	; 3
    380e:	90 e0       	ldi	r25, 0x00	; 0
    3810:	f3 01       	movw	r30, r6
							lcd0.string_size("C - exit",8);
    3812:	09 95       	icall
    3814:	68 e0       	ldi	r22, 0x08	; 8
    3816:	8d e3       	ldi	r24, 0x3D	; 61
    3818:	91 e0       	ldi	r25, 0x01	; 1
    381a:	f4 01       	movw	r30, r8
							/***SECOND***/
							if(keypad.get().character==KEYPADENTERKEY){
    381c:	09 95       	icall
    381e:	f1 01       	movw	r30, r2
    3820:	09 95       	icall
    3822:	24 34       	cpi	r18, 0x44	; 68
    3824:	09 f0       	breq	.+2      	; 0x3828 <main+0xff8>
								strcpy(tstr,keypad.get().string);
    3826:	89 c9       	rjmp	.-3310   	; 0x2b3a <main+0x30a>
    3828:	f1 01       	movw	r30, r2
    382a:	09 95       	icall
    382c:	5c 83       	std	Y+4, r21	; 0x04
    382e:	6d 83       	std	Y+5, r22	; 0x05
    3830:	6c 81       	ldd	r22, Y+4	; 0x04
    3832:	7d 81       	ldd	r23, Y+5	; 0x05
    3834:	ce 01       	movw	r24, r28
    3836:	8e 5b       	subi	r24, 0xBE	; 190
    3838:	9e 4f       	sbci	r25, 0xFE	; 254
    383a:	6f d1       	rcall	.+734    	; 0x3b1a <strcpy>
								set=function.strToInt(tstr);
    383c:	ce 01       	movw	r24, r28
    383e:	8e 5b       	subi	r24, 0xBE	; 190
    3840:	9e 4f       	sbci	r25, 0xFE	; 254
    3842:	c0 59       	subi	r28, 0x90	; 144
    3844:	de 4f       	sbci	r29, 0xFE	; 254
    3846:	e8 81       	ld	r30, Y
    3848:	f9 81       	ldd	r31, Y+1	; 0x01
    384a:	c0 57       	subi	r28, 0x70	; 112
    384c:	d1 40       	sbci	r29, 0x01	; 1
    384e:	09 95       	icall
								if(set >=0 && set <60){
    3850:	8c 33       	cpi	r24, 0x3C	; 60
    3852:	91 05       	cpc	r25, r1
    3854:	b0 f4       	brcc	.+44     	; 0x3882 <main+0x1052>
									rtc.SetSecond(rtc.bintobcd(set));
    3856:	c0 5e       	subi	r28, 0xE0	; 224
    3858:	de 4f       	sbci	r29, 0xFE	; 254
    385a:	08 81       	ld	r16, Y
    385c:	19 81       	ldd	r17, Y+1	; 0x01
    385e:	c0 52       	subi	r28, 0x20	; 32
    3860:	d1 40       	sbci	r29, 0x01	; 1
    3862:	ce 58       	subi	r28, 0x8E	; 142
    3864:	de 4f       	sbci	r29, 0xFE	; 254
    3866:	e8 81       	ld	r30, Y
    3868:	f9 81       	ldd	r31, Y+1	; 0x01
    386a:	c2 57       	subi	r28, 0x72	; 114
    386c:	d1 40       	sbci	r29, 0x01	; 1
    386e:	09 95       	icall
    3870:	f8 01       	movw	r30, r16
    3872:	09 95       	icall
									cal='0';
    3874:	f0 e3       	ldi	r31, 0x30	; 48
    3876:	c9 59       	subi	r28, 0x99	; 153
    3878:	de 4f       	sbci	r29, 0xFE	; 254
    387a:	f8 83       	st	Y, r31
    387c:	c7 56       	subi	r28, 0x67	; 103
    387e:	d1 40       	sbci	r29, 0x01	; 1
    3880:	10 c0       	rjmp	.+32     	; 0x38a2 <main+0x1072>
								}else{
									strcpy(tstr,"err");
    3882:	85 e6       	ldi	r24, 0x65	; 101
    3884:	92 e7       	ldi	r25, 0x72	; 114
    3886:	ce 5b       	subi	r28, 0xBE	; 190
    3888:	de 4f       	sbci	r29, 0xFE	; 254
    388a:	99 83       	std	Y+1, r25	; 0x01
    388c:	88 83       	st	Y, r24
    388e:	c2 54       	subi	r28, 0x42	; 66
    3890:	d1 40       	sbci	r29, 0x01	; 1
    3892:	82 e7       	ldi	r24, 0x72	; 114
    3894:	90 e0       	ldi	r25, 0x00	; 0
    3896:	cc 5b       	subi	r28, 0xBC	; 188
    3898:	de 4f       	sbci	r29, 0xFE	; 254
    389a:	99 83       	std	Y+1, r25	; 0x01
    389c:	88 83       	st	Y, r24
    389e:	c4 54       	subi	r28, 0x44	; 68
    38a0:	d1 40       	sbci	r29, 0x01	; 1
								}
								keypad.flush();
    38a2:	c3 5a       	subi	r28, 0xA3	; 163
    38a4:	de 4f       	sbci	r29, 0xFE	; 254
    38a6:	e8 81       	ld	r30, Y
    38a8:	f9 81       	ldd	r31, Y+1	; 0x01
    38aa:	cd 55       	subi	r28, 0x5D	; 93
    38ac:	d1 40       	sbci	r29, 0x01	; 1
    38ae:	09 95       	icall
    38b0:	44 c9       	rjmp	.-3448   	; 0x2b3a <main+0x30a>

000038b2 <__vector_15>:
}
/*
** interrupt
*/
ISR(TIMER0_COMP_vect) // TIMER0_COMP_vect used for clock
{
    38b2:	1f 92       	push	r1
    38b4:	0f 92       	push	r0
    38b6:	0f b6       	in	r0, 0x3f	; 63
    38b8:	0f 92       	push	r0
    38ba:	11 24       	eor	r1, r1
    38bc:	0b b6       	in	r0, 0x3b	; 59
    38be:	0f 92       	push	r0
    38c0:	0f 93       	push	r16
    38c2:	1f 93       	push	r17
    38c4:	2f 93       	push	r18
    38c6:	3f 93       	push	r19
    38c8:	4f 93       	push	r20
    38ca:	5f 93       	push	r21
    38cc:	6f 93       	push	r22
    38ce:	7f 93       	push	r23
    38d0:	8f 93       	push	r24
    38d2:	9f 93       	push	r25
    38d4:	af 93       	push	r26
    38d6:	bf 93       	push	r27
    38d8:	cf 93       	push	r28
    38da:	ef 93       	push	r30
    38dc:	ff 93       	push	r31
	uint8_t Sreg;
	Sreg=SREG;
    38de:	cf b7       	in	r28, 0x3f	; 63
	SREG&=~(1<<7);
    38e0:	8f b7       	in	r24, 0x3f	; 63
    38e2:	8f 77       	andi	r24, 0x7F	; 127
    38e4:	8f bf       	out	0x3f, r24	; 63
	if(count>59){ //59 -> 1Hz
    38e6:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <count>
    38ea:	8c 33       	cpi	r24, 0x3C	; 60
    38ec:	38 f1       	brcs	.+78     	; 0x393c <__vector_15+0x8a>
		increment++;
    38ee:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <increment>
    38f2:	8f 5f       	subi	r24, 0xFF	; 255
    38f4:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <increment>
		if((increment & 0x0F) < 8){
    38f8:	8f 70       	andi	r24, 0x0F	; 15
    38fa:	90 e0       	ldi	r25, 0x00	; 0
    38fc:	08 97       	sbiw	r24, 0x08	; 8
    38fe:	74 f4       	brge	.+28     	; 0x391c <__vector_15+0x6a>
			shift.bit(0);
    3900:	04 e7       	ldi	r16, 0x74	; 116
    3902:	13 e0       	ldi	r17, 0x03	; 3
    3904:	d8 01       	movw	r26, r16
    3906:	ed 91       	ld	r30, X+
    3908:	fc 91       	ld	r31, X
    390a:	80 e0       	ldi	r24, 0x00	; 0
    390c:	09 95       	icall
			shift.out();
    390e:	d8 01       	movw	r26, r16
    3910:	14 96       	adiw	r26, 0x04	; 4
    3912:	ed 91       	ld	r30, X+
    3914:	fc 91       	ld	r31, X
    3916:	15 97       	sbiw	r26, 0x05	; 5
    3918:	09 95       	icall
    391a:	0d c0       	rjmp	.+26     	; 0x3936 <__vector_15+0x84>
		}else{
			shift.bit(1);
    391c:	04 e7       	ldi	r16, 0x74	; 116
    391e:	13 e0       	ldi	r17, 0x03	; 3
    3920:	d8 01       	movw	r26, r16
    3922:	ed 91       	ld	r30, X+
    3924:	fc 91       	ld	r31, X
    3926:	81 e0       	ldi	r24, 0x01	; 1
    3928:	09 95       	icall
			shift.out();
    392a:	d8 01       	movw	r26, r16
    392c:	14 96       	adiw	r26, 0x04	; 4
    392e:	ed 91       	ld	r30, X+
    3930:	fc 91       	ld	r31, X
    3932:	15 97       	sbiw	r26, 0x05	; 5
    3934:	09 95       	icall
		}
		count=0;
    3936:	10 92 af 02 	sts	0x02AF, r1	; 0x8002af <count>
    393a:	03 c0       	rjmp	.+6      	; 0x3942 <__vector_15+0x90>
	}else
		count++;
    393c:	8f 5f       	subi	r24, 0xFF	; 255
    393e:	80 93 af 02 	sts	0x02AF, r24	; 0x8002af <count>
	/***Send Data to Putty***/
	if(uartcount>200){
    3942:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <uartcount>
    3946:	89 3c       	cpi	r24, 0xC9	; 201
    3948:	78 f1       	brcs	.+94     	; 0x39a8 <__vector_15+0xf6>
		if(!strcmp(uartreceive,"read\r")){
    394a:	6c ed       	ldi	r22, 0xDC	; 220
    394c:	71 e0       	ldi	r23, 0x01	; 1
    394e:	80 91 a9 02 	lds	r24, 0x02A9	; 0x8002a9 <uartreceive>
    3952:	90 91 aa 02 	lds	r25, 0x02AA	; 0x8002aa <uartreceive+0x1>
    3956:	d8 d0       	rcall	.+432    	; 0x3b08 <strcmp>
    3958:	89 2b       	or	r24, r25
    395a:	19 f5       	brne	.+70     	; 0x39a2 <__vector_15+0xf0>
			uart.putc('>');uart.puts("analog Reading: ");uart.puts(ptr);uart.puts("\r\n");
    395c:	01 e8       	ldi	r16, 0x81	; 129
    395e:	13 e0       	ldi	r17, 0x03	; 3
    3960:	d8 01       	movw	r26, r16
    3962:	1c 96       	adiw	r26, 0x0c	; 12
    3964:	ed 91       	ld	r30, X+
    3966:	fc 91       	ld	r31, X
    3968:	1d 97       	sbiw	r26, 0x0d	; 13
    396a:	8e e3       	ldi	r24, 0x3E	; 62
    396c:	09 95       	icall
    396e:	d8 01       	movw	r26, r16
    3970:	1e 96       	adiw	r26, 0x0e	; 14
    3972:	ed 91       	ld	r30, X+
    3974:	fc 91       	ld	r31, X
    3976:	1f 97       	sbiw	r26, 0x0f	; 15
    3978:	82 ee       	ldi	r24, 0xE2	; 226
    397a:	91 e0       	ldi	r25, 0x01	; 1
    397c:	09 95       	icall
    397e:	d8 01       	movw	r26, r16
    3980:	1e 96       	adiw	r26, 0x0e	; 14
    3982:	ed 91       	ld	r30, X+
    3984:	fc 91       	ld	r31, X
    3986:	1f 97       	sbiw	r26, 0x0f	; 15
    3988:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <ptr>
    398c:	90 91 ac 02 	lds	r25, 0x02AC	; 0x8002ac <ptr+0x1>
    3990:	09 95       	icall
    3992:	d8 01       	movw	r26, r16
    3994:	1e 96       	adiw	r26, 0x0e	; 14
    3996:	ed 91       	ld	r30, X+
    3998:	fc 91       	ld	r31, X
    399a:	1f 97       	sbiw	r26, 0x0f	; 15
    399c:	83 ef       	ldi	r24, 0xF3	; 243
    399e:	91 e0       	ldi	r25, 0x01	; 1
    39a0:	09 95       	icall
		}
		uartcount=0;
    39a2:	10 92 ad 02 	sts	0x02AD, r1	; 0x8002ad <uartcount>
    39a6:	03 c0       	rjmp	.+6      	; 0x39ae <__vector_15+0xfc>
	}
	else
		uartcount++;
    39a8:	8f 5f       	subi	r24, 0xFF	; 255
    39aa:	80 93 ad 02 	sts	0x02AD, r24	; 0x8002ad <uartcount>
	SREG=Sreg;
    39ae:	cf bf       	out	0x3f, r28	; 63
}
    39b0:	ff 91       	pop	r31
    39b2:	ef 91       	pop	r30
    39b4:	cf 91       	pop	r28
    39b6:	bf 91       	pop	r27
    39b8:	af 91       	pop	r26
    39ba:	9f 91       	pop	r25
    39bc:	8f 91       	pop	r24
    39be:	7f 91       	pop	r23
    39c0:	6f 91       	pop	r22
    39c2:	5f 91       	pop	r21
    39c4:	4f 91       	pop	r20
    39c6:	3f 91       	pop	r19
    39c8:	2f 91       	pop	r18
    39ca:	1f 91       	pop	r17
    39cc:	0f 91       	pop	r16
    39ce:	0f 90       	pop	r0
    39d0:	0b be       	out	0x3b, r0	; 59
    39d2:	0f 90       	pop	r0
    39d4:	0f be       	out	0x3f, r0	; 63
    39d6:	0f 90       	pop	r0
    39d8:	1f 90       	pop	r1
    39da:	18 95       	reti

000039dc <__mulsi3>:
    39dc:	db 01       	movw	r26, r22
    39de:	8f 93       	push	r24
    39e0:	9f 93       	push	r25
    39e2:	88 d0       	rcall	.+272    	; 0x3af4 <__muluhisi3>
    39e4:	bf 91       	pop	r27
    39e6:	af 91       	pop	r26
    39e8:	a2 9f       	mul	r26, r18
    39ea:	80 0d       	add	r24, r0
    39ec:	91 1d       	adc	r25, r1
    39ee:	a3 9f       	mul	r26, r19
    39f0:	90 0d       	add	r25, r0
    39f2:	b2 9f       	mul	r27, r18
    39f4:	90 0d       	add	r25, r0
    39f6:	11 24       	eor	r1, r1
    39f8:	08 95       	ret

000039fa <__udivmodhi4>:
    39fa:	aa 1b       	sub	r26, r26
    39fc:	bb 1b       	sub	r27, r27
    39fe:	51 e1       	ldi	r21, 0x11	; 17
    3a00:	07 c0       	rjmp	.+14     	; 0x3a10 <__udivmodhi4_ep>

00003a02 <__udivmodhi4_loop>:
    3a02:	aa 1f       	adc	r26, r26
    3a04:	bb 1f       	adc	r27, r27
    3a06:	a6 17       	cp	r26, r22
    3a08:	b7 07       	cpc	r27, r23
    3a0a:	10 f0       	brcs	.+4      	; 0x3a10 <__udivmodhi4_ep>
    3a0c:	a6 1b       	sub	r26, r22
    3a0e:	b7 0b       	sbc	r27, r23

00003a10 <__udivmodhi4_ep>:
    3a10:	88 1f       	adc	r24, r24
    3a12:	99 1f       	adc	r25, r25
    3a14:	5a 95       	dec	r21
    3a16:	a9 f7       	brne	.-22     	; 0x3a02 <__udivmodhi4_loop>
    3a18:	80 95       	com	r24
    3a1a:	90 95       	com	r25
    3a1c:	bc 01       	movw	r22, r24
    3a1e:	cd 01       	movw	r24, r26
    3a20:	08 95       	ret

00003a22 <__divmodhi4>:
    3a22:	97 fb       	bst	r25, 7
    3a24:	07 2e       	mov	r0, r23
    3a26:	16 f4       	brtc	.+4      	; 0x3a2c <__divmodhi4+0xa>
    3a28:	00 94       	com	r0
    3a2a:	06 d0       	rcall	.+12     	; 0x3a38 <__divmodhi4_neg1>
    3a2c:	77 fd       	sbrc	r23, 7
    3a2e:	08 d0       	rcall	.+16     	; 0x3a40 <__divmodhi4_neg2>
    3a30:	e4 df       	rcall	.-56     	; 0x39fa <__udivmodhi4>
    3a32:	07 fc       	sbrc	r0, 7
    3a34:	05 d0       	rcall	.+10     	; 0x3a40 <__divmodhi4_neg2>
    3a36:	3e f4       	brtc	.+14     	; 0x3a46 <__divmodhi4_exit>

00003a38 <__divmodhi4_neg1>:
    3a38:	90 95       	com	r25
    3a3a:	81 95       	neg	r24
    3a3c:	9f 4f       	sbci	r25, 0xFF	; 255
    3a3e:	08 95       	ret

00003a40 <__divmodhi4_neg2>:
    3a40:	70 95       	com	r23
    3a42:	61 95       	neg	r22
    3a44:	7f 4f       	sbci	r23, 0xFF	; 255

00003a46 <__divmodhi4_exit>:
    3a46:	08 95       	ret

00003a48 <__udivmodsi4>:
    3a48:	a1 e2       	ldi	r26, 0x21	; 33
    3a4a:	1a 2e       	mov	r1, r26
    3a4c:	aa 1b       	sub	r26, r26
    3a4e:	bb 1b       	sub	r27, r27
    3a50:	fd 01       	movw	r30, r26
    3a52:	0d c0       	rjmp	.+26     	; 0x3a6e <__udivmodsi4_ep>

00003a54 <__udivmodsi4_loop>:
    3a54:	aa 1f       	adc	r26, r26
    3a56:	bb 1f       	adc	r27, r27
    3a58:	ee 1f       	adc	r30, r30
    3a5a:	ff 1f       	adc	r31, r31
    3a5c:	a2 17       	cp	r26, r18
    3a5e:	b3 07       	cpc	r27, r19
    3a60:	e4 07       	cpc	r30, r20
    3a62:	f5 07       	cpc	r31, r21
    3a64:	20 f0       	brcs	.+8      	; 0x3a6e <__udivmodsi4_ep>
    3a66:	a2 1b       	sub	r26, r18
    3a68:	b3 0b       	sbc	r27, r19
    3a6a:	e4 0b       	sbc	r30, r20
    3a6c:	f5 0b       	sbc	r31, r21

00003a6e <__udivmodsi4_ep>:
    3a6e:	66 1f       	adc	r22, r22
    3a70:	77 1f       	adc	r23, r23
    3a72:	88 1f       	adc	r24, r24
    3a74:	99 1f       	adc	r25, r25
    3a76:	1a 94       	dec	r1
    3a78:	69 f7       	brne	.-38     	; 0x3a54 <__udivmodsi4_loop>
    3a7a:	60 95       	com	r22
    3a7c:	70 95       	com	r23
    3a7e:	80 95       	com	r24
    3a80:	90 95       	com	r25
    3a82:	9b 01       	movw	r18, r22
    3a84:	ac 01       	movw	r20, r24
    3a86:	bd 01       	movw	r22, r26
    3a88:	cf 01       	movw	r24, r30
    3a8a:	08 95       	ret

00003a8c <__divmodsi4>:
    3a8c:	05 2e       	mov	r0, r21
    3a8e:	97 fb       	bst	r25, 7
    3a90:	16 f4       	brtc	.+4      	; 0x3a96 <__divmodsi4+0xa>
    3a92:	00 94       	com	r0
    3a94:	0f d0       	rcall	.+30     	; 0x3ab4 <__negsi2>
    3a96:	57 fd       	sbrc	r21, 7
    3a98:	05 d0       	rcall	.+10     	; 0x3aa4 <__divmodsi4_neg2>
    3a9a:	d6 df       	rcall	.-84     	; 0x3a48 <__udivmodsi4>
    3a9c:	07 fc       	sbrc	r0, 7
    3a9e:	02 d0       	rcall	.+4      	; 0x3aa4 <__divmodsi4_neg2>
    3aa0:	46 f4       	brtc	.+16     	; 0x3ab2 <__divmodsi4_exit>
    3aa2:	08 c0       	rjmp	.+16     	; 0x3ab4 <__negsi2>

00003aa4 <__divmodsi4_neg2>:
    3aa4:	50 95       	com	r21
    3aa6:	40 95       	com	r20
    3aa8:	30 95       	com	r19
    3aaa:	21 95       	neg	r18
    3aac:	3f 4f       	sbci	r19, 0xFF	; 255
    3aae:	4f 4f       	sbci	r20, 0xFF	; 255
    3ab0:	5f 4f       	sbci	r21, 0xFF	; 255

00003ab2 <__divmodsi4_exit>:
    3ab2:	08 95       	ret

00003ab4 <__negsi2>:
    3ab4:	90 95       	com	r25
    3ab6:	80 95       	com	r24
    3ab8:	70 95       	com	r23
    3aba:	61 95       	neg	r22
    3abc:	7f 4f       	sbci	r23, 0xFF	; 255
    3abe:	8f 4f       	sbci	r24, 0xFF	; 255
    3ac0:	9f 4f       	sbci	r25, 0xFF	; 255
    3ac2:	08 95       	ret

00003ac4 <__tablejump2__>:
    3ac4:	ee 0f       	add	r30, r30
    3ac6:	ff 1f       	adc	r31, r31
    3ac8:	00 24       	eor	r0, r0
    3aca:	00 1c       	adc	r0, r0
    3acc:	0b be       	out	0x3b, r0	; 59
    3ace:	07 90       	elpm	r0, Z+
    3ad0:	f6 91       	elpm	r31, Z
    3ad2:	e0 2d       	mov	r30, r0
    3ad4:	09 94       	ijmp

00003ad6 <__umulhisi3>:
    3ad6:	a2 9f       	mul	r26, r18
    3ad8:	b0 01       	movw	r22, r0
    3ada:	b3 9f       	mul	r27, r19
    3adc:	c0 01       	movw	r24, r0
    3ade:	a3 9f       	mul	r26, r19
    3ae0:	70 0d       	add	r23, r0
    3ae2:	81 1d       	adc	r24, r1
    3ae4:	11 24       	eor	r1, r1
    3ae6:	91 1d       	adc	r25, r1
    3ae8:	b2 9f       	mul	r27, r18
    3aea:	70 0d       	add	r23, r0
    3aec:	81 1d       	adc	r24, r1
    3aee:	11 24       	eor	r1, r1
    3af0:	91 1d       	adc	r25, r1
    3af2:	08 95       	ret

00003af4 <__muluhisi3>:
    3af4:	f0 df       	rcall	.-32     	; 0x3ad6 <__umulhisi3>
    3af6:	a5 9f       	mul	r26, r21
    3af8:	90 0d       	add	r25, r0
    3afa:	b4 9f       	mul	r27, r20
    3afc:	90 0d       	add	r25, r0
    3afe:	a4 9f       	mul	r26, r20
    3b00:	80 0d       	add	r24, r0
    3b02:	91 1d       	adc	r25, r1
    3b04:	11 24       	eor	r1, r1
    3b06:	08 95       	ret

00003b08 <strcmp>:
    3b08:	fb 01       	movw	r30, r22
    3b0a:	dc 01       	movw	r26, r24
    3b0c:	8d 91       	ld	r24, X+
    3b0e:	01 90       	ld	r0, Z+
    3b10:	80 19       	sub	r24, r0
    3b12:	01 10       	cpse	r0, r1
    3b14:	d9 f3       	breq	.-10     	; 0x3b0c <strcmp+0x4>
    3b16:	99 0b       	sbc	r25, r25
    3b18:	08 95       	ret

00003b1a <strcpy>:
    3b1a:	fb 01       	movw	r30, r22
    3b1c:	dc 01       	movw	r26, r24
    3b1e:	01 90       	ld	r0, Z+
    3b20:	0d 92       	st	X+, r0
    3b22:	00 20       	and	r0, r0
    3b24:	e1 f7       	brne	.-8      	; 0x3b1e <strcpy+0x4>
    3b26:	08 95       	ret

00003b28 <strncpy>:
    3b28:	fb 01       	movw	r30, r22
    3b2a:	dc 01       	movw	r26, r24
    3b2c:	41 50       	subi	r20, 0x01	; 1
    3b2e:	50 40       	sbci	r21, 0x00	; 0
    3b30:	48 f0       	brcs	.+18     	; 0x3b44 <strncpy+0x1c>
    3b32:	01 90       	ld	r0, Z+
    3b34:	0d 92       	st	X+, r0
    3b36:	00 20       	and	r0, r0
    3b38:	c9 f7       	brne	.-14     	; 0x3b2c <strncpy+0x4>
    3b3a:	01 c0       	rjmp	.+2      	; 0x3b3e <strncpy+0x16>
    3b3c:	1d 92       	st	X+, r1
    3b3e:	41 50       	subi	r20, 0x01	; 1
    3b40:	50 40       	sbci	r21, 0x00	; 0
    3b42:	e0 f7       	brcc	.-8      	; 0x3b3c <strncpy+0x14>
    3b44:	08 95       	ret

00003b46 <_exit>:
    3b46:	f8 94       	cli

00003b48 <__stop_program>:
    3b48:	ff cf       	rjmp	.-2      	; 0x3b48 <__stop_program>
