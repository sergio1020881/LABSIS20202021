
Atmega128.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004a  00800100  00002aa4  00002b38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002aa4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000132  0080014a  0080014a  00002b82  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002b82  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002bb4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000006a0  00000000  00000000  00002bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000736e  00000000  00000000  00003290  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001c29  00000000  00000000  0000a5fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000040f6  00000000  00000000  0000c227  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001334  00000000  00000000  00010320  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001605  00000000  00000000  00011654  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006657  00000000  00000000  00012c59  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000630  00000000  00000000  000192b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	60 c0       	rjmp	.+192    	; 0xc2 <__ctors_end>
       2:	00 00       	nop
       4:	7d c0       	rjmp	.+250    	; 0x100 <__bad_interrupt>
       6:	00 00       	nop
       8:	7b c0       	rjmp	.+246    	; 0x100 <__bad_interrupt>
       a:	00 00       	nop
       c:	79 c0       	rjmp	.+242    	; 0x100 <__bad_interrupt>
       e:	00 00       	nop
      10:	77 c0       	rjmp	.+238    	; 0x100 <__bad_interrupt>
      12:	00 00       	nop
      14:	75 c0       	rjmp	.+234    	; 0x100 <__bad_interrupt>
      16:	00 00       	nop
      18:	73 c0       	rjmp	.+230    	; 0x100 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	71 c0       	rjmp	.+226    	; 0x100 <__bad_interrupt>
      1e:	00 00       	nop
      20:	6f c0       	rjmp	.+222    	; 0x100 <__bad_interrupt>
      22:	00 00       	nop
      24:	6d c0       	rjmp	.+218    	; 0x100 <__bad_interrupt>
      26:	00 00       	nop
      28:	5c c3       	rjmp	.+1720   	; 0x6e2 <__vector_10>
      2a:	00 00       	nop
      2c:	28 c3       	rjmp	.+1616   	; 0x67e <__vector_11>
      2e:	00 00       	nop
      30:	30 c3       	rjmp	.+1632   	; 0x692 <__vector_12>
      32:	00 00       	nop
      34:	38 c3       	rjmp	.+1648   	; 0x6a6 <__vector_13>
      36:	00 00       	nop
      38:	4a c3       	rjmp	.+1684   	; 0x6ce <__vector_14>
      3a:	00 00       	nop
      3c:	61 c0       	rjmp	.+194    	; 0x100 <__bad_interrupt>
      3e:	00 00       	nop
      40:	14 c3       	rjmp	.+1576   	; 0x66a <__vector_16>
      42:	00 00       	nop
      44:	5d c0       	rjmp	.+186    	; 0x100 <__bad_interrupt>
      46:	00 00       	nop
      48:	88 c3       	rjmp	.+1808   	; 0x75a <__vector_18>
      4a:	00 00       	nop
      4c:	be c3       	rjmp	.+1916   	; 0x7ca <__vector_19>
      4e:	00 00       	nop
      50:	57 c0       	rjmp	.+174    	; 0x100 <__bad_interrupt>
      52:	00 00       	nop
      54:	f6 c0       	rjmp	.+492    	; 0x242 <__vector_21>
      56:	00 00       	nop
      58:	53 c0       	rjmp	.+166    	; 0x100 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	51 c0       	rjmp	.+162    	; 0x100 <__bad_interrupt>
      5e:	00 00       	nop
      60:	2c c3       	rjmp	.+1624   	; 0x6ba <__vector_24>
      62:	00 00       	nop
      64:	48 c3       	rjmp	.+1680   	; 0x6f6 <__vector_25>
      66:	00 00       	nop
      68:	50 c3       	rjmp	.+1696   	; 0x70a <__vector_26>
      6a:	00 00       	nop
      6c:	58 c3       	rjmp	.+1712   	; 0x71e <__vector_27>
      6e:	00 00       	nop
      70:	60 c3       	rjmp	.+1728   	; 0x732 <__vector_28>
      72:	00 00       	nop
      74:	68 c3       	rjmp	.+1744   	; 0x746 <__vector_29>
      76:	00 00       	nop
      78:	d1 c3       	rjmp	.+1954   	; 0x81c <__vector_30>
      7a:	00 00       	nop
      7c:	0a c4       	rjmp	.+2068   	; 0x892 <__vector_31>
      7e:	00 00       	nop
      80:	3f c0       	rjmp	.+126    	; 0x100 <__bad_interrupt>
      82:	00 00       	nop
      84:	3d c0       	rjmp	.+122    	; 0x100 <__bad_interrupt>
      86:	00 00       	nop
      88:	3b c0       	rjmp	.+118    	; 0x100 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	56 02       	muls	r21, r22
      8e:	5a 02       	muls	r21, r26
      90:	5e 02       	muls	r21, r30
      92:	62 02       	muls	r22, r18
      94:	66 02       	muls	r22, r22
      96:	6d 02       	muls	r22, r29
      98:	74 02       	muls	r23, r20
      9a:	7b 02       	muls	r23, r27
      9c:	7f 02       	muls	r23, r31
      9e:	86 02       	muls	r24, r22
      a0:	8d 02       	muls	r24, r29
      a2:	94 02       	muls	r25, r20
      a4:	98 02       	muls	r25, r24
      a6:	9f 02       	muls	r25, r31
      a8:	a6 02       	muls	r26, r22
      aa:	c2 02       	muls	r28, r18
      ac:	c6 02       	muls	r28, r22
      ae:	ca 02       	muls	r28, r26
      b0:	ce 02       	muls	r28, r30
      b2:	d4 02       	muls	r29, r20
      b4:	d8 02       	muls	r29, r24
      b6:	dc 02       	muls	r29, r28
      b8:	e0 02       	muls	r30, r16
      ba:	e9 02       	muls	r30, r25
      bc:	ed 02       	muls	r30, r29
      be:	f1 02       	muls	r31, r17
      c0:	fa 02       	muls	r31, r26

000000c2 <__ctors_end>:
      c2:	11 24       	eor	r1, r1
      c4:	1f be       	out	0x3f, r1	; 63
      c6:	cf ef       	ldi	r28, 0xFF	; 255
      c8:	d0 e1       	ldi	r29, 0x10	; 16
      ca:	de bf       	out	0x3e, r29	; 62
      cc:	cd bf       	out	0x3d, r28	; 61

000000ce <__do_copy_data>:
      ce:	11 e0       	ldi	r17, 0x01	; 1
      d0:	a0 e0       	ldi	r26, 0x00	; 0
      d2:	b1 e0       	ldi	r27, 0x01	; 1
      d4:	e4 ea       	ldi	r30, 0xA4	; 164
      d6:	fa e2       	ldi	r31, 0x2A	; 42
      d8:	00 e0       	ldi	r16, 0x00	; 0
      da:	0b bf       	out	0x3b, r16	; 59
      dc:	02 c0       	rjmp	.+4      	; 0xe2 <__do_copy_data+0x14>
      de:	07 90       	elpm	r0, Z+
      e0:	0d 92       	st	X+, r0
      e2:	aa 34       	cpi	r26, 0x4A	; 74
      e4:	b1 07       	cpc	r27, r17
      e6:	d9 f7       	brne	.-10     	; 0xde <__do_copy_data+0x10>

000000e8 <__do_clear_bss>:
      e8:	22 e0       	ldi	r18, 0x02	; 2
      ea:	aa e4       	ldi	r26, 0x4A	; 74
      ec:	b1 e0       	ldi	r27, 0x01	; 1
      ee:	01 c0       	rjmp	.+2      	; 0xf2 <.do_clear_bss_start>

000000f0 <.do_clear_bss_loop>:
      f0:	1d 92       	st	X+, r1

000000f2 <.do_clear_bss_start>:
      f2:	ac 37       	cpi	r26, 0x7C	; 124
      f4:	b2 07       	cpc	r27, r18
      f6:	e1 f7       	brne	.-8      	; 0xf0 <.do_clear_bss_loop>
      f8:	0e 94 ee 10 	call	0x21dc	; 0x21dc <main>
      fc:	0c 94 50 15 	jmp	0x2aa0	; 0x2aa0 <_exit>

00000100 <__bad_interrupt>:
     100:	7f cf       	rjmp	.-258    	; 0x0 <__vectors>

00000102 <ANALOG_read>:
* Returns selected Channel ADC_VALUE
*/
{
	uint8_t ADSC_FLAG;
	ADSC_FLAG=(1<<ADSC);
	if( !(ADC_CONTROL & ADSC_FLAG) ){
     102:	36 9b       	sbis	0x06, 6	; 6
		//ADC_SELECT
		/***/
		ADC_CONTROL|=(1<<ADSC);
     104:	36 9a       	sbi	0x06, 6	; 6
	}	
	return ADC_VALUE[selection];
     106:	fc 01       	movw	r30, r24
     108:	ee 0f       	add	r30, r30
     10a:	ff 1f       	adc	r31, r31
     10c:	ed 59       	subi	r30, 0x9D	; 157
     10e:	fe 4f       	sbci	r31, 0xFE	; 254
     110:	80 81       	ld	r24, Z
     112:	91 81       	ldd	r25, Z+1	; 0x01
}
     114:	08 95       	ret

00000116 <ANALOGenable>:
ANALOG ANALOGenable( uint8_t Vreff, uint8_t Divfactor, int n_channel, ... )
/*
* Interrupt running mode setup
* setup, and list of channels to be probed
*/
{
     116:	0f 93       	push	r16
     118:	1f 93       	push	r17
     11a:	cf 93       	push	r28
     11c:	df 93       	push	r29
     11e:	cd b7       	in	r28, 0x3d	; 61
     120:	de b7       	in	r29, 0x3e	; 62
     122:	9f 81       	ldd	r25, Y+7	; 0x07
     124:	68 85       	ldd	r22, Y+8	; 0x08
     126:	49 85       	ldd	r20, Y+9	; 0x09
     128:	5a 85       	ldd	r21, Y+10	; 0x0a
	/***LOCAL VARIABLES***/
	uint8_t tSREG;
	va_list list;
	int i;
	//inic variables
	tSREG=SREG;
     12a:	1f b7       	in	r17, 0x3f	; 63
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
     12c:	8f b7       	in	r24, 0x3f	; 63
     12e:	8f 77       	andi	r24, 0x7F	; 127
     130:	8f bf       	out	0x3f, r24	; 63
	/***GLOBAL VARIABLES INICIALIZE***/
	ADC_N_CHANNEL=n_channel;
     132:	50 93 52 01 	sts	0x0152, r21	; 0x800152 <ADC_N_CHANNEL+0x1>
     136:	40 93 51 01 	sts	0x0151, r20	; 0x800151 <ADC_N_CHANNEL>
	ADC_SELECTOR=0;
     13a:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <ADC_SELECTOR+0x1>
     13e:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <ADC_SELECTOR>
	adc_n_sample=0;
     142:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__data_end>
	//import parametros
	//inic parameters
	//Direccionar apontadores para PROTOTIPOS
	analog.read=ANALOG_read;
		/******/
		ADC_SELECT&=~(3<<REFS0);
     146:	87 b1       	in	r24, 0x07	; 7
     148:	8f 73       	andi	r24, 0x3F	; 63
     14a:	87 b9       	out	0x07, r24	; 7
		switch( Vreff ){
     14c:	91 30       	cpi	r25, 0x01	; 1
     14e:	19 f0       	breq	.+6      	; 0x156 <ANALOGenable+0x40>
     150:	93 30       	cpi	r25, 0x03	; 3
     152:	21 f0       	breq	.+8      	; 0x15c <ANALOGenable+0x46>
     154:	08 c0       	rjmp	.+16     	; 0x166 <ANALOGenable+0x50>
			case 0:
				analog.VREFF=0;
				break;
			case 1:
				ADC_SELECT|=(1<<REFS0);
     156:	3e 9a       	sbi	0x07, 6	; 7
				analog.VREFF=1;
     158:	01 e0       	ldi	r16, 0x01	; 1
				break;
     15a:	06 c0       	rjmp	.+12     	; 0x168 <ANALOGenable+0x52>
			case 3:
				ADC_SELECT|=(3<<REFS0);
     15c:	87 b1       	in	r24, 0x07	; 7
     15e:	80 6c       	ori	r24, 0xC0	; 192
     160:	87 b9       	out	0x07, r24	; 7
				analog.VREFF=3;
     162:	03 e0       	ldi	r16, 0x03	; 3
				break;
     164:	01 c0       	rjmp	.+2      	; 0x168 <ANALOGenable+0x52>
	analog.read=ANALOG_read;
		/******/
		ADC_SELECT&=~(3<<REFS0);
		switch( Vreff ){
			case 0:
				analog.VREFF=0;
     166:	00 e0       	ldi	r16, 0x00	; 0
			default:
				analog.VREFF=0;
				break;
		}
		//
		ADC_SELECT&=~(1<<ADLAR);
     168:	3d 98       	cbi	0x07, 5	; 7
		/******/
		va_start(list, n_channel);
		for(i=0;i<n_channel;i++){
     16a:	14 16       	cp	r1, r20
     16c:	15 06       	cpc	r1, r21
     16e:	8c f4       	brge	.+34     	; 0x192 <ANALOGenable+0x7c>
     170:	de 01       	movw	r26, r28
     172:	1b 96       	adiw	r26, 0x0b	; 11
     174:	80 e0       	ldi	r24, 0x00	; 0
     176:	90 e0       	ldi	r25, 0x00	; 0
			ADC_CHANNEL_GAIN[i] = va_arg(list, int);
     178:	2d 91       	ld	r18, X+
     17a:	3d 91       	ld	r19, X+
     17c:	fc 01       	movw	r30, r24
     17e:	ee 0f       	add	r30, r30
     180:	ff 1f       	adc	r31, r31
     182:	ed 5a       	subi	r30, 0xAD	; 173
     184:	fe 4f       	sbci	r31, 0xFE	; 254
     186:	31 83       	std	Z+1, r19	; 0x01
     188:	20 83       	st	Z, r18
		}
		//
		ADC_SELECT&=~(1<<ADLAR);
		/******/
		va_start(list, n_channel);
		for(i=0;i<n_channel;i++){
     18a:	01 96       	adiw	r24, 0x01	; 1
     18c:	48 17       	cp	r20, r24
     18e:	59 07       	cpc	r21, r25
     190:	99 f7       	brne	.-26     	; 0x178 <ANALOGenable+0x62>
			ADC_CHANNEL_GAIN[i] = va_arg(list, int);
		}
		va_end(list);
		ADC_SELECT&=~MUX_MASK;
     192:	87 b1       	in	r24, 0x07	; 7
     194:	80 7e       	andi	r24, 0xE0	; 224
     196:	87 b9       	out	0x07, r24	; 7
		ADC_SELECT|=(MUX_MASK & ADC_CHANNEL_GAIN[ADC_SELECTOR]);
     198:	e0 91 4f 01 	lds	r30, 0x014F	; 0x80014f <ADC_SELECTOR>
     19c:	f0 91 50 01 	lds	r31, 0x0150	; 0x800150 <ADC_SELECTOR+0x1>
     1a0:	ee 0f       	add	r30, r30
     1a2:	ff 1f       	adc	r31, r31
     1a4:	ed 5a       	subi	r30, 0xAD	; 173
     1a6:	fe 4f       	sbci	r31, 0xFE	; 254
     1a8:	80 81       	ld	r24, Z
     1aa:	91 81       	ldd	r25, Z+1	; 0x01
     1ac:	27 b1       	in	r18, 0x07	; 7
     1ae:	8f 71       	andi	r24, 0x1F	; 31
     1b0:	99 27       	eor	r25, r25
     1b2:	82 2b       	or	r24, r18
     1b4:	87 b9       	out	0x07, r24	; 7
		/******/
		ADC_CONTROL|=(1<<ADEN);
     1b6:	37 9a       	sbi	0x06, 7	; 6
		ADC_CONTROL|=(1<<ADSC);
     1b8:	36 9a       	sbi	0x06, 6	; 6
		ADC_CONTROL&=~(1<<ADFR);
     1ba:	35 98       	cbi	0x06, 5	; 6
		ADC_CONTROL|=(1<<ADIE);
     1bc:	33 9a       	sbi	0x06, 3	; 6
		/******/
		ADC_CONTROL&=~(7<<ADPS0);
     1be:	86 b1       	in	r24, 0x06	; 6
     1c0:	88 7f       	andi	r24, 0xF8	; 248
     1c2:	86 b9       	out	0x06, r24	; 6
		switch( Divfactor ){
     1c4:	60 31       	cpi	r22, 0x10	; 16
     1c6:	d1 f0       	breq	.+52     	; 0x1fc <ANALOGenable+0xe6>
     1c8:	38 f4       	brcc	.+14     	; 0x1d8 <ANALOGenable+0xc2>
     1ca:	64 30       	cpi	r22, 0x04	; 4
     1cc:	79 f0       	breq	.+30     	; 0x1ec <ANALOGenable+0xd6>
     1ce:	68 30       	cpi	r22, 0x08	; 8
     1d0:	81 f0       	breq	.+32     	; 0x1f2 <ANALOGenable+0xdc>
     1d2:	62 30       	cpi	r22, 0x02	; 2
     1d4:	29 f5       	brne	.+74     	; 0x220 <ANALOGenable+0x10a>
     1d6:	07 c0       	rjmp	.+14     	; 0x1e6 <ANALOGenable+0xd0>
     1d8:	60 34       	cpi	r22, 0x40	; 64
     1da:	c1 f0       	breq	.+48     	; 0x20c <ANALOGenable+0xf6>
     1dc:	60 38       	cpi	r22, 0x80	; 128
     1de:	d9 f0       	breq	.+54     	; 0x216 <ANALOGenable+0x100>
     1e0:	60 32       	cpi	r22, 0x20	; 32
     1e2:	f1 f4       	brne	.+60     	; 0x220 <ANALOGenable+0x10a>
     1e4:	0e c0       	rjmp	.+28     	; 0x202 <ANALOGenable+0xec>
			case 2://1
				ADC_CONTROL|=(1<<ADPS0);
     1e6:	30 9a       	sbi	0x06, 0	; 6
				analog.DIVISION_FACTOR=2;
     1e8:	22 e0       	ldi	r18, 0x02	; 2
				break;
     1ea:	1e c0       	rjmp	.+60     	; 0x228 <ANALOGenable+0x112>
			case 4://2
				ADC_CONTROL|=(1<<ADPS1);
     1ec:	31 9a       	sbi	0x06, 1	; 6
				analog.DIVISION_FACTOR=4;
     1ee:	24 e0       	ldi	r18, 0x04	; 4
				break;
     1f0:	1b c0       	rjmp	.+54     	; 0x228 <ANALOGenable+0x112>
			case 8://3
				ADC_CONTROL|=(3<<ADPS0);
     1f2:	86 b1       	in	r24, 0x06	; 6
     1f4:	83 60       	ori	r24, 0x03	; 3
     1f6:	86 b9       	out	0x06, r24	; 6
				analog.DIVISION_FACTOR=8;
     1f8:	28 e0       	ldi	r18, 0x08	; 8
				break;
     1fa:	16 c0       	rjmp	.+44     	; 0x228 <ANALOGenable+0x112>
			case 16://4
				ADC_CONTROL|=(1<<ADPS2);
     1fc:	32 9a       	sbi	0x06, 2	; 6
				analog.DIVISION_FACTOR=16;
     1fe:	20 e1       	ldi	r18, 0x10	; 16
				break;
     200:	13 c0       	rjmp	.+38     	; 0x228 <ANALOGenable+0x112>
			case 32://5
				ADC_CONTROL|=(5<<ADPS0);
     202:	86 b1       	in	r24, 0x06	; 6
     204:	85 60       	ori	r24, 0x05	; 5
     206:	86 b9       	out	0x06, r24	; 6
				analog.DIVISION_FACTOR=32;
     208:	20 e2       	ldi	r18, 0x20	; 32
				break;
     20a:	0e c0       	rjmp	.+28     	; 0x228 <ANALOGenable+0x112>
			case 64://6
				ADC_CONTROL|=(6<<ADPS0);
     20c:	86 b1       	in	r24, 0x06	; 6
     20e:	86 60       	ori	r24, 0x06	; 6
     210:	86 b9       	out	0x06, r24	; 6
				analog.DIVISION_FACTOR=64;
     212:	20 e4       	ldi	r18, 0x40	; 64
				break;
     214:	09 c0       	rjmp	.+18     	; 0x228 <ANALOGenable+0x112>
			case 128://7
				ADC_CONTROL|=(7<<ADPS0);
     216:	86 b1       	in	r24, 0x06	; 6
     218:	87 60       	ori	r24, 0x07	; 7
     21a:	86 b9       	out	0x06, r24	; 6
				analog.DIVISION_FACTOR=128;
     21c:	20 e8       	ldi	r18, 0x80	; 128
				break;
     21e:	04 c0       	rjmp	.+8      	; 0x228 <ANALOGenable+0x112>
			default:
				ADC_CONTROL|=(7<<ADPS0);
     220:	86 b1       	in	r24, 0x06	; 6
     222:	87 60       	ori	r24, 0x07	; 7
     224:	86 b9       	out	0x06, r24	; 6
				analog.DIVISION_FACTOR=128;
     226:	20 e8       	ldi	r18, 0x80	; 128
				break;
		}		
		
	SREG=tSREG;
     228:	1f bf       	out	0x3f, r17	; 63
	SREG|=(1<<GLOBAL_INTERRUPT_ENABLE);
     22a:	8f b7       	in	r24, 0x3f	; 63
     22c:	80 68       	ori	r24, 0x80	; 128
     22e:	8f bf       	out	0x3f, r24	; 63
	/******/
	return analog;
     230:	60 2f       	mov	r22, r16
     232:	72 2f       	mov	r23, r18
     234:	81 e8       	ldi	r24, 0x81	; 129
     236:	90 e0       	ldi	r25, 0x00	; 0
}
     238:	df 91       	pop	r29
     23a:	cf 91       	pop	r28
     23c:	1f 91       	pop	r17
     23e:	0f 91       	pop	r16
     240:	08 95       	ret

00000242 <__vector_21>:
ISR(ANALOG_INTERRUPT)
/*************************************************************************
Function: ANALOG interrupt
Purpose:  Read Analog Input
**************************************************************************/
{
     242:	1f 92       	push	r1
     244:	0f 92       	push	r0
     246:	0f b6       	in	r0, 0x3f	; 63
     248:	0f 92       	push	r0
     24a:	11 24       	eor	r1, r1
     24c:	0b b6       	in	r0, 0x3b	; 59
     24e:	0f 92       	push	r0
     250:	2f 93       	push	r18
     252:	3f 93       	push	r19
     254:	8f 93       	push	r24
     256:	9f 93       	push	r25
     258:	ef 93       	push	r30
     25a:	ff 93       	push	r31
	/******/
	adc_tmp=ADCL;
     25c:	84 b1       	in	r24, 0x04	; 4
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <adc_tmp+0x1>
     264:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <adc_tmp>
	adc_tmp|=(ADCH<<8);
     268:	25 b1       	in	r18, 0x05	; 5
     26a:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <adc_tmp>
     26e:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <adc_tmp+0x1>
     272:	92 2b       	or	r25, r18
     274:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <adc_tmp+0x1>
     278:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <adc_tmp>
	if(adc_n_sample < (1<<ADC_NUMBER_SAMPLE)){
     27c:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <__data_end>
     280:	84 30       	cpi	r24, 0x04	; 4
     282:	a0 f4       	brcc	.+40     	; 0x2ac <__vector_21+0x6a>
		adc_n_sample++;
     284:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <__data_end>
     288:	8f 5f       	subi	r24, 0xFF	; 255
     28a:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <__data_end>
		adc_sample+=adc_tmp;
     28e:	20 91 4b 01 	lds	r18, 0x014B	; 0x80014b <adc_tmp>
     292:	30 91 4c 01 	lds	r19, 0x014C	; 0x80014c <adc_tmp+0x1>
     296:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <adc_sample>
     29a:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <adc_sample+0x1>
     29e:	82 0f       	add	r24, r18
     2a0:	93 1f       	adc	r25, r19
     2a2:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <adc_sample+0x1>
     2a6:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <adc_sample>
     2aa:	43 c0       	rjmp	.+134    	; 0x332 <__vector_21+0xf0>
	}else{
		ADC_VALUE[ADC_SELECTOR]=adc_sample>>ADC_NUMBER_SAMPLE;
     2ac:	e0 91 4f 01 	lds	r30, 0x014F	; 0x80014f <ADC_SELECTOR>
     2b0:	f0 91 50 01 	lds	r31, 0x0150	; 0x800150 <ADC_SELECTOR+0x1>
     2b4:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <adc_sample>
     2b8:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <adc_sample+0x1>
     2bc:	95 95       	asr	r25
     2be:	87 95       	ror	r24
     2c0:	95 95       	asr	r25
     2c2:	87 95       	ror	r24
     2c4:	ee 0f       	add	r30, r30
     2c6:	ff 1f       	adc	r31, r31
     2c8:	ed 59       	subi	r30, 0x9D	; 157
     2ca:	fe 4f       	sbci	r31, 0xFE	; 254
     2cc:	91 83       	std	Z+1, r25	; 0x01
     2ce:	80 83       	st	Z, r24
		adc_n_sample=adc_sample=0;
     2d0:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <adc_sample+0x1>
     2d4:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <adc_sample>
     2d8:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__data_end>
		/******/
		if(ADC_SELECTOR < ADC_N_CHANNEL)
     2dc:	20 91 4f 01 	lds	r18, 0x014F	; 0x80014f <ADC_SELECTOR>
     2e0:	30 91 50 01 	lds	r19, 0x0150	; 0x800150 <ADC_SELECTOR+0x1>
     2e4:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <ADC_N_CHANNEL>
     2e8:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <ADC_N_CHANNEL+0x1>
     2ec:	28 17       	cp	r18, r24
     2ee:	39 07       	cpc	r19, r25
     2f0:	54 f4       	brge	.+20     	; 0x306 <__vector_21+0xc4>
			ADC_SELECTOR++;
     2f2:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <ADC_SELECTOR>
     2f6:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <ADC_SELECTOR+0x1>
     2fa:	01 96       	adiw	r24, 0x01	; 1
     2fc:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <ADC_SELECTOR+0x1>
     300:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <ADC_SELECTOR>
     304:	04 c0       	rjmp	.+8      	; 0x30e <__vector_21+0xcc>
		else
			ADC_SELECTOR=0;
     306:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <ADC_SELECTOR+0x1>
     30a:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <ADC_SELECTOR>
		ADC_SELECT &= ~MUX_MASK;
     30e:	87 b1       	in	r24, 0x07	; 7
     310:	80 7e       	andi	r24, 0xE0	; 224
     312:	87 b9       	out	0x07, r24	; 7
		ADC_SELECT |= (ADC_CHANNEL_GAIN[ADC_SELECTOR] & MUX_MASK);
     314:	e0 91 4f 01 	lds	r30, 0x014F	; 0x80014f <ADC_SELECTOR>
     318:	f0 91 50 01 	lds	r31, 0x0150	; 0x800150 <ADC_SELECTOR+0x1>
     31c:	ee 0f       	add	r30, r30
     31e:	ff 1f       	adc	r31, r31
     320:	ed 5a       	subi	r30, 0xAD	; 173
     322:	fe 4f       	sbci	r31, 0xFE	; 254
     324:	80 81       	ld	r24, Z
     326:	91 81       	ldd	r25, Z+1	; 0x01
     328:	27 b1       	in	r18, 0x07	; 7
     32a:	8f 71       	andi	r24, 0x1F	; 31
     32c:	99 27       	eor	r25, r25
     32e:	82 2b       	or	r24, r18
     330:	87 b9       	out	0x07, r24	; 7
	}		
}
     332:	ff 91       	pop	r31
     334:	ef 91       	pop	r30
     336:	9f 91       	pop	r25
     338:	8f 91       	pop	r24
     33a:	3f 91       	pop	r19
     33c:	2f 91       	pop	r18
     33e:	0f 90       	pop	r0
     340:	0b be       	out	0x3b, r0	; 59
     342:	0f 90       	pop	r0
     344:	0f be       	out	0x3f, r0	; 63
     346:	0f 90       	pop	r0
     348:	1f 90       	pop	r1
     34a:	18 95       	reti

0000034c <TIMER_COUNTER1_start>:
		timer3.compareC=TIMER_COUNTER3_compareC;
		timer3.start=TIMER_COUNTER3_start;
		timer3.stop=TIMER_COUNTER3_stop;
		//
		return timer3;
	}
     34c:	20 91 fd 01 	lds	r18, 0x01FD	; 0x8001fd <timer1_state>
     350:	21 11       	cpse	r18, r1
     352:	42 c0       	rjmp	.+132    	; 0x3d8 <TIMER_COUNTER1_start+0x8c>
     354:	2f ef       	ldi	r18, 0xFF	; 255
     356:	3f ef       	ldi	r19, 0xFF	; 255
     358:	3b bd       	out	0x2b, r19	; 43
     35a:	2a bd       	out	0x2a, r18	; 42
     35c:	2e b5       	in	r18, 0x2e	; 46
     35e:	28 7f       	andi	r18, 0xF8	; 248
     360:	2e bd       	out	0x2e, r18	; 46
     362:	88 30       	cpi	r24, 0x08	; 8
     364:	91 05       	cpc	r25, r1
     366:	d1 f0       	breq	.+52     	; 0x39c <TIMER_COUNTER1_start+0x50>
     368:	48 f4       	brcc	.+18     	; 0x37c <TIMER_COUNTER1_start+0x30>
     36a:	83 30       	cpi	r24, 0x03	; 3
     36c:	91 05       	cpc	r25, r1
     36e:	31 f1       	breq	.+76     	; 0x3bc <TIMER_COUNTER1_start+0x70>
     370:	85 30       	cpi	r24, 0x05	; 5
     372:	91 05       	cpc	r25, r1
     374:	39 f1       	breq	.+78     	; 0x3c4 <TIMER_COUNTER1_start+0x78>
     376:	01 97       	sbiw	r24, 0x01	; 1
     378:	49 f5       	brne	.+82     	; 0x3cc <TIMER_COUNTER1_start+0x80>
     37a:	0c c0       	rjmp	.+24     	; 0x394 <TIMER_COUNTER1_start+0x48>
     37c:	81 15       	cp	r24, r1
     37e:	21 e0       	ldi	r18, 0x01	; 1
     380:	92 07       	cpc	r25, r18
     382:	a1 f0       	breq	.+40     	; 0x3ac <TIMER_COUNTER1_start+0x60>
     384:	81 15       	cp	r24, r1
     386:	24 e0       	ldi	r18, 0x04	; 4
     388:	92 07       	cpc	r25, r18
     38a:	a1 f0       	breq	.+40     	; 0x3b4 <TIMER_COUNTER1_start+0x68>
     38c:	80 34       	cpi	r24, 0x40	; 64
     38e:	91 05       	cpc	r25, r1
     390:	e9 f4       	brne	.+58     	; 0x3cc <TIMER_COUNTER1_start+0x80>
     392:	08 c0       	rjmp	.+16     	; 0x3a4 <TIMER_COUNTER1_start+0x58>
     394:	8e b5       	in	r24, 0x2e	; 46
     396:	81 60       	ori	r24, 0x01	; 1
     398:	8e bd       	out	0x2e, r24	; 46
     39a:	1b c0       	rjmp	.+54     	; 0x3d2 <TIMER_COUNTER1_start+0x86>
     39c:	8e b5       	in	r24, 0x2e	; 46
     39e:	82 60       	ori	r24, 0x02	; 2
     3a0:	8e bd       	out	0x2e, r24	; 46
     3a2:	17 c0       	rjmp	.+46     	; 0x3d2 <TIMER_COUNTER1_start+0x86>
     3a4:	8e b5       	in	r24, 0x2e	; 46
     3a6:	83 60       	ori	r24, 0x03	; 3
     3a8:	8e bd       	out	0x2e, r24	; 46
     3aa:	13 c0       	rjmp	.+38     	; 0x3d2 <TIMER_COUNTER1_start+0x86>
     3ac:	8e b5       	in	r24, 0x2e	; 46
     3ae:	84 60       	ori	r24, 0x04	; 4
     3b0:	8e bd       	out	0x2e, r24	; 46
     3b2:	0f c0       	rjmp	.+30     	; 0x3d2 <TIMER_COUNTER1_start+0x86>
     3b4:	8e b5       	in	r24, 0x2e	; 46
     3b6:	85 60       	ori	r24, 0x05	; 5
     3b8:	8e bd       	out	0x2e, r24	; 46
     3ba:	0b c0       	rjmp	.+22     	; 0x3d2 <TIMER_COUNTER1_start+0x86>
     3bc:	8e b5       	in	r24, 0x2e	; 46
     3be:	86 60       	ori	r24, 0x06	; 6
     3c0:	8e bd       	out	0x2e, r24	; 46
     3c2:	07 c0       	rjmp	.+14     	; 0x3d2 <TIMER_COUNTER1_start+0x86>
     3c4:	8e b5       	in	r24, 0x2e	; 46
     3c6:	87 60       	ori	r24, 0x07	; 7
     3c8:	8e bd       	out	0x2e, r24	; 46
     3ca:	03 c0       	rjmp	.+6      	; 0x3d2 <TIMER_COUNTER1_start+0x86>
     3cc:	8e b5       	in	r24, 0x2e	; 46
     3ce:	85 60       	ori	r24, 0x05	; 5
     3d0:	8e bd       	out	0x2e, r24	; 46
     3d2:	81 e0       	ldi	r24, 0x01	; 1
     3d4:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <timer1_state>
     3d8:	08 95       	ret

000003da <TIMER_COUNTER1_compoutmodeA>:
     3da:	9f b5       	in	r25, 0x2f	; 47
     3dc:	9f 73       	andi	r25, 0x3F	; 63
     3de:	9f bd       	out	0x2f, r25	; 47
     3e0:	82 30       	cpi	r24, 0x02	; 2
     3e2:	41 f0       	breq	.+16     	; 0x3f4 <TIMER_COUNTER1_compoutmodeA+0x1a>
     3e4:	83 30       	cpi	r24, 0x03	; 3
     3e6:	51 f0       	breq	.+20     	; 0x3fc <TIMER_COUNTER1_compoutmodeA+0x22>
     3e8:	81 30       	cpi	r24, 0x01	; 1
     3ea:	59 f4       	brne	.+22     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     3ec:	8f b5       	in	r24, 0x2f	; 47
     3ee:	80 64       	ori	r24, 0x40	; 64
     3f0:	8f bd       	out	0x2f, r24	; 47
     3f2:	08 95       	ret
     3f4:	8f b5       	in	r24, 0x2f	; 47
     3f6:	80 68       	ori	r24, 0x80	; 128
     3f8:	8f bd       	out	0x2f, r24	; 47
     3fa:	08 95       	ret
     3fc:	8f b5       	in	r24, 0x2f	; 47
     3fe:	80 6c       	ori	r24, 0xC0	; 192
     400:	8f bd       	out	0x2f, r24	; 47
     402:	08 95       	ret

00000404 <TIMER_COUNTER1_compoutmodeB>:
     404:	9f b5       	in	r25, 0x2f	; 47
     406:	9f 7c       	andi	r25, 0xCF	; 207
     408:	9f bd       	out	0x2f, r25	; 47
     40a:	82 30       	cpi	r24, 0x02	; 2
     40c:	41 f0       	breq	.+16     	; 0x41e <TIMER_COUNTER1_compoutmodeB+0x1a>
     40e:	83 30       	cpi	r24, 0x03	; 3
     410:	51 f0       	breq	.+20     	; 0x426 <TIMER_COUNTER1_compoutmodeB+0x22>
     412:	81 30       	cpi	r24, 0x01	; 1
     414:	59 f4       	brne	.+22     	; 0x42c <TIMER_COUNTER1_compoutmodeB+0x28>
     416:	8f b5       	in	r24, 0x2f	; 47
     418:	80 61       	ori	r24, 0x10	; 16
     41a:	8f bd       	out	0x2f, r24	; 47
     41c:	08 95       	ret
     41e:	8f b5       	in	r24, 0x2f	; 47
     420:	80 62       	ori	r24, 0x20	; 32
     422:	8f bd       	out	0x2f, r24	; 47
     424:	08 95       	ret
     426:	8f b5       	in	r24, 0x2f	; 47
     428:	80 63       	ori	r24, 0x30	; 48
     42a:	8f bd       	out	0x2f, r24	; 47
     42c:	08 95       	ret

0000042e <TIMER_COUNTER1_compoutmodeC>:
     42e:	9f b5       	in	r25, 0x2f	; 47
     430:	93 7f       	andi	r25, 0xF3	; 243
     432:	9f bd       	out	0x2f, r25	; 47
     434:	82 30       	cpi	r24, 0x02	; 2
     436:	41 f0       	breq	.+16     	; 0x448 <TIMER_COUNTER1_compoutmodeC+0x1a>
     438:	83 30       	cpi	r24, 0x03	; 3
     43a:	51 f0       	breq	.+20     	; 0x450 <TIMER_COUNTER1_compoutmodeC+0x22>
     43c:	81 30       	cpi	r24, 0x01	; 1
     43e:	59 f4       	brne	.+22     	; 0x456 <TIMER_COUNTER1_compoutmodeC+0x28>
     440:	8f b5       	in	r24, 0x2f	; 47
     442:	84 60       	ori	r24, 0x04	; 4
     444:	8f bd       	out	0x2f, r24	; 47
     446:	08 95       	ret
     448:	8f b5       	in	r24, 0x2f	; 47
     44a:	88 60       	ori	r24, 0x08	; 8
     44c:	8f bd       	out	0x2f, r24	; 47
     44e:	08 95       	ret
     450:	8f b5       	in	r24, 0x2f	; 47
     452:	8c 60       	ori	r24, 0x0C	; 12
     454:	8f bd       	out	0x2f, r24	; 47
     456:	08 95       	ret

00000458 <TIMER_COUNTER1_compareA>:
     458:	9b bd       	out	0x2b, r25	; 43
     45a:	8a bd       	out	0x2a, r24	; 42
     45c:	08 95       	ret

0000045e <TIMER_COUNTER1_compareB>:
     45e:	99 bd       	out	0x29, r25	; 41
     460:	88 bd       	out	0x28, r24	; 40
     462:	08 95       	ret

00000464 <TIMER_COUNTER1_compareC>:
     464:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     468:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     46c:	08 95       	ret

0000046e <TIMER_COUNTER1_stop>:
     46e:	8e b5       	in	r24, 0x2e	; 46
     470:	88 7f       	andi	r24, 0xF8	; 248
     472:	8e bd       	out	0x2e, r24	; 46
     474:	1d bc       	out	0x2d, r1	; 45
     476:	1c bc       	out	0x2c, r1	; 44
     478:	10 92 fd 01 	sts	0x01FD, r1	; 0x8001fd <timer1_state>
     47c:	08 95       	ret

0000047e <TIMER_COUNTER1enable>:
     47e:	0f 93       	push	r16
     480:	1f 93       	push	r17
     482:	dc 01       	movw	r26, r24
     484:	10 92 fd 01 	sts	0x01FD, r1	; 0x8001fd <timer1_state>
     488:	8f b5       	in	r24, 0x2f	; 47
     48a:	8c 7f       	andi	r24, 0xFC	; 252
     48c:	8f bd       	out	0x2f, r24	; 47
     48e:	8e b5       	in	r24, 0x2e	; 46
     490:	87 7e       	andi	r24, 0xE7	; 231
     492:	8e bd       	out	0x2e, r24	; 46
     494:	06 2f       	mov	r16, r22
     496:	10 e0       	ldi	r17, 0x00	; 0
     498:	f8 01       	movw	r30, r16
     49a:	31 97       	sbiw	r30, 0x01	; 1
     49c:	ef 30       	cpi	r30, 0x0F	; 15
     49e:	f1 05       	cpc	r31, r1
     4a0:	08 f0       	brcs	.+2      	; 0x4a4 <TIMER_COUNTER1enable+0x26>
     4a2:	5a c0       	rjmp	.+180    	; 0x558 <TIMER_COUNTER1enable+0xda>
     4a4:	ea 5b       	subi	r30, 0xBA	; 186
     4a6:	ff 4f       	sbci	r31, 0xFF	; 255
     4a8:	0c 94 1e 15 	jmp	0x2a3c	; 0x2a3c <__tablejump2__>
     4ac:	8f b5       	in	r24, 0x2f	; 47
     4ae:	81 60       	ori	r24, 0x01	; 1
     4b0:	8f bd       	out	0x2f, r24	; 47
     4b2:	52 c0       	rjmp	.+164    	; 0x558 <TIMER_COUNTER1enable+0xda>
     4b4:	8f b5       	in	r24, 0x2f	; 47
     4b6:	82 60       	ori	r24, 0x02	; 2
     4b8:	8f bd       	out	0x2f, r24	; 47
     4ba:	4e c0       	rjmp	.+156    	; 0x558 <TIMER_COUNTER1enable+0xda>
     4bc:	8f b5       	in	r24, 0x2f	; 47
     4be:	83 60       	ori	r24, 0x03	; 3
     4c0:	8f bd       	out	0x2f, r24	; 47
     4c2:	4a c0       	rjmp	.+148    	; 0x558 <TIMER_COUNTER1enable+0xda>
     4c4:	8e b5       	in	r24, 0x2e	; 46
     4c6:	88 60       	ori	r24, 0x08	; 8
     4c8:	8e bd       	out	0x2e, r24	; 46
     4ca:	46 c0       	rjmp	.+140    	; 0x558 <TIMER_COUNTER1enable+0xda>
     4cc:	8f b5       	in	r24, 0x2f	; 47
     4ce:	81 60       	ori	r24, 0x01	; 1
     4d0:	8f bd       	out	0x2f, r24	; 47
     4d2:	8e b5       	in	r24, 0x2e	; 46
     4d4:	88 60       	ori	r24, 0x08	; 8
     4d6:	8e bd       	out	0x2e, r24	; 46
     4d8:	3f c0       	rjmp	.+126    	; 0x558 <TIMER_COUNTER1enable+0xda>
     4da:	8f b5       	in	r24, 0x2f	; 47
     4dc:	82 60       	ori	r24, 0x02	; 2
     4de:	8f bd       	out	0x2f, r24	; 47
     4e0:	8e b5       	in	r24, 0x2e	; 46
     4e2:	88 60       	ori	r24, 0x08	; 8
     4e4:	8e bd       	out	0x2e, r24	; 46
     4e6:	38 c0       	rjmp	.+112    	; 0x558 <TIMER_COUNTER1enable+0xda>
     4e8:	8f b5       	in	r24, 0x2f	; 47
     4ea:	83 60       	ori	r24, 0x03	; 3
     4ec:	8f bd       	out	0x2f, r24	; 47
     4ee:	8e b5       	in	r24, 0x2e	; 46
     4f0:	88 60       	ori	r24, 0x08	; 8
     4f2:	8e bd       	out	0x2e, r24	; 46
     4f4:	31 c0       	rjmp	.+98     	; 0x558 <TIMER_COUNTER1enable+0xda>
     4f6:	8e b5       	in	r24, 0x2e	; 46
     4f8:	80 61       	ori	r24, 0x10	; 16
     4fa:	8e bd       	out	0x2e, r24	; 46
     4fc:	2d c0       	rjmp	.+90     	; 0x558 <TIMER_COUNTER1enable+0xda>
     4fe:	8f b5       	in	r24, 0x2f	; 47
     500:	81 60       	ori	r24, 0x01	; 1
     502:	8f bd       	out	0x2f, r24	; 47
     504:	8e b5       	in	r24, 0x2e	; 46
     506:	80 61       	ori	r24, 0x10	; 16
     508:	8e bd       	out	0x2e, r24	; 46
     50a:	26 c0       	rjmp	.+76     	; 0x558 <TIMER_COUNTER1enable+0xda>
     50c:	8f b5       	in	r24, 0x2f	; 47
     50e:	82 60       	ori	r24, 0x02	; 2
     510:	8f bd       	out	0x2f, r24	; 47
     512:	8e b5       	in	r24, 0x2e	; 46
     514:	80 61       	ori	r24, 0x10	; 16
     516:	8e bd       	out	0x2e, r24	; 46
     518:	1f c0       	rjmp	.+62     	; 0x558 <TIMER_COUNTER1enable+0xda>
     51a:	8f b5       	in	r24, 0x2f	; 47
     51c:	83 60       	ori	r24, 0x03	; 3
     51e:	8f bd       	out	0x2f, r24	; 47
     520:	8e b5       	in	r24, 0x2e	; 46
     522:	80 61       	ori	r24, 0x10	; 16
     524:	8e bd       	out	0x2e, r24	; 46
     526:	18 c0       	rjmp	.+48     	; 0x558 <TIMER_COUNTER1enable+0xda>
     528:	8e b5       	in	r24, 0x2e	; 46
     52a:	88 61       	ori	r24, 0x18	; 24
     52c:	8e bd       	out	0x2e, r24	; 46
     52e:	14 c0       	rjmp	.+40     	; 0x558 <TIMER_COUNTER1enable+0xda>
     530:	8f b5       	in	r24, 0x2f	; 47
     532:	81 60       	ori	r24, 0x01	; 1
     534:	8f bd       	out	0x2f, r24	; 47
     536:	8e b5       	in	r24, 0x2e	; 46
     538:	88 61       	ori	r24, 0x18	; 24
     53a:	8e bd       	out	0x2e, r24	; 46
     53c:	0d c0       	rjmp	.+26     	; 0x558 <TIMER_COUNTER1enable+0xda>
     53e:	8f b5       	in	r24, 0x2f	; 47
     540:	82 60       	ori	r24, 0x02	; 2
     542:	8f bd       	out	0x2f, r24	; 47
     544:	8e b5       	in	r24, 0x2e	; 46
     546:	88 61       	ori	r24, 0x18	; 24
     548:	8e bd       	out	0x2e, r24	; 46
     54a:	06 c0       	rjmp	.+12     	; 0x558 <TIMER_COUNTER1enable+0xda>
     54c:	8f b5       	in	r24, 0x2f	; 47
     54e:	83 60       	ori	r24, 0x03	; 3
     550:	8f bd       	out	0x2f, r24	; 47
     552:	8e b5       	in	r24, 0x2e	; 46
     554:	88 61       	ori	r24, 0x18	; 24
     556:	8e bd       	out	0x2e, r24	; 46
     558:	8f b5       	in	r24, 0x2f	; 47
     55a:	83 70       	andi	r24, 0x03	; 3
     55c:	8f bd       	out	0x2f, r24	; 47
     55e:	87 b7       	in	r24, 0x37	; 55
     560:	83 7c       	andi	r24, 0xC3	; 195
     562:	87 bf       	out	0x37, r24	; 55
     564:	ed e7       	ldi	r30, 0x7D	; 125
     566:	f0 e0       	ldi	r31, 0x00	; 0
     568:	80 81       	ld	r24, Z
     56a:	8e 7f       	andi	r24, 0xFE	; 254
     56c:	80 83       	st	Z, r24
     56e:	50 e0       	ldi	r21, 0x00	; 0
     570:	fa 01       	movw	r30, r20
     572:	31 97       	sbiw	r30, 0x01	; 1
     574:	ec 30       	cpi	r30, 0x0C	; 12
     576:	f1 05       	cpc	r31, r1
     578:	08 f0       	brcs	.+2      	; 0x57c <TIMER_COUNTER1enable+0xfe>
     57a:	44 c0       	rjmp	.+136    	; 0x604 <TIMER_COUNTER1enable+0x186>
     57c:	eb 5a       	subi	r30, 0xAB	; 171
     57e:	ff 4f       	sbci	r31, 0xFF	; 255
     580:	0c 94 1e 15 	jmp	0x2a3c	; 0x2a3c <__tablejump2__>
     584:	87 b7       	in	r24, 0x37	; 55
     586:	84 60       	ori	r24, 0x04	; 4
     588:	87 bf       	out	0x37, r24	; 55
     58a:	3c c0       	rjmp	.+120    	; 0x604 <TIMER_COUNTER1enable+0x186>
     58c:	87 b7       	in	r24, 0x37	; 55
     58e:	80 61       	ori	r24, 0x10	; 16
     590:	87 bf       	out	0x37, r24	; 55
     592:	38 c0       	rjmp	.+112    	; 0x604 <TIMER_COUNTER1enable+0x186>
     594:	87 b7       	in	r24, 0x37	; 55
     596:	88 60       	ori	r24, 0x08	; 8
     598:	87 bf       	out	0x37, r24	; 55
     59a:	34 c0       	rjmp	.+104    	; 0x604 <TIMER_COUNTER1enable+0x186>
     59c:	ed e7       	ldi	r30, 0x7D	; 125
     59e:	f0 e0       	ldi	r31, 0x00	; 0
     5a0:	80 81       	ld	r24, Z
     5a2:	81 60       	ori	r24, 0x01	; 1
     5a4:	80 83       	st	Z, r24
     5a6:	2e c0       	rjmp	.+92     	; 0x604 <TIMER_COUNTER1enable+0x186>
     5a8:	87 b7       	in	r24, 0x37	; 55
     5aa:	80 62       	ori	r24, 0x20	; 32
     5ac:	87 bf       	out	0x37, r24	; 55
     5ae:	2a c0       	rjmp	.+84     	; 0x604 <TIMER_COUNTER1enable+0x186>
     5b0:	87 b7       	in	r24, 0x37	; 55
     5b2:	84 61       	ori	r24, 0x14	; 20
     5b4:	87 bf       	out	0x37, r24	; 55
     5b6:	26 c0       	rjmp	.+76     	; 0x604 <TIMER_COUNTER1enable+0x186>
     5b8:	87 b7       	in	r24, 0x37	; 55
     5ba:	8c 60       	ori	r24, 0x0C	; 12
     5bc:	87 bf       	out	0x37, r24	; 55
     5be:	22 c0       	rjmp	.+68     	; 0x604 <TIMER_COUNTER1enable+0x186>
     5c0:	87 b7       	in	r24, 0x37	; 55
     5c2:	84 60       	ori	r24, 0x04	; 4
     5c4:	87 bf       	out	0x37, r24	; 55
     5c6:	ed e7       	ldi	r30, 0x7D	; 125
     5c8:	f0 e0       	ldi	r31, 0x00	; 0
     5ca:	80 81       	ld	r24, Z
     5cc:	81 60       	ori	r24, 0x01	; 1
     5ce:	80 83       	st	Z, r24
     5d0:	19 c0       	rjmp	.+50     	; 0x604 <TIMER_COUNTER1enable+0x186>
     5d2:	87 b7       	in	r24, 0x37	; 55
     5d4:	84 62       	ori	r24, 0x24	; 36
     5d6:	87 bf       	out	0x37, r24	; 55
     5d8:	15 c0       	rjmp	.+42     	; 0x604 <TIMER_COUNTER1enable+0x186>
     5da:	87 b7       	in	r24, 0x37	; 55
     5dc:	8c 61       	ori	r24, 0x1C	; 28
     5de:	87 bf       	out	0x37, r24	; 55
     5e0:	11 c0       	rjmp	.+34     	; 0x604 <TIMER_COUNTER1enable+0x186>
     5e2:	87 b7       	in	r24, 0x37	; 55
     5e4:	8c 61       	ori	r24, 0x1C	; 28
     5e6:	87 bf       	out	0x37, r24	; 55
     5e8:	ed e7       	ldi	r30, 0x7D	; 125
     5ea:	f0 e0       	ldi	r31, 0x00	; 0
     5ec:	80 81       	ld	r24, Z
     5ee:	81 60       	ori	r24, 0x01	; 1
     5f0:	80 83       	st	Z, r24
     5f2:	08 c0       	rjmp	.+16     	; 0x604 <TIMER_COUNTER1enable+0x186>
     5f4:	87 b7       	in	r24, 0x37	; 55
     5f6:	88 61       	ori	r24, 0x18	; 24
     5f8:	87 bf       	out	0x37, r24	; 55
     5fa:	ed e7       	ldi	r30, 0x7D	; 125
     5fc:	f0 e0       	ldi	r31, 0x00	; 0
     5fe:	80 81       	ld	r24, Z
     600:	81 60       	ori	r24, 0x01	; 1
     602:	80 83       	st	Z, r24
     604:	8d ee       	ldi	r24, 0xED	; 237
     606:	91 e0       	ldi	r25, 0x01	; 1
     608:	11 96       	adiw	r26, 0x01	; 1
     60a:	9c 93       	st	X, r25
     60c:	8e 93       	st	-X, r24
     60e:	82 e0       	ldi	r24, 0x02	; 2
     610:	92 e0       	ldi	r25, 0x02	; 2
     612:	13 96       	adiw	r26, 0x03	; 3
     614:	9c 93       	st	X, r25
     616:	8e 93       	st	-X, r24
     618:	12 97       	sbiw	r26, 0x02	; 2
     61a:	87 e1       	ldi	r24, 0x17	; 23
     61c:	92 e0       	ldi	r25, 0x02	; 2
     61e:	15 96       	adiw	r26, 0x05	; 5
     620:	9c 93       	st	X, r25
     622:	8e 93       	st	-X, r24
     624:	14 97       	sbiw	r26, 0x04	; 4
     626:	8c e2       	ldi	r24, 0x2C	; 44
     628:	92 e0       	ldi	r25, 0x02	; 2
     62a:	17 96       	adiw	r26, 0x07	; 7
     62c:	9c 93       	st	X, r25
     62e:	8e 93       	st	-X, r24
     630:	16 97       	sbiw	r26, 0x06	; 6
     632:	8f e2       	ldi	r24, 0x2F	; 47
     634:	92 e0       	ldi	r25, 0x02	; 2
     636:	19 96       	adiw	r26, 0x09	; 9
     638:	9c 93       	st	X, r25
     63a:	8e 93       	st	-X, r24
     63c:	18 97       	sbiw	r26, 0x08	; 8
     63e:	82 e3       	ldi	r24, 0x32	; 50
     640:	92 e0       	ldi	r25, 0x02	; 2
     642:	1b 96       	adiw	r26, 0x0b	; 11
     644:	9c 93       	st	X, r25
     646:	8e 93       	st	-X, r24
     648:	1a 97       	sbiw	r26, 0x0a	; 10
     64a:	86 ea       	ldi	r24, 0xA6	; 166
     64c:	91 e0       	ldi	r25, 0x01	; 1
     64e:	1d 96       	adiw	r26, 0x0d	; 13
     650:	9c 93       	st	X, r25
     652:	8e 93       	st	-X, r24
     654:	1c 97       	sbiw	r26, 0x0c	; 12
     656:	87 e3       	ldi	r24, 0x37	; 55
     658:	92 e0       	ldi	r25, 0x02	; 2
     65a:	1f 96       	adiw	r26, 0x0f	; 15
     65c:	9c 93       	st	X, r25
     65e:	8e 93       	st	-X, r24
     660:	1e 97       	sbiw	r26, 0x0e	; 14
     662:	cd 01       	movw	r24, r26
     664:	1f 91       	pop	r17
     666:	0f 91       	pop	r16
     668:	08 95       	ret

0000066a <__vector_16>:
/*
** interrupt
*/
// So that main will not freeze when not defined, but rather exclude.
//ISR(TIMER0_COMP_vect){ }
ISR(TIMER0_OVF_vect){ }
     66a:	1f 92       	push	r1
     66c:	0f 92       	push	r0
     66e:	0f b6       	in	r0, 0x3f	; 63
     670:	0f 92       	push	r0
     672:	11 24       	eor	r1, r1
     674:	0f 90       	pop	r0
     676:	0f be       	out	0x3f, r0	; 63
     678:	0f 90       	pop	r0
     67a:	1f 90       	pop	r1
     67c:	18 95       	reti

0000067e <__vector_11>:
ISR(TIMER1_CAPT_vect){ }
     67e:	1f 92       	push	r1
     680:	0f 92       	push	r0
     682:	0f b6       	in	r0, 0x3f	; 63
     684:	0f 92       	push	r0
     686:	11 24       	eor	r1, r1
     688:	0f 90       	pop	r0
     68a:	0f be       	out	0x3f, r0	; 63
     68c:	0f 90       	pop	r0
     68e:	1f 90       	pop	r1
     690:	18 95       	reti

00000692 <__vector_12>:
ISR(TIMER1_COMPA_vect){ }
     692:	1f 92       	push	r1
     694:	0f 92       	push	r0
     696:	0f b6       	in	r0, 0x3f	; 63
     698:	0f 92       	push	r0
     69a:	11 24       	eor	r1, r1
     69c:	0f 90       	pop	r0
     69e:	0f be       	out	0x3f, r0	; 63
     6a0:	0f 90       	pop	r0
     6a2:	1f 90       	pop	r1
     6a4:	18 95       	reti

000006a6 <__vector_13>:
ISR(TIMER1_COMPB_vect){ }
     6a6:	1f 92       	push	r1
     6a8:	0f 92       	push	r0
     6aa:	0f b6       	in	r0, 0x3f	; 63
     6ac:	0f 92       	push	r0
     6ae:	11 24       	eor	r1, r1
     6b0:	0f 90       	pop	r0
     6b2:	0f be       	out	0x3f, r0	; 63
     6b4:	0f 90       	pop	r0
     6b6:	1f 90       	pop	r1
     6b8:	18 95       	reti

000006ba <__vector_24>:
ISR(TIMER1_COMPC_vect){ }
     6ba:	1f 92       	push	r1
     6bc:	0f 92       	push	r0
     6be:	0f b6       	in	r0, 0x3f	; 63
     6c0:	0f 92       	push	r0
     6c2:	11 24       	eor	r1, r1
     6c4:	0f 90       	pop	r0
     6c6:	0f be       	out	0x3f, r0	; 63
     6c8:	0f 90       	pop	r0
     6ca:	1f 90       	pop	r1
     6cc:	18 95       	reti

000006ce <__vector_14>:
ISR(TIMER1_OVF_vect){ }
     6ce:	1f 92       	push	r1
     6d0:	0f 92       	push	r0
     6d2:	0f b6       	in	r0, 0x3f	; 63
     6d4:	0f 92       	push	r0
     6d6:	11 24       	eor	r1, r1
     6d8:	0f 90       	pop	r0
     6da:	0f be       	out	0x3f, r0	; 63
     6dc:	0f 90       	pop	r0
     6de:	1f 90       	pop	r1
     6e0:	18 95       	reti

000006e2 <__vector_10>:
ISR(TIMER2_OVF_vect){ }
     6e2:	1f 92       	push	r1
     6e4:	0f 92       	push	r0
     6e6:	0f b6       	in	r0, 0x3f	; 63
     6e8:	0f 92       	push	r0
     6ea:	11 24       	eor	r1, r1
     6ec:	0f 90       	pop	r0
     6ee:	0f be       	out	0x3f, r0	; 63
     6f0:	0f 90       	pop	r0
     6f2:	1f 90       	pop	r1
     6f4:	18 95       	reti

000006f6 <__vector_25>:
ISR(TIMER3_CAPT_vect){ }
     6f6:	1f 92       	push	r1
     6f8:	0f 92       	push	r0
     6fa:	0f b6       	in	r0, 0x3f	; 63
     6fc:	0f 92       	push	r0
     6fe:	11 24       	eor	r1, r1
     700:	0f 90       	pop	r0
     702:	0f be       	out	0x3f, r0	; 63
     704:	0f 90       	pop	r0
     706:	1f 90       	pop	r1
     708:	18 95       	reti

0000070a <__vector_26>:
ISR(TIMER3_COMPA_vect){ }
     70a:	1f 92       	push	r1
     70c:	0f 92       	push	r0
     70e:	0f b6       	in	r0, 0x3f	; 63
     710:	0f 92       	push	r0
     712:	11 24       	eor	r1, r1
     714:	0f 90       	pop	r0
     716:	0f be       	out	0x3f, r0	; 63
     718:	0f 90       	pop	r0
     71a:	1f 90       	pop	r1
     71c:	18 95       	reti

0000071e <__vector_27>:
ISR(TIMER3_COMPB_vect){ }
     71e:	1f 92       	push	r1
     720:	0f 92       	push	r0
     722:	0f b6       	in	r0, 0x3f	; 63
     724:	0f 92       	push	r0
     726:	11 24       	eor	r1, r1
     728:	0f 90       	pop	r0
     72a:	0f be       	out	0x3f, r0	; 63
     72c:	0f 90       	pop	r0
     72e:	1f 90       	pop	r1
     730:	18 95       	reti

00000732 <__vector_28>:
ISR(TIMER3_COMPC_vect){ }
     732:	1f 92       	push	r1
     734:	0f 92       	push	r0
     736:	0f b6       	in	r0, 0x3f	; 63
     738:	0f 92       	push	r0
     73a:	11 24       	eor	r1, r1
     73c:	0f 90       	pop	r0
     73e:	0f be       	out	0x3f, r0	; 63
     740:	0f 90       	pop	r0
     742:	1f 90       	pop	r1
     744:	18 95       	reti

00000746 <__vector_29>:
ISR(TIMER3_OVF_vect){ }
     746:	1f 92       	push	r1
     748:	0f 92       	push	r0
     74a:	0f b6       	in	r0, 0x3f	; 63
     74c:	0f 92       	push	r0
     74e:	11 24       	eor	r1, r1
     750:	0f 90       	pop	r0
     752:	0f be       	out	0x3f, r0	; 63
     754:	0f 90       	pop	r0
     756:	1f 90       	pop	r1
     758:	18 95       	reti

0000075a <__vector_18>:
void uart1_puts_p(const char *progmem_s )
{
    register char c;
    while ( (c = pgm_read_byte(progmem_s++)) ) 
      uart1_putc(c);
}/* uart1_puts_p */
     75a:	1f 92       	push	r1
     75c:	0f 92       	push	r0
     75e:	0f b6       	in	r0, 0x3f	; 63
     760:	0f 92       	push	r0
     762:	11 24       	eor	r1, r1
     764:	0b b6       	in	r0, 0x3b	; 59
     766:	0f 92       	push	r0
     768:	8f 93       	push	r24
     76a:	9f 93       	push	r25
     76c:	ef 93       	push	r30
     76e:	ff 93       	push	r31
     770:	8b b1       	in	r24, 0x0b	; 11
     772:	9a b1       	in	r25, 0x0a	; 10
     774:	88 71       	andi	r24, 0x18	; 24
     776:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <UART_LastRxError>
     77a:	e0 91 ba 01 	lds	r30, 0x01BA	; 0x8001ba <UART_RxHead>
     77e:	ef 5f       	subi	r30, 0xFF	; 255
     780:	ef 71       	andi	r30, 0x1F	; 31
     782:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <UART_RxTail>
     786:	e8 13       	cpse	r30, r24
     788:	04 c0       	rjmp	.+8      	; 0x792 <__vector_18+0x38>
     78a:	82 e0       	ldi	r24, 0x02	; 2
     78c:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <UART_LastRxError>
     790:	11 c0       	rjmp	.+34     	; 0x7b4 <__vector_18+0x5a>
     792:	9c b1       	in	r25, 0x0c	; 12
     794:	e0 93 ba 01 	sts	0x01BA, r30	; 0x8001ba <UART_RxHead>
     798:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <UART_LastRxError>
     79c:	88 23       	and	r24, r24
     79e:	31 f0       	breq	.+12     	; 0x7ac <__vector_18+0x52>
     7a0:	f0 e0       	ldi	r31, 0x00	; 0
     7a2:	e3 54       	subi	r30, 0x43	; 67
     7a4:	fe 4f       	sbci	r31, 0xFE	; 254
     7a6:	88 e5       	ldi	r24, 0x58	; 88
     7a8:	80 83       	st	Z, r24
     7aa:	04 c0       	rjmp	.+8      	; 0x7b4 <__vector_18+0x5a>
     7ac:	f0 e0       	ldi	r31, 0x00	; 0
     7ae:	e3 54       	subi	r30, 0x43	; 67
     7b0:	fe 4f       	sbci	r31, 0xFE	; 254
     7b2:	90 83       	st	Z, r25
     7b4:	ff 91       	pop	r31
     7b6:	ef 91       	pop	r30
     7b8:	9f 91       	pop	r25
     7ba:	8f 91       	pop	r24
     7bc:	0f 90       	pop	r0
     7be:	0b be       	out	0x3b, r0	; 59
     7c0:	0f 90       	pop	r0
     7c2:	0f be       	out	0x3f, r0	; 63
     7c4:	0f 90       	pop	r0
     7c6:	1f 90       	pop	r1
     7c8:	18 95       	reti

000007ca <__vector_19>:
     7ca:	1f 92       	push	r1
     7cc:	0f 92       	push	r0
     7ce:	0f b6       	in	r0, 0x3f	; 63
     7d0:	0f 92       	push	r0
     7d2:	11 24       	eor	r1, r1
     7d4:	0b b6       	in	r0, 0x3b	; 59
     7d6:	0f 92       	push	r0
     7d8:	8f 93       	push	r24
     7da:	9f 93       	push	r25
     7dc:	ef 93       	push	r30
     7de:	ff 93       	push	r31
     7e0:	90 91 bc 01 	lds	r25, 0x01BC	; 0x8001bc <UART_TxHead>
     7e4:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <UART_TxTail>
     7e8:	98 13       	cpse	r25, r24
     7ea:	02 c0       	rjmp	.+4      	; 0x7f0 <__vector_19+0x26>
     7ec:	55 98       	cbi	0x0a, 5	; 10
     7ee:	0b c0       	rjmp	.+22     	; 0x806 <__vector_19+0x3c>
     7f0:	e0 91 bb 01 	lds	r30, 0x01BB	; 0x8001bb <UART_TxTail>
     7f4:	ef 5f       	subi	r30, 0xFF	; 255
     7f6:	ef 71       	andi	r30, 0x1F	; 31
     7f8:	e0 93 bb 01 	sts	0x01BB, r30	; 0x8001bb <UART_TxTail>
     7fc:	f0 e0       	ldi	r31, 0x00	; 0
     7fe:	e3 52       	subi	r30, 0x23	; 35
     800:	fe 4f       	sbci	r31, 0xFE	; 254
     802:	80 81       	ld	r24, Z
     804:	8c b9       	out	0x0c, r24	; 12
     806:	ff 91       	pop	r31
     808:	ef 91       	pop	r30
     80a:	9f 91       	pop	r25
     80c:	8f 91       	pop	r24
     80e:	0f 90       	pop	r0
     810:	0b be       	out	0x3b, r0	; 59
     812:	0f 90       	pop	r0
     814:	0f be       	out	0x3f, r0	; 63
     816:	0f 90       	pop	r0
     818:	1f 90       	pop	r1
     81a:	18 95       	reti

0000081c <__vector_30>:
SIGNAL(UART1_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART1 Receive Complete interrupt
Purpose:  called when the UART1 has received a character
**************************************************************************/
{
     81c:	1f 92       	push	r1
     81e:	0f 92       	push	r0
     820:	0f b6       	in	r0, 0x3f	; 63
     822:	0f 92       	push	r0
     824:	11 24       	eor	r1, r1
     826:	0b b6       	in	r0, 0x3b	; 59
     828:	0f 92       	push	r0
     82a:	8f 93       	push	r24
     82c:	9f 93       	push	r25
     82e:	ef 93       	push	r30
     830:	ff 93       	push	r31
    unsigned char tmphead;
	unsigned char data;
	unsigned char bit9;
    unsigned char usr;
    /* read UART status register and UART data register */
	usr  = UART1_STATUS;
     832:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    bit9 = UART1_CONTROL;
     836:	90 91 9a 00 	lds	r25, 0x009A	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
    bit9 = 0x01 & (bit9>>1);
    /* */
    UART1_LastRxError = (usr & (_BV(FE1)|_BV(DOR1)));
     83a:	88 71       	andi	r24, 0x18	; 24
     83c:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <UART1_LastRxError>
	/* calculate buffer index */
    tmphead = ( UART1_RxHead + 1) & UART_RX_BUFFER_MASK;
     840:	e0 91 75 01 	lds	r30, 0x0175	; 0x800175 <UART1_RxHead>
     844:	ef 5f       	subi	r30, 0xFF	; 255
     846:	ef 71       	andi	r30, 0x1F	; 31
    if ( tmphead == UART1_RxTail ) {	
     848:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <UART1_RxTail>
     84c:	e8 13       	cpse	r30, r24
     84e:	04 c0       	rjmp	.+8      	; 0x858 <__vector_30+0x3c>
        /* error: receive buffer overflow, caracter is lost*/
        UART1_LastRxError = UART_BUFFER_OVERFLOW >> 8; 
     850:	82 e0       	ldi	r24, 0x02	; 2
     852:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <UART1_LastRxError>
     856:	12 c0       	rjmp	.+36     	; 0x87c <__vector_30+0x60>
	}else{
		data = UART1_DATA;
     858:	90 91 9c 00 	lds	r25, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
        /* store new index */
        UART1_RxHead = tmphead;
     85c:	e0 93 75 01 	sts	0x0175, r30	; 0x800175 <UART1_RxHead>
		if(UART1_LastRxError){
     860:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <UART1_LastRxError>
     864:	88 23       	and	r24, r24
     866:	31 f0       	breq	.+12     	; 0x874 <__vector_30+0x58>
			/* store indication data error in buffer */
			UART1_RxBuf[tmphead] = 'X';
     868:	f0 e0       	ldi	r31, 0x00	; 0
     86a:	e8 58       	subi	r30, 0x88	; 136
     86c:	fe 4f       	sbci	r31, 0xFE	; 254
     86e:	88 e5       	ldi	r24, 0x58	; 88
     870:	80 83       	st	Z, r24
     872:	04 c0       	rjmp	.+8      	; 0x87c <__vector_30+0x60>
		}else{
			/* store received data in buffer */
			UART1_RxBuf[tmphead] = data;
     874:	f0 e0       	ldi	r31, 0x00	; 0
     876:	e8 58       	subi	r30, 0x88	; 136
     878:	fe 4f       	sbci	r31, 0xFE	; 254
     87a:	90 83       	st	Z, r25
		}
    }
}
     87c:	ff 91       	pop	r31
     87e:	ef 91       	pop	r30
     880:	9f 91       	pop	r25
     882:	8f 91       	pop	r24
     884:	0f 90       	pop	r0
     886:	0b be       	out	0x3b, r0	; 59
     888:	0f 90       	pop	r0
     88a:	0f be       	out	0x3f, r0	; 63
     88c:	0f 90       	pop	r0
     88e:	1f 90       	pop	r1
     890:	18 95       	reti

00000892 <__vector_31>:
SIGNAL(UART1_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART1 Data Register Empty interrupt
Purpose:  called when the UART1 is ready to transmit the next byte
**************************************************************************/
{
     892:	1f 92       	push	r1
     894:	0f 92       	push	r0
     896:	0f b6       	in	r0, 0x3f	; 63
     898:	0f 92       	push	r0
     89a:	11 24       	eor	r1, r1
     89c:	0b b6       	in	r0, 0x3b	; 59
     89e:	0f 92       	push	r0
     8a0:	8f 93       	push	r24
     8a2:	9f 93       	push	r25
     8a4:	ef 93       	push	r30
     8a6:	ff 93       	push	r31
    if ( UART1_TxHead == UART1_TxTail ) {
     8a8:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <UART1_TxHead>
     8ac:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <UART1_TxTail>
     8b0:	98 13       	cpse	r25, r24
     8b2:	06 c0       	rjmp	.+12     	; 0x8c0 <__vector_31+0x2e>
        /* tx buffer empty, disable UDRE interrupt */
        UART1_CONTROL &= ~_BV(UART1_UDRIE);
     8b4:	ea e9       	ldi	r30, 0x9A	; 154
     8b6:	f0 e0       	ldi	r31, 0x00	; 0
     8b8:	80 81       	ld	r24, Z
     8ba:	8f 7d       	andi	r24, 0xDF	; 223
     8bc:	80 83       	st	Z, r24
     8be:	0e c0       	rjmp	.+28     	; 0x8dc <__vector_31+0x4a>
    }else{
		/* calculate and store new buffer index */
        UART1_TxTail = (UART1_TxTail + 1) & UART_TX_BUFFER_MASK;
     8c0:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <UART1_TxTail>
     8c4:	8f 5f       	subi	r24, 0xFF	; 255
     8c6:	8f 71       	andi	r24, 0x1F	; 31
     8c8:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <UART1_TxTail>
        /* get one byte from buffer and write it to UART */
		UART1_DATA = UART1_TxBuf[UART1_TxTail];  /* start transmission */
     8cc:	e0 91 76 01 	lds	r30, 0x0176	; 0x800176 <UART1_TxTail>
     8d0:	f0 e0       	ldi	r31, 0x00	; 0
     8d2:	e8 56       	subi	r30, 0x68	; 104
     8d4:	fe 4f       	sbci	r31, 0xFE	; 254
     8d6:	80 81       	ld	r24, Z
     8d8:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
	}
}
     8dc:	ff 91       	pop	r31
     8de:	ef 91       	pop	r30
     8e0:	9f 91       	pop	r25
     8e2:	8f 91       	pop	r24
     8e4:	0f 90       	pop	r0
     8e6:	0b be       	out	0x3b, r0	; 59
     8e8:	0f 90       	pop	r0
     8ea:	0f be       	out	0x3f, r0	; 63
     8ec:	0f 90       	pop	r0
     8ee:	1f 90       	pop	r1
     8f0:	18 95       	reti

000008f2 <FUNCpinmatch>:
}
//pinmatch
uint8_t FUNCpinmatch(uint8_t match, uint8_t pin, uint8_t HL)
{
	uint8_t result;
	result=match&pin;
     8f2:	68 23       	and	r22, r24
	if(HL){
     8f4:	44 23       	and	r20, r20
     8f6:	21 f0       	breq	.+8      	; 0x900 <FUNCpinmatch+0xe>
		if(result==match);
     8f8:	86 17       	cp	r24, r22
     8fa:	21 f0       	breq	.+8      	; 0x904 <FUNCpinmatch+0x12>
		else
			result=0;
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	08 95       	ret
	}else{
		if(result)
     900:	61 11       	cpse	r22, r1
			result=0;
     902:	80 e0       	ldi	r24, 0x00	; 0
		else
			result=match;
	}
	return result;
}
     904:	08 95       	ret

00000906 <FUNChmerge>:
// hmerge
uint8_t FUNChmerge(uint8_t X, uint8_t Y)
{
	return (X | Y);
}
     906:	86 2b       	or	r24, r22
     908:	08 95       	ret

0000090a <FUNClmerge>:
// lmerge
uint8_t FUNClmerge(uint8_t X, uint8_t Y)
{
	return (X & Y);
}
     90a:	86 23       	and	r24, r22
     90c:	08 95       	ret

0000090e <FUNChh>:
uint8_t FUNChh(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xi&xf;
	return i;
}
     90e:	86 23       	and	r24, r22
     910:	08 95       	ret

00000912 <FUNCll>:
// ll
uint8_t FUNCll(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xi|xf;
	return ~i;
     912:	86 2b       	or	r24, r22
}
     914:	80 95       	com	r24
     916:	08 95       	ret

00000918 <FUNClh>:
// lh
uint8_t FUNClh(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xi^xf;
     918:	86 27       	eor	r24, r22
	i&=xf;
	return i;
}
     91a:	86 23       	and	r24, r22
     91c:	08 95       	ret

0000091e <FUNChl>:
// hl
uint8_t FUNChl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xf^xi;
     91e:	60 95       	com	r22
	i&=xi;
	return i;
}
     920:	86 23       	and	r24, r22
     922:	08 95       	ret

00000924 <FUNCdiff>:
// diff
uint8_t FUNCdiff(uint8_t xi, uint8_t xf)
{
	return xf^xi;
}
     924:	86 27       	eor	r24, r22
     926:	08 95       	ret

00000928 <FUNCswap>:
// interchange *px and *py
void FUNCswap(long *px, long *py)
{
     928:	cf 92       	push	r12
     92a:	df 92       	push	r13
     92c:	ef 92       	push	r14
     92e:	ff 92       	push	r15
     930:	0f 93       	push	r16
     932:	1f 93       	push	r17
	long temp;
	temp = *px;
     934:	fc 01       	movw	r30, r24
     936:	00 81       	ld	r16, Z
     938:	11 81       	ldd	r17, Z+1	; 0x01
     93a:	22 81       	ldd	r18, Z+2	; 0x02
     93c:	33 81       	ldd	r19, Z+3	; 0x03
	*px = *py;
     93e:	fb 01       	movw	r30, r22
     940:	c0 80       	ld	r12, Z
     942:	d1 80       	ldd	r13, Z+1	; 0x01
     944:	e2 80       	ldd	r14, Z+2	; 0x02
     946:	f3 80       	ldd	r15, Z+3	; 0x03
     948:	fc 01       	movw	r30, r24
     94a:	c0 82       	st	Z, r12
     94c:	d1 82       	std	Z+1, r13	; 0x01
     94e:	e2 82       	std	Z+2, r14	; 0x02
     950:	f3 82       	std	Z+3, r15	; 0x03
	*py = temp;
     952:	fb 01       	movw	r30, r22
     954:	00 83       	st	Z, r16
     956:	11 83       	std	Z+1, r17	; 0x01
     958:	22 83       	std	Z+2, r18	; 0x02
     95a:	33 83       	std	Z+3, r19	; 0x03
}
     95c:	1f 91       	pop	r17
     95e:	0f 91       	pop	r16
     960:	ff 90       	pop	r15
     962:	ef 90       	pop	r14
     964:	df 90       	pop	r13
     966:	cf 90       	pop	r12
     968:	08 95       	ret

0000096a <FUNCcopy>:
// copy: copy 'from' into 'to'; assume to is big enough
void FUNCcopy(char to[], char from[])
{
	int i;
	i = 0;
	while ((to[i] = from[i]) != '\0')
     96a:	fb 01       	movw	r30, r22
     96c:	20 81       	ld	r18, Z
     96e:	fc 01       	movw	r30, r24
     970:	20 83       	st	Z, r18
     972:	22 23       	and	r18, r18
     974:	39 f0       	breq	.+14     	; 0x984 <FUNCcopy+0x1a>
     976:	db 01       	movw	r26, r22
     978:	11 96       	adiw	r26, 0x01	; 1
     97a:	31 96       	adiw	r30, 0x01	; 1
     97c:	9d 91       	ld	r25, X+
     97e:	91 93       	st	Z+, r25
     980:	91 11       	cpse	r25, r1
     982:	fc cf       	rjmp	.-8      	; 0x97c <FUNCcopy+0x12>
     984:	08 95       	ret

00000986 <FUNCsqueeze>:
		++i;
}
// squeeze: delete all c from s
void FUNCsqueeze(char s[], int c)
{
     986:	cf 93       	push	r28
     988:	df 93       	push	r29
     98a:	ec 01       	movw	r28, r24
	int i, j;
	for (i = j = 0; s[i] != '\0'; i++)
     98c:	98 81       	ld	r25, Y
     98e:	99 23       	and	r25, r25
     990:	99 f0       	breq	.+38     	; 0x9b8 <FUNCsqueeze+0x32>
     992:	fe 01       	movw	r30, r28
     994:	31 96       	adiw	r30, 0x01	; 1
     996:	20 e0       	ldi	r18, 0x00	; 0
     998:	30 e0       	ldi	r19, 0x00	; 0
		if (s[i] != c)
     99a:	49 2f       	mov	r20, r25
     99c:	50 e0       	ldi	r21, 0x00	; 0
     99e:	46 17       	cp	r20, r22
     9a0:	57 07       	cpc	r21, r23
     9a2:	31 f0       	breq	.+12     	; 0x9b0 <FUNCsqueeze+0x2a>
			s[j++] = s[i];
     9a4:	de 01       	movw	r26, r28
     9a6:	a2 0f       	add	r26, r18
     9a8:	b3 1f       	adc	r27, r19
     9aa:	9c 93       	st	X, r25
     9ac:	2f 5f       	subi	r18, 0xFF	; 255
     9ae:	3f 4f       	sbci	r19, 0xFF	; 255
}
// squeeze: delete all c from s
void FUNCsqueeze(char s[], int c)
{
	int i, j;
	for (i = j = 0; s[i] != '\0'; i++)
     9b0:	91 91       	ld	r25, Z+
     9b2:	91 11       	cpse	r25, r1
     9b4:	f2 cf       	rjmp	.-28     	; 0x99a <FUNCsqueeze+0x14>
     9b6:	02 c0       	rjmp	.+4      	; 0x9bc <FUNCsqueeze+0x36>
     9b8:	20 e0       	ldi	r18, 0x00	; 0
     9ba:	30 e0       	ldi	r19, 0x00	; 0
		if (s[i] != c)
			s[j++] = s[i];
		s[j] = '\0';
     9bc:	fe 01       	movw	r30, r28
     9be:	e2 0f       	add	r30, r18
     9c0:	f3 1f       	adc	r31, r19
     9c2:	10 82       	st	Z, r1
}
     9c4:	df 91       	pop	r29
     9c6:	cf 91       	pop	r28
     9c8:	08 95       	ret

000009ca <FUNCshellsort>:
// shellsort: sort v[0]...v[n-1] into increasing order
void FUNCshellsort(int v[], int n)
{
     9ca:	2f 92       	push	r2
     9cc:	3f 92       	push	r3
     9ce:	4f 92       	push	r4
     9d0:	5f 92       	push	r5
     9d2:	6f 92       	push	r6
     9d4:	7f 92       	push	r7
     9d6:	8f 92       	push	r8
     9d8:	9f 92       	push	r9
     9da:	af 92       	push	r10
     9dc:	bf 92       	push	r11
     9de:	cf 92       	push	r12
     9e0:	df 92       	push	r13
     9e2:	ef 92       	push	r14
     9e4:	ff 92       	push	r15
     9e6:	0f 93       	push	r16
     9e8:	1f 93       	push	r17
     9ea:	cf 93       	push	r28
     9ec:	df 93       	push	r29
     9ee:	00 d0       	rcall	.+0      	; 0x9f0 <FUNCshellsort+0x26>
     9f0:	00 d0       	rcall	.+0      	; 0x9f2 <FUNCshellsort+0x28>
     9f2:	cd b7       	in	r28, 0x3d	; 61
     9f4:	de b7       	in	r29, 0x3e	; 62
     9f6:	2c 01       	movw	r4, r24
     9f8:	1b 01       	movw	r2, r22
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
     9fa:	4b 01       	movw	r8, r22
     9fc:	77 23       	and	r23, r23
     9fe:	1c f4       	brge	.+6      	; 0xa06 <FUNCshellsort+0x3c>
     a00:	2f ef       	ldi	r18, 0xFF	; 255
     a02:	82 1a       	sub	r8, r18
     a04:	92 0a       	sbc	r9, r18
     a06:	95 94       	asr	r9
     a08:	87 94       	ror	r8
     a0a:	18 14       	cp	r1, r8
     a0c:	19 04       	cpc	r1, r9
     a0e:	0c f4       	brge	.+2      	; 0xa12 <FUNCshellsort+0x48>
     a10:	51 c0       	rjmp	.+162    	; 0xab4 <FUNCshellsort+0xea>
     a12:	6a c0       	rjmp	.+212    	; 0xae8 <FUNCshellsort+0x11e>
		for (i = gap; i < n; i++)
			for (j=i-gap; j>=0 && v[j]>v[j+gap]; j-=gap){
     a14:	96 01       	movw	r18, r12
     a16:	dd 20       	and	r13, r13
     a18:	9c f1       	brlt	.+102    	; 0xa80 <FUNCshellsort+0xb6>
     a1a:	f5 01       	movw	r30, r10
     a1c:	40 81       	ld	r20, Z
     a1e:	51 81       	ldd	r21, Z+1	; 0x01
     a20:	f4 01       	movw	r30, r8
     a22:	60 81       	ld	r22, Z
     a24:	71 81       	ldd	r23, Z+1	; 0x01
     a26:	64 17       	cp	r22, r20
     a28:	75 07       	cpc	r23, r21
     a2a:	54 f5       	brge	.+84     	; 0xa80 <FUNCshellsort+0xb6>
     a2c:	8c 01       	movw	r16, r24
     a2e:	0a 0d       	add	r16, r10
     a30:	1b 1d       	adc	r17, r11
     a32:	d4 01       	movw	r26, r8
     a34:	bc 82       	std	Y+4, r11	; 0x04
     a36:	ab 82       	std	Y+3, r10	; 0x03
     a38:	ba 82       	std	Y+2, r11	; 0x02
     a3a:	a9 82       	std	Y+1, r10	; 0x01
				temp = v[j];
				v[j] = v[j+gap];
     a3c:	eb 81       	ldd	r30, Y+3	; 0x03
     a3e:	fc 81       	ldd	r31, Y+4	; 0x04
     a40:	71 83       	std	Z+1, r23	; 0x01
     a42:	60 83       	st	Z, r22
				v[j+gap] = temp;
     a44:	11 96       	adiw	r26, 0x01	; 1
     a46:	5c 93       	st	X, r21
     a48:	4e 93       	st	-X, r20
void FUNCshellsort(int v[], int n)
{
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
		for (i = gap; i < n; i++)
			for (j=i-gap; j>=0 && v[j]>v[j+gap]; j-=gap){
     a4a:	2e 19       	sub	r18, r14
     a4c:	3f 09       	sbc	r19, r15
     a4e:	c2 f0       	brmi	.+48     	; 0xa80 <FUNCshellsort+0xb6>
     a50:	f8 01       	movw	r30, r16
     a52:	40 81       	ld	r20, Z
     a54:	51 81       	ldd	r21, Z+1	; 0x01
     a56:	e9 81       	ldd	r30, Y+1	; 0x01
     a58:	fa 81       	ldd	r31, Y+2	; 0x02
     a5a:	60 81       	ld	r22, Z
     a5c:	71 81       	ldd	r23, Z+1	; 0x01
     a5e:	08 0f       	add	r16, r24
     a60:	19 1f       	adc	r17, r25
     a62:	e8 0f       	add	r30, r24
     a64:	f9 1f       	adc	r31, r25
     a66:	fa 83       	std	Y+2, r31	; 0x02
     a68:	e9 83       	std	Y+1, r30	; 0x01
     a6a:	eb 81       	ldd	r30, Y+3	; 0x03
     a6c:	fc 81       	ldd	r31, Y+4	; 0x04
     a6e:	e8 0f       	add	r30, r24
     a70:	f9 1f       	adc	r31, r25
     a72:	fc 83       	std	Y+4, r31	; 0x04
     a74:	eb 83       	std	Y+3, r30	; 0x03
     a76:	a8 0f       	add	r26, r24
     a78:	b9 1f       	adc	r27, r25
     a7a:	64 17       	cp	r22, r20
     a7c:	75 07       	cpc	r23, r21
     a7e:	f4 f2       	brlt	.-68     	; 0xa3c <FUNCshellsort+0x72>
     a80:	ff ef       	ldi	r31, 0xFF	; 255
     a82:	cf 1a       	sub	r12, r31
     a84:	df 0a       	sbc	r13, r31
     a86:	22 e0       	ldi	r18, 0x02	; 2
     a88:	a2 0e       	add	r10, r18
     a8a:	b1 1c       	adc	r11, r1
     a8c:	e2 e0       	ldi	r30, 0x02	; 2
     a8e:	8e 0e       	add	r8, r30
     a90:	91 1c       	adc	r9, r1
// shellsort: sort v[0]...v[n-1] into increasing order
void FUNCshellsort(int v[], int n)
{
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
		for (i = gap; i < n; i++)
     a92:	c6 14       	cp	r12, r6
     a94:	d7 04       	cpc	r13, r7
     a96:	09 f0       	breq	.+2      	; 0xa9a <FUNCshellsort+0xd0>
     a98:	bd cf       	rjmp	.-134    	; 0xa14 <FUNCshellsort+0x4a>
}
// shellsort: sort v[0]...v[n-1] into increasing order
void FUNCshellsort(int v[], int n)
{
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
     a9a:	47 01       	movw	r8, r14
     a9c:	ff 20       	and	r15, r15
     a9e:	1c f4       	brge	.+6      	; 0xaa6 <FUNCshellsort+0xdc>
     aa0:	ff ef       	ldi	r31, 0xFF	; 255
     aa2:	8f 1a       	sub	r8, r31
     aa4:	9f 0a       	sbc	r9, r31
     aa6:	95 94       	asr	r9
     aa8:	87 94       	ror	r8
     aaa:	18 14       	cp	r1, r8
     aac:	19 04       	cpc	r1, r9
     aae:	e4 f4       	brge	.+56     	; 0xae8 <FUNCshellsort+0x11e>
     ab0:	74 01       	movw	r14, r8
     ab2:	01 c0       	rjmp	.+2      	; 0xab6 <FUNCshellsort+0xec>
     ab4:	74 01       	movw	r14, r8
		for (i = gap; i < n; i++)
     ab6:	82 14       	cp	r8, r2
     ab8:	93 04       	cpc	r9, r3
     aba:	7c f7       	brge	.-34     	; 0xa9a <FUNCshellsort+0xd0>
     abc:	64 01       	movw	r12, r8
     abe:	ce 18       	sub	r12, r14
     ac0:	df 08       	sbc	r13, r15
     ac2:	56 01       	movw	r10, r12
     ac4:	aa 0c       	add	r10, r10
     ac6:	bb 1c       	adc	r11, r11
     ac8:	a4 0c       	add	r10, r4
     aca:	b5 1c       	adc	r11, r5
     acc:	88 0c       	add	r8, r8
     ace:	99 1c       	adc	r9, r9
     ad0:	84 0c       	add	r8, r4
     ad2:	95 1c       	adc	r9, r5
     ad4:	31 01       	movw	r6, r2
     ad6:	6e 18       	sub	r6, r14
     ad8:	7f 08       	sbc	r7, r15
     ada:	c7 01       	movw	r24, r14
     adc:	88 0f       	add	r24, r24
     ade:	99 1f       	adc	r25, r25
     ae0:	91 95       	neg	r25
     ae2:	81 95       	neg	r24
     ae4:	91 09       	sbc	r25, r1
     ae6:	96 cf       	rjmp	.-212    	; 0xa14 <FUNCshellsort+0x4a>
			for (j=i-gap; j>=0 && v[j]>v[j+gap]; j-=gap){
				temp = v[j];
				v[j] = v[j+gap];
				v[j+gap] = temp;
			}
}
     ae8:	0f 90       	pop	r0
     aea:	0f 90       	pop	r0
     aec:	0f 90       	pop	r0
     aee:	0f 90       	pop	r0
     af0:	df 91       	pop	r29
     af2:	cf 91       	pop	r28
     af4:	1f 91       	pop	r17
     af6:	0f 91       	pop	r16
     af8:	ff 90       	pop	r15
     afa:	ef 90       	pop	r14
     afc:	df 90       	pop	r13
     afe:	cf 90       	pop	r12
     b00:	bf 90       	pop	r11
     b02:	af 90       	pop	r10
     b04:	9f 90       	pop	r9
     b06:	8f 90       	pop	r8
     b08:	7f 90       	pop	r7
     b0a:	6f 90       	pop	r6
     b0c:	5f 90       	pop	r5
     b0e:	4f 90       	pop	r4
     b10:	3f 90       	pop	r3
     b12:	2f 90       	pop	r2
     b14:	08 95       	ret

00000b16 <FUNCpmax>:
	if(a1 > a2){
		biggest = a1;
	}else{
		biggest = a2;
	}
	return biggest;
     b16:	86 17       	cp	r24, r22
     b18:	97 07       	cpc	r25, r23
     b1a:	0c f4       	brge	.+2      	; 0xb1e <FUNCpmax+0x8>
     b1c:	cb 01       	movw	r24, r22
}
     b1e:	08 95       	ret

00000b20 <FUNCgcd>:
// common divisor
int FUNCgcd (int u, int v)
{
     b20:	9b 01       	movw	r18, r22
	int temp;
	while ( v != 0 ) {
     b22:	67 2b       	or	r22, r23
     b24:	11 f4       	brne	.+4      	; 0xb2a <FUNCgcd+0xa>
     b26:	08 95       	ret
		temp = u % v;
		u = v;
		v = temp;
     b28:	9a 01       	movw	r18, r20
// common divisor
int FUNCgcd (int u, int v)
{
	int temp;
	while ( v != 0 ) {
		temp = u % v;
     b2a:	b9 01       	movw	r22, r18
     b2c:	0e 94 cd 14 	call	0x299a	; 0x299a <__divmodhi4>
     b30:	ac 01       	movw	r20, r24
     b32:	82 2f       	mov	r24, r18
     b34:	93 2f       	mov	r25, r19
}
// common divisor
int FUNCgcd (int u, int v)
{
	int temp;
	while ( v != 0 ) {
     b36:	41 15       	cp	r20, r1
     b38:	51 05       	cpc	r21, r1
     b3a:	b1 f7       	brne	.-20     	; 0xb28 <FUNCgcd+0x8>
		temp = u % v;
		u = v;
		v = temp;
	}
	return u;
}
     b3c:	08 95       	ret

00000b3e <FUNCstrToInt>:
// Function to convert a string to an integer
int FUNCstrToInt (const char string[])
{
     b3e:	fc 01       	movw	r30, r24
	int i, intValue, result = 0;
	for ( i = 0; string[i] >= '0' && string[i] <= '9'; ++i ){
     b40:	90 81       	ld	r25, Z
     b42:	80 ed       	ldi	r24, 0xD0	; 208
     b44:	89 0f       	add	r24, r25
     b46:	8a 30       	cpi	r24, 0x0A	; 10
     b48:	d0 f4       	brcc	.+52     	; 0xb7e <FUNCstrToInt+0x40>
     b4a:	31 96       	adiw	r30, 0x01	; 1
     b4c:	20 e0       	ldi	r18, 0x00	; 0
     b4e:	30 e0       	ldi	r19, 0x00	; 0
		intValue = string[i] - '0';
		result = result * 10 + intValue;
     b50:	a9 01       	movw	r20, r18
     b52:	44 0f       	add	r20, r20
     b54:	55 1f       	adc	r21, r21
     b56:	22 0f       	add	r18, r18
     b58:	33 1f       	adc	r19, r19
     b5a:	22 0f       	add	r18, r18
     b5c:	33 1f       	adc	r19, r19
     b5e:	22 0f       	add	r18, r18
     b60:	33 1f       	adc	r19, r19
     b62:	42 0f       	add	r20, r18
     b64:	53 1f       	adc	r21, r19
     b66:	29 2f       	mov	r18, r25
     b68:	30 e0       	ldi	r19, 0x00	; 0
     b6a:	20 53       	subi	r18, 0x30	; 48
     b6c:	31 09       	sbc	r19, r1
     b6e:	24 0f       	add	r18, r20
     b70:	35 1f       	adc	r19, r21
}
// Function to convert a string to an integer
int FUNCstrToInt (const char string[])
{
	int i, intValue, result = 0;
	for ( i = 0; string[i] >= '0' && string[i] <= '9'; ++i ){
     b72:	91 91       	ld	r25, Z+
     b74:	80 ed       	ldi	r24, 0xD0	; 208
     b76:	89 0f       	add	r24, r25
     b78:	8a 30       	cpi	r24, 0x0A	; 10
     b7a:	50 f3       	brcs	.-44     	; 0xb50 <FUNCstrToInt+0x12>
     b7c:	02 c0       	rjmp	.+4      	; 0xb82 <FUNCstrToInt+0x44>
	return u;
}
// Function to convert a string to an integer
int FUNCstrToInt (const char string[])
{
	int i, intValue, result = 0;
     b7e:	20 e0       	ldi	r18, 0x00	; 0
     b80:	30 e0       	ldi	r19, 0x00	; 0
	for ( i = 0; string[i] >= '0' && string[i] <= '9'; ++i ){
		intValue = string[i] - '0';
		result = result * 10 + intValue;
	}
	return result;
}
     b82:	c9 01       	movw	r24, r18
     b84:	08 95       	ret

00000b86 <FUNCfilter>:
uint8_t FUNCfilter(uint8_t mask, uint8_t data)
{
	uint8_t Z;
	Z=mask & data;
	return Z;
}
     b86:	86 23       	and	r24, r22
     b88:	08 95       	ret

00000b8a <FUNCticks>:
// ticks
unsigned int FUNCticks(unsigned int num)
{
	unsigned int count;
	for(count=0;count<num;count++)
     b8a:	00 97       	sbiw	r24, 0x00	; 0
     b8c:	39 f0       	breq	.+14     	; 0xb9c <FUNCticks+0x12>
     b8e:	20 e0       	ldi	r18, 0x00	; 0
     b90:	30 e0       	ldi	r19, 0x00	; 0
     b92:	2f 5f       	subi	r18, 0xFF	; 255
     b94:	3f 4f       	sbci	r19, 0xFF	; 255
     b96:	82 17       	cp	r24, r18
     b98:	93 07       	cpc	r25, r19
     b9a:	d9 f7       	brne	.-10     	; 0xb92 <FUNCticks+0x8>
		;
	return count;
}
     b9c:	08 95       	ret

00000b9e <FUNCtwocomptoint8bit>:
// Two's Complement function
int FUNCtwocomptoint8bit(int twoscomp){
  
  //Let's see if the byte is negative
  if (twoscomp & 0B10000000){
     b9e:	87 ff       	sbrs	r24, 7
     ba0:	08 c0       	rjmp	.+16     	; 0xbb2 <FUNCtwocomptoint8bit+0x14>
    //Invert
    twoscomp = ~twoscomp + 1;
     ba2:	91 95       	neg	r25
     ba4:	81 95       	neg	r24
     ba6:	91 09       	sbc	r25, r1
	twoscomp = (twoscomp & 0B11111111);
    //Cast as int and multiply by negative one
    int value = (int)(twoscomp)*(-1);
     ba8:	99 27       	eor	r25, r25
     baa:	91 95       	neg	r25
     bac:	81 95       	neg	r24
     bae:	91 09       	sbc	r25, r1
    return value;
     bb0:	08 95       	ret
    //Byte is non-negative, therefore convert to decimal and display
    //Make sure we are never over 1279
    twoscomp = (twoscomp & 0B01111111);
    //Cast as int and return
    int value = (int)(twoscomp);
    return value;
     bb2:	8f 77       	andi	r24, 0x7F	; 127
     bb4:	99 27       	eor	r25, r25
  }
}
     bb6:	08 95       	ret

00000bb8 <FUNCtwocomptoint10bit>:
// Two's Complement function, shifts 10 bit binary to signed integers (-512 to 512)
int FUNCtwocomptoint10bit(int twoscomp){
	
  //Let's see if the byte is negative
  if (twoscomp & 0x200){
     bb8:	91 ff       	sbrs	r25, 1
     bba:	08 c0       	rjmp	.+16     	; 0xbcc <FUNCtwocomptoint10bit+0x14>
    //Invert
    twoscomp = ~twoscomp + 1;
     bbc:	91 95       	neg	r25
     bbe:	81 95       	neg	r24
     bc0:	91 09       	sbc	r25, r1
    twoscomp = (twoscomp & 0x3FF);
    //Cast as int and multiply by negative one
    int value = (int)(twoscomp)*(-1);
     bc2:	93 70       	andi	r25, 0x03	; 3
     bc4:	91 95       	neg	r25
     bc6:	81 95       	neg	r24
     bc8:	91 09       	sbc	r25, r1
    return value;
     bca:	08 95       	ret
    //Byte is non-negative, therefore convert to decimal and display
    twoscomp = (twoscomp & 0x1FF);
    //Cast as int and return
    //Serial.println(twoscomp);
    int value = (int)(twoscomp);
    return value;
     bcc:	91 70       	andi	r25, 0x01	; 1
  }
}
     bce:	08 95       	ret

00000bd0 <FUNCtwocomptointnbit>:
// Two's Complement function, nbits
int FUNCtwocomptointnbit(int twoscomp, uint8_t nbits){
  unsigned int signmask;
  unsigned int mask;
  signmask = (1<<(nbits-1));
     bd0:	61 50       	subi	r22, 0x01	; 1
     bd2:	21 e0       	ldi	r18, 0x01	; 1
     bd4:	30 e0       	ldi	r19, 0x00	; 0
     bd6:	02 c0       	rjmp	.+4      	; 0xbdc <FUNCtwocomptointnbit+0xc>
     bd8:	22 0f       	add	r18, r18
     bda:	33 1f       	adc	r19, r19
     bdc:	6a 95       	dec	r22
     bde:	e2 f7       	brpl	.-8      	; 0xbd8 <FUNCtwocomptointnbit+0x8>
  mask=signmask-1;
     be0:	a9 01       	movw	r20, r18
     be2:	41 50       	subi	r20, 0x01	; 1
     be4:	51 09       	sbc	r21, r1
  //Let's see if the number is negative
  if (twoscomp & signmask){
     be6:	b9 01       	movw	r22, r18
     be8:	68 23       	and	r22, r24
     bea:	79 23       	and	r23, r25
     bec:	67 2b       	or	r22, r23
     bee:	29 f0       	breq	.+10     	; 0xbfa <FUNCtwocomptointnbit+0x2a>
	twoscomp &= mask;
    twoscomp -= signmask;
     bf0:	84 23       	and	r24, r20
     bf2:	95 23       	and	r25, r21
     bf4:	82 1b       	sub	r24, r18
     bf6:	93 0b       	sbc	r25, r19
     bf8:	08 95       	ret
  }else{
	  twoscomp &= mask;
     bfa:	84 23       	and	r24, r20
     bfc:	95 23       	and	r25, r21
  }
  return twoscomp;
}
     bfe:	08 95       	ret

00000c00 <FUNCdec2bcd>:
// Convert Decimal to Binary Coded Decimal (BCD)
char FUNCdec2bcd(char num)
{
	return ((num/10 * 16) + (num % 10));
     c00:	9d ec       	ldi	r25, 0xCD	; 205
     c02:	89 9f       	mul	r24, r25
     c04:	91 2d       	mov	r25, r1
     c06:	11 24       	eor	r1, r1
     c08:	96 95       	lsr	r25
     c0a:	96 95       	lsr	r25
     c0c:	96 95       	lsr	r25
     c0e:	39 2f       	mov	r19, r25
     c10:	33 0f       	add	r19, r19
     c12:	23 2f       	mov	r18, r19
     c14:	22 0f       	add	r18, r18
     c16:	22 0f       	add	r18, r18
     c18:	23 0f       	add	r18, r19
     c1a:	82 1b       	sub	r24, r18
}
     c1c:	20 e1       	ldi	r18, 0x10	; 16
     c1e:	92 9f       	mul	r25, r18
     c20:	80 0d       	add	r24, r0
     c22:	11 24       	eor	r1, r1
     c24:	08 95       	ret

00000c26 <FUNCbcd2dec>:
// Convert Binary Coded Decimal (BCD) to Decimal
char FUNCbcd2dec(char num)
{
	return ((num/16 * 10) + (num % 16));
     c26:	98 2f       	mov	r25, r24
     c28:	92 95       	swap	r25
     c2a:	9f 70       	andi	r25, 0x0F	; 15
     c2c:	99 0f       	add	r25, r25
     c2e:	29 2f       	mov	r18, r25
     c30:	22 0f       	add	r18, r18
     c32:	22 0f       	add	r18, r18
     c34:	92 0f       	add	r25, r18
     c36:	8f 70       	andi	r24, 0x0F	; 15
}
     c38:	89 0f       	add	r24, r25
     c3a:	08 95       	ret

00000c3c <FUNCresizestr>:
char* FUNCresizestr(char *string, int size)
{
     c3c:	fc 01       	movw	r30, r24
	int i;
	FUNCstr[size]='\0';
     c3e:	db 01       	movw	r26, r22
     c40:	af 5f       	subi	r26, 0xFF	; 255
     c42:	bd 4f       	sbci	r27, 0xFD	; 253
     c44:	1c 92       	st	X, r1
	for(i=0;i<size;i++){
     c46:	16 16       	cp	r1, r22
     c48:	17 06       	cpc	r1, r23
     c4a:	14 f5       	brge	.+68     	; 0xc90 <FUNCresizestr+0x54>
		if(*(string+i)=='\0'){
     c4c:	90 81       	ld	r25, Z
     c4e:	91 11       	cpse	r25, r1
     c50:	0c c0       	rjmp	.+24     	; 0xc6a <FUNCresizestr+0x2e>
     c52:	17 c0       	rjmp	.+46     	; 0xc82 <FUNCresizestr+0x46>
     c54:	91 91       	ld	r25, Z+
     c56:	91 11       	cpse	r25, r1
     c58:	0d c0       	rjmp	.+26     	; 0xc74 <FUNCresizestr+0x38>
     c5a:	15 c0       	rjmp	.+42     	; 0xc86 <FUNCresizestr+0x4a>
			for(;i<size;i++){
				FUNCstr[i]=' ';
     c5c:	81 93       	st	Z+, r24
{
	int i;
	FUNCstr[size]='\0';
	for(i=0;i<size;i++){
		if(*(string+i)=='\0'){
			for(;i<size;i++){
     c5e:	2f 5f       	subi	r18, 0xFF	; 255
     c60:	3f 4f       	sbci	r19, 0xFF	; 255
     c62:	26 17       	cp	r18, r22
     c64:	37 07       	cpc	r19, r23
     c66:	d4 f3       	brlt	.-12     	; 0xc5c <FUNCresizestr+0x20>
     c68:	13 c0       	rjmp	.+38     	; 0xc90 <FUNCresizestr+0x54>
     c6a:	a1 e0       	ldi	r26, 0x01	; 1
     c6c:	b2 e0       	ldi	r27, 0x02	; 2
     c6e:	31 96       	adiw	r30, 0x01	; 1
char* FUNCresizestr(char *string, int size)
{
	int i;
	FUNCstr[size]='\0';
	for(i=0;i<size;i++){
		if(*(string+i)=='\0'){
     c70:	20 e0       	ldi	r18, 0x00	; 0
     c72:	30 e0       	ldi	r19, 0x00	; 0
			for(;i<size;i++){
				FUNCstr[i]=' ';
			}
			break;
		}
		FUNCstr[i]=*(string+i);
     c74:	9d 93       	st	X+, r25
}
char* FUNCresizestr(char *string, int size)
{
	int i;
	FUNCstr[size]='\0';
	for(i=0;i<size;i++){
     c76:	2f 5f       	subi	r18, 0xFF	; 255
     c78:	3f 4f       	sbci	r19, 0xFF	; 255
     c7a:	62 17       	cp	r22, r18
     c7c:	73 07       	cpc	r23, r19
     c7e:	51 f7       	brne	.-44     	; 0xc54 <FUNCresizestr+0x18>
     c80:	07 c0       	rjmp	.+14     	; 0xc90 <FUNCresizestr+0x54>
     c82:	20 e0       	ldi	r18, 0x00	; 0
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	f9 01       	movw	r30, r18
     c88:	ef 5f       	subi	r30, 0xFF	; 255
     c8a:	fd 4f       	sbci	r31, 0xFD	; 253
		if(*(string+i)=='\0'){
			for(;i<size;i++){
				FUNCstr[i]=' ';
     c8c:	80 e2       	ldi	r24, 0x20	; 32
     c8e:	e6 cf       	rjmp	.-52     	; 0xc5c <FUNCresizestr+0x20>
			break;
		}
		FUNCstr[i]=*(string+i);
	}
	return FUNCstr;
}
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	92 e0       	ldi	r25, 0x02	; 2
     c94:	08 95       	ret

00000c96 <FUNCtrimmer>:
long FUNCtrimmer(long x, long in_min, long in_max, long out_min, long out_max)
/*
	same as arduino map function.
*/
{
     c96:	4f 92       	push	r4
     c98:	5f 92       	push	r5
     c9a:	6f 92       	push	r6
     c9c:	7f 92       	push	r7
     c9e:	af 92       	push	r10
     ca0:	bf 92       	push	r11
     ca2:	cf 92       	push	r12
     ca4:	df 92       	push	r13
     ca6:	ef 92       	push	r14
     ca8:	ff 92       	push	r15
     caa:	0f 93       	push	r16
     cac:	1f 93       	push	r17
     cae:	cf 93       	push	r28
     cb0:	df 93       	push	r29
     cb2:	cd b7       	in	r28, 0x3d	; 61
     cb4:	de b7       	in	r29, 0x3e	; 62
     cb6:	29 01       	movw	r4, r18
     cb8:	3a 01       	movw	r6, r20
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
     cba:	9b 01       	movw	r18, r22
     cbc:	ac 01       	movw	r20, r24
     cbe:	24 19       	sub	r18, r4
     cc0:	35 09       	sbc	r19, r5
     cc2:	46 09       	sbc	r20, r6
     cc4:	57 09       	sbc	r21, r7
     cc6:	89 89       	ldd	r24, Y+17	; 0x11
     cc8:	9a 89       	ldd	r25, Y+18	; 0x12
     cca:	ab 89       	ldd	r26, Y+19	; 0x13
     ccc:	bc 89       	ldd	r27, Y+20	; 0x14
     cce:	bc 01       	movw	r22, r24
     cd0:	cd 01       	movw	r24, r26
     cd2:	6a 19       	sub	r22, r10
     cd4:	7b 09       	sbc	r23, r11
     cd6:	8c 09       	sbc	r24, r12
     cd8:	9d 09       	sbc	r25, r13
     cda:	0e 94 aa 14 	call	0x2954	; 0x2954 <__mulsi3>
     cde:	a8 01       	movw	r20, r16
     ce0:	97 01       	movw	r18, r14
     ce2:	24 19       	sub	r18, r4
     ce4:	35 09       	sbc	r19, r5
     ce6:	46 09       	sbc	r20, r6
     ce8:	57 09       	sbc	r21, r7
     cea:	0e 94 02 15 	call	0x2a04	; 0x2a04 <__divmodsi4>
     cee:	ca 01       	movw	r24, r20
     cf0:	b9 01       	movw	r22, r18
     cf2:	6a 0d       	add	r22, r10
     cf4:	7b 1d       	adc	r23, r11
     cf6:	8c 1d       	adc	r24, r12
     cf8:	9d 1d       	adc	r25, r13
}
     cfa:	df 91       	pop	r29
     cfc:	cf 91       	pop	r28
     cfe:	1f 91       	pop	r17
     d00:	0f 91       	pop	r16
     d02:	ff 90       	pop	r15
     d04:	ef 90       	pop	r14
     d06:	df 90       	pop	r13
     d08:	cf 90       	pop	r12
     d0a:	bf 90       	pop	r11
     d0c:	af 90       	pop	r10
     d0e:	7f 90       	pop	r7
     d10:	6f 90       	pop	r6
     d12:	5f 90       	pop	r5
     d14:	4f 90       	pop	r4
     d16:	08 95       	ret

00000d18 <Pwr>:
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
     d18:	70 e0       	ldi	r23, 0x00	; 0
     d1a:	61 15       	cp	r22, r1
     d1c:	71 05       	cpc	r23, r1
     d1e:	99 f0       	breq	.+38     	; 0xd46 <Pwr+0x2e>
     d20:	41 e0       	ldi	r20, 0x01	; 1
     d22:	50 e0       	ldi	r21, 0x00	; 0
     d24:	21 e0       	ldi	r18, 0x01	; 1
     d26:	30 e0       	ldi	r19, 0x00	; 0
        p = p * bs;
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	fa 01       	movw	r30, r20
     d2c:	e8 9f       	mul	r30, r24
     d2e:	a0 01       	movw	r20, r0
     d30:	e9 9f       	mul	r30, r25
     d32:	50 0d       	add	r21, r0
     d34:	f8 9f       	mul	r31, r24
     d36:	50 0d       	add	r21, r0
     d38:	11 24       	eor	r1, r1
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
     d3a:	2f 5f       	subi	r18, 0xFF	; 255
     d3c:	3f 4f       	sbci	r19, 0xFF	; 255
     d3e:	62 17       	cp	r22, r18
     d40:	73 07       	cpc	r23, r19
     d42:	98 f7       	brcc	.-26     	; 0xd2a <Pwr+0x12>
     d44:	02 c0       	rjmp	.+4      	; 0xd4a <Pwr+0x32>
}
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
     d46:	41 e0       	ldi	r20, 0x01	; 1
     d48:	50 e0       	ldi	r21, 0x00	; 0
    for (i = 1; i <= n; ++i)
        p = p * bs;
    return p;
}
     d4a:	ca 01       	movw	r24, r20
     d4c:	08 95       	ret

00000d4e <StringLength>:
// Function to count the number of characters in a string
int StringLength (const char string[])
{
	int count = 0;
	while ( string[count] != '\0' )
     d4e:	fc 01       	movw	r30, r24
     d50:	20 81       	ld	r18, Z
     d52:	22 23       	and	r18, r18
     d54:	41 f0       	breq	.+16     	; 0xd66 <StringLength+0x18>
     d56:	31 96       	adiw	r30, 0x01	; 1
     d58:	80 e0       	ldi	r24, 0x00	; 0
     d5a:	90 e0       	ldi	r25, 0x00	; 0
		++count;
     d5c:	01 96       	adiw	r24, 0x01	; 1
}
// Function to count the number of characters in a string
int StringLength (const char string[])
{
	int count = 0;
	while ( string[count] != '\0' )
     d5e:	21 91       	ld	r18, Z+
     d60:	21 11       	cpse	r18, r1
     d62:	fc cf       	rjmp	.-8      	; 0xd5c <StringLength+0xe>
     d64:	08 95       	ret
    return p;
}
// Function to count the number of characters in a string
int StringLength (const char string[])
{
	int count = 0;
     d66:	80 e0       	ldi	r24, 0x00	; 0
     d68:	90 e0       	ldi	r25, 0x00	; 0
	while ( string[count] != '\0' )
		++count;
	return count;
}
     d6a:	08 95       	ret

00000d6c <FUNCtrim>:
	Reverse(FUNCstr);
	return FUNCstr;
}
// trim: remove trailing blanks, tabs, newlines
int FUNCtrim(char s[])
{
     d6c:	cf 93       	push	r28
     d6e:	df 93       	push	r29
     d70:	ec 01       	movw	r28, r24
	int n;
	for (n = StringLength(s)-1; n >= 0; n--)
     d72:	ed df       	rcall	.-38     	; 0xd4e <StringLength>
     d74:	9c 01       	movw	r18, r24
     d76:	21 50       	subi	r18, 0x01	; 1
     d78:	31 09       	sbc	r19, r1
     d7a:	62 f0       	brmi	.+24     	; 0xd94 <FUNCtrim+0x28>
     d7c:	fe 01       	movw	r30, r28
     d7e:	e8 0f       	add	r30, r24
     d80:	f9 1f       	adc	r31, r25
		if (s[n] != ' ' && s[n] != '\t' && s[n] != '\n')
     d82:	92 91       	ld	r25, -Z
     d84:	90 32       	cpi	r25, 0x20	; 32
     d86:	19 f0       	breq	.+6      	; 0xd8e <FUNCtrim+0x22>
     d88:	99 50       	subi	r25, 0x09	; 9
     d8a:	92 30       	cpi	r25, 0x02	; 2
     d8c:	18 f4       	brcc	.+6      	; 0xd94 <FUNCtrim+0x28>
}
// trim: remove trailing blanks, tabs, newlines
int FUNCtrim(char s[])
{
	int n;
	for (n = StringLength(s)-1; n >= 0; n--)
     d8e:	21 50       	subi	r18, 0x01	; 1
     d90:	31 09       	sbc	r19, r1
     d92:	b8 f7       	brcc	.-18     	; 0xd82 <FUNCtrim+0x16>
		if (s[n] != ' ' && s[n] != '\t' && s[n] != '\n')
			break;
	s[n+1] = '\0';
     d94:	c2 0f       	add	r28, r18
     d96:	d3 1f       	adc	r29, r19
     d98:	19 82       	std	Y+1, r1	; 0x01
	return n;
}
     d9a:	c9 01       	movw	r24, r18
     d9c:	df 91       	pop	r29
     d9e:	cf 91       	pop	r28
     da0:	08 95       	ret

00000da2 <Reverse>:
		++count;
	return count;
}
// reverse: reverse string s in place
void Reverse(char s[])
{
     da2:	cf 93       	push	r28
     da4:	df 93       	push	r29
     da6:	ec 01       	movw	r28, r24
	int c, i, j;
	for (i = 0, j = StringLength(s)-1; i < j; i++, j--){
     da8:	d2 df       	rcall	.-92     	; 0xd4e <StringLength>
     daa:	9c 01       	movw	r18, r24
     dac:	21 50       	subi	r18, 0x01	; 1
     dae:	31 09       	sbc	r19, r1
     db0:	12 16       	cp	r1, r18
     db2:	13 06       	cpc	r1, r19
     db4:	84 f4       	brge	.+32     	; 0xdd6 <Reverse+0x34>
     db6:	de 01       	movw	r26, r28
     db8:	a8 0f       	add	r26, r24
     dba:	b9 1f       	adc	r27, r25
     dbc:	fe 01       	movw	r30, r28
     dbe:	80 e0       	ldi	r24, 0x00	; 0
     dc0:	90 e0       	ldi	r25, 0x00	; 0
		c = s[i];
     dc2:	40 81       	ld	r20, Z
		s[i] = s[j];
     dc4:	5e 91       	ld	r21, -X
     dc6:	51 93       	st	Z+, r21
		s[j] = c;
     dc8:	4c 93       	st	X, r20
}
// reverse: reverse string s in place
void Reverse(char s[])
{
	int c, i, j;
	for (i = 0, j = StringLength(s)-1; i < j; i++, j--){
     dca:	01 96       	adiw	r24, 0x01	; 1
     dcc:	21 50       	subi	r18, 0x01	; 1
     dce:	31 09       	sbc	r19, r1
     dd0:	82 17       	cp	r24, r18
     dd2:	93 07       	cpc	r25, r19
     dd4:	b4 f3       	brlt	.-20     	; 0xdc2 <Reverse+0x20>
		c = s[i];
		s[i] = s[j];
		s[j] = c;
	}
}
     dd6:	df 91       	pop	r29
     dd8:	cf 91       	pop	r28
     dda:	08 95       	ret

00000ddc <FUNCi32toa>:
				v[j+gap] = temp;
			}
}
// i32toa: convert n to characters in s
char* FUNCi32toa(int32_t n)
{
     ddc:	8f 92       	push	r8
     dde:	9f 92       	push	r9
     de0:	af 92       	push	r10
     de2:	bf 92       	push	r11
     de4:	cf 92       	push	r12
     de6:	df 92       	push	r13
     de8:	ef 92       	push	r14
     dea:	ff 92       	push	r15
     dec:	0f 93       	push	r16
     dee:	1f 93       	push	r17
     df0:	cf 93       	push	r28
     df2:	df 93       	push	r29
     df4:	6b 01       	movw	r12, r22
     df6:	7c 01       	movw	r14, r24
     df8:	dc 01       	movw	r26, r24
     dfa:	cb 01       	movw	r24, r22
     dfc:	ff 20       	and	r15, r15
     dfe:	3c f4       	brge	.+14     	; 0xe0e <FUNCi32toa+0x32>
     e00:	88 27       	eor	r24, r24
     e02:	99 27       	eor	r25, r25
     e04:	dc 01       	movw	r26, r24
     e06:	8c 19       	sub	r24, r12
     e08:	9d 09       	sbc	r25, r13
     e0a:	ae 09       	sbc	r26, r14
     e0c:	bf 09       	sbc	r27, r15
     e0e:	bc 01       	movw	r22, r24
     e10:	cd 01       	movw	r24, r26
     e12:	10 e0       	ldi	r17, 0x00	; 0
	int32_t sign;
	if ((sign = n) < 0) // record sign
	n = -n; // make n positive
	i = 0;
	do { // generate digits in reverse order
		FUNCstr[i++] = n % 10 + '0'; // get next digit
     e14:	0f 2e       	mov	r0, r31
     e16:	fa e0       	ldi	r31, 0x0A	; 10
     e18:	8f 2e       	mov	r8, r31
     e1a:	91 2c       	mov	r9, r1
     e1c:	a1 2c       	mov	r10, r1
     e1e:	b1 2c       	mov	r11, r1
     e20:	f0 2d       	mov	r31, r0
     e22:	01 c0       	rjmp	.+2      	; 0xe26 <FUNCi32toa+0x4a>
     e24:	10 2f       	mov	r17, r16
     e26:	01 e0       	ldi	r16, 0x01	; 1
     e28:	01 0f       	add	r16, r17
     e2a:	c1 2f       	mov	r28, r17
     e2c:	d0 e0       	ldi	r29, 0x00	; 0
     e2e:	cf 5f       	subi	r28, 0xFF	; 255
     e30:	dd 4f       	sbci	r29, 0xFD	; 253
     e32:	a5 01       	movw	r20, r10
     e34:	94 01       	movw	r18, r8
     e36:	0e 94 02 15 	call	0x2a04	; 0x2a04 <__divmodsi4>
     e3a:	60 5d       	subi	r22, 0xD0	; 208
     e3c:	68 83       	st	Y, r22
	}while ((n /= 10) > 0); // delete it
     e3e:	62 2f       	mov	r22, r18
     e40:	73 2f       	mov	r23, r19
     e42:	84 2f       	mov	r24, r20
     e44:	95 2f       	mov	r25, r21
     e46:	16 16       	cp	r1, r22
     e48:	17 06       	cpc	r1, r23
     e4a:	18 06       	cpc	r1, r24
     e4c:	19 06       	cpc	r1, r25
     e4e:	54 f3       	brlt	.-44     	; 0xe24 <FUNCi32toa+0x48>
	if (sign < 0)
     e50:	ff 20       	and	r15, r15
     e52:	44 f4       	brge	.+16     	; 0xe64 <FUNCi32toa+0x88>
	FUNCstr[i++] = '-';
     e54:	e0 2f       	mov	r30, r16
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	ef 5f       	subi	r30, 0xFF	; 255
     e5a:	fd 4f       	sbci	r31, 0xFD	; 253
     e5c:	8d e2       	ldi	r24, 0x2D	; 45
     e5e:	80 83       	st	Z, r24
     e60:	02 e0       	ldi	r16, 0x02	; 2
     e62:	01 0f       	add	r16, r17
	FUNCstr[i] = '\0';
     e64:	e0 2f       	mov	r30, r16
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	ef 5f       	subi	r30, 0xFF	; 255
     e6a:	fd 4f       	sbci	r31, 0xFD	; 253
     e6c:	10 82       	st	Z, r1
	Reverse(FUNCstr);
     e6e:	81 e0       	ldi	r24, 0x01	; 1
     e70:	92 e0       	ldi	r25, 0x02	; 2
     e72:	97 df       	rcall	.-210    	; 0xda2 <Reverse>
	return FUNCstr;
}
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	92 e0       	ldi	r25, 0x02	; 2
     e78:	df 91       	pop	r29
     e7a:	cf 91       	pop	r28
     e7c:	1f 91       	pop	r17
     e7e:	0f 91       	pop	r16
     e80:	ff 90       	pop	r15
     e82:	ef 90       	pop	r14
     e84:	df 90       	pop	r13
     e86:	cf 90       	pop	r12
     e88:	bf 90       	pop	r11
     e8a:	af 90       	pop	r10
     e8c:	9f 90       	pop	r9
     e8e:	8f 90       	pop	r8
     e90:	08 95       	ret

00000e92 <FUNCi16toa>:
// i16toa: convert n to characters in s
char* FUNCi16toa(int16_t n)
{
     e92:	0f 93       	push	r16
     e94:	1f 93       	push	r17
     e96:	cf 93       	push	r28
     e98:	df 93       	push	r29
     e9a:	ec 01       	movw	r28, r24
     e9c:	99 23       	and	r25, r25
     e9e:	24 f4       	brge	.+8      	; 0xea8 <FUNCi16toa+0x16>
     ea0:	88 27       	eor	r24, r24
     ea2:	99 27       	eor	r25, r25
     ea4:	8c 1b       	sub	r24, r28
     ea6:	9d 0b       	sbc	r25, r29
     ea8:	20 e0       	ldi	r18, 0x00	; 0
	int16_t sign;
	if ((sign = n) < 0) // record sign
		n = -n; // make n positive
	i = 0;
	do { // generate digits in reverse order
		FUNCstr[i++] = n % 10 + '0'; // get next digit
     eaa:	0a e0       	ldi	r16, 0x0A	; 10
     eac:	10 e0       	ldi	r17, 0x00	; 0
     eae:	01 c0       	rjmp	.+2      	; 0xeb2 <FUNCi16toa+0x20>
     eb0:	23 2f       	mov	r18, r19
     eb2:	31 e0       	ldi	r19, 0x01	; 1
     eb4:	32 0f       	add	r19, r18
     eb6:	e2 2f       	mov	r30, r18
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	ef 5f       	subi	r30, 0xFF	; 255
     ebc:	fd 4f       	sbci	r31, 0xFD	; 253
     ebe:	b8 01       	movw	r22, r16
     ec0:	0e 94 cd 14 	call	0x299a	; 0x299a <__divmodhi4>
     ec4:	80 5d       	subi	r24, 0xD0	; 208
     ec6:	80 83       	st	Z, r24
	}while ((n /= 10) > 0); // delete it
     ec8:	86 2f       	mov	r24, r22
     eca:	97 2f       	mov	r25, r23
     ecc:	18 16       	cp	r1, r24
     ece:	19 06       	cpc	r1, r25
     ed0:	7c f3       	brlt	.-34     	; 0xeb0 <FUNCi16toa+0x1e>
	if (sign < 0)
     ed2:	dd 23       	and	r29, r29
     ed4:	44 f4       	brge	.+16     	; 0xee6 <FUNCi16toa+0x54>
		FUNCstr[i++] = '-';
     ed6:	e3 2f       	mov	r30, r19
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	ef 5f       	subi	r30, 0xFF	; 255
     edc:	fd 4f       	sbci	r31, 0xFD	; 253
     ede:	8d e2       	ldi	r24, 0x2D	; 45
     ee0:	80 83       	st	Z, r24
     ee2:	32 e0       	ldi	r19, 0x02	; 2
     ee4:	32 0f       	add	r19, r18
	FUNCstr[i] = '\0';
     ee6:	e3 2f       	mov	r30, r19
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	ef 5f       	subi	r30, 0xFF	; 255
     eec:	fd 4f       	sbci	r31, 0xFD	; 253
     eee:	10 82       	st	Z, r1
	Reverse(FUNCstr);
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	92 e0       	ldi	r25, 0x02	; 2
     ef4:	56 df       	rcall	.-340    	; 0xda2 <Reverse>
	return FUNCstr;
}
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	92 e0       	ldi	r25, 0x02	; 2
     efa:	df 91       	pop	r29
     efc:	cf 91       	pop	r28
     efe:	1f 91       	pop	r17
     f00:	0f 91       	pop	r16
     f02:	08 95       	ret

00000f04 <FUNCui16toa>:
// ui16toa: convert n to characters in s
char* FUNCui16toa(uint16_t n)
{
     f04:	cf 93       	push	r28
     f06:	ac 01       	movw	r20, r24
	uint8_t i;
	i = 0;
     f08:	e0 e0       	ldi	r30, 0x00	; 0
	do { // generate digits in reverse order
		FUNCstr[i++] = n % 10 + '0'; // get next digit
     f0a:	c1 e0       	ldi	r28, 0x01	; 1
     f0c:	ce 0f       	add	r28, r30
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	ef 5f       	subi	r30, 0xFF	; 255
     f12:	fd 4f       	sbci	r31, 0xFD	; 253
     f14:	9a 01       	movw	r18, r20
     f16:	ad ec       	ldi	r26, 0xCD	; 205
     f18:	bc ec       	ldi	r27, 0xCC	; 204
     f1a:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <__umulhisi3>
     f1e:	96 95       	lsr	r25
     f20:	87 95       	ror	r24
     f22:	96 95       	lsr	r25
     f24:	87 95       	ror	r24
     f26:	96 95       	lsr	r25
     f28:	87 95       	ror	r24
     f2a:	9c 01       	movw	r18, r24
     f2c:	22 0f       	add	r18, r18
     f2e:	33 1f       	adc	r19, r19
     f30:	88 0f       	add	r24, r24
     f32:	99 1f       	adc	r25, r25
     f34:	88 0f       	add	r24, r24
     f36:	99 1f       	adc	r25, r25
     f38:	88 0f       	add	r24, r24
     f3a:	99 1f       	adc	r25, r25
     f3c:	82 0f       	add	r24, r18
     f3e:	93 1f       	adc	r25, r19
     f40:	9a 01       	movw	r18, r20
     f42:	28 1b       	sub	r18, r24
     f44:	39 0b       	sbc	r19, r25
     f46:	c9 01       	movw	r24, r18
     f48:	80 5d       	subi	r24, 0xD0	; 208
     f4a:	80 83       	st	Z, r24
	}while ((n /= 10) > 0); // delete it
     f4c:	9a 01       	movw	r18, r20
     f4e:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <__umulhisi3>
     f52:	ac 01       	movw	r20, r24
     f54:	56 95       	lsr	r21
     f56:	47 95       	ror	r20
     f58:	56 95       	lsr	r21
     f5a:	47 95       	ror	r20
     f5c:	56 95       	lsr	r21
     f5e:	47 95       	ror	r20
char* FUNCui16toa(uint16_t n)
{
	uint8_t i;
	i = 0;
	do { // generate digits in reverse order
		FUNCstr[i++] = n % 10 + '0'; // get next digit
     f60:	ec 2f       	mov	r30, r28
	}while ((n /= 10) > 0); // delete it
     f62:	41 15       	cp	r20, r1
     f64:	51 05       	cpc	r21, r1
     f66:	89 f6       	brne	.-94     	; 0xf0a <FUNCui16toa+0x6>
	FUNCstr[i] = '\0';
     f68:	ec 2f       	mov	r30, r28
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	ef 5f       	subi	r30, 0xFF	; 255
     f6e:	fd 4f       	sbci	r31, 0xFD	; 253
     f70:	10 82       	st	Z, r1
	Reverse(FUNCstr);
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	92 e0       	ldi	r25, 0x02	; 2
     f76:	15 df       	rcall	.-470    	; 0xda2 <Reverse>
	return FUNCstr;
}
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	92 e0       	ldi	r25, 0x02	; 2
     f7c:	cf 91       	pop	r28
     f7e:	08 95       	ret

00000f80 <FUNCbcd2bin>:
		s[j] = c;
	}
}
unsigned char FUNCbcd2bin(unsigned char val)
{
	return (val & 0x0f) + (val >> 4) * 10;
     f80:	98 2f       	mov	r25, r24
     f82:	92 95       	swap	r25
     f84:	9f 70       	andi	r25, 0x0F	; 15
     f86:	99 0f       	add	r25, r25
     f88:	29 2f       	mov	r18, r25
     f8a:	22 0f       	add	r18, r18
     f8c:	22 0f       	add	r18, r18
     f8e:	92 0f       	add	r25, r18
     f90:	8f 70       	andi	r24, 0x0F	; 15
}
     f92:	89 0f       	add	r24, r25
     f94:	08 95       	ret

00000f96 <FUNCbin2bcd>:
unsigned char FUNCbin2bcd(unsigned val)
{
     f96:	ac 01       	movw	r20, r24
	return ((val / 10) << 4) + val % 10;
     f98:	9c 01       	movw	r18, r24
     f9a:	ad ec       	ldi	r26, 0xCD	; 205
     f9c:	bc ec       	ldi	r27, 0xCC	; 204
     f9e:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <__umulhisi3>
     fa2:	96 95       	lsr	r25
     fa4:	87 95       	ror	r24
     fa6:	96 95       	lsr	r25
     fa8:	87 95       	ror	r24
     faa:	96 95       	lsr	r25
     fac:	87 95       	ror	r24
     fae:	bc 01       	movw	r22, r24
     fb0:	66 0f       	add	r22, r22
     fb2:	77 1f       	adc	r23, r23
     fb4:	9c 01       	movw	r18, r24
     fb6:	22 0f       	add	r18, r18
     fb8:	33 1f       	adc	r19, r19
     fba:	22 0f       	add	r18, r18
     fbc:	33 1f       	adc	r19, r19
     fbe:	22 0f       	add	r18, r18
     fc0:	33 1f       	adc	r19, r19
     fc2:	26 0f       	add	r18, r22
     fc4:	37 1f       	adc	r19, r23
     fc6:	42 1b       	sub	r20, r18
     fc8:	53 0b       	sbc	r21, r19
}
     fca:	34 2f       	mov	r19, r20
     fcc:	20 e1       	ldi	r18, 0x10	; 16
     fce:	82 9f       	mul	r24, r18
     fd0:	30 0d       	add	r19, r0
     fd2:	11 24       	eor	r1, r1
     fd4:	83 2f       	mov	r24, r19
     fd6:	08 95       	ret

00000fd8 <FUNCgcd1>:
long FUNCgcd1(long a, long b)
{
     fd8:	cf 92       	push	r12
     fda:	df 92       	push	r13
     fdc:	ef 92       	push	r14
     fde:	ff 92       	push	r15
     fe0:	cf 93       	push	r28
     fe2:	df 93       	push	r29
     fe4:	cd b7       	in	r28, 0x3d	; 61
     fe6:	de b7       	in	r29, 0x3e	; 62
     fe8:	28 97       	sbiw	r28, 0x08	; 8
     fea:	0f b6       	in	r0, 0x3f	; 63
     fec:	f8 94       	cli
     fee:	de bf       	out	0x3e, r29	; 62
     ff0:	0f be       	out	0x3f, r0	; 63
     ff2:	cd bf       	out	0x3d, r28	; 61
     ff4:	6b 01       	movw	r12, r22
     ff6:	7c 01       	movw	r14, r24
     ff8:	69 83       	std	Y+1, r22	; 0x01
     ffa:	7a 83       	std	Y+2, r23	; 0x02
     ffc:	8b 83       	std	Y+3, r24	; 0x03
     ffe:	9c 83       	std	Y+4, r25	; 0x04
    1000:	2d 83       	std	Y+5, r18	; 0x05
    1002:	3e 83       	std	Y+6, r19	; 0x06
    1004:	4f 83       	std	Y+7, r20	; 0x07
    1006:	58 87       	std	Y+8, r21	; 0x08
	long r;
	if (a < b)
    1008:	c2 16       	cp	r12, r18
    100a:	d3 06       	cpc	r13, r19
    100c:	e4 06       	cpc	r14, r20
    100e:	f5 06       	cpc	r15, r21
    1010:	34 f4       	brge	.+12     	; 0x101e <FUNCgcd1+0x46>
		FUNCswap(&a, &b);
    1012:	be 01       	movw	r22, r28
    1014:	6b 5f       	subi	r22, 0xFB	; 251
    1016:	7f 4f       	sbci	r23, 0xFF	; 255
    1018:	ce 01       	movw	r24, r28
    101a:	01 96       	adiw	r24, 0x01	; 1
    101c:	85 dc       	rcall	.-1782   	; 0x928 <FUNCswap>
	if (!b){
    101e:	8d 81       	ldd	r24, Y+5	; 0x05
    1020:	9e 81       	ldd	r25, Y+6	; 0x06
    1022:	af 81       	ldd	r26, Y+7	; 0x07
    1024:	b8 85       	ldd	r27, Y+8	; 0x08
    1026:	89 2b       	or	r24, r25
    1028:	8a 2b       	or	r24, r26
    102a:	8b 2b       	or	r24, r27
    102c:	71 f4       	brne	.+28     	; 0x104a <FUNCgcd1+0x72>
		while ((r = a % b) != 0) {
    102e:	69 81       	ldd	r22, Y+1	; 0x01
    1030:	7a 81       	ldd	r23, Y+2	; 0x02
    1032:	8b 81       	ldd	r24, Y+3	; 0x03
    1034:	9c 81       	ldd	r25, Y+4	; 0x04
    1036:	20 e0       	ldi	r18, 0x00	; 0
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	a9 01       	movw	r20, r18
    103c:	0e 94 02 15 	call	0x2a04	; 0x2a04 <__divmodsi4>
    1040:	61 15       	cp	r22, r1
    1042:	71 05       	cpc	r23, r1
    1044:	81 05       	cpc	r24, r1
    1046:	91 05       	cpc	r25, r1
    1048:	29 f4       	brne	.+10     	; 0x1054 <FUNCgcd1+0x7c>
			a = b;
			b = r;
		}
	}	
	return b;
    104a:	6d 81       	ldd	r22, Y+5	; 0x05
    104c:	7e 81       	ldd	r23, Y+6	; 0x06
    104e:	8f 81       	ldd	r24, Y+7	; 0x07
    1050:	98 85       	ldd	r25, Y+8	; 0x08
    1052:	05 c0       	rjmp	.+10     	; 0x105e <FUNCgcd1+0x86>
	if (a < b)
		FUNCswap(&a, &b);
	if (!b){
		while ((r = a % b) != 0) {
			a = b;
			b = r;
    1054:	6d 83       	std	Y+5, r22	; 0x05
    1056:	7e 83       	std	Y+6, r23	; 0x06
    1058:	8f 83       	std	Y+7, r24	; 0x07
    105a:	98 87       	std	Y+8, r25	; 0x08
    105c:	f6 cf       	rjmp	.-20     	; 0x104a <FUNCgcd1+0x72>
		}
	}	
	return b;
}
    105e:	28 96       	adiw	r28, 0x08	; 8
    1060:	0f b6       	in	r0, 0x3f	; 63
    1062:	f8 94       	cli
    1064:	de bf       	out	0x3e, r29	; 62
    1066:	0f be       	out	0x3f, r0	; 63
    1068:	cd bf       	out	0x3d, r28	; 61
    106a:	df 91       	pop	r29
    106c:	cf 91       	pop	r28
    106e:	ff 90       	pop	r15
    1070:	ef 90       	pop	r14
    1072:	df 90       	pop	r13
    1074:	cf 90       	pop	r12
    1076:	08 95       	ret

00001078 <FUNCpincheck>:
	uint8_t lh;
	if(port & (1<<pin))
		lh=1;
	else
		lh=0;
	return lh;
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	02 c0       	rjmp	.+4      	; 0x1080 <FUNCpincheck+0x8>
    107c:	95 95       	asr	r25
    107e:	87 95       	ror	r24
    1080:	6a 95       	dec	r22
    1082:	e2 f7       	brpl	.-8      	; 0x107c <FUNCpincheck+0x4>
}
    1084:	81 70       	andi	r24, 0x01	; 1
    1086:	08 95       	ret

00001088 <FUNCprint_binary>:
char* FUNCprint_binary(uint8_t number)
{
    1088:	e1 e0       	ldi	r30, 0x01	; 1
    108a:	f2 e0       	ldi	r31, 0x02	; 2
	uint8_t i,c;
    for(i=128,c=0;i;i>>=1,c++){
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	20 e8       	ldi	r18, 0x80	; 128
	(number & i) ? (FUNCstr[c]='1') : (FUNCstr[c]='0');
    1090:	50 e3       	ldi	r21, 0x30	; 48
    1092:	41 e3       	ldi	r20, 0x31	; 49
    1094:	38 2f       	mov	r19, r24
    1096:	32 23       	and	r19, r18
    1098:	11 f0       	breq	.+4      	; 0x109e <FUNCprint_binary+0x16>
    109a:	40 83       	st	Z, r20
    109c:	01 c0       	rjmp	.+2      	; 0x10a0 <FUNCprint_binary+0x18>
    109e:	50 83       	st	Z, r21
	return lh;
}
char* FUNCprint_binary(uint8_t number)
{
	uint8_t i,c;
    for(i=128,c=0;i;i>>=1,c++){
    10a0:	26 95       	lsr	r18
    10a2:	9f 5f       	subi	r25, 0xFF	; 255
    10a4:	31 96       	adiw	r30, 0x01	; 1
    10a6:	98 30       	cpi	r25, 0x08	; 8
    10a8:	a9 f7       	brne	.-22     	; 0x1094 <FUNCprint_binary+0xc>
	(number & i) ? (FUNCstr[c]='1') : (FUNCstr[c]='0');
	}
	FUNCstr[c]='\0';
    10aa:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <FUNCstr+0x8>
	return FUNCstr;
}
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	92 e0       	ldi	r25, 0x02	; 2
    10b2:	08 95       	ret

000010b4 <FUNCmayia>:
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
    10b4:	a4 2f       	mov	r26, r20
    10b6:	b0 e0       	ldi	r27, 0x00	; 0
    10b8:	10 97       	sbiw	r26, 0x00	; 0
    10ba:	61 f0       	breq	.+24     	; 0x10d4 <FUNCmayia+0x20>
    10bc:	21 e0       	ldi	r18, 0x01	; 1
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	e1 e0       	ldi	r30, 0x01	; 1
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
        p = p * bs;
    10c4:	ee 0f       	add	r30, r30
    10c6:	ff 1f       	adc	r31, r31
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
    10c8:	2f 5f       	subi	r18, 0xFF	; 255
    10ca:	3f 4f       	sbci	r19, 0xFF	; 255
    10cc:	a2 17       	cp	r26, r18
    10ce:	b3 07       	cpc	r27, r19
    10d0:	c8 f7       	brcc	.-14     	; 0x10c4 <FUNCmayia+0x10>
    10d2:	02 c0       	rjmp	.+4      	; 0x10d8 <FUNCmayia+0x24>
}
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    10d4:	e1 e0       	ldi	r30, 0x01	; 1
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
unsigned int FUNCmayia(unsigned int xi, unsigned int xf, uint8_t nbits)
{//magic formula
	unsigned int mask;
	unsigned int diff;
	unsigned int trans;
	mask=Pwr(2,nbits)-1;
    10d8:	31 97       	sbiw	r30, 0x01	; 1
	xi&=mask;
	xf&=mask;
    10da:	6e 23       	and	r22, r30
    10dc:	7f 23       	and	r23, r31
	diff=xf^xi;
    10de:	8e 23       	and	r24, r30
    10e0:	9f 23       	and	r25, r31
    10e2:	86 27       	eor	r24, r22
    10e4:	97 27       	eor	r25, r23
	trans=diff&xf;
	return (trans<<nbits)|diff;
    10e6:	68 23       	and	r22, r24
    10e8:	79 23       	and	r23, r25
    10ea:	02 c0       	rjmp	.+4      	; 0x10f0 <FUNCmayia+0x3c>
    10ec:	66 0f       	add	r22, r22
    10ee:	77 1f       	adc	r23, r23
    10f0:	4a 95       	dec	r20
    10f2:	e2 f7       	brpl	.-8      	; 0x10ec <FUNCmayia+0x38>
}
    10f4:	86 2b       	or	r24, r22
    10f6:	97 2b       	or	r25, r23
    10f8:	08 95       	ret

000010fa <FUNCenable>:
// uint8_t TRANupdate(struct TRAN *tr, uint8_t idata);
/*
** procedure and function
*/
FUNC FUNCenable( void )
{
    10fa:	fc 01       	movw	r30, r24
	uint8_t tSREG;
	tSREG=SREG;
    10fc:	9f b7       	in	r25, 0x3f	; 63
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
    10fe:	8f b7       	in	r24, 0x3f	; 63
    1100:	8f 77       	andi	r24, 0x7F	; 127
    1102:	8f bf       	out	0x3f, r24	; 63
	func.putstr=FUNCputstr;
	func.getnum=FUNCgetnum;
	func.getnumv2=FUNCgetnumv2;
	func.readint=FUNCreadint;
	*/
	SREG=tSREG;
    1104:	9f bf       	out	0x3f, r25	; 63
	/******/
	return func;
    1106:	8c e8       	ldi	r24, 0x8C	; 140
    1108:	96 e0       	ldi	r25, 0x06	; 6
    110a:	91 83       	std	Z+1, r25	; 0x01
    110c:	80 83       	st	Z, r24
    110e:	87 ea       	ldi	r24, 0xA7	; 167
    1110:	96 e0       	ldi	r25, 0x06	; 6
    1112:	93 83       	std	Z+3, r25	; 0x03
    1114:	82 83       	std	Z+2, r24	; 0x02
    1116:	81 ed       	ldi	r24, 0xD1	; 209
    1118:	96 e0       	ldi	r25, 0x06	; 6
    111a:	95 83       	std	Z+5, r25	; 0x05
    111c:	84 83       	std	Z+4, r24	; 0x04
    111e:	8a e5       	ldi	r24, 0x5A	; 90
    1120:	98 e0       	ldi	r25, 0x08	; 8
    1122:	97 83       	std	Z+7, r25	; 0x07
    1124:	86 83       	std	Z+6, r24	; 0x06
    1126:	89 e7       	ldi	r24, 0x79	; 121
    1128:	94 e0       	ldi	r25, 0x04	; 4
    112a:	91 87       	std	Z+9, r25	; 0x09
    112c:	80 87       	std	Z+8, r24	; 0x08
    112e:	87 e8       	ldi	r24, 0x87	; 135
    1130:	94 e0       	ldi	r25, 0x04	; 4
    1132:	93 87       	std	Z+11, r25	; 0x0b
    1134:	82 87       	std	Z+10, r24	; 0x0a
    1136:	89 e8       	ldi	r24, 0x89	; 137
    1138:	94 e0       	ldi	r25, 0x04	; 4
    113a:	95 87       	std	Z+13, r25	; 0x0d
    113c:	84 87       	std	Z+12, r24	; 0x0c
    113e:	8c e8       	ldi	r24, 0x8C	; 140
    1140:	94 e0       	ldi	r25, 0x04	; 4
    1142:	97 87       	std	Z+15, r25	; 0x0f
    1144:	86 87       	std	Z+14, r24	; 0x0e
    1146:	8f e8       	ldi	r24, 0x8F	; 143
    1148:	94 e0       	ldi	r25, 0x04	; 4
    114a:	91 8b       	std	Z+17, r25	; 0x11
    114c:	80 8b       	std	Z+16, r24	; 0x10
    114e:	82 e9       	ldi	r24, 0x92	; 146
    1150:	94 e0       	ldi	r25, 0x04	; 4
    1152:	93 8b       	std	Z+19, r25	; 0x13
    1154:	82 8b       	std	Z+18, r24	; 0x12
    1156:	83 e8       	ldi	r24, 0x83	; 131
    1158:	94 e0       	ldi	r25, 0x04	; 4
    115a:	95 8b       	std	Z+21, r25	; 0x15
    115c:	84 8b       	std	Z+20, r24	; 0x14
    115e:	85 e8       	ldi	r24, 0x85	; 133
    1160:	94 e0       	ldi	r25, 0x04	; 4
    1162:	97 8b       	std	Z+23, r25	; 0x17
    1164:	86 8b       	std	Z+22, r24	; 0x16
    1166:	84 e9       	ldi	r24, 0x94	; 148
    1168:	94 e0       	ldi	r25, 0x04	; 4
    116a:	91 8f       	std	Z+25, r25	; 0x19
    116c:	80 8f       	std	Z+24, r24	; 0x18
    116e:	85 eb       	ldi	r24, 0xB5	; 181
    1170:	94 e0       	ldi	r25, 0x04	; 4
    1172:	93 8f       	std	Z+27, r25	; 0x1b
    1174:	82 8f       	std	Z+26, r24	; 0x1a
    1176:	83 ec       	ldi	r24, 0xC3	; 195
    1178:	94 e0       	ldi	r25, 0x04	; 4
    117a:	95 8f       	std	Z+29, r25	; 0x1d
    117c:	84 8f       	std	Z+28, r24	; 0x1c
    117e:	85 ee       	ldi	r24, 0xE5	; 229
    1180:	94 e0       	ldi	r25, 0x04	; 4
    1182:	97 8f       	std	Z+31, r25	; 0x1f
    1184:	86 8f       	std	Z+30, r24	; 0x1e
    1186:	89 e4       	ldi	r24, 0x49	; 73
    1188:	97 e0       	ldi	r25, 0x07	; 7
    118a:	91 a3       	std	Z+33, r25	; 0x21
    118c:	80 a3       	std	Z+32, r24	; 0x20
    118e:	82 e8       	ldi	r24, 0x82	; 130
    1190:	97 e0       	ldi	r25, 0x07	; 7
    1192:	93 a3       	std	Z+35, r25	; 0x23
    1194:	82 a3       	std	Z+34, r24	; 0x22
    1196:	8e ee       	ldi	r24, 0xEE	; 238
    1198:	96 e0       	ldi	r25, 0x06	; 6
    119a:	95 a3       	std	Z+37, r25	; 0x25
    119c:	84 a3       	std	Z+36, r24	; 0x24
    119e:	86 eb       	ldi	r24, 0xB6	; 182
    11a0:	96 e0       	ldi	r25, 0x06	; 6
    11a2:	97 a3       	std	Z+39, r25	; 0x27
    11a4:	86 a3       	std	Z+38, r24	; 0x26
    11a6:	8b e8       	ldi	r24, 0x8B	; 139
    11a8:	95 e0       	ldi	r25, 0x05	; 5
    11aa:	91 a7       	std	Z+41, r25	; 0x29
    11ac:	80 a7       	std	Z+40, r24	; 0x28
    11ae:	80 e9       	ldi	r24, 0x90	; 144
    11b0:	95 e0       	ldi	r25, 0x05	; 5
    11b2:	93 a7       	std	Z+43, r25	; 0x2b
    11b4:	82 a7       	std	Z+42, r24	; 0x2a
    11b6:	8f e9       	ldi	r24, 0x9F	; 159
    11b8:	95 e0       	ldi	r25, 0x05	; 5
    11ba:	95 a7       	std	Z+45, r25	; 0x2d
    11bc:	84 a7       	std	Z+44, r24	; 0x2c
    11be:	83 ec       	ldi	r24, 0xC3	; 195
    11c0:	95 e0       	ldi	r25, 0x05	; 5
    11c2:	97 a7       	std	Z+47, r25	; 0x2f
    11c4:	86 a7       	std	Z+46, r24	; 0x2e
    11c6:	85 ec       	ldi	r24, 0xC5	; 197
    11c8:	95 e0       	ldi	r25, 0x05	; 5
    11ca:	91 ab       	std	Z+49, r25	; 0x31
    11cc:	80 ab       	std	Z+48, r24	; 0x30
    11ce:	8f ec       	ldi	r24, 0xCF	; 207
    11d0:	95 e0       	ldi	r25, 0x05	; 5
    11d2:	93 ab       	std	Z+51, r25	; 0x33
    11d4:	82 ab       	std	Z+50, r24	; 0x32
    11d6:	8c ed       	ldi	r24, 0xDC	; 220
    11d8:	95 e0       	ldi	r25, 0x05	; 5
    11da:	95 ab       	std	Z+53, r25	; 0x35
    11dc:	84 ab       	std	Z+52, r24	; 0x34
    11de:	88 ee       	ldi	r24, 0xE8	; 232
    11e0:	95 e0       	ldi	r25, 0x05	; 5
    11e2:	97 ab       	std	Z+55, r25	; 0x37
    11e4:	86 ab       	std	Z+54, r24	; 0x36
    11e6:	80 e0       	ldi	r24, 0x00	; 0
    11e8:	96 e0       	ldi	r25, 0x06	; 6
    11ea:	91 af       	std	Z+57, r25	; 0x39
    11ec:	80 af       	std	Z+56, r24	; 0x38
    11ee:	83 e1       	ldi	r24, 0x13	; 19
    11f0:	96 e0       	ldi	r25, 0x06	; 6
    11f2:	93 af       	std	Z+59, r25	; 0x3b
    11f4:	82 af       	std	Z+58, r24	; 0x3a
    11f6:	8e e1       	ldi	r24, 0x1E	; 30
    11f8:	96 e0       	ldi	r25, 0x06	; 6
    11fa:	95 af       	std	Z+61, r25	; 0x3d
    11fc:	84 af       	std	Z+60, r24	; 0x3c
    11fe:	8b e4       	ldi	r24, 0x4B	; 75
    1200:	96 e0       	ldi	r25, 0x06	; 6
    1202:	97 af       	std	Z+63, r25	; 0x3f
    1204:	86 af       	std	Z+62, r24	; 0x3e
    1206:	df 01       	movw	r26, r30
    1208:	a0 5c       	subi	r26, 0xC0	; 192
    120a:	bf 4f       	sbci	r27, 0xFF	; 255
    120c:	80 ec       	ldi	r24, 0xC0	; 192
    120e:	97 e0       	ldi	r25, 0x07	; 7
    1210:	11 96       	adiw	r26, 0x01	; 1
    1212:	9c 93       	st	X, r25
    1214:	8e 93       	st	-X, r24
    1216:	12 96       	adiw	r26, 0x02	; 2
    1218:	8b ec       	ldi	r24, 0xCB	; 203
    121a:	97 e0       	ldi	r25, 0x07	; 7
    121c:	11 96       	adiw	r26, 0x01	; 1
    121e:	9c 93       	st	X, r25
    1220:	8e 93       	st	-X, r24
    1222:	12 96       	adiw	r26, 0x02	; 2
    1224:	8c ee       	ldi	r24, 0xEC	; 236
    1226:	97 e0       	ldi	r25, 0x07	; 7
    1228:	11 96       	adiw	r26, 0x01	; 1
    122a:	9c 93       	st	X, r25
    122c:	8e 93       	st	-X, r24
    122e:	12 96       	adiw	r26, 0x02	; 2
    1230:	8c e3       	ldi	r24, 0x3C	; 60
    1232:	98 e0       	ldi	r25, 0x08	; 8
    1234:	11 96       	adiw	r26, 0x01	; 1
    1236:	9c 93       	st	X, r25
    1238:	8e 93       	st	-X, r24
    123a:	12 96       	adiw	r26, 0x02	; 2
    123c:	84 e4       	ldi	r24, 0x44	; 68
    123e:	98 e0       	ldi	r25, 0x08	; 8
    1240:	8d 93       	st	X+, r24
    1242:	9c 93       	st	X, r25
}
    1244:	cf 01       	movw	r24, r30
    1246:	08 95       	ret

00001248 <I2C_Start>:
	/***Vtable***/
}
/***void I2C_Start(void)***/
void I2C_Start(void)
{
  TWI_CONTROL_REGISTER = ((1<<TWINT) | (1<<TWSTA) | (1<<TWEN));
    1248:	e4 e7       	ldi	r30, 0x74	; 116
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	84 ea       	ldi	r24, 0xA4	; 164
    124e:	80 83       	st	Z, r24
  for (ticks=Nticks; !(TWI_CONTROL_REGISTER & (1<<TWINT)) && ticks; ticks--);
    1250:	8f ef       	ldi	r24, 0xFF	; 255
    1252:	93 e0       	ldi	r25, 0x03	; 3
    1254:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <ticks+0x1>
    1258:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <ticks>
    125c:	80 81       	ld	r24, Z
    125e:	88 23       	and	r24, r24
    1260:	5c f0       	brlt	.+22     	; 0x1278 <I2C_Start+0x30>
    1262:	8e ef       	ldi	r24, 0xFE	; 254
    1264:	93 e0       	ldi	r25, 0x03	; 3
    1266:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <ticks+0x1>
    126a:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <ticks>
    126e:	20 81       	ld	r18, Z
    1270:	22 23       	and	r18, r18
    1272:	14 f0       	brlt	.+4      	; 0x1278 <I2C_Start+0x30>
    1274:	01 97       	sbiw	r24, 0x01	; 1
    1276:	b8 f7       	brcc	.-18     	; 0x1266 <I2C_Start+0x1e>
    1278:	08 95       	ret

0000127a <I2C_Write>:
   _delay_us(100); //wait for a short time
}
/***void I2C_Write(uint8_t var_i2cData_u8)***/
void I2C_Write(uint8_t var_i2cData_u8)
{
  TWI_DATA_REGISTER = var_i2cData_u8 ;
    127a:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
  TWI_CONTROL_REGISTER = ((1<< TWINT) | (1<<TWEN));
    127e:	e4 e7       	ldi	r30, 0x74	; 116
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	84 e8       	ldi	r24, 0x84	; 132
    1284:	80 83       	st	Z, r24
  for (ticks=Nticks; !(TWI_CONTROL_REGISTER & (1 <<TWINT)) && ticks; ticks--);
    1286:	8f ef       	ldi	r24, 0xFF	; 255
    1288:	93 e0       	ldi	r25, 0x03	; 3
    128a:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <ticks+0x1>
    128e:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <ticks>
    1292:	80 81       	ld	r24, Z
    1294:	88 23       	and	r24, r24
    1296:	5c f0       	brlt	.+22     	; 0x12ae <I2C_Write+0x34>
    1298:	8e ef       	ldi	r24, 0xFE	; 254
    129a:	93 e0       	ldi	r25, 0x03	; 3
    129c:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <ticks+0x1>
    12a0:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <ticks>
    12a4:	20 81       	ld	r18, Z
    12a6:	22 23       	and	r18, r18
    12a8:	14 f0       	brlt	.+4      	; 0x12ae <I2C_Write+0x34>
    12aa:	01 97       	sbiw	r24, 0x01	; 1
    12ac:	b8 f7       	brcc	.-18     	; 0x129c <I2C_Write+0x22>
    12ae:	08 95       	ret

000012b0 <I2C_Read>:
}
/***uint8_t I2C_Read(uint8_t var_ackOption_u8)***/
uint8_t I2C_Read(uint8_t var_ackOption_u8)
{
 TWI_CONTROL_REGISTER = ((1<< TWINT) | (1<<TWEN) | (var_ackOption_u8<<TWEA));
    12b0:	20 e4       	ldi	r18, 0x40	; 64
    12b2:	82 9f       	mul	r24, r18
    12b4:	c0 01       	movw	r24, r0
    12b6:	11 24       	eor	r1, r1
    12b8:	84 68       	ori	r24, 0x84	; 132
    12ba:	e4 e7       	ldi	r30, 0x74	; 116
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	80 83       	st	Z, r24
   for (ticks=Nticks; !(TWI_CONTROL_REGISTER & (1 <<TWINT)) && ticks; ticks--);
    12c0:	8f ef       	ldi	r24, 0xFF	; 255
    12c2:	93 e0       	ldi	r25, 0x03	; 3
    12c4:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <ticks+0x1>
    12c8:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <ticks>
    12cc:	80 81       	ld	r24, Z
    12ce:	88 23       	and	r24, r24
    12d0:	5c f0       	brlt	.+22     	; 0x12e8 <I2C_Read+0x38>
    12d2:	8e ef       	ldi	r24, 0xFE	; 254
    12d4:	93 e0       	ldi	r25, 0x03	; 3
    12d6:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <ticks+0x1>
    12da:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <ticks>
    12de:	20 81       	ld	r18, Z
    12e0:	22 23       	and	r18, r18
    12e2:	14 f0       	brlt	.+4      	; 0x12e8 <I2C_Read+0x38>
    12e4:	01 97       	sbiw	r24, 0x01	; 1
    12e6:	b8 f7       	brcc	.-18     	; 0x12d6 <I2C_Read+0x26>
   return TWI_DATA_REGISTER;
    12e8:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
}
    12ec:	08 95       	ret

000012ee <I2C_Status>:
/***uint8_t I2C_status(void)***/
uint8_t I2C_Status(void)
{
	return TWI_STATUS_REGISTER & TWI_STATUS_MASK;
    12ee:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
}
    12f2:	88 7f       	andi	r24, 0xF8	; 248
    12f4:	08 95       	ret

000012f6 <I2C_Stop>:
  for (ticks=Nticks; !(TWI_CONTROL_REGISTER & (1<<TWINT)) && ticks; ticks--);
}
/***void I2C_Stop(void)***/
void I2C_Stop(void)
{
  TWI_CONTROL_REGISTER = ((1<< TWINT) | (1<<TWEN) | (1<<TWSTO));
    12f6:	84 e9       	ldi	r24, 0x94	; 148
    12f8:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    12fc:	8f e8       	ldi	r24, 0x8F	; 143
    12fe:	91 e0       	ldi	r25, 0x01	; 1
    1300:	01 97       	sbiw	r24, 0x01	; 1
    1302:	f1 f7       	brne	.-4      	; 0x1300 <I2C_Stop+0xa>
    1304:	00 c0       	rjmp	.+0      	; 0x1306 <I2C_Stop+0x10>
    1306:	00 00       	nop
    1308:	08 95       	ret

0000130a <I2C_Init>:
  return ic;
}
/***void I2C_Init(uint8_t prescaler)***/
void I2C_Init(uint8_t prescaler)
{
	I2C_DDR|=I2C_IO_MASK;
    130a:	91 b3       	in	r25, 0x11	; 17
    130c:	93 60       	ori	r25, 0x03	; 3
    130e:	91 bb       	out	0x11, r25	; 17
	I2C_PORT|=I2C_IO_MASK;
    1310:	92 b3       	in	r25, 0x12	; 18
    1312:	93 60       	ori	r25, 0x03	; 3
    1314:	92 bb       	out	0x12, r25	; 18
	switch(prescaler){
    1316:	84 30       	cpi	r24, 0x04	; 4
    1318:	79 f0       	breq	.+30     	; 0x1338 <I2C_Init+0x2e>
    131a:	18 f4       	brcc	.+6      	; 0x1322 <I2C_Init+0x18>
    131c:	81 30       	cpi	r24, 0x01	; 1
    131e:	31 f0       	breq	.+12     	; 0x132c <I2C_Init+0x22>
    1320:	1d c0       	rjmp	.+58     	; 0x135c <I2C_Init+0x52>
    1322:	80 31       	cpi	r24, 0x10	; 16
    1324:	79 f0       	breq	.+30     	; 0x1344 <I2C_Init+0x3a>
    1326:	80 34       	cpi	r24, 0x40	; 64
    1328:	99 f0       	breq	.+38     	; 0x1350 <I2C_Init+0x46>
    132a:	18 c0       	rjmp	.+48     	; 0x135c <I2C_Init+0x52>
		case 1:
		TWI_STATUS_REGISTER &= ~TWI_PRESCALER_MASK;
    132c:	e1 e7       	ldi	r30, 0x71	; 113
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	90 81       	ld	r25, Z
    1332:	9c 7f       	andi	r25, 0xFC	; 252
    1334:	90 83       	st	Z, r25
		break;
    1336:	18 c0       	rjmp	.+48     	; 0x1368 <I2C_Init+0x5e>
		case 4:
		TWI_STATUS_REGISTER |= (1<<TWPS0);
    1338:	e1 e7       	ldi	r30, 0x71	; 113
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	90 81       	ld	r25, Z
    133e:	91 60       	ori	r25, 0x01	; 1
    1340:	90 83       	st	Z, r25
		break;
    1342:	12 c0       	rjmp	.+36     	; 0x1368 <I2C_Init+0x5e>
		case 16:
		TWI_STATUS_REGISTER |= (2<<TWPS0);
    1344:	e1 e7       	ldi	r30, 0x71	; 113
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	90 81       	ld	r25, Z
    134a:	92 60       	ori	r25, 0x02	; 2
    134c:	90 83       	st	Z, r25
		break;
    134e:	0c c0       	rjmp	.+24     	; 0x1368 <I2C_Init+0x5e>
		case 64:
		TWI_STATUS_REGISTER |= (3<<TWPS0);
    1350:	e1 e7       	ldi	r30, 0x71	; 113
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	90 81       	ld	r25, Z
    1356:	93 60       	ori	r25, 0x03	; 3
    1358:	90 83       	st	Z, r25
		break;
    135a:	06 c0       	rjmp	.+12     	; 0x1368 <I2C_Init+0x5e>
		default:
		prescaler=1;
		TWI_STATUS_REGISTER &= ~TWI_PRESCALER_MASK;
    135c:	e1 e7       	ldi	r30, 0x71	; 113
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	80 81       	ld	r24, Z
    1362:	8c 7f       	andi	r24, 0xFC	; 252
    1364:	80 83       	st	Z, r24
		break;
		case 64:
		TWI_STATUS_REGISTER |= (3<<TWPS0);
		break;
		default:
		prescaler=1;
    1366:	81 e0       	ldi	r24, 0x01	; 1
		TWI_STATUS_REGISTER &= ~TWI_PRESCALER_MASK;
		break;
	}
	TWI_BIT_RATE_REGISTER = ((F_CPU/I2C_SCL_CLOCK)-16)/(2*prescaler);
    1368:	28 2f       	mov	r18, r24
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	22 0f       	add	r18, r18
    136e:	33 1f       	adc	r19, r19
    1370:	03 2e       	mov	r0, r19
    1372:	00 0c       	add	r0, r0
    1374:	44 0b       	sbc	r20, r20
    1376:	55 0b       	sbc	r21, r21
    1378:	60 e9       	ldi	r22, 0x90	; 144
    137a:	70 e0       	ldi	r23, 0x00	; 0
    137c:	80 e0       	ldi	r24, 0x00	; 0
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <__udivmodsi4>
    1384:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
    1388:	08 95       	ret

0000138a <I2Cenable>:
void I2C_Write(uint8_t var_i2cData_u8);
uint8_t I2C_Read(uint8_t var_ackOption_u8);
uint8_t I2C_Status(void);
/***I2C I2Cenable(uint8_t prescaler)***/
I2C I2Cenable(uint8_t prescaler)
{
    138a:	1f 93       	push	r17
    138c:	cf 93       	push	r28
    138e:	df 93       	push	r29
    1390:	ec 01       	movw	r28, r24
    1392:	86 2f       	mov	r24, r22
  uint8_t tSREG;
  tSREG=SREG;
    1394:	1f b7       	in	r17, 0x3f	; 63
  SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
    1396:	9f b7       	in	r25, 0x3f	; 63
    1398:	9f 77       	andi	r25, 0x7F	; 127
    139a:	9f bf       	out	0x3f, r25	; 63
  I2C ic;
  I2C_Init(prescaler);
    139c:	b6 df       	rcall	.-148    	; 0x130a <I2C_Init>
  ic.Stop=I2C_Stop;
  ic.Write=I2C_Write;
  ic.Read=I2C_Read;
  ic.Status=I2C_Status;
  /******/
  SREG=tSREG;
    139e:	1f bf       	out	0x3f, r17	; 63
  return ic;
    13a0:	84 e2       	ldi	r24, 0x24	; 36
    13a2:	99 e0       	ldi	r25, 0x09	; 9
    13a4:	99 83       	std	Y+1, r25	; 0x01
    13a6:	88 83       	st	Y, r24
    13a8:	8b e7       	ldi	r24, 0x7B	; 123
    13aa:	99 e0       	ldi	r25, 0x09	; 9
    13ac:	9b 83       	std	Y+3, r25	; 0x03
    13ae:	8a 83       	std	Y+2, r24	; 0x02
    13b0:	8d e3       	ldi	r24, 0x3D	; 61
    13b2:	99 e0       	ldi	r25, 0x09	; 9
    13b4:	9d 83       	std	Y+5, r25	; 0x05
    13b6:	8c 83       	std	Y+4, r24	; 0x04
    13b8:	88 e5       	ldi	r24, 0x58	; 88
    13ba:	99 e0       	ldi	r25, 0x09	; 9
    13bc:	9f 83       	std	Y+7, r25	; 0x07
    13be:	8e 83       	std	Y+6, r24	; 0x06
    13c0:	87 e7       	ldi	r24, 0x77	; 119
    13c2:	99 e0       	ldi	r25, 0x09	; 9
    13c4:	99 87       	std	Y+9, r25	; 0x09
    13c6:	88 87       	std	Y+8, r24	; 0x08
}
    13c8:	ce 01       	movw	r24, r28
    13ca:	df 91       	pop	r29
    13cc:	cf 91       	pop	r28
    13ce:	1f 91       	pop	r17
    13d0:	08 95       	ret

000013d2 <KEYPAD_get>:
	}
	return data;
}
/***read***/
struct keypadata KEYPAD_get(void)
{
    13d2:	cf 93       	push	r28
    13d4:	df 93       	push	r29
    13d6:	00 d0       	rcall	.+0      	; 0x13d8 <KEYPAD_get+0x6>
    13d8:	00 d0       	rcall	.+0      	; 0x13da <KEYPAD_get+0x8>
    13da:	1f 92       	push	r1
    13dc:	cd b7       	in	r28, 0x3d	; 61
    13de:	de b7       	in	r29, 0x3e	; 62
	return data;
    13e0:	85 e0       	ldi	r24, 0x05	; 5
    13e2:	e5 e5       	ldi	r30, 0x55	; 85
    13e4:	f2 e0       	ldi	r31, 0x02	; 2
    13e6:	de 01       	movw	r26, r28
    13e8:	11 96       	adiw	r26, 0x01	; 1
    13ea:	01 90       	ld	r0, Z+
    13ec:	0d 92       	st	X+, r0
    13ee:	8a 95       	dec	r24
    13f0:	e1 f7       	brne	.-8      	; 0x13ea <KEYPAD_get+0x18>
    13f2:	29 81       	ldd	r18, Y+1	; 0x01
    13f4:	3a 81       	ldd	r19, Y+2	; 0x02
    13f6:	4b 81       	ldd	r20, Y+3	; 0x03
    13f8:	5c 81       	ldd	r21, Y+4	; 0x04
    13fa:	6d 81       	ldd	r22, Y+5	; 0x05
}
    13fc:	70 e0       	ldi	r23, 0x00	; 0
    13fe:	80 e0       	ldi	r24, 0x00	; 0
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	0f 90       	pop	r0
    1404:	0f 90       	pop	r0
    1406:	0f 90       	pop	r0
    1408:	0f 90       	pop	r0
    140a:	0f 90       	pop	r0
    140c:	df 91       	pop	r29
    140e:	cf 91       	pop	r28
    1410:	08 95       	ret

00001412 <KEYPAD_flush>:
/***flush***/
void KEYPAD_flush(void)
{
	data.character=' ';
    1412:	e5 e5       	ldi	r30, 0x55	; 85
    1414:	f2 e0       	ldi	r31, 0x02	; 2
    1416:	80 e2       	ldi	r24, 0x20	; 32
    1418:	80 83       	st	Z, r24
	data.printstring="";
    141a:	83 e2       	ldi	r24, 0x23	; 35
    141c:	91 e0       	ldi	r25, 0x01	; 1
    141e:	92 83       	std	Z+2, r25	; 0x02
    1420:	81 83       	std	Z+1, r24	; 0x01
	data.string="";
    1422:	94 83       	std	Z+4, r25	; 0x04
    1424:	83 83       	std	Z+3, r24	; 0x03
    1426:	08 95       	ret

00001428 <KEYPAD_getkey>:
	//Going to use pull down method.
	//Inic String Vec
	return keypad;
}
char KEYPAD_getkey(void)
{
    1428:	cf 93       	push	r28
    142a:	df 93       	push	r29
    142c:	21 e0       	ldi	r18, 0x01	; 1
	uint8_t HL;
	char c='\0';
    142e:	80 e0       	ldi	r24, 0x00	; 0
				*keypad_PORT|=(1<<KEYPADLINE_1);
				break;
			case 1: //line 2 index 1
				*keypad_DDR|=(1<<KEYPADLINE_2);
				*keypad_PORT&=~(1<<KEYPADLINE_2);
				keypad_dataf.line_2=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
    1430:	aa e1       	ldi	r26, 0x1A	; 26
    1432:	b2 e0       	ldi	r27, 0x02	; 2
				HL=KEYPADhl(keypad_datai.line_2,keypad_dataf.line_2);
    1434:	ee e1       	ldi	r30, 0x1E	; 30
    1436:	f2 e0       	ldi	r31, 0x02	; 2
					if(HL == (1<<KEYPADDATA_2))
						c=keypadvalue[1][1];
					if(HL == (1<<KEYPADDATA_3))
						c=keypadvalue[1][2];
					if(HL == (1<<KEYPADDATA_4))
						c=keypadvalue[1][3];
    1438:	60 e0       	ldi	r22, 0x00	; 0
    143a:	71 e0       	ldi	r23, 0x01	; 1
    143c:	01 c0       	rjmp	.+2      	; 0x1440 <KEYPAD_getkey+0x18>
    143e:	2f 5f       	subi	r18, 0xFF	; 255
{
	uint8_t HL;
	char c='\0';
	uint8_t keypad_option;
	for(keypad_option=0;keypad_option<KEYPADLINES;keypad_option++){
		switch (keypad_option)
    1440:	9f ef       	ldi	r25, 0xFF	; 255
    1442:	92 0f       	add	r25, r18
    1444:	91 30       	cpi	r25, 0x01	; 1
    1446:	09 f4       	brne	.+2      	; 0x144a <KEYPAD_getkey+0x22>
    1448:	4b c0       	rjmp	.+150    	; 0x14e0 <KEYPAD_getkey+0xb8>
    144a:	38 f0       	brcs	.+14     	; 0x145a <KEYPAD_getkey+0x32>
    144c:	92 30       	cpi	r25, 0x02	; 2
    144e:	09 f4       	brne	.+2      	; 0x1452 <KEYPAD_getkey+0x2a>
    1450:	8c c0       	rjmp	.+280    	; 0x156a <KEYPAD_getkey+0x142>
    1452:	93 30       	cpi	r25, 0x03	; 3
    1454:	09 f4       	brne	.+2      	; 0x1458 <KEYPAD_getkey+0x30>
    1456:	ce c0       	rjmp	.+412    	; 0x15f4 <KEYPAD_getkey+0x1cc>
    1458:	0e c1       	rjmp	.+540    	; 0x1676 <KEYPAD_getkey+0x24e>
		{
			case 0: //line 1 index 0
				*keypad_DDR|=(1<<KEYPADLINE_1);
    145a:	40 91 25 02 	lds	r20, 0x0225	; 0x800225 <keypad_DDR>
    145e:	50 91 26 02 	lds	r21, 0x0226	; 0x800226 <keypad_DDR+0x1>
    1462:	ea 01       	movw	r28, r20
    1464:	98 81       	ld	r25, Y
    1466:	90 68       	ori	r25, 0x80	; 128
    1468:	98 83       	st	Y, r25
				*keypad_PORT&=~(1<<KEYPADLINE_1);
    146a:	40 91 18 02 	lds	r20, 0x0218	; 0x800218 <keypad_PORT>
    146e:	50 91 19 02 	lds	r21, 0x0219	; 0x800219 <keypad_PORT+0x1>
    1472:	ea 01       	movw	r28, r20
    1474:	98 81       	ld	r25, Y
    1476:	9f 77       	andi	r25, 0x7F	; 127
    1478:	98 83       	st	Y, r25
				keypad_dataf.line_1=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
    147a:	40 91 23 02 	lds	r20, 0x0223	; 0x800223 <keypad_PIN>
    147e:	50 91 24 02 	lds	r21, 0x0224	; 0x800224 <keypad_PIN+0x1>
    1482:	ea 01       	movw	r28, r20
    1484:	38 81       	ld	r19, Y
    1486:	34 77       	andi	r19, 0x74	; 116
    1488:	3c 93       	st	X, r19
				HL=KEYPADhl(keypad_datai.line_1,keypad_dataf.line_1);
    148a:	90 81       	ld	r25, Z
uint8_t KEYPADhl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	//printf("KEYPADhl\n");
	i=xf^xi;
	i&=xi;
    148c:	43 2f       	mov	r20, r19
    148e:	49 27       	eor	r20, r25
    1490:	94 23       	and	r25, r20
			case 0: //line 1 index 0
				*keypad_DDR|=(1<<KEYPADLINE_1);
				*keypad_PORT&=~(1<<KEYPADLINE_1);
				keypad_dataf.line_1=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
				HL=KEYPADhl(keypad_datai.line_1,keypad_dataf.line_1);
				keypad_datai.line_1=keypad_dataf.line_1;
    1492:	30 83       	st	Z, r19
				if(HL){
    1494:	99 23       	and	r25, r25
    1496:	99 f0       	breq	.+38     	; 0x14be <KEYPAD_getkey+0x96>
					//decode index line one column what ?
					if(HL == (1<<KEYPADDATA_1))
    1498:	94 30       	cpi	r25, 0x04	; 4
    149a:	19 f4       	brne	.+6      	; 0x14a2 <KEYPAD_getkey+0x7a>
						c=keypadvalue[0][0];
    149c:	eb 01       	movw	r28, r22
    149e:	88 81       	ld	r24, Y
    14a0:	0a c0       	rjmp	.+20     	; 0x14b6 <KEYPAD_getkey+0x8e>
					if(HL == (1<<KEYPADDATA_2))
    14a2:	90 31       	cpi	r25, 0x10	; 16
    14a4:	19 f4       	brne	.+6      	; 0x14ac <KEYPAD_getkey+0x84>
						c=keypadvalue[0][1];
    14a6:	eb 01       	movw	r28, r22
    14a8:	89 81       	ldd	r24, Y+1	; 0x01
    14aa:	09 c0       	rjmp	.+18     	; 0x14be <KEYPAD_getkey+0x96>
					if(HL == (1<<KEYPADDATA_3))
    14ac:	90 32       	cpi	r25, 0x20	; 32
    14ae:	19 f4       	brne	.+6      	; 0x14b6 <KEYPAD_getkey+0x8e>
						c=keypadvalue[0][2];
    14b0:	eb 01       	movw	r28, r22
    14b2:	8a 81       	ldd	r24, Y+2	; 0x02
    14b4:	04 c0       	rjmp	.+8      	; 0x14be <KEYPAD_getkey+0x96>
					if(HL == (1<<KEYPADDATA_4))
    14b6:	90 34       	cpi	r25, 0x40	; 64
    14b8:	11 f4       	brne	.+4      	; 0x14be <KEYPAD_getkey+0x96>
						c=keypadvalue[0][3];
    14ba:	eb 01       	movw	r28, r22
    14bc:	8b 81       	ldd	r24, Y+3	; 0x03
				}
				*keypad_DDR&=~(1<<KEYPADLINE_1);
    14be:	40 91 25 02 	lds	r20, 0x0225	; 0x800225 <keypad_DDR>
    14c2:	50 91 26 02 	lds	r21, 0x0226	; 0x800226 <keypad_DDR+0x1>
    14c6:	ea 01       	movw	r28, r20
    14c8:	98 81       	ld	r25, Y
    14ca:	9f 77       	andi	r25, 0x7F	; 127
    14cc:	98 83       	st	Y, r25
				*keypad_PORT|=(1<<KEYPADLINE_1);
    14ce:	40 91 18 02 	lds	r20, 0x0218	; 0x800218 <keypad_PORT>
    14d2:	50 91 19 02 	lds	r21, 0x0219	; 0x800219 <keypad_PORT+0x1>
    14d6:	ea 01       	movw	r28, r20
    14d8:	98 81       	ld	r25, Y
    14da:	90 68       	ori	r25, 0x80	; 128
    14dc:	98 83       	st	Y, r25
				break;
    14de:	af cf       	rjmp	.-162    	; 0x143e <KEYPAD_getkey+0x16>
			case 1: //line 2 index 1
				*keypad_DDR|=(1<<KEYPADLINE_2);
    14e0:	40 91 25 02 	lds	r20, 0x0225	; 0x800225 <keypad_DDR>
    14e4:	50 91 26 02 	lds	r21, 0x0226	; 0x800226 <keypad_DDR+0x1>
    14e8:	ea 01       	movw	r28, r20
    14ea:	98 81       	ld	r25, Y
    14ec:	91 60       	ori	r25, 0x01	; 1
    14ee:	98 83       	st	Y, r25
				*keypad_PORT&=~(1<<KEYPADLINE_2);
    14f0:	40 91 18 02 	lds	r20, 0x0218	; 0x800218 <keypad_PORT>
    14f4:	50 91 19 02 	lds	r21, 0x0219	; 0x800219 <keypad_PORT+0x1>
    14f8:	ea 01       	movw	r28, r20
    14fa:	98 81       	ld	r25, Y
    14fc:	9e 7f       	andi	r25, 0xFE	; 254
    14fe:	98 83       	st	Y, r25
				keypad_dataf.line_2=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
    1500:	40 91 23 02 	lds	r20, 0x0223	; 0x800223 <keypad_PIN>
    1504:	50 91 24 02 	lds	r21, 0x0224	; 0x800224 <keypad_PIN+0x1>
    1508:	ea 01       	movw	r28, r20
    150a:	38 81       	ld	r19, Y
    150c:	34 77       	andi	r19, 0x74	; 116
    150e:	11 96       	adiw	r26, 0x01	; 1
    1510:	3c 93       	st	X, r19
    1512:	11 97       	sbiw	r26, 0x01	; 1
				HL=KEYPADhl(keypad_datai.line_2,keypad_dataf.line_2);
    1514:	91 81       	ldd	r25, Z+1	; 0x01
uint8_t KEYPADhl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	//printf("KEYPADhl\n");
	i=xf^xi;
	i&=xi;
    1516:	43 2f       	mov	r20, r19
    1518:	49 27       	eor	r20, r25
    151a:	94 23       	and	r25, r20
			case 1: //line 2 index 1
				*keypad_DDR|=(1<<KEYPADLINE_2);
				*keypad_PORT&=~(1<<KEYPADLINE_2);
				keypad_dataf.line_2=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
				HL=KEYPADhl(keypad_datai.line_2,keypad_dataf.line_2);
				keypad_datai.line_2=keypad_dataf.line_2;
    151c:	31 83       	std	Z+1, r19	; 0x01
				if(HL){
    151e:	99 23       	and	r25, r25
    1520:	99 f0       	breq	.+38     	; 0x1548 <KEYPAD_getkey+0x120>
					//decode index line two column what ?
					if(HL == (1<<KEYPADDATA_1))
    1522:	94 30       	cpi	r25, 0x04	; 4
    1524:	19 f4       	brne	.+6      	; 0x152c <KEYPAD_getkey+0x104>
						c=keypadvalue[1][0];
    1526:	eb 01       	movw	r28, r22
    1528:	8c 81       	ldd	r24, Y+4	; 0x04
    152a:	0a c0       	rjmp	.+20     	; 0x1540 <KEYPAD_getkey+0x118>
					if(HL == (1<<KEYPADDATA_2))
    152c:	90 31       	cpi	r25, 0x10	; 16
    152e:	19 f4       	brne	.+6      	; 0x1536 <KEYPAD_getkey+0x10e>
						c=keypadvalue[1][1];
    1530:	eb 01       	movw	r28, r22
    1532:	8d 81       	ldd	r24, Y+5	; 0x05
    1534:	09 c0       	rjmp	.+18     	; 0x1548 <KEYPAD_getkey+0x120>
					if(HL == (1<<KEYPADDATA_3))
    1536:	90 32       	cpi	r25, 0x20	; 32
    1538:	19 f4       	brne	.+6      	; 0x1540 <KEYPAD_getkey+0x118>
						c=keypadvalue[1][2];
    153a:	eb 01       	movw	r28, r22
    153c:	8e 81       	ldd	r24, Y+6	; 0x06
    153e:	04 c0       	rjmp	.+8      	; 0x1548 <KEYPAD_getkey+0x120>
					if(HL == (1<<KEYPADDATA_4))
    1540:	90 34       	cpi	r25, 0x40	; 64
    1542:	11 f4       	brne	.+4      	; 0x1548 <KEYPAD_getkey+0x120>
						c=keypadvalue[1][3];
    1544:	eb 01       	movw	r28, r22
    1546:	8f 81       	ldd	r24, Y+7	; 0x07
				}
				*keypad_DDR&=~(1<<KEYPADLINE_2);
    1548:	40 91 25 02 	lds	r20, 0x0225	; 0x800225 <keypad_DDR>
    154c:	50 91 26 02 	lds	r21, 0x0226	; 0x800226 <keypad_DDR+0x1>
    1550:	ea 01       	movw	r28, r20
    1552:	98 81       	ld	r25, Y
    1554:	9e 7f       	andi	r25, 0xFE	; 254
    1556:	98 83       	st	Y, r25
				*keypad_PORT|=(1<<KEYPADLINE_2);
    1558:	40 91 18 02 	lds	r20, 0x0218	; 0x800218 <keypad_PORT>
    155c:	50 91 19 02 	lds	r21, 0x0219	; 0x800219 <keypad_PORT+0x1>
    1560:	ea 01       	movw	r28, r20
    1562:	98 81       	ld	r25, Y
    1564:	91 60       	ori	r25, 0x01	; 1
    1566:	98 83       	st	Y, r25
				break;
    1568:	6a cf       	rjmp	.-300    	; 0x143e <KEYPAD_getkey+0x16>
			case 2: //line 3 index 2
				*keypad_DDR|=(1<<KEYPADLINE_3);
    156a:	40 91 25 02 	lds	r20, 0x0225	; 0x800225 <keypad_DDR>
    156e:	50 91 26 02 	lds	r21, 0x0226	; 0x800226 <keypad_DDR+0x1>
    1572:	ea 01       	movw	r28, r20
    1574:	98 81       	ld	r25, Y
    1576:	92 60       	ori	r25, 0x02	; 2
    1578:	98 83       	st	Y, r25
				*keypad_PORT&=~(1<<KEYPADLINE_3);
    157a:	40 91 18 02 	lds	r20, 0x0218	; 0x800218 <keypad_PORT>
    157e:	50 91 19 02 	lds	r21, 0x0219	; 0x800219 <keypad_PORT+0x1>
    1582:	ea 01       	movw	r28, r20
    1584:	98 81       	ld	r25, Y
    1586:	9d 7f       	andi	r25, 0xFD	; 253
    1588:	98 83       	st	Y, r25
				keypad_dataf.line_3=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
    158a:	40 91 23 02 	lds	r20, 0x0223	; 0x800223 <keypad_PIN>
    158e:	50 91 24 02 	lds	r21, 0x0224	; 0x800224 <keypad_PIN+0x1>
    1592:	ea 01       	movw	r28, r20
    1594:	38 81       	ld	r19, Y
    1596:	34 77       	andi	r19, 0x74	; 116
    1598:	12 96       	adiw	r26, 0x02	; 2
    159a:	3c 93       	st	X, r19
    159c:	12 97       	sbiw	r26, 0x02	; 2
				HL=KEYPADhl(keypad_datai.line_3,keypad_dataf.line_3);
    159e:	92 81       	ldd	r25, Z+2	; 0x02
uint8_t KEYPADhl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	//printf("KEYPADhl\n");
	i=xf^xi;
	i&=xi;
    15a0:	43 2f       	mov	r20, r19
    15a2:	49 27       	eor	r20, r25
    15a4:	94 23       	and	r25, r20
			case 2: //line 3 index 2
				*keypad_DDR|=(1<<KEYPADLINE_3);
				*keypad_PORT&=~(1<<KEYPADLINE_3);
				keypad_dataf.line_3=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
				HL=KEYPADhl(keypad_datai.line_3,keypad_dataf.line_3);
				keypad_datai.line_3=keypad_dataf.line_3;
    15a6:	32 83       	std	Z+2, r19	; 0x02
				if(HL){
    15a8:	99 23       	and	r25, r25
    15aa:	99 f0       	breq	.+38     	; 0x15d2 <KEYPAD_getkey+0x1aa>
					//decode index line three column what ?
					if(HL == (1<<KEYPADDATA_1))
    15ac:	94 30       	cpi	r25, 0x04	; 4
    15ae:	19 f4       	brne	.+6      	; 0x15b6 <KEYPAD_getkey+0x18e>
						c=keypadvalue[2][0];
    15b0:	eb 01       	movw	r28, r22
    15b2:	88 85       	ldd	r24, Y+8	; 0x08
    15b4:	0a c0       	rjmp	.+20     	; 0x15ca <KEYPAD_getkey+0x1a2>
					if(HL == (1<<KEYPADDATA_2))
    15b6:	90 31       	cpi	r25, 0x10	; 16
    15b8:	19 f4       	brne	.+6      	; 0x15c0 <KEYPAD_getkey+0x198>
						c=keypadvalue[2][1];
    15ba:	eb 01       	movw	r28, r22
    15bc:	89 85       	ldd	r24, Y+9	; 0x09
    15be:	09 c0       	rjmp	.+18     	; 0x15d2 <KEYPAD_getkey+0x1aa>
					if(HL == (1<<KEYPADDATA_3))
    15c0:	90 32       	cpi	r25, 0x20	; 32
    15c2:	19 f4       	brne	.+6      	; 0x15ca <KEYPAD_getkey+0x1a2>
						c=keypadvalue[2][2];
    15c4:	eb 01       	movw	r28, r22
    15c6:	8a 85       	ldd	r24, Y+10	; 0x0a
    15c8:	04 c0       	rjmp	.+8      	; 0x15d2 <KEYPAD_getkey+0x1aa>
					if(HL == (1<<KEYPADDATA_4))
    15ca:	90 34       	cpi	r25, 0x40	; 64
    15cc:	11 f4       	brne	.+4      	; 0x15d2 <KEYPAD_getkey+0x1aa>
						c=keypadvalue[2][3];
    15ce:	eb 01       	movw	r28, r22
    15d0:	8b 85       	ldd	r24, Y+11	; 0x0b
				}
				*keypad_DDR&=~(1<<KEYPADLINE_3);
    15d2:	40 91 25 02 	lds	r20, 0x0225	; 0x800225 <keypad_DDR>
    15d6:	50 91 26 02 	lds	r21, 0x0226	; 0x800226 <keypad_DDR+0x1>
    15da:	ea 01       	movw	r28, r20
    15dc:	98 81       	ld	r25, Y
    15de:	9d 7f       	andi	r25, 0xFD	; 253
    15e0:	98 83       	st	Y, r25
				*keypad_PORT|=(1<<KEYPADLINE_3);
    15e2:	40 91 18 02 	lds	r20, 0x0218	; 0x800218 <keypad_PORT>
    15e6:	50 91 19 02 	lds	r21, 0x0219	; 0x800219 <keypad_PORT+0x1>
    15ea:	ea 01       	movw	r28, r20
    15ec:	98 81       	ld	r25, Y
    15ee:	92 60       	ori	r25, 0x02	; 2
    15f0:	98 83       	st	Y, r25
				break;
    15f2:	25 cf       	rjmp	.-438    	; 0x143e <KEYPAD_getkey+0x16>
			case 3: //line 4 index 3
				*keypad_DDR|=(1<<KEYPADLINE_4);
    15f4:	e0 91 25 02 	lds	r30, 0x0225	; 0x800225 <keypad_DDR>
    15f8:	f0 91 26 02 	lds	r31, 0x0226	; 0x800226 <keypad_DDR+0x1>
    15fc:	90 81       	ld	r25, Z
    15fe:	98 60       	ori	r25, 0x08	; 8
    1600:	90 83       	st	Z, r25
				*keypad_PORT&=~(1<<KEYPADLINE_4);
    1602:	e0 91 18 02 	lds	r30, 0x0218	; 0x800218 <keypad_PORT>
    1606:	f0 91 19 02 	lds	r31, 0x0219	; 0x800219 <keypad_PORT+0x1>
    160a:	90 81       	ld	r25, Z
    160c:	97 7f       	andi	r25, 0xF7	; 247
    160e:	90 83       	st	Z, r25
				keypad_dataf.line_4=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
    1610:	e0 91 23 02 	lds	r30, 0x0223	; 0x800223 <keypad_PIN>
    1614:	f0 91 24 02 	lds	r31, 0x0224	; 0x800224 <keypad_PIN+0x1>
    1618:	20 81       	ld	r18, Z
    161a:	24 77       	andi	r18, 0x74	; 116
    161c:	20 93 1d 02 	sts	0x021D, r18	; 0x80021d <keypad_dataf+0x3>
				HL=KEYPADhl(keypad_datai.line_4,keypad_dataf.line_4);
    1620:	ee e1       	ldi	r30, 0x1E	; 30
    1622:	f2 e0       	ldi	r31, 0x02	; 2
    1624:	93 81       	ldd	r25, Z+3	; 0x03
uint8_t KEYPADhl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	//printf("KEYPADhl\n");
	i=xf^xi;
	i&=xi;
    1626:	32 2f       	mov	r19, r18
    1628:	39 27       	eor	r19, r25
    162a:	93 23       	and	r25, r19
			case 3: //line 4 index 3
				*keypad_DDR|=(1<<KEYPADLINE_4);
				*keypad_PORT&=~(1<<KEYPADLINE_4);
				keypad_dataf.line_4=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
				HL=KEYPADhl(keypad_datai.line_4,keypad_dataf.line_4);
				keypad_datai.line_4=keypad_dataf.line_4;
    162c:	23 83       	std	Z+3, r18	; 0x03
				if(HL){
    162e:	99 23       	and	r25, r25
    1630:	99 f0       	breq	.+38     	; 0x1658 <KEYPAD_getkey+0x230>
					//decode index line four column what ?
					if(HL == (1<<KEYPADDATA_1))
    1632:	94 30       	cpi	r25, 0x04	; 4
    1634:	19 f4       	brne	.+6      	; 0x163c <KEYPAD_getkey+0x214>
						c=keypadvalue[3][0];
    1636:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__DATA_REGION_ORIGIN__+0xc>
    163a:	0a c0       	rjmp	.+20     	; 0x1650 <KEYPAD_getkey+0x228>
					if(HL == (1<<KEYPADDATA_2))
    163c:	90 31       	cpi	r25, 0x10	; 16
    163e:	19 f4       	brne	.+6      	; 0x1646 <KEYPAD_getkey+0x21e>
						c=keypadvalue[3][1];
    1640:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <__DATA_REGION_ORIGIN__+0xd>
    1644:	09 c0       	rjmp	.+18     	; 0x1658 <KEYPAD_getkey+0x230>
					if(HL == (1<<KEYPADDATA_3))
    1646:	90 32       	cpi	r25, 0x20	; 32
    1648:	19 f4       	brne	.+6      	; 0x1650 <KEYPAD_getkey+0x228>
						c=keypadvalue[3][2];
    164a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__DATA_REGION_ORIGIN__+0xe>
    164e:	04 c0       	rjmp	.+8      	; 0x1658 <KEYPAD_getkey+0x230>
					if(HL == (1<<KEYPADDATA_4))
    1650:	90 34       	cpi	r25, 0x40	; 64
    1652:	11 f4       	brne	.+4      	; 0x1658 <KEYPAD_getkey+0x230>
						c=keypadvalue[3][3];
    1654:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <__DATA_REGION_ORIGIN__+0xf>
				}
				*keypad_DDR&=~(1<<KEYPADLINE_4);
    1658:	e0 91 25 02 	lds	r30, 0x0225	; 0x800225 <keypad_DDR>
    165c:	f0 91 26 02 	lds	r31, 0x0226	; 0x800226 <keypad_DDR+0x1>
    1660:	90 81       	ld	r25, Z
    1662:	97 7f       	andi	r25, 0xF7	; 247
    1664:	90 83       	st	Z, r25
				*keypad_PORT|=(1<<KEYPADLINE_4);
    1666:	e0 91 18 02 	lds	r30, 0x0218	; 0x800218 <keypad_PORT>
    166a:	f0 91 19 02 	lds	r31, 0x0219	; 0x800219 <keypad_PORT+0x1>
    166e:	90 81       	ld	r25, Z
    1670:	98 60       	ori	r25, 0x08	; 8
    1672:	90 83       	st	Z, r25
    1674:	03 c0       	rjmp	.+6      	; 0x167c <KEYPAD_getkey+0x254>
char KEYPAD_getkey(void)
{
	uint8_t HL;
	char c='\0';
	uint8_t keypad_option;
	for(keypad_option=0;keypad_option<KEYPADLINES;keypad_option++){
    1676:	24 30       	cpi	r18, 0x04	; 4
    1678:	08 f4       	brcc	.+2      	; 0x167c <KEYPAD_getkey+0x254>
    167a:	e1 ce       	rjmp	.-574    	; 0x143e <KEYPAD_getkey+0x16>
			default:
				break;
		}//endswitch
	}//endfor
	return c;
}
    167c:	df 91       	pop	r29
    167e:	cf 91       	pop	r28
    1680:	08 95       	ret

00001682 <KEYPAD_read>:
/***read***/
struct keypadata KEYPAD_read(void)
{
    1682:	cf 93       	push	r28
    1684:	df 93       	push	r29
    1686:	00 d0       	rcall	.+0      	; 0x1688 <KEYPAD_read+0x6>
    1688:	00 d0       	rcall	.+0      	; 0x168a <KEYPAD_read+0x8>
    168a:	1f 92       	push	r1
    168c:	cd b7       	in	r28, 0x3d	; 61
    168e:	de b7       	in	r29, 0x3e	; 62
	char c;
	c=KEYPAD_getkey(); //returns null all the time when no entry
    1690:	cb de       	rcall	.-618    	; 0x1428 <KEYPAD_getkey>
	if(c){
    1692:	88 23       	and	r24, r24
    1694:	b1 f1       	breq	.+108    	; 0x1702 <KEYPAD_read+0x80>
		data.character=c;
    1696:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <data>
		if(KEYPADSTRINGINDEX<(KEYPADSTRINGSIZE)){
    169a:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <KEYPADSTRINGINDEX>
    169e:	94 31       	cpi	r25, 0x14	; 20
    16a0:	88 f4       	brcc	.+34     	; 0x16c4 <KEYPAD_read+0x42>
			KEYPAD_string[KEYPADSTRINGINDEX]=c;
    16a2:	e0 91 22 02 	lds	r30, 0x0222	; 0x800222 <KEYPADSTRINGINDEX>
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	e9 5d       	subi	r30, 0xD9	; 217
    16aa:	fd 4f       	sbci	r31, 0xFD	; 253
    16ac:	80 83       	st	Z, r24
			KEYPADSTRINGINDEX++;
    16ae:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <KEYPADSTRINGINDEX>
    16b2:	9f 5f       	subi	r25, 0xFF	; 255
    16b4:	90 93 22 02 	sts	0x0222, r25	; 0x800222 <KEYPADSTRINGINDEX>
			KEYPAD_string[KEYPADSTRINGINDEX]='\0';
    16b8:	e0 91 22 02 	lds	r30, 0x0222	; 0x800222 <KEYPADSTRINGINDEX>
    16bc:	f0 e0       	ldi	r31, 0x00	; 0
    16be:	e9 5d       	subi	r30, 0xD9	; 217
    16c0:	fd 4f       	sbci	r31, 0xFD	; 253
    16c2:	10 82       	st	Z, r1
		}
		if(c==KEYPADENTERKEY){
    16c4:	84 34       	cpi	r24, 0x44	; 68
    16c6:	99 f4       	brne	.+38     	; 0x16ee <KEYPAD_read+0x6c>
			KEYPAD_string[KEYPADSTRINGINDEX-1]='\0';
    16c8:	e0 91 22 02 	lds	r30, 0x0222	; 0x800222 <KEYPADSTRINGINDEX>
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	ea 5d       	subi	r30, 0xDA	; 218
    16d0:	fd 4f       	sbci	r31, 0xFD	; 253
    16d2:	10 82       	st	Z, r1
			KEYPADSTRINGINDEX=0;
    16d4:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <KEYPADSTRINGINDEX>
			data.printstring="";
    16d8:	e5 e5       	ldi	r30, 0x55	; 85
    16da:	f2 e0       	ldi	r31, 0x02	; 2
    16dc:	83 e2       	ldi	r24, 0x23	; 35
    16de:	91 e0       	ldi	r25, 0x01	; 1
    16e0:	92 83       	std	Z+2, r25	; 0x02
    16e2:	81 83       	std	Z+1, r24	; 0x01
			data.string=KEYPAD_string;
    16e4:	87 e2       	ldi	r24, 0x27	; 39
    16e6:	92 e0       	ldi	r25, 0x02	; 2
    16e8:	94 83       	std	Z+4, r25	; 0x04
    16ea:	83 83       	std	Z+3, r24	; 0x03
    16ec:	0a c0       	rjmp	.+20     	; 0x1702 <KEYPAD_read+0x80>
		}else{
			data.printstring=KEYPAD_string;
    16ee:	e5 e5       	ldi	r30, 0x55	; 85
    16f0:	f2 e0       	ldi	r31, 0x02	; 2
    16f2:	87 e2       	ldi	r24, 0x27	; 39
    16f4:	92 e0       	ldi	r25, 0x02	; 2
    16f6:	92 83       	std	Z+2, r25	; 0x02
    16f8:	81 83       	std	Z+1, r24	; 0x01
			data.string="";
    16fa:	83 e2       	ldi	r24, 0x23	; 35
    16fc:	91 e0       	ldi	r25, 0x01	; 1
    16fe:	94 83       	std	Z+4, r25	; 0x04
    1700:	83 83       	std	Z+3, r24	; 0x03
		}
	}
	return data;
    1702:	85 e0       	ldi	r24, 0x05	; 5
    1704:	e5 e5       	ldi	r30, 0x55	; 85
    1706:	f2 e0       	ldi	r31, 0x02	; 2
    1708:	de 01       	movw	r26, r28
    170a:	11 96       	adiw	r26, 0x01	; 1
    170c:	01 90       	ld	r0, Z+
    170e:	0d 92       	st	X+, r0
    1710:	8a 95       	dec	r24
    1712:	e1 f7       	brne	.-8      	; 0x170c <KEYPAD_read+0x8a>
    1714:	29 81       	ldd	r18, Y+1	; 0x01
    1716:	3a 81       	ldd	r19, Y+2	; 0x02
    1718:	4b 81       	ldd	r20, Y+3	; 0x03
    171a:	5c 81       	ldd	r21, Y+4	; 0x04
    171c:	6d 81       	ldd	r22, Y+5	; 0x05
}
    171e:	70 e0       	ldi	r23, 0x00	; 0
    1720:	80 e0       	ldi	r24, 0x00	; 0
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	0f 90       	pop	r0
    1726:	0f 90       	pop	r0
    1728:	0f 90       	pop	r0
    172a:	0f 90       	pop	r0
    172c:	0f 90       	pop	r0
    172e:	df 91       	pop	r29
    1730:	cf 91       	pop	r28
    1732:	08 95       	ret

00001734 <KEYPADenable>:
uint8_t KEYPADhl(uint8_t xi, uint8_t xf);
/*
** procedure and function
*/
KEYPAD KEYPADenable(volatile uint8_t *ddr, volatile uint8_t *pin, volatile uint8_t *port)
{
    1734:	cf 93       	push	r28
    1736:	df 93       	push	r29
    1738:	cd b7       	in	r28, 0x3d	; 61
    173a:	de b7       	in	r29, 0x3e	; 62
    173c:	28 97       	sbiw	r28, 0x08	; 8
    173e:	0f b6       	in	r0, 0x3f	; 63
    1740:	f8 94       	cli
    1742:	de bf       	out	0x3e, r29	; 62
    1744:	0f be       	out	0x3f, r0	; 63
    1746:	cd bf       	out	0x3d, r28	; 61
    1748:	fc 01       	movw	r30, r24
	//LOCAL VARIABLE
	uint8_t tSREG;
	tSREG=SREG;
    174a:	2f b7       	in	r18, 0x3f	; 63
	data.character=' ';
    174c:	80 e2       	ldi	r24, 0x20	; 32
    174e:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <data>
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
    1752:	9f b7       	in	r25, 0x3f	; 63
    1754:	9f 77       	andi	r25, 0x7F	; 127
    1756:	9f bf       	out	0x3f, r25	; 63
	//ALLOCAÇÂO MEMORIA PARA Estrutura
	KEYPAD keypad;
	//import parametros
	keypad_DDR=ddr;
    1758:	f0 93 26 02 	sts	0x0226, r31	; 0x800226 <keypad_DDR+0x1>
    175c:	e0 93 25 02 	sts	0x0225, r30	; 0x800225 <keypad_DDR>
	keypad_PIN=pin;
    1760:	70 93 24 02 	sts	0x0224, r23	; 0x800224 <keypad_PIN+0x1>
    1764:	60 93 23 02 	sts	0x0223, r22	; 0x800223 <keypad_PIN>
	keypad_PORT=port;
    1768:	50 93 19 02 	sts	0x0219, r21	; 0x800219 <keypad_PORT+0x1>
    176c:	40 93 18 02 	sts	0x0218, r20	; 0x800218 <keypad_PORT>
	//inic variables
	*keypad_DDR=(1<<KEYPADLINE_1) | (1<<KEYPADLINE_2) | (1<<KEYPADLINE_3) | (1<<KEYPADLINE_4);
    1770:	8b e8       	ldi	r24, 0x8B	; 139
    1772:	80 83       	st	Z, r24
	*keypad_PORT=(1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4);
    1774:	e0 91 18 02 	lds	r30, 0x0218	; 0x800218 <keypad_PORT>
    1778:	f0 91 19 02 	lds	r31, 0x0219	; 0x800219 <keypad_PORT+0x1>
    177c:	84 e7       	ldi	r24, 0x74	; 116
    177e:	80 83       	st	Z, r24
	keypad_datai.line_1=keypad_dataf.line_1=(1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4);
    1780:	aa e1       	ldi	r26, 0x1A	; 26
    1782:	b2 e0       	ldi	r27, 0x02	; 2
    1784:	8c 93       	st	X, r24
    1786:	ee e1       	ldi	r30, 0x1E	; 30
    1788:	f2 e0       	ldi	r31, 0x02	; 2
    178a:	80 83       	st	Z, r24
	keypad_datai.line_2=keypad_dataf.line_2=(1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4);
    178c:	11 96       	adiw	r26, 0x01	; 1
    178e:	8c 93       	st	X, r24
    1790:	11 97       	sbiw	r26, 0x01	; 1
    1792:	81 83       	std	Z+1, r24	; 0x01
	keypad_datai.line_3=keypad_dataf.line_3=(1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4);
    1794:	12 96       	adiw	r26, 0x02	; 2
    1796:	8c 93       	st	X, r24
    1798:	12 97       	sbiw	r26, 0x02	; 2
    179a:	82 83       	std	Z+2, r24	; 0x02
	keypad_datai.line_4=keypad_dataf.line_4=(1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4);
    179c:	13 96       	adiw	r26, 0x03	; 3
    179e:	8c 93       	st	X, r24
    17a0:	83 83       	std	Z+3, r24	; 0x03
	KEYPADSTRINGINDEX=0;
    17a2:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <KEYPADSTRINGINDEX>
	//Direccionar apontadores para PROTOTIPOS
	keypad.getkey=KEYPAD_getkey;
	keypad.read=KEYPAD_read;
	keypad.get=KEYPAD_get;
	keypad.flush=KEYPAD_flush;
	SREG=tSREG;
    17a6:	2f bf       	out	0x3f, r18	; 63
	//
	*keypad_PORT|=(1<<KEYPADLINE_1) | (1<<KEYPADLINE_2) | (1<<KEYPADLINE_3) | (1<<KEYPADLINE_4);
    17a8:	e0 91 18 02 	lds	r30, 0x0218	; 0x800218 <keypad_PORT>
    17ac:	f0 91 19 02 	lds	r31, 0x0219	; 0x800219 <keypad_PORT+0x1>
    17b0:	80 81       	ld	r24, Z
    17b2:	8b 68       	ori	r24, 0x8B	; 139
    17b4:	80 83       	st	Z, r24
	//Going to use pull down method.
	//Inic String Vec
	return keypad;
    17b6:	24 e1       	ldi	r18, 0x14	; 20
    17b8:	3a e0       	ldi	r19, 0x0A	; 10
    17ba:	3a 83       	std	Y+2, r19	; 0x02
    17bc:	29 83       	std	Y+1, r18	; 0x01
    17be:	41 e4       	ldi	r20, 0x41	; 65
    17c0:	5b e0       	ldi	r21, 0x0B	; 11
    17c2:	5c 83       	std	Y+4, r21	; 0x04
    17c4:	4b 83       	std	Y+3, r20	; 0x03
    17c6:	69 ee       	ldi	r22, 0xE9	; 233
    17c8:	79 e0       	ldi	r23, 0x09	; 9
    17ca:	7e 83       	std	Y+6, r23	; 0x06
    17cc:	6d 83       	std	Y+5, r22	; 0x05
    17ce:	89 e0       	ldi	r24, 0x09	; 9
    17d0:	9a e0       	ldi	r25, 0x0A	; 10
    17d2:	98 87       	std	Y+8, r25	; 0x08
    17d4:	8f 83       	std	Y+7, r24	; 0x07
    17d6:	3a 81       	ldd	r19, Y+2	; 0x02
    17d8:	5c 81       	ldd	r21, Y+4	; 0x04
    17da:	7e 81       	ldd	r23, Y+6	; 0x06
}
    17dc:	98 85       	ldd	r25, Y+8	; 0x08
    17de:	28 96       	adiw	r28, 0x08	; 8
    17e0:	0f b6       	in	r0, 0x3f	; 63
    17e2:	f8 94       	cli
    17e4:	de bf       	out	0x3e, r29	; 62
    17e6:	0f be       	out	0x3f, r0	; 63
    17e8:	cd bf       	out	0x3d, r28	; 61
    17ea:	df 91       	pop	r29
    17ec:	cf 91       	pop	r28
    17ee:	08 95       	ret

000017f0 <LCD0_write>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    17f0:	e0 91 46 02 	lds	r30, 0x0246	; 0x800246 <lcd0_PORT>
    17f4:	f0 91 47 02 	lds	r31, 0x0247	; 0x800247 <lcd0_PORT+0x1>
    17f8:	90 81       	ld	r25, Z
    17fa:	9d 7f       	andi	r25, 0xFD	; 253
    17fc:	90 83       	st	Z, r25
    17fe:	67 2b       	or	r22, r23
    1800:	41 f0       	breq	.+16     	; 0x1812 <LCD0_write+0x22>
    1802:	e0 91 46 02 	lds	r30, 0x0246	; 0x800246 <lcd0_PORT>
    1806:	f0 91 47 02 	lds	r31, 0x0247	; 0x800247 <lcd0_PORT+0x1>
    180a:	90 81       	ld	r25, Z
    180c:	91 60       	ori	r25, 0x01	; 1
    180e:	90 83       	st	Z, r25
    1810:	07 c0       	rjmp	.+14     	; 0x1820 <LCD0_write+0x30>
    1812:	e0 91 46 02 	lds	r30, 0x0246	; 0x800246 <lcd0_PORT>
    1816:	f0 91 47 02 	lds	r31, 0x0247	; 0x800247 <lcd0_PORT+0x1>
    181a:	90 81       	ld	r25, Z
    181c:	9e 7f       	andi	r25, 0xFE	; 254
    181e:	90 83       	st	Z, r25
    1820:	e0 91 43 02 	lds	r30, 0x0243	; 0x800243 <lcd0_DDR>
    1824:	f0 91 44 02 	lds	r31, 0x0244	; 0x800244 <lcd0_DDR+0x1>
    1828:	90 81       	ld	r25, Z
    182a:	90 6f       	ori	r25, 0xF0	; 240
    182c:	90 83       	st	Z, r25
    182e:	e0 91 46 02 	lds	r30, 0x0246	; 0x800246 <lcd0_PORT>
    1832:	f0 91 47 02 	lds	r31, 0x0247	; 0x800247 <lcd0_PORT+0x1>
    1836:	90 81       	ld	r25, Z
    1838:	94 60       	ori	r25, 0x04	; 4
    183a:	90 83       	st	Z, r25
    183c:	88 23       	and	r24, r24
    183e:	44 f4       	brge	.+16     	; 0x1850 <LCD0_write+0x60>
    1840:	e0 91 46 02 	lds	r30, 0x0246	; 0x800246 <lcd0_PORT>
    1844:	f0 91 47 02 	lds	r31, 0x0247	; 0x800247 <lcd0_PORT+0x1>
    1848:	90 81       	ld	r25, Z
    184a:	90 68       	ori	r25, 0x80	; 128
    184c:	90 83       	st	Z, r25
    184e:	07 c0       	rjmp	.+14     	; 0x185e <LCD0_write+0x6e>
    1850:	e0 91 46 02 	lds	r30, 0x0246	; 0x800246 <lcd0_PORT>
    1854:	f0 91 47 02 	lds	r31, 0x0247	; 0x800247 <lcd0_PORT+0x1>
    1858:	90 81       	ld	r25, Z
    185a:	9f 77       	andi	r25, 0x7F	; 127
    185c:	90 83       	st	Z, r25
    185e:	86 ff       	sbrs	r24, 6
    1860:	08 c0       	rjmp	.+16     	; 0x1872 <LCD0_write+0x82>
    1862:	e0 91 46 02 	lds	r30, 0x0246	; 0x800246 <lcd0_PORT>
    1866:	f0 91 47 02 	lds	r31, 0x0247	; 0x800247 <lcd0_PORT+0x1>
    186a:	90 81       	ld	r25, Z
    186c:	90 64       	ori	r25, 0x40	; 64
    186e:	90 83       	st	Z, r25
    1870:	07 c0       	rjmp	.+14     	; 0x1880 <LCD0_write+0x90>
    1872:	e0 91 46 02 	lds	r30, 0x0246	; 0x800246 <lcd0_PORT>
    1876:	f0 91 47 02 	lds	r31, 0x0247	; 0x800247 <lcd0_PORT+0x1>
    187a:	90 81       	ld	r25, Z
    187c:	9f 7b       	andi	r25, 0xBF	; 191
    187e:	90 83       	st	Z, r25
    1880:	85 ff       	sbrs	r24, 5
    1882:	08 c0       	rjmp	.+16     	; 0x1894 <LCD0_write+0xa4>
    1884:	e0 91 46 02 	lds	r30, 0x0246	; 0x800246 <lcd0_PORT>
    1888:	f0 91 47 02 	lds	r31, 0x0247	; 0x800247 <lcd0_PORT+0x1>
    188c:	90 81       	ld	r25, Z
    188e:	90 62       	ori	r25, 0x20	; 32
    1890:	90 83       	st	Z, r25
    1892:	07 c0       	rjmp	.+14     	; 0x18a2 <LCD0_write+0xb2>
    1894:	e0 91 46 02 	lds	r30, 0x0246	; 0x800246 <lcd0_PORT>
    1898:	f0 91 47 02 	lds	r31, 0x0247	; 0x800247 <lcd0_PORT+0x1>
    189c:	90 81       	ld	r25, Z
    189e:	9f 7d       	andi	r25, 0xDF	; 223
    18a0:	90 83       	st	Z, r25
    18a2:	84 ff       	sbrs	r24, 4
    18a4:	08 c0       	rjmp	.+16     	; 0x18b6 <LCD0_write+0xc6>
    18a6:	e0 91 46 02 	lds	r30, 0x0246	; 0x800246 <lcd0_PORT>
    18aa:	f0 91 47 02 	lds	r31, 0x0247	; 0x800247 <lcd0_PORT+0x1>
    18ae:	90 81       	ld	r25, Z
    18b0:	90 61       	ori	r25, 0x10	; 16
    18b2:	90 83       	st	Z, r25
    18b4:	07 c0       	rjmp	.+14     	; 0x18c4 <LCD0_write+0xd4>
    18b6:	e0 91 46 02 	lds	r30, 0x0246	; 0x800246 <lcd0_PORT>
    18ba:	f0 91 47 02 	lds	r31, 0x0247	; 0x800247 <lcd0_PORT+0x1>
    18be:	90 81       	ld	r25, Z
    18c0:	9f 7e       	andi	r25, 0xEF	; 239
    18c2:	90 83       	st	Z, r25
    18c4:	e0 91 46 02 	lds	r30, 0x0246	; 0x800246 <lcd0_PORT>
    18c8:	f0 91 47 02 	lds	r31, 0x0247	; 0x800247 <lcd0_PORT+0x1>
    18cc:	90 81       	ld	r25, Z
    18ce:	9b 7f       	andi	r25, 0xFB	; 251
    18d0:	90 83       	st	Z, r25
    18d2:	e0 91 46 02 	lds	r30, 0x0246	; 0x800246 <lcd0_PORT>
    18d6:	f0 91 47 02 	lds	r31, 0x0247	; 0x800247 <lcd0_PORT+0x1>
    18da:	90 81       	ld	r25, Z
    18dc:	94 60       	ori	r25, 0x04	; 4
    18de:	90 83       	st	Z, r25
    18e0:	83 ff       	sbrs	r24, 3
    18e2:	08 c0       	rjmp	.+16     	; 0x18f4 <LCD0_write+0x104>
    18e4:	e0 91 46 02 	lds	r30, 0x0246	; 0x800246 <lcd0_PORT>
    18e8:	f0 91 47 02 	lds	r31, 0x0247	; 0x800247 <lcd0_PORT+0x1>
    18ec:	90 81       	ld	r25, Z
    18ee:	90 68       	ori	r25, 0x80	; 128
    18f0:	90 83       	st	Z, r25
    18f2:	07 c0       	rjmp	.+14     	; 0x1902 <LCD0_write+0x112>
    18f4:	e0 91 46 02 	lds	r30, 0x0246	; 0x800246 <lcd0_PORT>
    18f8:	f0 91 47 02 	lds	r31, 0x0247	; 0x800247 <lcd0_PORT+0x1>
    18fc:	90 81       	ld	r25, Z
    18fe:	9f 77       	andi	r25, 0x7F	; 127
    1900:	90 83       	st	Z, r25
    1902:	82 ff       	sbrs	r24, 2
    1904:	08 c0       	rjmp	.+16     	; 0x1916 <LCD0_write+0x126>
    1906:	e0 91 46 02 	lds	r30, 0x0246	; 0x800246 <lcd0_PORT>
    190a:	f0 91 47 02 	lds	r31, 0x0247	; 0x800247 <lcd0_PORT+0x1>
    190e:	90 81       	ld	r25, Z
    1910:	90 64       	ori	r25, 0x40	; 64
    1912:	90 83       	st	Z, r25
    1914:	07 c0       	rjmp	.+14     	; 0x1924 <LCD0_write+0x134>
    1916:	e0 91 46 02 	lds	r30, 0x0246	; 0x800246 <lcd0_PORT>
    191a:	f0 91 47 02 	lds	r31, 0x0247	; 0x800247 <lcd0_PORT+0x1>
    191e:	90 81       	ld	r25, Z
    1920:	9f 7b       	andi	r25, 0xBF	; 191
    1922:	90 83       	st	Z, r25
    1924:	81 ff       	sbrs	r24, 1
    1926:	08 c0       	rjmp	.+16     	; 0x1938 <LCD0_write+0x148>
    1928:	e0 91 46 02 	lds	r30, 0x0246	; 0x800246 <lcd0_PORT>
    192c:	f0 91 47 02 	lds	r31, 0x0247	; 0x800247 <lcd0_PORT+0x1>
    1930:	90 81       	ld	r25, Z
    1932:	90 62       	ori	r25, 0x20	; 32
    1934:	90 83       	st	Z, r25
    1936:	07 c0       	rjmp	.+14     	; 0x1946 <LCD0_write+0x156>
    1938:	e0 91 46 02 	lds	r30, 0x0246	; 0x800246 <lcd0_PORT>
    193c:	f0 91 47 02 	lds	r31, 0x0247	; 0x800247 <lcd0_PORT+0x1>
    1940:	90 81       	ld	r25, Z
    1942:	9f 7d       	andi	r25, 0xDF	; 223
    1944:	90 83       	st	Z, r25
    1946:	80 ff       	sbrs	r24, 0
    1948:	08 c0       	rjmp	.+16     	; 0x195a <LCD0_write+0x16a>
    194a:	e0 91 46 02 	lds	r30, 0x0246	; 0x800246 <lcd0_PORT>
    194e:	f0 91 47 02 	lds	r31, 0x0247	; 0x800247 <lcd0_PORT+0x1>
    1952:	80 81       	ld	r24, Z
    1954:	80 61       	ori	r24, 0x10	; 16
    1956:	80 83       	st	Z, r24
    1958:	07 c0       	rjmp	.+14     	; 0x1968 <LCD0_write+0x178>
    195a:	e0 91 46 02 	lds	r30, 0x0246	; 0x800246 <lcd0_PORT>
    195e:	f0 91 47 02 	lds	r31, 0x0247	; 0x800247 <lcd0_PORT+0x1>
    1962:	80 81       	ld	r24, Z
    1964:	8f 7e       	andi	r24, 0xEF	; 239
    1966:	80 83       	st	Z, r24
    1968:	e0 91 46 02 	lds	r30, 0x0246	; 0x800246 <lcd0_PORT>
    196c:	f0 91 47 02 	lds	r31, 0x0247	; 0x800247 <lcd0_PORT+0x1>
    1970:	80 81       	ld	r24, Z
    1972:	8b 7f       	andi	r24, 0xFB	; 251
    1974:	80 83       	st	Z, r24
    1976:	08 95       	ret

00001978 <LCD0_read>:
    1978:	e0 91 43 02 	lds	r30, 0x0243	; 0x800243 <lcd0_DDR>
    197c:	f0 91 44 02 	lds	r31, 0x0244	; 0x800244 <lcd0_DDR+0x1>
    1980:	20 81       	ld	r18, Z
    1982:	2f 70       	andi	r18, 0x0F	; 15
    1984:	20 83       	st	Z, r18
    1986:	e0 91 46 02 	lds	r30, 0x0246	; 0x800246 <lcd0_PORT>
    198a:	f0 91 47 02 	lds	r31, 0x0247	; 0x800247 <lcd0_PORT+0x1>
    198e:	20 81       	ld	r18, Z
    1990:	20 6f       	ori	r18, 0xF0	; 240
    1992:	20 83       	st	Z, r18
    1994:	e0 91 46 02 	lds	r30, 0x0246	; 0x800246 <lcd0_PORT>
    1998:	f0 91 47 02 	lds	r31, 0x0247	; 0x800247 <lcd0_PORT+0x1>
    199c:	20 81       	ld	r18, Z
    199e:	22 60       	ori	r18, 0x02	; 2
    19a0:	20 83       	st	Z, r18
    19a2:	89 2b       	or	r24, r25
    19a4:	41 f0       	breq	.+16     	; 0x19b6 <LCD0_read+0x3e>
    19a6:	e0 91 46 02 	lds	r30, 0x0246	; 0x800246 <lcd0_PORT>
    19aa:	f0 91 47 02 	lds	r31, 0x0247	; 0x800247 <lcd0_PORT+0x1>
    19ae:	80 81       	ld	r24, Z
    19b0:	81 60       	ori	r24, 0x01	; 1
    19b2:	80 83       	st	Z, r24
    19b4:	07 c0       	rjmp	.+14     	; 0x19c4 <LCD0_read+0x4c>
    19b6:	e0 91 46 02 	lds	r30, 0x0246	; 0x800246 <lcd0_PORT>
    19ba:	f0 91 47 02 	lds	r31, 0x0247	; 0x800247 <lcd0_PORT+0x1>
    19be:	80 81       	ld	r24, Z
    19c0:	8e 7f       	andi	r24, 0xFE	; 254
    19c2:	80 83       	st	Z, r24
    19c4:	e0 91 46 02 	lds	r30, 0x0246	; 0x800246 <lcd0_PORT>
    19c8:	f0 91 47 02 	lds	r31, 0x0247	; 0x800247 <lcd0_PORT+0x1>
    19cc:	80 81       	ld	r24, Z
    19ce:	84 60       	ori	r24, 0x04	; 4
    19d0:	80 83       	st	Z, r24
    19d2:	e0 91 3c 02 	lds	r30, 0x023C	; 0x80023c <lcd0_PIN>
    19d6:	f0 91 3d 02 	lds	r31, 0x023D	; 0x80023d <lcd0_PIN+0x1>
    19da:	80 81       	ld	r24, Z
    19dc:	88 23       	and	r24, r24
    19de:	14 f0       	brlt	.+4      	; 0x19e4 <LCD0_read+0x6c>
    19e0:	80 e0       	ldi	r24, 0x00	; 0
    19e2:	01 c0       	rjmp	.+2      	; 0x19e6 <LCD0_read+0x6e>
    19e4:	80 e8       	ldi	r24, 0x80	; 128
    19e6:	90 81       	ld	r25, Z
    19e8:	96 ff       	sbrs	r25, 6
    19ea:	02 c0       	rjmp	.+4      	; 0x19f0 <LCD0_read+0x78>
    19ec:	80 64       	ori	r24, 0x40	; 64
    19ee:	01 c0       	rjmp	.+2      	; 0x19f2 <LCD0_read+0x7a>
    19f0:	8f 7b       	andi	r24, 0xBF	; 191
    19f2:	90 81       	ld	r25, Z
    19f4:	95 ff       	sbrs	r25, 5
    19f6:	02 c0       	rjmp	.+4      	; 0x19fc <LCD0_read+0x84>
    19f8:	80 62       	ori	r24, 0x20	; 32
    19fa:	01 c0       	rjmp	.+2      	; 0x19fe <LCD0_read+0x86>
    19fc:	8f 7d       	andi	r24, 0xDF	; 223
    19fe:	90 81       	ld	r25, Z
    1a00:	94 ff       	sbrs	r25, 4
    1a02:	02 c0       	rjmp	.+4      	; 0x1a08 <LCD0_read+0x90>
    1a04:	80 61       	ori	r24, 0x10	; 16
    1a06:	01 c0       	rjmp	.+2      	; 0x1a0a <LCD0_read+0x92>
    1a08:	8f 7e       	andi	r24, 0xEF	; 239
    1a0a:	e0 91 46 02 	lds	r30, 0x0246	; 0x800246 <lcd0_PORT>
    1a0e:	f0 91 47 02 	lds	r31, 0x0247	; 0x800247 <lcd0_PORT+0x1>
    1a12:	90 81       	ld	r25, Z
    1a14:	9b 7f       	andi	r25, 0xFB	; 251
    1a16:	90 83       	st	Z, r25
    1a18:	e0 91 46 02 	lds	r30, 0x0246	; 0x800246 <lcd0_PORT>
    1a1c:	f0 91 47 02 	lds	r31, 0x0247	; 0x800247 <lcd0_PORT+0x1>
    1a20:	90 81       	ld	r25, Z
    1a22:	94 60       	ori	r25, 0x04	; 4
    1a24:	90 83       	st	Z, r25
    1a26:	e0 91 3c 02 	lds	r30, 0x023C	; 0x80023c <lcd0_PIN>
    1a2a:	f0 91 3d 02 	lds	r31, 0x023D	; 0x80023d <lcd0_PIN+0x1>
    1a2e:	90 81       	ld	r25, Z
    1a30:	99 23       	and	r25, r25
    1a32:	14 f4       	brge	.+4      	; 0x1a38 <LCD0_read+0xc0>
    1a34:	88 60       	ori	r24, 0x08	; 8
    1a36:	01 c0       	rjmp	.+2      	; 0x1a3a <LCD0_read+0xc2>
    1a38:	87 7f       	andi	r24, 0xF7	; 247
    1a3a:	90 81       	ld	r25, Z
    1a3c:	96 ff       	sbrs	r25, 6
    1a3e:	02 c0       	rjmp	.+4      	; 0x1a44 <LCD0_read+0xcc>
    1a40:	84 60       	ori	r24, 0x04	; 4
    1a42:	01 c0       	rjmp	.+2      	; 0x1a46 <LCD0_read+0xce>
    1a44:	8b 7f       	andi	r24, 0xFB	; 251
    1a46:	90 81       	ld	r25, Z
    1a48:	95 ff       	sbrs	r25, 5
    1a4a:	02 c0       	rjmp	.+4      	; 0x1a50 <LCD0_read+0xd8>
    1a4c:	82 60       	ori	r24, 0x02	; 2
    1a4e:	01 c0       	rjmp	.+2      	; 0x1a52 <LCD0_read+0xda>
    1a50:	8d 7f       	andi	r24, 0xFD	; 253
    1a52:	90 81       	ld	r25, Z
    1a54:	94 ff       	sbrs	r25, 4
    1a56:	02 c0       	rjmp	.+4      	; 0x1a5c <LCD0_read+0xe4>
    1a58:	81 60       	ori	r24, 0x01	; 1
    1a5a:	01 c0       	rjmp	.+2      	; 0x1a5e <LCD0_read+0xe6>
    1a5c:	8e 7f       	andi	r24, 0xFE	; 254
    1a5e:	e0 91 46 02 	lds	r30, 0x0246	; 0x800246 <lcd0_PORT>
    1a62:	f0 91 47 02 	lds	r31, 0x0247	; 0x800247 <lcd0_PORT+0x1>
    1a66:	90 81       	ld	r25, Z
    1a68:	9b 7f       	andi	r25, 0xFB	; 251
    1a6a:	90 83       	st	Z, r25
    1a6c:	08 95       	ret

00001a6e <LCD0_BF>:
    1a6e:	cf 93       	push	r28
    1a70:	df 93       	push	r29
    1a72:	80 e0       	ldi	r24, 0x00	; 0
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	80 df       	rcall	.-256    	; 0x1978 <LCD0_read>
    1a78:	cb e0       	ldi	r28, 0x0B	; 11
    1a7a:	d0 e0       	ldi	r29, 0x00	; 0
    1a7c:	05 c0       	rjmp	.+10     	; 0x1a88 <LCD0_BF+0x1a>
    1a7e:	80 e0       	ldi	r24, 0x00	; 0
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	7a df       	rcall	.-268    	; 0x1978 <LCD0_read>
    1a84:	21 97       	sbiw	r28, 0x01	; 1
    1a86:	11 f0       	breq	.+4      	; 0x1a8c <LCD0_BF+0x1e>
    1a88:	88 23       	and	r24, r24
    1a8a:	cc f3       	brlt	.-14     	; 0x1a7e <LCD0_BF+0x10>
    1a8c:	df 91       	pop	r29
    1a8e:	cf 91       	pop	r28
    1a90:	08 95       	ret

00001a92 <LCD0_putch>:
    1a92:	61 e0       	ldi	r22, 0x01	; 1
    1a94:	70 e0       	ldi	r23, 0x00	; 0
    1a96:	ac de       	rcall	.-680    	; 0x17f0 <LCD0_write>
    1a98:	ea cf       	rjmp	.-44     	; 0x1a6e <LCD0_BF>
    1a9a:	08 95       	ret

00001a9c <LCD0_getch>:
    1a9c:	cf 93       	push	r28
    1a9e:	81 e0       	ldi	r24, 0x01	; 1
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	6a df       	rcall	.-300    	; 0x1978 <LCD0_read>
    1aa4:	c8 2f       	mov	r28, r24
    1aa6:	e3 df       	rcall	.-58     	; 0x1a6e <LCD0_BF>
    1aa8:	8c 2f       	mov	r24, r28
    1aaa:	cf 91       	pop	r28
    1aac:	08 95       	ret

00001aae <LCD0_string>:
    1aae:	cf 93       	push	r28
    1ab0:	df 93       	push	r29
    1ab2:	ec 01       	movw	r28, r24
    1ab4:	88 81       	ld	r24, Y
    1ab6:	88 23       	and	r24, r24
    1ab8:	41 f0       	breq	.+16     	; 0x1aca <LCD0_string+0x1c>
    1aba:	21 96       	adiw	r28, 0x01	; 1
    1abc:	61 e0       	ldi	r22, 0x01	; 1
    1abe:	70 e0       	ldi	r23, 0x00	; 0
    1ac0:	97 de       	rcall	.-722    	; 0x17f0 <LCD0_write>
    1ac2:	d5 df       	rcall	.-86     	; 0x1a6e <LCD0_BF>
    1ac4:	89 91       	ld	r24, Y+
    1ac6:	81 11       	cpse	r24, r1
    1ac8:	f9 cf       	rjmp	.-14     	; 0x1abc <LCD0_string+0xe>
    1aca:	df 91       	pop	r29
    1acc:	cf 91       	pop	r28
    1ace:	08 95       	ret

00001ad0 <LCD0_string_size>:
    1ad0:	0f 93       	push	r16
    1ad2:	1f 93       	push	r17
    1ad4:	cf 93       	push	r28
    1ad6:	df 93       	push	r29
    1ad8:	fc 01       	movw	r30, r24
    1ada:	d6 2f       	mov	r29, r22
    1adc:	80 81       	ld	r24, Z
    1ade:	88 23       	and	r24, r24
    1ae0:	51 f0       	breq	.+20     	; 0x1af6 <LCD0_string_size+0x26>
    1ae2:	8f 01       	movw	r16, r30
    1ae4:	0f 5f       	subi	r16, 0xFF	; 255
    1ae6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ae8:	61 11       	cpse	r22, r1
    1aea:	09 c0       	rjmp	.+18     	; 0x1afe <LCD0_string_size+0x2e>
    1aec:	1b c0       	rjmp	.+54     	; 0x1b24 <LCD0_string_size+0x54>
    1aee:	cf 5f       	subi	r28, 0xFF	; 255
    1af0:	dc 17       	cp	r29, r28
    1af2:	30 f4       	brcc	.+12     	; 0x1b00 <LCD0_string_size+0x30>
    1af4:	01 c0       	rjmp	.+2      	; 0x1af8 <LCD0_string_size+0x28>
    1af6:	c0 e0       	ldi	r28, 0x00	; 0
    1af8:	cd 17       	cp	r28, r29
    1afa:	60 f0       	brcs	.+24     	; 0x1b14 <LCD0_string_size+0x44>
    1afc:	13 c0       	rjmp	.+38     	; 0x1b24 <LCD0_string_size+0x54>
    1afe:	c1 e0       	ldi	r28, 0x01	; 1
    1b00:	61 e0       	ldi	r22, 0x01	; 1
    1b02:	70 e0       	ldi	r23, 0x00	; 0
    1b04:	75 de       	rcall	.-790    	; 0x17f0 <LCD0_write>
    1b06:	b3 df       	rcall	.-154    	; 0x1a6e <LCD0_BF>
    1b08:	f8 01       	movw	r30, r16
    1b0a:	81 91       	ld	r24, Z+
    1b0c:	8f 01       	movw	r16, r30
    1b0e:	81 11       	cpse	r24, r1
    1b10:	ee cf       	rjmp	.-36     	; 0x1aee <LCD0_string_size+0x1e>
    1b12:	f2 cf       	rjmp	.-28     	; 0x1af8 <LCD0_string_size+0x28>
    1b14:	cf 5f       	subi	r28, 0xFF	; 255
    1b16:	61 e0       	ldi	r22, 0x01	; 1
    1b18:	70 e0       	ldi	r23, 0x00	; 0
    1b1a:	80 e2       	ldi	r24, 0x20	; 32
    1b1c:	69 de       	rcall	.-814    	; 0x17f0 <LCD0_write>
    1b1e:	a7 df       	rcall	.-178    	; 0x1a6e <LCD0_BF>
    1b20:	cd 17       	cp	r28, r29
    1b22:	c0 f3       	brcs	.-16     	; 0x1b14 <LCD0_string_size+0x44>
    1b24:	df 91       	pop	r29
    1b26:	cf 91       	pop	r28
    1b28:	1f 91       	pop	r17
    1b2a:	0f 91       	pop	r16
    1b2c:	08 95       	ret

00001b2e <LCD0_hspace>:
    1b2e:	cf 93       	push	r28
    1b30:	c8 2f       	mov	r28, r24
    1b32:	88 23       	and	r24, r24
    1b34:	39 f0       	breq	.+14     	; 0x1b44 <LCD0_hspace+0x16>
    1b36:	61 e0       	ldi	r22, 0x01	; 1
    1b38:	70 e0       	ldi	r23, 0x00	; 0
    1b3a:	80 e2       	ldi	r24, 0x20	; 32
    1b3c:	59 de       	rcall	.-846    	; 0x17f0 <LCD0_write>
    1b3e:	97 df       	rcall	.-210    	; 0x1a6e <LCD0_BF>
    1b40:	c1 50       	subi	r28, 0x01	; 1
    1b42:	c9 f7       	brne	.-14     	; 0x1b36 <LCD0_hspace+0x8>
    1b44:	cf 91       	pop	r28
    1b46:	08 95       	ret

00001b48 <LCD0_gotoxy>:
    1b48:	26 2f       	mov	r18, r22
    1b4a:	81 30       	cpi	r24, 0x01	; 1
    1b4c:	91 05       	cpc	r25, r1
    1b4e:	71 f0       	breq	.+28     	; 0x1b6c <LCD0_gotoxy+0x24>
    1b50:	30 f0       	brcs	.+12     	; 0x1b5e <LCD0_gotoxy+0x16>
    1b52:	82 30       	cpi	r24, 0x02	; 2
    1b54:	91 05       	cpc	r25, r1
    1b56:	89 f0       	breq	.+34     	; 0x1b7a <LCD0_gotoxy+0x32>
    1b58:	03 97       	sbiw	r24, 0x03	; 3
    1b5a:	b1 f0       	breq	.+44     	; 0x1b88 <LCD0_gotoxy+0x40>
    1b5c:	08 95       	ret
    1b5e:	60 e0       	ldi	r22, 0x00	; 0
    1b60:	70 e0       	ldi	r23, 0x00	; 0
    1b62:	80 e8       	ldi	r24, 0x80	; 128
    1b64:	82 0f       	add	r24, r18
    1b66:	44 de       	rcall	.-888    	; 0x17f0 <LCD0_write>
    1b68:	82 cf       	rjmp	.-252    	; 0x1a6e <LCD0_BF>
    1b6a:	08 95       	ret
    1b6c:	60 e0       	ldi	r22, 0x00	; 0
    1b6e:	70 e0       	ldi	r23, 0x00	; 0
    1b70:	80 ec       	ldi	r24, 0xC0	; 192
    1b72:	82 0f       	add	r24, r18
    1b74:	3d de       	rcall	.-902    	; 0x17f0 <LCD0_write>
    1b76:	7b cf       	rjmp	.-266    	; 0x1a6e <LCD0_BF>
    1b78:	08 95       	ret
    1b7a:	60 e0       	ldi	r22, 0x00	; 0
    1b7c:	70 e0       	ldi	r23, 0x00	; 0
    1b7e:	84 e9       	ldi	r24, 0x94	; 148
    1b80:	82 0f       	add	r24, r18
    1b82:	36 de       	rcall	.-916    	; 0x17f0 <LCD0_write>
    1b84:	74 cf       	rjmp	.-280    	; 0x1a6e <LCD0_BF>
    1b86:	08 95       	ret
    1b88:	60 e0       	ldi	r22, 0x00	; 0
    1b8a:	70 e0       	ldi	r23, 0x00	; 0
    1b8c:	84 ed       	ldi	r24, 0xD4	; 212
    1b8e:	82 0f       	add	r24, r18
    1b90:	2f de       	rcall	.-930    	; 0x17f0 <LCD0_write>
    1b92:	6d cf       	rjmp	.-294    	; 0x1a6e <LCD0_BF>
    1b94:	08 95       	ret

00001b96 <LCD0_clear>:
    1b96:	60 e0       	ldi	r22, 0x00	; 0
    1b98:	70 e0       	ldi	r23, 0x00	; 0
    1b9a:	81 e0       	ldi	r24, 0x01	; 1
    1b9c:	29 de       	rcall	.-942    	; 0x17f0 <LCD0_write>
    1b9e:	87 ee       	ldi	r24, 0xE7	; 231
    1ba0:	97 e1       	ldi	r25, 0x17	; 23
    1ba2:	01 97       	sbiw	r24, 0x01	; 1
    1ba4:	f1 f7       	brne	.-4      	; 0x1ba2 <LCD0_clear+0xc>
    1ba6:	00 c0       	rjmp	.+0      	; 0x1ba8 <LCD0_clear+0x12>
    1ba8:	00 00       	nop
    1baa:	08 95       	ret

00001bac <LCD0_inic>:
	return lcd0;
}
void LCD0_inic(void)
{
	//LCD INIC
	*lcd0_DDR=(1<<RS)|(1<<RW)|(1<<EN)|(0<<NC);
    1bac:	e0 91 43 02 	lds	r30, 0x0243	; 0x800243 <lcd0_DDR>
    1bb0:	f0 91 44 02 	lds	r31, 0x0244	; 0x800244 <lcd0_DDR+0x1>
    1bb4:	87 e0       	ldi	r24, 0x07	; 7
    1bb6:	80 83       	st	Z, r24
	*lcd0_PORT=(1<<NC);
    1bb8:	e0 91 46 02 	lds	r30, 0x0246	; 0x800246 <lcd0_PORT>
    1bbc:	f0 91 47 02 	lds	r31, 0x0247	; 0x800247 <lcd0_PORT+0x1>
    1bc0:	88 e0       	ldi	r24, 0x08	; 8
    1bc2:	80 83       	st	Z, r24
    1bc4:	2f ef       	ldi	r18, 0xFF	; 255
    1bc6:	83 ef       	ldi	r24, 0xF3	; 243
    1bc8:	91 e0       	ldi	r25, 0x01	; 1
    1bca:	21 50       	subi	r18, 0x01	; 1
    1bcc:	80 40       	sbci	r24, 0x00	; 0
    1bce:	90 40       	sbci	r25, 0x00	; 0
    1bd0:	e1 f7       	brne	.-8      	; 0x1bca <LCD0_inic+0x1e>
    1bd2:	00 c0       	rjmp	.+0      	; 0x1bd4 <LCD0_inic+0x28>
    1bd4:	00 00       	nop
	/***INICIALIZACAO LCD**datasheet*/
	_delay_ms(40);
	LCD0_write(0x33,INST); //function set
    1bd6:	60 e0       	ldi	r22, 0x00	; 0
    1bd8:	70 e0       	ldi	r23, 0x00	; 0
    1bda:	83 e3       	ldi	r24, 0x33	; 51
    1bdc:	09 de       	rcall	.-1006   	; 0x17f0 <LCD0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1bde:	20 ed       	ldi	r18, 0xD0	; 208
    1be0:	2a 95       	dec	r18
    1be2:	f1 f7       	brne	.-4      	; 0x1be0 <LCD0_inic+0x34>
	_delay_us(39);
	LCD0_write(0x33,INST); //function set
    1be4:	60 e0       	ldi	r22, 0x00	; 0
    1be6:	70 e0       	ldi	r23, 0x00	; 0
    1be8:	83 e3       	ldi	r24, 0x33	; 51
    1bea:	02 de       	rcall	.-1020   	; 0x17f0 <LCD0_write>
    1bec:	80 ed       	ldi	r24, 0xD0	; 208
    1bee:	8a 95       	dec	r24
    1bf0:	f1 f7       	brne	.-4      	; 0x1bee <LCD0_inic+0x42>
	_delay_us(39);
	LCD0_write(0x2B,INST); //function set
    1bf2:	60 e0       	ldi	r22, 0x00	; 0
    1bf4:	70 e0       	ldi	r23, 0x00	; 0
    1bf6:	8b e2       	ldi	r24, 0x2B	; 43
    1bf8:	fb dd       	rcall	.-1034   	; 0x17f0 <LCD0_write>
    1bfa:	95 ec       	ldi	r25, 0xC5	; 197
    1bfc:	9a 95       	dec	r25
    1bfe:	f1 f7       	brne	.-4      	; 0x1bfc <LCD0_inic+0x50>
    1c00:	00 00       	nop
	_delay_us(37);
	LCD0_write(0x0C,INST);// display on/off control
    1c02:	60 e0       	ldi	r22, 0x00	; 0
    1c04:	70 e0       	ldi	r23, 0x00	; 0
    1c06:	8c e0       	ldi	r24, 0x0C	; 12
    1c08:	f3 dd       	rcall	.-1050   	; 0x17f0 <LCD0_write>
    1c0a:	25 ec       	ldi	r18, 0xC5	; 197
    1c0c:	2a 95       	dec	r18
    1c0e:	f1 f7       	brne	.-4      	; 0x1c0c <LCD0_inic+0x60>
	_delay_us(37);
	LCD0_write(0x01,INST);// clear display
    1c10:	00 00       	nop
    1c12:	60 e0       	ldi	r22, 0x00	; 0
    1c14:	70 e0       	ldi	r23, 0x00	; 0
    1c16:	81 e0       	ldi	r24, 0x01	; 1
    1c18:	eb dd       	rcall	.-1066   	; 0x17f0 <LCD0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1c1a:	87 ee       	ldi	r24, 0xE7	; 231
    1c1c:	97 e1       	ldi	r25, 0x17	; 23
    1c1e:	01 97       	sbiw	r24, 0x01	; 1
    1c20:	f1 f7       	brne	.-4      	; 0x1c1e <LCD0_inic+0x72>
    1c22:	00 c0       	rjmp	.+0      	; 0x1c24 <LCD0_inic+0x78>
	_delay_ms(1.53);
	LCD0_write(0x06,INST);// entry mode set (crazy settings)
    1c24:	00 00       	nop
    1c26:	60 e0       	ldi	r22, 0x00	; 0
    1c28:	70 e0       	ldi	r23, 0x00	; 0
    1c2a:	86 e0       	ldi	r24, 0x06	; 6
    1c2c:	e1 dd       	rcall	.-1086   	; 0x17f0 <LCD0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1c2e:	95 ec       	ldi	r25, 0xC5	; 197
    1c30:	9a 95       	dec	r25
    1c32:	f1 f7       	brne	.-4      	; 0x1c30 <LCD0_inic+0x84>
    1c34:	00 00       	nop
    1c36:	08 95       	ret

00001c38 <LCD0enable>:
unsigned int LCD_ticks(unsigned int num);
/*
** procedure and function
*/
LCD0 LCD0enable(volatile uint8_t *ddr, volatile uint8_t *pin, volatile uint8_t *port)
{
    1c38:	1f 93       	push	r17
    1c3a:	cf 93       	push	r28
    1c3c:	df 93       	push	r29
    1c3e:	ec 01       	movw	r28, r24
	//LOCAL VARIABLES
	uint8_t tSREG;
	tSREG=SREG;
    1c40:	1f b7       	in	r17, 0x3f	; 63
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
    1c42:	8f b7       	in	r24, 0x3f	; 63
    1c44:	8f 77       	andi	r24, 0x7F	; 127
    1c46:	8f bf       	out	0x3f, r24	; 63
	//ALLOCAÇÂO MEMORIA PARA Estrutura
	LCD0 lcd0;
	//import parametros
	lcd0_DDR=ddr;
    1c48:	70 93 44 02 	sts	0x0244, r23	; 0x800244 <lcd0_DDR+0x1>
    1c4c:	60 93 43 02 	sts	0x0243, r22	; 0x800243 <lcd0_DDR>
	lcd0_PIN=pin;
    1c50:	50 93 3d 02 	sts	0x023D, r21	; 0x80023d <lcd0_PIN+0x1>
    1c54:	40 93 3c 02 	sts	0x023C, r20	; 0x80023c <lcd0_PIN>
	lcd0_PORT=port;
    1c58:	30 93 47 02 	sts	0x0247, r19	; 0x800247 <lcd0_PORT+0x1>
    1c5c:	20 93 46 02 	sts	0x0246, r18	; 0x800246 <lcd0_PORT>
	//inic variables
	*lcd0_DDR=0x00;
    1c60:	fb 01       	movw	r30, r22
    1c62:	10 82       	st	Z, r1
	*lcd0_PORT=0xFF;
    1c64:	e0 91 46 02 	lds	r30, 0x0246	; 0x800246 <lcd0_PORT>
    1c68:	f0 91 47 02 	lds	r31, 0x0247	; 0x800247 <lcd0_PORT+0x1>
    1c6c:	8f ef       	ldi	r24, 0xFF	; 255
    1c6e:	80 83       	st	Z, r24
	lcd0_detect=*lcd0_PIN & (1<<NC);
    1c70:	e0 91 3c 02 	lds	r30, 0x023C	; 0x80023c <lcd0_PIN>
    1c74:	f0 91 3d 02 	lds	r31, 0x023D	; 0x80023d <lcd0_PIN+0x1>
    1c78:	80 81       	ld	r24, Z
    1c7a:	88 70       	andi	r24, 0x08	; 8
    1c7c:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <lcd0_detect>
	lcd0.hspace=LCD0_hspace;
	lcd0.clear=LCD0_clear;
	lcd0.gotoxy=LCD0_gotoxy;
	lcd0.reboot=LCD0_reboot;
	//LCD INIC
	LCD0_inic();
    1c80:	95 df       	rcall	.-214    	; 0x1bac <LCD0_inic>
	SREG=tSREG;
    1c82:	1f bf       	out	0x3f, r17	; 63
	//
	return lcd0;
    1c84:	88 ef       	ldi	r24, 0xF8	; 248
    1c86:	9b e0       	ldi	r25, 0x0B	; 11
    1c88:	99 83       	std	Y+1, r25	; 0x01
    1c8a:	88 83       	st	Y, r24
    1c8c:	8c eb       	ldi	r24, 0xBC	; 188
    1c8e:	9c e0       	ldi	r25, 0x0C	; 12
    1c90:	9b 83       	std	Y+3, r25	; 0x03
    1c92:	8a 83       	std	Y+2, r24	; 0x02
    1c94:	87 e3       	ldi	r24, 0x37	; 55
    1c96:	9d e0       	ldi	r25, 0x0D	; 13
    1c98:	9d 83       	std	Y+5, r25	; 0x05
    1c9a:	8c 83       	std	Y+4, r24	; 0x04
    1c9c:	89 e4       	ldi	r24, 0x49	; 73
    1c9e:	9d e0       	ldi	r25, 0x0D	; 13
    1ca0:	9f 83       	std	Y+7, r25	; 0x07
    1ca2:	8e 83       	std	Y+6, r24	; 0x06
    1ca4:	8e e4       	ldi	r24, 0x4E	; 78
    1ca6:	9d e0       	ldi	r25, 0x0D	; 13
    1ca8:	99 87       	std	Y+9, r25	; 0x09
    1caa:	88 87       	std	Y+8, r24	; 0x08
    1cac:	87 e5       	ldi	r24, 0x57	; 87
    1cae:	9d e0       	ldi	r25, 0x0D	; 13
    1cb0:	9b 87       	std	Y+11, r25	; 0x0b
    1cb2:	8a 87       	std	Y+10, r24	; 0x0a
    1cb4:	88 e6       	ldi	r24, 0x68	; 104
    1cb6:	9d e0       	ldi	r25, 0x0D	; 13
    1cb8:	9d 87       	std	Y+13, r25	; 0x0d
    1cba:	8c 87       	std	Y+12, r24	; 0x0c
    1cbc:	87 e9       	ldi	r24, 0x97	; 151
    1cbe:	9d e0       	ldi	r25, 0x0D	; 13
    1cc0:	9f 87       	std	Y+15, r25	; 0x0f
    1cc2:	8e 87       	std	Y+14, r24	; 0x0e
    1cc4:	8b ec       	ldi	r24, 0xCB	; 203
    1cc6:	9d e0       	ldi	r25, 0x0D	; 13
    1cc8:	99 8b       	std	Y+17, r25	; 0x11
    1cca:	88 8b       	std	Y+16, r24	; 0x10
    1ccc:	84 ea       	ldi	r24, 0xA4	; 164
    1cce:	9d e0       	ldi	r25, 0x0D	; 13
    1cd0:	9b 8b       	std	Y+19, r25	; 0x13
    1cd2:	8a 8b       	std	Y+18, r24	; 0x12
    1cd4:	83 e7       	ldi	r24, 0x73	; 115
    1cd6:	9e e0       	ldi	r25, 0x0E	; 14
    1cd8:	9d 8b       	std	Y+21, r25	; 0x15
    1cda:	8c 8b       	std	Y+20, r24	; 0x14
}
    1cdc:	ce 01       	movw	r24, r28
    1cde:	df 91       	pop	r29
    1ce0:	cf 91       	pop	r28
    1ce2:	1f 91       	pop	r17
    1ce4:	08 95       	ret

00001ce6 <LCD0_reboot>:
	*lcd0_PORT|=(1<<EN);
	LCD_ticks(num);
	*lcd0_PORT&=~(1<<EN);
}
void LCD0_reboot(void)
{
    1ce6:	cf 93       	push	r28
	//low high detect pin NC
	uint8_t i;
	uint8_t tmp;
	tmp=*lcd0_PIN & (1<<NC);
    1ce8:	e0 91 3c 02 	lds	r30, 0x023C	; 0x80023c <lcd0_PIN>
    1cec:	f0 91 3d 02 	lds	r31, 0x023D	; 0x80023d <lcd0_PIN+0x1>
    1cf0:	c0 81       	ld	r28, Z
    1cf2:	c8 70       	andi	r28, 0x08	; 8
	i=tmp^lcd0_detect;
    1cf4:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <lcd0_detect>
    1cf8:	8c 27       	eor	r24, r28
	i&=tmp;
	if(i)
    1cfa:	8c 23       	and	r24, r28
    1cfc:	09 f0       	breq	.+2      	; 0x1d00 <LCD0_reboot+0x1a>
		LCD0_inic();
    1cfe:	56 df       	rcall	.-340    	; 0x1bac <LCD0_inic>
	lcd0_detect=tmp;
    1d00:	c0 93 45 02 	sts	0x0245, r28	; 0x800245 <lcd0_detect>
}
    1d04:	cf 91       	pop	r28
    1d06:	08 95       	ret

00001d08 <PCF8563RTC_SetTime>:
	i2c.Write(0x00);						// Write 0x00 to Control register to disable SQW-Out
	i2c.Stop();								// Stop I2C communication after initializing PCF8563
}
/***void PCF8563RTC_SetTime(uint8_t var_hour_u8, uint8_t var_min_u8, uint8_t var_sec_u8)***/
void PCF8563RTC_SetTime(uint8_t var_hour_u8, uint8_t var_min_u8, uint8_t var_sec_u8)
{
    1d08:	ff 92       	push	r15
    1d0a:	0f 93       	push	r16
    1d0c:	1f 93       	push	r17
    1d0e:	cf 93       	push	r28
    1d10:	df 93       	push	r29
    1d12:	18 2f       	mov	r17, r24
    1d14:	06 2f       	mov	r16, r22
    1d16:	f4 2e       	mov	r15, r20
	i2c.Start();                            // Start I2C communication
    1d18:	cb e6       	ldi	r28, 0x6B	; 107
    1d1a:	d2 e0       	ldi	r29, 0x02	; 2
    1d1c:	e8 81       	ld	r30, Y
    1d1e:	f9 81       	ldd	r31, Y+1	; 0x01
    1d20:	09 95       	icall
	i2c.Write(PCF8563WriteMode_U8);         // connect to PCF8563 by sending its ID on I2c Bus
    1d22:	ec 81       	ldd	r30, Y+4	; 0x04
    1d24:	fd 81       	ldd	r31, Y+5	; 0x05
    1d26:	82 ea       	ldi	r24, 0xA2	; 162
    1d28:	09 95       	icall
	i2c.Write(PCF8563SecondRegAddress_U8);  // Select the SEC RAM address
    1d2a:	ec 81       	ldd	r30, Y+4	; 0x04
    1d2c:	fd 81       	ldd	r31, Y+5	; 0x05
    1d2e:	82 e0       	ldi	r24, 0x02	; 2
    1d30:	09 95       	icall
	i2c.Write(var_sec_u8);			        // Write sec from RAM address 02H
    1d32:	ec 81       	ldd	r30, Y+4	; 0x04
    1d34:	fd 81       	ldd	r31, Y+5	; 0x05
    1d36:	8f 2d       	mov	r24, r15
    1d38:	09 95       	icall
	i2c.Write(var_min_u8);			        // Write min from RAM address 03H
    1d3a:	ec 81       	ldd	r30, Y+4	; 0x04
    1d3c:	fd 81       	ldd	r31, Y+5	; 0x05
    1d3e:	80 2f       	mov	r24, r16
    1d40:	09 95       	icall
	i2c.Write(var_hour_u8);			        // Write hour from RAM address 04H
    1d42:	ec 81       	ldd	r30, Y+4	; 0x04
    1d44:	fd 81       	ldd	r31, Y+5	; 0x05
    1d46:	81 2f       	mov	r24, r17
    1d48:	09 95       	icall
	i2c.Stop();           	                // Stop I2C communication after Setting the Time
    1d4a:	ea 81       	ldd	r30, Y+2	; 0x02
    1d4c:	fb 81       	ldd	r31, Y+3	; 0x03
    1d4e:	09 95       	icall
}
    1d50:	df 91       	pop	r29
    1d52:	cf 91       	pop	r28
    1d54:	1f 91       	pop	r17
    1d56:	0f 91       	pop	r16
    1d58:	ff 90       	pop	r15
    1d5a:	08 95       	ret

00001d5c <PCF8563RTC_SetHour>:
/***void PCF8563RTC_SetHour(uint8_t var_hour_u8)***/
void PCF8563RTC_SetHour(uint8_t var_hour_u8)
{
    1d5c:	1f 93       	push	r17
    1d5e:	cf 93       	push	r28
    1d60:	df 93       	push	r29
    1d62:	18 2f       	mov	r17, r24
	i2c.Start();                            // Start I2C communication
    1d64:	cb e6       	ldi	r28, 0x6B	; 107
    1d66:	d2 e0       	ldi	r29, 0x02	; 2
    1d68:	e8 81       	ld	r30, Y
    1d6a:	f9 81       	ldd	r31, Y+1	; 0x01
    1d6c:	09 95       	icall
	i2c.Write(PCF8563WriteMode_U8);         // connect to PCF8563 by sending its ID on I2c Bus
    1d6e:	ec 81       	ldd	r30, Y+4	; 0x04
    1d70:	fd 81       	ldd	r31, Y+5	; 0x05
    1d72:	82 ea       	ldi	r24, 0xA2	; 162
    1d74:	09 95       	icall
	i2c.Write(PCF8563HourRegAddress_U8);    // Select the SEC RAM address
    1d76:	ec 81       	ldd	r30, Y+4	; 0x04
    1d78:	fd 81       	ldd	r31, Y+5	; 0x05
    1d7a:	84 e0       	ldi	r24, 0x04	; 4
    1d7c:	09 95       	icall
	i2c.Write(var_hour_u8);			        // Write hour from RAM address 04H
    1d7e:	ec 81       	ldd	r30, Y+4	; 0x04
    1d80:	fd 81       	ldd	r31, Y+5	; 0x05
    1d82:	81 2f       	mov	r24, r17
    1d84:	09 95       	icall
	i2c.Stop();           	                // Stop I2C communication after Setting the Time
    1d86:	ea 81       	ldd	r30, Y+2	; 0x02
    1d88:	fb 81       	ldd	r31, Y+3	; 0x03
    1d8a:	09 95       	icall
}
    1d8c:	df 91       	pop	r29
    1d8e:	cf 91       	pop	r28
    1d90:	1f 91       	pop	r17
    1d92:	08 95       	ret

00001d94 <PCF8563RTC_SetMinute>:
/***void PCF8563RTC_SetMinute(uint8_t var_min_u8)***/
void PCF8563RTC_SetMinute(uint8_t var_min_u8)
{
    1d94:	1f 93       	push	r17
    1d96:	cf 93       	push	r28
    1d98:	df 93       	push	r29
    1d9a:	18 2f       	mov	r17, r24
	i2c.Start();                            // Start I2C communication
    1d9c:	cb e6       	ldi	r28, 0x6B	; 107
    1d9e:	d2 e0       	ldi	r29, 0x02	; 2
    1da0:	e8 81       	ld	r30, Y
    1da2:	f9 81       	ldd	r31, Y+1	; 0x01
    1da4:	09 95       	icall
	i2c.Write(PCF8563WriteMode_U8);         // connect to PCF8563 by sending its ID on I2c Bus
    1da6:	ec 81       	ldd	r30, Y+4	; 0x04
    1da8:	fd 81       	ldd	r31, Y+5	; 0x05
    1daa:	82 ea       	ldi	r24, 0xA2	; 162
    1dac:	09 95       	icall
	i2c.Write(PCF8563MinuteRegAddress_U8);  // Select the SEC RAM address
    1dae:	ec 81       	ldd	r30, Y+4	; 0x04
    1db0:	fd 81       	ldd	r31, Y+5	; 0x05
    1db2:	83 e0       	ldi	r24, 0x03	; 3
    1db4:	09 95       	icall
	i2c.Write(var_min_u8);			        // Write min from RAM address 03H
    1db6:	ec 81       	ldd	r30, Y+4	; 0x04
    1db8:	fd 81       	ldd	r31, Y+5	; 0x05
    1dba:	81 2f       	mov	r24, r17
    1dbc:	09 95       	icall
	i2c.Stop();           	                // Stop I2C communication after Setting the Time
    1dbe:	ea 81       	ldd	r30, Y+2	; 0x02
    1dc0:	fb 81       	ldd	r31, Y+3	; 0x03
    1dc2:	09 95       	icall
}
    1dc4:	df 91       	pop	r29
    1dc6:	cf 91       	pop	r28
    1dc8:	1f 91       	pop	r17
    1dca:	08 95       	ret

00001dcc <PCF8563RTC_SetSecond>:
/***void PCF8563RTC_SetSecond(uint8_t var_sec_u8)***/
void PCF8563RTC_SetSecond(uint8_t var_sec_u8)
{
    1dcc:	1f 93       	push	r17
    1dce:	cf 93       	push	r28
    1dd0:	df 93       	push	r29
    1dd2:	18 2f       	mov	r17, r24
	i2c.Start();                            // Start I2C communication
    1dd4:	cb e6       	ldi	r28, 0x6B	; 107
    1dd6:	d2 e0       	ldi	r29, 0x02	; 2
    1dd8:	e8 81       	ld	r30, Y
    1dda:	f9 81       	ldd	r31, Y+1	; 0x01
    1ddc:	09 95       	icall
	i2c.Write(PCF8563WriteMode_U8);         // connect to PCF8563 by sending its ID on I2c Bus
    1dde:	ec 81       	ldd	r30, Y+4	; 0x04
    1de0:	fd 81       	ldd	r31, Y+5	; 0x05
    1de2:	82 ea       	ldi	r24, 0xA2	; 162
    1de4:	09 95       	icall
	i2c.Write(PCF8563SecondRegAddress_U8);  // Select the SEC RAM address
    1de6:	ec 81       	ldd	r30, Y+4	; 0x04
    1de8:	fd 81       	ldd	r31, Y+5	; 0x05
    1dea:	82 e0       	ldi	r24, 0x02	; 2
    1dec:	09 95       	icall
	i2c.Write(var_sec_u8);			        // Write sec from RAM address 02H
    1dee:	ec 81       	ldd	r30, Y+4	; 0x04
    1df0:	fd 81       	ldd	r31, Y+5	; 0x05
    1df2:	81 2f       	mov	r24, r17
    1df4:	09 95       	icall
	i2c.Stop();           	                // Stop I2C communication after Setting the Time
    1df6:	ea 81       	ldd	r30, Y+2	; 0x02
    1df8:	fb 81       	ldd	r31, Y+3	; 0x03
    1dfa:	09 95       	icall
}
    1dfc:	df 91       	pop	r29
    1dfe:	cf 91       	pop	r28
    1e00:	1f 91       	pop	r17
    1e02:	08 95       	ret

00001e04 <PCF8563RTC_SetClkOut>:
/***void PCF8563RTC_SetClkOut(uint8_t onoff, uint8_t freq)***/
void PCF8563RTC_SetClkOut(uint8_t onoff, uint8_t freq)
{
    1e04:	1f 93       	push	r17
    1e06:	cf 93       	push	r28
    1e08:	df 93       	push	r29
	uint8_t word=0;
	if(onoff)
    1e0a:	88 23       	and	r24, r24
    1e0c:	21 f0       	breq	.+8      	; 0x1e16 <PCF8563RTC_SetClkOut+0x12>
		word=0x80 | (freq & 0x03);
    1e0e:	63 70       	andi	r22, 0x03	; 3
    1e10:	16 2f       	mov	r17, r22
    1e12:	10 68       	ori	r17, 0x80	; 128
    1e14:	01 c0       	rjmp	.+2      	; 0x1e18 <PCF8563RTC_SetClkOut+0x14>
	i2c.Stop();           	                // Stop I2C communication after Setting the Time
}
/***void PCF8563RTC_SetClkOut(uint8_t onoff, uint8_t freq)***/
void PCF8563RTC_SetClkOut(uint8_t onoff, uint8_t freq)
{
	uint8_t word=0;
    1e16:	10 e0       	ldi	r17, 0x00	; 0
	if(onoff)
		word=0x80 | (freq & 0x03);
	i2c.Start();                            // Start I2C communication
    1e18:	cb e6       	ldi	r28, 0x6B	; 107
    1e1a:	d2 e0       	ldi	r29, 0x02	; 2
    1e1c:	e8 81       	ld	r30, Y
    1e1e:	f9 81       	ldd	r31, Y+1	; 0x01
    1e20:	09 95       	icall
	i2c.Write(PCF8563WriteMode_U8);			// connect to PCF8563 by sending its ID on I2c Bus
    1e22:	ec 81       	ldd	r30, Y+4	; 0x04
    1e24:	fd 81       	ldd	r31, Y+5	; 0x05
    1e26:	82 ea       	ldi	r24, 0xA2	; 162
    1e28:	09 95       	icall
	i2c.Write(PCF8563CLKOUT_control_U8);	// Select the CLKOUT RAM address
    1e2a:	ec 81       	ldd	r30, Y+4	; 0x04
    1e2c:	fd 81       	ldd	r31, Y+5	; 0x05
    1e2e:	8d e0       	ldi	r24, 0x0D	; 13
    1e30:	09 95       	icall
	i2c.Write(word);						// Write Clock from RAM address 0DH						
    1e32:	ec 81       	ldd	r30, Y+4	; 0x04
    1e34:	fd 81       	ldd	r31, Y+5	; 0x05
    1e36:	81 2f       	mov	r24, r17
    1e38:	09 95       	icall
	i2c.Stop();           	                // Stop I2C communication after Setting the Time
    1e3a:	ea 81       	ldd	r30, Y+2	; 0x02
    1e3c:	fb 81       	ldd	r31, Y+3	; 0x03
    1e3e:	09 95       	icall
}
    1e40:	df 91       	pop	r29
    1e42:	cf 91       	pop	r28
    1e44:	1f 91       	pop	r17
    1e46:	08 95       	ret

00001e48 <PCF8563RTC_SetDate>:
/***void PCF8563RTC_SetDate(uint8_t var_day_u8, uint8_t var_weekday_u8, uint8_t var_month_u8, uint8_t var_year_u8)***/
void PCF8563RTC_SetDate(uint8_t var_day_u8, uint8_t var_weekday_u8, uint8_t var_month_u8, uint8_t var_year_u8)
{
    1e48:	ef 92       	push	r14
    1e4a:	ff 92       	push	r15
    1e4c:	0f 93       	push	r16
    1e4e:	1f 93       	push	r17
    1e50:	cf 93       	push	r28
    1e52:	df 93       	push	r29
    1e54:	e8 2e       	mov	r14, r24
    1e56:	f6 2e       	mov	r15, r22
    1e58:	04 2f       	mov	r16, r20
    1e5a:	12 2f       	mov	r17, r18
	i2c.Start();                          // Start I2C communication
    1e5c:	cb e6       	ldi	r28, 0x6B	; 107
    1e5e:	d2 e0       	ldi	r29, 0x02	; 2
    1e60:	e8 81       	ld	r30, Y
    1e62:	f9 81       	ldd	r31, Y+1	; 0x01
    1e64:	09 95       	icall
	i2c.Write(PCF8563WriteMode_U8);	      // connect to PCF8563 by sending its ID on I2c Bus
    1e66:	ec 81       	ldd	r30, Y+4	; 0x04
    1e68:	fd 81       	ldd	r31, Y+5	; 0x05
    1e6a:	82 ea       	ldi	r24, 0xA2	; 162
    1e6c:	09 95       	icall
	i2c.Write(PCF8563DayRegAddress_U8);  // Request DAY RAM address at 05H
    1e6e:	ec 81       	ldd	r30, Y+4	; 0x04
    1e70:	fd 81       	ldd	r31, Y+5	; 0x05
    1e72:	85 e0       	ldi	r24, 0x05	; 5
    1e74:	09 95       	icall
	i2c.Write(var_day_u8);			      // Write date on RAM address 05H
    1e76:	ec 81       	ldd	r30, Y+4	; 0x04
    1e78:	fd 81       	ldd	r31, Y+5	; 0x05
    1e7a:	8e 2d       	mov	r24, r14
    1e7c:	09 95       	icall
	i2c.Write(var_weekday_u8);            // Write date on RAM address 06H
    1e7e:	ec 81       	ldd	r30, Y+4	; 0x04
    1e80:	fd 81       	ldd	r31, Y+5	; 0x05
    1e82:	8f 2d       	mov	r24, r15
    1e84:	09 95       	icall
	i2c.Write(var_month_u8);			  // Write month on RAM address 07H
    1e86:	ec 81       	ldd	r30, Y+4	; 0x04
    1e88:	fd 81       	ldd	r31, Y+5	; 0x05
    1e8a:	80 2f       	mov	r24, r16
    1e8c:	09 95       	icall
	i2c.Write(var_year_u8);			      // Write year on RAM address 08h
    1e8e:	ec 81       	ldd	r30, Y+4	; 0x04
    1e90:	fd 81       	ldd	r31, Y+5	; 0x05
    1e92:	81 2f       	mov	r24, r17
    1e94:	09 95       	icall
	i2c.Stop();				              // Stop I2C communication after Setting the Date
    1e96:	ea 81       	ldd	r30, Y+2	; 0x02
    1e98:	fb 81       	ldd	r31, Y+3	; 0x03
    1e9a:	09 95       	icall
}
    1e9c:	df 91       	pop	r29
    1e9e:	cf 91       	pop	r28
    1ea0:	1f 91       	pop	r17
    1ea2:	0f 91       	pop	r16
    1ea4:	ff 90       	pop	r15
    1ea6:	ef 90       	pop	r14
    1ea8:	08 95       	ret

00001eaa <PCF8563RTC_SetYear>:
/***void PCF8563RTC_SetYear(uint8_t var_year_u8)***/
void PCF8563RTC_SetYear(uint8_t var_year_u8)
{
    1eaa:	1f 93       	push	r17
    1eac:	cf 93       	push	r28
    1eae:	df 93       	push	r29
    1eb0:	18 2f       	mov	r17, r24
	i2c.Start();                          // Start I2C communication
    1eb2:	cb e6       	ldi	r28, 0x6B	; 107
    1eb4:	d2 e0       	ldi	r29, 0x02	; 2
    1eb6:	e8 81       	ld	r30, Y
    1eb8:	f9 81       	ldd	r31, Y+1	; 0x01
    1eba:	09 95       	icall
	i2c.Write(PCF8563WriteMode_U8);	      // connect to PCF8563 by sending its ID on I2c Bus
    1ebc:	ec 81       	ldd	r30, Y+4	; 0x04
    1ebe:	fd 81       	ldd	r31, Y+5	; 0x05
    1ec0:	82 ea       	ldi	r24, 0xA2	; 162
    1ec2:	09 95       	icall
	i2c.Write(PCF8563YearRegAddress_U8);  // Request DAY RAM address at 08H
    1ec4:	ec 81       	ldd	r30, Y+4	; 0x04
    1ec6:	fd 81       	ldd	r31, Y+5	; 0x05
    1ec8:	88 e0       	ldi	r24, 0x08	; 8
    1eca:	09 95       	icall
	i2c.Write(var_year_u8);			      // Write year on RAM address 08h
    1ecc:	ec 81       	ldd	r30, Y+4	; 0x04
    1ece:	fd 81       	ldd	r31, Y+5	; 0x05
    1ed0:	81 2f       	mov	r24, r17
    1ed2:	09 95       	icall
	i2c.Stop();				              // Stop I2C communication after Setting the Date
    1ed4:	ea 81       	ldd	r30, Y+2	; 0x02
    1ed6:	fb 81       	ldd	r31, Y+3	; 0x03
    1ed8:	09 95       	icall
}
    1eda:	df 91       	pop	r29
    1edc:	cf 91       	pop	r28
    1ede:	1f 91       	pop	r17
    1ee0:	08 95       	ret

00001ee2 <PCF8563RTC_SetMonth>:
/***void PCF8563RTC_SetMonth(uint8_t var_month_u8)***/
void PCF8563RTC_SetMonth(uint8_t var_month_u8)
{
    1ee2:	1f 93       	push	r17
    1ee4:	cf 93       	push	r28
    1ee6:	df 93       	push	r29
    1ee8:	18 2f       	mov	r17, r24
	i2c.Start();                           // Start I2C communication
    1eea:	cb e6       	ldi	r28, 0x6B	; 107
    1eec:	d2 e0       	ldi	r29, 0x02	; 2
    1eee:	e8 81       	ld	r30, Y
    1ef0:	f9 81       	ldd	r31, Y+1	; 0x01
    1ef2:	09 95       	icall
	i2c.Write(PCF8563WriteMode_U8);	       // connect to PCF8563 by sending its ID on I2c Bus
    1ef4:	ec 81       	ldd	r30, Y+4	; 0x04
    1ef6:	fd 81       	ldd	r31, Y+5	; 0x05
    1ef8:	82 ea       	ldi	r24, 0xA2	; 162
    1efa:	09 95       	icall
	i2c.Write(PCF8563MonthRegAddress_U8);  // Request DAY RAM address at 07H
    1efc:	ec 81       	ldd	r30, Y+4	; 0x04
    1efe:	fd 81       	ldd	r31, Y+5	; 0x05
    1f00:	87 e0       	ldi	r24, 0x07	; 7
    1f02:	09 95       	icall
	i2c.Write(var_month_u8);			   // Write month on RAM address 07H
    1f04:	ec 81       	ldd	r30, Y+4	; 0x04
    1f06:	fd 81       	ldd	r31, Y+5	; 0x05
    1f08:	81 2f       	mov	r24, r17
    1f0a:	09 95       	icall
	i2c.Stop();				               // Stop I2C communication after Setting the Date
    1f0c:	ea 81       	ldd	r30, Y+2	; 0x02
    1f0e:	fb 81       	ldd	r31, Y+3	; 0x03
    1f10:	09 95       	icall
}
    1f12:	df 91       	pop	r29
    1f14:	cf 91       	pop	r28
    1f16:	1f 91       	pop	r17
    1f18:	08 95       	ret

00001f1a <PCF8563RTC_SetWeekday>:
/***void PCF8563RTC_SetWeekday(uint8_t var_weekday_u8)***/
void PCF8563RTC_SetWeekday(uint8_t var_weekday_u8)
{
    1f1a:	1f 93       	push	r17
    1f1c:	cf 93       	push	r28
    1f1e:	df 93       	push	r29
    1f20:	18 2f       	mov	r17, r24
	i2c.Start();                             // Start I2C communication
    1f22:	cb e6       	ldi	r28, 0x6B	; 107
    1f24:	d2 e0       	ldi	r29, 0x02	; 2
    1f26:	e8 81       	ld	r30, Y
    1f28:	f9 81       	ldd	r31, Y+1	; 0x01
    1f2a:	09 95       	icall
	i2c.Write(PCF8563WriteMode_U8);	         // connect to PCF8563 by sending its ID on I2c Bus
    1f2c:	ec 81       	ldd	r30, Y+4	; 0x04
    1f2e:	fd 81       	ldd	r31, Y+5	; 0x05
    1f30:	82 ea       	ldi	r24, 0xA2	; 162
    1f32:	09 95       	icall
	i2c.Write(PCF8563WeekdayRegAddress_U8);  // Request DAY RAM address at 06H
    1f34:	ec 81       	ldd	r30, Y+4	; 0x04
    1f36:	fd 81       	ldd	r31, Y+5	; 0x05
    1f38:	86 e0       	ldi	r24, 0x06	; 6
    1f3a:	09 95       	icall
	i2c.Write(var_weekday_u8);               // Write date on RAM address 06H
    1f3c:	ec 81       	ldd	r30, Y+4	; 0x04
    1f3e:	fd 81       	ldd	r31, Y+5	; 0x05
    1f40:	81 2f       	mov	r24, r17
    1f42:	09 95       	icall
	i2c.Stop();				                 // Stop I2C communication after Setting the Date
    1f44:	ea 81       	ldd	r30, Y+2	; 0x02
    1f46:	fb 81       	ldd	r31, Y+3	; 0x03
    1f48:	09 95       	icall
}
    1f4a:	df 91       	pop	r29
    1f4c:	cf 91       	pop	r28
    1f4e:	1f 91       	pop	r17
    1f50:	08 95       	ret

00001f52 <PCF8563RTC_SetDay>:
/***void PCF8563RTC_SetDay(uint8_t var_day_u8)***/
void PCF8563RTC_SetDay(uint8_t var_day_u8)
{
    1f52:	1f 93       	push	r17
    1f54:	cf 93       	push	r28
    1f56:	df 93       	push	r29
    1f58:	18 2f       	mov	r17, r24
	i2c.Start();                          // Start I2C communication
    1f5a:	cb e6       	ldi	r28, 0x6B	; 107
    1f5c:	d2 e0       	ldi	r29, 0x02	; 2
    1f5e:	e8 81       	ld	r30, Y
    1f60:	f9 81       	ldd	r31, Y+1	; 0x01
    1f62:	09 95       	icall
	i2c.Write(PCF8563WriteMode_U8);	      // connect to PCF8563 by sending its ID on I2c Bus
    1f64:	ec 81       	ldd	r30, Y+4	; 0x04
    1f66:	fd 81       	ldd	r31, Y+5	; 0x05
    1f68:	82 ea       	ldi	r24, 0xA2	; 162
    1f6a:	09 95       	icall
	i2c.Write(PCF8563DayRegAddress_U8);  // Request DAY RAM address at 05H
    1f6c:	ec 81       	ldd	r30, Y+4	; 0x04
    1f6e:	fd 81       	ldd	r31, Y+5	; 0x05
    1f70:	85 e0       	ldi	r24, 0x05	; 5
    1f72:	09 95       	icall
	i2c.Write(var_day_u8);			      // Write date on RAM address 05H
    1f74:	ec 81       	ldd	r30, Y+4	; 0x04
    1f76:	fd 81       	ldd	r31, Y+5	; 0x05
    1f78:	81 2f       	mov	r24, r17
    1f7a:	09 95       	icall
	i2c.Stop();				              // Stop I2C communication after Setting the Date
    1f7c:	ea 81       	ldd	r30, Y+2	; 0x02
    1f7e:	fb 81       	ldd	r31, Y+3	; 0x03
    1f80:	09 95       	icall
}
    1f82:	df 91       	pop	r29
    1f84:	cf 91       	pop	r28
    1f86:	1f 91       	pop	r17
    1f88:	08 95       	ret

00001f8a <PCF8563RTC_GetTime>:
/***struct time PCF8563RTC_GetTime(void)***/
struct time PCF8563RTC_GetTime(void)
{
    1f8a:	ff 92       	push	r15
    1f8c:	0f 93       	push	r16
    1f8e:	1f 93       	push	r17
    1f90:	cf 93       	push	r28
    1f92:	df 93       	push	r29
	struct time result;
	i2c.Start();							       // Start I2C communication
    1f94:	cb e6       	ldi	r28, 0x6B	; 107
    1f96:	d2 e0       	ldi	r29, 0x02	; 2
    1f98:	e8 81       	ld	r30, Y
    1f9a:	f9 81       	ldd	r31, Y+1	; 0x01
    1f9c:	09 95       	icall
	i2c.Write(PCF8563WriteMode_U8);			       // connect to PCF8563 by sending its ID on I2c Bus
    1f9e:	ec 81       	ldd	r30, Y+4	; 0x04
    1fa0:	fd 81       	ldd	r31, Y+5	; 0x05
    1fa2:	82 ea       	ldi	r24, 0xA2	; 162
    1fa4:	09 95       	icall
	i2c.Write(PCF8563SecondRegAddress_U8);	       // Request Sec RAM address at 00H
    1fa6:	ec 81       	ldd	r30, Y+4	; 0x04
    1fa8:	fd 81       	ldd	r31, Y+5	; 0x05
    1faa:	82 e0       	ldi	r24, 0x02	; 2
    1fac:	09 95       	icall
	i2c.Stop();								       // Stop I2C communication after selecting Sec Register
    1fae:	ea 81       	ldd	r30, Y+2	; 0x02
    1fb0:	fb 81       	ldd	r31, Y+3	; 0x03
    1fb2:	09 95       	icall
	i2c.Start();							       // Start I2C communication
    1fb4:	e8 81       	ld	r30, Y
    1fb6:	f9 81       	ldd	r31, Y+1	; 0x01
    1fb8:	09 95       	icall
	i2c.Write(PCF8563ReadMode_U8);			       // connect to PCF8563(Read mode) by sending its ID
    1fba:	ec 81       	ldd	r30, Y+4	; 0x04
    1fbc:	fd 81       	ldd	r31, Y+5	; 0x05
    1fbe:	83 ea       	ldi	r24, 0xA3	; 163
    1fc0:	09 95       	icall
	result.VL_seconds = i2c.Read(1) & ~0x80;	   // read second and return Positive ACK
    1fc2:	ee 81       	ldd	r30, Y+6	; 0x06
    1fc4:	ff 81       	ldd	r31, Y+7	; 0x07
    1fc6:	81 e0       	ldi	r24, 0x01	; 1
    1fc8:	09 95       	icall
    1fca:	f8 2e       	mov	r15, r24
	result.minutes = i2c.Read(1) & ~0x80;		   // read minute and return Positive ACK
    1fcc:	ee 81       	ldd	r30, Y+6	; 0x06
    1fce:	ff 81       	ldd	r31, Y+7	; 0x07
    1fd0:	81 e0       	ldi	r24, 0x01	; 1
    1fd2:	09 95       	icall
    1fd4:	18 2f       	mov	r17, r24
	result.hours = i2c.Read(0) & ~0xC0;			   // read hour and return Negative/No ACK
    1fd6:	ee 81       	ldd	r30, Y+6	; 0x06
    1fd8:	ff 81       	ldd	r31, Y+7	; 0x07
    1fda:	80 e0       	ldi	r24, 0x00	; 0
    1fdc:	09 95       	icall
    1fde:	08 2f       	mov	r16, r24
	i2c.Stop();								       // Stop I2C communication after reading the Time
    1fe0:	ea 81       	ldd	r30, Y+2	; 0x02
    1fe2:	fb 81       	ldd	r31, Y+3	; 0x03
    1fe4:	09 95       	icall
	return result;
    1fe6:	60 2f       	mov	r22, r16
    1fe8:	6f 73       	andi	r22, 0x3F	; 63
    1fea:	71 2f       	mov	r23, r17
    1fec:	7f 77       	andi	r23, 0x7F	; 127
}
    1fee:	8f 2d       	mov	r24, r15
    1ff0:	8f 77       	andi	r24, 0x7F	; 127
    1ff2:	df 91       	pop	r29
    1ff4:	cf 91       	pop	r28
    1ff6:	1f 91       	pop	r17
    1ff8:	0f 91       	pop	r16
    1ffa:	ff 90       	pop	r15
    1ffc:	08 95       	ret

00001ffe <PCF8563RTC_GetDate>:
/***struct date PCF8563RTC_GetDate(void)***/
struct date PCF8563RTC_GetDate(void)
{
    1ffe:	ef 92       	push	r14
    2000:	ff 92       	push	r15
    2002:	0f 93       	push	r16
    2004:	1f 93       	push	r17
    2006:	cf 93       	push	r28
    2008:	df 93       	push	r29
	struct date result;
	i2c.Start();							        // Start I2C communication
    200a:	cb e6       	ldi	r28, 0x6B	; 107
    200c:	d2 e0       	ldi	r29, 0x02	; 2
    200e:	e8 81       	ld	r30, Y
    2010:	f9 81       	ldd	r31, Y+1	; 0x01
    2012:	09 95       	icall
	i2c.Write(PCF8563WriteMode_U8);			        // connect to PCF8563 by sending its ID on I2c Bus
    2014:	ec 81       	ldd	r30, Y+4	; 0x04
    2016:	fd 81       	ldd	r31, Y+5	; 0x05
    2018:	82 ea       	ldi	r24, 0xA2	; 162
    201a:	09 95       	icall
	i2c.Write(PCF8563DayRegAddress_U8);	            // Request DAY RAM address at 04H
    201c:	ec 81       	ldd	r30, Y+4	; 0x04
    201e:	fd 81       	ldd	r31, Y+5	; 0x05
    2020:	85 e0       	ldi	r24, 0x05	; 5
    2022:	09 95       	icall
	i2c.Stop();								        // Stop I2C communication after selecting DAY Register
    2024:	ea 81       	ldd	r30, Y+2	; 0x02
    2026:	fb 81       	ldd	r31, Y+3	; 0x03
    2028:	09 95       	icall
	i2c.Start();							        // Start I2C communication
    202a:	e8 81       	ld	r30, Y
    202c:	f9 81       	ldd	r31, Y+1	; 0x01
    202e:	09 95       	icall
	i2c.Write(PCF8563ReadMode_U8);			        // connect to PCF8563 (Read mode) by sending its ID
    2030:	ec 81       	ldd	r30, Y+4	; 0x04
    2032:	fd 81       	ldd	r31, Y+5	; 0x05
    2034:	83 ea       	ldi	r24, 0xA3	; 163
    2036:	09 95       	icall
	result.days = i2c.Read(1) & ~0xC0;				// read Day and return Positive ACK
    2038:	ee 81       	ldd	r30, Y+6	; 0x06
    203a:	ff 81       	ldd	r31, Y+7	; 0x07
    203c:	81 e0       	ldi	r24, 0x01	; 1
    203e:	09 95       	icall
    2040:	08 2f       	mov	r16, r24
	result.weekdays = i2c.Read(1) & ~0xF8;			// read Month and return Positive ACK
    2042:	ee 81       	ldd	r30, Y+6	; 0x06
    2044:	ff 81       	ldd	r31, Y+7	; 0x07
    2046:	81 e0       	ldi	r24, 0x01	; 1
    2048:	09 95       	icall
    204a:	f8 2e       	mov	r15, r24
	result.century_months = i2c.Read(1) & ~0xE0;
    204c:	ee 81       	ldd	r30, Y+6	; 0x06
    204e:	ff 81       	ldd	r31, Y+7	; 0x07
    2050:	81 e0       	ldi	r24, 0x01	; 1
    2052:	09 95       	icall
    2054:	18 2f       	mov	r17, r24
	result.years = i2c.Read(0);				        // read Year and return Negative/No ACK
    2056:	ee 81       	ldd	r30, Y+6	; 0x06
    2058:	ff 81       	ldd	r31, Y+7	; 0x07
    205a:	80 e0       	ldi	r24, 0x00	; 0
    205c:	09 95       	icall
    205e:	e8 2e       	mov	r14, r24
	i2c.Stop();								        // Stop I2C communication after reading the Date
    2060:	ea 81       	ldd	r30, Y+2	; 0x02
    2062:	fb 81       	ldd	r31, Y+3	; 0x03
    2064:	09 95       	icall
	return result;
    2066:	71 2f       	mov	r23, r17
    2068:	7f 71       	andi	r23, 0x1F	; 31
}
    206a:	6e 2d       	mov	r22, r14
    206c:	8f 2d       	mov	r24, r15
    206e:	87 70       	andi	r24, 0x07	; 7
    2070:	90 2f       	mov	r25, r16
    2072:	9f 73       	andi	r25, 0x3F	; 63
    2074:	df 91       	pop	r29
    2076:	cf 91       	pop	r28
    2078:	1f 91       	pop	r17
    207a:	0f 91       	pop	r16
    207c:	ff 90       	pop	r15
    207e:	ef 90       	pop	r14
    2080:	08 95       	ret

00002082 <PCF8563RTC_bcd2dec>:
/***uint8_t PCF8563RTC_bcd2dec(uint8_t num)***/
uint8_t PCF8563RTC_bcd2dec(uint8_t num)
{
	return ((num/16 * 10) + (num % 16));
    2082:	98 2f       	mov	r25, r24
    2084:	92 95       	swap	r25
    2086:	9f 70       	andi	r25, 0x0F	; 15
    2088:	99 0f       	add	r25, r25
    208a:	29 2f       	mov	r18, r25
    208c:	22 0f       	add	r18, r18
    208e:	22 0f       	add	r18, r18
    2090:	92 0f       	add	r25, r18
    2092:	8f 70       	andi	r24, 0x0F	; 15
}
    2094:	89 0f       	add	r24, r25
    2096:	08 95       	ret

00002098 <PCF8563RTC_bintobcd>:
/***uint8_t PCF8563RTC_bintobcd(uint8_t bin)***/
uint8_t PCF8563RTC_bintobcd(uint8_t bin)
{
	return (((bin) / 10) << 4) + ((bin) % 10);
    2098:	9d ec       	ldi	r25, 0xCD	; 205
    209a:	89 9f       	mul	r24, r25
    209c:	91 2d       	mov	r25, r1
    209e:	11 24       	eor	r1, r1
    20a0:	96 95       	lsr	r25
    20a2:	96 95       	lsr	r25
    20a4:	96 95       	lsr	r25
    20a6:	39 2f       	mov	r19, r25
    20a8:	33 0f       	add	r19, r19
    20aa:	23 2f       	mov	r18, r19
    20ac:	22 0f       	add	r18, r18
    20ae:	22 0f       	add	r18, r18
    20b0:	23 0f       	add	r18, r19
    20b2:	82 1b       	sub	r24, r18
}
    20b4:	20 e1       	ldi	r18, 0x10	; 16
    20b6:	92 9f       	mul	r25, r18
    20b8:	80 0d       	add	r24, r0
    20ba:	11 24       	eor	r1, r1
    20bc:	08 95       	ret

000020be <PCF8563RTC_Init>:
	SREG=tSREG;
	return pcf;
}
/***void PCF8563RTC_Init(uint8_t prescaler)***/
void PCF8563RTC_Init(void)
{
    20be:	cf 93       	push	r28
    20c0:	df 93       	push	r29
	i2c.Start();							// Start I2C communication
    20c2:	cb e6       	ldi	r28, 0x6B	; 107
    20c4:	d2 e0       	ldi	r29, 0x02	; 2
    20c6:	e8 81       	ld	r30, Y
    20c8:	f9 81       	ldd	r31, Y+1	; 0x01
    20ca:	09 95       	icall
	i2c.Write(PCF8563WriteMode_U8);			// Connect to PCF8563 by sending its ID on I2c Bus
    20cc:	ec 81       	ldd	r30, Y+4	; 0x04
    20ce:	fd 81       	ldd	r31, Y+5	; 0x05
    20d0:	82 ea       	ldi	r24, 0xA2	; 162
    20d2:	09 95       	icall
	i2c.Write(PCF8563ControlRegAddress_U8);	// Select the PCF8563 ControlRegister to configure PCF8563
    20d4:	ec 81       	ldd	r30, Y+4	; 0x04
    20d6:	fd 81       	ldd	r31, Y+5	; 0x05
    20d8:	80 e0       	ldi	r24, 0x00	; 0
    20da:	09 95       	icall
	i2c.Write(0x00);						// Write 0x00 to Control register to disable SQW-Out
    20dc:	ec 81       	ldd	r30, Y+4	; 0x04
    20de:	fd 81       	ldd	r31, Y+5	; 0x05
    20e0:	80 e0       	ldi	r24, 0x00	; 0
    20e2:	09 95       	icall
	i2c.Stop();								// Stop I2C communication after initializing PCF8563
    20e4:	ea 81       	ldd	r30, Y+2	; 0x02
    20e6:	fb 81       	ldd	r31, Y+3	; 0x03
    20e8:	09 95       	icall
}
    20ea:	df 91       	pop	r29
    20ec:	cf 91       	pop	r28
    20ee:	08 95       	ret

000020f0 <PCF8563RTCenable>:
struct date PCF8563RTC_GetDate(void);
uint8_t PCF8563RTC_bcd2dec(uint8_t num);
uint8_t PCF8563RTC_bintobcd(uint8_t bin);
/***PCF8563RTC PCF8563RTCenable(uint8_t prescaler)***/
PCF8563RTC PCF8563RTCenable(uint8_t prescaler)
{
    20f0:	ff 92       	push	r15
    20f2:	0f 93       	push	r16
    20f4:	1f 93       	push	r17
    20f6:	cf 93       	push	r28
    20f8:	df 93       	push	r29
    20fa:	cd b7       	in	r28, 0x3d	; 61
    20fc:	de b7       	in	r29, 0x3e	; 62
    20fe:	2a 97       	sbiw	r28, 0x0a	; 10
    2100:	0f b6       	in	r0, 0x3f	; 63
    2102:	f8 94       	cli
    2104:	de bf       	out	0x3e, r29	; 62
    2106:	0f be       	out	0x3f, r0	; 63
    2108:	cd bf       	out	0x3d, r28	; 61
    210a:	8c 01       	movw	r16, r24
	uint8_t tSREG;
	tSREG=SREG;
    210c:	ff b6       	in	r15, 0x3f	; 63
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
    210e:	8f b7       	in	r24, 0x3f	; 63
    2110:	8f 77       	andi	r24, 0x7F	; 127
    2112:	8f bf       	out	0x3f, r24	; 63
	PCF8563RTC pcf;
	i2c = I2Cenable(prescaler);  			// Initialize the I2c module.
    2114:	ce 01       	movw	r24, r28
    2116:	01 96       	adiw	r24, 0x01	; 1
    2118:	38 d9       	rcall	.-3472   	; 0x138a <I2Cenable>
    211a:	8a e0       	ldi	r24, 0x0A	; 10
    211c:	fe 01       	movw	r30, r28
    211e:	31 96       	adiw	r30, 0x01	; 1
    2120:	ab e6       	ldi	r26, 0x6B	; 107
    2122:	b2 e0       	ldi	r27, 0x02	; 2
    2124:	01 90       	ld	r0, Z+
    2126:	0d 92       	st	X+, r0
    2128:	8a 95       	dec	r24
    212a:	e1 f7       	brne	.-8      	; 0x2124 <PCF8563RTCenable+0x34>
	PCF8563RTC_Init();                      //Initialize RTC
    212c:	c8 df       	rcall	.-112    	; 0x20be <PCF8563RTC_Init>
    212e:	ff be       	out	0x3f, r15	; 63
	pcf.GetTime=PCF8563RTC_GetTime;
	pcf.GetDate=PCF8563RTC_GetDate;
	pcf.bcd2dec=PCF8563RTC_bcd2dec;
	pcf.bintobcd=PCF8563RTC_bintobcd;
	/******/
	SREG=tSREG;
    2130:	84 e8       	ldi	r24, 0x84	; 132
	return pcf;
    2132:	9e e0       	ldi	r25, 0x0E	; 14
    2134:	f8 01       	movw	r30, r16
    2136:	91 83       	std	Z+1, r25	; 0x01
    2138:	80 83       	st	Z, r24
    213a:	8e ea       	ldi	r24, 0xAE	; 174
    213c:	9e e0       	ldi	r25, 0x0E	; 14
    213e:	93 83       	std	Z+3, r25	; 0x03
    2140:	82 83       	std	Z+2, r24	; 0x02
    2142:	8a ec       	ldi	r24, 0xCA	; 202
    2144:	9e e0       	ldi	r25, 0x0E	; 14
    2146:	95 83       	std	Z+5, r25	; 0x05
    2148:	84 83       	std	Z+4, r24	; 0x04
    214a:	86 ee       	ldi	r24, 0xE6	; 230
    214c:	9e e0       	ldi	r25, 0x0E	; 14
    214e:	97 83       	std	Z+7, r25	; 0x07
    2150:	86 83       	std	Z+6, r24	; 0x06
    2152:	82 e0       	ldi	r24, 0x02	; 2
    2154:	9f e0       	ldi	r25, 0x0F	; 15
    2156:	91 87       	std	Z+9, r25	; 0x09
    2158:	80 87       	std	Z+8, r24	; 0x08
    215a:	84 e2       	ldi	r24, 0x24	; 36
    215c:	9f e0       	ldi	r25, 0x0F	; 15
    215e:	93 87       	std	Z+11, r25	; 0x0b
    2160:	82 87       	std	Z+10, r24	; 0x0a
    2162:	89 ea       	ldi	r24, 0xA9	; 169
    2164:	9f e0       	ldi	r25, 0x0F	; 15
    2166:	95 87       	std	Z+13, r25	; 0x0d
    2168:	84 87       	std	Z+12, r24	; 0x0c
    216a:	8d e8       	ldi	r24, 0x8D	; 141
    216c:	9f e0       	ldi	r25, 0x0F	; 15
    216e:	97 87       	std	Z+15, r25	; 0x0f
    2170:	86 87       	std	Z+14, r24	; 0x0e
    2172:	81 e7       	ldi	r24, 0x71	; 113
    2174:	9f e0       	ldi	r25, 0x0F	; 15
    2176:	91 8b       	std	Z+17, r25	; 0x11
    2178:	80 8b       	std	Z+16, r24	; 0x10
    217a:	85 e5       	ldi	r24, 0x55	; 85
    217c:	9f e0       	ldi	r25, 0x0F	; 15
    217e:	93 8b       	std	Z+19, r25	; 0x13
    2180:	82 8b       	std	Z+18, r24	; 0x12
    2182:	85 ec       	ldi	r24, 0xC5	; 197
    2184:	9f e0       	ldi	r25, 0x0F	; 15
    2186:	95 8b       	std	Z+21, r25	; 0x15
    2188:	84 8b       	std	Z+20, r24	; 0x14
    218a:	8f ef       	ldi	r24, 0xFF	; 255
    218c:	9f e0       	ldi	r25, 0x0F	; 15
    218e:	97 8b       	std	Z+23, r25	; 0x17
    2190:	86 8b       	std	Z+22, r24	; 0x16
    2192:	81 e4       	ldi	r24, 0x41	; 65
    2194:	90 e1       	ldi	r25, 0x10	; 16
    2196:	91 8f       	std	Z+25, r25	; 0x19
    2198:	80 8f       	std	Z+24, r24	; 0x18
    219a:	8c e4       	ldi	r24, 0x4C	; 76
    219c:	90 e1       	ldi	r25, 0x10	; 16
    219e:	93 8f       	std	Z+27, r25	; 0x1b
    21a0:	82 8f       	std	Z+26, r24	; 0x1a
    21a2:	c8 01       	movw	r24, r16
}
    21a4:	2a 96       	adiw	r28, 0x0a	; 10
    21a6:	0f b6       	in	r0, 0x3f	; 63
    21a8:	f8 94       	cli
    21aa:	de bf       	out	0x3e, r29	; 62
    21ac:	0f be       	out	0x3f, r0	; 63
    21ae:	cd bf       	out	0x3d, r28	; 61
    21b0:	df 91       	pop	r29
    21b2:	cf 91       	pop	r28
    21b4:	1f 91       	pop	r17
    21b6:	0f 91       	pop	r16
    21b8:	ff 90       	pop	r15
    21ba:	08 95       	ret

000021bc <PORTINIT>:
** procedure and function
*/
void PORTINIT()
{
	//INPUT
	DDRF=0x00;
    21bc:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	PORTF=0x0F;
    21c0:	8f e0       	ldi	r24, 0x0F	; 15
    21c2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	DDRE=0X00;
    21c6:	12 b8       	out	0x02, r1	; 2
	PORTE=0XFF;
    21c8:	8f ef       	ldi	r24, 0xFF	; 255
    21ca:	83 b9       	out	0x03, r24	; 3
	DDRD=0X00;
    21cc:	11 ba       	out	0x11, r1	; 17
	PORTD=0XFF;
    21ce:	82 bb       	out	0x12, r24	; 18
	//OUTPUT
	DDRC=0XFF;
    21d0:	84 bb       	out	0x14, r24	; 20
	PORTC=0x00;
    21d2:	15 ba       	out	0x15, r1	; 21
	DDRB|=(1<<5) | (1<<6) | (1<<7);
    21d4:	87 b3       	in	r24, 0x17	; 23
    21d6:	80 6e       	ori	r24, 0xE0	; 224
    21d8:	87 bb       	out	0x17, r24	; 23
    21da:	08 95       	ret

000021dc <main>:
** Header
*/
void PORTINIT();
/****MAIN****/
int main(void)
{
    21dc:	cf 93       	push	r28
    21de:	df 93       	push	r29
    21e0:	cd b7       	in	r28, 0x3d	; 61
    21e2:	de b7       	in	r29, 0x3e	; 62
    21e4:	c5 5e       	subi	r28, 0xE5	; 229
    21e6:	d1 09       	sbc	r29, r1
    21e8:	0f b6       	in	r0, 0x3f	; 63
    21ea:	f8 94       	cli
    21ec:	de bf       	out	0x3e, r29	; 62
    21ee:	0f be       	out	0x3f, r0	; 63
    21f0:	cd bf       	out	0x3d, r28	; 61
	PORTINIT();
    21f2:	e4 df       	rcall	.-56     	; 0x21bc <PORTINIT>
	/***INICIALIZE OBJECTS***/
	FUNC function= FUNCenable();
    21f4:	ce 01       	movw	r24, r28
    21f6:	c8 96       	adiw	r24, 0x38	; 56
    21f8:	0e 94 7d 08 	call	0x10fa	; 0x10fa <FUNCenable>
    21fc:	6c 96       	adiw	r28, 0x1c	; 28
    21fe:	2e ad       	ldd	r18, Y+62	; 0x3e
    2200:	3f ad       	ldd	r19, Y+63	; 0x3f
    2202:	6c 97       	sbiw	r28, 0x1c	; 28
    2204:	c7 52       	subi	r28, 0x27	; 39
    2206:	df 4f       	sbci	r29, 0xFF	; 255
    2208:	39 83       	std	Y+1, r19	; 0x01
    220a:	28 83       	st	Y, r18
    220c:	c9 5d       	subi	r28, 0xD9	; 217
    220e:	d0 40       	sbci	r29, 0x00	; 0
    2210:	e8 96       	adiw	r28, 0x38	; 56
    2212:	8e ad       	ldd	r24, Y+62	; 0x3e
    2214:	9f ad       	ldd	r25, Y+63	; 0x3f
    2216:	e8 97       	sbiw	r28, 0x38	; 56
    2218:	c0 52       	subi	r28, 0x20	; 32
    221a:	df 4f       	sbci	r29, 0xFF	; 255
    221c:	99 83       	std	Y+1, r25	; 0x01
    221e:	88 83       	st	Y, r24
    2220:	c0 5e       	subi	r28, 0xE0	; 224
    2222:	d0 40       	sbci	r29, 0x00	; 0
	LCD0 lcd0 = LCD0enable(&DDRA,&PINA,&PORTA);
    2224:	2b e3       	ldi	r18, 0x3B	; 59
    2226:	30 e0       	ldi	r19, 0x00	; 0
    2228:	49 e3       	ldi	r20, 0x39	; 57
    222a:	50 e0       	ldi	r21, 0x00	; 0
    222c:	6a e3       	ldi	r22, 0x3A	; 58
    222e:	70 e0       	ldi	r23, 0x00	; 0
    2230:	ce 01       	movw	r24, r28
    2232:	8e 57       	subi	r24, 0x7E	; 126
    2234:	9f 4f       	sbci	r25, 0xFF	; 255
    2236:	00 dd       	rcall	.-1536   	; 0x1c38 <LCD0enable>
    2238:	c8 57       	subi	r28, 0x78	; 120
    223a:	df 4f       	sbci	r29, 0xFF	; 255
    223c:	48 80       	ld	r4, Y
    223e:	59 80       	ldd	r5, Y+1	; 0x01
    2240:	c8 58       	subi	r28, 0x88	; 136
    2242:	d0 40       	sbci	r29, 0x00	; 0
    2244:	c2 57       	subi	r28, 0x72	; 114
    2246:	df 4f       	sbci	r29, 0xFF	; 255
    2248:	28 80       	ld	r2, Y
    224a:	39 80       	ldd	r3, Y+1	; 0x01
    224c:	ce 58       	subi	r28, 0x8E	; 142
    224e:	d0 40       	sbci	r29, 0x00	; 0
    2250:	ce 56       	subi	r28, 0x6E	; 110
    2252:	df 4f       	sbci	r29, 0xFF	; 255
    2254:	e8 81       	ld	r30, Y
    2256:	f9 81       	ldd	r31, Y+1	; 0x01
    2258:	c2 59       	subi	r28, 0x92	; 146
    225a:	d0 40       	sbci	r29, 0x00	; 0
    225c:	c9 52       	subi	r28, 0x29	; 41
    225e:	df 4f       	sbci	r29, 0xFF	; 255
    2260:	f9 83       	std	Y+1, r31	; 0x01
    2262:	e8 83       	st	Y, r30
    2264:	c7 5d       	subi	r28, 0xD7	; 215
    2266:	d0 40       	sbci	r29, 0x00	; 0
    2268:	cc 56       	subi	r28, 0x6C	; 108
    226a:	df 4f       	sbci	r29, 0xFF	; 255
    226c:	68 80       	ld	r6, Y
    226e:	79 80       	ldd	r7, Y+1	; 0x01
    2270:	c4 59       	subi	r28, 0x94	; 148
    2272:	d0 40       	sbci	r29, 0x00	; 0
	KEYPAD keypad = KEYPADenable(&DDRE,&PINE,&PORTE);
    2274:	43 e2       	ldi	r20, 0x23	; 35
    2276:	50 e0       	ldi	r21, 0x00	; 0
    2278:	61 e2       	ldi	r22, 0x21	; 33
    227a:	70 e0       	ldi	r23, 0x00	; 0
    227c:	82 e2       	ldi	r24, 0x22	; 34
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	59 da       	rcall	.-2894   	; 0x1734 <KEYPADenable>
    2282:	c6 56       	subi	r28, 0x66	; 102
    2284:	df 4f       	sbci	r29, 0xFF	; 255
    2286:	48 83       	st	Y, r20
    2288:	ca 59       	subi	r28, 0x9A	; 154
    228a:	d0 40       	sbci	r29, 0x00	; 0
    228c:	c5 56       	subi	r28, 0x65	; 101
    228e:	df 4f       	sbci	r29, 0xFF	; 255
    2290:	58 83       	st	Y, r21
    2292:	cb 59       	subi	r28, 0x9B	; 155
    2294:	d0 40       	sbci	r29, 0x00	; 0
    2296:	c4 56       	subi	r28, 0x64	; 100
    2298:	df 4f       	sbci	r29, 0xFF	; 255
    229a:	68 83       	st	Y, r22
    229c:	cc 59       	subi	r28, 0x9C	; 156
    229e:	d0 40       	sbci	r29, 0x00	; 0
    22a0:	c3 56       	subi	r28, 0x63	; 99
    22a2:	df 4f       	sbci	r29, 0xFF	; 255
    22a4:	78 83       	st	Y, r23
    22a6:	cd 59       	subi	r28, 0x9D	; 157
    22a8:	d0 40       	sbci	r29, 0x00	; 0
    22aa:	c2 56       	subi	r28, 0x62	; 98
    22ac:	df 4f       	sbci	r29, 0xFF	; 255
    22ae:	88 83       	st	Y, r24
    22b0:	ce 59       	subi	r28, 0x9E	; 158
    22b2:	d0 40       	sbci	r29, 0x00	; 0
    22b4:	c1 56       	subi	r28, 0x61	; 97
    22b6:	df 4f       	sbci	r29, 0xFF	; 255
    22b8:	98 83       	st	Y, r25
    22ba:	cf 59       	subi	r28, 0x9F	; 159
    22bc:	d0 40       	sbci	r29, 0x00	; 0
    22be:	c4 56       	subi	r28, 0x64	; 100
    22c0:	df 4f       	sbci	r29, 0xFF	; 255
    22c2:	88 80       	ld	r8, Y
    22c4:	99 80       	ldd	r9, Y+1	; 0x01
    22c6:	cc 59       	subi	r28, 0x9C	; 156
    22c8:	d0 40       	sbci	r29, 0x00	; 0
    22ca:	c2 56       	subi	r28, 0x62	; 98
    22cc:	df 4f       	sbci	r29, 0xFF	; 255
    22ce:	28 81       	ld	r18, Y
    22d0:	39 81       	ldd	r19, Y+1	; 0x01
    22d2:	ce 59       	subi	r28, 0x9E	; 158
    22d4:	d0 40       	sbci	r29, 0x00	; 0
    22d6:	cb 52       	subi	r28, 0x2B	; 43
    22d8:	df 4f       	sbci	r29, 0xFF	; 255
    22da:	39 83       	std	Y+1, r19	; 0x01
    22dc:	28 83       	st	Y, r18
    22de:	c5 5d       	subi	r28, 0xD5	; 213
    22e0:	d0 40       	sbci	r29, 0x00	; 0
	ANALOG analog = ANALOGenable(1, 128, 1, 0); // channel 0 for position
    22e2:	1f 92       	push	r1
    22e4:	1f 92       	push	r1
    22e6:	1f 92       	push	r1
    22e8:	81 e0       	ldi	r24, 0x01	; 1
    22ea:	8f 93       	push	r24
    22ec:	90 e8       	ldi	r25, 0x80	; 128
    22ee:	9f 93       	push	r25
    22f0:	8f 93       	push	r24
    22f2:	0e 94 8b 00 	call	0x116	; 0x116 <ANALOGenable>
    22f6:	6b 01       	movw	r12, r22
    22f8:	7c 01       	movw	r14, r24
	TIMER_COUNTER1 timer1 = TIMER_COUNTER1enable(9,0); // PWM positioning
    22fa:	40 e0       	ldi	r20, 0x00	; 0
    22fc:	69 e0       	ldi	r22, 0x09	; 9
    22fe:	ce 01       	movw	r24, r28
    2300:	80 56       	subi	r24, 0x60	; 96
    2302:	9f 4f       	sbci	r25, 0xFF	; 255
    2304:	0e 94 3f 02 	call	0x47e	; 0x47e <TIMER_COUNTER1enable>
    2308:	c8 55       	subi	r28, 0x58	; 88
    230a:	df 4f       	sbci	r29, 0xFF	; 255
    230c:	88 81       	ld	r24, Y
    230e:	99 81       	ldd	r25, Y+1	; 0x01
    2310:	c8 5a       	subi	r28, 0xA8	; 168
    2312:	d0 40       	sbci	r29, 0x00	; 0
    2314:	ce 51       	subi	r28, 0x1E	; 30
    2316:	df 4f       	sbci	r29, 0xFF	; 255
    2318:	99 83       	std	Y+1, r25	; 0x01
    231a:	88 83       	st	Y, r24
    231c:	c2 5e       	subi	r28, 0xE2	; 226
    231e:	d0 40       	sbci	r29, 0x00	; 0
	//TIMER_COUNTER3 timer3 = TIMER_COUNTER3enable(12,12);
	PCF8563RTC rtc = PCF8563RTCenable(16);
    2320:	60 e1       	ldi	r22, 0x10	; 16
    2322:	ce 01       	movw	r24, r28
    2324:	80 55       	subi	r24, 0x50	; 80
    2326:	9f 4f       	sbci	r25, 0xFF	; 255
    2328:	e3 de       	rcall	.-570    	; 0x20f0 <PCF8563RTCenable>
    232a:	c8 53       	subi	r28, 0x38	; 56
    232c:	df 4f       	sbci	r29, 0xFF	; 255
    232e:	e8 81       	ld	r30, Y
    2330:	f9 81       	ldd	r31, Y+1	; 0x01
    2332:	c8 5c       	subi	r28, 0xC8	; 200
    2334:	d0 40       	sbci	r29, 0x00	; 0
    2336:	c5 52       	subi	r28, 0x25	; 37
    2338:	df 4f       	sbci	r29, 0xFF	; 255
    233a:	f9 83       	std	Y+1, r31	; 0x01
    233c:	e8 83       	st	Y, r30
    233e:	cb 5d       	subi	r28, 0xDB	; 219
    2340:	d0 40       	sbci	r29, 0x00	; 0
	/******/
	char Menu='1';
	int adcvalue;
	char str[4]="0";
    2342:	80 e3       	ldi	r24, 0x30	; 48
    2344:	90 e0       	ldi	r25, 0x00	; 0
    2346:	c4 53       	subi	r28, 0x34	; 52
    2348:	df 4f       	sbci	r29, 0xFF	; 255
    234a:	99 83       	std	Y+1, r25	; 0x01
    234c:	88 83       	st	Y, r24
    234e:	cc 5c       	subi	r28, 0xCC	; 204
    2350:	d0 40       	sbci	r29, 0x00	; 0
    2352:	c2 53       	subi	r28, 0x32	; 50
    2354:	df 4f       	sbci	r29, 0xFF	; 255
    2356:	19 82       	std	Y+1, r1	; 0x01
    2358:	18 82       	st	Y, r1
    235a:	ce 5c       	subi	r28, 0xCE	; 206
    235c:	d0 40       	sbci	r29, 0x00	; 0
	int mvalue=90;
	char mstr[4]="90";
    235e:	89 e3       	ldi	r24, 0x39	; 57
    2360:	90 e3       	ldi	r25, 0x30	; 48
    2362:	c0 53       	subi	r28, 0x30	; 48
    2364:	df 4f       	sbci	r29, 0xFF	; 255
    2366:	99 83       	std	Y+1, r25	; 0x01
    2368:	88 83       	st	Y, r24
    236a:	c0 5d       	subi	r28, 0xD0	; 208
    236c:	d0 40       	sbci	r29, 0x00	; 0
    236e:	ce 52       	subi	r28, 0x2E	; 46
    2370:	df 4f       	sbci	r29, 0xFF	; 255
    2372:	19 82       	std	Y+1, r1	; 0x01
    2374:	18 82       	st	Y, r1
    2376:	c2 5d       	subi	r28, 0xD2	; 210
    2378:	d0 40       	sbci	r29, 0x00	; 0
	char cal='0';
	/***Parameters timers***/
	timer1.compoutmodeB(2);
    237a:	ce 55       	subi	r28, 0x5E	; 94
    237c:	df 4f       	sbci	r29, 0xFF	; 255
    237e:	e8 81       	ld	r30, Y
    2380:	f9 81       	ldd	r31, Y+1	; 0x01
    2382:	c2 5a       	subi	r28, 0xA2	; 162
    2384:	d0 40       	sbci	r29, 0x00	; 0
    2386:	82 e0       	ldi	r24, 0x02	; 2
    2388:	09 95       	icall
	timer1.compareA(20000);
    238a:	ca 55       	subi	r28, 0x5A	; 90
    238c:	df 4f       	sbci	r29, 0xFF	; 255
    238e:	e8 81       	ld	r30, Y
    2390:	f9 81       	ldd	r31, Y+1	; 0x01
    2392:	c6 5a       	subi	r28, 0xA6	; 166
    2394:	d0 40       	sbci	r29, 0x00	; 0
    2396:	80 e2       	ldi	r24, 0x20	; 32
    2398:	9e e4       	ldi	r25, 0x4E	; 78
    239a:	09 95       	icall
	timer1.start(8);
    239c:	c4 55       	subi	r28, 0x54	; 84
    239e:	df 4f       	sbci	r29, 0xFF	; 255
    23a0:	e8 81       	ld	r30, Y
    23a2:	f9 81       	ldd	r31, Y+1	; 0x01
    23a4:	cc 5a       	subi	r28, 0xAC	; 172
    23a6:	d0 40       	sbci	r29, 0x00	; 0
    23a8:	88 e0       	ldi	r24, 0x08	; 8
    23aa:	90 e0       	ldi	r25, 0x00	; 0
    23ac:	09 95       	icall
	rtc.SetClkOut(1, 2);
    23ae:	c8 54       	subi	r28, 0x48	; 72
    23b0:	df 4f       	sbci	r29, 0xFF	; 255
    23b2:	e8 81       	ld	r30, Y
    23b4:	f9 81       	ldd	r31, Y+1	; 0x01
    23b6:	c8 5b       	subi	r28, 0xB8	; 184
    23b8:	d0 40       	sbci	r29, 0x00	; 0
    23ba:	62 e0       	ldi	r22, 0x02	; 2
    23bc:	81 e0       	ldi	r24, 0x01	; 1
    23be:	09 95       	icall
    23c0:	0f 90       	pop	r0
    23c2:	0f 90       	pop	r0
    23c4:	0f 90       	pop	r0
    23c6:	0f 90       	pop	r0
    23c8:	0f 90       	pop	r0
    23ca:	0f 90       	pop	r0
	char Menu='1';
	int adcvalue;
	char str[4]="0";
	int mvalue=90;
	char mstr[4]="90";
	char cal='0';
    23cc:	f0 e3       	ldi	r31, 0x30	; 48
    23ce:	c1 52       	subi	r28, 0x21	; 33
    23d0:	df 4f       	sbci	r29, 0xFF	; 255
    23d2:	f8 83       	st	Y, r31
    23d4:	cf 5d       	subi	r28, 0xDF	; 223
    23d6:	d0 40       	sbci	r29, 0x00	; 0
	ANALOG analog = ANALOGenable(1, 128, 1, 0); // channel 0 for position
	TIMER_COUNTER1 timer1 = TIMER_COUNTER1enable(9,0); // PWM positioning
	//TIMER_COUNTER3 timer3 = TIMER_COUNTER3enable(12,12);
	PCF8563RTC rtc = PCF8563RTCenable(16);
	/******/
	char Menu='1';
    23d8:	21 e3       	ldi	r18, 0x31	; 49
    23da:	cc 52       	subi	r28, 0x2C	; 44
    23dc:	df 4f       	sbci	r29, 0xFF	; 255
    23de:	28 83       	st	Y, r18
    23e0:	c4 5d       	subi	r28, 0xD4	; 212
    23e2:	d0 40       	sbci	r29, 0x00	; 0
				}else{
					/***RTC***/
					tm=rtc.GetTime();
					dt=rtc.GetDate();
					/***Reading analog***/
					adcvalue=analog.read(0);
    23e4:	cc 51       	subi	r28, 0x1C	; 28
    23e6:	df 4f       	sbci	r29, 0xFF	; 255
    23e8:	f9 82       	std	Y+1, r15	; 0x01
    23ea:	e8 82       	st	Y, r14
    23ec:	c4 5e       	subi	r28, 0xE4	; 228
    23ee:	d0 40       	sbci	r29, 0x00	; 0
    23f0:	cc 52       	subi	r28, 0x2C	; 44
    23f2:	df 4f       	sbci	r29, 0xFF	; 255
    23f4:	18 81       	ld	r17, Y
    23f6:	c4 5d       	subi	r28, 0xD4	; 212
    23f8:	d0 40       	sbci	r29, 0x00	; 0
	rtc.SetClkOut(1, 2);
	/**********/
	//TODO:: Please write your application code
	while(TRUE){
		//PREAMBLE
		lcd0.reboot();
    23fa:	ca 56       	subi	r28, 0x6A	; 106
    23fc:	df 4f       	sbci	r29, 0xFF	; 255
    23fe:	e8 81       	ld	r30, Y
    2400:	f9 81       	ldd	r31, Y+1	; 0x01
    2402:	c6 59       	subi	r28, 0x96	; 150
    2404:	d0 40       	sbci	r29, 0x00	; 0
    2406:	09 95       	icall
		keypad.read();
    2408:	c6 56       	subi	r28, 0x66	; 102
    240a:	df 4f       	sbci	r29, 0xFF	; 255
    240c:	e8 81       	ld	r30, Y
    240e:	f9 81       	ldd	r31, Y+1	; 0x01
    2410:	ca 59       	subi	r28, 0x9A	; 154
    2412:	d0 40       	sbci	r29, 0x00	; 0
    2414:	09 95       	icall
		/***Entry Start***/
		lcd0.gotoxy(3,0);
    2416:	60 e0       	ldi	r22, 0x00	; 0
    2418:	70 e0       	ldi	r23, 0x00	; 0
    241a:	83 e0       	ldi	r24, 0x03	; 3
    241c:	90 e0       	ldi	r25, 0x00	; 0
    241e:	f3 01       	movw	r30, r6
    2420:	09 95       	icall
		lcd0.putch(keypad.get().character);
    2422:	f4 01       	movw	r30, r8
    2424:	09 95       	icall
    2426:	82 2f       	mov	r24, r18
    2428:	f2 01       	movw	r30, r4
    242a:	09 95       	icall
		lcd0.gotoxy(3,10);
    242c:	6a e0       	ldi	r22, 0x0A	; 10
    242e:	70 e0       	ldi	r23, 0x00	; 0
    2430:	83 e0       	ldi	r24, 0x03	; 3
    2432:	90 e0       	ldi	r25, 0x00	; 0
    2434:	f3 01       	movw	r30, r6
    2436:	09 95       	icall
		lcd0.string_size(keypad.get().printstring,10);
    2438:	f4 01       	movw	r30, r8
    243a:	09 95       	icall
    243c:	3f a7       	std	Y+47, r19	; 0x2f
    243e:	48 ab       	std	Y+48, r20	; 0x30
    2440:	6a e0       	ldi	r22, 0x0A	; 10
    2442:	8f a5       	ldd	r24, Y+47	; 0x2f
    2444:	98 a9       	ldd	r25, Y+48	; 0x30
    2446:	f1 01       	movw	r30, r2
    2448:	09 95       	icall
		/***ENTRY END***/
		switch(Menu){
    244a:	12 33       	cpi	r17, 0x32	; 50
    244c:	09 f4       	brne	.+2      	; 0x2450 <main+0x274>
    244e:	5d c1       	rjmp	.+698    	; 0x270a <main+0x52e>
    2450:	13 33       	cpi	r17, 0x33	; 51
    2452:	09 f4       	brne	.+2      	; 0x2456 <main+0x27a>
    2454:	0b c2       	rjmp	.+1046   	; 0x286c <main+0x690>
    2456:	11 33       	cpi	r17, 0x31	; 49
    2458:	81 f6       	brne	.-96     	; 0x23fa <main+0x21e>
			case '1': //Main Program Menu
				if(!strcmp(keypad.get().string,"A")){
    245a:	f4 01       	movw	r30, r8
    245c:	09 95       	icall
    245e:	5c a7       	std	Y+44, r21	; 0x2c
    2460:	6d a7       	std	Y+45, r22	; 0x2d
    2462:	60 e1       	ldi	r22, 0x10	; 16
    2464:	71 e0       	ldi	r23, 0x01	; 1
    2466:	8c a5       	ldd	r24, Y+44	; 0x2c
    2468:	9d a5       	ldd	r25, Y+45	; 0x2d
    246a:	0a d3       	rcall	.+1556   	; 0x2a80 <strcmp>
    246c:	89 2b       	or	r24, r25
    246e:	d1 f4       	brne	.+52     	; 0x24a4 <main+0x2c8>
					Menu='2';
					//cleanup
					strcpy(mstr,"");
    2470:	c0 53       	subi	r28, 0x30	; 48
    2472:	df 4f       	sbci	r29, 0xFF	; 255
    2474:	18 82       	st	Y, r1
    2476:	c0 5d       	subi	r28, 0xD0	; 208
    2478:	d0 40       	sbci	r29, 0x00	; 0
					lcd0.clear();
    247a:	c9 52       	subi	r28, 0x29	; 41
    247c:	df 4f       	sbci	r29, 0xFF	; 255
    247e:	e8 81       	ld	r30, Y
    2480:	f9 81       	ldd	r31, Y+1	; 0x01
    2482:	c7 5d       	subi	r28, 0xD7	; 215
    2484:	d0 40       	sbci	r29, 0x00	; 0
    2486:	09 95       	icall
					keypad.flush();
    2488:	cb 52       	subi	r28, 0x2B	; 43
    248a:	df 4f       	sbci	r29, 0xFF	; 255
    248c:	e8 81       	ld	r30, Y
    248e:	f9 81       	ldd	r31, Y+1	; 0x01
    2490:	c5 5d       	subi	r28, 0xD5	; 213
    2492:	d0 40       	sbci	r29, 0x00	; 0
    2494:	09 95       	icall
		lcd0.string_size(keypad.get().printstring,10);
		/***ENTRY END***/
		switch(Menu){
			case '1': //Main Program Menu
				if(!strcmp(keypad.get().string,"A")){
					Menu='2';
    2496:	f2 e3       	ldi	r31, 0x32	; 50
    2498:	cc 52       	subi	r28, 0x2C	; 44
    249a:	df 4f       	sbci	r29, 0xFF	; 255
    249c:	f8 83       	st	Y, r31
    249e:	c4 5d       	subi	r28, 0xD4	; 212
    24a0:	d0 40       	sbci	r29, 0x00	; 0
    24a2:	a6 cf       	rjmp	.-180    	; 0x23f0 <main+0x214>
					//cleanup
					strcpy(mstr,"");
					lcd0.clear();
					keypad.flush();
				}else if(!strcmp(keypad.get().string,"B")){
    24a4:	f4 01       	movw	r30, r8
    24a6:	09 95       	icall
    24a8:	5f a3       	std	Y+39, r21	; 0x27
    24aa:	68 a7       	std	Y+40, r22	; 0x28
    24ac:	62 e1       	ldi	r22, 0x12	; 18
    24ae:	71 e0       	ldi	r23, 0x01	; 1
    24b0:	8f a1       	ldd	r24, Y+39	; 0x27
    24b2:	98 a5       	ldd	r25, Y+40	; 0x28
    24b4:	e5 d2       	rcall	.+1482   	; 0x2a80 <strcmp>
    24b6:	89 2b       	or	r24, r25
    24b8:	d1 f4       	brne	.+52     	; 0x24ee <main+0x312>
					Menu='3';
					//cleanup
					strcpy(mstr,"");
    24ba:	c0 53       	subi	r28, 0x30	; 48
    24bc:	df 4f       	sbci	r29, 0xFF	; 255
    24be:	18 82       	st	Y, r1
    24c0:	c0 5d       	subi	r28, 0xD0	; 208
    24c2:	d0 40       	sbci	r29, 0x00	; 0
					lcd0.clear();
    24c4:	c9 52       	subi	r28, 0x29	; 41
    24c6:	df 4f       	sbci	r29, 0xFF	; 255
    24c8:	e8 81       	ld	r30, Y
    24ca:	f9 81       	ldd	r31, Y+1	; 0x01
    24cc:	c7 5d       	subi	r28, 0xD7	; 215
    24ce:	d0 40       	sbci	r29, 0x00	; 0
    24d0:	09 95       	icall
					keypad.flush();
    24d2:	cb 52       	subi	r28, 0x2B	; 43
    24d4:	df 4f       	sbci	r29, 0xFF	; 255
    24d6:	e8 81       	ld	r30, Y
    24d8:	f9 81       	ldd	r31, Y+1	; 0x01
    24da:	c5 5d       	subi	r28, 0xD5	; 213
    24dc:	d0 40       	sbci	r29, 0x00	; 0
    24de:	09 95       	icall
					//cleanup
					strcpy(mstr,"");
					lcd0.clear();
					keypad.flush();
				}else if(!strcmp(keypad.get().string,"B")){
					Menu='3';
    24e0:	f3 e3       	ldi	r31, 0x33	; 51
    24e2:	cc 52       	subi	r28, 0x2C	; 44
    24e4:	df 4f       	sbci	r29, 0xFF	; 255
    24e6:	f8 83       	st	Y, r31
    24e8:	c4 5d       	subi	r28, 0xD4	; 212
    24ea:	d0 40       	sbci	r29, 0x00	; 0
    24ec:	81 cf       	rjmp	.-254    	; 0x23f0 <main+0x214>
					strcpy(mstr,"");
					lcd0.clear();
					keypad.flush();
				}else{
					/***RTC***/
					tm=rtc.GetTime();
    24ee:	cc 53       	subi	r28, 0x3C	; 60
    24f0:	df 4f       	sbci	r29, 0xFF	; 255
    24f2:	e8 81       	ld	r30, Y
    24f4:	f9 81       	ldd	r31, Y+1	; 0x01
    24f6:	c4 5c       	subi	r28, 0xC4	; 196
    24f8:	d0 40       	sbci	r29, 0x00	; 0
    24fa:	09 95       	icall
    24fc:	60 93 75 02 	sts	0x0275, r22	; 0x800275 <tm>
    2500:	70 93 76 02 	sts	0x0276, r23	; 0x800276 <tm+0x1>
    2504:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <tm+0x2>
					dt=rtc.GetDate();
    2508:	ca 53       	subi	r28, 0x3A	; 58
    250a:	df 4f       	sbci	r29, 0xFF	; 255
    250c:	e8 81       	ld	r30, Y
    250e:	f9 81       	ldd	r31, Y+1	; 0x01
    2510:	c6 5c       	subi	r28, 0xC6	; 198
    2512:	d0 40       	sbci	r29, 0x00	; 0
    2514:	09 95       	icall
    2516:	60 93 78 02 	sts	0x0278, r22	; 0x800278 <dt>
    251a:	70 93 79 02 	sts	0x0279, r23	; 0x800279 <dt+0x1>
    251e:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <dt+0x2>
    2522:	90 93 7b 02 	sts	0x027B, r25	; 0x80027b <dt+0x3>
					/***Reading analog***/
					adcvalue=analog.read(0);
    2526:	80 e0       	ldi	r24, 0x00	; 0
    2528:	90 e0       	ldi	r25, 0x00	; 0
    252a:	cc 51       	subi	r28, 0x1C	; 28
    252c:	df 4f       	sbci	r29, 0xFF	; 255
    252e:	e8 81       	ld	r30, Y
    2530:	f9 81       	ldd	r31, Y+1	; 0x01
    2532:	c4 5e       	subi	r28, 0xE4	; 228
    2534:	d0 40       	sbci	r29, 0x00	; 0
    2536:	09 95       	icall
    2538:	c3 52       	subi	r28, 0x23	; 35
    253a:	df 4f       	sbci	r29, 0xFF	; 255
    253c:	99 83       	std	Y+1, r25	; 0x01
    253e:	88 83       	st	Y, r24
    2540:	cd 5d       	subi	r28, 0xDD	; 221
    2542:	d0 40       	sbci	r29, 0x00	; 0
					/***Set Position***/
					timer1.compareB(function.trimmer(adcvalue,0,1023,450,2450));
    2544:	bc 01       	movw	r22, r24
    2546:	99 0f       	add	r25, r25
    2548:	88 0b       	sbc	r24, r24
    254a:	99 0b       	sbc	r25, r25
    254c:	1f 92       	push	r1
    254e:	1f 92       	push	r1
    2550:	29 e0       	ldi	r18, 0x09	; 9
    2552:	2f 93       	push	r18
    2554:	22 e9       	ldi	r18, 0x92	; 146
    2556:	2f 93       	push	r18
    2558:	0f 2e       	mov	r0, r31
    255a:	f2 ec       	ldi	r31, 0xC2	; 194
    255c:	af 2e       	mov	r10, r31
    255e:	bb 24       	eor	r11, r11
    2560:	b3 94       	inc	r11
    2562:	c1 2c       	mov	r12, r1
    2564:	d1 2c       	mov	r13, r1
    2566:	f0 2d       	mov	r31, r0
    2568:	ee 24       	eor	r14, r14
    256a:	ea 94       	dec	r14
    256c:	13 e0       	ldi	r17, 0x03	; 3
    256e:	f1 2e       	mov	r15, r17
    2570:	00 e0       	ldi	r16, 0x00	; 0
    2572:	10 e0       	ldi	r17, 0x00	; 0
    2574:	20 e0       	ldi	r18, 0x00	; 0
    2576:	30 e0       	ldi	r19, 0x00	; 0
    2578:	a9 01       	movw	r20, r18
    257a:	c0 52       	subi	r28, 0x20	; 32
    257c:	df 4f       	sbci	r29, 0xFF	; 255
    257e:	e8 81       	ld	r30, Y
    2580:	f9 81       	ldd	r31, Y+1	; 0x01
    2582:	c0 5e       	subi	r28, 0xE0	; 224
    2584:	d0 40       	sbci	r29, 0x00	; 0
    2586:	09 95       	icall
    2588:	cb 01       	movw	r24, r22
    258a:	ce 51       	subi	r28, 0x1E	; 30
    258c:	df 4f       	sbci	r29, 0xFF	; 255
    258e:	e8 81       	ld	r30, Y
    2590:	f9 81       	ldd	r31, Y+1	; 0x01
    2592:	c2 5e       	subi	r28, 0xE2	; 226
    2594:	d0 40       	sbci	r29, 0x00	; 0
    2596:	09 95       	icall
					lcd0.gotoxy(0,0);
    2598:	60 e0       	ldi	r22, 0x00	; 0
    259a:	70 e0       	ldi	r23, 0x00	; 0
    259c:	80 e0       	ldi	r24, 0x00	; 0
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	f3 01       	movw	r30, r6
    25a2:	09 95       	icall
					lcd0.string_size("Sensor:",7);
    25a4:	67 e0       	ldi	r22, 0x07	; 7
    25a6:	84 e1       	ldi	r24, 0x14	; 20
    25a8:	91 e0       	ldi	r25, 0x01	; 1
    25aa:	f1 01       	movw	r30, r2
    25ac:	09 95       	icall
					//lcd0.hspace(1);
					strcpy(str,function.i16toa(adcvalue));
    25ae:	6a 96       	adiw	r28, 0x1a	; 26
    25b0:	ee ad       	ldd	r30, Y+62	; 0x3e
    25b2:	ff ad       	ldd	r31, Y+63	; 0x3f
    25b4:	6a 97       	sbiw	r28, 0x1a	; 26
    25b6:	c3 52       	subi	r28, 0x23	; 35
    25b8:	df 4f       	sbci	r29, 0xFF	; 255
    25ba:	88 81       	ld	r24, Y
    25bc:	99 81       	ldd	r25, Y+1	; 0x01
    25be:	cd 5d       	subi	r28, 0xDD	; 221
    25c0:	d0 40       	sbci	r29, 0x00	; 0
    25c2:	09 95       	icall
    25c4:	bc 01       	movw	r22, r24
    25c6:	ce 01       	movw	r24, r28
    25c8:	84 53       	subi	r24, 0x34	; 52
    25ca:	9f 4f       	sbci	r25, 0xFF	; 255
    25cc:	62 d2       	rcall	.+1220   	; 0x2a92 <strcpy>
					lcd0.string_size(str,4);
    25ce:	64 e0       	ldi	r22, 0x04	; 4
    25d0:	ce 01       	movw	r24, r28
    25d2:	84 53       	subi	r24, 0x34	; 52
    25d4:	9f 4f       	sbci	r25, 0xFF	; 255
    25d6:	f1 01       	movw	r30, r2
    25d8:	09 95       	icall
					lcd0.gotoxy(0,12);
    25da:	6c e0       	ldi	r22, 0x0C	; 12
    25dc:	70 e0       	ldi	r23, 0x00	; 0
    25de:	80 e0       	ldi	r24, 0x00	; 0
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	f3 01       	movw	r30, r6
    25e4:	09 95       	icall
					lcd0.string_size(function.ui16toa(rtc.bcd2dec(dt.days)),2);
    25e6:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <dt+0x3>
    25ea:	c5 52       	subi	r28, 0x25	; 37
    25ec:	df 4f       	sbci	r29, 0xFF	; 255
    25ee:	e8 81       	ld	r30, Y
    25f0:	f9 81       	ldd	r31, Y+1	; 0x01
    25f2:	cb 5d       	subi	r28, 0xDB	; 219
    25f4:	d0 40       	sbci	r29, 0x00	; 0
    25f6:	09 95       	icall
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	c7 52       	subi	r28, 0x27	; 39
    25fc:	df 4f       	sbci	r29, 0xFF	; 255
    25fe:	e8 81       	ld	r30, Y
    2600:	f9 81       	ldd	r31, Y+1	; 0x01
    2602:	c9 5d       	subi	r28, 0xD9	; 217
    2604:	d0 40       	sbci	r29, 0x00	; 0
    2606:	09 95       	icall
    2608:	62 e0       	ldi	r22, 0x02	; 2
    260a:	f1 01       	movw	r30, r2
    260c:	09 95       	icall
					lcd0.putch(':');
    260e:	8a e3       	ldi	r24, 0x3A	; 58
    2610:	f2 01       	movw	r30, r4
    2612:	09 95       	icall
					lcd0.string_size(function.ui16toa(rtc.bcd2dec(dt.century_months)),2);
    2614:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <dt+0x1>
    2618:	c5 52       	subi	r28, 0x25	; 37
    261a:	df 4f       	sbci	r29, 0xFF	; 255
    261c:	e8 81       	ld	r30, Y
    261e:	f9 81       	ldd	r31, Y+1	; 0x01
    2620:	cb 5d       	subi	r28, 0xDB	; 219
    2622:	d0 40       	sbci	r29, 0x00	; 0
    2624:	09 95       	icall
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	c7 52       	subi	r28, 0x27	; 39
    262a:	df 4f       	sbci	r29, 0xFF	; 255
    262c:	e8 81       	ld	r30, Y
    262e:	f9 81       	ldd	r31, Y+1	; 0x01
    2630:	c9 5d       	subi	r28, 0xD9	; 217
    2632:	d0 40       	sbci	r29, 0x00	; 0
    2634:	09 95       	icall
    2636:	62 e0       	ldi	r22, 0x02	; 2
    2638:	f1 01       	movw	r30, r2
    263a:	09 95       	icall
					lcd0.putch(':');
    263c:	8a e3       	ldi	r24, 0x3A	; 58
    263e:	f2 01       	movw	r30, r4
    2640:	09 95       	icall
					lcd0.string_size(function.ui16toa(rtc.bcd2dec(dt.years)),2);
    2642:	e8 e7       	ldi	r30, 0x78	; 120
    2644:	f2 e0       	ldi	r31, 0x02	; 2
    2646:	80 81       	ld	r24, Z
    2648:	c5 52       	subi	r28, 0x25	; 37
    264a:	df 4f       	sbci	r29, 0xFF	; 255
    264c:	e8 81       	ld	r30, Y
    264e:	f9 81       	ldd	r31, Y+1	; 0x01
    2650:	cb 5d       	subi	r28, 0xDB	; 219
    2652:	d0 40       	sbci	r29, 0x00	; 0
    2654:	09 95       	icall
    2656:	90 e0       	ldi	r25, 0x00	; 0
    2658:	c7 52       	subi	r28, 0x27	; 39
    265a:	df 4f       	sbci	r29, 0xFF	; 255
    265c:	e8 81       	ld	r30, Y
    265e:	f9 81       	ldd	r31, Y+1	; 0x01
    2660:	c9 5d       	subi	r28, 0xD9	; 217
    2662:	d0 40       	sbci	r29, 0x00	; 0
    2664:	09 95       	icall
    2666:	62 e0       	ldi	r22, 0x02	; 2
    2668:	f1 01       	movw	r30, r2
    266a:	09 95       	icall
					lcd0.gotoxy(1,12);
    266c:	6c e0       	ldi	r22, 0x0C	; 12
    266e:	70 e0       	ldi	r23, 0x00	; 0
    2670:	81 e0       	ldi	r24, 0x01	; 1
    2672:	90 e0       	ldi	r25, 0x00	; 0
    2674:	f3 01       	movw	r30, r6
    2676:	09 95       	icall
					lcd0.string_size(function.ui16toa(rtc.bcd2dec(tm.hours)),2);
    2678:	05 e7       	ldi	r16, 0x75	; 117
    267a:	12 e0       	ldi	r17, 0x02	; 2
    267c:	f8 01       	movw	r30, r16
    267e:	80 81       	ld	r24, Z
    2680:	c5 52       	subi	r28, 0x25	; 37
    2682:	df 4f       	sbci	r29, 0xFF	; 255
    2684:	e8 81       	ld	r30, Y
    2686:	f9 81       	ldd	r31, Y+1	; 0x01
    2688:	cb 5d       	subi	r28, 0xDB	; 219
    268a:	d0 40       	sbci	r29, 0x00	; 0
    268c:	09 95       	icall
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	c7 52       	subi	r28, 0x27	; 39
    2692:	df 4f       	sbci	r29, 0xFF	; 255
    2694:	e8 81       	ld	r30, Y
    2696:	f9 81       	ldd	r31, Y+1	; 0x01
    2698:	c9 5d       	subi	r28, 0xD9	; 217
    269a:	d0 40       	sbci	r29, 0x00	; 0
    269c:	09 95       	icall
    269e:	62 e0       	ldi	r22, 0x02	; 2
    26a0:	f1 01       	movw	r30, r2
    26a2:	09 95       	icall
					lcd0.putch(':');
    26a4:	8a e3       	ldi	r24, 0x3A	; 58
    26a6:	f2 01       	movw	r30, r4
    26a8:	09 95       	icall
					lcd0.string_size(function.ui16toa(rtc.bcd2dec(tm.minutes)),2);
    26aa:	f8 01       	movw	r30, r16
    26ac:	81 81       	ldd	r24, Z+1	; 0x01
    26ae:	c5 52       	subi	r28, 0x25	; 37
    26b0:	df 4f       	sbci	r29, 0xFF	; 255
    26b2:	e8 81       	ld	r30, Y
    26b4:	f9 81       	ldd	r31, Y+1	; 0x01
    26b6:	cb 5d       	subi	r28, 0xDB	; 219
    26b8:	d0 40       	sbci	r29, 0x00	; 0
    26ba:	09 95       	icall
    26bc:	90 e0       	ldi	r25, 0x00	; 0
    26be:	c7 52       	subi	r28, 0x27	; 39
    26c0:	df 4f       	sbci	r29, 0xFF	; 255
    26c2:	e8 81       	ld	r30, Y
    26c4:	f9 81       	ldd	r31, Y+1	; 0x01
    26c6:	c9 5d       	subi	r28, 0xD9	; 217
    26c8:	d0 40       	sbci	r29, 0x00	; 0
    26ca:	09 95       	icall
    26cc:	62 e0       	ldi	r22, 0x02	; 2
    26ce:	f1 01       	movw	r30, r2
    26d0:	09 95       	icall
					lcd0.putch(':');
    26d2:	8a e3       	ldi	r24, 0x3A	; 58
    26d4:	f2 01       	movw	r30, r4
    26d6:	09 95       	icall
					lcd0.string_size(function.ui16toa(rtc.bcd2dec(tm.VL_seconds)),2);
    26d8:	f8 01       	movw	r30, r16
    26da:	82 81       	ldd	r24, Z+2	; 0x02
    26dc:	c5 52       	subi	r28, 0x25	; 37
    26de:	df 4f       	sbci	r29, 0xFF	; 255
    26e0:	e8 81       	ld	r30, Y
    26e2:	f9 81       	ldd	r31, Y+1	; 0x01
    26e4:	cb 5d       	subi	r28, 0xDB	; 219
    26e6:	d0 40       	sbci	r29, 0x00	; 0
    26e8:	09 95       	icall
    26ea:	90 e0       	ldi	r25, 0x00	; 0
    26ec:	c7 52       	subi	r28, 0x27	; 39
    26ee:	df 4f       	sbci	r29, 0xFF	; 255
    26f0:	e8 81       	ld	r30, Y
    26f2:	f9 81       	ldd	r31, Y+1	; 0x01
    26f4:	c9 5d       	subi	r28, 0xD9	; 217
    26f6:	d0 40       	sbci	r29, 0x00	; 0
    26f8:	09 95       	icall
    26fa:	62 e0       	ldi	r22, 0x02	; 2
    26fc:	f1 01       	movw	r30, r2
    26fe:	09 95       	icall
    2700:	0f 90       	pop	r0
    2702:	0f 90       	pop	r0
    2704:	0f 90       	pop	r0
    2706:	0f 90       	pop	r0
    2708:	73 ce       	rjmp	.-794    	; 0x23f0 <main+0x214>
				}
				break;
			case '2': // Manual position override 
				if(!strcmp(keypad.get().string,"A")){
    270a:	f4 01       	movw	r30, r8
    270c:	09 95       	icall
    270e:	5a a3       	std	Y+34, r21	; 0x22
    2710:	6b a3       	std	Y+35, r22	; 0x23
    2712:	60 e1       	ldi	r22, 0x10	; 16
    2714:	71 e0       	ldi	r23, 0x01	; 1
    2716:	8a a1       	ldd	r24, Y+34	; 0x22
    2718:	9b a1       	ldd	r25, Y+35	; 0x23
    271a:	b2 d1       	rcall	.+868    	; 0x2a80 <strcmp>
    271c:	89 2b       	or	r24, r25
    271e:	a9 f4       	brne	.+42     	; 0x274a <main+0x56e>
					Menu='3';
					//cleanup
					lcd0.clear();
    2720:	c9 52       	subi	r28, 0x29	; 41
    2722:	df 4f       	sbci	r29, 0xFF	; 255
    2724:	e8 81       	ld	r30, Y
    2726:	f9 81       	ldd	r31, Y+1	; 0x01
    2728:	c7 5d       	subi	r28, 0xD7	; 215
    272a:	d0 40       	sbci	r29, 0x00	; 0
    272c:	09 95       	icall
					keypad.flush();
    272e:	cb 52       	subi	r28, 0x2B	; 43
    2730:	df 4f       	sbci	r29, 0xFF	; 255
    2732:	e8 81       	ld	r30, Y
    2734:	f9 81       	ldd	r31, Y+1	; 0x01
    2736:	c5 5d       	subi	r28, 0xD5	; 213
    2738:	d0 40       	sbci	r29, 0x00	; 0
    273a:	09 95       	icall
					lcd0.string_size(function.ui16toa(rtc.bcd2dec(tm.VL_seconds)),2);
				}
				break;
			case '2': // Manual position override 
				if(!strcmp(keypad.get().string,"A")){
					Menu='3';
    273c:	f3 e3       	ldi	r31, 0x33	; 51
    273e:	cc 52       	subi	r28, 0x2C	; 44
    2740:	df 4f       	sbci	r29, 0xFF	; 255
    2742:	f8 83       	st	Y, r31
    2744:	c4 5d       	subi	r28, 0xD4	; 212
    2746:	d0 40       	sbci	r29, 0x00	; 0
    2748:	53 ce       	rjmp	.-858    	; 0x23f0 <main+0x214>
					//cleanup
					lcd0.clear();
					keypad.flush();
				}else if(!strcmp(keypad.get().string,"B")){
    274a:	f4 01       	movw	r30, r8
    274c:	09 95       	icall
    274e:	5d 8f       	std	Y+29, r21	; 0x1d
    2750:	6e 8f       	std	Y+30, r22	; 0x1e
    2752:	62 e1       	ldi	r22, 0x12	; 18
    2754:	71 e0       	ldi	r23, 0x01	; 1
    2756:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2758:	9e 8d       	ldd	r25, Y+30	; 0x1e
    275a:	92 d1       	rcall	.+804    	; 0x2a80 <strcmp>
    275c:	89 2b       	or	r24, r25
    275e:	a9 f4       	brne	.+42     	; 0x278a <main+0x5ae>
					Menu='1';
					//cleanup
					lcd0.clear();
    2760:	c9 52       	subi	r28, 0x29	; 41
    2762:	df 4f       	sbci	r29, 0xFF	; 255
    2764:	e8 81       	ld	r30, Y
    2766:	f9 81       	ldd	r31, Y+1	; 0x01
    2768:	c7 5d       	subi	r28, 0xD7	; 215
    276a:	d0 40       	sbci	r29, 0x00	; 0
    276c:	09 95       	icall
					keypad.flush();
    276e:	cb 52       	subi	r28, 0x2B	; 43
    2770:	df 4f       	sbci	r29, 0xFF	; 255
    2772:	e8 81       	ld	r30, Y
    2774:	f9 81       	ldd	r31, Y+1	; 0x01
    2776:	c5 5d       	subi	r28, 0xD5	; 213
    2778:	d0 40       	sbci	r29, 0x00	; 0
    277a:	09 95       	icall
					Menu='3';
					//cleanup
					lcd0.clear();
					keypad.flush();
				}else if(!strcmp(keypad.get().string,"B")){
					Menu='1';
    277c:	f1 e3       	ldi	r31, 0x31	; 49
    277e:	cc 52       	subi	r28, 0x2C	; 44
    2780:	df 4f       	sbci	r29, 0xFF	; 255
    2782:	f8 83       	st	Y, r31
    2784:	c4 5d       	subi	r28, 0xD4	; 212
    2786:	d0 40       	sbci	r29, 0x00	; 0
    2788:	33 ce       	rjmp	.-922    	; 0x23f0 <main+0x214>
					//cleanup
					lcd0.clear();
					keypad.flush();
				}else{
					lcd0.gotoxy(0,0);
    278a:	60 e0       	ldi	r22, 0x00	; 0
    278c:	70 e0       	ldi	r23, 0x00	; 0
    278e:	80 e0       	ldi	r24, 0x00	; 0
    2790:	90 e0       	ldi	r25, 0x00	; 0
    2792:	f3 01       	movw	r30, r6
    2794:	09 95       	icall
					lcd0.string_size("Manual:",7);
    2796:	67 e0       	ldi	r22, 0x07	; 7
    2798:	8c e1       	ldi	r24, 0x1C	; 28
    279a:	91 e0       	ldi	r25, 0x01	; 1
    279c:	f1 01       	movw	r30, r2
    279e:	09 95       	icall
					lcd0.string_size(mstr,4);
    27a0:	64 e0       	ldi	r22, 0x04	; 4
    27a2:	ce 01       	movw	r24, r28
    27a4:	80 53       	subi	r24, 0x30	; 48
    27a6:	9f 4f       	sbci	r25, 0xFF	; 255
    27a8:	f1 01       	movw	r30, r2
    27aa:	09 95       	icall
					if(keypad.get().character==KEYPADENTERKEY){
    27ac:	f4 01       	movw	r30, r8
    27ae:	09 95       	icall
    27b0:	24 34       	cpi	r18, 0x44	; 68
    27b2:	09 f0       	breq	.+2      	; 0x27b6 <main+0x5da>
    27b4:	1d ce       	rjmp	.-966    	; 0x23f0 <main+0x214>
						strcpy(mstr,keypad.get().string);
    27b6:	f4 01       	movw	r30, r8
    27b8:	09 95       	icall
    27ba:	5b 8b       	std	Y+19, r21	; 0x13
    27bc:	6c 8b       	std	Y+20, r22	; 0x14
    27be:	6b 89       	ldd	r22, Y+19	; 0x13
    27c0:	7c 89       	ldd	r23, Y+20	; 0x14
    27c2:	ce 01       	movw	r24, r28
    27c4:	80 53       	subi	r24, 0x30	; 48
    27c6:	9f 4f       	sbci	r25, 0xFF	; 255
    27c8:	64 d1       	rcall	.+712    	; 0x2a92 <strcpy>
						mvalue=function.strToInt(mstr);
    27ca:	a6 96       	adiw	r28, 0x26	; 38
    27cc:	ee ad       	ldd	r30, Y+62	; 0x3e
    27ce:	ff ad       	ldd	r31, Y+63	; 0x3f
    27d0:	a6 97       	sbiw	r28, 0x26	; 38
    27d2:	ce 01       	movw	r24, r28
    27d4:	80 53       	subi	r24, 0x30	; 48
    27d6:	9f 4f       	sbci	r25, 0xFF	; 255
    27d8:	09 95       	icall
						if(mvalue >=0 && mvalue <=180){
    27da:	85 3b       	cpi	r24, 0xB5	; 181
    27dc:	91 05       	cpc	r25, r1
    27de:	70 f5       	brcc	.+92     	; 0x283c <main+0x660>
							timer1.compareB(function.trimmer(mvalue,0,180,450,2450));
    27e0:	bc 01       	movw	r22, r24
    27e2:	99 0f       	add	r25, r25
    27e4:	88 0b       	sbc	r24, r24
    27e6:	99 0b       	sbc	r25, r25
    27e8:	1f 92       	push	r1
    27ea:	1f 92       	push	r1
    27ec:	29 e0       	ldi	r18, 0x09	; 9
    27ee:	2f 93       	push	r18
    27f0:	22 e9       	ldi	r18, 0x92	; 146
    27f2:	2f 93       	push	r18
    27f4:	0f 2e       	mov	r0, r31
    27f6:	f2 ec       	ldi	r31, 0xC2	; 194
    27f8:	af 2e       	mov	r10, r31
    27fa:	bb 24       	eor	r11, r11
    27fc:	b3 94       	inc	r11
    27fe:	c1 2c       	mov	r12, r1
    2800:	d1 2c       	mov	r13, r1
    2802:	f0 2d       	mov	r31, r0
    2804:	14 eb       	ldi	r17, 0xB4	; 180
    2806:	e1 2e       	mov	r14, r17
    2808:	f1 2c       	mov	r15, r1
    280a:	00 e0       	ldi	r16, 0x00	; 0
    280c:	10 e0       	ldi	r17, 0x00	; 0
    280e:	20 e0       	ldi	r18, 0x00	; 0
    2810:	30 e0       	ldi	r19, 0x00	; 0
    2812:	a9 01       	movw	r20, r18
    2814:	c0 52       	subi	r28, 0x20	; 32
    2816:	df 4f       	sbci	r29, 0xFF	; 255
    2818:	e8 81       	ld	r30, Y
    281a:	f9 81       	ldd	r31, Y+1	; 0x01
    281c:	c0 5e       	subi	r28, 0xE0	; 224
    281e:	d0 40       	sbci	r29, 0x00	; 0
    2820:	09 95       	icall
    2822:	cb 01       	movw	r24, r22
    2824:	ce 51       	subi	r28, 0x1E	; 30
    2826:	df 4f       	sbci	r29, 0xFF	; 255
    2828:	e8 81       	ld	r30, Y
    282a:	f9 81       	ldd	r31, Y+1	; 0x01
    282c:	c2 5e       	subi	r28, 0xE2	; 226
    282e:	d0 40       	sbci	r29, 0x00	; 0
    2830:	09 95       	icall
    2832:	0f 90       	pop	r0
    2834:	0f 90       	pop	r0
    2836:	0f 90       	pop	r0
    2838:	0f 90       	pop	r0
    283a:	10 c0       	rjmp	.+32     	; 0x285c <main+0x680>
						}else{
							strcpy(mstr,"err");
    283c:	25 e6       	ldi	r18, 0x65	; 101
    283e:	32 e7       	ldi	r19, 0x72	; 114
    2840:	c0 53       	subi	r28, 0x30	; 48
    2842:	df 4f       	sbci	r29, 0xFF	; 255
    2844:	39 83       	std	Y+1, r19	; 0x01
    2846:	28 83       	st	Y, r18
    2848:	c0 5d       	subi	r28, 0xD0	; 208
    284a:	d0 40       	sbci	r29, 0x00	; 0
    284c:	82 e7       	ldi	r24, 0x72	; 114
    284e:	90 e0       	ldi	r25, 0x00	; 0
    2850:	ce 52       	subi	r28, 0x2E	; 46
    2852:	df 4f       	sbci	r29, 0xFF	; 255
    2854:	99 83       	std	Y+1, r25	; 0x01
    2856:	88 83       	st	Y, r24
    2858:	c2 5d       	subi	r28, 0xD2	; 210
    285a:	d0 40       	sbci	r29, 0x00	; 0
						}
						keypad.flush();
    285c:	cb 52       	subi	r28, 0x2B	; 43
    285e:	df 4f       	sbci	r29, 0xFF	; 255
    2860:	e8 81       	ld	r30, Y
    2862:	f9 81       	ldd	r31, Y+1	; 0x01
    2864:	c5 5d       	subi	r28, 0xD5	; 213
    2866:	d0 40       	sbci	r29, 0x00	; 0
    2868:	09 95       	icall
					}
				}
				break;
			case '3': //Set Time and Date
				if(!strcmp(keypad.get().string,"A")){
    286a:	c2 cd       	rjmp	.-1148   	; 0x23f0 <main+0x214>
    286c:	f4 01       	movw	r30, r8
    286e:	09 95       	icall
    2870:	5e 87       	std	Y+14, r21	; 0x0e
    2872:	6f 87       	std	Y+15, r22	; 0x0f
    2874:	60 e1       	ldi	r22, 0x10	; 16
    2876:	71 e0       	ldi	r23, 0x01	; 1
    2878:	8e 85       	ldd	r24, Y+14	; 0x0e
    287a:	9f 85       	ldd	r25, Y+15	; 0x0f
    287c:	01 d1       	rcall	.+514    	; 0x2a80 <strcmp>
    287e:	89 2b       	or	r24, r25
    2880:	a9 f4       	brne	.+42     	; 0x28ac <main+0x6d0>
					Menu='1';
					//cleanup
					lcd0.clear();
    2882:	c9 52       	subi	r28, 0x29	; 41
    2884:	df 4f       	sbci	r29, 0xFF	; 255
    2886:	e8 81       	ld	r30, Y
    2888:	f9 81       	ldd	r31, Y+1	; 0x01
    288a:	c7 5d       	subi	r28, 0xD7	; 215
    288c:	d0 40       	sbci	r29, 0x00	; 0
    288e:	09 95       	icall
					keypad.flush();
    2890:	cb 52       	subi	r28, 0x2B	; 43
    2892:	df 4f       	sbci	r29, 0xFF	; 255
    2894:	e8 81       	ld	r30, Y
    2896:	f9 81       	ldd	r31, Y+1	; 0x01
    2898:	c5 5d       	subi	r28, 0xD5	; 213
    289a:	d0 40       	sbci	r29, 0x00	; 0
    289c:	09 95       	icall
					}
				}
				break;
			case '3': //Set Time and Date
				if(!strcmp(keypad.get().string,"A")){
					Menu='1';
    289e:	f1 e3       	ldi	r31, 0x31	; 49
    28a0:	cc 52       	subi	r28, 0x2C	; 44
    28a2:	df 4f       	sbci	r29, 0xFF	; 255
    28a4:	f8 83       	st	Y, r31
    28a6:	c4 5d       	subi	r28, 0xD4	; 212
    28a8:	d0 40       	sbci	r29, 0x00	; 0
					//cleanup
					lcd0.clear();
					keypad.flush();
				}else if(!strcmp(keypad.get().string,"B")){
    28aa:	a2 cd       	rjmp	.-1212   	; 0x23f0 <main+0x214>
    28ac:	f4 01       	movw	r30, r8
    28ae:	09 95       	icall
    28b0:	59 87       	std	Y+9, r21	; 0x09
    28b2:	6a 87       	std	Y+10, r22	; 0x0a
    28b4:	62 e1       	ldi	r22, 0x12	; 18
    28b6:	71 e0       	ldi	r23, 0x01	; 1
    28b8:	89 85       	ldd	r24, Y+9	; 0x09
    28ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    28bc:	e1 d0       	rcall	.+450    	; 0x2a80 <strcmp>
    28be:	89 2b       	or	r24, r25
    28c0:	a9 f4       	brne	.+42     	; 0x28ec <main+0x710>
					Menu='2';
					//cleanup
					lcd0.clear();
    28c2:	c9 52       	subi	r28, 0x29	; 41
    28c4:	df 4f       	sbci	r29, 0xFF	; 255
    28c6:	e8 81       	ld	r30, Y
    28c8:	f9 81       	ldd	r31, Y+1	; 0x01
    28ca:	c7 5d       	subi	r28, 0xD7	; 215
    28cc:	d0 40       	sbci	r29, 0x00	; 0
    28ce:	09 95       	icall
					keypad.flush();
    28d0:	cb 52       	subi	r28, 0x2B	; 43
    28d2:	df 4f       	sbci	r29, 0xFF	; 255
    28d4:	e8 81       	ld	r30, Y
    28d6:	f9 81       	ldd	r31, Y+1	; 0x01
    28d8:	c5 5d       	subi	r28, 0xD5	; 213
    28da:	d0 40       	sbci	r29, 0x00	; 0
    28dc:	09 95       	icall
					Menu='1';
					//cleanup
					lcd0.clear();
					keypad.flush();
				}else if(!strcmp(keypad.get().string,"B")){
					Menu='2';
    28de:	f2 e3       	ldi	r31, 0x32	; 50
    28e0:	cc 52       	subi	r28, 0x2C	; 44
    28e2:	df 4f       	sbci	r29, 0xFF	; 255
    28e4:	f8 83       	st	Y, r31
    28e6:	c4 5d       	subi	r28, 0xD4	; 212
    28e8:	d0 40       	sbci	r29, 0x00	; 0
    28ea:	82 cd       	rjmp	.-1276   	; 0x23f0 <main+0x214>
					//cleanup
					lcd0.clear();
					keypad.flush();
				}else{
					/*** Menu to set RTC Time and Date ***/
					switch(cal){
    28ec:	c1 52       	subi	r28, 0x21	; 33
    28ee:	df 4f       	sbci	r29, 0xFF	; 255
    28f0:	28 81       	ld	r18, Y
    28f2:	cf 5d       	subi	r28, 0xDF	; 223
    28f4:	d0 40       	sbci	r29, 0x00	; 0
    28f6:	20 33       	cpi	r18, 0x30	; 48
    28f8:	19 f0       	breq	.+6      	; 0x2900 <main+0x724>
    28fa:	21 33       	cpi	r18, 0x31	; 49
    28fc:	f1 f0       	breq	.+60     	; 0x293a <main+0x75e>
    28fe:	78 cd       	rjmp	.-1296   	; 0x23f0 <main+0x214>
						case '0':
							lcd0.gotoxy(0,0);
    2900:	60 e0       	ldi	r22, 0x00	; 0
    2902:	70 e0       	ldi	r23, 0x00	; 0
    2904:	80 e0       	ldi	r24, 0x00	; 0
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	f3 01       	movw	r30, r6
    290a:	09 95       	icall
							lcd0.string_size("Date and Time Setup",19);
    290c:	63 e1       	ldi	r22, 0x13	; 19
    290e:	84 e2       	ldi	r24, 0x24	; 36
    2910:	91 e0       	ldi	r25, 0x01	; 1
    2912:	f1 01       	movw	r30, r2
    2914:	09 95       	icall
							lcd0.gotoxy(1,0);
    2916:	60 e0       	ldi	r22, 0x00	; 0
    2918:	70 e0       	ldi	r23, 0x00	; 0
    291a:	81 e0       	ldi	r24, 0x01	; 1
    291c:	90 e0       	ldi	r25, 0x00	; 0
    291e:	f3 01       	movw	r30, r6
    2920:	09 95       	icall
							lcd0.string_size("1-Year",6);
    2922:	66 e0       	ldi	r22, 0x06	; 6
    2924:	88 e3       	ldi	r24, 0x38	; 56
    2926:	91 e0       	ldi	r25, 0x01	; 1
    2928:	f1 01       	movw	r30, r2
    292a:	09 95       	icall
							cal=keypad.get().character;
    292c:	f4 01       	movw	r30, r8
    292e:	09 95       	icall
    2930:	c1 52       	subi	r28, 0x21	; 33
    2932:	df 4f       	sbci	r29, 0xFF	; 255
    2934:	28 83       	st	Y, r18
    2936:	cf 5d       	subi	r28, 0xDF	; 223
    2938:	d0 40       	sbci	r29, 0x00	; 0
						case '1':
							lcd0.string_size("  Not Yet",9);
    293a:	69 e0       	ldi	r22, 0x09	; 9
    293c:	8f e3       	ldi	r24, 0x3F	; 63
    293e:	91 e0       	ldi	r25, 0x01	; 1
    2940:	f1 01       	movw	r30, r2
    2942:	09 95       	icall
							keypad.flush();
    2944:	cb 52       	subi	r28, 0x2B	; 43
    2946:	df 4f       	sbci	r29, 0xFF	; 255
    2948:	e8 81       	ld	r30, Y
    294a:	f9 81       	ldd	r31, Y+1	; 0x01
    294c:	c5 5d       	subi	r28, 0xD5	; 213
    294e:	d0 40       	sbci	r29, 0x00	; 0
    2950:	09 95       	icall
						break;
    2952:	4e cd       	rjmp	.-1380   	; 0x23f0 <main+0x214>

00002954 <__mulsi3>:
    2954:	db 01       	movw	r26, r22
    2956:	8f 93       	push	r24
    2958:	9f 93       	push	r25
    295a:	88 d0       	rcall	.+272    	; 0x2a6c <__muluhisi3>
    295c:	bf 91       	pop	r27
    295e:	af 91       	pop	r26
    2960:	a2 9f       	mul	r26, r18
    2962:	80 0d       	add	r24, r0
    2964:	91 1d       	adc	r25, r1
    2966:	a3 9f       	mul	r26, r19
    2968:	90 0d       	add	r25, r0
    296a:	b2 9f       	mul	r27, r18
    296c:	90 0d       	add	r25, r0
    296e:	11 24       	eor	r1, r1
    2970:	08 95       	ret

00002972 <__udivmodhi4>:
    2972:	aa 1b       	sub	r26, r26
    2974:	bb 1b       	sub	r27, r27
    2976:	51 e1       	ldi	r21, 0x11	; 17
    2978:	07 c0       	rjmp	.+14     	; 0x2988 <__udivmodhi4_ep>

0000297a <__udivmodhi4_loop>:
    297a:	aa 1f       	adc	r26, r26
    297c:	bb 1f       	adc	r27, r27
    297e:	a6 17       	cp	r26, r22
    2980:	b7 07       	cpc	r27, r23
    2982:	10 f0       	brcs	.+4      	; 0x2988 <__udivmodhi4_ep>
    2984:	a6 1b       	sub	r26, r22
    2986:	b7 0b       	sbc	r27, r23

00002988 <__udivmodhi4_ep>:
    2988:	88 1f       	adc	r24, r24
    298a:	99 1f       	adc	r25, r25
    298c:	5a 95       	dec	r21
    298e:	a9 f7       	brne	.-22     	; 0x297a <__udivmodhi4_loop>
    2990:	80 95       	com	r24
    2992:	90 95       	com	r25
    2994:	bc 01       	movw	r22, r24
    2996:	cd 01       	movw	r24, r26
    2998:	08 95       	ret

0000299a <__divmodhi4>:
    299a:	97 fb       	bst	r25, 7
    299c:	07 2e       	mov	r0, r23
    299e:	16 f4       	brtc	.+4      	; 0x29a4 <__divmodhi4+0xa>
    29a0:	00 94       	com	r0
    29a2:	06 d0       	rcall	.+12     	; 0x29b0 <__divmodhi4_neg1>
    29a4:	77 fd       	sbrc	r23, 7
    29a6:	08 d0       	rcall	.+16     	; 0x29b8 <__divmodhi4_neg2>
    29a8:	e4 df       	rcall	.-56     	; 0x2972 <__udivmodhi4>
    29aa:	07 fc       	sbrc	r0, 7
    29ac:	05 d0       	rcall	.+10     	; 0x29b8 <__divmodhi4_neg2>
    29ae:	3e f4       	brtc	.+14     	; 0x29be <__divmodhi4_exit>

000029b0 <__divmodhi4_neg1>:
    29b0:	90 95       	com	r25
    29b2:	81 95       	neg	r24
    29b4:	9f 4f       	sbci	r25, 0xFF	; 255
    29b6:	08 95       	ret

000029b8 <__divmodhi4_neg2>:
    29b8:	70 95       	com	r23
    29ba:	61 95       	neg	r22
    29bc:	7f 4f       	sbci	r23, 0xFF	; 255

000029be <__divmodhi4_exit>:
    29be:	08 95       	ret

000029c0 <__udivmodsi4>:
    29c0:	a1 e2       	ldi	r26, 0x21	; 33
    29c2:	1a 2e       	mov	r1, r26
    29c4:	aa 1b       	sub	r26, r26
    29c6:	bb 1b       	sub	r27, r27
    29c8:	fd 01       	movw	r30, r26
    29ca:	0d c0       	rjmp	.+26     	; 0x29e6 <__udivmodsi4_ep>

000029cc <__udivmodsi4_loop>:
    29cc:	aa 1f       	adc	r26, r26
    29ce:	bb 1f       	adc	r27, r27
    29d0:	ee 1f       	adc	r30, r30
    29d2:	ff 1f       	adc	r31, r31
    29d4:	a2 17       	cp	r26, r18
    29d6:	b3 07       	cpc	r27, r19
    29d8:	e4 07       	cpc	r30, r20
    29da:	f5 07       	cpc	r31, r21
    29dc:	20 f0       	brcs	.+8      	; 0x29e6 <__udivmodsi4_ep>
    29de:	a2 1b       	sub	r26, r18
    29e0:	b3 0b       	sbc	r27, r19
    29e2:	e4 0b       	sbc	r30, r20
    29e4:	f5 0b       	sbc	r31, r21

000029e6 <__udivmodsi4_ep>:
    29e6:	66 1f       	adc	r22, r22
    29e8:	77 1f       	adc	r23, r23
    29ea:	88 1f       	adc	r24, r24
    29ec:	99 1f       	adc	r25, r25
    29ee:	1a 94       	dec	r1
    29f0:	69 f7       	brne	.-38     	; 0x29cc <__udivmodsi4_loop>
    29f2:	60 95       	com	r22
    29f4:	70 95       	com	r23
    29f6:	80 95       	com	r24
    29f8:	90 95       	com	r25
    29fa:	9b 01       	movw	r18, r22
    29fc:	ac 01       	movw	r20, r24
    29fe:	bd 01       	movw	r22, r26
    2a00:	cf 01       	movw	r24, r30
    2a02:	08 95       	ret

00002a04 <__divmodsi4>:
    2a04:	05 2e       	mov	r0, r21
    2a06:	97 fb       	bst	r25, 7
    2a08:	16 f4       	brtc	.+4      	; 0x2a0e <__divmodsi4+0xa>
    2a0a:	00 94       	com	r0
    2a0c:	0f d0       	rcall	.+30     	; 0x2a2c <__negsi2>
    2a0e:	57 fd       	sbrc	r21, 7
    2a10:	05 d0       	rcall	.+10     	; 0x2a1c <__divmodsi4_neg2>
    2a12:	d6 df       	rcall	.-84     	; 0x29c0 <__udivmodsi4>
    2a14:	07 fc       	sbrc	r0, 7
    2a16:	02 d0       	rcall	.+4      	; 0x2a1c <__divmodsi4_neg2>
    2a18:	46 f4       	brtc	.+16     	; 0x2a2a <__divmodsi4_exit>
    2a1a:	08 c0       	rjmp	.+16     	; 0x2a2c <__negsi2>

00002a1c <__divmodsi4_neg2>:
    2a1c:	50 95       	com	r21
    2a1e:	40 95       	com	r20
    2a20:	30 95       	com	r19
    2a22:	21 95       	neg	r18
    2a24:	3f 4f       	sbci	r19, 0xFF	; 255
    2a26:	4f 4f       	sbci	r20, 0xFF	; 255
    2a28:	5f 4f       	sbci	r21, 0xFF	; 255

00002a2a <__divmodsi4_exit>:
    2a2a:	08 95       	ret

00002a2c <__negsi2>:
    2a2c:	90 95       	com	r25
    2a2e:	80 95       	com	r24
    2a30:	70 95       	com	r23
    2a32:	61 95       	neg	r22
    2a34:	7f 4f       	sbci	r23, 0xFF	; 255
    2a36:	8f 4f       	sbci	r24, 0xFF	; 255
    2a38:	9f 4f       	sbci	r25, 0xFF	; 255
    2a3a:	08 95       	ret

00002a3c <__tablejump2__>:
    2a3c:	ee 0f       	add	r30, r30
    2a3e:	ff 1f       	adc	r31, r31
    2a40:	00 24       	eor	r0, r0
    2a42:	00 1c       	adc	r0, r0
    2a44:	0b be       	out	0x3b, r0	; 59
    2a46:	07 90       	elpm	r0, Z+
    2a48:	f6 91       	elpm	r31, Z
    2a4a:	e0 2d       	mov	r30, r0
    2a4c:	09 94       	ijmp

00002a4e <__umulhisi3>:
    2a4e:	a2 9f       	mul	r26, r18
    2a50:	b0 01       	movw	r22, r0
    2a52:	b3 9f       	mul	r27, r19
    2a54:	c0 01       	movw	r24, r0
    2a56:	a3 9f       	mul	r26, r19
    2a58:	70 0d       	add	r23, r0
    2a5a:	81 1d       	adc	r24, r1
    2a5c:	11 24       	eor	r1, r1
    2a5e:	91 1d       	adc	r25, r1
    2a60:	b2 9f       	mul	r27, r18
    2a62:	70 0d       	add	r23, r0
    2a64:	81 1d       	adc	r24, r1
    2a66:	11 24       	eor	r1, r1
    2a68:	91 1d       	adc	r25, r1
    2a6a:	08 95       	ret

00002a6c <__muluhisi3>:
    2a6c:	f0 df       	rcall	.-32     	; 0x2a4e <__umulhisi3>
    2a6e:	a5 9f       	mul	r26, r21
    2a70:	90 0d       	add	r25, r0
    2a72:	b4 9f       	mul	r27, r20
    2a74:	90 0d       	add	r25, r0
    2a76:	a4 9f       	mul	r26, r20
    2a78:	80 0d       	add	r24, r0
    2a7a:	91 1d       	adc	r25, r1
    2a7c:	11 24       	eor	r1, r1
    2a7e:	08 95       	ret

00002a80 <strcmp>:
    2a80:	fb 01       	movw	r30, r22
    2a82:	dc 01       	movw	r26, r24
    2a84:	8d 91       	ld	r24, X+
    2a86:	01 90       	ld	r0, Z+
    2a88:	80 19       	sub	r24, r0
    2a8a:	01 10       	cpse	r0, r1
    2a8c:	d9 f3       	breq	.-10     	; 0x2a84 <strcmp+0x4>
    2a8e:	99 0b       	sbc	r25, r25
    2a90:	08 95       	ret

00002a92 <strcpy>:
    2a92:	fb 01       	movw	r30, r22
    2a94:	dc 01       	movw	r26, r24
    2a96:	01 90       	ld	r0, Z+
    2a98:	0d 92       	st	X+, r0
    2a9a:	00 20       	and	r0, r0
    2a9c:	e1 f7       	brne	.-8      	; 0x2a96 <strcpy+0x4>
    2a9e:	08 95       	ret

00002aa0 <_exit>:
    2aa0:	f8 94       	cli

00002aa2 <__stop_program>:
    2aa2:	ff cf       	rjmp	.-2      	; 0x2aa2 <__stop_program>
