
Atmega128.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  00002508  0000259c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002508  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000128  00800126  00800126  000025c2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000025c2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000025f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000005a0  00000000  00000000  00002630  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000571a  00000000  00000000  00002bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001736  00000000  00000000  000082ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000035c0  00000000  00000000  00009a20  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000f10  00000000  00000000  0000cfe0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000012e4  00000000  00000000  0000def0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000049d3  00000000  00000000  0000f1d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000550  00000000  00000000  00013ba7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	60 c0       	rjmp	.+192    	; 0xc2 <__ctors_end>
       2:	00 00       	nop
       4:	7d c0       	rjmp	.+250    	; 0x100 <__bad_interrupt>
       6:	00 00       	nop
       8:	7b c0       	rjmp	.+246    	; 0x100 <__bad_interrupt>
       a:	00 00       	nop
       c:	79 c0       	rjmp	.+242    	; 0x100 <__bad_interrupt>
       e:	00 00       	nop
      10:	77 c0       	rjmp	.+238    	; 0x100 <__bad_interrupt>
      12:	00 00       	nop
      14:	75 c0       	rjmp	.+234    	; 0x100 <__bad_interrupt>
      16:	00 00       	nop
      18:	73 c0       	rjmp	.+230    	; 0x100 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	71 c0       	rjmp	.+226    	; 0x100 <__bad_interrupt>
      1e:	00 00       	nop
      20:	6f c0       	rjmp	.+222    	; 0x100 <__bad_interrupt>
      22:	00 00       	nop
      24:	6d c0       	rjmp	.+218    	; 0x100 <__bad_interrupt>
      26:	00 00       	nop
      28:	01 c4       	rjmp	.+2050   	; 0x82c <__vector_10>
      2a:	00 00       	nop
      2c:	cd c3       	rjmp	.+1946   	; 0x7c8 <__vector_11>
      2e:	00 00       	nop
      30:	d5 c3       	rjmp	.+1962   	; 0x7dc <__vector_12>
      32:	00 00       	nop
      34:	dd c3       	rjmp	.+1978   	; 0x7f0 <__vector_13>
      36:	00 00       	nop
      38:	ef c3       	rjmp	.+2014   	; 0x818 <__vector_14>
      3a:	00 00       	nop
      3c:	0c 94 a6 11 	jmp	0x234c	; 0x234c <__vector_15>
      40:	b9 c3       	rjmp	.+1906   	; 0x7b4 <__vector_16>
      42:	00 00       	nop
      44:	5d c0       	rjmp	.+186    	; 0x100 <__bad_interrupt>
      46:	00 00       	nop
      48:	2d c4       	rjmp	.+2138   	; 0x8a4 <__vector_18>
      4a:	00 00       	nop
      4c:	63 c4       	rjmp	.+2246   	; 0x914 <__vector_19>
      4e:	00 00       	nop
      50:	57 c0       	rjmp	.+174    	; 0x100 <__bad_interrupt>
      52:	00 00       	nop
      54:	f6 c0       	rjmp	.+492    	; 0x242 <__vector_21>
      56:	00 00       	nop
      58:	53 c0       	rjmp	.+166    	; 0x100 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	51 c0       	rjmp	.+162    	; 0x100 <__bad_interrupt>
      5e:	00 00       	nop
      60:	d1 c3       	rjmp	.+1954   	; 0x804 <__vector_24>
      62:	00 00       	nop
      64:	ed c3       	rjmp	.+2010   	; 0x840 <__vector_25>
      66:	00 00       	nop
      68:	f5 c3       	rjmp	.+2026   	; 0x854 <__vector_26>
      6a:	00 00       	nop
      6c:	fd c3       	rjmp	.+2042   	; 0x868 <__vector_27>
      6e:	00 00       	nop
      70:	05 c4       	rjmp	.+2058   	; 0x87c <__vector_28>
      72:	00 00       	nop
      74:	0d c4       	rjmp	.+2074   	; 0x890 <__vector_29>
      76:	00 00       	nop
      78:	76 c4       	rjmp	.+2284   	; 0x966 <__vector_30>
      7a:	00 00       	nop
      7c:	af c4       	rjmp	.+2398   	; 0x9dc <__vector_31>
      7e:	00 00       	nop
      80:	3f c0       	rjmp	.+126    	; 0x100 <__bad_interrupt>
      82:	00 00       	nop
      84:	3d c0       	rjmp	.+122    	; 0x100 <__bad_interrupt>
      86:	00 00       	nop
      88:	3b c0       	rjmp	.+118    	; 0x100 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	fb 02       	muls	r31, r27
      8e:	ff 02       	muls	r31, r31
      90:	03 03       	mulsu	r16, r19
      92:	07 03       	mulsu	r16, r23
      94:	0b 03       	fmul	r16, r19
      96:	12 03       	mulsu	r17, r18
      98:	19 03       	fmul	r17, r17
      9a:	20 03       	mulsu	r18, r16
      9c:	24 03       	mulsu	r18, r20
      9e:	2b 03       	fmul	r18, r19
      a0:	32 03       	mulsu	r19, r18
      a2:	39 03       	fmul	r19, r17
      a4:	3d 03       	fmul	r19, r21
      a6:	44 03       	mulsu	r20, r20
      a8:	4b 03       	fmul	r20, r19
      aa:	67 03       	mulsu	r22, r23
      ac:	6b 03       	fmul	r22, r19
      ae:	6f 03       	fmul	r22, r23
      b0:	73 03       	mulsu	r23, r19
      b2:	79 03       	fmul	r23, r17
      b4:	7d 03       	fmul	r23, r21
      b6:	81 03       	fmuls	r16, r17
      b8:	85 03       	fmuls	r16, r21
      ba:	8e 03       	fmulsu	r16, r22
      bc:	92 03       	fmuls	r17, r18
      be:	96 03       	fmuls	r17, r22
      c0:	9f 03       	fmulsu	r17, r23

000000c2 <__ctors_end>:
      c2:	11 24       	eor	r1, r1
      c4:	1f be       	out	0x3f, r1	; 63
      c6:	cf ef       	ldi	r28, 0xFF	; 255
      c8:	d0 e1       	ldi	r29, 0x10	; 16
      ca:	de bf       	out	0x3e, r29	; 62
      cc:	cd bf       	out	0x3d, r28	; 61

000000ce <__do_copy_data>:
      ce:	11 e0       	ldi	r17, 0x01	; 1
      d0:	a0 e0       	ldi	r26, 0x00	; 0
      d2:	b1 e0       	ldi	r27, 0x01	; 1
      d4:	e8 e0       	ldi	r30, 0x08	; 8
      d6:	f5 e2       	ldi	r31, 0x25	; 37
      d8:	00 e0       	ldi	r16, 0x00	; 0
      da:	0b bf       	out	0x3b, r16	; 59
      dc:	02 c0       	rjmp	.+4      	; 0xe2 <__do_copy_data+0x14>
      de:	07 90       	elpm	r0, Z+
      e0:	0d 92       	st	X+, r0
      e2:	a6 32       	cpi	r26, 0x26	; 38
      e4:	b1 07       	cpc	r27, r17
      e6:	d9 f7       	brne	.-10     	; 0xde <__do_copy_data+0x10>

000000e8 <__do_clear_bss>:
      e8:	22 e0       	ldi	r18, 0x02	; 2
      ea:	a6 e2       	ldi	r26, 0x26	; 38
      ec:	b1 e0       	ldi	r27, 0x01	; 1
      ee:	01 c0       	rjmp	.+2      	; 0xf2 <.do_clear_bss_start>

000000f0 <.do_clear_bss_loop>:
      f0:	1d 92       	st	X+, r1

000000f2 <.do_clear_bss_start>:
      f2:	ae 34       	cpi	r26, 0x4E	; 78
      f4:	b2 07       	cpc	r27, r18
      f6:	e1 f7       	brne	.-8      	; 0xf0 <.do_clear_bss_loop>
      f8:	0e 94 40 10 	call	0x2080	; 0x2080 <main>
      fc:	0c 94 82 12 	jmp	0x2504	; 0x2504 <_exit>

00000100 <__bad_interrupt>:
     100:	7f cf       	rjmp	.-258    	; 0x0 <__vectors>

00000102 <ANALOG_read>:
* Returns selected Channel ADC_VALUE
*/
{
	uint8_t ADSC_FLAG;
	ADSC_FLAG=(1<<ADSC);
	if( !(ADC_CONTROL & ADSC_FLAG) ){
     102:	36 9b       	sbis	0x06, 6	; 6
		//ADC_SELECT
		/***/
		ADC_CONTROL|=(1<<ADSC);
     104:	36 9a       	sbi	0x06, 6	; 6
	}	
	return ADC_VALUE[selection];
     106:	fc 01       	movw	r30, r24
     108:	ee 0f       	add	r30, r30
     10a:	ff 1f       	adc	r31, r31
     10c:	e1 5c       	subi	r30, 0xC1	; 193
     10e:	fe 4f       	sbci	r31, 0xFE	; 254
     110:	80 81       	ld	r24, Z
     112:	91 81       	ldd	r25, Z+1	; 0x01
}
     114:	08 95       	ret

00000116 <ANALOGenable>:
ANALOG ANALOGenable( uint8_t Vreff, uint8_t Divfactor, int n_channel, ... )
/*
* Interrupt running mode setup
* setup, and list of channels to be probed
*/
{
     116:	0f 93       	push	r16
     118:	1f 93       	push	r17
     11a:	cf 93       	push	r28
     11c:	df 93       	push	r29
     11e:	cd b7       	in	r28, 0x3d	; 61
     120:	de b7       	in	r29, 0x3e	; 62
     122:	9f 81       	ldd	r25, Y+7	; 0x07
     124:	68 85       	ldd	r22, Y+8	; 0x08
     126:	49 85       	ldd	r20, Y+9	; 0x09
     128:	5a 85       	ldd	r21, Y+10	; 0x0a
	/***LOCAL VARIABLES***/
	uint8_t tSREG;
	va_list list;
	int i;
	//inic variables
	tSREG=SREG;
     12a:	1f b7       	in	r17, 0x3f	; 63
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
     12c:	8f b7       	in	r24, 0x3f	; 63
     12e:	8f 77       	andi	r24, 0x7F	; 127
     130:	8f bf       	out	0x3f, r24	; 63
	/***GLOBAL VARIABLES INICIALIZE***/
	ADC_N_CHANNEL=n_channel;
     132:	50 93 2e 01 	sts	0x012E, r21	; 0x80012e <ADC_N_CHANNEL+0x1>
     136:	40 93 2d 01 	sts	0x012D, r20	; 0x80012d <ADC_N_CHANNEL>
	ADC_SELECTOR=0;
     13a:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <ADC_SELECTOR+0x1>
     13e:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <ADC_SELECTOR>
	adc_n_sample=0;
     142:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <__data_end>
	//import parametros
	//inic parameters
	//Direccionar apontadores para PROTOTIPOS
	analog.read=ANALOG_read;
		/******/
		ADC_SELECT&=~(3<<REFS0);
     146:	87 b1       	in	r24, 0x07	; 7
     148:	8f 73       	andi	r24, 0x3F	; 63
     14a:	87 b9       	out	0x07, r24	; 7
		switch( Vreff ){
     14c:	91 30       	cpi	r25, 0x01	; 1
     14e:	19 f0       	breq	.+6      	; 0x156 <ANALOGenable+0x40>
     150:	93 30       	cpi	r25, 0x03	; 3
     152:	21 f0       	breq	.+8      	; 0x15c <ANALOGenable+0x46>
     154:	08 c0       	rjmp	.+16     	; 0x166 <ANALOGenable+0x50>
			case 0:
				analog.VREFF=0;
				break;
			case 1:
				ADC_SELECT|=(1<<REFS0);
     156:	3e 9a       	sbi	0x07, 6	; 7
				analog.VREFF=1;
     158:	01 e0       	ldi	r16, 0x01	; 1
				break;
     15a:	06 c0       	rjmp	.+12     	; 0x168 <ANALOGenable+0x52>
			case 3:
				ADC_SELECT|=(3<<REFS0);
     15c:	87 b1       	in	r24, 0x07	; 7
     15e:	80 6c       	ori	r24, 0xC0	; 192
     160:	87 b9       	out	0x07, r24	; 7
				analog.VREFF=3;
     162:	03 e0       	ldi	r16, 0x03	; 3
				break;
     164:	01 c0       	rjmp	.+2      	; 0x168 <ANALOGenable+0x52>
	analog.read=ANALOG_read;
		/******/
		ADC_SELECT&=~(3<<REFS0);
		switch( Vreff ){
			case 0:
				analog.VREFF=0;
     166:	00 e0       	ldi	r16, 0x00	; 0
			default:
				analog.VREFF=0;
				break;
		}
		//
		ADC_SELECT&=~(1<<ADLAR);
     168:	3d 98       	cbi	0x07, 5	; 7
		/******/
		va_start(list, n_channel);
		for(i=0;i<n_channel;i++){
     16a:	14 16       	cp	r1, r20
     16c:	15 06       	cpc	r1, r21
     16e:	8c f4       	brge	.+34     	; 0x192 <ANALOGenable+0x7c>
     170:	de 01       	movw	r26, r28
     172:	1b 96       	adiw	r26, 0x0b	; 11
     174:	80 e0       	ldi	r24, 0x00	; 0
     176:	90 e0       	ldi	r25, 0x00	; 0
			ADC_CHANNEL_GAIN[i] = va_arg(list, int);
     178:	2d 91       	ld	r18, X+
     17a:	3d 91       	ld	r19, X+
     17c:	fc 01       	movw	r30, r24
     17e:	ee 0f       	add	r30, r30
     180:	ff 1f       	adc	r31, r31
     182:	e1 5d       	subi	r30, 0xD1	; 209
     184:	fe 4f       	sbci	r31, 0xFE	; 254
     186:	31 83       	std	Z+1, r19	; 0x01
     188:	20 83       	st	Z, r18
		}
		//
		ADC_SELECT&=~(1<<ADLAR);
		/******/
		va_start(list, n_channel);
		for(i=0;i<n_channel;i++){
     18a:	01 96       	adiw	r24, 0x01	; 1
     18c:	48 17       	cp	r20, r24
     18e:	59 07       	cpc	r21, r25
     190:	99 f7       	brne	.-26     	; 0x178 <ANALOGenable+0x62>
			ADC_CHANNEL_GAIN[i] = va_arg(list, int);
		}
		va_end(list);
		ADC_SELECT&=~MUX_MASK;
     192:	87 b1       	in	r24, 0x07	; 7
     194:	80 7e       	andi	r24, 0xE0	; 224
     196:	87 b9       	out	0x07, r24	; 7
		ADC_SELECT|=(MUX_MASK & ADC_CHANNEL_GAIN[ADC_SELECTOR]);
     198:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <ADC_SELECTOR>
     19c:	f0 91 2c 01 	lds	r31, 0x012C	; 0x80012c <ADC_SELECTOR+0x1>
     1a0:	ee 0f       	add	r30, r30
     1a2:	ff 1f       	adc	r31, r31
     1a4:	e1 5d       	subi	r30, 0xD1	; 209
     1a6:	fe 4f       	sbci	r31, 0xFE	; 254
     1a8:	80 81       	ld	r24, Z
     1aa:	91 81       	ldd	r25, Z+1	; 0x01
     1ac:	27 b1       	in	r18, 0x07	; 7
     1ae:	8f 71       	andi	r24, 0x1F	; 31
     1b0:	99 27       	eor	r25, r25
     1b2:	82 2b       	or	r24, r18
     1b4:	87 b9       	out	0x07, r24	; 7
		/******/
		ADC_CONTROL|=(1<<ADEN);
     1b6:	37 9a       	sbi	0x06, 7	; 6
		ADC_CONTROL|=(1<<ADSC);
     1b8:	36 9a       	sbi	0x06, 6	; 6
		ADC_CONTROL&=~(1<<ADFR);
     1ba:	35 98       	cbi	0x06, 5	; 6
		ADC_CONTROL|=(1<<ADIE);
     1bc:	33 9a       	sbi	0x06, 3	; 6
		/******/
		ADC_CONTROL&=~(7<<ADPS0);
     1be:	86 b1       	in	r24, 0x06	; 6
     1c0:	88 7f       	andi	r24, 0xF8	; 248
     1c2:	86 b9       	out	0x06, r24	; 6
		switch( Divfactor ){
     1c4:	60 31       	cpi	r22, 0x10	; 16
     1c6:	d1 f0       	breq	.+52     	; 0x1fc <ANALOGenable+0xe6>
     1c8:	38 f4       	brcc	.+14     	; 0x1d8 <ANALOGenable+0xc2>
     1ca:	64 30       	cpi	r22, 0x04	; 4
     1cc:	79 f0       	breq	.+30     	; 0x1ec <ANALOGenable+0xd6>
     1ce:	68 30       	cpi	r22, 0x08	; 8
     1d0:	81 f0       	breq	.+32     	; 0x1f2 <ANALOGenable+0xdc>
     1d2:	62 30       	cpi	r22, 0x02	; 2
     1d4:	29 f5       	brne	.+74     	; 0x220 <ANALOGenable+0x10a>
     1d6:	07 c0       	rjmp	.+14     	; 0x1e6 <ANALOGenable+0xd0>
     1d8:	60 34       	cpi	r22, 0x40	; 64
     1da:	c1 f0       	breq	.+48     	; 0x20c <ANALOGenable+0xf6>
     1dc:	60 38       	cpi	r22, 0x80	; 128
     1de:	d9 f0       	breq	.+54     	; 0x216 <ANALOGenable+0x100>
     1e0:	60 32       	cpi	r22, 0x20	; 32
     1e2:	f1 f4       	brne	.+60     	; 0x220 <ANALOGenable+0x10a>
     1e4:	0e c0       	rjmp	.+28     	; 0x202 <ANALOGenable+0xec>
			case 2://1
				ADC_CONTROL|=(1<<ADPS0);
     1e6:	30 9a       	sbi	0x06, 0	; 6
				analog.DIVISION_FACTOR=2;
     1e8:	22 e0       	ldi	r18, 0x02	; 2
				break;
     1ea:	1e c0       	rjmp	.+60     	; 0x228 <ANALOGenable+0x112>
			case 4://2
				ADC_CONTROL|=(1<<ADPS1);
     1ec:	31 9a       	sbi	0x06, 1	; 6
				analog.DIVISION_FACTOR=4;
     1ee:	24 e0       	ldi	r18, 0x04	; 4
				break;
     1f0:	1b c0       	rjmp	.+54     	; 0x228 <ANALOGenable+0x112>
			case 8://3
				ADC_CONTROL|=(3<<ADPS0);
     1f2:	86 b1       	in	r24, 0x06	; 6
     1f4:	83 60       	ori	r24, 0x03	; 3
     1f6:	86 b9       	out	0x06, r24	; 6
				analog.DIVISION_FACTOR=8;
     1f8:	28 e0       	ldi	r18, 0x08	; 8
				break;
     1fa:	16 c0       	rjmp	.+44     	; 0x228 <ANALOGenable+0x112>
			case 16://4
				ADC_CONTROL|=(1<<ADPS2);
     1fc:	32 9a       	sbi	0x06, 2	; 6
				analog.DIVISION_FACTOR=16;
     1fe:	20 e1       	ldi	r18, 0x10	; 16
				break;
     200:	13 c0       	rjmp	.+38     	; 0x228 <ANALOGenable+0x112>
			case 32://5
				ADC_CONTROL|=(5<<ADPS0);
     202:	86 b1       	in	r24, 0x06	; 6
     204:	85 60       	ori	r24, 0x05	; 5
     206:	86 b9       	out	0x06, r24	; 6
				analog.DIVISION_FACTOR=32;
     208:	20 e2       	ldi	r18, 0x20	; 32
				break;
     20a:	0e c0       	rjmp	.+28     	; 0x228 <ANALOGenable+0x112>
			case 64://6
				ADC_CONTROL|=(6<<ADPS0);
     20c:	86 b1       	in	r24, 0x06	; 6
     20e:	86 60       	ori	r24, 0x06	; 6
     210:	86 b9       	out	0x06, r24	; 6
				analog.DIVISION_FACTOR=64;
     212:	20 e4       	ldi	r18, 0x40	; 64
				break;
     214:	09 c0       	rjmp	.+18     	; 0x228 <ANALOGenable+0x112>
			case 128://7
				ADC_CONTROL|=(7<<ADPS0);
     216:	86 b1       	in	r24, 0x06	; 6
     218:	87 60       	ori	r24, 0x07	; 7
     21a:	86 b9       	out	0x06, r24	; 6
				analog.DIVISION_FACTOR=128;
     21c:	20 e8       	ldi	r18, 0x80	; 128
				break;
     21e:	04 c0       	rjmp	.+8      	; 0x228 <ANALOGenable+0x112>
			default:
				ADC_CONTROL|=(7<<ADPS0);
     220:	86 b1       	in	r24, 0x06	; 6
     222:	87 60       	ori	r24, 0x07	; 7
     224:	86 b9       	out	0x06, r24	; 6
				analog.DIVISION_FACTOR=128;
     226:	20 e8       	ldi	r18, 0x80	; 128
				break;
		}		
		
	SREG=tSREG;
     228:	1f bf       	out	0x3f, r17	; 63
	SREG|=(1<<GLOBAL_INTERRUPT_ENABLE);
     22a:	8f b7       	in	r24, 0x3f	; 63
     22c:	80 68       	ori	r24, 0x80	; 128
     22e:	8f bf       	out	0x3f, r24	; 63
	/******/
	return analog;
     230:	60 2f       	mov	r22, r16
     232:	72 2f       	mov	r23, r18
     234:	81 e8       	ldi	r24, 0x81	; 129
     236:	90 e0       	ldi	r25, 0x00	; 0
}
     238:	df 91       	pop	r29
     23a:	cf 91       	pop	r28
     23c:	1f 91       	pop	r17
     23e:	0f 91       	pop	r16
     240:	08 95       	ret

00000242 <__vector_21>:
ISR(ANALOG_INTERRUPT)
/*************************************************************************
Function: ANALOG interrupt
Purpose:  Read Analog Input
**************************************************************************/
{
     242:	1f 92       	push	r1
     244:	0f 92       	push	r0
     246:	0f b6       	in	r0, 0x3f	; 63
     248:	0f 92       	push	r0
     24a:	11 24       	eor	r1, r1
     24c:	0b b6       	in	r0, 0x3b	; 59
     24e:	0f 92       	push	r0
     250:	2f 93       	push	r18
     252:	3f 93       	push	r19
     254:	8f 93       	push	r24
     256:	9f 93       	push	r25
     258:	ef 93       	push	r30
     25a:	ff 93       	push	r31
	/******/
	adc_tmp=ADCL;
     25c:	84 b1       	in	r24, 0x04	; 4
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <adc_tmp+0x1>
     264:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <adc_tmp>
	adc_tmp|=(ADCH<<8);
     268:	25 b1       	in	r18, 0x05	; 5
     26a:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <adc_tmp>
     26e:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <adc_tmp+0x1>
     272:	92 2b       	or	r25, r18
     274:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <adc_tmp+0x1>
     278:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <adc_tmp>
	if(adc_n_sample < (1<<ADC_NUMBER_SAMPLE)){
     27c:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__data_end>
     280:	84 30       	cpi	r24, 0x04	; 4
     282:	a0 f4       	brcc	.+40     	; 0x2ac <__vector_21+0x6a>
		adc_n_sample++;
     284:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__data_end>
     288:	8f 5f       	subi	r24, 0xFF	; 255
     28a:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__data_end>
		adc_sample+=adc_tmp;
     28e:	20 91 27 01 	lds	r18, 0x0127	; 0x800127 <adc_tmp>
     292:	30 91 28 01 	lds	r19, 0x0128	; 0x800128 <adc_tmp+0x1>
     296:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <adc_sample>
     29a:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <adc_sample+0x1>
     29e:	82 0f       	add	r24, r18
     2a0:	93 1f       	adc	r25, r19
     2a2:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <adc_sample+0x1>
     2a6:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <adc_sample>
     2aa:	43 c0       	rjmp	.+134    	; 0x332 <__vector_21+0xf0>
	}else{
		ADC_VALUE[ADC_SELECTOR]=adc_sample>>ADC_NUMBER_SAMPLE;
     2ac:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <ADC_SELECTOR>
     2b0:	f0 91 2c 01 	lds	r31, 0x012C	; 0x80012c <ADC_SELECTOR+0x1>
     2b4:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <adc_sample>
     2b8:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <adc_sample+0x1>
     2bc:	95 95       	asr	r25
     2be:	87 95       	ror	r24
     2c0:	95 95       	asr	r25
     2c2:	87 95       	ror	r24
     2c4:	ee 0f       	add	r30, r30
     2c6:	ff 1f       	adc	r31, r31
     2c8:	e1 5c       	subi	r30, 0xC1	; 193
     2ca:	fe 4f       	sbci	r31, 0xFE	; 254
     2cc:	91 83       	std	Z+1, r25	; 0x01
     2ce:	80 83       	st	Z, r24
		adc_n_sample=adc_sample=0;
     2d0:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <adc_sample+0x1>
     2d4:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <adc_sample>
     2d8:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <__data_end>
		/******/
		if(ADC_SELECTOR < ADC_N_CHANNEL)
     2dc:	20 91 2b 01 	lds	r18, 0x012B	; 0x80012b <ADC_SELECTOR>
     2e0:	30 91 2c 01 	lds	r19, 0x012C	; 0x80012c <ADC_SELECTOR+0x1>
     2e4:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <ADC_N_CHANNEL>
     2e8:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <ADC_N_CHANNEL+0x1>
     2ec:	28 17       	cp	r18, r24
     2ee:	39 07       	cpc	r19, r25
     2f0:	54 f4       	brge	.+20     	; 0x306 <__vector_21+0xc4>
			ADC_SELECTOR++;
     2f2:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <ADC_SELECTOR>
     2f6:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <ADC_SELECTOR+0x1>
     2fa:	01 96       	adiw	r24, 0x01	; 1
     2fc:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <ADC_SELECTOR+0x1>
     300:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <ADC_SELECTOR>
     304:	04 c0       	rjmp	.+8      	; 0x30e <__vector_21+0xcc>
		else
			ADC_SELECTOR=0;
     306:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <ADC_SELECTOR+0x1>
     30a:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <ADC_SELECTOR>
		ADC_SELECT &= ~MUX_MASK;
     30e:	87 b1       	in	r24, 0x07	; 7
     310:	80 7e       	andi	r24, 0xE0	; 224
     312:	87 b9       	out	0x07, r24	; 7
		ADC_SELECT |= (ADC_CHANNEL_GAIN[ADC_SELECTOR] & MUX_MASK);
     314:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <ADC_SELECTOR>
     318:	f0 91 2c 01 	lds	r31, 0x012C	; 0x80012c <ADC_SELECTOR+0x1>
     31c:	ee 0f       	add	r30, r30
     31e:	ff 1f       	adc	r31, r31
     320:	e1 5d       	subi	r30, 0xD1	; 209
     322:	fe 4f       	sbci	r31, 0xFE	; 254
     324:	80 81       	ld	r24, Z
     326:	91 81       	ldd	r25, Z+1	; 0x01
     328:	27 b1       	in	r18, 0x07	; 7
     32a:	8f 71       	andi	r24, 0x1F	; 31
     32c:	99 27       	eor	r25, r25
     32e:	82 2b       	or	r24, r18
     330:	87 b9       	out	0x07, r24	; 7
	}		
}
     332:	ff 91       	pop	r31
     334:	ef 91       	pop	r30
     336:	9f 91       	pop	r25
     338:	8f 91       	pop	r24
     33a:	3f 91       	pop	r19
     33c:	2f 91       	pop	r18
     33e:	0f 90       	pop	r0
     340:	0b be       	out	0x3b, r0	; 59
     342:	0f 90       	pop	r0
     344:	0f be       	out	0x3f, r0	; 63
     346:	0f 90       	pop	r0
     348:	1f 90       	pop	r1
     34a:	18 95       	reti

0000034c <TIMER_COUNTER0_start>:
		timer3.compareC=TIMER_COUNTER3_compareC;
		timer3.start=TIMER_COUNTER3_start;
		timer3.stop=TIMER_COUNTER3_stop;
		//
		return timer3;
	}
     34c:	20 91 dc 01 	lds	r18, 0x01DC	; 0x8001dc <timer0_state>
     350:	21 11       	cpse	r18, r1
     352:	40 c0       	rjmp	.+128    	; 0x3d4 <TIMER_COUNTER0_start+0x88>
     354:	2f ef       	ldi	r18, 0xFF	; 255
     356:	21 bf       	out	0x31, r18	; 49
     358:	23 b7       	in	r18, 0x33	; 51
     35a:	28 7f       	andi	r18, 0xF8	; 248
     35c:	23 bf       	out	0x33, r18	; 51
     35e:	80 34       	cpi	r24, 0x40	; 64
     360:	91 05       	cpc	r25, r1
     362:	11 f1       	breq	.+68     	; 0x3a8 <TIMER_COUNTER0_start+0x5c>
     364:	48 f4       	brcc	.+18     	; 0x378 <TIMER_COUNTER0_start+0x2c>
     366:	88 30       	cpi	r24, 0x08	; 8
     368:	91 05       	cpc	r25, r1
     36a:	b1 f0       	breq	.+44     	; 0x398 <TIMER_COUNTER0_start+0x4c>
     36c:	80 32       	cpi	r24, 0x20	; 32
     36e:	91 05       	cpc	r25, r1
     370:	b9 f0       	breq	.+46     	; 0x3a0 <TIMER_COUNTER0_start+0x54>
     372:	01 97       	sbiw	r24, 0x01	; 1
     374:	49 f5       	brne	.+82     	; 0x3c8 <TIMER_COUNTER0_start+0x7c>
     376:	0c c0       	rjmp	.+24     	; 0x390 <TIMER_COUNTER0_start+0x44>
     378:	81 15       	cp	r24, r1
     37a:	21 e0       	ldi	r18, 0x01	; 1
     37c:	92 07       	cpc	r25, r18
     37e:	e1 f0       	breq	.+56     	; 0x3b8 <TIMER_COUNTER0_start+0x6c>
     380:	81 15       	cp	r24, r1
     382:	24 e0       	ldi	r18, 0x04	; 4
     384:	92 07       	cpc	r25, r18
     386:	e1 f0       	breq	.+56     	; 0x3c0 <TIMER_COUNTER0_start+0x74>
     388:	80 38       	cpi	r24, 0x80	; 128
     38a:	91 05       	cpc	r25, r1
     38c:	e9 f4       	brne	.+58     	; 0x3c8 <TIMER_COUNTER0_start+0x7c>
     38e:	10 c0       	rjmp	.+32     	; 0x3b0 <TIMER_COUNTER0_start+0x64>
     390:	83 b7       	in	r24, 0x33	; 51
     392:	81 60       	ori	r24, 0x01	; 1
     394:	83 bf       	out	0x33, r24	; 51
     396:	1b c0       	rjmp	.+54     	; 0x3ce <TIMER_COUNTER0_start+0x82>
     398:	83 b7       	in	r24, 0x33	; 51
     39a:	82 60       	ori	r24, 0x02	; 2
     39c:	83 bf       	out	0x33, r24	; 51
     39e:	17 c0       	rjmp	.+46     	; 0x3ce <TIMER_COUNTER0_start+0x82>
     3a0:	83 b7       	in	r24, 0x33	; 51
     3a2:	83 60       	ori	r24, 0x03	; 3
     3a4:	83 bf       	out	0x33, r24	; 51
     3a6:	13 c0       	rjmp	.+38     	; 0x3ce <TIMER_COUNTER0_start+0x82>
     3a8:	83 b7       	in	r24, 0x33	; 51
     3aa:	84 60       	ori	r24, 0x04	; 4
     3ac:	83 bf       	out	0x33, r24	; 51
     3ae:	0f c0       	rjmp	.+30     	; 0x3ce <TIMER_COUNTER0_start+0x82>
     3b0:	83 b7       	in	r24, 0x33	; 51
     3b2:	85 60       	ori	r24, 0x05	; 5
     3b4:	83 bf       	out	0x33, r24	; 51
     3b6:	0b c0       	rjmp	.+22     	; 0x3ce <TIMER_COUNTER0_start+0x82>
     3b8:	83 b7       	in	r24, 0x33	; 51
     3ba:	86 60       	ori	r24, 0x06	; 6
     3bc:	83 bf       	out	0x33, r24	; 51
     3be:	07 c0       	rjmp	.+14     	; 0x3ce <TIMER_COUNTER0_start+0x82>
     3c0:	83 b7       	in	r24, 0x33	; 51
     3c2:	87 60       	ori	r24, 0x07	; 7
     3c4:	83 bf       	out	0x33, r24	; 51
     3c6:	03 c0       	rjmp	.+6      	; 0x3ce <TIMER_COUNTER0_start+0x82>
     3c8:	83 b7       	in	r24, 0x33	; 51
     3ca:	87 60       	ori	r24, 0x07	; 7
     3cc:	83 bf       	out	0x33, r24	; 51
     3ce:	81 e0       	ldi	r24, 0x01	; 1
     3d0:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <timer0_state>
     3d4:	08 95       	ret

000003d6 <TIMER_COUNTER0_compoutmode>:
     3d6:	93 b7       	in	r25, 0x33	; 51
     3d8:	9f 7c       	andi	r25, 0xCF	; 207
     3da:	93 bf       	out	0x33, r25	; 51
     3dc:	82 30       	cpi	r24, 0x02	; 2
     3de:	41 f0       	breq	.+16     	; 0x3f0 <TIMER_COUNTER0_compoutmode+0x1a>
     3e0:	83 30       	cpi	r24, 0x03	; 3
     3e2:	51 f0       	breq	.+20     	; 0x3f8 <TIMER_COUNTER0_compoutmode+0x22>
     3e4:	81 30       	cpi	r24, 0x01	; 1
     3e6:	59 f4       	brne	.+22     	; 0x3fe <TIMER_COUNTER0_compoutmode+0x28>
     3e8:	83 b7       	in	r24, 0x33	; 51
     3ea:	80 61       	ori	r24, 0x10	; 16
     3ec:	83 bf       	out	0x33, r24	; 51
     3ee:	08 95       	ret
     3f0:	83 b7       	in	r24, 0x33	; 51
     3f2:	80 62       	ori	r24, 0x20	; 32
     3f4:	83 bf       	out	0x33, r24	; 51
     3f6:	08 95       	ret
     3f8:	83 b7       	in	r24, 0x33	; 51
     3fa:	80 63       	ori	r24, 0x30	; 48
     3fc:	83 bf       	out	0x33, r24	; 51
     3fe:	08 95       	ret

00000400 <TIMER_COUNTER0_compare>:
     400:	81 bf       	out	0x31, r24	; 49
     402:	08 95       	ret

00000404 <TIMER_COUNTER0_stop>:
     404:	83 b7       	in	r24, 0x33	; 51
     406:	88 7f       	andi	r24, 0xF8	; 248
     408:	83 bf       	out	0x33, r24	; 51
     40a:	12 be       	out	0x32, r1	; 50
     40c:	10 92 dc 01 	sts	0x01DC, r1	; 0x8001dc <timer0_state>
     410:	08 95       	ret

00000412 <TIMER_COUNTER1_start>:
     412:	20 91 d9 01 	lds	r18, 0x01D9	; 0x8001d9 <timer1_state>
     416:	21 11       	cpse	r18, r1
     418:	42 c0       	rjmp	.+132    	; 0x49e <TIMER_COUNTER1_start+0x8c>
     41a:	2f ef       	ldi	r18, 0xFF	; 255
     41c:	3f ef       	ldi	r19, 0xFF	; 255
     41e:	3b bd       	out	0x2b, r19	; 43
     420:	2a bd       	out	0x2a, r18	; 42
     422:	2e b5       	in	r18, 0x2e	; 46
     424:	28 7f       	andi	r18, 0xF8	; 248
     426:	2e bd       	out	0x2e, r18	; 46
     428:	88 30       	cpi	r24, 0x08	; 8
     42a:	91 05       	cpc	r25, r1
     42c:	d1 f0       	breq	.+52     	; 0x462 <TIMER_COUNTER1_start+0x50>
     42e:	48 f4       	brcc	.+18     	; 0x442 <TIMER_COUNTER1_start+0x30>
     430:	83 30       	cpi	r24, 0x03	; 3
     432:	91 05       	cpc	r25, r1
     434:	31 f1       	breq	.+76     	; 0x482 <TIMER_COUNTER1_start+0x70>
     436:	85 30       	cpi	r24, 0x05	; 5
     438:	91 05       	cpc	r25, r1
     43a:	39 f1       	breq	.+78     	; 0x48a <TIMER_COUNTER1_start+0x78>
     43c:	01 97       	sbiw	r24, 0x01	; 1
     43e:	49 f5       	brne	.+82     	; 0x492 <TIMER_COUNTER1_start+0x80>
     440:	0c c0       	rjmp	.+24     	; 0x45a <TIMER_COUNTER1_start+0x48>
     442:	81 15       	cp	r24, r1
     444:	21 e0       	ldi	r18, 0x01	; 1
     446:	92 07       	cpc	r25, r18
     448:	a1 f0       	breq	.+40     	; 0x472 <TIMER_COUNTER1_start+0x60>
     44a:	81 15       	cp	r24, r1
     44c:	24 e0       	ldi	r18, 0x04	; 4
     44e:	92 07       	cpc	r25, r18
     450:	a1 f0       	breq	.+40     	; 0x47a <TIMER_COUNTER1_start+0x68>
     452:	80 34       	cpi	r24, 0x40	; 64
     454:	91 05       	cpc	r25, r1
     456:	e9 f4       	brne	.+58     	; 0x492 <TIMER_COUNTER1_start+0x80>
     458:	08 c0       	rjmp	.+16     	; 0x46a <TIMER_COUNTER1_start+0x58>
     45a:	8e b5       	in	r24, 0x2e	; 46
     45c:	81 60       	ori	r24, 0x01	; 1
     45e:	8e bd       	out	0x2e, r24	; 46
     460:	1b c0       	rjmp	.+54     	; 0x498 <TIMER_COUNTER1_start+0x86>
     462:	8e b5       	in	r24, 0x2e	; 46
     464:	82 60       	ori	r24, 0x02	; 2
     466:	8e bd       	out	0x2e, r24	; 46
     468:	17 c0       	rjmp	.+46     	; 0x498 <TIMER_COUNTER1_start+0x86>
     46a:	8e b5       	in	r24, 0x2e	; 46
     46c:	83 60       	ori	r24, 0x03	; 3
     46e:	8e bd       	out	0x2e, r24	; 46
     470:	13 c0       	rjmp	.+38     	; 0x498 <TIMER_COUNTER1_start+0x86>
     472:	8e b5       	in	r24, 0x2e	; 46
     474:	84 60       	ori	r24, 0x04	; 4
     476:	8e bd       	out	0x2e, r24	; 46
     478:	0f c0       	rjmp	.+30     	; 0x498 <TIMER_COUNTER1_start+0x86>
     47a:	8e b5       	in	r24, 0x2e	; 46
     47c:	85 60       	ori	r24, 0x05	; 5
     47e:	8e bd       	out	0x2e, r24	; 46
     480:	0b c0       	rjmp	.+22     	; 0x498 <TIMER_COUNTER1_start+0x86>
     482:	8e b5       	in	r24, 0x2e	; 46
     484:	86 60       	ori	r24, 0x06	; 6
     486:	8e bd       	out	0x2e, r24	; 46
     488:	07 c0       	rjmp	.+14     	; 0x498 <TIMER_COUNTER1_start+0x86>
     48a:	8e b5       	in	r24, 0x2e	; 46
     48c:	87 60       	ori	r24, 0x07	; 7
     48e:	8e bd       	out	0x2e, r24	; 46
     490:	03 c0       	rjmp	.+6      	; 0x498 <TIMER_COUNTER1_start+0x86>
     492:	8e b5       	in	r24, 0x2e	; 46
     494:	85 60       	ori	r24, 0x05	; 5
     496:	8e bd       	out	0x2e, r24	; 46
     498:	81 e0       	ldi	r24, 0x01	; 1
     49a:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <timer1_state>
     49e:	08 95       	ret

000004a0 <TIMER_COUNTER1_compoutmodeA>:
     4a0:	9f b5       	in	r25, 0x2f	; 47
     4a2:	9f 73       	andi	r25, 0x3F	; 63
     4a4:	9f bd       	out	0x2f, r25	; 47
     4a6:	82 30       	cpi	r24, 0x02	; 2
     4a8:	41 f0       	breq	.+16     	; 0x4ba <TIMER_COUNTER1_compoutmodeA+0x1a>
     4aa:	83 30       	cpi	r24, 0x03	; 3
     4ac:	51 f0       	breq	.+20     	; 0x4c2 <TIMER_COUNTER1_compoutmodeA+0x22>
     4ae:	81 30       	cpi	r24, 0x01	; 1
     4b0:	59 f4       	brne	.+22     	; 0x4c8 <TIMER_COUNTER1_compoutmodeA+0x28>
     4b2:	8f b5       	in	r24, 0x2f	; 47
     4b4:	80 64       	ori	r24, 0x40	; 64
     4b6:	8f bd       	out	0x2f, r24	; 47
     4b8:	08 95       	ret
     4ba:	8f b5       	in	r24, 0x2f	; 47
     4bc:	80 68       	ori	r24, 0x80	; 128
     4be:	8f bd       	out	0x2f, r24	; 47
     4c0:	08 95       	ret
     4c2:	8f b5       	in	r24, 0x2f	; 47
     4c4:	80 6c       	ori	r24, 0xC0	; 192
     4c6:	8f bd       	out	0x2f, r24	; 47
     4c8:	08 95       	ret

000004ca <TIMER_COUNTER1_compoutmodeB>:
     4ca:	9f b5       	in	r25, 0x2f	; 47
     4cc:	9f 7c       	andi	r25, 0xCF	; 207
     4ce:	9f bd       	out	0x2f, r25	; 47
     4d0:	82 30       	cpi	r24, 0x02	; 2
     4d2:	41 f0       	breq	.+16     	; 0x4e4 <TIMER_COUNTER1_compoutmodeB+0x1a>
     4d4:	83 30       	cpi	r24, 0x03	; 3
     4d6:	51 f0       	breq	.+20     	; 0x4ec <TIMER_COUNTER1_compoutmodeB+0x22>
     4d8:	81 30       	cpi	r24, 0x01	; 1
     4da:	59 f4       	brne	.+22     	; 0x4f2 <TIMER_COUNTER1_compoutmodeB+0x28>
     4dc:	8f b5       	in	r24, 0x2f	; 47
     4de:	80 61       	ori	r24, 0x10	; 16
     4e0:	8f bd       	out	0x2f, r24	; 47
     4e2:	08 95       	ret
     4e4:	8f b5       	in	r24, 0x2f	; 47
     4e6:	80 62       	ori	r24, 0x20	; 32
     4e8:	8f bd       	out	0x2f, r24	; 47
     4ea:	08 95       	ret
     4ec:	8f b5       	in	r24, 0x2f	; 47
     4ee:	80 63       	ori	r24, 0x30	; 48
     4f0:	8f bd       	out	0x2f, r24	; 47
     4f2:	08 95       	ret

000004f4 <TIMER_COUNTER1_compoutmodeC>:
     4f4:	9f b5       	in	r25, 0x2f	; 47
     4f6:	93 7f       	andi	r25, 0xF3	; 243
     4f8:	9f bd       	out	0x2f, r25	; 47
     4fa:	82 30       	cpi	r24, 0x02	; 2
     4fc:	41 f0       	breq	.+16     	; 0x50e <TIMER_COUNTER1_compoutmodeC+0x1a>
     4fe:	83 30       	cpi	r24, 0x03	; 3
     500:	51 f0       	breq	.+20     	; 0x516 <TIMER_COUNTER1_compoutmodeC+0x22>
     502:	81 30       	cpi	r24, 0x01	; 1
     504:	59 f4       	brne	.+22     	; 0x51c <TIMER_COUNTER1_compoutmodeC+0x28>
     506:	8f b5       	in	r24, 0x2f	; 47
     508:	84 60       	ori	r24, 0x04	; 4
     50a:	8f bd       	out	0x2f, r24	; 47
     50c:	08 95       	ret
     50e:	8f b5       	in	r24, 0x2f	; 47
     510:	88 60       	ori	r24, 0x08	; 8
     512:	8f bd       	out	0x2f, r24	; 47
     514:	08 95       	ret
     516:	8f b5       	in	r24, 0x2f	; 47
     518:	8c 60       	ori	r24, 0x0C	; 12
     51a:	8f bd       	out	0x2f, r24	; 47
     51c:	08 95       	ret

0000051e <TIMER_COUNTER1_compareA>:
     51e:	9b bd       	out	0x2b, r25	; 43
     520:	8a bd       	out	0x2a, r24	; 42
     522:	08 95       	ret

00000524 <TIMER_COUNTER1_compareB>:
     524:	99 bd       	out	0x29, r25	; 41
     526:	88 bd       	out	0x28, r24	; 40
     528:	08 95       	ret

0000052a <TIMER_COUNTER1_compareC>:
     52a:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     52e:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     532:	08 95       	ret

00000534 <TIMER_COUNTER1_stop>:
     534:	8e b5       	in	r24, 0x2e	; 46
     536:	88 7f       	andi	r24, 0xF8	; 248
     538:	8e bd       	out	0x2e, r24	; 46
     53a:	1d bc       	out	0x2d, r1	; 45
     53c:	1c bc       	out	0x2c, r1	; 44
     53e:	10 92 d9 01 	sts	0x01D9, r1	; 0x8001d9 <timer1_state>
     542:	08 95       	ret

00000544 <TIMER_COUNTER0enable>:
     544:	10 92 dc 01 	sts	0x01DC, r1	; 0x8001dc <timer0_state>
     548:	23 b7       	in	r18, 0x33	; 51
     54a:	27 7b       	andi	r18, 0xB7	; 183
     54c:	23 bf       	out	0x33, r18	; 51
     54e:	62 30       	cpi	r22, 0x02	; 2
     550:	41 f0       	breq	.+16     	; 0x562 <TIMER_COUNTER0enable+0x1e>
     552:	63 30       	cpi	r22, 0x03	; 3
     554:	51 f0       	breq	.+20     	; 0x56a <TIMER_COUNTER0enable+0x26>
     556:	61 30       	cpi	r22, 0x01	; 1
     558:	59 f4       	brne	.+22     	; 0x570 <TIMER_COUNTER0enable+0x2c>
     55a:	23 b7       	in	r18, 0x33	; 51
     55c:	20 64       	ori	r18, 0x40	; 64
     55e:	23 bf       	out	0x33, r18	; 51
     560:	07 c0       	rjmp	.+14     	; 0x570 <TIMER_COUNTER0enable+0x2c>
     562:	23 b7       	in	r18, 0x33	; 51
     564:	28 60       	ori	r18, 0x08	; 8
     566:	23 bf       	out	0x33, r18	; 51
     568:	03 c0       	rjmp	.+6      	; 0x570 <TIMER_COUNTER0enable+0x2c>
     56a:	23 b7       	in	r18, 0x33	; 51
     56c:	28 64       	ori	r18, 0x48	; 72
     56e:	23 bf       	out	0x33, r18	; 51
     570:	27 b7       	in	r18, 0x37	; 55
     572:	2e 7f       	andi	r18, 0xFE	; 254
     574:	27 bf       	out	0x37, r18	; 55
     576:	27 b7       	in	r18, 0x37	; 55
     578:	2d 7f       	andi	r18, 0xFD	; 253
     57a:	27 bf       	out	0x37, r18	; 55
     57c:	42 30       	cpi	r20, 0x02	; 2
     57e:	41 f0       	breq	.+16     	; 0x590 <TIMER_COUNTER0enable+0x4c>
     580:	43 30       	cpi	r20, 0x03	; 3
     582:	51 f0       	breq	.+20     	; 0x598 <TIMER_COUNTER0enable+0x54>
     584:	41 30       	cpi	r20, 0x01	; 1
     586:	71 f4       	brne	.+28     	; 0x5a4 <TIMER_COUNTER0enable+0x60>
     588:	27 b7       	in	r18, 0x37	; 55
     58a:	21 60       	ori	r18, 0x01	; 1
     58c:	27 bf       	out	0x37, r18	; 55
     58e:	0a c0       	rjmp	.+20     	; 0x5a4 <TIMER_COUNTER0enable+0x60>
     590:	27 b7       	in	r18, 0x37	; 55
     592:	22 60       	ori	r18, 0x02	; 2
     594:	27 bf       	out	0x37, r18	; 55
     596:	06 c0       	rjmp	.+12     	; 0x5a4 <TIMER_COUNTER0enable+0x60>
     598:	27 b7       	in	r18, 0x37	; 55
     59a:	21 60       	ori	r18, 0x01	; 1
     59c:	27 bf       	out	0x37, r18	; 55
     59e:	27 b7       	in	r18, 0x37	; 55
     5a0:	22 60       	ori	r18, 0x02	; 2
     5a2:	27 bf       	out	0x37, r18	; 55
     5a4:	2b ee       	ldi	r18, 0xEB	; 235
     5a6:	31 e0       	ldi	r19, 0x01	; 1
     5a8:	fc 01       	movw	r30, r24
     5aa:	31 83       	std	Z+1, r19	; 0x01
     5ac:	20 83       	st	Z, r18
     5ae:	20 e0       	ldi	r18, 0x00	; 0
     5b0:	32 e0       	ldi	r19, 0x02	; 2
     5b2:	37 83       	std	Z+7, r19	; 0x07
     5b4:	26 83       	std	Z+6, r18	; 0x06
     5b6:	26 ea       	ldi	r18, 0xA6	; 166
     5b8:	31 e0       	ldi	r19, 0x01	; 1
     5ba:	35 87       	std	Z+13, r19	; 0x0d
     5bc:	24 87       	std	Z+12, r18	; 0x0c
     5be:	22 e0       	ldi	r18, 0x02	; 2
     5c0:	32 e0       	ldi	r19, 0x02	; 2
     5c2:	37 87       	std	Z+15, r19	; 0x0f
     5c4:	26 87       	std	Z+14, r18	; 0x0e
     5c6:	08 95       	ret

000005c8 <TIMER_COUNTER1enable>:
     5c8:	0f 93       	push	r16
     5ca:	1f 93       	push	r17
     5cc:	dc 01       	movw	r26, r24
     5ce:	10 92 d9 01 	sts	0x01D9, r1	; 0x8001d9 <timer1_state>
     5d2:	8f b5       	in	r24, 0x2f	; 47
     5d4:	8c 7f       	andi	r24, 0xFC	; 252
     5d6:	8f bd       	out	0x2f, r24	; 47
     5d8:	8e b5       	in	r24, 0x2e	; 46
     5da:	87 7e       	andi	r24, 0xE7	; 231
     5dc:	8e bd       	out	0x2e, r24	; 46
     5de:	06 2f       	mov	r16, r22
     5e0:	10 e0       	ldi	r17, 0x00	; 0
     5e2:	f8 01       	movw	r30, r16
     5e4:	31 97       	sbiw	r30, 0x01	; 1
     5e6:	ef 30       	cpi	r30, 0x0F	; 15
     5e8:	f1 05       	cpc	r31, r1
     5ea:	08 f0       	brcs	.+2      	; 0x5ee <TIMER_COUNTER1enable+0x26>
     5ec:	5a c0       	rjmp	.+180    	; 0x6a2 <TIMER_COUNTER1enable+0xda>
     5ee:	ea 5b       	subi	r30, 0xBA	; 186
     5f0:	ff 4f       	sbci	r31, 0xFF	; 255
     5f2:	0c 94 57 12 	jmp	0x24ae	; 0x24ae <__tablejump2__>
     5f6:	8f b5       	in	r24, 0x2f	; 47
     5f8:	81 60       	ori	r24, 0x01	; 1
     5fa:	8f bd       	out	0x2f, r24	; 47
     5fc:	52 c0       	rjmp	.+164    	; 0x6a2 <TIMER_COUNTER1enable+0xda>
     5fe:	8f b5       	in	r24, 0x2f	; 47
     600:	82 60       	ori	r24, 0x02	; 2
     602:	8f bd       	out	0x2f, r24	; 47
     604:	4e c0       	rjmp	.+156    	; 0x6a2 <TIMER_COUNTER1enable+0xda>
     606:	8f b5       	in	r24, 0x2f	; 47
     608:	83 60       	ori	r24, 0x03	; 3
     60a:	8f bd       	out	0x2f, r24	; 47
     60c:	4a c0       	rjmp	.+148    	; 0x6a2 <TIMER_COUNTER1enable+0xda>
     60e:	8e b5       	in	r24, 0x2e	; 46
     610:	88 60       	ori	r24, 0x08	; 8
     612:	8e bd       	out	0x2e, r24	; 46
     614:	46 c0       	rjmp	.+140    	; 0x6a2 <TIMER_COUNTER1enable+0xda>
     616:	8f b5       	in	r24, 0x2f	; 47
     618:	81 60       	ori	r24, 0x01	; 1
     61a:	8f bd       	out	0x2f, r24	; 47
     61c:	8e b5       	in	r24, 0x2e	; 46
     61e:	88 60       	ori	r24, 0x08	; 8
     620:	8e bd       	out	0x2e, r24	; 46
     622:	3f c0       	rjmp	.+126    	; 0x6a2 <TIMER_COUNTER1enable+0xda>
     624:	8f b5       	in	r24, 0x2f	; 47
     626:	82 60       	ori	r24, 0x02	; 2
     628:	8f bd       	out	0x2f, r24	; 47
     62a:	8e b5       	in	r24, 0x2e	; 46
     62c:	88 60       	ori	r24, 0x08	; 8
     62e:	8e bd       	out	0x2e, r24	; 46
     630:	38 c0       	rjmp	.+112    	; 0x6a2 <TIMER_COUNTER1enable+0xda>
     632:	8f b5       	in	r24, 0x2f	; 47
     634:	83 60       	ori	r24, 0x03	; 3
     636:	8f bd       	out	0x2f, r24	; 47
     638:	8e b5       	in	r24, 0x2e	; 46
     63a:	88 60       	ori	r24, 0x08	; 8
     63c:	8e bd       	out	0x2e, r24	; 46
     63e:	31 c0       	rjmp	.+98     	; 0x6a2 <TIMER_COUNTER1enable+0xda>
     640:	8e b5       	in	r24, 0x2e	; 46
     642:	80 61       	ori	r24, 0x10	; 16
     644:	8e bd       	out	0x2e, r24	; 46
     646:	2d c0       	rjmp	.+90     	; 0x6a2 <TIMER_COUNTER1enable+0xda>
     648:	8f b5       	in	r24, 0x2f	; 47
     64a:	81 60       	ori	r24, 0x01	; 1
     64c:	8f bd       	out	0x2f, r24	; 47
     64e:	8e b5       	in	r24, 0x2e	; 46
     650:	80 61       	ori	r24, 0x10	; 16
     652:	8e bd       	out	0x2e, r24	; 46
     654:	26 c0       	rjmp	.+76     	; 0x6a2 <TIMER_COUNTER1enable+0xda>
     656:	8f b5       	in	r24, 0x2f	; 47
     658:	82 60       	ori	r24, 0x02	; 2
     65a:	8f bd       	out	0x2f, r24	; 47
     65c:	8e b5       	in	r24, 0x2e	; 46
     65e:	80 61       	ori	r24, 0x10	; 16
     660:	8e bd       	out	0x2e, r24	; 46
     662:	1f c0       	rjmp	.+62     	; 0x6a2 <TIMER_COUNTER1enable+0xda>
     664:	8f b5       	in	r24, 0x2f	; 47
     666:	83 60       	ori	r24, 0x03	; 3
     668:	8f bd       	out	0x2f, r24	; 47
     66a:	8e b5       	in	r24, 0x2e	; 46
     66c:	80 61       	ori	r24, 0x10	; 16
     66e:	8e bd       	out	0x2e, r24	; 46
     670:	18 c0       	rjmp	.+48     	; 0x6a2 <TIMER_COUNTER1enable+0xda>
     672:	8e b5       	in	r24, 0x2e	; 46
     674:	88 61       	ori	r24, 0x18	; 24
     676:	8e bd       	out	0x2e, r24	; 46
     678:	14 c0       	rjmp	.+40     	; 0x6a2 <TIMER_COUNTER1enable+0xda>
     67a:	8f b5       	in	r24, 0x2f	; 47
     67c:	81 60       	ori	r24, 0x01	; 1
     67e:	8f bd       	out	0x2f, r24	; 47
     680:	8e b5       	in	r24, 0x2e	; 46
     682:	88 61       	ori	r24, 0x18	; 24
     684:	8e bd       	out	0x2e, r24	; 46
     686:	0d c0       	rjmp	.+26     	; 0x6a2 <TIMER_COUNTER1enable+0xda>
     688:	8f b5       	in	r24, 0x2f	; 47
     68a:	82 60       	ori	r24, 0x02	; 2
     68c:	8f bd       	out	0x2f, r24	; 47
     68e:	8e b5       	in	r24, 0x2e	; 46
     690:	88 61       	ori	r24, 0x18	; 24
     692:	8e bd       	out	0x2e, r24	; 46
     694:	06 c0       	rjmp	.+12     	; 0x6a2 <TIMER_COUNTER1enable+0xda>
     696:	8f b5       	in	r24, 0x2f	; 47
     698:	83 60       	ori	r24, 0x03	; 3
     69a:	8f bd       	out	0x2f, r24	; 47
     69c:	8e b5       	in	r24, 0x2e	; 46
     69e:	88 61       	ori	r24, 0x18	; 24
     6a0:	8e bd       	out	0x2e, r24	; 46
     6a2:	8f b5       	in	r24, 0x2f	; 47
     6a4:	83 70       	andi	r24, 0x03	; 3
     6a6:	8f bd       	out	0x2f, r24	; 47
     6a8:	87 b7       	in	r24, 0x37	; 55
     6aa:	83 7c       	andi	r24, 0xC3	; 195
     6ac:	87 bf       	out	0x37, r24	; 55
     6ae:	ed e7       	ldi	r30, 0x7D	; 125
     6b0:	f0 e0       	ldi	r31, 0x00	; 0
     6b2:	80 81       	ld	r24, Z
     6b4:	8e 7f       	andi	r24, 0xFE	; 254
     6b6:	80 83       	st	Z, r24
     6b8:	50 e0       	ldi	r21, 0x00	; 0
     6ba:	fa 01       	movw	r30, r20
     6bc:	31 97       	sbiw	r30, 0x01	; 1
     6be:	ec 30       	cpi	r30, 0x0C	; 12
     6c0:	f1 05       	cpc	r31, r1
     6c2:	08 f0       	brcs	.+2      	; 0x6c6 <TIMER_COUNTER1enable+0xfe>
     6c4:	44 c0       	rjmp	.+136    	; 0x74e <TIMER_COUNTER1enable+0x186>
     6c6:	eb 5a       	subi	r30, 0xAB	; 171
     6c8:	ff 4f       	sbci	r31, 0xFF	; 255
     6ca:	0c 94 57 12 	jmp	0x24ae	; 0x24ae <__tablejump2__>
     6ce:	87 b7       	in	r24, 0x37	; 55
     6d0:	84 60       	ori	r24, 0x04	; 4
     6d2:	87 bf       	out	0x37, r24	; 55
     6d4:	3c c0       	rjmp	.+120    	; 0x74e <TIMER_COUNTER1enable+0x186>
     6d6:	87 b7       	in	r24, 0x37	; 55
     6d8:	80 61       	ori	r24, 0x10	; 16
     6da:	87 bf       	out	0x37, r24	; 55
     6dc:	38 c0       	rjmp	.+112    	; 0x74e <TIMER_COUNTER1enable+0x186>
     6de:	87 b7       	in	r24, 0x37	; 55
     6e0:	88 60       	ori	r24, 0x08	; 8
     6e2:	87 bf       	out	0x37, r24	; 55
     6e4:	34 c0       	rjmp	.+104    	; 0x74e <TIMER_COUNTER1enable+0x186>
     6e6:	ed e7       	ldi	r30, 0x7D	; 125
     6e8:	f0 e0       	ldi	r31, 0x00	; 0
     6ea:	80 81       	ld	r24, Z
     6ec:	81 60       	ori	r24, 0x01	; 1
     6ee:	80 83       	st	Z, r24
     6f0:	2e c0       	rjmp	.+92     	; 0x74e <TIMER_COUNTER1enable+0x186>
     6f2:	87 b7       	in	r24, 0x37	; 55
     6f4:	80 62       	ori	r24, 0x20	; 32
     6f6:	87 bf       	out	0x37, r24	; 55
     6f8:	2a c0       	rjmp	.+84     	; 0x74e <TIMER_COUNTER1enable+0x186>
     6fa:	87 b7       	in	r24, 0x37	; 55
     6fc:	84 61       	ori	r24, 0x14	; 20
     6fe:	87 bf       	out	0x37, r24	; 55
     700:	26 c0       	rjmp	.+76     	; 0x74e <TIMER_COUNTER1enable+0x186>
     702:	87 b7       	in	r24, 0x37	; 55
     704:	8c 60       	ori	r24, 0x0C	; 12
     706:	87 bf       	out	0x37, r24	; 55
     708:	22 c0       	rjmp	.+68     	; 0x74e <TIMER_COUNTER1enable+0x186>
     70a:	87 b7       	in	r24, 0x37	; 55
     70c:	84 60       	ori	r24, 0x04	; 4
     70e:	87 bf       	out	0x37, r24	; 55
     710:	ed e7       	ldi	r30, 0x7D	; 125
     712:	f0 e0       	ldi	r31, 0x00	; 0
     714:	80 81       	ld	r24, Z
     716:	81 60       	ori	r24, 0x01	; 1
     718:	80 83       	st	Z, r24
     71a:	19 c0       	rjmp	.+50     	; 0x74e <TIMER_COUNTER1enable+0x186>
     71c:	87 b7       	in	r24, 0x37	; 55
     71e:	84 62       	ori	r24, 0x24	; 36
     720:	87 bf       	out	0x37, r24	; 55
     722:	15 c0       	rjmp	.+42     	; 0x74e <TIMER_COUNTER1enable+0x186>
     724:	87 b7       	in	r24, 0x37	; 55
     726:	8c 61       	ori	r24, 0x1C	; 28
     728:	87 bf       	out	0x37, r24	; 55
     72a:	11 c0       	rjmp	.+34     	; 0x74e <TIMER_COUNTER1enable+0x186>
     72c:	87 b7       	in	r24, 0x37	; 55
     72e:	8c 61       	ori	r24, 0x1C	; 28
     730:	87 bf       	out	0x37, r24	; 55
     732:	ed e7       	ldi	r30, 0x7D	; 125
     734:	f0 e0       	ldi	r31, 0x00	; 0
     736:	80 81       	ld	r24, Z
     738:	81 60       	ori	r24, 0x01	; 1
     73a:	80 83       	st	Z, r24
     73c:	08 c0       	rjmp	.+16     	; 0x74e <TIMER_COUNTER1enable+0x186>
     73e:	87 b7       	in	r24, 0x37	; 55
     740:	88 61       	ori	r24, 0x18	; 24
     742:	87 bf       	out	0x37, r24	; 55
     744:	ed e7       	ldi	r30, 0x7D	; 125
     746:	f0 e0       	ldi	r31, 0x00	; 0
     748:	80 81       	ld	r24, Z
     74a:	81 60       	ori	r24, 0x01	; 1
     74c:	80 83       	st	Z, r24
     74e:	80 e5       	ldi	r24, 0x50	; 80
     750:	92 e0       	ldi	r25, 0x02	; 2
     752:	11 96       	adiw	r26, 0x01	; 1
     754:	9c 93       	st	X, r25
     756:	8e 93       	st	-X, r24
     758:	85 e6       	ldi	r24, 0x65	; 101
     75a:	92 e0       	ldi	r25, 0x02	; 2
     75c:	13 96       	adiw	r26, 0x03	; 3
     75e:	9c 93       	st	X, r25
     760:	8e 93       	st	-X, r24
     762:	12 97       	sbiw	r26, 0x02	; 2
     764:	8a e7       	ldi	r24, 0x7A	; 122
     766:	92 e0       	ldi	r25, 0x02	; 2
     768:	15 96       	adiw	r26, 0x05	; 5
     76a:	9c 93       	st	X, r25
     76c:	8e 93       	st	-X, r24
     76e:	14 97       	sbiw	r26, 0x04	; 4
     770:	8f e8       	ldi	r24, 0x8F	; 143
     772:	92 e0       	ldi	r25, 0x02	; 2
     774:	17 96       	adiw	r26, 0x07	; 7
     776:	9c 93       	st	X, r25
     778:	8e 93       	st	-X, r24
     77a:	16 97       	sbiw	r26, 0x06	; 6
     77c:	82 e9       	ldi	r24, 0x92	; 146
     77e:	92 e0       	ldi	r25, 0x02	; 2
     780:	19 96       	adiw	r26, 0x09	; 9
     782:	9c 93       	st	X, r25
     784:	8e 93       	st	-X, r24
     786:	18 97       	sbiw	r26, 0x08	; 8
     788:	85 e9       	ldi	r24, 0x95	; 149
     78a:	92 e0       	ldi	r25, 0x02	; 2
     78c:	1b 96       	adiw	r26, 0x0b	; 11
     78e:	9c 93       	st	X, r25
     790:	8e 93       	st	-X, r24
     792:	1a 97       	sbiw	r26, 0x0a	; 10
     794:	89 e0       	ldi	r24, 0x09	; 9
     796:	92 e0       	ldi	r25, 0x02	; 2
     798:	1d 96       	adiw	r26, 0x0d	; 13
     79a:	9c 93       	st	X, r25
     79c:	8e 93       	st	-X, r24
     79e:	1c 97       	sbiw	r26, 0x0c	; 12
     7a0:	8a e9       	ldi	r24, 0x9A	; 154
     7a2:	92 e0       	ldi	r25, 0x02	; 2
     7a4:	1f 96       	adiw	r26, 0x0f	; 15
     7a6:	9c 93       	st	X, r25
     7a8:	8e 93       	st	-X, r24
     7aa:	1e 97       	sbiw	r26, 0x0e	; 14
     7ac:	cd 01       	movw	r24, r26
     7ae:	1f 91       	pop	r17
     7b0:	0f 91       	pop	r16
     7b2:	08 95       	ret

000007b4 <__vector_16>:
/*
** interrupt
*/
// So that main will not freeze when not defined, but rather exclude.
//ISR(TIMER0_COMP_vect){ }
ISR(TIMER0_OVF_vect){ }
     7b4:	1f 92       	push	r1
     7b6:	0f 92       	push	r0
     7b8:	0f b6       	in	r0, 0x3f	; 63
     7ba:	0f 92       	push	r0
     7bc:	11 24       	eor	r1, r1
     7be:	0f 90       	pop	r0
     7c0:	0f be       	out	0x3f, r0	; 63
     7c2:	0f 90       	pop	r0
     7c4:	1f 90       	pop	r1
     7c6:	18 95       	reti

000007c8 <__vector_11>:
ISR(TIMER1_CAPT_vect){ }
     7c8:	1f 92       	push	r1
     7ca:	0f 92       	push	r0
     7cc:	0f b6       	in	r0, 0x3f	; 63
     7ce:	0f 92       	push	r0
     7d0:	11 24       	eor	r1, r1
     7d2:	0f 90       	pop	r0
     7d4:	0f be       	out	0x3f, r0	; 63
     7d6:	0f 90       	pop	r0
     7d8:	1f 90       	pop	r1
     7da:	18 95       	reti

000007dc <__vector_12>:
ISR(TIMER1_COMPA_vect){ }
     7dc:	1f 92       	push	r1
     7de:	0f 92       	push	r0
     7e0:	0f b6       	in	r0, 0x3f	; 63
     7e2:	0f 92       	push	r0
     7e4:	11 24       	eor	r1, r1
     7e6:	0f 90       	pop	r0
     7e8:	0f be       	out	0x3f, r0	; 63
     7ea:	0f 90       	pop	r0
     7ec:	1f 90       	pop	r1
     7ee:	18 95       	reti

000007f0 <__vector_13>:
ISR(TIMER1_COMPB_vect){ }
     7f0:	1f 92       	push	r1
     7f2:	0f 92       	push	r0
     7f4:	0f b6       	in	r0, 0x3f	; 63
     7f6:	0f 92       	push	r0
     7f8:	11 24       	eor	r1, r1
     7fa:	0f 90       	pop	r0
     7fc:	0f be       	out	0x3f, r0	; 63
     7fe:	0f 90       	pop	r0
     800:	1f 90       	pop	r1
     802:	18 95       	reti

00000804 <__vector_24>:
ISR(TIMER1_COMPC_vect){ }
     804:	1f 92       	push	r1
     806:	0f 92       	push	r0
     808:	0f b6       	in	r0, 0x3f	; 63
     80a:	0f 92       	push	r0
     80c:	11 24       	eor	r1, r1
     80e:	0f 90       	pop	r0
     810:	0f be       	out	0x3f, r0	; 63
     812:	0f 90       	pop	r0
     814:	1f 90       	pop	r1
     816:	18 95       	reti

00000818 <__vector_14>:
ISR(TIMER1_OVF_vect){ }
     818:	1f 92       	push	r1
     81a:	0f 92       	push	r0
     81c:	0f b6       	in	r0, 0x3f	; 63
     81e:	0f 92       	push	r0
     820:	11 24       	eor	r1, r1
     822:	0f 90       	pop	r0
     824:	0f be       	out	0x3f, r0	; 63
     826:	0f 90       	pop	r0
     828:	1f 90       	pop	r1
     82a:	18 95       	reti

0000082c <__vector_10>:
ISR(TIMER2_OVF_vect){ }
     82c:	1f 92       	push	r1
     82e:	0f 92       	push	r0
     830:	0f b6       	in	r0, 0x3f	; 63
     832:	0f 92       	push	r0
     834:	11 24       	eor	r1, r1
     836:	0f 90       	pop	r0
     838:	0f be       	out	0x3f, r0	; 63
     83a:	0f 90       	pop	r0
     83c:	1f 90       	pop	r1
     83e:	18 95       	reti

00000840 <__vector_25>:
ISR(TIMER3_CAPT_vect){ }
     840:	1f 92       	push	r1
     842:	0f 92       	push	r0
     844:	0f b6       	in	r0, 0x3f	; 63
     846:	0f 92       	push	r0
     848:	11 24       	eor	r1, r1
     84a:	0f 90       	pop	r0
     84c:	0f be       	out	0x3f, r0	; 63
     84e:	0f 90       	pop	r0
     850:	1f 90       	pop	r1
     852:	18 95       	reti

00000854 <__vector_26>:
ISR(TIMER3_COMPA_vect){ }
     854:	1f 92       	push	r1
     856:	0f 92       	push	r0
     858:	0f b6       	in	r0, 0x3f	; 63
     85a:	0f 92       	push	r0
     85c:	11 24       	eor	r1, r1
     85e:	0f 90       	pop	r0
     860:	0f be       	out	0x3f, r0	; 63
     862:	0f 90       	pop	r0
     864:	1f 90       	pop	r1
     866:	18 95       	reti

00000868 <__vector_27>:
ISR(TIMER3_COMPB_vect){ }
     868:	1f 92       	push	r1
     86a:	0f 92       	push	r0
     86c:	0f b6       	in	r0, 0x3f	; 63
     86e:	0f 92       	push	r0
     870:	11 24       	eor	r1, r1
     872:	0f 90       	pop	r0
     874:	0f be       	out	0x3f, r0	; 63
     876:	0f 90       	pop	r0
     878:	1f 90       	pop	r1
     87a:	18 95       	reti

0000087c <__vector_28>:
ISR(TIMER3_COMPC_vect){ }
     87c:	1f 92       	push	r1
     87e:	0f 92       	push	r0
     880:	0f b6       	in	r0, 0x3f	; 63
     882:	0f 92       	push	r0
     884:	11 24       	eor	r1, r1
     886:	0f 90       	pop	r0
     888:	0f be       	out	0x3f, r0	; 63
     88a:	0f 90       	pop	r0
     88c:	1f 90       	pop	r1
     88e:	18 95       	reti

00000890 <__vector_29>:
ISR(TIMER3_OVF_vect){ }
     890:	1f 92       	push	r1
     892:	0f 92       	push	r0
     894:	0f b6       	in	r0, 0x3f	; 63
     896:	0f 92       	push	r0
     898:	11 24       	eor	r1, r1
     89a:	0f 90       	pop	r0
     89c:	0f be       	out	0x3f, r0	; 63
     89e:	0f 90       	pop	r0
     8a0:	1f 90       	pop	r1
     8a2:	18 95       	reti

000008a4 <__vector_18>:
void uart1_puts_p(const char *progmem_s )
{
    register char c;
    while ( (c = pgm_read_byte(progmem_s++)) ) 
      uart1_putc(c);
}/* uart1_puts_p */
     8a4:	1f 92       	push	r1
     8a6:	0f 92       	push	r0
     8a8:	0f b6       	in	r0, 0x3f	; 63
     8aa:	0f 92       	push	r0
     8ac:	11 24       	eor	r1, r1
     8ae:	0b b6       	in	r0, 0x3b	; 59
     8b0:	0f 92       	push	r0
     8b2:	8f 93       	push	r24
     8b4:	9f 93       	push	r25
     8b6:	ef 93       	push	r30
     8b8:	ff 93       	push	r31
     8ba:	8b b1       	in	r24, 0x0b	; 11
     8bc:	9a b1       	in	r25, 0x0a	; 10
     8be:	88 71       	andi	r24, 0x18	; 24
     8c0:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <UART_LastRxError>
     8c4:	e0 91 96 01 	lds	r30, 0x0196	; 0x800196 <UART_RxHead>
     8c8:	ef 5f       	subi	r30, 0xFF	; 255
     8ca:	ef 71       	andi	r30, 0x1F	; 31
     8cc:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <UART_RxTail>
     8d0:	e8 13       	cpse	r30, r24
     8d2:	04 c0       	rjmp	.+8      	; 0x8dc <__vector_18+0x38>
     8d4:	82 e0       	ldi	r24, 0x02	; 2
     8d6:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <UART_LastRxError>
     8da:	11 c0       	rjmp	.+34     	; 0x8fe <__vector_18+0x5a>
     8dc:	9c b1       	in	r25, 0x0c	; 12
     8de:	e0 93 96 01 	sts	0x0196, r30	; 0x800196 <UART_RxHead>
     8e2:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <UART_LastRxError>
     8e6:	88 23       	and	r24, r24
     8e8:	31 f0       	breq	.+12     	; 0x8f6 <__vector_18+0x52>
     8ea:	f0 e0       	ldi	r31, 0x00	; 0
     8ec:	e7 56       	subi	r30, 0x67	; 103
     8ee:	fe 4f       	sbci	r31, 0xFE	; 254
     8f0:	88 e5       	ldi	r24, 0x58	; 88
     8f2:	80 83       	st	Z, r24
     8f4:	04 c0       	rjmp	.+8      	; 0x8fe <__vector_18+0x5a>
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	e7 56       	subi	r30, 0x67	; 103
     8fa:	fe 4f       	sbci	r31, 0xFE	; 254
     8fc:	90 83       	st	Z, r25
     8fe:	ff 91       	pop	r31
     900:	ef 91       	pop	r30
     902:	9f 91       	pop	r25
     904:	8f 91       	pop	r24
     906:	0f 90       	pop	r0
     908:	0b be       	out	0x3b, r0	; 59
     90a:	0f 90       	pop	r0
     90c:	0f be       	out	0x3f, r0	; 63
     90e:	0f 90       	pop	r0
     910:	1f 90       	pop	r1
     912:	18 95       	reti

00000914 <__vector_19>:
     914:	1f 92       	push	r1
     916:	0f 92       	push	r0
     918:	0f b6       	in	r0, 0x3f	; 63
     91a:	0f 92       	push	r0
     91c:	11 24       	eor	r1, r1
     91e:	0b b6       	in	r0, 0x3b	; 59
     920:	0f 92       	push	r0
     922:	8f 93       	push	r24
     924:	9f 93       	push	r25
     926:	ef 93       	push	r30
     928:	ff 93       	push	r31
     92a:	90 91 98 01 	lds	r25, 0x0198	; 0x800198 <UART_TxHead>
     92e:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <UART_TxTail>
     932:	98 13       	cpse	r25, r24
     934:	02 c0       	rjmp	.+4      	; 0x93a <__vector_19+0x26>
     936:	55 98       	cbi	0x0a, 5	; 10
     938:	0b c0       	rjmp	.+22     	; 0x950 <__vector_19+0x3c>
     93a:	e0 91 97 01 	lds	r30, 0x0197	; 0x800197 <UART_TxTail>
     93e:	ef 5f       	subi	r30, 0xFF	; 255
     940:	ef 71       	andi	r30, 0x1F	; 31
     942:	e0 93 97 01 	sts	0x0197, r30	; 0x800197 <UART_TxTail>
     946:	f0 e0       	ldi	r31, 0x00	; 0
     948:	e7 54       	subi	r30, 0x47	; 71
     94a:	fe 4f       	sbci	r31, 0xFE	; 254
     94c:	80 81       	ld	r24, Z
     94e:	8c b9       	out	0x0c, r24	; 12
     950:	ff 91       	pop	r31
     952:	ef 91       	pop	r30
     954:	9f 91       	pop	r25
     956:	8f 91       	pop	r24
     958:	0f 90       	pop	r0
     95a:	0b be       	out	0x3b, r0	; 59
     95c:	0f 90       	pop	r0
     95e:	0f be       	out	0x3f, r0	; 63
     960:	0f 90       	pop	r0
     962:	1f 90       	pop	r1
     964:	18 95       	reti

00000966 <__vector_30>:
SIGNAL(UART1_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART1 Receive Complete interrupt
Purpose:  called when the UART1 has received a character
**************************************************************************/
{
     966:	1f 92       	push	r1
     968:	0f 92       	push	r0
     96a:	0f b6       	in	r0, 0x3f	; 63
     96c:	0f 92       	push	r0
     96e:	11 24       	eor	r1, r1
     970:	0b b6       	in	r0, 0x3b	; 59
     972:	0f 92       	push	r0
     974:	8f 93       	push	r24
     976:	9f 93       	push	r25
     978:	ef 93       	push	r30
     97a:	ff 93       	push	r31
    unsigned char tmphead;
	unsigned char data;
	unsigned char bit9;
    unsigned char usr;
    /* read UART status register and UART data register */
	usr  = UART1_STATUS;
     97c:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    bit9 = UART1_CONTROL;
     980:	90 91 9a 00 	lds	r25, 0x009A	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
    bit9 = 0x01 & (bit9>>1);
    /* */
    UART1_LastRxError = (usr & (_BV(FE1)|_BV(DOR1)));
     984:	88 71       	andi	r24, 0x18	; 24
     986:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <UART1_LastRxError>
	/* calculate buffer index */
    tmphead = ( UART1_RxHead + 1) & UART_RX_BUFFER_MASK;
     98a:	e0 91 51 01 	lds	r30, 0x0151	; 0x800151 <UART1_RxHead>
     98e:	ef 5f       	subi	r30, 0xFF	; 255
     990:	ef 71       	andi	r30, 0x1F	; 31
    if ( tmphead == UART1_RxTail ) {	
     992:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <UART1_RxTail>
     996:	e8 13       	cpse	r30, r24
     998:	04 c0       	rjmp	.+8      	; 0x9a2 <__vector_30+0x3c>
        /* error: receive buffer overflow, caracter is lost*/
        UART1_LastRxError = UART_BUFFER_OVERFLOW >> 8; 
     99a:	82 e0       	ldi	r24, 0x02	; 2
     99c:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <UART1_LastRxError>
     9a0:	12 c0       	rjmp	.+36     	; 0x9c6 <__vector_30+0x60>
	}else{
		data = UART1_DATA;
     9a2:	90 91 9c 00 	lds	r25, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
        /* store new index */
        UART1_RxHead = tmphead;
     9a6:	e0 93 51 01 	sts	0x0151, r30	; 0x800151 <UART1_RxHead>
		if(UART1_LastRxError){
     9aa:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <UART1_LastRxError>
     9ae:	88 23       	and	r24, r24
     9b0:	31 f0       	breq	.+12     	; 0x9be <__vector_30+0x58>
			/* store indication data error in buffer */
			UART1_RxBuf[tmphead] = 'X';
     9b2:	f0 e0       	ldi	r31, 0x00	; 0
     9b4:	ec 5a       	subi	r30, 0xAC	; 172
     9b6:	fe 4f       	sbci	r31, 0xFE	; 254
     9b8:	88 e5       	ldi	r24, 0x58	; 88
     9ba:	80 83       	st	Z, r24
     9bc:	04 c0       	rjmp	.+8      	; 0x9c6 <__vector_30+0x60>
		}else{
			/* store received data in buffer */
			UART1_RxBuf[tmphead] = data;
     9be:	f0 e0       	ldi	r31, 0x00	; 0
     9c0:	ec 5a       	subi	r30, 0xAC	; 172
     9c2:	fe 4f       	sbci	r31, 0xFE	; 254
     9c4:	90 83       	st	Z, r25
		}
    }
}
     9c6:	ff 91       	pop	r31
     9c8:	ef 91       	pop	r30
     9ca:	9f 91       	pop	r25
     9cc:	8f 91       	pop	r24
     9ce:	0f 90       	pop	r0
     9d0:	0b be       	out	0x3b, r0	; 59
     9d2:	0f 90       	pop	r0
     9d4:	0f be       	out	0x3f, r0	; 63
     9d6:	0f 90       	pop	r0
     9d8:	1f 90       	pop	r1
     9da:	18 95       	reti

000009dc <__vector_31>:
SIGNAL(UART1_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART1 Data Register Empty interrupt
Purpose:  called when the UART1 is ready to transmit the next byte
**************************************************************************/
{
     9dc:	1f 92       	push	r1
     9de:	0f 92       	push	r0
     9e0:	0f b6       	in	r0, 0x3f	; 63
     9e2:	0f 92       	push	r0
     9e4:	11 24       	eor	r1, r1
     9e6:	0b b6       	in	r0, 0x3b	; 59
     9e8:	0f 92       	push	r0
     9ea:	8f 93       	push	r24
     9ec:	9f 93       	push	r25
     9ee:	ef 93       	push	r30
     9f0:	ff 93       	push	r31
    if ( UART1_TxHead == UART1_TxTail ) {
     9f2:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <UART1_TxHead>
     9f6:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <UART1_TxTail>
     9fa:	98 13       	cpse	r25, r24
     9fc:	06 c0       	rjmp	.+12     	; 0xa0a <__vector_31+0x2e>
        /* tx buffer empty, disable UDRE interrupt */
        UART1_CONTROL &= ~_BV(UART1_UDRIE);
     9fe:	ea e9       	ldi	r30, 0x9A	; 154
     a00:	f0 e0       	ldi	r31, 0x00	; 0
     a02:	80 81       	ld	r24, Z
     a04:	8f 7d       	andi	r24, 0xDF	; 223
     a06:	80 83       	st	Z, r24
     a08:	0e c0       	rjmp	.+28     	; 0xa26 <__vector_31+0x4a>
    }else{
		/* calculate and store new buffer index */
        UART1_TxTail = (UART1_TxTail + 1) & UART_TX_BUFFER_MASK;
     a0a:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <UART1_TxTail>
     a0e:	8f 5f       	subi	r24, 0xFF	; 255
     a10:	8f 71       	andi	r24, 0x1F	; 31
     a12:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <UART1_TxTail>
        /* get one byte from buffer and write it to UART */
		UART1_DATA = UART1_TxBuf[UART1_TxTail];  /* start transmission */
     a16:	e0 91 52 01 	lds	r30, 0x0152	; 0x800152 <UART1_TxTail>
     a1a:	f0 e0       	ldi	r31, 0x00	; 0
     a1c:	ec 58       	subi	r30, 0x8C	; 140
     a1e:	fe 4f       	sbci	r31, 0xFE	; 254
     a20:	80 81       	ld	r24, Z
     a22:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
	}
}
     a26:	ff 91       	pop	r31
     a28:	ef 91       	pop	r30
     a2a:	9f 91       	pop	r25
     a2c:	8f 91       	pop	r24
     a2e:	0f 90       	pop	r0
     a30:	0b be       	out	0x3b, r0	; 59
     a32:	0f 90       	pop	r0
     a34:	0f be       	out	0x3f, r0	; 63
     a36:	0f 90       	pop	r0
     a38:	1f 90       	pop	r1
     a3a:	18 95       	reti

00000a3c <CLOCK_set>:
	clock.show=CLOCK_show;
	return clock;
}
void CLOCK_set(uint8_t hour, uint8_t minute, uint8_t second)
{
	time.hour=hour;
     a3c:	ea ee       	ldi	r30, 0xEA	; 234
     a3e:	f1 e0       	ldi	r31, 0x01	; 1
     a40:	80 83       	st	Z, r24
	time.minute=minute;
     a42:	61 83       	std	Z+1, r22	; 0x01
	time.second=second;
     a44:	42 83       	std	Z+2, r20	; 0x02
     a46:	08 95       	ret

00000a48 <CLOCK_increment>:
}
void CLOCK_increment(void)
{
	time.second++;
     a48:	ea ee       	ldi	r30, 0xEA	; 234
     a4a:	f1 e0       	ldi	r31, 0x01	; 1
     a4c:	82 81       	ldd	r24, Z+2	; 0x02
     a4e:	8f 5f       	subi	r24, 0xFF	; 255
     a50:	82 83       	std	Z+2, r24	; 0x02
	if(time.second>59){
     a52:	8c 33       	cpi	r24, 0x3C	; 60
     a54:	0c f4       	brge	.+2      	; 0xa58 <CLOCK_increment+0x10>
     a56:	7a c0       	rjmp	.+244    	; 0xb4c <CLOCK_increment+0x104>
		time.minute++;
     a58:	81 81       	ldd	r24, Z+1	; 0x01
     a5a:	8f 5f       	subi	r24, 0xFF	; 255
     a5c:	81 83       	std	Z+1, r24	; 0x01
		time.second=0;
     a5e:	12 82       	std	Z+2, r1	; 0x02
		if(time.minute>59){
     a60:	8c 33       	cpi	r24, 0x3C	; 60
     a62:	44 f0       	brlt	.+16     	; 0xa74 <CLOCK_increment+0x2c>
			time.hour++;
     a64:	80 81       	ld	r24, Z
     a66:	8f 5f       	subi	r24, 0xFF	; 255
     a68:	80 83       	st	Z, r24
			time.minute=0;
     a6a:	11 82       	std	Z+1, r1	; 0x01
			switch (HORA){
				case 24:
					if(time.hour>23)
     a6c:	88 31       	cpi	r24, 0x18	; 24
     a6e:	14 f0       	brlt	.+4      	; 0xa74 <CLOCK_increment+0x2c>
						time.hour=0;
     a70:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <time>
					break;
			}
		}
	}
	/******************************************************************************************************************/
	if(time.hour==laptime.hour && CLOCK_compare_active==4)
     a74:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <time>
     a78:	90 91 ed 01 	lds	r25, 0x01ED	; 0x8001ed <laptime>
     a7c:	89 13       	cpse	r24, r25
     a7e:	2a c0       	rjmp	.+84     	; 0xad4 <CLOCK_increment+0x8c>
     a80:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <CLOCK_compare_active>
     a84:	94 30       	cpi	r25, 0x04	; 4
     a86:	09 f0       	breq	.+2      	; 0xa8a <CLOCK_increment+0x42>
     a88:	53 c0       	rjmp	.+166    	; 0xb30 <CLOCK_increment+0xe8>
		CLOCK_compare_active=3;
     a8a:	93 e0       	ldi	r25, 0x03	; 3
     a8c:	90 93 f0 01 	sts	0x01F0, r25	; 0x8001f0 <CLOCK_compare_active>
	if(time.hour==laptime.hour && time.minute==laptime.minute && CLOCK_compare_active==3)
     a90:	20 91 ee 01 	lds	r18, 0x01EE	; 0x8001ee <laptime+0x1>
     a94:	90 91 eb 01 	lds	r25, 0x01EB	; 0x8001eb <time+0x1>
     a98:	29 13       	cpse	r18, r25
     a9a:	09 c0       	rjmp	.+18     	; 0xaae <CLOCK_increment+0x66>
     a9c:	04 c0       	rjmp	.+8      	; 0xaa6 <CLOCK_increment+0x5e>
     a9e:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <CLOCK_compare_active>
     aa2:	93 30       	cpi	r25, 0x03	; 3
     aa4:	51 f4       	brne	.+20     	; 0xaba <CLOCK_increment+0x72>
		CLOCK_compare_active=2;
     aa6:	92 e0       	ldi	r25, 0x02	; 2
     aa8:	90 93 f0 01 	sts	0x01F0, r25	; 0x8001f0 <CLOCK_compare_active>
     aac:	06 c0       	rjmp	.+12     	; 0xaba <CLOCK_increment+0x72>
	if(time.hour==laptime.hour && time.minute==laptime.minute && time.second==laptime.second && CLOCK_compare_active==2)
     aae:	20 91 eb 01 	lds	r18, 0x01EB	; 0x8001eb <time+0x1>
     ab2:	90 91 ee 01 	lds	r25, 0x01EE	; 0x8001ee <laptime+0x1>
     ab6:	29 13       	cpse	r18, r25
     ab8:	0d c0       	rjmp	.+26     	; 0xad4 <CLOCK_increment+0x8c>
     aba:	20 91 ec 01 	lds	r18, 0x01EC	; 0x8001ec <time+0x2>
     abe:	90 91 ef 01 	lds	r25, 0x01EF	; 0x8001ef <laptime+0x2>
     ac2:	29 13       	cpse	r18, r25
     ac4:	07 c0       	rjmp	.+14     	; 0xad4 <CLOCK_increment+0x8c>
     ac6:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <CLOCK_compare_active>
     aca:	92 30       	cpi	r25, 0x02	; 2
     acc:	19 f4       	brne	.+6      	; 0xad4 <CLOCK_increment+0x8c>
		CLOCK_compare_active=1;
     ace:	91 e0       	ldi	r25, 0x01	; 1
     ad0:	90 93 f0 01 	sts	0x01F0, r25	; 0x8001f0 <CLOCK_compare_active>
	/******************************************************************************************************************/
	if(time.hour==alarmtime.hour && CLOCK_alarm_flag==4)
     ad4:	90 91 e7 01 	lds	r25, 0x01E7	; 0x8001e7 <alarmtime>
     ad8:	98 13       	cpse	r25, r24
     ada:	3f c0       	rjmp	.+126    	; 0xb5a <CLOCK_increment+0x112>
     adc:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <CLOCK_alarm_flag>
     ae0:	84 30       	cpi	r24, 0x04	; 4
     ae2:	69 f5       	brne	.+90     	; 0xb3e <CLOCK_increment+0xf6>
		CLOCK_alarm_flag=3;
     ae4:	83 e0       	ldi	r24, 0x03	; 3
     ae6:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <CLOCK_alarm_flag>
	if(time.hour==alarmtime.hour && time.minute==alarmtime.minute && CLOCK_alarm_flag==3)
     aea:	90 91 eb 01 	lds	r25, 0x01EB	; 0x8001eb <time+0x1>
     aee:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <alarmtime+0x1>
     af2:	98 13       	cpse	r25, r24
     af4:	09 c0       	rjmp	.+18     	; 0xb08 <CLOCK_increment+0xc0>
     af6:	04 c0       	rjmp	.+8      	; 0xb00 <CLOCK_increment+0xb8>
     af8:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <CLOCK_alarm_flag>
     afc:	83 30       	cpi	r24, 0x03	; 3
     afe:	51 f4       	brne	.+20     	; 0xb14 <CLOCK_increment+0xcc>
		CLOCK_alarm_flag=2;
     b00:	82 e0       	ldi	r24, 0x02	; 2
     b02:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <CLOCK_alarm_flag>
     b06:	06 c0       	rjmp	.+12     	; 0xb14 <CLOCK_increment+0xcc>
	if(time.hour==alarmtime.hour && time.minute==alarmtime.minute && time.second==alarmtime.second && CLOCK_alarm_flag==2)
     b08:	90 91 eb 01 	lds	r25, 0x01EB	; 0x8001eb <time+0x1>
     b0c:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <alarmtime+0x1>
     b10:	98 13       	cpse	r25, r24
     b12:	23 c0       	rjmp	.+70     	; 0xb5a <CLOCK_increment+0x112>
     b14:	90 91 ec 01 	lds	r25, 0x01EC	; 0x8001ec <time+0x2>
     b18:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <alarmtime+0x2>
     b1c:	98 13       	cpse	r25, r24
     b1e:	1d c0       	rjmp	.+58     	; 0xb5a <CLOCK_increment+0x112>
     b20:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <CLOCK_alarm_flag>
     b24:	82 30       	cpi	r24, 0x02	; 2
     b26:	c9 f4       	brne	.+50     	; 0xb5a <CLOCK_increment+0x112>
		CLOCK_alarm_flag=1;
     b28:	81 e0       	ldi	r24, 0x01	; 1
     b2a:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <CLOCK_alarm_flag>
}
     b2e:	08 95       	ret
		}
	}
	/******************************************************************************************************************/
	if(time.hour==laptime.hour && CLOCK_compare_active==4)
		CLOCK_compare_active=3;
	if(time.hour==laptime.hour && time.minute==laptime.minute && CLOCK_compare_active==3)
     b30:	20 91 eb 01 	lds	r18, 0x01EB	; 0x8001eb <time+0x1>
     b34:	90 91 ee 01 	lds	r25, 0x01EE	; 0x8001ee <laptime+0x1>
     b38:	29 13       	cpse	r18, r25
     b3a:	cc cf       	rjmp	.-104    	; 0xad4 <CLOCK_increment+0x8c>
     b3c:	b0 cf       	rjmp	.-160    	; 0xa9e <CLOCK_increment+0x56>
	if(time.hour==laptime.hour && time.minute==laptime.minute && time.second==laptime.second && CLOCK_compare_active==2)
		CLOCK_compare_active=1;
	/******************************************************************************************************************/
	if(time.hour==alarmtime.hour && CLOCK_alarm_flag==4)
		CLOCK_alarm_flag=3;
	if(time.hour==alarmtime.hour && time.minute==alarmtime.minute && CLOCK_alarm_flag==3)
     b3e:	90 91 eb 01 	lds	r25, 0x01EB	; 0x8001eb <time+0x1>
     b42:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <alarmtime+0x1>
     b46:	98 13       	cpse	r25, r24
     b48:	08 c0       	rjmp	.+16     	; 0xb5a <CLOCK_increment+0x112>
     b4a:	d6 cf       	rjmp	.-84     	; 0xaf8 <CLOCK_increment+0xb0>
					break;
			}
		}
	}
	/******************************************************************************************************************/
	if(time.hour==laptime.hour && CLOCK_compare_active==4)
     b4c:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <time>
     b50:	90 91 ed 01 	lds	r25, 0x01ED	; 0x8001ed <laptime>
     b54:	98 13       	cpse	r25, r24
     b56:	be cf       	rjmp	.-132    	; 0xad4 <CLOCK_increment+0x8c>
     b58:	93 cf       	rjmp	.-218    	; 0xa80 <CLOCK_increment+0x38>
     b5a:	08 95       	ret

00000b5c <CLOCK_decrement>:
	if(time.hour==alarmtime.hour && time.minute==alarmtime.minute && time.second==alarmtime.second && CLOCK_alarm_flag==2)
		CLOCK_alarm_flag=1;
}
void CLOCK_decrement(void)
{
	time.second--;
     b5c:	ea ee       	ldi	r30, 0xEA	; 234
     b5e:	f1 e0       	ldi	r31, 0x01	; 1
     b60:	82 81       	ldd	r24, Z+2	; 0x02
     b62:	81 50       	subi	r24, 0x01	; 1
     b64:	82 83       	std	Z+2, r24	; 0x02
	if(time.second<0){
     b66:	88 23       	and	r24, r24
     b68:	0c f0       	brlt	.+2      	; 0xb6c <CLOCK_decrement+0x10>
     b6a:	47 c0       	rjmp	.+142    	; 0xbfa <CLOCK_decrement+0x9e>
		time.minute--;
     b6c:	81 81       	ldd	r24, Z+1	; 0x01
     b6e:	81 50       	subi	r24, 0x01	; 1
     b70:	81 83       	std	Z+1, r24	; 0x01
		time.second=59;
     b72:	9b e3       	ldi	r25, 0x3B	; 59
     b74:	92 83       	std	Z+2, r25	; 0x02
		if(time.minute<0){
     b76:	88 23       	and	r24, r24
     b78:	4c f4       	brge	.+18     	; 0xb8c <CLOCK_decrement+0x30>
			time.hour--;
     b7a:	80 81       	ld	r24, Z
     b7c:	81 50       	subi	r24, 0x01	; 1
     b7e:	80 83       	st	Z, r24
			time.minute=59;
     b80:	91 83       	std	Z+1, r25	; 0x01
			switch (HORA){
				case 24:
					if(time.hour<0)
     b82:	88 23       	and	r24, r24
     b84:	1c f4       	brge	.+6      	; 0xb8c <CLOCK_decrement+0x30>
						time.hour=23;
     b86:	87 e1       	ldi	r24, 0x17	; 23
     b88:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <time>
					break;
			}
		}
	}
	/******************************************************************************************************************/
	if(time.hour==alarmtime.hour && CLOCK_alarm_flag==4)
     b8c:	90 91 ea 01 	lds	r25, 0x01EA	; 0x8001ea <time>
     b90:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <alarmtime>
     b94:	98 13       	cpse	r25, r24
     b96:	37 c0       	rjmp	.+110    	; 0xc06 <CLOCK_decrement+0xaa>
     b98:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <CLOCK_alarm_flag>
     b9c:	84 30       	cpi	r24, 0x04	; 4
     b9e:	31 f5       	brne	.+76     	; 0xbec <CLOCK_decrement+0x90>
		CLOCK_alarm_flag=3;
     ba0:	83 e0       	ldi	r24, 0x03	; 3
     ba2:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <CLOCK_alarm_flag>
	if(time.hour==alarmtime.hour && time.minute==alarmtime.minute && CLOCK_alarm_flag==3)
     ba6:	90 91 eb 01 	lds	r25, 0x01EB	; 0x8001eb <time+0x1>
     baa:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <alarmtime+0x1>
     bae:	98 13       	cpse	r25, r24
     bb0:	09 c0       	rjmp	.+18     	; 0xbc4 <CLOCK_decrement+0x68>
     bb2:	04 c0       	rjmp	.+8      	; 0xbbc <CLOCK_decrement+0x60>
     bb4:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <CLOCK_alarm_flag>
     bb8:	83 30       	cpi	r24, 0x03	; 3
     bba:	51 f4       	brne	.+20     	; 0xbd0 <CLOCK_decrement+0x74>
		CLOCK_alarm_flag=2;
     bbc:	82 e0       	ldi	r24, 0x02	; 2
     bbe:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <CLOCK_alarm_flag>
     bc2:	06 c0       	rjmp	.+12     	; 0xbd0 <CLOCK_decrement+0x74>
	if(time.hour==alarmtime.hour && time.minute==alarmtime.minute && time.second==alarmtime.second && CLOCK_alarm_flag==2)
     bc4:	90 91 eb 01 	lds	r25, 0x01EB	; 0x8001eb <time+0x1>
     bc8:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <alarmtime+0x1>
     bcc:	98 13       	cpse	r25, r24
     bce:	1b c0       	rjmp	.+54     	; 0xc06 <CLOCK_decrement+0xaa>
     bd0:	90 91 ec 01 	lds	r25, 0x01EC	; 0x8001ec <time+0x2>
     bd4:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <alarmtime+0x2>
     bd8:	98 13       	cpse	r25, r24
     bda:	15 c0       	rjmp	.+42     	; 0xc06 <CLOCK_decrement+0xaa>
     bdc:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <CLOCK_alarm_flag>
     be0:	82 30       	cpi	r24, 0x02	; 2
     be2:	89 f4       	brne	.+34     	; 0xc06 <CLOCK_decrement+0xaa>
		CLOCK_alarm_flag=1;		
     be4:	81 e0       	ldi	r24, 0x01	; 1
     be6:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <CLOCK_alarm_flag>
}
     bea:	08 95       	ret
		}
	}
	/******************************************************************************************************************/
	if(time.hour==alarmtime.hour && CLOCK_alarm_flag==4)
		CLOCK_alarm_flag=3;
	if(time.hour==alarmtime.hour && time.minute==alarmtime.minute && CLOCK_alarm_flag==3)
     bec:	90 91 eb 01 	lds	r25, 0x01EB	; 0x8001eb <time+0x1>
     bf0:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <alarmtime+0x1>
     bf4:	98 13       	cpse	r25, r24
     bf6:	07 c0       	rjmp	.+14     	; 0xc06 <CLOCK_decrement+0xaa>
     bf8:	dd cf       	rjmp	.-70     	; 0xbb4 <CLOCK_decrement+0x58>
					break;
			}
		}
	}
	/******************************************************************************************************************/
	if(time.hour==alarmtime.hour && CLOCK_alarm_flag==4)
     bfa:	90 91 ea 01 	lds	r25, 0x01EA	; 0x8001ea <time>
     bfe:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <alarmtime>
     c02:	98 17       	cp	r25, r24
     c04:	49 f2       	breq	.-110    	; 0xb98 <CLOCK_decrement+0x3c>
     c06:	08 95       	ret

00000c08 <CLOCK_alarm>:
	if(time.hour==alarmtime.hour && time.minute==alarmtime.minute && time.second==alarmtime.second && CLOCK_alarm_flag==2)
		CLOCK_alarm_flag=1;		
}
uint8_t CLOCK_alarm(uint8_t hour, uint8_t minute, uint8_t second)
{
	if(!CLOCK_alarm_flag){
     c08:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <CLOCK_alarm_flag>
     c0c:	91 11       	cpse	r25, r1
     c0e:	08 c0       	rjmp	.+16     	; 0xc20 <CLOCK_alarm+0x18>
		alarmtime.hour=hour;
     c10:	e7 ee       	ldi	r30, 0xE7	; 231
     c12:	f1 e0       	ldi	r31, 0x01	; 1
     c14:	80 83       	st	Z, r24
		alarmtime.minute=minute;
     c16:	61 83       	std	Z+1, r22	; 0x01
		alarmtime.second=second;
     c18:	42 83       	std	Z+2, r20	; 0x02
		CLOCK_alarm_flag=4;
     c1a:	84 e0       	ldi	r24, 0x04	; 4
     c1c:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <CLOCK_alarm_flag>
	}
	return CLOCK_alarm_flag;
}
     c20:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <CLOCK_alarm_flag>
     c24:	08 95       	ret

00000c26 <CLOCK_second_count>:
uint8_t CLOCK_second_count(uint16_t second)
{
     c26:	cf 92       	push	r12
     c28:	df 92       	push	r13
     c2a:	ef 92       	push	r14
     c2c:	ff 92       	push	r15
     c2e:	0f 93       	push	r16
     c30:	1f 93       	push	r17
     c32:	cf 93       	push	r28
     c34:	df 93       	push	r29
     c36:	fc 01       	movw	r30, r24
	uint16_t tmp;
	uint8_t tmp_1;
	uint8_t tmp_2;
	uint8_t tmp_3;
	if(!CLOCK_compare_active){
     c38:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <CLOCK_compare_active>
     c3c:	81 11       	cpse	r24, r1
     c3e:	65 c0       	rjmp	.+202    	; 0xd0a <CLOCK_second_count+0xe4>
		tmp_3=(int8_t)(second % 60);
		tmp=second/60;
		tmp_2=(int8_t)(tmp % 60);
		tmp=tmp/60;
		tmp_1=(int8_t)tmp;
		laptime.second=(time.second + tmp_3) % 60;
     c40:	9f 01       	movw	r18, r30
     c42:	a9 e8       	ldi	r26, 0x89	; 137
     c44:	b8 e8       	ldi	r27, 0x88	; 136
     c46:	0e 94 60 12 	call	0x24c0	; 0x24c0 <__umulhisi3>
     c4a:	6c 01       	movw	r12, r24
     c4c:	d6 94       	lsr	r13
     c4e:	c7 94       	ror	r12
     c50:	d6 94       	lsr	r13
     c52:	c7 94       	ror	r12
     c54:	d6 94       	lsr	r13
     c56:	c7 94       	ror	r12
     c58:	d6 94       	lsr	r13
     c5a:	c7 94       	ror	r12
     c5c:	d6 94       	lsr	r13
     c5e:	c7 94       	ror	r12
     c60:	4c e3       	ldi	r20, 0x3C	; 60
     c62:	4c 9d       	mul	r20, r12
     c64:	c0 01       	movw	r24, r0
     c66:	4d 9d       	mul	r20, r13
     c68:	90 0d       	add	r25, r0
     c6a:	11 24       	eor	r1, r1
     c6c:	28 1b       	sub	r18, r24
     c6e:	39 0b       	sbc	r19, r25
     c70:	ca ee       	ldi	r28, 0xEA	; 234
     c72:	d1 e0       	ldi	r29, 0x01	; 1
     c74:	8a 81       	ldd	r24, Y+2	; 0x02
     c76:	08 2e       	mov	r0, r24
     c78:	00 0c       	add	r0, r0
     c7a:	99 0b       	sbc	r25, r25
     c7c:	82 0f       	add	r24, r18
     c7e:	91 1d       	adc	r25, r1
     c80:	0d ee       	ldi	r16, 0xED	; 237
     c82:	11 e0       	ldi	r17, 0x01	; 1
     c84:	0f 2e       	mov	r0, r31
     c86:	fc e3       	ldi	r31, 0x3C	; 60
     c88:	ef 2e       	mov	r14, r31
     c8a:	f1 2c       	mov	r15, r1
     c8c:	f0 2d       	mov	r31, r0
     c8e:	b7 01       	movw	r22, r14
     c90:	0e 94 06 12 	call	0x240c	; 0x240c <__divmodhi4>
     c94:	56 2f       	mov	r21, r22
     c96:	d8 01       	movw	r26, r16
     c98:	12 96       	adiw	r26, 0x02	; 2
     c9a:	8c 93       	st	X, r24
		tmp_3=(time.second + tmp_3)/60;
		laptime.minute=(time.minute + tmp_2 + tmp_3) % 60;
     c9c:	96 01       	movw	r18, r12
     c9e:	a9 e8       	ldi	r26, 0x89	; 137
     ca0:	b8 e8       	ldi	r27, 0x88	; 136
     ca2:	0e 94 60 12 	call	0x24c0	; 0x24c0 <__umulhisi3>
     ca6:	96 95       	lsr	r25
     ca8:	87 95       	ror	r24
     caa:	92 95       	swap	r25
     cac:	82 95       	swap	r24
     cae:	8f 70       	andi	r24, 0x0F	; 15
     cb0:	89 27       	eor	r24, r25
     cb2:	9f 70       	andi	r25, 0x0F	; 15
     cb4:	89 27       	eor	r24, r25
     cb6:	48 9f       	mul	r20, r24
     cb8:	90 01       	movw	r18, r0
     cba:	49 9f       	mul	r20, r25
     cbc:	30 0d       	add	r19, r0
     cbe:	11 24       	eor	r1, r1
     cc0:	c2 1a       	sub	r12, r18
     cc2:	d3 0a       	sbc	r13, r19
     cc4:	89 81       	ldd	r24, Y+1	; 0x01
     cc6:	08 2e       	mov	r0, r24
     cc8:	00 0c       	add	r0, r0
     cca:	99 0b       	sbc	r25, r25
     ccc:	8c 0d       	add	r24, r12
     cce:	91 1d       	adc	r25, r1
     cd0:	85 0f       	add	r24, r21
     cd2:	91 1d       	adc	r25, r1
     cd4:	b7 01       	movw	r22, r14
     cd6:	0e 94 06 12 	call	0x240c	; 0x240c <__divmodhi4>
     cda:	26 2f       	mov	r18, r22
     cdc:	d8 01       	movw	r26, r16
     cde:	11 96       	adiw	r26, 0x01	; 1
     ce0:	8c 93       	st	X, r24
		tmp_2=(time.minute + tmp_2 + tmp_3)/60;
		tmp_1=time.hour+ tmp_1 + tmp_2;
     ce2:	cf 01       	movw	r24, r30
     ce4:	60 e1       	ldi	r22, 0x10	; 16
     ce6:	7e e0       	ldi	r23, 0x0E	; 14
     ce8:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <__udivmodhi4>
     cec:	88 81       	ld	r24, Y
     cee:	68 0f       	add	r22, r24
     cf0:	62 0f       	add	r22, r18
		if(tmp_1 > HORA)
     cf2:	69 31       	cpi	r22, 0x19	; 25
     cf4:	28 f0       	brcs	.+10     	; 0xd00 <CLOCK_second_count+0xda>
			laptime.hour=HORA-tmp_1;
     cf6:	88 e1       	ldi	r24, 0x18	; 24
     cf8:	86 1b       	sub	r24, r22
     cfa:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <laptime>
     cfe:	02 c0       	rjmp	.+4      	; 0xd04 <CLOCK_second_count+0xde>
		else
			laptime.hour=tmp_1;
     d00:	60 93 ed 01 	sts	0x01ED, r22	; 0x8001ed <laptime>
		CLOCK_compare_active=4;
     d04:	84 e0       	ldi	r24, 0x04	; 4
     d06:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <CLOCK_compare_active>
	}
	return CLOCK_compare_active;
}
     d0a:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <CLOCK_compare_active>
     d0e:	df 91       	pop	r29
     d10:	cf 91       	pop	r28
     d12:	1f 91       	pop	r17
     d14:	0f 91       	pop	r16
     d16:	ff 90       	pop	r15
     d18:	ef 90       	pop	r14
     d1a:	df 90       	pop	r13
     d1c:	cf 90       	pop	r12
     d1e:	08 95       	ret

00000d20 <CLOCK_alarm_reset>:
void CLOCK_alarm_reset(void)
{
	CLOCK_alarm_flag=0;
     d20:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <CLOCK_alarm_flag>
     d24:	08 95       	ret

00000d26 <CLOCK_alarm_stop>:
}
void CLOCK_alarm_stop(void)
{
	CLOCK_alarm_flag=0X0F;
     d26:	8f e0       	ldi	r24, 0x0F	; 15
     d28:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <CLOCK_alarm_flag>
     d2c:	08 95       	ret

00000d2e <CLOCK_second_count_reset>:
}
void CLOCK_second_count_reset(void)
{
	CLOCK_compare_active=0;
     d2e:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <CLOCK_compare_active>
     d32:	08 95       	ret

00000d34 <CLOCK_second_count_stop>:
}
void CLOCK_second_count_stop(void)
{
	CLOCK_compare_active=0X0F;
     d34:	8f e0       	ldi	r24, 0x0F	; 15
     d36:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <CLOCK_compare_active>
     d3a:	08 95       	ret

00000d3c <CLOCK_show>:
}
char* CLOCK_show(void)
{
	uint8_t tmp;
	CLOCK_timp[8]='\0';
     d3c:	ed ed       	ldi	r30, 0xDD	; 221
     d3e:	f1 e0       	ldi	r31, 0x01	; 1
     d40:	10 86       	std	Z+8, r1	; 0x08
	CLOCK_timp[7]=time.second % 10 + '0';
     d42:	aa ee       	ldi	r26, 0xEA	; 234
     d44:	b1 e0       	ldi	r27, 0x01	; 1
     d46:	12 96       	adiw	r26, 0x02	; 2
     d48:	2c 91       	ld	r18, X
     d4a:	12 97       	sbiw	r26, 0x02	; 2
     d4c:	87 e6       	ldi	r24, 0x67	; 103
     d4e:	28 02       	muls	r18, r24
     d50:	91 2d       	mov	r25, r1
     d52:	11 24       	eor	r1, r1
     d54:	95 95       	asr	r25
     d56:	95 95       	asr	r25
     d58:	27 fd       	sbrc	r18, 7
     d5a:	93 95       	inc	r25
     d5c:	49 2f       	mov	r20, r25
     d5e:	44 0f       	add	r20, r20
     d60:	34 2f       	mov	r19, r20
     d62:	33 0f       	add	r19, r19
     d64:	33 0f       	add	r19, r19
     d66:	34 0f       	add	r19, r20
     d68:	23 1b       	sub	r18, r19
     d6a:	20 5d       	subi	r18, 0xD0	; 208
     d6c:	27 83       	std	Z+7, r18	; 0x07
	tmp = time.second / 10;
	CLOCK_timp[6]=tmp % 10 + '0';
     d6e:	2d ec       	ldi	r18, 0xCD	; 205
     d70:	92 9f       	mul	r25, r18
     d72:	31 2d       	mov	r19, r1
     d74:	11 24       	eor	r1, r1
     d76:	36 95       	lsr	r19
     d78:	36 95       	lsr	r19
     d7a:	36 95       	lsr	r19
     d7c:	33 0f       	add	r19, r19
     d7e:	43 2f       	mov	r20, r19
     d80:	44 0f       	add	r20, r20
     d82:	44 0f       	add	r20, r20
     d84:	34 0f       	add	r19, r20
     d86:	93 1b       	sub	r25, r19
     d88:	90 5d       	subi	r25, 0xD0	; 208
     d8a:	96 83       	std	Z+6, r25	; 0x06
	CLOCK_timp[5]=':';
     d8c:	5a e3       	ldi	r21, 0x3A	; 58
     d8e:	55 83       	std	Z+5, r21	; 0x05
	CLOCK_timp[4]=time.minute % 10 + '0';
     d90:	11 96       	adiw	r26, 0x01	; 1
     d92:	3c 91       	ld	r19, X
     d94:	11 97       	sbiw	r26, 0x01	; 1
     d96:	38 02       	muls	r19, r24
     d98:	91 2d       	mov	r25, r1
     d9a:	11 24       	eor	r1, r1
     d9c:	95 95       	asr	r25
     d9e:	95 95       	asr	r25
     da0:	37 fd       	sbrc	r19, 7
     da2:	93 95       	inc	r25
     da4:	69 2f       	mov	r22, r25
     da6:	66 0f       	add	r22, r22
     da8:	46 2f       	mov	r20, r22
     daa:	44 0f       	add	r20, r20
     dac:	44 0f       	add	r20, r20
     dae:	46 0f       	add	r20, r22
     db0:	34 1b       	sub	r19, r20
     db2:	30 5d       	subi	r19, 0xD0	; 208
     db4:	34 83       	std	Z+4, r19	; 0x04
	tmp = time.minute / 10;
	CLOCK_timp[3]=tmp % 10 + '0';
     db6:	92 9f       	mul	r25, r18
     db8:	31 2d       	mov	r19, r1
     dba:	11 24       	eor	r1, r1
     dbc:	36 95       	lsr	r19
     dbe:	36 95       	lsr	r19
     dc0:	36 95       	lsr	r19
     dc2:	33 0f       	add	r19, r19
     dc4:	43 2f       	mov	r20, r19
     dc6:	44 0f       	add	r20, r20
     dc8:	44 0f       	add	r20, r20
     dca:	34 0f       	add	r19, r20
     dcc:	93 1b       	sub	r25, r19
     dce:	90 5d       	subi	r25, 0xD0	; 208
     dd0:	93 83       	std	Z+3, r25	; 0x03
	CLOCK_timp[2]=':';
     dd2:	52 83       	std	Z+2, r21	; 0x02
	CLOCK_timp[1]=time.hour % 10 + '0';
     dd4:	9c 91       	ld	r25, X
     dd6:	98 02       	muls	r25, r24
     dd8:	81 2d       	mov	r24, r1
     dda:	11 24       	eor	r1, r1
     ddc:	85 95       	asr	r24
     dde:	85 95       	asr	r24
     de0:	97 fd       	sbrc	r25, 7
     de2:	83 95       	inc	r24
     de4:	48 2f       	mov	r20, r24
     de6:	44 0f       	add	r20, r20
     de8:	34 2f       	mov	r19, r20
     dea:	33 0f       	add	r19, r19
     dec:	33 0f       	add	r19, r19
     dee:	34 0f       	add	r19, r20
     df0:	93 1b       	sub	r25, r19
     df2:	90 5d       	subi	r25, 0xD0	; 208
     df4:	91 83       	std	Z+1, r25	; 0x01
	tmp = time.hour / 10;
	CLOCK_timp[0]=tmp % 10 + '0';
     df6:	82 9f       	mul	r24, r18
     df8:	21 2d       	mov	r18, r1
     dfa:	11 24       	eor	r1, r1
     dfc:	26 95       	lsr	r18
     dfe:	26 95       	lsr	r18
     e00:	26 95       	lsr	r18
     e02:	22 0f       	add	r18, r18
     e04:	92 2f       	mov	r25, r18
     e06:	99 0f       	add	r25, r25
     e08:	99 0f       	add	r25, r25
     e0a:	29 0f       	add	r18, r25
     e0c:	82 1b       	sub	r24, r18
     e0e:	80 5d       	subi	r24, 0xD0	; 208
     e10:	80 83       	st	Z, r24
	return CLOCK_timp;
}
     e12:	cf 01       	movw	r24, r30
     e14:	08 95       	ret

00000e16 <CLOCKenable>:
char* CLOCK_show(void);
/*
** procedure and function
*/
CLOCK CLOCKenable(uint8_t hour, uint8_t minute, uint8_t second)
{
     e16:	fc 01       	movw	r30, r24
	CLOCK clock;
	time.hour=hour;
     e18:	aa ee       	ldi	r26, 0xEA	; 234
     e1a:	b1 e0       	ldi	r27, 0x01	; 1
     e1c:	6c 93       	st	X, r22
	time.minute=minute;
     e1e:	11 96       	adiw	r26, 0x01	; 1
     e20:	4c 93       	st	X, r20
     e22:	11 97       	sbiw	r26, 0x01	; 1
	time.second=second;
     e24:	12 96       	adiw	r26, 0x02	; 2
     e26:	2c 93       	st	X, r18
	CLOCK_alarm_flag=0X0F;
     e28:	8f e0       	ldi	r24, 0x0F	; 15
     e2a:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <CLOCK_alarm_flag>
	CLOCK_compare_active=0X0F;
     e2e:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <CLOCK_compare_active>
	clock.second_count_reset=CLOCK_second_count_reset;
	clock.second_count_stop=CLOCK_second_count_stop;
	clock.alarm_reset=CLOCK_alarm_reset;
	clock.alarm_stop=CLOCK_alarm_stop;
	clock.show=CLOCK_show;
	return clock;
     e32:	8e e1       	ldi	r24, 0x1E	; 30
     e34:	95 e0       	ldi	r25, 0x05	; 5
     e36:	91 83       	std	Z+1, r25	; 0x01
     e38:	80 83       	st	Z, r24
     e3a:	84 e2       	ldi	r24, 0x24	; 36
     e3c:	95 e0       	ldi	r25, 0x05	; 5
     e3e:	93 83       	std	Z+3, r25	; 0x03
     e40:	82 83       	std	Z+2, r24	; 0x02
     e42:	8e ea       	ldi	r24, 0xAE	; 174
     e44:	95 e0       	ldi	r25, 0x05	; 5
     e46:	95 83       	std	Z+5, r25	; 0x05
     e48:	84 83       	std	Z+4, r24	; 0x04
     e4a:	84 e0       	ldi	r24, 0x04	; 4
     e4c:	96 e0       	ldi	r25, 0x06	; 6
     e4e:	97 83       	std	Z+7, r25	; 0x07
     e50:	86 83       	std	Z+6, r24	; 0x06
     e52:	83 e1       	ldi	r24, 0x13	; 19
     e54:	96 e0       	ldi	r25, 0x06	; 6
     e56:	91 87       	std	Z+9, r25	; 0x09
     e58:	80 87       	std	Z+8, r24	; 0x08
     e5a:	87 e9       	ldi	r24, 0x97	; 151
     e5c:	96 e0       	ldi	r25, 0x06	; 6
     e5e:	93 87       	std	Z+11, r25	; 0x0b
     e60:	82 87       	std	Z+10, r24	; 0x0a
     e62:	8a e9       	ldi	r24, 0x9A	; 154
     e64:	96 e0       	ldi	r25, 0x06	; 6
     e66:	95 87       	std	Z+13, r25	; 0x0d
     e68:	84 87       	std	Z+12, r24	; 0x0c
     e6a:	80 e9       	ldi	r24, 0x90	; 144
     e6c:	96 e0       	ldi	r25, 0x06	; 6
     e6e:	97 87       	std	Z+15, r25	; 0x0f
     e70:	86 87       	std	Z+14, r24	; 0x0e
     e72:	83 e9       	ldi	r24, 0x93	; 147
     e74:	96 e0       	ldi	r25, 0x06	; 6
     e76:	91 8b       	std	Z+17, r25	; 0x11
     e78:	80 8b       	std	Z+16, r24	; 0x10
     e7a:	8e e9       	ldi	r24, 0x9E	; 158
     e7c:	96 e0       	ldi	r25, 0x06	; 6
     e7e:	93 8b       	std	Z+19, r25	; 0x13
     e80:	82 8b       	std	Z+18, r24	; 0x12
}
     e82:	cf 01       	movw	r24, r30
     e84:	08 95       	ret

00000e86 <FUNCpinmatch>:
}
//pinmatch
uint8_t FUNCpinmatch(uint8_t match, uint8_t pin, uint8_t HL)
{
	uint8_t result;
	result=match&pin;
     e86:	68 23       	and	r22, r24
	if(HL){
     e88:	44 23       	and	r20, r20
     e8a:	21 f0       	breq	.+8      	; 0xe94 <FUNCpinmatch+0xe>
		if(result==match);
     e8c:	86 17       	cp	r24, r22
     e8e:	21 f0       	breq	.+8      	; 0xe98 <FUNCpinmatch+0x12>
		else
			result=0;
     e90:	80 e0       	ldi	r24, 0x00	; 0
     e92:	08 95       	ret
	}else{
		if(result)
     e94:	61 11       	cpse	r22, r1
			result=0;
     e96:	80 e0       	ldi	r24, 0x00	; 0
		else
			result=match;
	}
	return result;
}
     e98:	08 95       	ret

00000e9a <FUNChmerge>:
// hmerge
uint8_t FUNChmerge(uint8_t X, uint8_t Y)
{
	return (X | Y);
}
     e9a:	86 2b       	or	r24, r22
     e9c:	08 95       	ret

00000e9e <FUNClmerge>:
// lmerge
uint8_t FUNClmerge(uint8_t X, uint8_t Y)
{
	return (X & Y);
}
     e9e:	86 23       	and	r24, r22
     ea0:	08 95       	ret

00000ea2 <FUNChh>:
uint8_t FUNChh(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xi&xf;
	return i;
}
     ea2:	86 23       	and	r24, r22
     ea4:	08 95       	ret

00000ea6 <FUNCll>:
// ll
uint8_t FUNCll(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xi|xf;
	return ~i;
     ea6:	86 2b       	or	r24, r22
}
     ea8:	80 95       	com	r24
     eaa:	08 95       	ret

00000eac <FUNClh>:
// lh
uint8_t FUNClh(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xi^xf;
     eac:	86 27       	eor	r24, r22
	i&=xf;
	return i;
}
     eae:	86 23       	and	r24, r22
     eb0:	08 95       	ret

00000eb2 <FUNChl>:
// hl
uint8_t FUNChl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xf^xi;
     eb2:	60 95       	com	r22
	i&=xi;
	return i;
}
     eb4:	86 23       	and	r24, r22
     eb6:	08 95       	ret

00000eb8 <FUNCdiff>:
// diff
uint8_t FUNCdiff(uint8_t xi, uint8_t xf)
{
	return xf^xi;
}
     eb8:	86 27       	eor	r24, r22
     eba:	08 95       	ret

00000ebc <FUNCswap>:
// interchange *px and *py
void FUNCswap(long *px, long *py)
{
     ebc:	cf 92       	push	r12
     ebe:	df 92       	push	r13
     ec0:	ef 92       	push	r14
     ec2:	ff 92       	push	r15
     ec4:	0f 93       	push	r16
     ec6:	1f 93       	push	r17
	long temp;
	temp = *px;
     ec8:	fc 01       	movw	r30, r24
     eca:	00 81       	ld	r16, Z
     ecc:	11 81       	ldd	r17, Z+1	; 0x01
     ece:	22 81       	ldd	r18, Z+2	; 0x02
     ed0:	33 81       	ldd	r19, Z+3	; 0x03
	*px = *py;
     ed2:	fb 01       	movw	r30, r22
     ed4:	c0 80       	ld	r12, Z
     ed6:	d1 80       	ldd	r13, Z+1	; 0x01
     ed8:	e2 80       	ldd	r14, Z+2	; 0x02
     eda:	f3 80       	ldd	r15, Z+3	; 0x03
     edc:	fc 01       	movw	r30, r24
     ede:	c0 82       	st	Z, r12
     ee0:	d1 82       	std	Z+1, r13	; 0x01
     ee2:	e2 82       	std	Z+2, r14	; 0x02
     ee4:	f3 82       	std	Z+3, r15	; 0x03
	*py = temp;
     ee6:	fb 01       	movw	r30, r22
     ee8:	00 83       	st	Z, r16
     eea:	11 83       	std	Z+1, r17	; 0x01
     eec:	22 83       	std	Z+2, r18	; 0x02
     eee:	33 83       	std	Z+3, r19	; 0x03
}
     ef0:	1f 91       	pop	r17
     ef2:	0f 91       	pop	r16
     ef4:	ff 90       	pop	r15
     ef6:	ef 90       	pop	r14
     ef8:	df 90       	pop	r13
     efa:	cf 90       	pop	r12
     efc:	08 95       	ret

00000efe <FUNCcopy>:
// copy: copy 'from' into 'to'; assume to is big enough
void FUNCcopy(char to[], char from[])
{
	int i;
	i = 0;
	while ((to[i] = from[i]) != '\0')
     efe:	fb 01       	movw	r30, r22
     f00:	20 81       	ld	r18, Z
     f02:	fc 01       	movw	r30, r24
     f04:	20 83       	st	Z, r18
     f06:	22 23       	and	r18, r18
     f08:	39 f0       	breq	.+14     	; 0xf18 <FUNCcopy+0x1a>
     f0a:	db 01       	movw	r26, r22
     f0c:	11 96       	adiw	r26, 0x01	; 1
     f0e:	31 96       	adiw	r30, 0x01	; 1
     f10:	9d 91       	ld	r25, X+
     f12:	91 93       	st	Z+, r25
     f14:	91 11       	cpse	r25, r1
     f16:	fc cf       	rjmp	.-8      	; 0xf10 <FUNCcopy+0x12>
     f18:	08 95       	ret

00000f1a <FUNCsqueeze>:
		++i;
}
// squeeze: delete all c from s
void FUNCsqueeze(char s[], int c)
{
     f1a:	cf 93       	push	r28
     f1c:	df 93       	push	r29
     f1e:	ec 01       	movw	r28, r24
	int i, j;
	for (i = j = 0; s[i] != '\0'; i++)
     f20:	98 81       	ld	r25, Y
     f22:	99 23       	and	r25, r25
     f24:	99 f0       	breq	.+38     	; 0xf4c <FUNCsqueeze+0x32>
     f26:	fe 01       	movw	r30, r28
     f28:	31 96       	adiw	r30, 0x01	; 1
     f2a:	20 e0       	ldi	r18, 0x00	; 0
     f2c:	30 e0       	ldi	r19, 0x00	; 0
		if (s[i] != c)
     f2e:	49 2f       	mov	r20, r25
     f30:	50 e0       	ldi	r21, 0x00	; 0
     f32:	46 17       	cp	r20, r22
     f34:	57 07       	cpc	r21, r23
     f36:	31 f0       	breq	.+12     	; 0xf44 <FUNCsqueeze+0x2a>
			s[j++] = s[i];
     f38:	de 01       	movw	r26, r28
     f3a:	a2 0f       	add	r26, r18
     f3c:	b3 1f       	adc	r27, r19
     f3e:	9c 93       	st	X, r25
     f40:	2f 5f       	subi	r18, 0xFF	; 255
     f42:	3f 4f       	sbci	r19, 0xFF	; 255
}
// squeeze: delete all c from s
void FUNCsqueeze(char s[], int c)
{
	int i, j;
	for (i = j = 0; s[i] != '\0'; i++)
     f44:	91 91       	ld	r25, Z+
     f46:	91 11       	cpse	r25, r1
     f48:	f2 cf       	rjmp	.-28     	; 0xf2e <FUNCsqueeze+0x14>
     f4a:	02 c0       	rjmp	.+4      	; 0xf50 <FUNCsqueeze+0x36>
     f4c:	20 e0       	ldi	r18, 0x00	; 0
     f4e:	30 e0       	ldi	r19, 0x00	; 0
		if (s[i] != c)
			s[j++] = s[i];
		s[j] = '\0';
     f50:	fe 01       	movw	r30, r28
     f52:	e2 0f       	add	r30, r18
     f54:	f3 1f       	adc	r31, r19
     f56:	10 82       	st	Z, r1
}
     f58:	df 91       	pop	r29
     f5a:	cf 91       	pop	r28
     f5c:	08 95       	ret

00000f5e <FUNCshellsort>:
// shellsort: sort v[0]...v[n-1] into increasing order
void FUNCshellsort(int v[], int n)
{
     f5e:	2f 92       	push	r2
     f60:	3f 92       	push	r3
     f62:	4f 92       	push	r4
     f64:	5f 92       	push	r5
     f66:	6f 92       	push	r6
     f68:	7f 92       	push	r7
     f6a:	8f 92       	push	r8
     f6c:	9f 92       	push	r9
     f6e:	af 92       	push	r10
     f70:	bf 92       	push	r11
     f72:	cf 92       	push	r12
     f74:	df 92       	push	r13
     f76:	ef 92       	push	r14
     f78:	ff 92       	push	r15
     f7a:	0f 93       	push	r16
     f7c:	1f 93       	push	r17
     f7e:	cf 93       	push	r28
     f80:	df 93       	push	r29
     f82:	00 d0       	rcall	.+0      	; 0xf84 <FUNCshellsort+0x26>
     f84:	00 d0       	rcall	.+0      	; 0xf86 <FUNCshellsort+0x28>
     f86:	cd b7       	in	r28, 0x3d	; 61
     f88:	de b7       	in	r29, 0x3e	; 62
     f8a:	2c 01       	movw	r4, r24
     f8c:	1b 01       	movw	r2, r22
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
     f8e:	4b 01       	movw	r8, r22
     f90:	77 23       	and	r23, r23
     f92:	1c f4       	brge	.+6      	; 0xf9a <FUNCshellsort+0x3c>
     f94:	2f ef       	ldi	r18, 0xFF	; 255
     f96:	82 1a       	sub	r8, r18
     f98:	92 0a       	sbc	r9, r18
     f9a:	95 94       	asr	r9
     f9c:	87 94       	ror	r8
     f9e:	18 14       	cp	r1, r8
     fa0:	19 04       	cpc	r1, r9
     fa2:	0c f4       	brge	.+2      	; 0xfa6 <FUNCshellsort+0x48>
     fa4:	51 c0       	rjmp	.+162    	; 0x1048 <FUNCshellsort+0xea>
     fa6:	6a c0       	rjmp	.+212    	; 0x107c <FUNCshellsort+0x11e>
		for (i = gap; i < n; i++)
			for (j=i-gap; j>=0 && v[j]>v[j+gap]; j-=gap){
     fa8:	96 01       	movw	r18, r12
     faa:	dd 20       	and	r13, r13
     fac:	9c f1       	brlt	.+102    	; 0x1014 <FUNCshellsort+0xb6>
     fae:	f5 01       	movw	r30, r10
     fb0:	40 81       	ld	r20, Z
     fb2:	51 81       	ldd	r21, Z+1	; 0x01
     fb4:	f4 01       	movw	r30, r8
     fb6:	60 81       	ld	r22, Z
     fb8:	71 81       	ldd	r23, Z+1	; 0x01
     fba:	64 17       	cp	r22, r20
     fbc:	75 07       	cpc	r23, r21
     fbe:	54 f5       	brge	.+84     	; 0x1014 <FUNCshellsort+0xb6>
     fc0:	8c 01       	movw	r16, r24
     fc2:	0a 0d       	add	r16, r10
     fc4:	1b 1d       	adc	r17, r11
     fc6:	d4 01       	movw	r26, r8
     fc8:	bc 82       	std	Y+4, r11	; 0x04
     fca:	ab 82       	std	Y+3, r10	; 0x03
     fcc:	ba 82       	std	Y+2, r11	; 0x02
     fce:	a9 82       	std	Y+1, r10	; 0x01
				temp = v[j];
				v[j] = v[j+gap];
     fd0:	eb 81       	ldd	r30, Y+3	; 0x03
     fd2:	fc 81       	ldd	r31, Y+4	; 0x04
     fd4:	71 83       	std	Z+1, r23	; 0x01
     fd6:	60 83       	st	Z, r22
				v[j+gap] = temp;
     fd8:	11 96       	adiw	r26, 0x01	; 1
     fda:	5c 93       	st	X, r21
     fdc:	4e 93       	st	-X, r20
void FUNCshellsort(int v[], int n)
{
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
		for (i = gap; i < n; i++)
			for (j=i-gap; j>=0 && v[j]>v[j+gap]; j-=gap){
     fde:	2e 19       	sub	r18, r14
     fe0:	3f 09       	sbc	r19, r15
     fe2:	c2 f0       	brmi	.+48     	; 0x1014 <FUNCshellsort+0xb6>
     fe4:	f8 01       	movw	r30, r16
     fe6:	40 81       	ld	r20, Z
     fe8:	51 81       	ldd	r21, Z+1	; 0x01
     fea:	e9 81       	ldd	r30, Y+1	; 0x01
     fec:	fa 81       	ldd	r31, Y+2	; 0x02
     fee:	60 81       	ld	r22, Z
     ff0:	71 81       	ldd	r23, Z+1	; 0x01
     ff2:	08 0f       	add	r16, r24
     ff4:	19 1f       	adc	r17, r25
     ff6:	e8 0f       	add	r30, r24
     ff8:	f9 1f       	adc	r31, r25
     ffa:	fa 83       	std	Y+2, r31	; 0x02
     ffc:	e9 83       	std	Y+1, r30	; 0x01
     ffe:	eb 81       	ldd	r30, Y+3	; 0x03
    1000:	fc 81       	ldd	r31, Y+4	; 0x04
    1002:	e8 0f       	add	r30, r24
    1004:	f9 1f       	adc	r31, r25
    1006:	fc 83       	std	Y+4, r31	; 0x04
    1008:	eb 83       	std	Y+3, r30	; 0x03
    100a:	a8 0f       	add	r26, r24
    100c:	b9 1f       	adc	r27, r25
    100e:	64 17       	cp	r22, r20
    1010:	75 07       	cpc	r23, r21
    1012:	f4 f2       	brlt	.-68     	; 0xfd0 <FUNCshellsort+0x72>
    1014:	ff ef       	ldi	r31, 0xFF	; 255
    1016:	cf 1a       	sub	r12, r31
    1018:	df 0a       	sbc	r13, r31
    101a:	22 e0       	ldi	r18, 0x02	; 2
    101c:	a2 0e       	add	r10, r18
    101e:	b1 1c       	adc	r11, r1
    1020:	e2 e0       	ldi	r30, 0x02	; 2
    1022:	8e 0e       	add	r8, r30
    1024:	91 1c       	adc	r9, r1
// shellsort: sort v[0]...v[n-1] into increasing order
void FUNCshellsort(int v[], int n)
{
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
		for (i = gap; i < n; i++)
    1026:	c6 14       	cp	r12, r6
    1028:	d7 04       	cpc	r13, r7
    102a:	09 f0       	breq	.+2      	; 0x102e <FUNCshellsort+0xd0>
    102c:	bd cf       	rjmp	.-134    	; 0xfa8 <FUNCshellsort+0x4a>
}
// shellsort: sort v[0]...v[n-1] into increasing order
void FUNCshellsort(int v[], int n)
{
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
    102e:	47 01       	movw	r8, r14
    1030:	ff 20       	and	r15, r15
    1032:	1c f4       	brge	.+6      	; 0x103a <FUNCshellsort+0xdc>
    1034:	ff ef       	ldi	r31, 0xFF	; 255
    1036:	8f 1a       	sub	r8, r31
    1038:	9f 0a       	sbc	r9, r31
    103a:	95 94       	asr	r9
    103c:	87 94       	ror	r8
    103e:	18 14       	cp	r1, r8
    1040:	19 04       	cpc	r1, r9
    1042:	e4 f4       	brge	.+56     	; 0x107c <FUNCshellsort+0x11e>
    1044:	74 01       	movw	r14, r8
    1046:	01 c0       	rjmp	.+2      	; 0x104a <FUNCshellsort+0xec>
    1048:	74 01       	movw	r14, r8
		for (i = gap; i < n; i++)
    104a:	82 14       	cp	r8, r2
    104c:	93 04       	cpc	r9, r3
    104e:	7c f7       	brge	.-34     	; 0x102e <FUNCshellsort+0xd0>
    1050:	64 01       	movw	r12, r8
    1052:	ce 18       	sub	r12, r14
    1054:	df 08       	sbc	r13, r15
    1056:	56 01       	movw	r10, r12
    1058:	aa 0c       	add	r10, r10
    105a:	bb 1c       	adc	r11, r11
    105c:	a4 0c       	add	r10, r4
    105e:	b5 1c       	adc	r11, r5
    1060:	88 0c       	add	r8, r8
    1062:	99 1c       	adc	r9, r9
    1064:	84 0c       	add	r8, r4
    1066:	95 1c       	adc	r9, r5
    1068:	31 01       	movw	r6, r2
    106a:	6e 18       	sub	r6, r14
    106c:	7f 08       	sbc	r7, r15
    106e:	c7 01       	movw	r24, r14
    1070:	88 0f       	add	r24, r24
    1072:	99 1f       	adc	r25, r25
    1074:	91 95       	neg	r25
    1076:	81 95       	neg	r24
    1078:	91 09       	sbc	r25, r1
    107a:	96 cf       	rjmp	.-212    	; 0xfa8 <FUNCshellsort+0x4a>
			for (j=i-gap; j>=0 && v[j]>v[j+gap]; j-=gap){
				temp = v[j];
				v[j] = v[j+gap];
				v[j+gap] = temp;
			}
}
    107c:	0f 90       	pop	r0
    107e:	0f 90       	pop	r0
    1080:	0f 90       	pop	r0
    1082:	0f 90       	pop	r0
    1084:	df 91       	pop	r29
    1086:	cf 91       	pop	r28
    1088:	1f 91       	pop	r17
    108a:	0f 91       	pop	r16
    108c:	ff 90       	pop	r15
    108e:	ef 90       	pop	r14
    1090:	df 90       	pop	r13
    1092:	cf 90       	pop	r12
    1094:	bf 90       	pop	r11
    1096:	af 90       	pop	r10
    1098:	9f 90       	pop	r9
    109a:	8f 90       	pop	r8
    109c:	7f 90       	pop	r7
    109e:	6f 90       	pop	r6
    10a0:	5f 90       	pop	r5
    10a2:	4f 90       	pop	r4
    10a4:	3f 90       	pop	r3
    10a6:	2f 90       	pop	r2
    10a8:	08 95       	ret

000010aa <FUNCpmax>:
	if(a1 > a2){
		biggest = a1;
	}else{
		biggest = a2;
	}
	return biggest;
    10aa:	86 17       	cp	r24, r22
    10ac:	97 07       	cpc	r25, r23
    10ae:	0c f4       	brge	.+2      	; 0x10b2 <FUNCpmax+0x8>
    10b0:	cb 01       	movw	r24, r22
}
    10b2:	08 95       	ret

000010b4 <FUNCgcd>:
// common divisor
int FUNCgcd (int u, int v)
{
    10b4:	9b 01       	movw	r18, r22
	int temp;
	while ( v != 0 ) {
    10b6:	67 2b       	or	r22, r23
    10b8:	11 f4       	brne	.+4      	; 0x10be <FUNCgcd+0xa>
    10ba:	08 95       	ret
		temp = u % v;
		u = v;
		v = temp;
    10bc:	9a 01       	movw	r18, r20
// common divisor
int FUNCgcd (int u, int v)
{
	int temp;
	while ( v != 0 ) {
		temp = u % v;
    10be:	b9 01       	movw	r22, r18
    10c0:	0e 94 06 12 	call	0x240c	; 0x240c <__divmodhi4>
    10c4:	ac 01       	movw	r20, r24
    10c6:	82 2f       	mov	r24, r18
    10c8:	93 2f       	mov	r25, r19
}
// common divisor
int FUNCgcd (int u, int v)
{
	int temp;
	while ( v != 0 ) {
    10ca:	41 15       	cp	r20, r1
    10cc:	51 05       	cpc	r21, r1
    10ce:	b1 f7       	brne	.-20     	; 0x10bc <FUNCgcd+0x8>
		temp = u % v;
		u = v;
		v = temp;
	}
	return u;
}
    10d0:	08 95       	ret

000010d2 <FUNCstrToInt>:
// Function to convert a string to an integer
int FUNCstrToInt (const char string[])
{
    10d2:	fc 01       	movw	r30, r24
	int i, intValue, result = 0;
	for ( i = 0; string[i] >= '0' && string[i] <= '9'; ++i ){
    10d4:	90 81       	ld	r25, Z
    10d6:	80 ed       	ldi	r24, 0xD0	; 208
    10d8:	89 0f       	add	r24, r25
    10da:	8a 30       	cpi	r24, 0x0A	; 10
    10dc:	d0 f4       	brcc	.+52     	; 0x1112 <__stack+0x13>
    10de:	31 96       	adiw	r30, 0x01	; 1
    10e0:	20 e0       	ldi	r18, 0x00	; 0
    10e2:	30 e0       	ldi	r19, 0x00	; 0
		intValue = string[i] - '0';
		result = result * 10 + intValue;
    10e4:	a9 01       	movw	r20, r18
    10e6:	44 0f       	add	r20, r20
    10e8:	55 1f       	adc	r21, r21
    10ea:	22 0f       	add	r18, r18
    10ec:	33 1f       	adc	r19, r19
    10ee:	22 0f       	add	r18, r18
    10f0:	33 1f       	adc	r19, r19
    10f2:	22 0f       	add	r18, r18
    10f4:	33 1f       	adc	r19, r19
    10f6:	42 0f       	add	r20, r18
    10f8:	53 1f       	adc	r21, r19
    10fa:	29 2f       	mov	r18, r25
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	20 53       	subi	r18, 0x30	; 48
    1100:	31 09       	sbc	r19, r1
    1102:	24 0f       	add	r18, r20
    1104:	35 1f       	adc	r19, r21
}
// Function to convert a string to an integer
int FUNCstrToInt (const char string[])
{
	int i, intValue, result = 0;
	for ( i = 0; string[i] >= '0' && string[i] <= '9'; ++i ){
    1106:	91 91       	ld	r25, Z+
    1108:	80 ed       	ldi	r24, 0xD0	; 208
    110a:	89 0f       	add	r24, r25
    110c:	8a 30       	cpi	r24, 0x0A	; 10
    110e:	50 f3       	brcs	.-44     	; 0x10e4 <FUNCstrToInt+0x12>
    1110:	02 c0       	rjmp	.+4      	; 0x1116 <__stack+0x17>
	return u;
}
// Function to convert a string to an integer
int FUNCstrToInt (const char string[])
{
	int i, intValue, result = 0;
    1112:	20 e0       	ldi	r18, 0x00	; 0
    1114:	30 e0       	ldi	r19, 0x00	; 0
	for ( i = 0; string[i] >= '0' && string[i] <= '9'; ++i ){
		intValue = string[i] - '0';
		result = result * 10 + intValue;
	}
	return result;
}
    1116:	c9 01       	movw	r24, r18
    1118:	08 95       	ret

0000111a <FUNCfilter>:
uint8_t FUNCfilter(uint8_t mask, uint8_t data)
{
	uint8_t Z;
	Z=mask & data;
	return Z;
}
    111a:	86 23       	and	r24, r22
    111c:	08 95       	ret

0000111e <FUNCticks>:
// ticks
unsigned int FUNCticks(unsigned int num)
{
	unsigned int count;
	for(count=0;count<num;count++)
    111e:	00 97       	sbiw	r24, 0x00	; 0
    1120:	39 f0       	breq	.+14     	; 0x1130 <FUNCticks+0x12>
    1122:	20 e0       	ldi	r18, 0x00	; 0
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	2f 5f       	subi	r18, 0xFF	; 255
    1128:	3f 4f       	sbci	r19, 0xFF	; 255
    112a:	82 17       	cp	r24, r18
    112c:	93 07       	cpc	r25, r19
    112e:	d9 f7       	brne	.-10     	; 0x1126 <FUNCticks+0x8>
		;
	return count;
}
    1130:	08 95       	ret

00001132 <FUNCtwocomptoint8bit>:
// Two's Complement function
int FUNCtwocomptoint8bit(int twoscomp){
  
  //Let's see if the byte is negative
  if (twoscomp & 0B10000000){
    1132:	87 ff       	sbrs	r24, 7
    1134:	08 c0       	rjmp	.+16     	; 0x1146 <FUNCtwocomptoint8bit+0x14>
    //Invert
    twoscomp = ~twoscomp + 1;
    1136:	91 95       	neg	r25
    1138:	81 95       	neg	r24
    113a:	91 09       	sbc	r25, r1
	twoscomp = (twoscomp & 0B11111111);
    //Cast as int and multiply by negative one
    int value = (int)(twoscomp)*(-1);
    113c:	99 27       	eor	r25, r25
    113e:	91 95       	neg	r25
    1140:	81 95       	neg	r24
    1142:	91 09       	sbc	r25, r1
    return value;
    1144:	08 95       	ret
    //Byte is non-negative, therefore convert to decimal and display
    //Make sure we are never over 1279
    twoscomp = (twoscomp & 0B01111111);
    //Cast as int and return
    int value = (int)(twoscomp);
    return value;
    1146:	8f 77       	andi	r24, 0x7F	; 127
    1148:	99 27       	eor	r25, r25
  }
}
    114a:	08 95       	ret

0000114c <FUNCtwocomptoint10bit>:
// Two's Complement function, shifts 10 bit binary to signed integers (-512 to 512)
int FUNCtwocomptoint10bit(int twoscomp){
	
  //Let's see if the byte is negative
  if (twoscomp & 0x200){
    114c:	91 ff       	sbrs	r25, 1
    114e:	08 c0       	rjmp	.+16     	; 0x1160 <FUNCtwocomptoint10bit+0x14>
    //Invert
    twoscomp = ~twoscomp + 1;
    1150:	91 95       	neg	r25
    1152:	81 95       	neg	r24
    1154:	91 09       	sbc	r25, r1
    twoscomp = (twoscomp & 0x3FF);
    //Cast as int and multiply by negative one
    int value = (int)(twoscomp)*(-1);
    1156:	93 70       	andi	r25, 0x03	; 3
    1158:	91 95       	neg	r25
    115a:	81 95       	neg	r24
    115c:	91 09       	sbc	r25, r1
    return value;
    115e:	08 95       	ret
    //Byte is non-negative, therefore convert to decimal and display
    twoscomp = (twoscomp & 0x1FF);
    //Cast as int and return
    //Serial.println(twoscomp);
    int value = (int)(twoscomp);
    return value;
    1160:	91 70       	andi	r25, 0x01	; 1
  }
}
    1162:	08 95       	ret

00001164 <FUNCtwocomptointnbit>:
// Two's Complement function, nbits
int FUNCtwocomptointnbit(int twoscomp, uint8_t nbits){
  unsigned int signmask;
  unsigned int mask;
  signmask = (1<<(nbits-1));
    1164:	61 50       	subi	r22, 0x01	; 1
    1166:	21 e0       	ldi	r18, 0x01	; 1
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	02 c0       	rjmp	.+4      	; 0x1170 <FUNCtwocomptointnbit+0xc>
    116c:	22 0f       	add	r18, r18
    116e:	33 1f       	adc	r19, r19
    1170:	6a 95       	dec	r22
    1172:	e2 f7       	brpl	.-8      	; 0x116c <FUNCtwocomptointnbit+0x8>
  mask=signmask-1;
    1174:	a9 01       	movw	r20, r18
    1176:	41 50       	subi	r20, 0x01	; 1
    1178:	51 09       	sbc	r21, r1
  //Let's see if the number is negative
  if (twoscomp & signmask){
    117a:	b9 01       	movw	r22, r18
    117c:	68 23       	and	r22, r24
    117e:	79 23       	and	r23, r25
    1180:	67 2b       	or	r22, r23
    1182:	29 f0       	breq	.+10     	; 0x118e <FUNCtwocomptointnbit+0x2a>
	twoscomp &= mask;
    twoscomp -= signmask;
    1184:	84 23       	and	r24, r20
    1186:	95 23       	and	r25, r21
    1188:	82 1b       	sub	r24, r18
    118a:	93 0b       	sbc	r25, r19
    118c:	08 95       	ret
  }else{
	  twoscomp &= mask;
    118e:	84 23       	and	r24, r20
    1190:	95 23       	and	r25, r21
  }
  return twoscomp;
}
    1192:	08 95       	ret

00001194 <FUNCdec2bcd>:
// Convert Decimal to Binary Coded Decimal (BCD)
char FUNCdec2bcd(char num)
{
	return ((num/10 * 16) + (num % 10));
    1194:	9d ec       	ldi	r25, 0xCD	; 205
    1196:	89 9f       	mul	r24, r25
    1198:	91 2d       	mov	r25, r1
    119a:	11 24       	eor	r1, r1
    119c:	96 95       	lsr	r25
    119e:	96 95       	lsr	r25
    11a0:	96 95       	lsr	r25
    11a2:	39 2f       	mov	r19, r25
    11a4:	33 0f       	add	r19, r19
    11a6:	23 2f       	mov	r18, r19
    11a8:	22 0f       	add	r18, r18
    11aa:	22 0f       	add	r18, r18
    11ac:	23 0f       	add	r18, r19
    11ae:	82 1b       	sub	r24, r18
}
    11b0:	20 e1       	ldi	r18, 0x10	; 16
    11b2:	92 9f       	mul	r25, r18
    11b4:	80 0d       	add	r24, r0
    11b6:	11 24       	eor	r1, r1
    11b8:	08 95       	ret

000011ba <FUNCbcd2dec>:
// Convert Binary Coded Decimal (BCD) to Decimal
char FUNCbcd2dec(char num)
{
	return ((num/16 * 10) + (num % 16));
    11ba:	98 2f       	mov	r25, r24
    11bc:	92 95       	swap	r25
    11be:	9f 70       	andi	r25, 0x0F	; 15
    11c0:	99 0f       	add	r25, r25
    11c2:	29 2f       	mov	r18, r25
    11c4:	22 0f       	add	r18, r18
    11c6:	22 0f       	add	r18, r18
    11c8:	92 0f       	add	r25, r18
    11ca:	8f 70       	andi	r24, 0x0F	; 15
}
    11cc:	89 0f       	add	r24, r25
    11ce:	08 95       	ret

000011d0 <FUNCresizestr>:
char* FUNCresizestr(char *string, int size)
{
    11d0:	fc 01       	movw	r30, r24
	int i;
	FUNCstr[size]='\0';
    11d2:	db 01       	movw	r26, r22
    11d4:	af 50       	subi	r26, 0x0F	; 15
    11d6:	be 4f       	sbci	r27, 0xFE	; 254
    11d8:	1c 92       	st	X, r1
	for(i=0;i<size;i++){
    11da:	16 16       	cp	r1, r22
    11dc:	17 06       	cpc	r1, r23
    11de:	14 f5       	brge	.+68     	; 0x1224 <FUNCresizestr+0x54>
		if(*(string+i)=='\0'){
    11e0:	90 81       	ld	r25, Z
    11e2:	91 11       	cpse	r25, r1
    11e4:	0c c0       	rjmp	.+24     	; 0x11fe <FUNCresizestr+0x2e>
    11e6:	17 c0       	rjmp	.+46     	; 0x1216 <FUNCresizestr+0x46>
    11e8:	91 91       	ld	r25, Z+
    11ea:	91 11       	cpse	r25, r1
    11ec:	0d c0       	rjmp	.+26     	; 0x1208 <FUNCresizestr+0x38>
    11ee:	15 c0       	rjmp	.+42     	; 0x121a <FUNCresizestr+0x4a>
			for(;i<size;i++){
				FUNCstr[i]=' ';
    11f0:	81 93       	st	Z+, r24
{
	int i;
	FUNCstr[size]='\0';
	for(i=0;i<size;i++){
		if(*(string+i)=='\0'){
			for(;i<size;i++){
    11f2:	2f 5f       	subi	r18, 0xFF	; 255
    11f4:	3f 4f       	sbci	r19, 0xFF	; 255
    11f6:	26 17       	cp	r18, r22
    11f8:	37 07       	cpc	r19, r23
    11fa:	d4 f3       	brlt	.-12     	; 0x11f0 <FUNCresizestr+0x20>
    11fc:	13 c0       	rjmp	.+38     	; 0x1224 <FUNCresizestr+0x54>
    11fe:	a1 ef       	ldi	r26, 0xF1	; 241
    1200:	b1 e0       	ldi	r27, 0x01	; 1
    1202:	31 96       	adiw	r30, 0x01	; 1
char* FUNCresizestr(char *string, int size)
{
	int i;
	FUNCstr[size]='\0';
	for(i=0;i<size;i++){
		if(*(string+i)=='\0'){
    1204:	20 e0       	ldi	r18, 0x00	; 0
    1206:	30 e0       	ldi	r19, 0x00	; 0
			for(;i<size;i++){
				FUNCstr[i]=' ';
			}
			break;
		}
		FUNCstr[i]=*(string+i);
    1208:	9d 93       	st	X+, r25
}
char* FUNCresizestr(char *string, int size)
{
	int i;
	FUNCstr[size]='\0';
	for(i=0;i<size;i++){
    120a:	2f 5f       	subi	r18, 0xFF	; 255
    120c:	3f 4f       	sbci	r19, 0xFF	; 255
    120e:	62 17       	cp	r22, r18
    1210:	73 07       	cpc	r23, r19
    1212:	51 f7       	brne	.-44     	; 0x11e8 <FUNCresizestr+0x18>
    1214:	07 c0       	rjmp	.+14     	; 0x1224 <FUNCresizestr+0x54>
    1216:	20 e0       	ldi	r18, 0x00	; 0
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	f9 01       	movw	r30, r18
    121c:	ef 50       	subi	r30, 0x0F	; 15
    121e:	fe 4f       	sbci	r31, 0xFE	; 254
		if(*(string+i)=='\0'){
			for(;i<size;i++){
				FUNCstr[i]=' ';
    1220:	80 e2       	ldi	r24, 0x20	; 32
    1222:	e6 cf       	rjmp	.-52     	; 0x11f0 <FUNCresizestr+0x20>
			break;
		}
		FUNCstr[i]=*(string+i);
	}
	return FUNCstr;
}
    1224:	81 ef       	ldi	r24, 0xF1	; 241
    1226:	91 e0       	ldi	r25, 0x01	; 1
    1228:	08 95       	ret

0000122a <FUNCtrimmer>:
long FUNCtrimmer(long x, long in_min, long in_max, long out_min, long out_max)
/*
	same as arduino map function.
*/
{
    122a:	4f 92       	push	r4
    122c:	5f 92       	push	r5
    122e:	6f 92       	push	r6
    1230:	7f 92       	push	r7
    1232:	af 92       	push	r10
    1234:	bf 92       	push	r11
    1236:	cf 92       	push	r12
    1238:	df 92       	push	r13
    123a:	ef 92       	push	r14
    123c:	ff 92       	push	r15
    123e:	0f 93       	push	r16
    1240:	1f 93       	push	r17
    1242:	cf 93       	push	r28
    1244:	df 93       	push	r29
    1246:	cd b7       	in	r28, 0x3d	; 61
    1248:	de b7       	in	r29, 0x3e	; 62
    124a:	29 01       	movw	r4, r18
    124c:	3a 01       	movw	r6, r20
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    124e:	9b 01       	movw	r18, r22
    1250:	ac 01       	movw	r20, r24
    1252:	24 19       	sub	r18, r4
    1254:	35 09       	sbc	r19, r5
    1256:	46 09       	sbc	r20, r6
    1258:	57 09       	sbc	r21, r7
    125a:	89 89       	ldd	r24, Y+17	; 0x11
    125c:	9a 89       	ldd	r25, Y+18	; 0x12
    125e:	ab 89       	ldd	r26, Y+19	; 0x13
    1260:	bc 89       	ldd	r27, Y+20	; 0x14
    1262:	bc 01       	movw	r22, r24
    1264:	cd 01       	movw	r24, r26
    1266:	6a 19       	sub	r22, r10
    1268:	7b 09       	sbc	r23, r11
    126a:	8c 09       	sbc	r24, r12
    126c:	9d 09       	sbc	r25, r13
    126e:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__mulsi3>
    1272:	a8 01       	movw	r20, r16
    1274:	97 01       	movw	r18, r14
    1276:	24 19       	sub	r18, r4
    1278:	35 09       	sbc	r19, r5
    127a:	46 09       	sbc	r20, r6
    127c:	57 09       	sbc	r21, r7
    127e:	0e 94 3b 12 	call	0x2476	; 0x2476 <__divmodsi4>
    1282:	ca 01       	movw	r24, r20
    1284:	b9 01       	movw	r22, r18
    1286:	6a 0d       	add	r22, r10
    1288:	7b 1d       	adc	r23, r11
    128a:	8c 1d       	adc	r24, r12
    128c:	9d 1d       	adc	r25, r13
}
    128e:	df 91       	pop	r29
    1290:	cf 91       	pop	r28
    1292:	1f 91       	pop	r17
    1294:	0f 91       	pop	r16
    1296:	ff 90       	pop	r15
    1298:	ef 90       	pop	r14
    129a:	df 90       	pop	r13
    129c:	cf 90       	pop	r12
    129e:	bf 90       	pop	r11
    12a0:	af 90       	pop	r10
    12a2:	7f 90       	pop	r7
    12a4:	6f 90       	pop	r6
    12a6:	5f 90       	pop	r5
    12a8:	4f 90       	pop	r4
    12aa:	08 95       	ret

000012ac <Pwr>:
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
    12ac:	70 e0       	ldi	r23, 0x00	; 0
    12ae:	61 15       	cp	r22, r1
    12b0:	71 05       	cpc	r23, r1
    12b2:	99 f0       	breq	.+38     	; 0x12da <Pwr+0x2e>
    12b4:	41 e0       	ldi	r20, 0x01	; 1
    12b6:	50 e0       	ldi	r21, 0x00	; 0
    12b8:	21 e0       	ldi	r18, 0x01	; 1
    12ba:	30 e0       	ldi	r19, 0x00	; 0
        p = p * bs;
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	fa 01       	movw	r30, r20
    12c0:	e8 9f       	mul	r30, r24
    12c2:	a0 01       	movw	r20, r0
    12c4:	e9 9f       	mul	r30, r25
    12c6:	50 0d       	add	r21, r0
    12c8:	f8 9f       	mul	r31, r24
    12ca:	50 0d       	add	r21, r0
    12cc:	11 24       	eor	r1, r1
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
    12ce:	2f 5f       	subi	r18, 0xFF	; 255
    12d0:	3f 4f       	sbci	r19, 0xFF	; 255
    12d2:	62 17       	cp	r22, r18
    12d4:	73 07       	cpc	r23, r19
    12d6:	98 f7       	brcc	.-26     	; 0x12be <Pwr+0x12>
    12d8:	02 c0       	rjmp	.+4      	; 0x12de <Pwr+0x32>
}
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    12da:	41 e0       	ldi	r20, 0x01	; 1
    12dc:	50 e0       	ldi	r21, 0x00	; 0
    for (i = 1; i <= n; ++i)
        p = p * bs;
    return p;
}
    12de:	ca 01       	movw	r24, r20
    12e0:	08 95       	ret

000012e2 <StringLength>:
// Function to count the number of characters in a string
int StringLength (const char string[])
{
	int count = 0;
	while ( string[count] != '\0' )
    12e2:	fc 01       	movw	r30, r24
    12e4:	20 81       	ld	r18, Z
    12e6:	22 23       	and	r18, r18
    12e8:	41 f0       	breq	.+16     	; 0x12fa <StringLength+0x18>
    12ea:	31 96       	adiw	r30, 0x01	; 1
    12ec:	80 e0       	ldi	r24, 0x00	; 0
    12ee:	90 e0       	ldi	r25, 0x00	; 0
		++count;
    12f0:	01 96       	adiw	r24, 0x01	; 1
}
// Function to count the number of characters in a string
int StringLength (const char string[])
{
	int count = 0;
	while ( string[count] != '\0' )
    12f2:	21 91       	ld	r18, Z+
    12f4:	21 11       	cpse	r18, r1
    12f6:	fc cf       	rjmp	.-8      	; 0x12f0 <StringLength+0xe>
    12f8:	08 95       	ret
    return p;
}
// Function to count the number of characters in a string
int StringLength (const char string[])
{
	int count = 0;
    12fa:	80 e0       	ldi	r24, 0x00	; 0
    12fc:	90 e0       	ldi	r25, 0x00	; 0
	while ( string[count] != '\0' )
		++count;
	return count;
}
    12fe:	08 95       	ret

00001300 <FUNCtrim>:
	Reverse(FUNCstr);
	return FUNCstr;
}
// trim: remove trailing blanks, tabs, newlines
int FUNCtrim(char s[])
{
    1300:	cf 93       	push	r28
    1302:	df 93       	push	r29
    1304:	ec 01       	movw	r28, r24
	int n;
	for (n = StringLength(s)-1; n >= 0; n--)
    1306:	ed df       	rcall	.-38     	; 0x12e2 <StringLength>
    1308:	9c 01       	movw	r18, r24
    130a:	21 50       	subi	r18, 0x01	; 1
    130c:	31 09       	sbc	r19, r1
    130e:	62 f0       	brmi	.+24     	; 0x1328 <FUNCtrim+0x28>
    1310:	fe 01       	movw	r30, r28
    1312:	e8 0f       	add	r30, r24
    1314:	f9 1f       	adc	r31, r25
		if (s[n] != ' ' && s[n] != '\t' && s[n] != '\n')
    1316:	92 91       	ld	r25, -Z
    1318:	90 32       	cpi	r25, 0x20	; 32
    131a:	19 f0       	breq	.+6      	; 0x1322 <FUNCtrim+0x22>
    131c:	99 50       	subi	r25, 0x09	; 9
    131e:	92 30       	cpi	r25, 0x02	; 2
    1320:	18 f4       	brcc	.+6      	; 0x1328 <FUNCtrim+0x28>
}
// trim: remove trailing blanks, tabs, newlines
int FUNCtrim(char s[])
{
	int n;
	for (n = StringLength(s)-1; n >= 0; n--)
    1322:	21 50       	subi	r18, 0x01	; 1
    1324:	31 09       	sbc	r19, r1
    1326:	b8 f7       	brcc	.-18     	; 0x1316 <FUNCtrim+0x16>
		if (s[n] != ' ' && s[n] != '\t' && s[n] != '\n')
			break;
	s[n+1] = '\0';
    1328:	c2 0f       	add	r28, r18
    132a:	d3 1f       	adc	r29, r19
    132c:	19 82       	std	Y+1, r1	; 0x01
	return n;
}
    132e:	c9 01       	movw	r24, r18
    1330:	df 91       	pop	r29
    1332:	cf 91       	pop	r28
    1334:	08 95       	ret

00001336 <Reverse>:
		++count;
	return count;
}
// reverse: reverse string s in place
void Reverse(char s[])
{
    1336:	cf 93       	push	r28
    1338:	df 93       	push	r29
    133a:	ec 01       	movw	r28, r24
	int c, i, j;
	for (i = 0, j = StringLength(s)-1; i < j; i++, j--){
    133c:	d2 df       	rcall	.-92     	; 0x12e2 <StringLength>
    133e:	9c 01       	movw	r18, r24
    1340:	21 50       	subi	r18, 0x01	; 1
    1342:	31 09       	sbc	r19, r1
    1344:	12 16       	cp	r1, r18
    1346:	13 06       	cpc	r1, r19
    1348:	84 f4       	brge	.+32     	; 0x136a <Reverse+0x34>
    134a:	de 01       	movw	r26, r28
    134c:	a8 0f       	add	r26, r24
    134e:	b9 1f       	adc	r27, r25
    1350:	fe 01       	movw	r30, r28
    1352:	80 e0       	ldi	r24, 0x00	; 0
    1354:	90 e0       	ldi	r25, 0x00	; 0
		c = s[i];
    1356:	40 81       	ld	r20, Z
		s[i] = s[j];
    1358:	5e 91       	ld	r21, -X
    135a:	51 93       	st	Z+, r21
		s[j] = c;
    135c:	4c 93       	st	X, r20
}
// reverse: reverse string s in place
void Reverse(char s[])
{
	int c, i, j;
	for (i = 0, j = StringLength(s)-1; i < j; i++, j--){
    135e:	01 96       	adiw	r24, 0x01	; 1
    1360:	21 50       	subi	r18, 0x01	; 1
    1362:	31 09       	sbc	r19, r1
    1364:	82 17       	cp	r24, r18
    1366:	93 07       	cpc	r25, r19
    1368:	b4 f3       	brlt	.-20     	; 0x1356 <Reverse+0x20>
		c = s[i];
		s[i] = s[j];
		s[j] = c;
	}
}
    136a:	df 91       	pop	r29
    136c:	cf 91       	pop	r28
    136e:	08 95       	ret

00001370 <FUNCi32toa>:
				v[j+gap] = temp;
			}
}
// i32toa: convert n to characters in s
char* FUNCi32toa(int32_t n)
{
    1370:	8f 92       	push	r8
    1372:	9f 92       	push	r9
    1374:	af 92       	push	r10
    1376:	bf 92       	push	r11
    1378:	cf 92       	push	r12
    137a:	df 92       	push	r13
    137c:	ef 92       	push	r14
    137e:	ff 92       	push	r15
    1380:	0f 93       	push	r16
    1382:	1f 93       	push	r17
    1384:	cf 93       	push	r28
    1386:	df 93       	push	r29
    1388:	6b 01       	movw	r12, r22
    138a:	7c 01       	movw	r14, r24
    138c:	dc 01       	movw	r26, r24
    138e:	cb 01       	movw	r24, r22
    1390:	ff 20       	and	r15, r15
    1392:	3c f4       	brge	.+14     	; 0x13a2 <FUNCi32toa+0x32>
    1394:	88 27       	eor	r24, r24
    1396:	99 27       	eor	r25, r25
    1398:	dc 01       	movw	r26, r24
    139a:	8c 19       	sub	r24, r12
    139c:	9d 09       	sbc	r25, r13
    139e:	ae 09       	sbc	r26, r14
    13a0:	bf 09       	sbc	r27, r15
    13a2:	bc 01       	movw	r22, r24
    13a4:	cd 01       	movw	r24, r26
    13a6:	10 e0       	ldi	r17, 0x00	; 0
	int32_t sign;
	if ((sign = n) < 0) // record sign
	n = -n; // make n positive
	i = 0;
	do { // generate digits in reverse order
		FUNCstr[i++] = n % 10 + '0'; // get next digit
    13a8:	0f 2e       	mov	r0, r31
    13aa:	fa e0       	ldi	r31, 0x0A	; 10
    13ac:	8f 2e       	mov	r8, r31
    13ae:	91 2c       	mov	r9, r1
    13b0:	a1 2c       	mov	r10, r1
    13b2:	b1 2c       	mov	r11, r1
    13b4:	f0 2d       	mov	r31, r0
    13b6:	01 c0       	rjmp	.+2      	; 0x13ba <FUNCi32toa+0x4a>
    13b8:	10 2f       	mov	r17, r16
    13ba:	01 e0       	ldi	r16, 0x01	; 1
    13bc:	01 0f       	add	r16, r17
    13be:	c1 2f       	mov	r28, r17
    13c0:	d0 e0       	ldi	r29, 0x00	; 0
    13c2:	cf 50       	subi	r28, 0x0F	; 15
    13c4:	de 4f       	sbci	r29, 0xFE	; 254
    13c6:	a5 01       	movw	r20, r10
    13c8:	94 01       	movw	r18, r8
    13ca:	0e 94 3b 12 	call	0x2476	; 0x2476 <__divmodsi4>
    13ce:	60 5d       	subi	r22, 0xD0	; 208
    13d0:	68 83       	st	Y, r22
	}while ((n /= 10) > 0); // delete it
    13d2:	62 2f       	mov	r22, r18
    13d4:	73 2f       	mov	r23, r19
    13d6:	84 2f       	mov	r24, r20
    13d8:	95 2f       	mov	r25, r21
    13da:	16 16       	cp	r1, r22
    13dc:	17 06       	cpc	r1, r23
    13de:	18 06       	cpc	r1, r24
    13e0:	19 06       	cpc	r1, r25
    13e2:	54 f3       	brlt	.-44     	; 0x13b8 <FUNCi32toa+0x48>
	if (sign < 0)
    13e4:	ff 20       	and	r15, r15
    13e6:	44 f4       	brge	.+16     	; 0x13f8 <FUNCi32toa+0x88>
	FUNCstr[i++] = '-';
    13e8:	e0 2f       	mov	r30, r16
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	ef 50       	subi	r30, 0x0F	; 15
    13ee:	fe 4f       	sbci	r31, 0xFE	; 254
    13f0:	8d e2       	ldi	r24, 0x2D	; 45
    13f2:	80 83       	st	Z, r24
    13f4:	02 e0       	ldi	r16, 0x02	; 2
    13f6:	01 0f       	add	r16, r17
	FUNCstr[i] = '\0';
    13f8:	e0 2f       	mov	r30, r16
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	ef 50       	subi	r30, 0x0F	; 15
    13fe:	fe 4f       	sbci	r31, 0xFE	; 254
    1400:	10 82       	st	Z, r1
	Reverse(FUNCstr);
    1402:	81 ef       	ldi	r24, 0xF1	; 241
    1404:	91 e0       	ldi	r25, 0x01	; 1
    1406:	97 df       	rcall	.-210    	; 0x1336 <Reverse>
	return FUNCstr;
}
    1408:	81 ef       	ldi	r24, 0xF1	; 241
    140a:	91 e0       	ldi	r25, 0x01	; 1
    140c:	df 91       	pop	r29
    140e:	cf 91       	pop	r28
    1410:	1f 91       	pop	r17
    1412:	0f 91       	pop	r16
    1414:	ff 90       	pop	r15
    1416:	ef 90       	pop	r14
    1418:	df 90       	pop	r13
    141a:	cf 90       	pop	r12
    141c:	bf 90       	pop	r11
    141e:	af 90       	pop	r10
    1420:	9f 90       	pop	r9
    1422:	8f 90       	pop	r8
    1424:	08 95       	ret

00001426 <FUNCi16toa>:
// i16toa: convert n to characters in s
char* FUNCi16toa(int16_t n)
{
    1426:	0f 93       	push	r16
    1428:	1f 93       	push	r17
    142a:	cf 93       	push	r28
    142c:	df 93       	push	r29
    142e:	ec 01       	movw	r28, r24
    1430:	99 23       	and	r25, r25
    1432:	24 f4       	brge	.+8      	; 0x143c <FUNCi16toa+0x16>
    1434:	88 27       	eor	r24, r24
    1436:	99 27       	eor	r25, r25
    1438:	8c 1b       	sub	r24, r28
    143a:	9d 0b       	sbc	r25, r29
    143c:	20 e0       	ldi	r18, 0x00	; 0
	int16_t sign;
	if ((sign = n) < 0) // record sign
		n = -n; // make n positive
	i = 0;
	do { // generate digits in reverse order
		FUNCstr[i++] = n % 10 + '0'; // get next digit
    143e:	0a e0       	ldi	r16, 0x0A	; 10
    1440:	10 e0       	ldi	r17, 0x00	; 0
    1442:	01 c0       	rjmp	.+2      	; 0x1446 <FUNCi16toa+0x20>
    1444:	23 2f       	mov	r18, r19
    1446:	31 e0       	ldi	r19, 0x01	; 1
    1448:	32 0f       	add	r19, r18
    144a:	e2 2f       	mov	r30, r18
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	ef 50       	subi	r30, 0x0F	; 15
    1450:	fe 4f       	sbci	r31, 0xFE	; 254
    1452:	b8 01       	movw	r22, r16
    1454:	db d7       	rcall	.+4022   	; 0x240c <__divmodhi4>
    1456:	80 5d       	subi	r24, 0xD0	; 208
    1458:	80 83       	st	Z, r24
	}while ((n /= 10) > 0); // delete it
    145a:	86 2f       	mov	r24, r22
    145c:	97 2f       	mov	r25, r23
    145e:	18 16       	cp	r1, r24
    1460:	19 06       	cpc	r1, r25
    1462:	84 f3       	brlt	.-32     	; 0x1444 <FUNCi16toa+0x1e>
	if (sign < 0)
    1464:	dd 23       	and	r29, r29
    1466:	44 f4       	brge	.+16     	; 0x1478 <FUNCi16toa+0x52>
		FUNCstr[i++] = '-';
    1468:	e3 2f       	mov	r30, r19
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	ef 50       	subi	r30, 0x0F	; 15
    146e:	fe 4f       	sbci	r31, 0xFE	; 254
    1470:	8d e2       	ldi	r24, 0x2D	; 45
    1472:	80 83       	st	Z, r24
    1474:	32 e0       	ldi	r19, 0x02	; 2
    1476:	32 0f       	add	r19, r18
	FUNCstr[i] = '\0';
    1478:	e3 2f       	mov	r30, r19
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	ef 50       	subi	r30, 0x0F	; 15
    147e:	fe 4f       	sbci	r31, 0xFE	; 254
    1480:	10 82       	st	Z, r1
	Reverse(FUNCstr);
    1482:	81 ef       	ldi	r24, 0xF1	; 241
    1484:	91 e0       	ldi	r25, 0x01	; 1
    1486:	57 df       	rcall	.-338    	; 0x1336 <Reverse>
	return FUNCstr;
}
    1488:	81 ef       	ldi	r24, 0xF1	; 241
    148a:	91 e0       	ldi	r25, 0x01	; 1
    148c:	df 91       	pop	r29
    148e:	cf 91       	pop	r28
    1490:	1f 91       	pop	r17
    1492:	0f 91       	pop	r16
    1494:	08 95       	ret

00001496 <FUNCui16toa>:
// ui16toa: convert n to characters in s
char* FUNCui16toa(uint16_t n)
{
    1496:	cf 93       	push	r28
    1498:	ac 01       	movw	r20, r24
	uint8_t i;
	i = 0;
    149a:	e0 e0       	ldi	r30, 0x00	; 0
	do { // generate digits in reverse order
		FUNCstr[i++] = n % 10 + '0'; // get next digit
    149c:	c1 e0       	ldi	r28, 0x01	; 1
    149e:	ce 0f       	add	r28, r30
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	ef 50       	subi	r30, 0x0F	; 15
    14a4:	fe 4f       	sbci	r31, 0xFE	; 254
    14a6:	9a 01       	movw	r18, r20
    14a8:	ad ec       	ldi	r26, 0xCD	; 205
    14aa:	bc ec       	ldi	r27, 0xCC	; 204
    14ac:	0e 94 60 12 	call	0x24c0	; 0x24c0 <__umulhisi3>
    14b0:	96 95       	lsr	r25
    14b2:	87 95       	ror	r24
    14b4:	96 95       	lsr	r25
    14b6:	87 95       	ror	r24
    14b8:	96 95       	lsr	r25
    14ba:	87 95       	ror	r24
    14bc:	9c 01       	movw	r18, r24
    14be:	22 0f       	add	r18, r18
    14c0:	33 1f       	adc	r19, r19
    14c2:	88 0f       	add	r24, r24
    14c4:	99 1f       	adc	r25, r25
    14c6:	88 0f       	add	r24, r24
    14c8:	99 1f       	adc	r25, r25
    14ca:	88 0f       	add	r24, r24
    14cc:	99 1f       	adc	r25, r25
    14ce:	82 0f       	add	r24, r18
    14d0:	93 1f       	adc	r25, r19
    14d2:	9a 01       	movw	r18, r20
    14d4:	28 1b       	sub	r18, r24
    14d6:	39 0b       	sbc	r19, r25
    14d8:	c9 01       	movw	r24, r18
    14da:	80 5d       	subi	r24, 0xD0	; 208
    14dc:	80 83       	st	Z, r24
	}while ((n /= 10) > 0); // delete it
    14de:	9a 01       	movw	r18, r20
    14e0:	ef d7       	rcall	.+4062   	; 0x24c0 <__umulhisi3>
    14e2:	ac 01       	movw	r20, r24
    14e4:	56 95       	lsr	r21
    14e6:	47 95       	ror	r20
    14e8:	56 95       	lsr	r21
    14ea:	47 95       	ror	r20
    14ec:	56 95       	lsr	r21
    14ee:	47 95       	ror	r20
char* FUNCui16toa(uint16_t n)
{
	uint8_t i;
	i = 0;
	do { // generate digits in reverse order
		FUNCstr[i++] = n % 10 + '0'; // get next digit
    14f0:	ec 2f       	mov	r30, r28
	}while ((n /= 10) > 0); // delete it
    14f2:	41 15       	cp	r20, r1
    14f4:	51 05       	cpc	r21, r1
    14f6:	91 f6       	brne	.-92     	; 0x149c <FUNCui16toa+0x6>
	FUNCstr[i] = '\0';
    14f8:	ec 2f       	mov	r30, r28
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	ef 50       	subi	r30, 0x0F	; 15
    14fe:	fe 4f       	sbci	r31, 0xFE	; 254
    1500:	10 82       	st	Z, r1
	Reverse(FUNCstr);
    1502:	81 ef       	ldi	r24, 0xF1	; 241
    1504:	91 e0       	ldi	r25, 0x01	; 1
    1506:	17 df       	rcall	.-466    	; 0x1336 <Reverse>
	return FUNCstr;
}
    1508:	81 ef       	ldi	r24, 0xF1	; 241
    150a:	91 e0       	ldi	r25, 0x01	; 1
    150c:	cf 91       	pop	r28
    150e:	08 95       	ret

00001510 <FUNCbcd2bin>:
		s[j] = c;
	}
}
unsigned char FUNCbcd2bin(unsigned char val)
{
	return (val & 0x0f) + (val >> 4) * 10;
    1510:	98 2f       	mov	r25, r24
    1512:	92 95       	swap	r25
    1514:	9f 70       	andi	r25, 0x0F	; 15
    1516:	99 0f       	add	r25, r25
    1518:	29 2f       	mov	r18, r25
    151a:	22 0f       	add	r18, r18
    151c:	22 0f       	add	r18, r18
    151e:	92 0f       	add	r25, r18
    1520:	8f 70       	andi	r24, 0x0F	; 15
}
    1522:	89 0f       	add	r24, r25
    1524:	08 95       	ret

00001526 <FUNCbin2bcd>:
unsigned char FUNCbin2bcd(unsigned val)
{
    1526:	ac 01       	movw	r20, r24
	return ((val / 10) << 4) + val % 10;
    1528:	9c 01       	movw	r18, r24
    152a:	ad ec       	ldi	r26, 0xCD	; 205
    152c:	bc ec       	ldi	r27, 0xCC	; 204
    152e:	c8 d7       	rcall	.+3984   	; 0x24c0 <__umulhisi3>
    1530:	96 95       	lsr	r25
    1532:	87 95       	ror	r24
    1534:	96 95       	lsr	r25
    1536:	87 95       	ror	r24
    1538:	96 95       	lsr	r25
    153a:	87 95       	ror	r24
    153c:	bc 01       	movw	r22, r24
    153e:	66 0f       	add	r22, r22
    1540:	77 1f       	adc	r23, r23
    1542:	9c 01       	movw	r18, r24
    1544:	22 0f       	add	r18, r18
    1546:	33 1f       	adc	r19, r19
    1548:	22 0f       	add	r18, r18
    154a:	33 1f       	adc	r19, r19
    154c:	22 0f       	add	r18, r18
    154e:	33 1f       	adc	r19, r19
    1550:	26 0f       	add	r18, r22
    1552:	37 1f       	adc	r19, r23
    1554:	42 1b       	sub	r20, r18
    1556:	53 0b       	sbc	r21, r19
}
    1558:	34 2f       	mov	r19, r20
    155a:	20 e1       	ldi	r18, 0x10	; 16
    155c:	82 9f       	mul	r24, r18
    155e:	30 0d       	add	r19, r0
    1560:	11 24       	eor	r1, r1
    1562:	83 2f       	mov	r24, r19
    1564:	08 95       	ret

00001566 <FUNCgcd1>:
long FUNCgcd1(long a, long b)
{
    1566:	cf 92       	push	r12
    1568:	df 92       	push	r13
    156a:	ef 92       	push	r14
    156c:	ff 92       	push	r15
    156e:	cf 93       	push	r28
    1570:	df 93       	push	r29
    1572:	cd b7       	in	r28, 0x3d	; 61
    1574:	de b7       	in	r29, 0x3e	; 62
    1576:	28 97       	sbiw	r28, 0x08	; 8
    1578:	0f b6       	in	r0, 0x3f	; 63
    157a:	f8 94       	cli
    157c:	de bf       	out	0x3e, r29	; 62
    157e:	0f be       	out	0x3f, r0	; 63
    1580:	cd bf       	out	0x3d, r28	; 61
    1582:	6b 01       	movw	r12, r22
    1584:	7c 01       	movw	r14, r24
    1586:	69 83       	std	Y+1, r22	; 0x01
    1588:	7a 83       	std	Y+2, r23	; 0x02
    158a:	8b 83       	std	Y+3, r24	; 0x03
    158c:	9c 83       	std	Y+4, r25	; 0x04
    158e:	2d 83       	std	Y+5, r18	; 0x05
    1590:	3e 83       	std	Y+6, r19	; 0x06
    1592:	4f 83       	std	Y+7, r20	; 0x07
    1594:	58 87       	std	Y+8, r21	; 0x08
	long r;
	if (a < b)
    1596:	c2 16       	cp	r12, r18
    1598:	d3 06       	cpc	r13, r19
    159a:	e4 06       	cpc	r14, r20
    159c:	f5 06       	cpc	r15, r21
    159e:	34 f4       	brge	.+12     	; 0x15ac <FUNCgcd1+0x46>
		FUNCswap(&a, &b);
    15a0:	be 01       	movw	r22, r28
    15a2:	6b 5f       	subi	r22, 0xFB	; 251
    15a4:	7f 4f       	sbci	r23, 0xFF	; 255
    15a6:	ce 01       	movw	r24, r28
    15a8:	01 96       	adiw	r24, 0x01	; 1
    15aa:	88 dc       	rcall	.-1776   	; 0xebc <FUNCswap>
	if (!b){
    15ac:	8d 81       	ldd	r24, Y+5	; 0x05
    15ae:	9e 81       	ldd	r25, Y+6	; 0x06
    15b0:	af 81       	ldd	r26, Y+7	; 0x07
    15b2:	b8 85       	ldd	r27, Y+8	; 0x08
    15b4:	89 2b       	or	r24, r25
    15b6:	8a 2b       	or	r24, r26
    15b8:	8b 2b       	or	r24, r27
    15ba:	69 f4       	brne	.+26     	; 0x15d6 <FUNCgcd1+0x70>
		while ((r = a % b) != 0) {
    15bc:	69 81       	ldd	r22, Y+1	; 0x01
    15be:	7a 81       	ldd	r23, Y+2	; 0x02
    15c0:	8b 81       	ldd	r24, Y+3	; 0x03
    15c2:	9c 81       	ldd	r25, Y+4	; 0x04
    15c4:	20 e0       	ldi	r18, 0x00	; 0
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	a9 01       	movw	r20, r18
    15ca:	55 d7       	rcall	.+3754   	; 0x2476 <__divmodsi4>
    15cc:	61 15       	cp	r22, r1
    15ce:	71 05       	cpc	r23, r1
    15d0:	81 05       	cpc	r24, r1
    15d2:	91 05       	cpc	r25, r1
    15d4:	29 f4       	brne	.+10     	; 0x15e0 <FUNCgcd1+0x7a>
			a = b;
			b = r;
		}
	}	
	return b;
    15d6:	6d 81       	ldd	r22, Y+5	; 0x05
    15d8:	7e 81       	ldd	r23, Y+6	; 0x06
    15da:	8f 81       	ldd	r24, Y+7	; 0x07
    15dc:	98 85       	ldd	r25, Y+8	; 0x08
    15de:	05 c0       	rjmp	.+10     	; 0x15ea <FUNCgcd1+0x84>
	if (a < b)
		FUNCswap(&a, &b);
	if (!b){
		while ((r = a % b) != 0) {
			a = b;
			b = r;
    15e0:	6d 83       	std	Y+5, r22	; 0x05
    15e2:	7e 83       	std	Y+6, r23	; 0x06
    15e4:	8f 83       	std	Y+7, r24	; 0x07
    15e6:	98 87       	std	Y+8, r25	; 0x08
    15e8:	f6 cf       	rjmp	.-20     	; 0x15d6 <FUNCgcd1+0x70>
		}
	}	
	return b;
}
    15ea:	28 96       	adiw	r28, 0x08	; 8
    15ec:	0f b6       	in	r0, 0x3f	; 63
    15ee:	f8 94       	cli
    15f0:	de bf       	out	0x3e, r29	; 62
    15f2:	0f be       	out	0x3f, r0	; 63
    15f4:	cd bf       	out	0x3d, r28	; 61
    15f6:	df 91       	pop	r29
    15f8:	cf 91       	pop	r28
    15fa:	ff 90       	pop	r15
    15fc:	ef 90       	pop	r14
    15fe:	df 90       	pop	r13
    1600:	cf 90       	pop	r12
    1602:	08 95       	ret

00001604 <FUNCpincheck>:
	uint8_t lh;
	if(port & (1<<pin))
		lh=1;
	else
		lh=0;
	return lh;
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	02 c0       	rjmp	.+4      	; 0x160c <FUNCpincheck+0x8>
    1608:	95 95       	asr	r25
    160a:	87 95       	ror	r24
    160c:	6a 95       	dec	r22
    160e:	e2 f7       	brpl	.-8      	; 0x1608 <FUNCpincheck+0x4>
}
    1610:	81 70       	andi	r24, 0x01	; 1
    1612:	08 95       	ret

00001614 <FUNCprint_binary>:
char* FUNCprint_binary(uint8_t number)
{
    1614:	e1 ef       	ldi	r30, 0xF1	; 241
    1616:	f1 e0       	ldi	r31, 0x01	; 1
	uint8_t i,c;
    for(i=128,c=0;i;i>>=1,c++){
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	20 e8       	ldi	r18, 0x80	; 128
	(number & i) ? (FUNCstr[c]='1') : (FUNCstr[c]='0');
    161c:	50 e3       	ldi	r21, 0x30	; 48
    161e:	41 e3       	ldi	r20, 0x31	; 49
    1620:	38 2f       	mov	r19, r24
    1622:	32 23       	and	r19, r18
    1624:	11 f0       	breq	.+4      	; 0x162a <FUNCprint_binary+0x16>
    1626:	40 83       	st	Z, r20
    1628:	01 c0       	rjmp	.+2      	; 0x162c <FUNCprint_binary+0x18>
    162a:	50 83       	st	Z, r21
	return lh;
}
char* FUNCprint_binary(uint8_t number)
{
	uint8_t i,c;
    for(i=128,c=0;i;i>>=1,c++){
    162c:	26 95       	lsr	r18
    162e:	9f 5f       	subi	r25, 0xFF	; 255
    1630:	31 96       	adiw	r30, 0x01	; 1
    1632:	98 30       	cpi	r25, 0x08	; 8
    1634:	a9 f7       	brne	.-22     	; 0x1620 <FUNCprint_binary+0xc>
	(number & i) ? (FUNCstr[c]='1') : (FUNCstr[c]='0');
	}
	FUNCstr[c]='\0';
    1636:	10 92 f9 01 	sts	0x01F9, r1	; 0x8001f9 <FUNCstr+0x8>
	return FUNCstr;
}
    163a:	81 ef       	ldi	r24, 0xF1	; 241
    163c:	91 e0       	ldi	r25, 0x01	; 1
    163e:	08 95       	ret

00001640 <FUNCmayia>:
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
    1640:	a4 2f       	mov	r26, r20
    1642:	b0 e0       	ldi	r27, 0x00	; 0
    1644:	10 97       	sbiw	r26, 0x00	; 0
    1646:	61 f0       	breq	.+24     	; 0x1660 <FUNCmayia+0x20>
    1648:	21 e0       	ldi	r18, 0x01	; 1
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	e1 e0       	ldi	r30, 0x01	; 1
    164e:	f0 e0       	ldi	r31, 0x00	; 0
        p = p * bs;
    1650:	ee 0f       	add	r30, r30
    1652:	ff 1f       	adc	r31, r31
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
    1654:	2f 5f       	subi	r18, 0xFF	; 255
    1656:	3f 4f       	sbci	r19, 0xFF	; 255
    1658:	a2 17       	cp	r26, r18
    165a:	b3 07       	cpc	r27, r19
    165c:	c8 f7       	brcc	.-14     	; 0x1650 <FUNCmayia+0x10>
    165e:	02 c0       	rjmp	.+4      	; 0x1664 <FUNCmayia+0x24>
}
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    1660:	e1 e0       	ldi	r30, 0x01	; 1
    1662:	f0 e0       	ldi	r31, 0x00	; 0
unsigned int FUNCmayia(unsigned int xi, unsigned int xf, uint8_t nbits)
{//magic formula
	unsigned int mask;
	unsigned int diff;
	unsigned int trans;
	mask=Pwr(2,nbits)-1;
    1664:	31 97       	sbiw	r30, 0x01	; 1
	xi&=mask;
	xf&=mask;
    1666:	6e 23       	and	r22, r30
    1668:	7f 23       	and	r23, r31
	diff=xf^xi;
    166a:	8e 23       	and	r24, r30
    166c:	9f 23       	and	r25, r31
    166e:	86 27       	eor	r24, r22
    1670:	97 27       	eor	r25, r23
	trans=diff&xf;
	return (trans<<nbits)|diff;
    1672:	68 23       	and	r22, r24
    1674:	79 23       	and	r23, r25
    1676:	02 c0       	rjmp	.+4      	; 0x167c <FUNCmayia+0x3c>
    1678:	66 0f       	add	r22, r22
    167a:	77 1f       	adc	r23, r23
    167c:	4a 95       	dec	r20
    167e:	e2 f7       	brpl	.-8      	; 0x1678 <FUNCmayia+0x38>
}
    1680:	86 2b       	or	r24, r22
    1682:	97 2b       	or	r25, r23
    1684:	08 95       	ret

00001686 <FUNCenable>:
// uint8_t TRANupdate(struct TRAN *tr, uint8_t idata);
/*
** procedure and function
*/
FUNC FUNCenable( void )
{
    1686:	fc 01       	movw	r30, r24
	uint8_t tSREG;
	tSREG=SREG;
    1688:	9f b7       	in	r25, 0x3f	; 63
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
    168a:	8f b7       	in	r24, 0x3f	; 63
    168c:	8f 77       	andi	r24, 0x7F	; 127
    168e:	8f bf       	out	0x3f, r24	; 63
	func.putstr=FUNCputstr;
	func.getnum=FUNCgetnum;
	func.getnumv2=FUNCgetnumv2;
	func.readint=FUNCreadint;
	*/
	SREG=tSREG;
    1690:	9f bf       	out	0x3f, r25	; 63
	/******/
	return func;
    1692:	86 e5       	ldi	r24, 0x56	; 86
    1694:	99 e0       	ldi	r25, 0x09	; 9
    1696:	91 83       	std	Z+1, r25	; 0x01
    1698:	80 83       	st	Z, r24
    169a:	81 e7       	ldi	r24, 0x71	; 113
    169c:	99 e0       	ldi	r25, 0x09	; 9
    169e:	93 83       	std	Z+3, r25	; 0x03
    16a0:	82 83       	std	Z+2, r24	; 0x02
    16a2:	8b e9       	ldi	r24, 0x9B	; 155
    16a4:	99 e0       	ldi	r25, 0x09	; 9
    16a6:	95 83       	std	Z+5, r25	; 0x05
    16a8:	84 83       	std	Z+4, r24	; 0x04
    16aa:	80 e2       	ldi	r24, 0x20	; 32
    16ac:	9b e0       	ldi	r25, 0x0B	; 11
    16ae:	97 83       	std	Z+7, r25	; 0x07
    16b0:	86 83       	std	Z+6, r24	; 0x06
    16b2:	83 e4       	ldi	r24, 0x43	; 67
    16b4:	97 e0       	ldi	r25, 0x07	; 7
    16b6:	91 87       	std	Z+9, r25	; 0x09
    16b8:	80 87       	std	Z+8, r24	; 0x08
    16ba:	81 e5       	ldi	r24, 0x51	; 81
    16bc:	97 e0       	ldi	r25, 0x07	; 7
    16be:	93 87       	std	Z+11, r25	; 0x0b
    16c0:	82 87       	std	Z+10, r24	; 0x0a
    16c2:	83 e5       	ldi	r24, 0x53	; 83
    16c4:	97 e0       	ldi	r25, 0x07	; 7
    16c6:	95 87       	std	Z+13, r25	; 0x0d
    16c8:	84 87       	std	Z+12, r24	; 0x0c
    16ca:	86 e5       	ldi	r24, 0x56	; 86
    16cc:	97 e0       	ldi	r25, 0x07	; 7
    16ce:	97 87       	std	Z+15, r25	; 0x0f
    16d0:	86 87       	std	Z+14, r24	; 0x0e
    16d2:	89 e5       	ldi	r24, 0x59	; 89
    16d4:	97 e0       	ldi	r25, 0x07	; 7
    16d6:	91 8b       	std	Z+17, r25	; 0x11
    16d8:	80 8b       	std	Z+16, r24	; 0x10
    16da:	8c e5       	ldi	r24, 0x5C	; 92
    16dc:	97 e0       	ldi	r25, 0x07	; 7
    16de:	93 8b       	std	Z+19, r25	; 0x13
    16e0:	82 8b       	std	Z+18, r24	; 0x12
    16e2:	8d e4       	ldi	r24, 0x4D	; 77
    16e4:	97 e0       	ldi	r25, 0x07	; 7
    16e6:	95 8b       	std	Z+21, r25	; 0x15
    16e8:	84 8b       	std	Z+20, r24	; 0x14
    16ea:	8f e4       	ldi	r24, 0x4F	; 79
    16ec:	97 e0       	ldi	r25, 0x07	; 7
    16ee:	97 8b       	std	Z+23, r25	; 0x17
    16f0:	86 8b       	std	Z+22, r24	; 0x16
    16f2:	8e e5       	ldi	r24, 0x5E	; 94
    16f4:	97 e0       	ldi	r25, 0x07	; 7
    16f6:	91 8f       	std	Z+25, r25	; 0x19
    16f8:	80 8f       	std	Z+24, r24	; 0x18
    16fa:	8f e7       	ldi	r24, 0x7F	; 127
    16fc:	97 e0       	ldi	r25, 0x07	; 7
    16fe:	93 8f       	std	Z+27, r25	; 0x1b
    1700:	82 8f       	std	Z+26, r24	; 0x1a
    1702:	8d e8       	ldi	r24, 0x8D	; 141
    1704:	97 e0       	ldi	r25, 0x07	; 7
    1706:	95 8f       	std	Z+29, r25	; 0x1d
    1708:	84 8f       	std	Z+28, r24	; 0x1c
    170a:	8f ea       	ldi	r24, 0xAF	; 175
    170c:	97 e0       	ldi	r25, 0x07	; 7
    170e:	97 8f       	std	Z+31, r25	; 0x1f
    1710:	86 8f       	std	Z+30, r24	; 0x1e
    1712:	83 e1       	ldi	r24, 0x13	; 19
    1714:	9a e0       	ldi	r25, 0x0A	; 10
    1716:	91 a3       	std	Z+33, r25	; 0x21
    1718:	80 a3       	std	Z+32, r24	; 0x20
    171a:	8b e4       	ldi	r24, 0x4B	; 75
    171c:	9a e0       	ldi	r25, 0x0A	; 10
    171e:	93 a3       	std	Z+35, r25	; 0x23
    1720:	82 a3       	std	Z+34, r24	; 0x22
    1722:	88 eb       	ldi	r24, 0xB8	; 184
    1724:	99 e0       	ldi	r25, 0x09	; 9
    1726:	95 a3       	std	Z+37, r25	; 0x25
    1728:	84 a3       	std	Z+36, r24	; 0x24
    172a:	80 e8       	ldi	r24, 0x80	; 128
    172c:	99 e0       	ldi	r25, 0x09	; 9
    172e:	97 a3       	std	Z+39, r25	; 0x27
    1730:	86 a3       	std	Z+38, r24	; 0x26
    1732:	85 e5       	ldi	r24, 0x55	; 85
    1734:	98 e0       	ldi	r25, 0x08	; 8
    1736:	91 a7       	std	Z+41, r25	; 0x29
    1738:	80 a7       	std	Z+40, r24	; 0x28
    173a:	8a e5       	ldi	r24, 0x5A	; 90
    173c:	98 e0       	ldi	r25, 0x08	; 8
    173e:	93 a7       	std	Z+43, r25	; 0x2b
    1740:	82 a7       	std	Z+42, r24	; 0x2a
    1742:	89 e6       	ldi	r24, 0x69	; 105
    1744:	98 e0       	ldi	r25, 0x08	; 8
    1746:	95 a7       	std	Z+45, r25	; 0x2d
    1748:	84 a7       	std	Z+44, r24	; 0x2c
    174a:	8d e8       	ldi	r24, 0x8D	; 141
    174c:	98 e0       	ldi	r25, 0x08	; 8
    174e:	97 a7       	std	Z+47, r25	; 0x2f
    1750:	86 a7       	std	Z+46, r24	; 0x2e
    1752:	8f e8       	ldi	r24, 0x8F	; 143
    1754:	98 e0       	ldi	r25, 0x08	; 8
    1756:	91 ab       	std	Z+49, r25	; 0x31
    1758:	80 ab       	std	Z+48, r24	; 0x30
    175a:	89 e9       	ldi	r24, 0x99	; 153
    175c:	98 e0       	ldi	r25, 0x08	; 8
    175e:	93 ab       	std	Z+51, r25	; 0x33
    1760:	82 ab       	std	Z+50, r24	; 0x32
    1762:	86 ea       	ldi	r24, 0xA6	; 166
    1764:	98 e0       	ldi	r25, 0x08	; 8
    1766:	95 ab       	std	Z+53, r25	; 0x35
    1768:	84 ab       	std	Z+52, r24	; 0x34
    176a:	82 eb       	ldi	r24, 0xB2	; 178
    176c:	98 e0       	ldi	r25, 0x08	; 8
    176e:	97 ab       	std	Z+55, r25	; 0x37
    1770:	86 ab       	std	Z+54, r24	; 0x36
    1772:	8a ec       	ldi	r24, 0xCA	; 202
    1774:	98 e0       	ldi	r25, 0x08	; 8
    1776:	91 af       	std	Z+57, r25	; 0x39
    1778:	80 af       	std	Z+56, r24	; 0x38
    177a:	8d ed       	ldi	r24, 0xDD	; 221
    177c:	98 e0       	ldi	r25, 0x08	; 8
    177e:	93 af       	std	Z+59, r25	; 0x3b
    1780:	82 af       	std	Z+58, r24	; 0x3a
    1782:	88 ee       	ldi	r24, 0xE8	; 232
    1784:	98 e0       	ldi	r25, 0x08	; 8
    1786:	95 af       	std	Z+61, r25	; 0x3d
    1788:	84 af       	std	Z+60, r24	; 0x3c
    178a:	85 e1       	ldi	r24, 0x15	; 21
    178c:	99 e0       	ldi	r25, 0x09	; 9
    178e:	97 af       	std	Z+63, r25	; 0x3f
    1790:	86 af       	std	Z+62, r24	; 0x3e
    1792:	df 01       	movw	r26, r30
    1794:	a0 5c       	subi	r26, 0xC0	; 192
    1796:	bf 4f       	sbci	r27, 0xFF	; 255
    1798:	88 e8       	ldi	r24, 0x88	; 136
    179a:	9a e0       	ldi	r25, 0x0A	; 10
    179c:	11 96       	adiw	r26, 0x01	; 1
    179e:	9c 93       	st	X, r25
    17a0:	8e 93       	st	-X, r24
    17a2:	12 96       	adiw	r26, 0x02	; 2
    17a4:	83 e9       	ldi	r24, 0x93	; 147
    17a6:	9a e0       	ldi	r25, 0x0A	; 10
    17a8:	11 96       	adiw	r26, 0x01	; 1
    17aa:	9c 93       	st	X, r25
    17ac:	8e 93       	st	-X, r24
    17ae:	12 96       	adiw	r26, 0x02	; 2
    17b0:	83 eb       	ldi	r24, 0xB3	; 179
    17b2:	9a e0       	ldi	r25, 0x0A	; 10
    17b4:	11 96       	adiw	r26, 0x01	; 1
    17b6:	9c 93       	st	X, r25
    17b8:	8e 93       	st	-X, r24
    17ba:	12 96       	adiw	r26, 0x02	; 2
    17bc:	82 e0       	ldi	r24, 0x02	; 2
    17be:	9b e0       	ldi	r25, 0x0B	; 11
    17c0:	11 96       	adiw	r26, 0x01	; 1
    17c2:	9c 93       	st	X, r25
    17c4:	8e 93       	st	-X, r24
    17c6:	12 96       	adiw	r26, 0x02	; 2
    17c8:	8a e0       	ldi	r24, 0x0A	; 10
    17ca:	9b e0       	ldi	r25, 0x0B	; 11
    17cc:	8d 93       	st	X+, r24
    17ce:	9c 93       	st	X, r25
}
    17d0:	cf 01       	movw	r24, r30
    17d2:	08 95       	ret

000017d4 <KEYPAD_flush>:
}
/***flush***/
void KEYPAD_flush(void)
{
	uint8_t i;
	data.character=' ';
    17d4:	80 e2       	ldi	r24, 0x20	; 32
    17d6:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <data>
	KEYPADSTRINGINDEX=0;
    17da:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <KEYPADSTRINGINDEX>
    17de:	e3 e1       	ldi	r30, 0x13	; 19
    17e0:	f2 e0       	ldi	r31, 0x02	; 2
    17e2:	88 e2       	ldi	r24, 0x28	; 40
    17e4:	92 e0       	ldi	r25, 0x02	; 2
	for(i=0;i<KEYPADSTRINGSIZE+1;i++)
        data.string[i]='\0';
    17e6:	11 92       	st	Z+, r1
void KEYPAD_flush(void)
{
	uint8_t i;
	data.character=' ';
	KEYPADSTRINGINDEX=0;
	for(i=0;i<KEYPADSTRINGSIZE+1;i++)
    17e8:	e8 17       	cp	r30, r24
    17ea:	f9 07       	cpc	r31, r25
    17ec:	e1 f7       	brne	.-8      	; 0x17e6 <KEYPAD_flush+0x12>
        data.string[i]='\0';
}
    17ee:	08 95       	ret

000017f0 <KEYPAD_getkey>:
	KEYPAD_flush();
	//Inic String Vec
	return keypad;
}
char KEYPAD_getkey(void)
{
    17f0:	cf 93       	push	r28
    17f2:	df 93       	push	r29
    17f4:	21 e0       	ldi	r18, 0x01	; 1
	uint8_t HL;
	char c='\0';
    17f6:	80 e0       	ldi	r24, 0x00	; 0
				*keypad_PORT|=(1<<KEYPADLINE_1);
				break;
			case 1: //line 2 index 1
				*keypad_DDR|=(1<<KEYPADLINE_2);
				*keypad_PORT&=~(1<<KEYPADLINE_2);
				keypad_dataf.line_2=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
    17f8:	a7 e0       	ldi	r26, 0x07	; 7
    17fa:	b2 e0       	ldi	r27, 0x02	; 2
				HL=KEYPADhl(keypad_datai.line_2,keypad_dataf.line_2);
    17fc:	eb e0       	ldi	r30, 0x0B	; 11
    17fe:	f2 e0       	ldi	r31, 0x02	; 2
					if(HL == (1<<KEYPADDATA_2))
						c=keypadvalue[1][1];
					if(HL == (1<<KEYPADDATA_3))
						c=keypadvalue[1][2];
					if(HL == (1<<KEYPADDATA_4))
						c=keypadvalue[1][3];
    1800:	60 e0       	ldi	r22, 0x00	; 0
    1802:	71 e0       	ldi	r23, 0x01	; 1
    1804:	01 c0       	rjmp	.+2      	; 0x1808 <KEYPAD_getkey+0x18>
    1806:	2f 5f       	subi	r18, 0xFF	; 255
{
	uint8_t HL;
	char c='\0';
	uint8_t keypad_option;
	for(keypad_option=0;keypad_option<KEYPADLINES;keypad_option++){
		switch (keypad_option)
    1808:	9f ef       	ldi	r25, 0xFF	; 255
    180a:	92 0f       	add	r25, r18
    180c:	91 30       	cpi	r25, 0x01	; 1
    180e:	09 f4       	brne	.+2      	; 0x1812 <KEYPAD_getkey+0x22>
    1810:	4b c0       	rjmp	.+150    	; 0x18a8 <KEYPAD_getkey+0xb8>
    1812:	38 f0       	brcs	.+14     	; 0x1822 <KEYPAD_getkey+0x32>
    1814:	92 30       	cpi	r25, 0x02	; 2
    1816:	09 f4       	brne	.+2      	; 0x181a <KEYPAD_getkey+0x2a>
    1818:	8c c0       	rjmp	.+280    	; 0x1932 <KEYPAD_getkey+0x142>
    181a:	93 30       	cpi	r25, 0x03	; 3
    181c:	09 f4       	brne	.+2      	; 0x1820 <KEYPAD_getkey+0x30>
    181e:	ce c0       	rjmp	.+412    	; 0x19bc <KEYPAD_getkey+0x1cc>
    1820:	0e c1       	rjmp	.+540    	; 0x1a3e <KEYPAD_getkey+0x24e>
		{
			case 0: //line 1 index 0
				*keypad_DDR|=(1<<KEYPADLINE_1);
    1822:	40 91 28 02 	lds	r20, 0x0228	; 0x800228 <keypad_DDR>
    1826:	50 91 29 02 	lds	r21, 0x0229	; 0x800229 <keypad_DDR+0x1>
    182a:	ea 01       	movw	r28, r20
    182c:	98 81       	ld	r25, Y
    182e:	90 68       	ori	r25, 0x80	; 128
    1830:	98 83       	st	Y, r25
				*keypad_PORT&=~(1<<KEYPADLINE_1);
    1832:	40 91 05 02 	lds	r20, 0x0205	; 0x800205 <keypad_PORT>
    1836:	50 91 06 02 	lds	r21, 0x0206	; 0x800206 <keypad_PORT+0x1>
    183a:	ea 01       	movw	r28, r20
    183c:	98 81       	ld	r25, Y
    183e:	9f 77       	andi	r25, 0x7F	; 127
    1840:	98 83       	st	Y, r25
				keypad_dataf.line_1=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
    1842:	40 91 10 02 	lds	r20, 0x0210	; 0x800210 <keypad_PIN>
    1846:	50 91 11 02 	lds	r21, 0x0211	; 0x800211 <keypad_PIN+0x1>
    184a:	ea 01       	movw	r28, r20
    184c:	38 81       	ld	r19, Y
    184e:	34 77       	andi	r19, 0x74	; 116
    1850:	3c 93       	st	X, r19
				HL=KEYPADhl(keypad_datai.line_1,keypad_dataf.line_1);
    1852:	90 81       	ld	r25, Z
uint8_t KEYPADhl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	//printf("KEYPADhl\n");
	i=xf^xi;
	i&=xi;
    1854:	43 2f       	mov	r20, r19
    1856:	49 27       	eor	r20, r25
    1858:	94 23       	and	r25, r20
			case 0: //line 1 index 0
				*keypad_DDR|=(1<<KEYPADLINE_1);
				*keypad_PORT&=~(1<<KEYPADLINE_1);
				keypad_dataf.line_1=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
				HL=KEYPADhl(keypad_datai.line_1,keypad_dataf.line_1);
				keypad_datai.line_1=keypad_dataf.line_1;
    185a:	30 83       	st	Z, r19
				if(HL){
    185c:	99 23       	and	r25, r25
    185e:	99 f0       	breq	.+38     	; 0x1886 <KEYPAD_getkey+0x96>
					//decode index line one column what ?
					if(HL == (1<<KEYPADDATA_1))
    1860:	94 30       	cpi	r25, 0x04	; 4
    1862:	19 f4       	brne	.+6      	; 0x186a <KEYPAD_getkey+0x7a>
						c=keypadvalue[0][0];
    1864:	eb 01       	movw	r28, r22
    1866:	88 81       	ld	r24, Y
    1868:	0a c0       	rjmp	.+20     	; 0x187e <KEYPAD_getkey+0x8e>
					if(HL == (1<<KEYPADDATA_2))
    186a:	90 31       	cpi	r25, 0x10	; 16
    186c:	19 f4       	brne	.+6      	; 0x1874 <KEYPAD_getkey+0x84>
						c=keypadvalue[0][1];
    186e:	eb 01       	movw	r28, r22
    1870:	89 81       	ldd	r24, Y+1	; 0x01
    1872:	09 c0       	rjmp	.+18     	; 0x1886 <KEYPAD_getkey+0x96>
					if(HL == (1<<KEYPADDATA_3))
    1874:	90 32       	cpi	r25, 0x20	; 32
    1876:	19 f4       	brne	.+6      	; 0x187e <KEYPAD_getkey+0x8e>
						c=keypadvalue[0][2];
    1878:	eb 01       	movw	r28, r22
    187a:	8a 81       	ldd	r24, Y+2	; 0x02
    187c:	04 c0       	rjmp	.+8      	; 0x1886 <KEYPAD_getkey+0x96>
					if(HL == (1<<KEYPADDATA_4))
    187e:	90 34       	cpi	r25, 0x40	; 64
    1880:	11 f4       	brne	.+4      	; 0x1886 <KEYPAD_getkey+0x96>
						c=keypadvalue[0][3];
    1882:	eb 01       	movw	r28, r22
    1884:	8b 81       	ldd	r24, Y+3	; 0x03
				}
				*keypad_DDR&=~(1<<KEYPADLINE_1);
    1886:	40 91 28 02 	lds	r20, 0x0228	; 0x800228 <keypad_DDR>
    188a:	50 91 29 02 	lds	r21, 0x0229	; 0x800229 <keypad_DDR+0x1>
    188e:	ea 01       	movw	r28, r20
    1890:	98 81       	ld	r25, Y
    1892:	9f 77       	andi	r25, 0x7F	; 127
    1894:	98 83       	st	Y, r25
				*keypad_PORT|=(1<<KEYPADLINE_1);
    1896:	40 91 05 02 	lds	r20, 0x0205	; 0x800205 <keypad_PORT>
    189a:	50 91 06 02 	lds	r21, 0x0206	; 0x800206 <keypad_PORT+0x1>
    189e:	ea 01       	movw	r28, r20
    18a0:	98 81       	ld	r25, Y
    18a2:	90 68       	ori	r25, 0x80	; 128
    18a4:	98 83       	st	Y, r25
				break;
    18a6:	af cf       	rjmp	.-162    	; 0x1806 <KEYPAD_getkey+0x16>
			case 1: //line 2 index 1
				*keypad_DDR|=(1<<KEYPADLINE_2);
    18a8:	40 91 28 02 	lds	r20, 0x0228	; 0x800228 <keypad_DDR>
    18ac:	50 91 29 02 	lds	r21, 0x0229	; 0x800229 <keypad_DDR+0x1>
    18b0:	ea 01       	movw	r28, r20
    18b2:	98 81       	ld	r25, Y
    18b4:	91 60       	ori	r25, 0x01	; 1
    18b6:	98 83       	st	Y, r25
				*keypad_PORT&=~(1<<KEYPADLINE_2);
    18b8:	40 91 05 02 	lds	r20, 0x0205	; 0x800205 <keypad_PORT>
    18bc:	50 91 06 02 	lds	r21, 0x0206	; 0x800206 <keypad_PORT+0x1>
    18c0:	ea 01       	movw	r28, r20
    18c2:	98 81       	ld	r25, Y
    18c4:	9e 7f       	andi	r25, 0xFE	; 254
    18c6:	98 83       	st	Y, r25
				keypad_dataf.line_2=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
    18c8:	40 91 10 02 	lds	r20, 0x0210	; 0x800210 <keypad_PIN>
    18cc:	50 91 11 02 	lds	r21, 0x0211	; 0x800211 <keypad_PIN+0x1>
    18d0:	ea 01       	movw	r28, r20
    18d2:	38 81       	ld	r19, Y
    18d4:	34 77       	andi	r19, 0x74	; 116
    18d6:	11 96       	adiw	r26, 0x01	; 1
    18d8:	3c 93       	st	X, r19
    18da:	11 97       	sbiw	r26, 0x01	; 1
				HL=KEYPADhl(keypad_datai.line_2,keypad_dataf.line_2);
    18dc:	91 81       	ldd	r25, Z+1	; 0x01
uint8_t KEYPADhl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	//printf("KEYPADhl\n");
	i=xf^xi;
	i&=xi;
    18de:	43 2f       	mov	r20, r19
    18e0:	49 27       	eor	r20, r25
    18e2:	94 23       	and	r25, r20
			case 1: //line 2 index 1
				*keypad_DDR|=(1<<KEYPADLINE_2);
				*keypad_PORT&=~(1<<KEYPADLINE_2);
				keypad_dataf.line_2=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
				HL=KEYPADhl(keypad_datai.line_2,keypad_dataf.line_2);
				keypad_datai.line_2=keypad_dataf.line_2;
    18e4:	31 83       	std	Z+1, r19	; 0x01
				if(HL){
    18e6:	99 23       	and	r25, r25
    18e8:	99 f0       	breq	.+38     	; 0x1910 <KEYPAD_getkey+0x120>
					//decode index line two column what ?
					if(HL == (1<<KEYPADDATA_1))
    18ea:	94 30       	cpi	r25, 0x04	; 4
    18ec:	19 f4       	brne	.+6      	; 0x18f4 <KEYPAD_getkey+0x104>
						c=keypadvalue[1][0];
    18ee:	eb 01       	movw	r28, r22
    18f0:	8c 81       	ldd	r24, Y+4	; 0x04
    18f2:	0a c0       	rjmp	.+20     	; 0x1908 <KEYPAD_getkey+0x118>
					if(HL == (1<<KEYPADDATA_2))
    18f4:	90 31       	cpi	r25, 0x10	; 16
    18f6:	19 f4       	brne	.+6      	; 0x18fe <KEYPAD_getkey+0x10e>
						c=keypadvalue[1][1];
    18f8:	eb 01       	movw	r28, r22
    18fa:	8d 81       	ldd	r24, Y+5	; 0x05
    18fc:	09 c0       	rjmp	.+18     	; 0x1910 <KEYPAD_getkey+0x120>
					if(HL == (1<<KEYPADDATA_3))
    18fe:	90 32       	cpi	r25, 0x20	; 32
    1900:	19 f4       	brne	.+6      	; 0x1908 <KEYPAD_getkey+0x118>
						c=keypadvalue[1][2];
    1902:	eb 01       	movw	r28, r22
    1904:	8e 81       	ldd	r24, Y+6	; 0x06
    1906:	04 c0       	rjmp	.+8      	; 0x1910 <KEYPAD_getkey+0x120>
					if(HL == (1<<KEYPADDATA_4))
    1908:	90 34       	cpi	r25, 0x40	; 64
    190a:	11 f4       	brne	.+4      	; 0x1910 <KEYPAD_getkey+0x120>
						c=keypadvalue[1][3];
    190c:	eb 01       	movw	r28, r22
    190e:	8f 81       	ldd	r24, Y+7	; 0x07
				}
				*keypad_DDR&=~(1<<KEYPADLINE_2);
    1910:	40 91 28 02 	lds	r20, 0x0228	; 0x800228 <keypad_DDR>
    1914:	50 91 29 02 	lds	r21, 0x0229	; 0x800229 <keypad_DDR+0x1>
    1918:	ea 01       	movw	r28, r20
    191a:	98 81       	ld	r25, Y
    191c:	9e 7f       	andi	r25, 0xFE	; 254
    191e:	98 83       	st	Y, r25
				*keypad_PORT|=(1<<KEYPADLINE_2);
    1920:	40 91 05 02 	lds	r20, 0x0205	; 0x800205 <keypad_PORT>
    1924:	50 91 06 02 	lds	r21, 0x0206	; 0x800206 <keypad_PORT+0x1>
    1928:	ea 01       	movw	r28, r20
    192a:	98 81       	ld	r25, Y
    192c:	91 60       	ori	r25, 0x01	; 1
    192e:	98 83       	st	Y, r25
				break;
    1930:	6a cf       	rjmp	.-300    	; 0x1806 <KEYPAD_getkey+0x16>
			case 2: //line 3 index 2
				*keypad_DDR|=(1<<KEYPADLINE_3);
    1932:	40 91 28 02 	lds	r20, 0x0228	; 0x800228 <keypad_DDR>
    1936:	50 91 29 02 	lds	r21, 0x0229	; 0x800229 <keypad_DDR+0x1>
    193a:	ea 01       	movw	r28, r20
    193c:	98 81       	ld	r25, Y
    193e:	92 60       	ori	r25, 0x02	; 2
    1940:	98 83       	st	Y, r25
				*keypad_PORT&=~(1<<KEYPADLINE_3);
    1942:	40 91 05 02 	lds	r20, 0x0205	; 0x800205 <keypad_PORT>
    1946:	50 91 06 02 	lds	r21, 0x0206	; 0x800206 <keypad_PORT+0x1>
    194a:	ea 01       	movw	r28, r20
    194c:	98 81       	ld	r25, Y
    194e:	9d 7f       	andi	r25, 0xFD	; 253
    1950:	98 83       	st	Y, r25
				keypad_dataf.line_3=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
    1952:	40 91 10 02 	lds	r20, 0x0210	; 0x800210 <keypad_PIN>
    1956:	50 91 11 02 	lds	r21, 0x0211	; 0x800211 <keypad_PIN+0x1>
    195a:	ea 01       	movw	r28, r20
    195c:	38 81       	ld	r19, Y
    195e:	34 77       	andi	r19, 0x74	; 116
    1960:	12 96       	adiw	r26, 0x02	; 2
    1962:	3c 93       	st	X, r19
    1964:	12 97       	sbiw	r26, 0x02	; 2
				HL=KEYPADhl(keypad_datai.line_3,keypad_dataf.line_3);
    1966:	92 81       	ldd	r25, Z+2	; 0x02
uint8_t KEYPADhl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	//printf("KEYPADhl\n");
	i=xf^xi;
	i&=xi;
    1968:	43 2f       	mov	r20, r19
    196a:	49 27       	eor	r20, r25
    196c:	94 23       	and	r25, r20
			case 2: //line 3 index 2
				*keypad_DDR|=(1<<KEYPADLINE_3);
				*keypad_PORT&=~(1<<KEYPADLINE_3);
				keypad_dataf.line_3=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
				HL=KEYPADhl(keypad_datai.line_3,keypad_dataf.line_3);
				keypad_datai.line_3=keypad_dataf.line_3;
    196e:	32 83       	std	Z+2, r19	; 0x02
				if(HL){
    1970:	99 23       	and	r25, r25
    1972:	99 f0       	breq	.+38     	; 0x199a <KEYPAD_getkey+0x1aa>
					//decode index line three column what ?
					if(HL == (1<<KEYPADDATA_1))
    1974:	94 30       	cpi	r25, 0x04	; 4
    1976:	19 f4       	brne	.+6      	; 0x197e <KEYPAD_getkey+0x18e>
						c=keypadvalue[2][0];
    1978:	eb 01       	movw	r28, r22
    197a:	88 85       	ldd	r24, Y+8	; 0x08
    197c:	0a c0       	rjmp	.+20     	; 0x1992 <KEYPAD_getkey+0x1a2>
					if(HL == (1<<KEYPADDATA_2))
    197e:	90 31       	cpi	r25, 0x10	; 16
    1980:	19 f4       	brne	.+6      	; 0x1988 <KEYPAD_getkey+0x198>
						c=keypadvalue[2][1];
    1982:	eb 01       	movw	r28, r22
    1984:	89 85       	ldd	r24, Y+9	; 0x09
    1986:	09 c0       	rjmp	.+18     	; 0x199a <KEYPAD_getkey+0x1aa>
					if(HL == (1<<KEYPADDATA_3))
    1988:	90 32       	cpi	r25, 0x20	; 32
    198a:	19 f4       	brne	.+6      	; 0x1992 <KEYPAD_getkey+0x1a2>
						c=keypadvalue[2][2];
    198c:	eb 01       	movw	r28, r22
    198e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1990:	04 c0       	rjmp	.+8      	; 0x199a <KEYPAD_getkey+0x1aa>
					if(HL == (1<<KEYPADDATA_4))
    1992:	90 34       	cpi	r25, 0x40	; 64
    1994:	11 f4       	brne	.+4      	; 0x199a <KEYPAD_getkey+0x1aa>
						c=keypadvalue[2][3];
    1996:	eb 01       	movw	r28, r22
    1998:	8b 85       	ldd	r24, Y+11	; 0x0b
				}
				*keypad_DDR&=~(1<<KEYPADLINE_3);
    199a:	40 91 28 02 	lds	r20, 0x0228	; 0x800228 <keypad_DDR>
    199e:	50 91 29 02 	lds	r21, 0x0229	; 0x800229 <keypad_DDR+0x1>
    19a2:	ea 01       	movw	r28, r20
    19a4:	98 81       	ld	r25, Y
    19a6:	9d 7f       	andi	r25, 0xFD	; 253
    19a8:	98 83       	st	Y, r25
				*keypad_PORT|=(1<<KEYPADLINE_3);
    19aa:	40 91 05 02 	lds	r20, 0x0205	; 0x800205 <keypad_PORT>
    19ae:	50 91 06 02 	lds	r21, 0x0206	; 0x800206 <keypad_PORT+0x1>
    19b2:	ea 01       	movw	r28, r20
    19b4:	98 81       	ld	r25, Y
    19b6:	92 60       	ori	r25, 0x02	; 2
    19b8:	98 83       	st	Y, r25
				break;
    19ba:	25 cf       	rjmp	.-438    	; 0x1806 <KEYPAD_getkey+0x16>
			case 3: //line 4 index 3
				*keypad_DDR|=(1<<KEYPADLINE_4);
    19bc:	e0 91 28 02 	lds	r30, 0x0228	; 0x800228 <keypad_DDR>
    19c0:	f0 91 29 02 	lds	r31, 0x0229	; 0x800229 <keypad_DDR+0x1>
    19c4:	90 81       	ld	r25, Z
    19c6:	98 60       	ori	r25, 0x08	; 8
    19c8:	90 83       	st	Z, r25
				*keypad_PORT&=~(1<<KEYPADLINE_4);
    19ca:	e0 91 05 02 	lds	r30, 0x0205	; 0x800205 <keypad_PORT>
    19ce:	f0 91 06 02 	lds	r31, 0x0206	; 0x800206 <keypad_PORT+0x1>
    19d2:	90 81       	ld	r25, Z
    19d4:	97 7f       	andi	r25, 0xF7	; 247
    19d6:	90 83       	st	Z, r25
				keypad_dataf.line_4=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
    19d8:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <keypad_PIN>
    19dc:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <keypad_PIN+0x1>
    19e0:	20 81       	ld	r18, Z
    19e2:	24 77       	andi	r18, 0x74	; 116
    19e4:	20 93 0a 02 	sts	0x020A, r18	; 0x80020a <keypad_dataf+0x3>
				HL=KEYPADhl(keypad_datai.line_4,keypad_dataf.line_4);
    19e8:	eb e0       	ldi	r30, 0x0B	; 11
    19ea:	f2 e0       	ldi	r31, 0x02	; 2
    19ec:	93 81       	ldd	r25, Z+3	; 0x03
uint8_t KEYPADhl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	//printf("KEYPADhl\n");
	i=xf^xi;
	i&=xi;
    19ee:	32 2f       	mov	r19, r18
    19f0:	39 27       	eor	r19, r25
    19f2:	93 23       	and	r25, r19
			case 3: //line 4 index 3
				*keypad_DDR|=(1<<KEYPADLINE_4);
				*keypad_PORT&=~(1<<KEYPADLINE_4);
				keypad_dataf.line_4=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
				HL=KEYPADhl(keypad_datai.line_4,keypad_dataf.line_4);
				keypad_datai.line_4=keypad_dataf.line_4;
    19f4:	23 83       	std	Z+3, r18	; 0x03
				if(HL){
    19f6:	99 23       	and	r25, r25
    19f8:	99 f0       	breq	.+38     	; 0x1a20 <KEYPAD_getkey+0x230>
					//decode index line four column what ?
					if(HL == (1<<KEYPADDATA_1))
    19fa:	94 30       	cpi	r25, 0x04	; 4
    19fc:	19 f4       	brne	.+6      	; 0x1a04 <KEYPAD_getkey+0x214>
						c=keypadvalue[3][0];
    19fe:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__DATA_REGION_ORIGIN__+0xc>
    1a02:	0a c0       	rjmp	.+20     	; 0x1a18 <KEYPAD_getkey+0x228>
					if(HL == (1<<KEYPADDATA_2))
    1a04:	90 31       	cpi	r25, 0x10	; 16
    1a06:	19 f4       	brne	.+6      	; 0x1a0e <KEYPAD_getkey+0x21e>
						c=keypadvalue[3][1];
    1a08:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <__DATA_REGION_ORIGIN__+0xd>
    1a0c:	09 c0       	rjmp	.+18     	; 0x1a20 <KEYPAD_getkey+0x230>
					if(HL == (1<<KEYPADDATA_3))
    1a0e:	90 32       	cpi	r25, 0x20	; 32
    1a10:	19 f4       	brne	.+6      	; 0x1a18 <KEYPAD_getkey+0x228>
						c=keypadvalue[3][2];
    1a12:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__DATA_REGION_ORIGIN__+0xe>
    1a16:	04 c0       	rjmp	.+8      	; 0x1a20 <KEYPAD_getkey+0x230>
					if(HL == (1<<KEYPADDATA_4))
    1a18:	90 34       	cpi	r25, 0x40	; 64
    1a1a:	11 f4       	brne	.+4      	; 0x1a20 <KEYPAD_getkey+0x230>
						c=keypadvalue[3][3];
    1a1c:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <__DATA_REGION_ORIGIN__+0xf>
				}
				*keypad_DDR&=~(1<<KEYPADLINE_4);
    1a20:	e0 91 28 02 	lds	r30, 0x0228	; 0x800228 <keypad_DDR>
    1a24:	f0 91 29 02 	lds	r31, 0x0229	; 0x800229 <keypad_DDR+0x1>
    1a28:	90 81       	ld	r25, Z
    1a2a:	97 7f       	andi	r25, 0xF7	; 247
    1a2c:	90 83       	st	Z, r25
				*keypad_PORT|=(1<<KEYPADLINE_4);
    1a2e:	e0 91 05 02 	lds	r30, 0x0205	; 0x800205 <keypad_PORT>
    1a32:	f0 91 06 02 	lds	r31, 0x0206	; 0x800206 <keypad_PORT+0x1>
    1a36:	90 81       	ld	r25, Z
    1a38:	98 60       	ori	r25, 0x08	; 8
    1a3a:	90 83       	st	Z, r25
    1a3c:	03 c0       	rjmp	.+6      	; 0x1a44 <KEYPAD_getkey+0x254>
char KEYPAD_getkey(void)
{
	uint8_t HL;
	char c='\0';
	uint8_t keypad_option;
	for(keypad_option=0;keypad_option<KEYPADLINES;keypad_option++){
    1a3e:	24 30       	cpi	r18, 0x04	; 4
    1a40:	08 f4       	brcc	.+2      	; 0x1a44 <KEYPAD_getkey+0x254>
    1a42:	e1 ce       	rjmp	.-574    	; 0x1806 <KEYPAD_getkey+0x16>
			default:
				break;
		}//endswitch
	}//endfor
	return c;
}
    1a44:	df 91       	pop	r29
    1a46:	cf 91       	pop	r28
    1a48:	08 95       	ret

00001a4a <KEYPAD_get>:
/***get***/
struct keypadata KEYPAD_get(void)
{
    1a4a:	cf 93       	push	r28
    1a4c:	df 93       	push	r29
    1a4e:	ec 01       	movw	r28, r24
	char c;
	c=KEYPAD_getkey();
    1a50:	cf de       	rcall	.-610    	; 0x17f0 <KEYPAD_getkey>
	if(c){
    1a52:	88 23       	and	r24, r24
    1a54:	89 f0       	breq	.+34     	; 0x1a78 <KEYPAD_get+0x2e>
		data.character=c;
    1a56:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <data>
		if(KEYPADSTRINGINDEX<(KEYPADSTRINGSIZE)){
    1a5a:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <KEYPADSTRINGINDEX>
    1a5e:	94 31       	cpi	r25, 0x14	; 20
    1a60:	58 f4       	brcc	.+22     	; 0x1a78 <KEYPAD_get+0x2e>
			data.string[KEYPADSTRINGINDEX]=c;
    1a62:	e0 91 0f 02 	lds	r30, 0x020F	; 0x80020f <KEYPADSTRINGINDEX>
    1a66:	f0 e0       	ldi	r31, 0x00	; 0
    1a68:	ee 5e       	subi	r30, 0xEE	; 238
    1a6a:	fd 4f       	sbci	r31, 0xFD	; 253
    1a6c:	81 83       	std	Z+1, r24	; 0x01
			KEYPADSTRINGINDEX++;
    1a6e:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <KEYPADSTRINGINDEX>
    1a72:	8f 5f       	subi	r24, 0xFF	; 255
    1a74:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <KEYPADSTRINGINDEX>
		}
	}
	return data;
    1a78:	86 e1       	ldi	r24, 0x16	; 22
    1a7a:	e2 e1       	ldi	r30, 0x12	; 18
    1a7c:	f2 e0       	ldi	r31, 0x02	; 2
    1a7e:	de 01       	movw	r26, r28
    1a80:	01 90       	ld	r0, Z+
    1a82:	0d 92       	st	X+, r0
    1a84:	8a 95       	dec	r24
    1a86:	e1 f7       	brne	.-8      	; 0x1a80 <KEYPAD_get+0x36>
}
    1a88:	ce 01       	movw	r24, r28
    1a8a:	df 91       	pop	r29
    1a8c:	cf 91       	pop	r28
    1a8e:	08 95       	ret

00001a90 <KEYPADenable>:
uint8_t KEYPADhl(uint8_t xi, uint8_t xf);
/*
** procedure and function
*/
KEYPAD KEYPADenable(volatile uint8_t *ddr, volatile uint8_t *pin, volatile uint8_t *port)
{
    1a90:	cf 93       	push	r28
    1a92:	df 93       	push	r29
    1a94:	00 d0       	rcall	.+0      	; 0x1a96 <KEYPADenable+0x6>
    1a96:	00 d0       	rcall	.+0      	; 0x1a98 <KEYPADenable+0x8>
    1a98:	00 d0       	rcall	.+0      	; 0x1a9a <KEYPADenable+0xa>
    1a9a:	cd b7       	in	r28, 0x3d	; 61
    1a9c:	de b7       	in	r29, 0x3e	; 62
    1a9e:	fc 01       	movw	r30, r24
	//LOCAL VARIABLES
	uint8_t tSREG;
	tSREG=SREG;
    1aa0:	2f b7       	in	r18, 0x3f	; 63
	data.character=' ';
    1aa2:	80 e2       	ldi	r24, 0x20	; 32
    1aa4:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <data>
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
    1aa8:	9f b7       	in	r25, 0x3f	; 63
    1aaa:	9f 77       	andi	r25, 0x7F	; 127
    1aac:	9f bf       	out	0x3f, r25	; 63
	//ALLOCAÇÂO MEMORIA PARA Estrutura
	KEYPAD keypad;
	//import parametros
	keypad_DDR=ddr;
    1aae:	f0 93 29 02 	sts	0x0229, r31	; 0x800229 <keypad_DDR+0x1>
    1ab2:	e0 93 28 02 	sts	0x0228, r30	; 0x800228 <keypad_DDR>
	keypad_PIN=pin;
    1ab6:	70 93 11 02 	sts	0x0211, r23	; 0x800211 <keypad_PIN+0x1>
    1aba:	60 93 10 02 	sts	0x0210, r22	; 0x800210 <keypad_PIN>
	keypad_PORT=port;
    1abe:	50 93 06 02 	sts	0x0206, r21	; 0x800206 <keypad_PORT+0x1>
    1ac2:	40 93 05 02 	sts	0x0205, r20	; 0x800205 <keypad_PORT>
	//inic variables
	*keypad_DDR=(1<<KEYPADLINE_1) | (1<<KEYPADLINE_2) | (1<<KEYPADLINE_3) | (1<<KEYPADLINE_4);
    1ac6:	8b e8       	ldi	r24, 0x8B	; 139
    1ac8:	80 83       	st	Z, r24
	*keypad_PORT=(1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4);
    1aca:	e0 91 05 02 	lds	r30, 0x0205	; 0x800205 <keypad_PORT>
    1ace:	f0 91 06 02 	lds	r31, 0x0206	; 0x800206 <keypad_PORT+0x1>
    1ad2:	84 e7       	ldi	r24, 0x74	; 116
    1ad4:	80 83       	st	Z, r24
	keypad_datai.line_1=keypad_dataf.line_1=(1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4);
    1ad6:	a7 e0       	ldi	r26, 0x07	; 7
    1ad8:	b2 e0       	ldi	r27, 0x02	; 2
    1ada:	8c 93       	st	X, r24
    1adc:	eb e0       	ldi	r30, 0x0B	; 11
    1ade:	f2 e0       	ldi	r31, 0x02	; 2
    1ae0:	80 83       	st	Z, r24
	keypad_datai.line_2=keypad_dataf.line_2=(1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4);
    1ae2:	11 96       	adiw	r26, 0x01	; 1
    1ae4:	8c 93       	st	X, r24
    1ae6:	11 97       	sbiw	r26, 0x01	; 1
    1ae8:	81 83       	std	Z+1, r24	; 0x01
	keypad_datai.line_3=keypad_dataf.line_3=(1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4);
    1aea:	12 96       	adiw	r26, 0x02	; 2
    1aec:	8c 93       	st	X, r24
    1aee:	12 97       	sbiw	r26, 0x02	; 2
    1af0:	82 83       	std	Z+2, r24	; 0x02
	keypad_datai.line_4=keypad_dataf.line_4=(1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4);
    1af2:	13 96       	adiw	r26, 0x03	; 3
    1af4:	8c 93       	st	X, r24
    1af6:	83 83       	std	Z+3, r24	; 0x03
	KEYPADSTRINGINDEX=0;
    1af8:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <KEYPADSTRINGINDEX>
	//Direccionar apontadores para PROTOTIPOS
	keypad.getkey=KEYPAD_getkey;
	keypad.get=KEYPAD_get;
	keypad.flush=KEYPAD_flush;
	SREG=tSREG;
    1afc:	2f bf       	out	0x3f, r18	; 63
	//
	*keypad_PORT|=(1<<KEYPADLINE_1) | (1<<KEYPADLINE_2) | (1<<KEYPADLINE_3) | (1<<KEYPADLINE_4);
    1afe:	e0 91 05 02 	lds	r30, 0x0205	; 0x800205 <keypad_PORT>
    1b02:	f0 91 06 02 	lds	r31, 0x0206	; 0x800206 <keypad_PORT+0x1>
    1b06:	80 81       	ld	r24, Z
    1b08:	8b 68       	ori	r24, 0x8B	; 139
    1b0a:	80 83       	st	Z, r24
	//Going to use pull down method.
	KEYPAD_flush();
    1b0c:	63 de       	rcall	.-826    	; 0x17d4 <KEYPAD_flush>
	//Inic String Vec
	return keypad;
    1b0e:	28 ef       	ldi	r18, 0xF8	; 248
    1b10:	3b e0       	ldi	r19, 0x0B	; 11
    1b12:	3a 83       	std	Y+2, r19	; 0x02
    1b14:	29 83       	std	Y+1, r18	; 0x01
    1b16:	45 e2       	ldi	r20, 0x25	; 37
    1b18:	5d e0       	ldi	r21, 0x0D	; 13
    1b1a:	5c 83       	std	Y+4, r21	; 0x04
    1b1c:	4b 83       	std	Y+3, r20	; 0x03
    1b1e:	6a ee       	ldi	r22, 0xEA	; 234
    1b20:	7b e0       	ldi	r23, 0x0B	; 11
    1b22:	7e 83       	std	Y+6, r23	; 0x06
    1b24:	6d 83       	std	Y+5, r22	; 0x05
    1b26:	3a 81       	ldd	r19, Y+2	; 0x02
    1b28:	5c 81       	ldd	r21, Y+4	; 0x04
    1b2a:	7e 81       	ldd	r23, Y+6	; 0x06
}
    1b2c:	80 e0       	ldi	r24, 0x00	; 0
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	26 96       	adiw	r28, 0x06	; 6
    1b32:	0f b6       	in	r0, 0x3f	; 63
    1b34:	f8 94       	cli
    1b36:	de bf       	out	0x3e, r29	; 62
    1b38:	0f be       	out	0x3f, r0	; 63
    1b3a:	cd bf       	out	0x3d, r28	; 61
    1b3c:	df 91       	pop	r29
    1b3e:	cf 91       	pop	r28
    1b40:	08 95       	ret

00001b42 <LCD0_write>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1b42:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <lcd0_PORT>
    1b46:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <lcd0_PORT+0x1>
    1b4a:	90 81       	ld	r25, Z
    1b4c:	9d 7f       	andi	r25, 0xFD	; 253
    1b4e:	90 83       	st	Z, r25
    1b50:	67 2b       	or	r22, r23
    1b52:	41 f0       	breq	.+16     	; 0x1b64 <LCD0_write+0x22>
    1b54:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <lcd0_PORT>
    1b58:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <lcd0_PORT+0x1>
    1b5c:	90 81       	ld	r25, Z
    1b5e:	91 60       	ori	r25, 0x01	; 1
    1b60:	90 83       	st	Z, r25
    1b62:	07 c0       	rjmp	.+14     	; 0x1b72 <LCD0_write+0x30>
    1b64:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <lcd0_PORT>
    1b68:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <lcd0_PORT+0x1>
    1b6c:	90 81       	ld	r25, Z
    1b6e:	9e 7f       	andi	r25, 0xFE	; 254
    1b70:	90 83       	st	Z, r25
    1b72:	e0 91 31 02 	lds	r30, 0x0231	; 0x800231 <lcd0_DDR>
    1b76:	f0 91 32 02 	lds	r31, 0x0232	; 0x800232 <lcd0_DDR+0x1>
    1b7a:	90 81       	ld	r25, Z
    1b7c:	90 6f       	ori	r25, 0xF0	; 240
    1b7e:	90 83       	st	Z, r25
    1b80:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <lcd0_PORT>
    1b84:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <lcd0_PORT+0x1>
    1b88:	90 81       	ld	r25, Z
    1b8a:	94 60       	ori	r25, 0x04	; 4
    1b8c:	90 83       	st	Z, r25
    1b8e:	88 23       	and	r24, r24
    1b90:	44 f4       	brge	.+16     	; 0x1ba2 <LCD0_write+0x60>
    1b92:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <lcd0_PORT>
    1b96:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <lcd0_PORT+0x1>
    1b9a:	90 81       	ld	r25, Z
    1b9c:	90 68       	ori	r25, 0x80	; 128
    1b9e:	90 83       	st	Z, r25
    1ba0:	07 c0       	rjmp	.+14     	; 0x1bb0 <LCD0_write+0x6e>
    1ba2:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <lcd0_PORT>
    1ba6:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <lcd0_PORT+0x1>
    1baa:	90 81       	ld	r25, Z
    1bac:	9f 77       	andi	r25, 0x7F	; 127
    1bae:	90 83       	st	Z, r25
    1bb0:	86 ff       	sbrs	r24, 6
    1bb2:	08 c0       	rjmp	.+16     	; 0x1bc4 <LCD0_write+0x82>
    1bb4:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <lcd0_PORT>
    1bb8:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <lcd0_PORT+0x1>
    1bbc:	90 81       	ld	r25, Z
    1bbe:	90 64       	ori	r25, 0x40	; 64
    1bc0:	90 83       	st	Z, r25
    1bc2:	07 c0       	rjmp	.+14     	; 0x1bd2 <LCD0_write+0x90>
    1bc4:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <lcd0_PORT>
    1bc8:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <lcd0_PORT+0x1>
    1bcc:	90 81       	ld	r25, Z
    1bce:	9f 7b       	andi	r25, 0xBF	; 191
    1bd0:	90 83       	st	Z, r25
    1bd2:	85 ff       	sbrs	r24, 5
    1bd4:	08 c0       	rjmp	.+16     	; 0x1be6 <LCD0_write+0xa4>
    1bd6:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <lcd0_PORT>
    1bda:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <lcd0_PORT+0x1>
    1bde:	90 81       	ld	r25, Z
    1be0:	90 62       	ori	r25, 0x20	; 32
    1be2:	90 83       	st	Z, r25
    1be4:	07 c0       	rjmp	.+14     	; 0x1bf4 <LCD0_write+0xb2>
    1be6:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <lcd0_PORT>
    1bea:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <lcd0_PORT+0x1>
    1bee:	90 81       	ld	r25, Z
    1bf0:	9f 7d       	andi	r25, 0xDF	; 223
    1bf2:	90 83       	st	Z, r25
    1bf4:	84 ff       	sbrs	r24, 4
    1bf6:	08 c0       	rjmp	.+16     	; 0x1c08 <LCD0_write+0xc6>
    1bf8:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <lcd0_PORT>
    1bfc:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <lcd0_PORT+0x1>
    1c00:	90 81       	ld	r25, Z
    1c02:	90 61       	ori	r25, 0x10	; 16
    1c04:	90 83       	st	Z, r25
    1c06:	07 c0       	rjmp	.+14     	; 0x1c16 <LCD0_write+0xd4>
    1c08:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <lcd0_PORT>
    1c0c:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <lcd0_PORT+0x1>
    1c10:	90 81       	ld	r25, Z
    1c12:	9f 7e       	andi	r25, 0xEF	; 239
    1c14:	90 83       	st	Z, r25
    1c16:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <lcd0_PORT>
    1c1a:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <lcd0_PORT+0x1>
    1c1e:	90 81       	ld	r25, Z
    1c20:	9b 7f       	andi	r25, 0xFB	; 251
    1c22:	90 83       	st	Z, r25
    1c24:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <lcd0_PORT>
    1c28:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <lcd0_PORT+0x1>
    1c2c:	90 81       	ld	r25, Z
    1c2e:	94 60       	ori	r25, 0x04	; 4
    1c30:	90 83       	st	Z, r25
    1c32:	83 ff       	sbrs	r24, 3
    1c34:	08 c0       	rjmp	.+16     	; 0x1c46 <LCD0_write+0x104>
    1c36:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <lcd0_PORT>
    1c3a:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <lcd0_PORT+0x1>
    1c3e:	90 81       	ld	r25, Z
    1c40:	90 68       	ori	r25, 0x80	; 128
    1c42:	90 83       	st	Z, r25
    1c44:	07 c0       	rjmp	.+14     	; 0x1c54 <LCD0_write+0x112>
    1c46:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <lcd0_PORT>
    1c4a:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <lcd0_PORT+0x1>
    1c4e:	90 81       	ld	r25, Z
    1c50:	9f 77       	andi	r25, 0x7F	; 127
    1c52:	90 83       	st	Z, r25
    1c54:	82 ff       	sbrs	r24, 2
    1c56:	08 c0       	rjmp	.+16     	; 0x1c68 <LCD0_write+0x126>
    1c58:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <lcd0_PORT>
    1c5c:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <lcd0_PORT+0x1>
    1c60:	90 81       	ld	r25, Z
    1c62:	90 64       	ori	r25, 0x40	; 64
    1c64:	90 83       	st	Z, r25
    1c66:	07 c0       	rjmp	.+14     	; 0x1c76 <LCD0_write+0x134>
    1c68:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <lcd0_PORT>
    1c6c:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <lcd0_PORT+0x1>
    1c70:	90 81       	ld	r25, Z
    1c72:	9f 7b       	andi	r25, 0xBF	; 191
    1c74:	90 83       	st	Z, r25
    1c76:	81 ff       	sbrs	r24, 1
    1c78:	08 c0       	rjmp	.+16     	; 0x1c8a <LCD0_write+0x148>
    1c7a:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <lcd0_PORT>
    1c7e:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <lcd0_PORT+0x1>
    1c82:	90 81       	ld	r25, Z
    1c84:	90 62       	ori	r25, 0x20	; 32
    1c86:	90 83       	st	Z, r25
    1c88:	07 c0       	rjmp	.+14     	; 0x1c98 <LCD0_write+0x156>
    1c8a:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <lcd0_PORT>
    1c8e:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <lcd0_PORT+0x1>
    1c92:	90 81       	ld	r25, Z
    1c94:	9f 7d       	andi	r25, 0xDF	; 223
    1c96:	90 83       	st	Z, r25
    1c98:	80 ff       	sbrs	r24, 0
    1c9a:	08 c0       	rjmp	.+16     	; 0x1cac <LCD0_write+0x16a>
    1c9c:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <lcd0_PORT>
    1ca0:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <lcd0_PORT+0x1>
    1ca4:	80 81       	ld	r24, Z
    1ca6:	80 61       	ori	r24, 0x10	; 16
    1ca8:	80 83       	st	Z, r24
    1caa:	07 c0       	rjmp	.+14     	; 0x1cba <LCD0_write+0x178>
    1cac:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <lcd0_PORT>
    1cb0:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <lcd0_PORT+0x1>
    1cb4:	80 81       	ld	r24, Z
    1cb6:	8f 7e       	andi	r24, 0xEF	; 239
    1cb8:	80 83       	st	Z, r24
    1cba:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <lcd0_PORT>
    1cbe:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <lcd0_PORT+0x1>
    1cc2:	80 81       	ld	r24, Z
    1cc4:	8b 7f       	andi	r24, 0xFB	; 251
    1cc6:	80 83       	st	Z, r24
    1cc8:	08 95       	ret

00001cca <LCD0_read>:
    1cca:	e0 91 31 02 	lds	r30, 0x0231	; 0x800231 <lcd0_DDR>
    1cce:	f0 91 32 02 	lds	r31, 0x0232	; 0x800232 <lcd0_DDR+0x1>
    1cd2:	20 81       	ld	r18, Z
    1cd4:	2f 70       	andi	r18, 0x0F	; 15
    1cd6:	20 83       	st	Z, r18
    1cd8:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <lcd0_PORT>
    1cdc:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <lcd0_PORT+0x1>
    1ce0:	20 81       	ld	r18, Z
    1ce2:	20 6f       	ori	r18, 0xF0	; 240
    1ce4:	20 83       	st	Z, r18
    1ce6:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <lcd0_PORT>
    1cea:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <lcd0_PORT+0x1>
    1cee:	20 81       	ld	r18, Z
    1cf0:	22 60       	ori	r18, 0x02	; 2
    1cf2:	20 83       	st	Z, r18
    1cf4:	89 2b       	or	r24, r25
    1cf6:	41 f0       	breq	.+16     	; 0x1d08 <LCD0_read+0x3e>
    1cf8:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <lcd0_PORT>
    1cfc:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <lcd0_PORT+0x1>
    1d00:	80 81       	ld	r24, Z
    1d02:	81 60       	ori	r24, 0x01	; 1
    1d04:	80 83       	st	Z, r24
    1d06:	07 c0       	rjmp	.+14     	; 0x1d16 <LCD0_read+0x4c>
    1d08:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <lcd0_PORT>
    1d0c:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <lcd0_PORT+0x1>
    1d10:	80 81       	ld	r24, Z
    1d12:	8e 7f       	andi	r24, 0xFE	; 254
    1d14:	80 83       	st	Z, r24
    1d16:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <lcd0_PORT>
    1d1a:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <lcd0_PORT+0x1>
    1d1e:	80 81       	ld	r24, Z
    1d20:	84 60       	ori	r24, 0x04	; 4
    1d22:	80 83       	st	Z, r24
    1d24:	e0 91 2a 02 	lds	r30, 0x022A	; 0x80022a <lcd0_PIN>
    1d28:	f0 91 2b 02 	lds	r31, 0x022B	; 0x80022b <lcd0_PIN+0x1>
    1d2c:	80 81       	ld	r24, Z
    1d2e:	88 23       	and	r24, r24
    1d30:	14 f0       	brlt	.+4      	; 0x1d36 <LCD0_read+0x6c>
    1d32:	80 e0       	ldi	r24, 0x00	; 0
    1d34:	01 c0       	rjmp	.+2      	; 0x1d38 <LCD0_read+0x6e>
    1d36:	80 e8       	ldi	r24, 0x80	; 128
    1d38:	90 81       	ld	r25, Z
    1d3a:	96 ff       	sbrs	r25, 6
    1d3c:	02 c0       	rjmp	.+4      	; 0x1d42 <LCD0_read+0x78>
    1d3e:	80 64       	ori	r24, 0x40	; 64
    1d40:	01 c0       	rjmp	.+2      	; 0x1d44 <LCD0_read+0x7a>
    1d42:	8f 7b       	andi	r24, 0xBF	; 191
    1d44:	90 81       	ld	r25, Z
    1d46:	95 ff       	sbrs	r25, 5
    1d48:	02 c0       	rjmp	.+4      	; 0x1d4e <LCD0_read+0x84>
    1d4a:	80 62       	ori	r24, 0x20	; 32
    1d4c:	01 c0       	rjmp	.+2      	; 0x1d50 <LCD0_read+0x86>
    1d4e:	8f 7d       	andi	r24, 0xDF	; 223
    1d50:	90 81       	ld	r25, Z
    1d52:	94 ff       	sbrs	r25, 4
    1d54:	02 c0       	rjmp	.+4      	; 0x1d5a <LCD0_read+0x90>
    1d56:	80 61       	ori	r24, 0x10	; 16
    1d58:	01 c0       	rjmp	.+2      	; 0x1d5c <LCD0_read+0x92>
    1d5a:	8f 7e       	andi	r24, 0xEF	; 239
    1d5c:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <lcd0_PORT>
    1d60:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <lcd0_PORT+0x1>
    1d64:	90 81       	ld	r25, Z
    1d66:	9b 7f       	andi	r25, 0xFB	; 251
    1d68:	90 83       	st	Z, r25
    1d6a:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <lcd0_PORT>
    1d6e:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <lcd0_PORT+0x1>
    1d72:	90 81       	ld	r25, Z
    1d74:	94 60       	ori	r25, 0x04	; 4
    1d76:	90 83       	st	Z, r25
    1d78:	e0 91 2a 02 	lds	r30, 0x022A	; 0x80022a <lcd0_PIN>
    1d7c:	f0 91 2b 02 	lds	r31, 0x022B	; 0x80022b <lcd0_PIN+0x1>
    1d80:	90 81       	ld	r25, Z
    1d82:	99 23       	and	r25, r25
    1d84:	14 f4       	brge	.+4      	; 0x1d8a <LCD0_read+0xc0>
    1d86:	88 60       	ori	r24, 0x08	; 8
    1d88:	01 c0       	rjmp	.+2      	; 0x1d8c <LCD0_read+0xc2>
    1d8a:	87 7f       	andi	r24, 0xF7	; 247
    1d8c:	90 81       	ld	r25, Z
    1d8e:	96 ff       	sbrs	r25, 6
    1d90:	02 c0       	rjmp	.+4      	; 0x1d96 <LCD0_read+0xcc>
    1d92:	84 60       	ori	r24, 0x04	; 4
    1d94:	01 c0       	rjmp	.+2      	; 0x1d98 <LCD0_read+0xce>
    1d96:	8b 7f       	andi	r24, 0xFB	; 251
    1d98:	90 81       	ld	r25, Z
    1d9a:	95 ff       	sbrs	r25, 5
    1d9c:	02 c0       	rjmp	.+4      	; 0x1da2 <LCD0_read+0xd8>
    1d9e:	82 60       	ori	r24, 0x02	; 2
    1da0:	01 c0       	rjmp	.+2      	; 0x1da4 <LCD0_read+0xda>
    1da2:	8d 7f       	andi	r24, 0xFD	; 253
    1da4:	90 81       	ld	r25, Z
    1da6:	94 ff       	sbrs	r25, 4
    1da8:	02 c0       	rjmp	.+4      	; 0x1dae <LCD0_read+0xe4>
    1daa:	81 60       	ori	r24, 0x01	; 1
    1dac:	01 c0       	rjmp	.+2      	; 0x1db0 <LCD0_read+0xe6>
    1dae:	8e 7f       	andi	r24, 0xFE	; 254
    1db0:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <lcd0_PORT>
    1db4:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <lcd0_PORT+0x1>
    1db8:	90 81       	ld	r25, Z
    1dba:	9b 7f       	andi	r25, 0xFB	; 251
    1dbc:	90 83       	st	Z, r25
    1dbe:	08 95       	ret

00001dc0 <LCD0_BF>:
    1dc0:	cf 93       	push	r28
    1dc2:	df 93       	push	r29
    1dc4:	80 e0       	ldi	r24, 0x00	; 0
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	80 df       	rcall	.-256    	; 0x1cca <LCD0_read>
    1dca:	cb e0       	ldi	r28, 0x0B	; 11
    1dcc:	d0 e0       	ldi	r29, 0x00	; 0
    1dce:	05 c0       	rjmp	.+10     	; 0x1dda <LCD0_BF+0x1a>
    1dd0:	80 e0       	ldi	r24, 0x00	; 0
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	7a df       	rcall	.-268    	; 0x1cca <LCD0_read>
    1dd6:	21 97       	sbiw	r28, 0x01	; 1
    1dd8:	11 f0       	breq	.+4      	; 0x1dde <LCD0_BF+0x1e>
    1dda:	88 23       	and	r24, r24
    1ddc:	cc f3       	brlt	.-14     	; 0x1dd0 <LCD0_BF+0x10>
    1dde:	df 91       	pop	r29
    1de0:	cf 91       	pop	r28
    1de2:	08 95       	ret

00001de4 <LCD0_putch>:
    1de4:	61 e0       	ldi	r22, 0x01	; 1
    1de6:	70 e0       	ldi	r23, 0x00	; 0
    1de8:	ac de       	rcall	.-680    	; 0x1b42 <LCD0_write>
    1dea:	ea cf       	rjmp	.-44     	; 0x1dc0 <LCD0_BF>
    1dec:	08 95       	ret

00001dee <LCD0_getch>:
    1dee:	cf 93       	push	r28
    1df0:	81 e0       	ldi	r24, 0x01	; 1
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	6a df       	rcall	.-300    	; 0x1cca <LCD0_read>
    1df6:	c8 2f       	mov	r28, r24
    1df8:	e3 df       	rcall	.-58     	; 0x1dc0 <LCD0_BF>
    1dfa:	8c 2f       	mov	r24, r28
    1dfc:	cf 91       	pop	r28
    1dfe:	08 95       	ret

00001e00 <LCD0_string>:
    1e00:	cf 93       	push	r28
    1e02:	df 93       	push	r29
    1e04:	ec 01       	movw	r28, r24
    1e06:	88 81       	ld	r24, Y
    1e08:	88 23       	and	r24, r24
    1e0a:	41 f0       	breq	.+16     	; 0x1e1c <LCD0_string+0x1c>
    1e0c:	21 96       	adiw	r28, 0x01	; 1
    1e0e:	61 e0       	ldi	r22, 0x01	; 1
    1e10:	70 e0       	ldi	r23, 0x00	; 0
    1e12:	97 de       	rcall	.-722    	; 0x1b42 <LCD0_write>
    1e14:	d5 df       	rcall	.-86     	; 0x1dc0 <LCD0_BF>
    1e16:	89 91       	ld	r24, Y+
    1e18:	81 11       	cpse	r24, r1
    1e1a:	f9 cf       	rjmp	.-14     	; 0x1e0e <LCD0_string+0xe>
    1e1c:	df 91       	pop	r29
    1e1e:	cf 91       	pop	r28
    1e20:	08 95       	ret

00001e22 <LCD0_string_size>:
    1e22:	0f 93       	push	r16
    1e24:	1f 93       	push	r17
    1e26:	cf 93       	push	r28
    1e28:	df 93       	push	r29
    1e2a:	fc 01       	movw	r30, r24
    1e2c:	d6 2f       	mov	r29, r22
    1e2e:	80 81       	ld	r24, Z
    1e30:	88 23       	and	r24, r24
    1e32:	51 f0       	breq	.+20     	; 0x1e48 <LCD0_string_size+0x26>
    1e34:	8f 01       	movw	r16, r30
    1e36:	0f 5f       	subi	r16, 0xFF	; 255
    1e38:	1f 4f       	sbci	r17, 0xFF	; 255
    1e3a:	61 11       	cpse	r22, r1
    1e3c:	09 c0       	rjmp	.+18     	; 0x1e50 <LCD0_string_size+0x2e>
    1e3e:	1b c0       	rjmp	.+54     	; 0x1e76 <LCD0_string_size+0x54>
    1e40:	cf 5f       	subi	r28, 0xFF	; 255
    1e42:	dc 17       	cp	r29, r28
    1e44:	30 f4       	brcc	.+12     	; 0x1e52 <LCD0_string_size+0x30>
    1e46:	01 c0       	rjmp	.+2      	; 0x1e4a <LCD0_string_size+0x28>
    1e48:	c0 e0       	ldi	r28, 0x00	; 0
    1e4a:	cd 17       	cp	r28, r29
    1e4c:	60 f0       	brcs	.+24     	; 0x1e66 <LCD0_string_size+0x44>
    1e4e:	13 c0       	rjmp	.+38     	; 0x1e76 <LCD0_string_size+0x54>
    1e50:	c1 e0       	ldi	r28, 0x01	; 1
    1e52:	61 e0       	ldi	r22, 0x01	; 1
    1e54:	70 e0       	ldi	r23, 0x00	; 0
    1e56:	75 de       	rcall	.-790    	; 0x1b42 <LCD0_write>
    1e58:	b3 df       	rcall	.-154    	; 0x1dc0 <LCD0_BF>
    1e5a:	f8 01       	movw	r30, r16
    1e5c:	81 91       	ld	r24, Z+
    1e5e:	8f 01       	movw	r16, r30
    1e60:	81 11       	cpse	r24, r1
    1e62:	ee cf       	rjmp	.-36     	; 0x1e40 <LCD0_string_size+0x1e>
    1e64:	f2 cf       	rjmp	.-28     	; 0x1e4a <LCD0_string_size+0x28>
    1e66:	cf 5f       	subi	r28, 0xFF	; 255
    1e68:	61 e0       	ldi	r22, 0x01	; 1
    1e6a:	70 e0       	ldi	r23, 0x00	; 0
    1e6c:	80 e2       	ldi	r24, 0x20	; 32
    1e6e:	69 de       	rcall	.-814    	; 0x1b42 <LCD0_write>
    1e70:	a7 df       	rcall	.-178    	; 0x1dc0 <LCD0_BF>
    1e72:	cd 17       	cp	r28, r29
    1e74:	c0 f3       	brcs	.-16     	; 0x1e66 <LCD0_string_size+0x44>
    1e76:	df 91       	pop	r29
    1e78:	cf 91       	pop	r28
    1e7a:	1f 91       	pop	r17
    1e7c:	0f 91       	pop	r16
    1e7e:	08 95       	ret

00001e80 <LCD0_hspace>:
    1e80:	cf 93       	push	r28
    1e82:	c8 2f       	mov	r28, r24
    1e84:	88 23       	and	r24, r24
    1e86:	39 f0       	breq	.+14     	; 0x1e96 <LCD0_hspace+0x16>
    1e88:	61 e0       	ldi	r22, 0x01	; 1
    1e8a:	70 e0       	ldi	r23, 0x00	; 0
    1e8c:	80 e2       	ldi	r24, 0x20	; 32
    1e8e:	59 de       	rcall	.-846    	; 0x1b42 <LCD0_write>
    1e90:	97 df       	rcall	.-210    	; 0x1dc0 <LCD0_BF>
    1e92:	c1 50       	subi	r28, 0x01	; 1
    1e94:	c9 f7       	brne	.-14     	; 0x1e88 <LCD0_hspace+0x8>
    1e96:	cf 91       	pop	r28
    1e98:	08 95       	ret

00001e9a <LCD0_gotoxy>:
    1e9a:	26 2f       	mov	r18, r22
    1e9c:	81 30       	cpi	r24, 0x01	; 1
    1e9e:	91 05       	cpc	r25, r1
    1ea0:	71 f0       	breq	.+28     	; 0x1ebe <LCD0_gotoxy+0x24>
    1ea2:	30 f0       	brcs	.+12     	; 0x1eb0 <LCD0_gotoxy+0x16>
    1ea4:	82 30       	cpi	r24, 0x02	; 2
    1ea6:	91 05       	cpc	r25, r1
    1ea8:	89 f0       	breq	.+34     	; 0x1ecc <LCD0_gotoxy+0x32>
    1eaa:	03 97       	sbiw	r24, 0x03	; 3
    1eac:	b1 f0       	breq	.+44     	; 0x1eda <LCD0_gotoxy+0x40>
    1eae:	08 95       	ret
    1eb0:	60 e0       	ldi	r22, 0x00	; 0
    1eb2:	70 e0       	ldi	r23, 0x00	; 0
    1eb4:	80 e8       	ldi	r24, 0x80	; 128
    1eb6:	82 0f       	add	r24, r18
    1eb8:	44 de       	rcall	.-888    	; 0x1b42 <LCD0_write>
    1eba:	82 cf       	rjmp	.-252    	; 0x1dc0 <LCD0_BF>
    1ebc:	08 95       	ret
    1ebe:	60 e0       	ldi	r22, 0x00	; 0
    1ec0:	70 e0       	ldi	r23, 0x00	; 0
    1ec2:	80 ec       	ldi	r24, 0xC0	; 192
    1ec4:	82 0f       	add	r24, r18
    1ec6:	3d de       	rcall	.-902    	; 0x1b42 <LCD0_write>
    1ec8:	7b cf       	rjmp	.-266    	; 0x1dc0 <LCD0_BF>
    1eca:	08 95       	ret
    1ecc:	60 e0       	ldi	r22, 0x00	; 0
    1ece:	70 e0       	ldi	r23, 0x00	; 0
    1ed0:	84 e9       	ldi	r24, 0x94	; 148
    1ed2:	82 0f       	add	r24, r18
    1ed4:	36 de       	rcall	.-916    	; 0x1b42 <LCD0_write>
    1ed6:	74 cf       	rjmp	.-280    	; 0x1dc0 <LCD0_BF>
    1ed8:	08 95       	ret
    1eda:	60 e0       	ldi	r22, 0x00	; 0
    1edc:	70 e0       	ldi	r23, 0x00	; 0
    1ede:	84 ed       	ldi	r24, 0xD4	; 212
    1ee0:	82 0f       	add	r24, r18
    1ee2:	2f de       	rcall	.-930    	; 0x1b42 <LCD0_write>
    1ee4:	6d cf       	rjmp	.-294    	; 0x1dc0 <LCD0_BF>
    1ee6:	08 95       	ret

00001ee8 <LCD0_clear>:
    1ee8:	60 e0       	ldi	r22, 0x00	; 0
    1eea:	70 e0       	ldi	r23, 0x00	; 0
    1eec:	81 e0       	ldi	r24, 0x01	; 1
    1eee:	29 de       	rcall	.-942    	; 0x1b42 <LCD0_write>
    1ef0:	87 ee       	ldi	r24, 0xE7	; 231
    1ef2:	97 e1       	ldi	r25, 0x17	; 23
    1ef4:	01 97       	sbiw	r24, 0x01	; 1
    1ef6:	f1 f7       	brne	.-4      	; 0x1ef4 <LCD0_clear+0xc>
    1ef8:	00 c0       	rjmp	.+0      	; 0x1efa <LCD0_clear+0x12>
    1efa:	00 00       	nop
    1efc:	08 95       	ret

00001efe <LCD0_inic>:
	return lcd0;
}
void LCD0_inic(void)
{
	//LCD INIC
	*lcd0_DDR=(1<<RS)|(1<<RW)|(1<<EN)|(0<<NC);
    1efe:	e0 91 31 02 	lds	r30, 0x0231	; 0x800231 <lcd0_DDR>
    1f02:	f0 91 32 02 	lds	r31, 0x0232	; 0x800232 <lcd0_DDR+0x1>
    1f06:	87 e0       	ldi	r24, 0x07	; 7
    1f08:	80 83       	st	Z, r24
	*lcd0_PORT=(1<<NC);
    1f0a:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <lcd0_PORT>
    1f0e:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <lcd0_PORT+0x1>
    1f12:	88 e0       	ldi	r24, 0x08	; 8
    1f14:	80 83       	st	Z, r24
    1f16:	2f ef       	ldi	r18, 0xFF	; 255
    1f18:	83 ef       	ldi	r24, 0xF3	; 243
    1f1a:	91 e0       	ldi	r25, 0x01	; 1
    1f1c:	21 50       	subi	r18, 0x01	; 1
    1f1e:	80 40       	sbci	r24, 0x00	; 0
    1f20:	90 40       	sbci	r25, 0x00	; 0
    1f22:	e1 f7       	brne	.-8      	; 0x1f1c <LCD0_inic+0x1e>
    1f24:	00 c0       	rjmp	.+0      	; 0x1f26 <LCD0_inic+0x28>
    1f26:	00 00       	nop
	/***INICIALIZACAO LCD**datasheet*/
	_delay_ms(40);
	LCD0_write(0x33,INST); //function set
    1f28:	60 e0       	ldi	r22, 0x00	; 0
    1f2a:	70 e0       	ldi	r23, 0x00	; 0
    1f2c:	83 e3       	ldi	r24, 0x33	; 51
    1f2e:	09 de       	rcall	.-1006   	; 0x1b42 <LCD0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1f30:	20 ed       	ldi	r18, 0xD0	; 208
    1f32:	2a 95       	dec	r18
    1f34:	f1 f7       	brne	.-4      	; 0x1f32 <LCD0_inic+0x34>
	_delay_us(39);
	LCD0_write(0x33,INST); //function set
    1f36:	60 e0       	ldi	r22, 0x00	; 0
    1f38:	70 e0       	ldi	r23, 0x00	; 0
    1f3a:	83 e3       	ldi	r24, 0x33	; 51
    1f3c:	02 de       	rcall	.-1020   	; 0x1b42 <LCD0_write>
    1f3e:	80 ed       	ldi	r24, 0xD0	; 208
    1f40:	8a 95       	dec	r24
    1f42:	f1 f7       	brne	.-4      	; 0x1f40 <LCD0_inic+0x42>
	_delay_us(39);
	LCD0_write(0x2B,INST); //function set
    1f44:	60 e0       	ldi	r22, 0x00	; 0
    1f46:	70 e0       	ldi	r23, 0x00	; 0
    1f48:	8b e2       	ldi	r24, 0x2B	; 43
    1f4a:	fb dd       	rcall	.-1034   	; 0x1b42 <LCD0_write>
    1f4c:	95 ec       	ldi	r25, 0xC5	; 197
    1f4e:	9a 95       	dec	r25
    1f50:	f1 f7       	brne	.-4      	; 0x1f4e <LCD0_inic+0x50>
    1f52:	00 00       	nop
	_delay_us(37);
	LCD0_write(0x0C,INST);// display on/off control
    1f54:	60 e0       	ldi	r22, 0x00	; 0
    1f56:	70 e0       	ldi	r23, 0x00	; 0
    1f58:	8c e0       	ldi	r24, 0x0C	; 12
    1f5a:	f3 dd       	rcall	.-1050   	; 0x1b42 <LCD0_write>
    1f5c:	25 ec       	ldi	r18, 0xC5	; 197
    1f5e:	2a 95       	dec	r18
    1f60:	f1 f7       	brne	.-4      	; 0x1f5e <LCD0_inic+0x60>
	_delay_us(37);
	LCD0_write(0x01,INST);// clear display
    1f62:	00 00       	nop
    1f64:	60 e0       	ldi	r22, 0x00	; 0
    1f66:	70 e0       	ldi	r23, 0x00	; 0
    1f68:	81 e0       	ldi	r24, 0x01	; 1
    1f6a:	eb dd       	rcall	.-1066   	; 0x1b42 <LCD0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1f6c:	87 ee       	ldi	r24, 0xE7	; 231
    1f6e:	97 e1       	ldi	r25, 0x17	; 23
    1f70:	01 97       	sbiw	r24, 0x01	; 1
    1f72:	f1 f7       	brne	.-4      	; 0x1f70 <LCD0_inic+0x72>
    1f74:	00 c0       	rjmp	.+0      	; 0x1f76 <LCD0_inic+0x78>
	_delay_ms(1.53);
	LCD0_write(0x06,INST);// entry mode set (crazy settings)
    1f76:	00 00       	nop
    1f78:	60 e0       	ldi	r22, 0x00	; 0
    1f7a:	70 e0       	ldi	r23, 0x00	; 0
    1f7c:	86 e0       	ldi	r24, 0x06	; 6
    1f7e:	e1 dd       	rcall	.-1086   	; 0x1b42 <LCD0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1f80:	95 ec       	ldi	r25, 0xC5	; 197
    1f82:	9a 95       	dec	r25
    1f84:	f1 f7       	brne	.-4      	; 0x1f82 <LCD0_inic+0x84>
    1f86:	00 00       	nop
    1f88:	08 95       	ret

00001f8a <LCD0enable>:
unsigned int LCD_ticks(unsigned int num);
/*
** procedure and function
*/
LCD0 LCD0enable(volatile uint8_t *ddr, volatile uint8_t *pin, volatile uint8_t *port)
{
    1f8a:	1f 93       	push	r17
    1f8c:	cf 93       	push	r28
    1f8e:	df 93       	push	r29
    1f90:	ec 01       	movw	r28, r24
	//LOCAL VARIABLES
	uint8_t tSREG;
	tSREG=SREG;
    1f92:	1f b7       	in	r17, 0x3f	; 63
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
    1f94:	8f b7       	in	r24, 0x3f	; 63
    1f96:	8f 77       	andi	r24, 0x7F	; 127
    1f98:	8f bf       	out	0x3f, r24	; 63
	//ALLOCAÇÂO MEMORIA PARA Estrutura
	LCD0 lcd0;
	//import parametros
	lcd0_DDR=ddr;
    1f9a:	70 93 32 02 	sts	0x0232, r23	; 0x800232 <lcd0_DDR+0x1>
    1f9e:	60 93 31 02 	sts	0x0231, r22	; 0x800231 <lcd0_DDR>
	lcd0_PIN=pin;
    1fa2:	50 93 2b 02 	sts	0x022B, r21	; 0x80022b <lcd0_PIN+0x1>
    1fa6:	40 93 2a 02 	sts	0x022A, r20	; 0x80022a <lcd0_PIN>
	lcd0_PORT=port;
    1faa:	30 93 35 02 	sts	0x0235, r19	; 0x800235 <lcd0_PORT+0x1>
    1fae:	20 93 34 02 	sts	0x0234, r18	; 0x800234 <lcd0_PORT>
	//inic variables
	*lcd0_DDR=0x00;
    1fb2:	fb 01       	movw	r30, r22
    1fb4:	10 82       	st	Z, r1
	*lcd0_PORT=0xFF;
    1fb6:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <lcd0_PORT>
    1fba:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <lcd0_PORT+0x1>
    1fbe:	8f ef       	ldi	r24, 0xFF	; 255
    1fc0:	80 83       	st	Z, r24
	lcd0_detect=*lcd0_PIN & (1<<NC);
    1fc2:	e0 91 2a 02 	lds	r30, 0x022A	; 0x80022a <lcd0_PIN>
    1fc6:	f0 91 2b 02 	lds	r31, 0x022B	; 0x80022b <lcd0_PIN+0x1>
    1fca:	80 81       	ld	r24, Z
    1fcc:	88 70       	andi	r24, 0x08	; 8
    1fce:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <lcd0_detect>
	lcd0.hspace=LCD0_hspace;
	lcd0.clear=LCD0_clear;
	lcd0.gotoxy=LCD0_gotoxy;
	lcd0.reboot=LCD0_reboot;
	//LCD INIC
	LCD0_inic();
    1fd2:	95 df       	rcall	.-214    	; 0x1efe <LCD0_inic>
	SREG=tSREG;
    1fd4:	1f bf       	out	0x3f, r17	; 63
	//
	return lcd0;
    1fd6:	81 ea       	ldi	r24, 0xA1	; 161
    1fd8:	9d e0       	ldi	r25, 0x0D	; 13
    1fda:	99 83       	std	Y+1, r25	; 0x01
    1fdc:	88 83       	st	Y, r24
    1fde:	85 e6       	ldi	r24, 0x65	; 101
    1fe0:	9e e0       	ldi	r25, 0x0E	; 14
    1fe2:	9b 83       	std	Y+3, r25	; 0x03
    1fe4:	8a 83       	std	Y+2, r24	; 0x02
    1fe6:	80 ee       	ldi	r24, 0xE0	; 224
    1fe8:	9e e0       	ldi	r25, 0x0E	; 14
    1fea:	9d 83       	std	Y+5, r25	; 0x05
    1fec:	8c 83       	std	Y+4, r24	; 0x04
    1fee:	82 ef       	ldi	r24, 0xF2	; 242
    1ff0:	9e e0       	ldi	r25, 0x0E	; 14
    1ff2:	9f 83       	std	Y+7, r25	; 0x07
    1ff4:	8e 83       	std	Y+6, r24	; 0x06
    1ff6:	87 ef       	ldi	r24, 0xF7	; 247
    1ff8:	9e e0       	ldi	r25, 0x0E	; 14
    1ffa:	99 87       	std	Y+9, r25	; 0x09
    1ffc:	88 87       	std	Y+8, r24	; 0x08
    1ffe:	80 e0       	ldi	r24, 0x00	; 0
    2000:	9f e0       	ldi	r25, 0x0F	; 15
    2002:	9b 87       	std	Y+11, r25	; 0x0b
    2004:	8a 87       	std	Y+10, r24	; 0x0a
    2006:	81 e1       	ldi	r24, 0x11	; 17
    2008:	9f e0       	ldi	r25, 0x0F	; 15
    200a:	9d 87       	std	Y+13, r25	; 0x0d
    200c:	8c 87       	std	Y+12, r24	; 0x0c
    200e:	80 e4       	ldi	r24, 0x40	; 64
    2010:	9f e0       	ldi	r25, 0x0F	; 15
    2012:	9f 87       	std	Y+15, r25	; 0x0f
    2014:	8e 87       	std	Y+14, r24	; 0x0e
    2016:	84 e7       	ldi	r24, 0x74	; 116
    2018:	9f e0       	ldi	r25, 0x0F	; 15
    201a:	99 8b       	std	Y+17, r25	; 0x11
    201c:	88 8b       	std	Y+16, r24	; 0x10
    201e:	8d e4       	ldi	r24, 0x4D	; 77
    2020:	9f e0       	ldi	r25, 0x0F	; 15
    2022:	9b 8b       	std	Y+19, r25	; 0x13
    2024:	8a 8b       	std	Y+18, r24	; 0x12
    2026:	8c e1       	ldi	r24, 0x1C	; 28
    2028:	90 e1       	ldi	r25, 0x10	; 16
    202a:	9d 8b       	std	Y+21, r25	; 0x15
    202c:	8c 8b       	std	Y+20, r24	; 0x14
}
    202e:	ce 01       	movw	r24, r28
    2030:	df 91       	pop	r29
    2032:	cf 91       	pop	r28
    2034:	1f 91       	pop	r17
    2036:	08 95       	ret

00002038 <LCD0_reboot>:
	*lcd0_PORT|=(1<<EN);
	LCD_ticks(num);
	*lcd0_PORT&=~(1<<EN);
}
void LCD0_reboot(void)
{
    2038:	cf 93       	push	r28
	//low high detect pin NC
	uint8_t i;
	uint8_t tmp;
	tmp=*lcd0_PIN & (1<<NC);
    203a:	e0 91 2a 02 	lds	r30, 0x022A	; 0x80022a <lcd0_PIN>
    203e:	f0 91 2b 02 	lds	r31, 0x022B	; 0x80022b <lcd0_PIN+0x1>
    2042:	c0 81       	ld	r28, Z
    2044:	c8 70       	andi	r28, 0x08	; 8
	i=tmp^lcd0_detect;
    2046:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <lcd0_detect>
    204a:	8c 27       	eor	r24, r28
	i&=tmp;
	if(i)
    204c:	8c 23       	and	r24, r28
    204e:	09 f0       	breq	.+2      	; 0x2052 <LCD0_reboot+0x1a>
		LCD0_inic();
    2050:	56 df       	rcall	.-340    	; 0x1efe <LCD0_inic>
	lcd0_detect=tmp;
    2052:	c0 93 33 02 	sts	0x0233, r28	; 0x800233 <lcd0_detect>
}
    2056:	cf 91       	pop	r28
    2058:	08 95       	ret

0000205a <PORTINIT>:
** procedure and function
*/
void PORTINIT()
{
	//INPUT
	DDRF=0x00;
    205a:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	PORTF=0x0F;
    205e:	8f e0       	ldi	r24, 0x0F	; 15
    2060:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	DDRE=0X00;
    2064:	12 b8       	out	0x02, r1	; 2
	PORTE=0XFF;
    2066:	8f ef       	ldi	r24, 0xFF	; 255
    2068:	83 b9       	out	0x03, r24	; 3
	DDRD=0X00;
    206a:	11 ba       	out	0x11, r1	; 17
	PORTD=0XFF;
    206c:	82 bb       	out	0x12, r24	; 18
	//OUTPUT
	DDRC=0XFF;
    206e:	84 bb       	out	0x14, r24	; 20
	PORTC=0x00;
    2070:	15 ba       	out	0x15, r1	; 21
	DDRB|=(1<<5) | (1<<6) | (1<<7);
    2072:	87 b3       	in	r24, 0x17	; 23
    2074:	80 6e       	ori	r24, 0xE0	; 224
    2076:	87 bb       	out	0x17, r24	; 23
	//UART0
	//DDRE=0X02;
	SREG|=(1<<GI);
    2078:	8f b7       	in	r24, 0x3f	; 63
    207a:	80 68       	ori	r24, 0x80	; 128
    207c:	8f bf       	out	0x3f, r24	; 63
    207e:	08 95       	ret

00002080 <main>:
** procedure and function header
*/
void PORTINIT();
/****MAIN****/
int main(void)
{
    2080:	cf 93       	push	r28
    2082:	df 93       	push	r29
    2084:	cd b7       	in	r28, 0x3d	; 61
    2086:	de b7       	in	r29, 0x3e	; 62
    2088:	c0 5e       	subi	r28, 0xE0	; 224
    208a:	d1 09       	sbc	r29, r1
    208c:	0f b6       	in	r0, 0x3f	; 63
    208e:	f8 94       	cli
    2090:	de bf       	out	0x3e, r29	; 62
    2092:	0f be       	out	0x3f, r0	; 63
    2094:	cd bf       	out	0x3d, r28	; 61
	PORTINIT();
    2096:	e1 df       	rcall	.-62     	; 0x205a <PORTINIT>
	/***INICIALIZE OBJECTS***/
	FUNC function= FUNCenable();
    2098:	ce 01       	movw	r24, r28
    209a:	8d 5b       	subi	r24, 0xBD	; 189
    209c:	9f 4f       	sbci	r25, 0xFF	; 255
    209e:	f3 da       	rcall	.-2586   	; 0x1686 <FUNCenable>
	LCD0 lcd0 = LCD0enable(&DDRA,&PINA,&PORTA);
    20a0:	2b e3       	ldi	r18, 0x3B	; 59
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	49 e3       	ldi	r20, 0x39	; 57
    20a6:	50 e0       	ldi	r21, 0x00	; 0
    20a8:	6a e3       	ldi	r22, 0x3A	; 58
    20aa:	70 e0       	ldi	r23, 0x00	; 0
    20ac:	ce 01       	movw	r24, r28
    20ae:	83 57       	subi	r24, 0x73	; 115
    20b0:	9f 4f       	sbci	r25, 0xFF	; 255
    20b2:	6b df       	rcall	.-298    	; 0x1f8a <LCD0enable>
    20b4:	c9 56       	subi	r28, 0x69	; 105
    20b6:	df 4f       	sbci	r29, 0xFF	; 255
    20b8:	28 80       	ld	r2, Y
    20ba:	39 80       	ldd	r3, Y+1	; 0x01
    20bc:	c7 59       	subi	r28, 0x97	; 151
    20be:	d0 40       	sbci	r29, 0x00	; 0
    20c0:	c7 56       	subi	r28, 0x67	; 103
    20c2:	df 4f       	sbci	r29, 0xFF	; 255
    20c4:	88 81       	ld	r24, Y
    20c6:	99 81       	ldd	r25, Y+1	; 0x01
    20c8:	c9 59       	subi	r28, 0x99	; 153
    20ca:	d0 40       	sbci	r29, 0x00	; 0
    20cc:	c3 52       	subi	r28, 0x23	; 35
    20ce:	df 4f       	sbci	r29, 0xFF	; 255
    20d0:	99 83       	std	Y+1, r25	; 0x01
    20d2:	88 83       	st	Y, r24
    20d4:	cd 5d       	subi	r28, 0xDD	; 221
    20d6:	d0 40       	sbci	r29, 0x00	; 0
    20d8:	c1 56       	subi	r28, 0x61	; 97
    20da:	df 4f       	sbci	r29, 0xFF	; 255
    20dc:	88 80       	ld	r8, Y
    20de:	99 80       	ldd	r9, Y+1	; 0x01
    20e0:	cf 59       	subi	r28, 0x9F	; 159
    20e2:	d0 40       	sbci	r29, 0x00	; 0
	KEYPAD keypad = KEYPADenable(&DDRE,&PINE,&PORTE);
    20e4:	43 e2       	ldi	r20, 0x23	; 35
    20e6:	50 e0       	ldi	r21, 0x00	; 0
    20e8:	61 e2       	ldi	r22, 0x21	; 33
    20ea:	70 e0       	ldi	r23, 0x00	; 0
    20ec:	82 e2       	ldi	r24, 0x22	; 34
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	cf dc       	rcall	.-1634   	; 0x1a90 <KEYPADenable>
    20f2:	cd 55       	subi	r28, 0x5D	; 93
    20f4:	df 4f       	sbci	r29, 0xFF	; 255
    20f6:	28 83       	st	Y, r18
    20f8:	c3 5a       	subi	r28, 0xA3	; 163
    20fa:	d0 40       	sbci	r29, 0x00	; 0
    20fc:	cc 55       	subi	r28, 0x5C	; 92
    20fe:	df 4f       	sbci	r29, 0xFF	; 255
    2100:	38 83       	st	Y, r19
    2102:	c4 5a       	subi	r28, 0xA4	; 164
    2104:	d0 40       	sbci	r29, 0x00	; 0
    2106:	cb 55       	subi	r28, 0x5B	; 91
    2108:	df 4f       	sbci	r29, 0xFF	; 255
    210a:	48 83       	st	Y, r20
    210c:	c5 5a       	subi	r28, 0xA5	; 165
    210e:	d0 40       	sbci	r29, 0x00	; 0
    2110:	ca 55       	subi	r28, 0x5A	; 90
    2112:	df 4f       	sbci	r29, 0xFF	; 255
    2114:	58 83       	st	Y, r21
    2116:	c6 5a       	subi	r28, 0xA6	; 166
    2118:	d0 40       	sbci	r29, 0x00	; 0
    211a:	c9 55       	subi	r28, 0x59	; 89
    211c:	df 4f       	sbci	r29, 0xFF	; 255
    211e:	68 83       	st	Y, r22
    2120:	c7 5a       	subi	r28, 0xA7	; 167
    2122:	d0 40       	sbci	r29, 0x00	; 0
    2124:	c8 55       	subi	r28, 0x58	; 88
    2126:	df 4f       	sbci	r29, 0xFF	; 255
    2128:	78 83       	st	Y, r23
    212a:	c8 5a       	subi	r28, 0xA8	; 168
    212c:	d0 40       	sbci	r29, 0x00	; 0
    212e:	cb 55       	subi	r28, 0x5B	; 91
    2130:	df 4f       	sbci	r29, 0xFF	; 255
    2132:	68 80       	ld	r6, Y
    2134:	79 80       	ldd	r7, Y+1	; 0x01
    2136:	c5 5a       	subi	r28, 0xA5	; 165
    2138:	d0 40       	sbci	r29, 0x00	; 0
	ANALOG analog = ANALOGenable(1, 128, 1, 0); // channel 0 for position
    213a:	1f 92       	push	r1
    213c:	1f 92       	push	r1
    213e:	1f 92       	push	r1
    2140:	81 e0       	ldi	r24, 0x01	; 1
    2142:	8f 93       	push	r24
    2144:	90 e8       	ldi	r25, 0x80	; 128
    2146:	9f 93       	push	r25
    2148:	8f 93       	push	r24
    214a:	0e 94 8b 00 	call	0x116	; 0x116 <ANALOGenable>
    214e:	6b 01       	movw	r12, r22
    2150:	7c 01       	movw	r14, r24
	TIMER_COUNTER0 timer0 = TIMER_COUNTER0enable(2,2); // for clock
    2152:	42 e0       	ldi	r20, 0x02	; 2
    2154:	62 e0       	ldi	r22, 0x02	; 2
    2156:	ce 01       	movw	r24, r28
    2158:	87 55       	subi	r24, 0x57	; 87
    215a:	9f 4f       	sbci	r25, 0xFF	; 255
    215c:	0e 94 a2 02 	call	0x544	; 0x544 <TIMER_COUNTER0enable>
	TIMER_COUNTER1 timer1 = TIMER_COUNTER1enable(9,0); // PWM positioning
    2160:	40 e0       	ldi	r20, 0x00	; 0
    2162:	69 e0       	ldi	r22, 0x09	; 9
    2164:	ce 01       	movw	r24, r28
    2166:	87 54       	subi	r24, 0x47	; 71
    2168:	9f 4f       	sbci	r25, 0xFF	; 255
    216a:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <TIMER_COUNTER1enable>
	//TIMER_COUNTER3 timer3 = TIMER_COUNTER3enable(12,12);
	relogio=CLOCKenable(12,0,0);
    216e:	20 e0       	ldi	r18, 0x00	; 0
    2170:	40 e0       	ldi	r20, 0x00	; 0
    2172:	6c e0       	ldi	r22, 0x0C	; 12
    2174:	ce 01       	movw	r24, r28
    2176:	87 53       	subi	r24, 0x37	; 55
    2178:	9f 4f       	sbci	r25, 0xFF	; 255
    217a:	0e 94 0b 07 	call	0xe16	; 0xe16 <CLOCKenable>
    217e:	84 e1       	ldi	r24, 0x14	; 20
    2180:	fe 01       	movw	r30, r28
    2182:	e7 53       	subi	r30, 0x37	; 55
    2184:	ff 4f       	sbci	r31, 0xFF	; 255
    2186:	aa e3       	ldi	r26, 0x3A	; 58
    2188:	b2 e0       	ldi	r27, 0x02	; 2
    218a:	01 90       	ld	r0, Z+
    218c:	0d 92       	st	X+, r0
    218e:	8a 95       	dec	r24
    2190:	e1 f7       	brne	.-8      	; 0x218a <main+0x10a>
	char Menu='1';
	char* str;
	char chr;
	int adcvalue;
	/***Parameters timers***/
	timer0.compare(249);
    2192:	c1 55       	subi	r28, 0x51	; 81
    2194:	df 4f       	sbci	r29, 0xFF	; 255
    2196:	e8 81       	ld	r30, Y
    2198:	f9 81       	ldd	r31, Y+1	; 0x01
    219a:	cf 5a       	subi	r28, 0xAF	; 175
    219c:	d0 40       	sbci	r29, 0x00	; 0
    219e:	89 ef       	ldi	r24, 0xF9	; 249
    21a0:	09 95       	icall
	timer1.compoutmodeB(2);
    21a2:	c5 54       	subi	r28, 0x45	; 69
    21a4:	df 4f       	sbci	r29, 0xFF	; 255
    21a6:	e8 81       	ld	r30, Y
    21a8:	f9 81       	ldd	r31, Y+1	; 0x01
    21aa:	cb 5b       	subi	r28, 0xBB	; 187
    21ac:	d0 40       	sbci	r29, 0x00	; 0
    21ae:	82 e0       	ldi	r24, 0x02	; 2
    21b0:	09 95       	icall
	timer1.compareA(20000);
    21b2:	c1 54       	subi	r28, 0x41	; 65
    21b4:	df 4f       	sbci	r29, 0xFF	; 255
    21b6:	e8 81       	ld	r30, Y
    21b8:	f9 81       	ldd	r31, Y+1	; 0x01
    21ba:	cf 5b       	subi	r28, 0xBF	; 191
    21bc:	d0 40       	sbci	r29, 0x00	; 0
    21be:	80 e2       	ldi	r24, 0x20	; 32
    21c0:	9e e4       	ldi	r25, 0x4E	; 78
    21c2:	09 95       	icall
	timer1.start(8);
    21c4:	cb 53       	subi	r28, 0x3B	; 59
    21c6:	df 4f       	sbci	r29, 0xFF	; 255
    21c8:	e8 81       	ld	r30, Y
    21ca:	f9 81       	ldd	r31, Y+1	; 0x01
    21cc:	c5 5c       	subi	r28, 0xC5	; 197
    21ce:	d0 40       	sbci	r29, 0x00	; 0
    21d0:	88 e0       	ldi	r24, 0x08	; 8
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	09 95       	icall
	timer0.start(64);
    21d6:	cb 54       	subi	r28, 0x4B	; 75
    21d8:	df 4f       	sbci	r29, 0xFF	; 255
    21da:	e8 81       	ld	r30, Y
    21dc:	f9 81       	ldd	r31, Y+1	; 0x01
    21de:	c5 5b       	subi	r28, 0xB5	; 181
    21e0:	d0 40       	sbci	r29, 0x00	; 0
    21e2:	80 e4       	ldi	r24, 0x40	; 64
    21e4:	90 e0       	ldi	r25, 0x00	; 0
    21e6:	09 95       	icall
    21e8:	0f 90       	pop	r0
    21ea:	0f 90       	pop	r0
    21ec:	0f 90       	pop	r0
    21ee:	0f 90       	pop	r0
    21f0:	0f 90       	pop	r0
    21f2:	0f 90       	pop	r0
		
		//TODO:: Please write your application code
		switch(Menu){
			case '1':
				lcd0.gotoxy(0,0);
				adcvalue=analog.read(0);
    21f4:	c1 52       	subi	r28, 0x21	; 33
    21f6:	df 4f       	sbci	r29, 0xFF	; 255
    21f8:	f9 82       	std	Y+1, r15	; 0x01
    21fa:	e8 82       	st	Y, r14
    21fc:	cf 5d       	subi	r28, 0xDF	; 223
    21fe:	d0 40       	sbci	r29, 0x00	; 0
	//timer3.compoutmodeC(1);
	//timer3.start(255);
	/**********/
	while(TRUE){
		//PREAMBLE
		lcd0.reboot();
    2200:	cf 55       	subi	r28, 0x5F	; 95
    2202:	df 4f       	sbci	r29, 0xFF	; 255
    2204:	e8 81       	ld	r30, Y
    2206:	f9 81       	ldd	r31, Y+1	; 0x01
    2208:	c1 5a       	subi	r28, 0xA1	; 161
    220a:	d0 40       	sbci	r29, 0x00	; 0
    220c:	09 95       	icall
		/***Entry***/
		chr=keypad.get().character;
    220e:	ce 01       	movw	r24, r28
    2210:	8d 96       	adiw	r24, 0x2d	; 45
    2212:	f3 01       	movw	r30, r6
    2214:	09 95       	icall
    2216:	1d a5       	ldd	r17, Y+45	; 0x2d
		lcd0.gotoxy(3,0);
    2218:	60 e0       	ldi	r22, 0x00	; 0
    221a:	70 e0       	ldi	r23, 0x00	; 0
    221c:	83 e0       	ldi	r24, 0x03	; 3
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	f4 01       	movw	r30, r8
    2222:	09 95       	icall
		lcd0.putch(chr);
    2224:	cd 56       	subi	r28, 0x6D	; 109
    2226:	df 4f       	sbci	r29, 0xFF	; 255
    2228:	e8 81       	ld	r30, Y
    222a:	f9 81       	ldd	r31, Y+1	; 0x01
    222c:	c3 59       	subi	r28, 0x93	; 147
    222e:	d0 40       	sbci	r29, 0x00	; 0
    2230:	81 2f       	mov	r24, r17
    2232:	09 95       	icall
		lcd0.gotoxy(3,10);
    2234:	6a e0       	ldi	r22, 0x0A	; 10
    2236:	70 e0       	ldi	r23, 0x00	; 0
    2238:	83 e0       	ldi	r24, 0x03	; 3
    223a:	90 e0       	ldi	r25, 0x00	; 0
    223c:	f4 01       	movw	r30, r8
    223e:	09 95       	icall
		lcd0.string(keypad.get().string);
    2240:	ce 01       	movw	r24, r28
    2242:	47 96       	adiw	r24, 0x17	; 23
    2244:	f3 01       	movw	r30, r6
    2246:	09 95       	icall
    2248:	ce 01       	movw	r24, r28
    224a:	48 96       	adiw	r24, 0x18	; 24
    224c:	f1 01       	movw	r30, r2
    224e:	09 95       	icall
		if(!strcmp(keypad.get().string,"123")){
    2250:	ce 01       	movw	r24, r28
    2252:	01 96       	adiw	r24, 0x01	; 1
    2254:	f3 01       	movw	r30, r6
    2256:	09 95       	icall
    2258:	60 e1       	ldi	r22, 0x10	; 16
    225a:	71 e0       	ldi	r23, 0x01	; 1
    225c:	ce 01       	movw	r24, r28
    225e:	02 96       	adiw	r24, 0x02	; 2
    2260:	48 d1       	rcall	.+656    	; 0x24f2 <strcmp>
    2262:	89 2b       	or	r24, r25
    2264:	b9 f4       	brne	.+46     	; 0x2294 <main+0x214>
			lcd0.gotoxy(2,0);
    2266:	60 e0       	ldi	r22, 0x00	; 0
    2268:	70 e0       	ldi	r23, 0x00	; 0
    226a:	82 e0       	ldi	r24, 0x02	; 2
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	f4 01       	movw	r30, r8
    2270:	09 95       	icall
			lcd0.string_size("mcu responde ola",16);
    2272:	60 e1       	ldi	r22, 0x10	; 16
    2274:	84 e1       	ldi	r24, 0x14	; 20
    2276:	91 e0       	ldi	r25, 0x01	; 1
    2278:	c3 52       	subi	r28, 0x23	; 35
    227a:	df 4f       	sbci	r29, 0xFF	; 255
    227c:	e8 81       	ld	r30, Y
    227e:	f9 81       	ldd	r31, Y+1	; 0x01
    2280:	cd 5d       	subi	r28, 0xDD	; 221
    2282:	d0 40       	sbci	r29, 0x00	; 0
    2284:	09 95       	icall
			keypad.flush();	
    2286:	c9 55       	subi	r28, 0x59	; 89
    2288:	df 4f       	sbci	r29, 0xFF	; 255
    228a:	e8 81       	ld	r30, Y
    228c:	f9 81       	ldd	r31, Y+1	; 0x01
    228e:	c7 5a       	subi	r28, 0xA7	; 167
    2290:	d0 40       	sbci	r29, 0x00	; 0
    2292:	09 95       	icall
			
		
		//TODO:: Please write your application code
		switch(Menu){
			case '1':
				lcd0.gotoxy(0,0);
    2294:	60 e0       	ldi	r22, 0x00	; 0
    2296:	70 e0       	ldi	r23, 0x00	; 0
    2298:	80 e0       	ldi	r24, 0x00	; 0
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	f4 01       	movw	r30, r8
    229e:	09 95       	icall
				adcvalue=analog.read(0);
    22a0:	80 e0       	ldi	r24, 0x00	; 0
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	c1 52       	subi	r28, 0x21	; 33
    22a6:	df 4f       	sbci	r29, 0xFF	; 255
    22a8:	e8 81       	ld	r30, Y
    22aa:	f9 81       	ldd	r31, Y+1	; 0x01
    22ac:	cf 5d       	subi	r28, 0xDF	; 223
    22ae:	d0 40       	sbci	r29, 0x00	; 0
    22b0:	09 95       	icall
    22b2:	8c 01       	movw	r16, r24
				str=function.i16toa(adcvalue);
    22b4:	a5 96       	adiw	r28, 0x25	; 37
    22b6:	ee ad       	ldd	r30, Y+62	; 0x3e
    22b8:	ff ad       	ldd	r31, Y+63	; 0x3f
    22ba:	a5 97       	sbiw	r28, 0x25	; 37
    22bc:	09 95       	icall
				lcd0.string_size(str,5);
    22be:	65 e0       	ldi	r22, 0x05	; 5
    22c0:	c3 52       	subi	r28, 0x23	; 35
    22c2:	df 4f       	sbci	r29, 0xFF	; 255
    22c4:	e8 81       	ld	r30, Y
    22c6:	f9 81       	ldd	r31, Y+1	; 0x01
    22c8:	cd 5d       	subi	r28, 0xDD	; 221
    22ca:	d0 40       	sbci	r29, 0x00	; 0
    22cc:	09 95       	icall
				timer1.compareB(function.trimmer(adcvalue,0,1023,450,2450));
    22ce:	cf 53       	subi	r28, 0x3F	; 63
    22d0:	df 4f       	sbci	r29, 0xFF	; 255
    22d2:	48 80       	ld	r4, Y
    22d4:	59 80       	ldd	r5, Y+1	; 0x01
    22d6:	c1 5c       	subi	r28, 0xC1	; 193
    22d8:	d0 40       	sbci	r29, 0x00	; 0
    22da:	b8 01       	movw	r22, r16
    22dc:	11 0f       	add	r17, r17
    22de:	88 0b       	sbc	r24, r24
    22e0:	99 0b       	sbc	r25, r25
    22e2:	1f 92       	push	r1
    22e4:	1f 92       	push	r1
    22e6:	f9 e0       	ldi	r31, 0x09	; 9
    22e8:	ff 93       	push	r31
    22ea:	22 e9       	ldi	r18, 0x92	; 146
    22ec:	2f 93       	push	r18
    22ee:	cf 57       	subi	r28, 0x7F	; 127
    22f0:	df 4f       	sbci	r29, 0xFF	; 255
    22f2:	e8 81       	ld	r30, Y
    22f4:	f9 81       	ldd	r31, Y+1	; 0x01
    22f6:	c1 58       	subi	r28, 0x81	; 129
    22f8:	d0 40       	sbci	r29, 0x00	; 0
    22fa:	0f 2e       	mov	r0, r31
    22fc:	f2 ec       	ldi	r31, 0xC2	; 194
    22fe:	af 2e       	mov	r10, r31
    2300:	bb 24       	eor	r11, r11
    2302:	b3 94       	inc	r11
    2304:	c1 2c       	mov	r12, r1
    2306:	d1 2c       	mov	r13, r1
    2308:	f0 2d       	mov	r31, r0
    230a:	ee 24       	eor	r14, r14
    230c:	ea 94       	dec	r14
    230e:	13 e0       	ldi	r17, 0x03	; 3
    2310:	f1 2e       	mov	r15, r17
    2312:	00 e0       	ldi	r16, 0x00	; 0
    2314:	10 e0       	ldi	r17, 0x00	; 0
    2316:	20 e0       	ldi	r18, 0x00	; 0
    2318:	30 e0       	ldi	r19, 0x00	; 0
    231a:	a9 01       	movw	r20, r18
    231c:	09 95       	icall
    231e:	cb 01       	movw	r24, r22
    2320:	f2 01       	movw	r30, r4
    2322:	09 95       	icall
				else
					strcpy(str,keypad.get().string);
				timer1.compareB(function.trimmer(function.strToInt(str),0,1023,450,2450));
				break;
		};
		lcd0.hspace(3);
    2324:	c5 56       	subi	r28, 0x65	; 101
    2326:	df 4f       	sbci	r29, 0xFF	; 255
    2328:	e8 81       	ld	r30, Y
    232a:	f9 81       	ldd	r31, Y+1	; 0x01
    232c:	cb 59       	subi	r28, 0x9B	; 155
    232e:	d0 40       	sbci	r29, 0x00	; 0
    2330:	83 e0       	ldi	r24, 0x03	; 3
    2332:	09 95       	icall
		lcd0.string(relogio.show());
    2334:	e0 91 4c 02 	lds	r30, 0x024C	; 0x80024c <relogio+0x12>
    2338:	f0 91 4d 02 	lds	r31, 0x024D	; 0x80024d <relogio+0x13>
    233c:	09 95       	icall
    233e:	f1 01       	movw	r30, r2
    2340:	09 95       	icall
	}
    2342:	0f 90       	pop	r0
    2344:	0f 90       	pop	r0
    2346:	0f 90       	pop	r0
    2348:	0f 90       	pop	r0
    234a:	5a cf       	rjmp	.-332    	; 0x2200 <main+0x180>

0000234c <__vector_15>:
}
/*
** interrupt
*/
ISR(TIMER0_COMP_vect) // TIMER0_COMP_vect used for clock
{
    234c:	1f 92       	push	r1
    234e:	0f 92       	push	r0
    2350:	0f b6       	in	r0, 0x3f	; 63
    2352:	0f 92       	push	r0
    2354:	11 24       	eor	r1, r1
    2356:	0b b6       	in	r0, 0x3b	; 59
    2358:	0f 92       	push	r0
    235a:	2f 93       	push	r18
    235c:	3f 93       	push	r19
    235e:	4f 93       	push	r20
    2360:	5f 93       	push	r21
    2362:	6f 93       	push	r22
    2364:	7f 93       	push	r23
    2366:	8f 93       	push	r24
    2368:	9f 93       	push	r25
    236a:	af 93       	push	r26
    236c:	bf 93       	push	r27
    236e:	ef 93       	push	r30
    2370:	ff 93       	push	r31
	TIMER0_COMPARE_MATCH++;
    2372:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <TIMER0_COMPARE_MATCH>
    2376:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <TIMER0_COMPARE_MATCH+0x1>
    237a:	01 96       	adiw	r24, 0x01	; 1
	if(TIMER0_COMPARE_MATCH > 999){
    237c:	88 3e       	cpi	r24, 0xE8	; 232
    237e:	23 e0       	ldi	r18, 0x03	; 3
    2380:	92 07       	cpc	r25, r18
    2382:	28 f4       	brcc	.+10     	; 0x238e <__vector_15+0x42>
/*
** interrupt
*/
ISR(TIMER0_COMP_vect) // TIMER0_COMP_vect used for clock
{
	TIMER0_COMPARE_MATCH++;
    2384:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <TIMER0_COMPARE_MATCH+0x1>
    2388:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <TIMER0_COMPARE_MATCH>
    238c:	09 c0       	rjmp	.+18     	; 0x23a0 <__vector_15+0x54>
	if(TIMER0_COMPARE_MATCH > 999){
		TIMER0_COMPARE_MATCH=0;
    238e:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <TIMER0_COMPARE_MATCH+0x1>
    2392:	10 92 38 02 	sts	0x0238, r1	; 0x800238 <TIMER0_COMPARE_MATCH>
		relogio.increment();
    2396:	e0 91 3c 02 	lds	r30, 0x023C	; 0x80023c <relogio+0x2>
    239a:	f0 91 3d 02 	lds	r31, 0x023D	; 0x80023d <relogio+0x3>
    239e:	09 95       	icall
	}
}
    23a0:	ff 91       	pop	r31
    23a2:	ef 91       	pop	r30
    23a4:	bf 91       	pop	r27
    23a6:	af 91       	pop	r26
    23a8:	9f 91       	pop	r25
    23aa:	8f 91       	pop	r24
    23ac:	7f 91       	pop	r23
    23ae:	6f 91       	pop	r22
    23b0:	5f 91       	pop	r21
    23b2:	4f 91       	pop	r20
    23b4:	3f 91       	pop	r19
    23b6:	2f 91       	pop	r18
    23b8:	0f 90       	pop	r0
    23ba:	0b be       	out	0x3b, r0	; 59
    23bc:	0f 90       	pop	r0
    23be:	0f be       	out	0x3f, r0	; 63
    23c0:	0f 90       	pop	r0
    23c2:	1f 90       	pop	r1
    23c4:	18 95       	reti

000023c6 <__mulsi3>:
    23c6:	db 01       	movw	r26, r22
    23c8:	8f 93       	push	r24
    23ca:	9f 93       	push	r25
    23cc:	88 d0       	rcall	.+272    	; 0x24de <__muluhisi3>
    23ce:	bf 91       	pop	r27
    23d0:	af 91       	pop	r26
    23d2:	a2 9f       	mul	r26, r18
    23d4:	80 0d       	add	r24, r0
    23d6:	91 1d       	adc	r25, r1
    23d8:	a3 9f       	mul	r26, r19
    23da:	90 0d       	add	r25, r0
    23dc:	b2 9f       	mul	r27, r18
    23de:	90 0d       	add	r25, r0
    23e0:	11 24       	eor	r1, r1
    23e2:	08 95       	ret

000023e4 <__udivmodhi4>:
    23e4:	aa 1b       	sub	r26, r26
    23e6:	bb 1b       	sub	r27, r27
    23e8:	51 e1       	ldi	r21, 0x11	; 17
    23ea:	07 c0       	rjmp	.+14     	; 0x23fa <__udivmodhi4_ep>

000023ec <__udivmodhi4_loop>:
    23ec:	aa 1f       	adc	r26, r26
    23ee:	bb 1f       	adc	r27, r27
    23f0:	a6 17       	cp	r26, r22
    23f2:	b7 07       	cpc	r27, r23
    23f4:	10 f0       	brcs	.+4      	; 0x23fa <__udivmodhi4_ep>
    23f6:	a6 1b       	sub	r26, r22
    23f8:	b7 0b       	sbc	r27, r23

000023fa <__udivmodhi4_ep>:
    23fa:	88 1f       	adc	r24, r24
    23fc:	99 1f       	adc	r25, r25
    23fe:	5a 95       	dec	r21
    2400:	a9 f7       	brne	.-22     	; 0x23ec <__udivmodhi4_loop>
    2402:	80 95       	com	r24
    2404:	90 95       	com	r25
    2406:	bc 01       	movw	r22, r24
    2408:	cd 01       	movw	r24, r26
    240a:	08 95       	ret

0000240c <__divmodhi4>:
    240c:	97 fb       	bst	r25, 7
    240e:	07 2e       	mov	r0, r23
    2410:	16 f4       	brtc	.+4      	; 0x2416 <__divmodhi4+0xa>
    2412:	00 94       	com	r0
    2414:	06 d0       	rcall	.+12     	; 0x2422 <__divmodhi4_neg1>
    2416:	77 fd       	sbrc	r23, 7
    2418:	08 d0       	rcall	.+16     	; 0x242a <__divmodhi4_neg2>
    241a:	e4 df       	rcall	.-56     	; 0x23e4 <__udivmodhi4>
    241c:	07 fc       	sbrc	r0, 7
    241e:	05 d0       	rcall	.+10     	; 0x242a <__divmodhi4_neg2>
    2420:	3e f4       	brtc	.+14     	; 0x2430 <__divmodhi4_exit>

00002422 <__divmodhi4_neg1>:
    2422:	90 95       	com	r25
    2424:	81 95       	neg	r24
    2426:	9f 4f       	sbci	r25, 0xFF	; 255
    2428:	08 95       	ret

0000242a <__divmodhi4_neg2>:
    242a:	70 95       	com	r23
    242c:	61 95       	neg	r22
    242e:	7f 4f       	sbci	r23, 0xFF	; 255

00002430 <__divmodhi4_exit>:
    2430:	08 95       	ret

00002432 <__udivmodsi4>:
    2432:	a1 e2       	ldi	r26, 0x21	; 33
    2434:	1a 2e       	mov	r1, r26
    2436:	aa 1b       	sub	r26, r26
    2438:	bb 1b       	sub	r27, r27
    243a:	fd 01       	movw	r30, r26
    243c:	0d c0       	rjmp	.+26     	; 0x2458 <__udivmodsi4_ep>

0000243e <__udivmodsi4_loop>:
    243e:	aa 1f       	adc	r26, r26
    2440:	bb 1f       	adc	r27, r27
    2442:	ee 1f       	adc	r30, r30
    2444:	ff 1f       	adc	r31, r31
    2446:	a2 17       	cp	r26, r18
    2448:	b3 07       	cpc	r27, r19
    244a:	e4 07       	cpc	r30, r20
    244c:	f5 07       	cpc	r31, r21
    244e:	20 f0       	brcs	.+8      	; 0x2458 <__udivmodsi4_ep>
    2450:	a2 1b       	sub	r26, r18
    2452:	b3 0b       	sbc	r27, r19
    2454:	e4 0b       	sbc	r30, r20
    2456:	f5 0b       	sbc	r31, r21

00002458 <__udivmodsi4_ep>:
    2458:	66 1f       	adc	r22, r22
    245a:	77 1f       	adc	r23, r23
    245c:	88 1f       	adc	r24, r24
    245e:	99 1f       	adc	r25, r25
    2460:	1a 94       	dec	r1
    2462:	69 f7       	brne	.-38     	; 0x243e <__udivmodsi4_loop>
    2464:	60 95       	com	r22
    2466:	70 95       	com	r23
    2468:	80 95       	com	r24
    246a:	90 95       	com	r25
    246c:	9b 01       	movw	r18, r22
    246e:	ac 01       	movw	r20, r24
    2470:	bd 01       	movw	r22, r26
    2472:	cf 01       	movw	r24, r30
    2474:	08 95       	ret

00002476 <__divmodsi4>:
    2476:	05 2e       	mov	r0, r21
    2478:	97 fb       	bst	r25, 7
    247a:	16 f4       	brtc	.+4      	; 0x2480 <__divmodsi4+0xa>
    247c:	00 94       	com	r0
    247e:	0f d0       	rcall	.+30     	; 0x249e <__negsi2>
    2480:	57 fd       	sbrc	r21, 7
    2482:	05 d0       	rcall	.+10     	; 0x248e <__divmodsi4_neg2>
    2484:	d6 df       	rcall	.-84     	; 0x2432 <__udivmodsi4>
    2486:	07 fc       	sbrc	r0, 7
    2488:	02 d0       	rcall	.+4      	; 0x248e <__divmodsi4_neg2>
    248a:	46 f4       	brtc	.+16     	; 0x249c <__divmodsi4_exit>
    248c:	08 c0       	rjmp	.+16     	; 0x249e <__negsi2>

0000248e <__divmodsi4_neg2>:
    248e:	50 95       	com	r21
    2490:	40 95       	com	r20
    2492:	30 95       	com	r19
    2494:	21 95       	neg	r18
    2496:	3f 4f       	sbci	r19, 0xFF	; 255
    2498:	4f 4f       	sbci	r20, 0xFF	; 255
    249a:	5f 4f       	sbci	r21, 0xFF	; 255

0000249c <__divmodsi4_exit>:
    249c:	08 95       	ret

0000249e <__negsi2>:
    249e:	90 95       	com	r25
    24a0:	80 95       	com	r24
    24a2:	70 95       	com	r23
    24a4:	61 95       	neg	r22
    24a6:	7f 4f       	sbci	r23, 0xFF	; 255
    24a8:	8f 4f       	sbci	r24, 0xFF	; 255
    24aa:	9f 4f       	sbci	r25, 0xFF	; 255
    24ac:	08 95       	ret

000024ae <__tablejump2__>:
    24ae:	ee 0f       	add	r30, r30
    24b0:	ff 1f       	adc	r31, r31
    24b2:	00 24       	eor	r0, r0
    24b4:	00 1c       	adc	r0, r0
    24b6:	0b be       	out	0x3b, r0	; 59
    24b8:	07 90       	elpm	r0, Z+
    24ba:	f6 91       	elpm	r31, Z
    24bc:	e0 2d       	mov	r30, r0
    24be:	09 94       	ijmp

000024c0 <__umulhisi3>:
    24c0:	a2 9f       	mul	r26, r18
    24c2:	b0 01       	movw	r22, r0
    24c4:	b3 9f       	mul	r27, r19
    24c6:	c0 01       	movw	r24, r0
    24c8:	a3 9f       	mul	r26, r19
    24ca:	70 0d       	add	r23, r0
    24cc:	81 1d       	adc	r24, r1
    24ce:	11 24       	eor	r1, r1
    24d0:	91 1d       	adc	r25, r1
    24d2:	b2 9f       	mul	r27, r18
    24d4:	70 0d       	add	r23, r0
    24d6:	81 1d       	adc	r24, r1
    24d8:	11 24       	eor	r1, r1
    24da:	91 1d       	adc	r25, r1
    24dc:	08 95       	ret

000024de <__muluhisi3>:
    24de:	f0 df       	rcall	.-32     	; 0x24c0 <__umulhisi3>
    24e0:	a5 9f       	mul	r26, r21
    24e2:	90 0d       	add	r25, r0
    24e4:	b4 9f       	mul	r27, r20
    24e6:	90 0d       	add	r25, r0
    24e8:	a4 9f       	mul	r26, r20
    24ea:	80 0d       	add	r24, r0
    24ec:	91 1d       	adc	r25, r1
    24ee:	11 24       	eor	r1, r1
    24f0:	08 95       	ret

000024f2 <strcmp>:
    24f2:	fb 01       	movw	r30, r22
    24f4:	dc 01       	movw	r26, r24
    24f6:	8d 91       	ld	r24, X+
    24f8:	01 90       	ld	r0, Z+
    24fa:	80 19       	sub	r24, r0
    24fc:	01 10       	cpse	r0, r1
    24fe:	d9 f3       	breq	.-10     	; 0x24f6 <strcmp+0x4>
    2500:	99 0b       	sbc	r25, r25
    2502:	08 95       	ret

00002504 <_exit>:
    2504:	f8 94       	cli

00002506 <__stop_program>:
    2506:	ff cf       	rjmp	.-2      	; 0x2506 <__stop_program>
