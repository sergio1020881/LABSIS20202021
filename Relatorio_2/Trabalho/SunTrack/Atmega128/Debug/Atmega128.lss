
Atmega128.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000088  00800100  000031c8  0000325c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000031c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000133  00800188  00800188  000032e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000032e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003314  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000006a0  00000000  00000000  00003350  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007b53  00000000  00000000  000039f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001c1c  00000000  00000000  0000b543  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000042f0  00000000  00000000  0000d15f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001334  00000000  00000000  00011450  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000161e  00000000  00000000  00012784  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000068a3  00000000  00000000  00013da2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000630  00000000  00000000  0001a645  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	67 c0       	rjmp	.+206    	; 0xd0 <__ctors_end>
       2:	00 00       	nop
       4:	84 c0       	rjmp	.+264    	; 0x10e <__bad_interrupt>
       6:	00 00       	nop
       8:	82 c0       	rjmp	.+260    	; 0x10e <__bad_interrupt>
       a:	00 00       	nop
       c:	80 c0       	rjmp	.+256    	; 0x10e <__bad_interrupt>
       e:	00 00       	nop
      10:	7e c0       	rjmp	.+252    	; 0x10e <__bad_interrupt>
      12:	00 00       	nop
      14:	7c c0       	rjmp	.+248    	; 0x10e <__bad_interrupt>
      16:	00 00       	nop
      18:	7a c0       	rjmp	.+244    	; 0x10e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	78 c0       	rjmp	.+240    	; 0x10e <__bad_interrupt>
      1e:	00 00       	nop
      20:	76 c0       	rjmp	.+236    	; 0x10e <__bad_interrupt>
      22:	00 00       	nop
      24:	74 c0       	rjmp	.+232    	; 0x10e <__bad_interrupt>
      26:	00 00       	nop
      28:	63 c3       	rjmp	.+1734   	; 0x6f0 <__vector_10>
      2a:	00 00       	nop
      2c:	2f c3       	rjmp	.+1630   	; 0x68c <__vector_11>
      2e:	00 00       	nop
      30:	37 c3       	rjmp	.+1646   	; 0x6a0 <__vector_12>
      32:	00 00       	nop
      34:	3f c3       	rjmp	.+1662   	; 0x6b4 <__vector_13>
      36:	00 00       	nop
      38:	51 c3       	rjmp	.+1698   	; 0x6dc <__vector_14>
      3a:	00 00       	nop
      3c:	68 c0       	rjmp	.+208    	; 0x10e <__bad_interrupt>
      3e:	00 00       	nop
      40:	1b c3       	rjmp	.+1590   	; 0x678 <__vector_16>
      42:	00 00       	nop
      44:	64 c0       	rjmp	.+200    	; 0x10e <__bad_interrupt>
      46:	00 00       	nop
      48:	8f c3       	rjmp	.+1822   	; 0x768 <__vector_18>
      4a:	00 00       	nop
      4c:	c5 c3       	rjmp	.+1930   	; 0x7d8 <__vector_19>
      4e:	00 00       	nop
      50:	5e c0       	rjmp	.+188    	; 0x10e <__bad_interrupt>
      52:	00 00       	nop
      54:	fd c0       	rjmp	.+506    	; 0x250 <__vector_21>
      56:	00 00       	nop
      58:	5a c0       	rjmp	.+180    	; 0x10e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	58 c0       	rjmp	.+176    	; 0x10e <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c3       	rjmp	.+1638   	; 0x6c8 <__vector_24>
      62:	00 00       	nop
      64:	4f c3       	rjmp	.+1694   	; 0x704 <__vector_25>
      66:	00 00       	nop
      68:	57 c3       	rjmp	.+1710   	; 0x718 <__vector_26>
      6a:	00 00       	nop
      6c:	5f c3       	rjmp	.+1726   	; 0x72c <__vector_27>
      6e:	00 00       	nop
      70:	67 c3       	rjmp	.+1742   	; 0x740 <__vector_28>
      72:	00 00       	nop
      74:	6f c3       	rjmp	.+1758   	; 0x754 <__vector_29>
      76:	00 00       	nop
      78:	d8 c3       	rjmp	.+1968   	; 0x82a <__vector_30>
      7a:	00 00       	nop
      7c:	11 c4       	rjmp	.+2082   	; 0x8a0 <__vector_31>
      7e:	00 00       	nop
      80:	46 c0       	rjmp	.+140    	; 0x10e <__bad_interrupt>
      82:	00 00       	nop
      84:	44 c0       	rjmp	.+136    	; 0x10e <__bad_interrupt>
      86:	00 00       	nop
      88:	42 c0       	rjmp	.+132    	; 0x10e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	5d 02       	muls	r21, r29
      8e:	61 02       	muls	r22, r17
      90:	65 02       	muls	r22, r21
      92:	69 02       	muls	r22, r25
      94:	6d 02       	muls	r22, r29
      96:	74 02       	muls	r23, r20
      98:	7b 02       	muls	r23, r27
      9a:	82 02       	muls	r24, r18
      9c:	86 02       	muls	r24, r22
      9e:	8d 02       	muls	r24, r29
      a0:	94 02       	muls	r25, r20
      a2:	9b 02       	muls	r25, r27
      a4:	9f 02       	muls	r25, r31
      a6:	a6 02       	muls	r26, r22
      a8:	ad 02       	muls	r26, r29
      aa:	c9 02       	muls	r28, r25
      ac:	cd 02       	muls	r28, r29
      ae:	d1 02       	muls	r29, r17
      b0:	d5 02       	muls	r29, r21
      b2:	db 02       	muls	r29, r27
      b4:	df 02       	muls	r29, r31
      b6:	e3 02       	muls	r30, r19
      b8:	e7 02       	muls	r30, r23
      ba:	f0 02       	muls	r31, r16
      bc:	f4 02       	muls	r31, r20
      be:	f8 02       	muls	r31, r24
      c0:	01 03       	mulsu	r16, r17
      c2:	e4 14       	cp	r14, r4
      c4:	db 15       	cp	r29, r11
      c6:	3e 16       	cp	r3, r30
      c8:	a1 16       	cp	r10, r17
      ca:	04 17       	cp	r16, r20
      cc:	67 17       	cp	r22, r23
      ce:	ca 17       	cp	r28, r26

000000d0 <__ctors_end>:
      d0:	11 24       	eor	r1, r1
      d2:	1f be       	out	0x3f, r1	; 63
      d4:	cf ef       	ldi	r28, 0xFF	; 255
      d6:	d0 e1       	ldi	r29, 0x10	; 16
      d8:	de bf       	out	0x3e, r29	; 62
      da:	cd bf       	out	0x3d, r28	; 61

000000dc <__do_copy_data>:
      dc:	11 e0       	ldi	r17, 0x01	; 1
      de:	a0 e0       	ldi	r26, 0x00	; 0
      e0:	b1 e0       	ldi	r27, 0x01	; 1
      e2:	e8 ec       	ldi	r30, 0xC8	; 200
      e4:	f1 e3       	ldi	r31, 0x31	; 49
      e6:	00 e0       	ldi	r16, 0x00	; 0
      e8:	0b bf       	out	0x3b, r16	; 59
      ea:	02 c0       	rjmp	.+4      	; 0xf0 <__do_copy_data+0x14>
      ec:	07 90       	elpm	r0, Z+
      ee:	0d 92       	st	X+, r0
      f0:	a8 38       	cpi	r26, 0x88	; 136
      f2:	b1 07       	cpc	r27, r17
      f4:	d9 f7       	brne	.-10     	; 0xec <__do_copy_data+0x10>

000000f6 <__do_clear_bss>:
      f6:	22 e0       	ldi	r18, 0x02	; 2
      f8:	a8 e8       	ldi	r26, 0x88	; 136
      fa:	b1 e0       	ldi	r27, 0x01	; 1
      fc:	01 c0       	rjmp	.+2      	; 0x100 <.do_clear_bss_start>

000000fe <.do_clear_bss_loop>:
      fe:	1d 92       	st	X+, r1

00000100 <.do_clear_bss_start>:
     100:	ab 3b       	cpi	r26, 0xBB	; 187
     102:	b2 07       	cpc	r27, r18
     104:	e1 f7       	brne	.-8      	; 0xfe <.do_clear_bss_loop>
     106:	0e 94 ed 10 	call	0x21da	; 0x21da <main>
     10a:	0c 94 e2 18 	jmp	0x31c4	; 0x31c4 <_exit>

0000010e <__bad_interrupt>:
     10e:	78 cf       	rjmp	.-272    	; 0x0 <__vectors>

00000110 <ANALOG_read>:
* Returns selected Channel ADC_VALUE
*/
{
	uint8_t ADSC_FLAG;
	ADSC_FLAG=(1<<ADSC);
	if( !(ADC_CONTROL & ADSC_FLAG) ){
     110:	36 9b       	sbis	0x06, 6	; 6
		//ADC_SELECT
		/***/
		ADC_CONTROL|=(1<<ADSC);
     112:	36 9a       	sbi	0x06, 6	; 6
	}	
	return ADC_VALUE[selection];
     114:	fc 01       	movw	r30, r24
     116:	ee 0f       	add	r30, r30
     118:	ff 1f       	adc	r31, r31
     11a:	ef 55       	subi	r30, 0x5F	; 95
     11c:	fe 4f       	sbci	r31, 0xFE	; 254
     11e:	80 81       	ld	r24, Z
     120:	91 81       	ldd	r25, Z+1	; 0x01
}
     122:	08 95       	ret

00000124 <ANALOGenable>:
ANALOG ANALOGenable( uint8_t Vreff, uint8_t Divfactor, int n_channel, ... )
/*
* Interrupt running mode setup
* setup, and list of channels to be probed
*/
{
     124:	0f 93       	push	r16
     126:	1f 93       	push	r17
     128:	cf 93       	push	r28
     12a:	df 93       	push	r29
     12c:	cd b7       	in	r28, 0x3d	; 61
     12e:	de b7       	in	r29, 0x3e	; 62
     130:	9f 81       	ldd	r25, Y+7	; 0x07
     132:	68 85       	ldd	r22, Y+8	; 0x08
     134:	49 85       	ldd	r20, Y+9	; 0x09
     136:	5a 85       	ldd	r21, Y+10	; 0x0a
	/***LOCAL VARIABLES***/
	uint8_t tSREG;
	va_list list;
	int i;
	//inic variables
	tSREG=SREG;
     138:	1f b7       	in	r17, 0x3f	; 63
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
     13a:	8f b7       	in	r24, 0x3f	; 63
     13c:	8f 77       	andi	r24, 0x7F	; 127
     13e:	8f bf       	out	0x3f, r24	; 63
	/***GLOBAL VARIABLES INICIALIZE***/
	ADC_N_CHANNEL=n_channel;
     140:	50 93 90 01 	sts	0x0190, r21	; 0x800190 <ADC_N_CHANNEL+0x1>
     144:	40 93 8f 01 	sts	0x018F, r20	; 0x80018f <ADC_N_CHANNEL>
	ADC_SELECTOR=0;
     148:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <ADC_SELECTOR+0x1>
     14c:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <ADC_SELECTOR>
	adc_n_sample=0;
     150:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <__data_end>
	//import parametros
	//inic parameters
	//Direccionar apontadores para PROTOTIPOS
	analog.read=ANALOG_read;
		/******/
		ADC_SELECT&=~(3<<REFS0);
     154:	87 b1       	in	r24, 0x07	; 7
     156:	8f 73       	andi	r24, 0x3F	; 63
     158:	87 b9       	out	0x07, r24	; 7
		switch( Vreff ){
     15a:	91 30       	cpi	r25, 0x01	; 1
     15c:	19 f0       	breq	.+6      	; 0x164 <ANALOGenable+0x40>
     15e:	93 30       	cpi	r25, 0x03	; 3
     160:	21 f0       	breq	.+8      	; 0x16a <ANALOGenable+0x46>
     162:	08 c0       	rjmp	.+16     	; 0x174 <ANALOGenable+0x50>
			case 0:
				analog.VREFF=0;
				break;
			case 1:
				ADC_SELECT|=(1<<REFS0);
     164:	3e 9a       	sbi	0x07, 6	; 7
				analog.VREFF=1;
     166:	01 e0       	ldi	r16, 0x01	; 1
				break;
     168:	06 c0       	rjmp	.+12     	; 0x176 <ANALOGenable+0x52>
			case 3:
				ADC_SELECT|=(3<<REFS0);
     16a:	87 b1       	in	r24, 0x07	; 7
     16c:	80 6c       	ori	r24, 0xC0	; 192
     16e:	87 b9       	out	0x07, r24	; 7
				analog.VREFF=3;
     170:	03 e0       	ldi	r16, 0x03	; 3
				break;
     172:	01 c0       	rjmp	.+2      	; 0x176 <ANALOGenable+0x52>
	analog.read=ANALOG_read;
		/******/
		ADC_SELECT&=~(3<<REFS0);
		switch( Vreff ){
			case 0:
				analog.VREFF=0;
     174:	00 e0       	ldi	r16, 0x00	; 0
			default:
				analog.VREFF=0;
				break;
		}
		//
		ADC_SELECT&=~(1<<ADLAR);
     176:	3d 98       	cbi	0x07, 5	; 7
		/******/
		va_start(list, n_channel);
		for(i=0;i<n_channel;i++){
     178:	14 16       	cp	r1, r20
     17a:	15 06       	cpc	r1, r21
     17c:	8c f4       	brge	.+34     	; 0x1a0 <ANALOGenable+0x7c>
     17e:	de 01       	movw	r26, r28
     180:	1b 96       	adiw	r26, 0x0b	; 11
     182:	80 e0       	ldi	r24, 0x00	; 0
     184:	90 e0       	ldi	r25, 0x00	; 0
			ADC_CHANNEL_GAIN[i] = va_arg(list, int);
     186:	2d 91       	ld	r18, X+
     188:	3d 91       	ld	r19, X+
     18a:	fc 01       	movw	r30, r24
     18c:	ee 0f       	add	r30, r30
     18e:	ff 1f       	adc	r31, r31
     190:	ef 56       	subi	r30, 0x6F	; 111
     192:	fe 4f       	sbci	r31, 0xFE	; 254
     194:	31 83       	std	Z+1, r19	; 0x01
     196:	20 83       	st	Z, r18
		}
		//
		ADC_SELECT&=~(1<<ADLAR);
		/******/
		va_start(list, n_channel);
		for(i=0;i<n_channel;i++){
     198:	01 96       	adiw	r24, 0x01	; 1
     19a:	48 17       	cp	r20, r24
     19c:	59 07       	cpc	r21, r25
     19e:	99 f7       	brne	.-26     	; 0x186 <ANALOGenable+0x62>
			ADC_CHANNEL_GAIN[i] = va_arg(list, int);
		}
		va_end(list);
		ADC_SELECT&=~MUX_MASK;
     1a0:	87 b1       	in	r24, 0x07	; 7
     1a2:	80 7e       	andi	r24, 0xE0	; 224
     1a4:	87 b9       	out	0x07, r24	; 7
		ADC_SELECT|=(MUX_MASK & ADC_CHANNEL_GAIN[ADC_SELECTOR]);
     1a6:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <ADC_SELECTOR>
     1aa:	f0 91 8e 01 	lds	r31, 0x018E	; 0x80018e <ADC_SELECTOR+0x1>
     1ae:	ee 0f       	add	r30, r30
     1b0:	ff 1f       	adc	r31, r31
     1b2:	ef 56       	subi	r30, 0x6F	; 111
     1b4:	fe 4f       	sbci	r31, 0xFE	; 254
     1b6:	80 81       	ld	r24, Z
     1b8:	91 81       	ldd	r25, Z+1	; 0x01
     1ba:	27 b1       	in	r18, 0x07	; 7
     1bc:	8f 71       	andi	r24, 0x1F	; 31
     1be:	99 27       	eor	r25, r25
     1c0:	82 2b       	or	r24, r18
     1c2:	87 b9       	out	0x07, r24	; 7
		/******/
		ADC_CONTROL|=(1<<ADEN);
     1c4:	37 9a       	sbi	0x06, 7	; 6
		ADC_CONTROL|=(1<<ADSC);
     1c6:	36 9a       	sbi	0x06, 6	; 6
		ADC_CONTROL&=~(1<<ADFR);
     1c8:	35 98       	cbi	0x06, 5	; 6
		ADC_CONTROL|=(1<<ADIE);
     1ca:	33 9a       	sbi	0x06, 3	; 6
		/******/
		ADC_CONTROL&=~(7<<ADPS0);
     1cc:	86 b1       	in	r24, 0x06	; 6
     1ce:	88 7f       	andi	r24, 0xF8	; 248
     1d0:	86 b9       	out	0x06, r24	; 6
		switch( Divfactor ){
     1d2:	60 31       	cpi	r22, 0x10	; 16
     1d4:	d1 f0       	breq	.+52     	; 0x20a <ANALOGenable+0xe6>
     1d6:	38 f4       	brcc	.+14     	; 0x1e6 <ANALOGenable+0xc2>
     1d8:	64 30       	cpi	r22, 0x04	; 4
     1da:	79 f0       	breq	.+30     	; 0x1fa <ANALOGenable+0xd6>
     1dc:	68 30       	cpi	r22, 0x08	; 8
     1de:	81 f0       	breq	.+32     	; 0x200 <ANALOGenable+0xdc>
     1e0:	62 30       	cpi	r22, 0x02	; 2
     1e2:	29 f5       	brne	.+74     	; 0x22e <ANALOGenable+0x10a>
     1e4:	07 c0       	rjmp	.+14     	; 0x1f4 <ANALOGenable+0xd0>
     1e6:	60 34       	cpi	r22, 0x40	; 64
     1e8:	c1 f0       	breq	.+48     	; 0x21a <ANALOGenable+0xf6>
     1ea:	60 38       	cpi	r22, 0x80	; 128
     1ec:	d9 f0       	breq	.+54     	; 0x224 <ANALOGenable+0x100>
     1ee:	60 32       	cpi	r22, 0x20	; 32
     1f0:	f1 f4       	brne	.+60     	; 0x22e <ANALOGenable+0x10a>
     1f2:	0e c0       	rjmp	.+28     	; 0x210 <ANALOGenable+0xec>
			case 2://1
				ADC_CONTROL|=(1<<ADPS0);
     1f4:	30 9a       	sbi	0x06, 0	; 6
				analog.DIVISION_FACTOR=2;
     1f6:	22 e0       	ldi	r18, 0x02	; 2
				break;
     1f8:	1e c0       	rjmp	.+60     	; 0x236 <ANALOGenable+0x112>
			case 4://2
				ADC_CONTROL|=(1<<ADPS1);
     1fa:	31 9a       	sbi	0x06, 1	; 6
				analog.DIVISION_FACTOR=4;
     1fc:	24 e0       	ldi	r18, 0x04	; 4
				break;
     1fe:	1b c0       	rjmp	.+54     	; 0x236 <ANALOGenable+0x112>
			case 8://3
				ADC_CONTROL|=(3<<ADPS0);
     200:	86 b1       	in	r24, 0x06	; 6
     202:	83 60       	ori	r24, 0x03	; 3
     204:	86 b9       	out	0x06, r24	; 6
				analog.DIVISION_FACTOR=8;
     206:	28 e0       	ldi	r18, 0x08	; 8
				break;
     208:	16 c0       	rjmp	.+44     	; 0x236 <ANALOGenable+0x112>
			case 16://4
				ADC_CONTROL|=(1<<ADPS2);
     20a:	32 9a       	sbi	0x06, 2	; 6
				analog.DIVISION_FACTOR=16;
     20c:	20 e1       	ldi	r18, 0x10	; 16
				break;
     20e:	13 c0       	rjmp	.+38     	; 0x236 <ANALOGenable+0x112>
			case 32://5
				ADC_CONTROL|=(5<<ADPS0);
     210:	86 b1       	in	r24, 0x06	; 6
     212:	85 60       	ori	r24, 0x05	; 5
     214:	86 b9       	out	0x06, r24	; 6
				analog.DIVISION_FACTOR=32;
     216:	20 e2       	ldi	r18, 0x20	; 32
				break;
     218:	0e c0       	rjmp	.+28     	; 0x236 <ANALOGenable+0x112>
			case 64://6
				ADC_CONTROL|=(6<<ADPS0);
     21a:	86 b1       	in	r24, 0x06	; 6
     21c:	86 60       	ori	r24, 0x06	; 6
     21e:	86 b9       	out	0x06, r24	; 6
				analog.DIVISION_FACTOR=64;
     220:	20 e4       	ldi	r18, 0x40	; 64
				break;
     222:	09 c0       	rjmp	.+18     	; 0x236 <ANALOGenable+0x112>
			case 128://7
				ADC_CONTROL|=(7<<ADPS0);
     224:	86 b1       	in	r24, 0x06	; 6
     226:	87 60       	ori	r24, 0x07	; 7
     228:	86 b9       	out	0x06, r24	; 6
				analog.DIVISION_FACTOR=128;
     22a:	20 e8       	ldi	r18, 0x80	; 128
				break;
     22c:	04 c0       	rjmp	.+8      	; 0x236 <ANALOGenable+0x112>
			default:
				ADC_CONTROL|=(7<<ADPS0);
     22e:	86 b1       	in	r24, 0x06	; 6
     230:	87 60       	ori	r24, 0x07	; 7
     232:	86 b9       	out	0x06, r24	; 6
				analog.DIVISION_FACTOR=128;
     234:	20 e8       	ldi	r18, 0x80	; 128
				break;
		}		
		
	SREG=tSREG;
     236:	1f bf       	out	0x3f, r17	; 63
	SREG|=(1<<GLOBAL_INTERRUPT_ENABLE);
     238:	8f b7       	in	r24, 0x3f	; 63
     23a:	80 68       	ori	r24, 0x80	; 128
     23c:	8f bf       	out	0x3f, r24	; 63
	/******/
	return analog;
     23e:	60 2f       	mov	r22, r16
     240:	72 2f       	mov	r23, r18
     242:	88 e8       	ldi	r24, 0x88	; 136
     244:	90 e0       	ldi	r25, 0x00	; 0
}
     246:	df 91       	pop	r29
     248:	cf 91       	pop	r28
     24a:	1f 91       	pop	r17
     24c:	0f 91       	pop	r16
     24e:	08 95       	ret

00000250 <__vector_21>:
ISR(ANALOG_INTERRUPT)
/*************************************************************************
Function: ANALOG interrupt
Purpose:  Read Analog Input
**************************************************************************/
{
     250:	1f 92       	push	r1
     252:	0f 92       	push	r0
     254:	0f b6       	in	r0, 0x3f	; 63
     256:	0f 92       	push	r0
     258:	11 24       	eor	r1, r1
     25a:	0b b6       	in	r0, 0x3b	; 59
     25c:	0f 92       	push	r0
     25e:	2f 93       	push	r18
     260:	3f 93       	push	r19
     262:	8f 93       	push	r24
     264:	9f 93       	push	r25
     266:	ef 93       	push	r30
     268:	ff 93       	push	r31
	adc_tmp=ADCL;
     26a:	84 b1       	in	r24, 0x04	; 4
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <adc_tmp+0x1>
     272:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <adc_tmp>
	adc_tmp|=(ADCH<<8);
     276:	25 b1       	in	r18, 0x05	; 5
     278:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <adc_tmp>
     27c:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <adc_tmp+0x1>
     280:	92 2b       	or	r25, r18
     282:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <adc_tmp+0x1>
     286:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <adc_tmp>
	if(adc_n_sample < (1<<ADC_NUMBER_SAMPLE)){
     28a:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <__data_end>
     28e:	84 30       	cpi	r24, 0x04	; 4
     290:	a0 f4       	brcc	.+40     	; 0x2ba <__vector_21+0x6a>
		adc_n_sample++;
     292:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <__data_end>
     296:	8f 5f       	subi	r24, 0xFF	; 255
     298:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <__data_end>
		adc_sample+=adc_tmp;
     29c:	20 91 89 01 	lds	r18, 0x0189	; 0x800189 <adc_tmp>
     2a0:	30 91 8a 01 	lds	r19, 0x018A	; 0x80018a <adc_tmp+0x1>
     2a4:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <adc_sample>
     2a8:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <adc_sample+0x1>
     2ac:	82 0f       	add	r24, r18
     2ae:	93 1f       	adc	r25, r19
     2b0:	90 93 8c 01 	sts	0x018C, r25	; 0x80018c <adc_sample+0x1>
     2b4:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <adc_sample>
     2b8:	43 c0       	rjmp	.+134    	; 0x340 <__vector_21+0xf0>
	}else{
		ADC_VALUE[ADC_SELECTOR]=adc_sample>>ADC_NUMBER_SAMPLE;
     2ba:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <ADC_SELECTOR>
     2be:	f0 91 8e 01 	lds	r31, 0x018E	; 0x80018e <ADC_SELECTOR+0x1>
     2c2:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <adc_sample>
     2c6:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <adc_sample+0x1>
     2ca:	95 95       	asr	r25
     2cc:	87 95       	ror	r24
     2ce:	95 95       	asr	r25
     2d0:	87 95       	ror	r24
     2d2:	ee 0f       	add	r30, r30
     2d4:	ff 1f       	adc	r31, r31
     2d6:	ef 55       	subi	r30, 0x5F	; 95
     2d8:	fe 4f       	sbci	r31, 0xFE	; 254
     2da:	91 83       	std	Z+1, r25	; 0x01
     2dc:	80 83       	st	Z, r24
		adc_n_sample=adc_sample=0;
     2de:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <adc_sample+0x1>
     2e2:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <adc_sample>
     2e6:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <__data_end>
		/******/
		if(ADC_SELECTOR < ADC_N_CHANNEL)
     2ea:	20 91 8d 01 	lds	r18, 0x018D	; 0x80018d <ADC_SELECTOR>
     2ee:	30 91 8e 01 	lds	r19, 0x018E	; 0x80018e <ADC_SELECTOR+0x1>
     2f2:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <ADC_N_CHANNEL>
     2f6:	90 91 90 01 	lds	r25, 0x0190	; 0x800190 <ADC_N_CHANNEL+0x1>
     2fa:	28 17       	cp	r18, r24
     2fc:	39 07       	cpc	r19, r25
     2fe:	54 f4       	brge	.+20     	; 0x314 <__vector_21+0xc4>
			ADC_SELECTOR++;
     300:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <ADC_SELECTOR>
     304:	90 91 8e 01 	lds	r25, 0x018E	; 0x80018e <ADC_SELECTOR+0x1>
     308:	01 96       	adiw	r24, 0x01	; 1
     30a:	90 93 8e 01 	sts	0x018E, r25	; 0x80018e <ADC_SELECTOR+0x1>
     30e:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <ADC_SELECTOR>
     312:	04 c0       	rjmp	.+8      	; 0x31c <__vector_21+0xcc>
		else
			ADC_SELECTOR=0;
     314:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <ADC_SELECTOR+0x1>
     318:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <ADC_SELECTOR>
		ADC_SELECT &= ~MUX_MASK;
     31c:	87 b1       	in	r24, 0x07	; 7
     31e:	80 7e       	andi	r24, 0xE0	; 224
     320:	87 b9       	out	0x07, r24	; 7
		ADC_SELECT |= (ADC_CHANNEL_GAIN[ADC_SELECTOR] & MUX_MASK);
     322:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <ADC_SELECTOR>
     326:	f0 91 8e 01 	lds	r31, 0x018E	; 0x80018e <ADC_SELECTOR+0x1>
     32a:	ee 0f       	add	r30, r30
     32c:	ff 1f       	adc	r31, r31
     32e:	ef 56       	subi	r30, 0x6F	; 111
     330:	fe 4f       	sbci	r31, 0xFE	; 254
     332:	80 81       	ld	r24, Z
     334:	91 81       	ldd	r25, Z+1	; 0x01
     336:	27 b1       	in	r18, 0x07	; 7
     338:	8f 71       	andi	r24, 0x1F	; 31
     33a:	99 27       	eor	r25, r25
     33c:	82 2b       	or	r24, r18
     33e:	87 b9       	out	0x07, r24	; 7
	}		
}
     340:	ff 91       	pop	r31
     342:	ef 91       	pop	r30
     344:	9f 91       	pop	r25
     346:	8f 91       	pop	r24
     348:	3f 91       	pop	r19
     34a:	2f 91       	pop	r18
     34c:	0f 90       	pop	r0
     34e:	0b be       	out	0x3b, r0	; 59
     350:	0f 90       	pop	r0
     352:	0f be       	out	0x3f, r0	; 63
     354:	0f 90       	pop	r0
     356:	1f 90       	pop	r1
     358:	18 95       	reti

0000035a <TIMER_COUNTER1_start>:
		timer3.compareC=TIMER_COUNTER3_compareC;
		timer3.start=TIMER_COUNTER3_start;
		timer3.stop=TIMER_COUNTER3_stop;
		//
		return timer3;
	}
     35a:	20 91 3b 02 	lds	r18, 0x023B	; 0x80023b <timer1_state>
     35e:	21 11       	cpse	r18, r1
     360:	42 c0       	rjmp	.+132    	; 0x3e6 <TIMER_COUNTER1_start+0x8c>
     362:	2f ef       	ldi	r18, 0xFF	; 255
     364:	3f ef       	ldi	r19, 0xFF	; 255
     366:	3b bd       	out	0x2b, r19	; 43
     368:	2a bd       	out	0x2a, r18	; 42
     36a:	2e b5       	in	r18, 0x2e	; 46
     36c:	28 7f       	andi	r18, 0xF8	; 248
     36e:	2e bd       	out	0x2e, r18	; 46
     370:	88 30       	cpi	r24, 0x08	; 8
     372:	91 05       	cpc	r25, r1
     374:	d1 f0       	breq	.+52     	; 0x3aa <TIMER_COUNTER1_start+0x50>
     376:	48 f4       	brcc	.+18     	; 0x38a <TIMER_COUNTER1_start+0x30>
     378:	83 30       	cpi	r24, 0x03	; 3
     37a:	91 05       	cpc	r25, r1
     37c:	31 f1       	breq	.+76     	; 0x3ca <TIMER_COUNTER1_start+0x70>
     37e:	85 30       	cpi	r24, 0x05	; 5
     380:	91 05       	cpc	r25, r1
     382:	39 f1       	breq	.+78     	; 0x3d2 <TIMER_COUNTER1_start+0x78>
     384:	01 97       	sbiw	r24, 0x01	; 1
     386:	49 f5       	brne	.+82     	; 0x3da <TIMER_COUNTER1_start+0x80>
     388:	0c c0       	rjmp	.+24     	; 0x3a2 <TIMER_COUNTER1_start+0x48>
     38a:	81 15       	cp	r24, r1
     38c:	21 e0       	ldi	r18, 0x01	; 1
     38e:	92 07       	cpc	r25, r18
     390:	a1 f0       	breq	.+40     	; 0x3ba <TIMER_COUNTER1_start+0x60>
     392:	81 15       	cp	r24, r1
     394:	24 e0       	ldi	r18, 0x04	; 4
     396:	92 07       	cpc	r25, r18
     398:	a1 f0       	breq	.+40     	; 0x3c2 <TIMER_COUNTER1_start+0x68>
     39a:	80 34       	cpi	r24, 0x40	; 64
     39c:	91 05       	cpc	r25, r1
     39e:	e9 f4       	brne	.+58     	; 0x3da <TIMER_COUNTER1_start+0x80>
     3a0:	08 c0       	rjmp	.+16     	; 0x3b2 <TIMER_COUNTER1_start+0x58>
     3a2:	8e b5       	in	r24, 0x2e	; 46
     3a4:	81 60       	ori	r24, 0x01	; 1
     3a6:	8e bd       	out	0x2e, r24	; 46
     3a8:	1b c0       	rjmp	.+54     	; 0x3e0 <TIMER_COUNTER1_start+0x86>
     3aa:	8e b5       	in	r24, 0x2e	; 46
     3ac:	82 60       	ori	r24, 0x02	; 2
     3ae:	8e bd       	out	0x2e, r24	; 46
     3b0:	17 c0       	rjmp	.+46     	; 0x3e0 <TIMER_COUNTER1_start+0x86>
     3b2:	8e b5       	in	r24, 0x2e	; 46
     3b4:	83 60       	ori	r24, 0x03	; 3
     3b6:	8e bd       	out	0x2e, r24	; 46
     3b8:	13 c0       	rjmp	.+38     	; 0x3e0 <TIMER_COUNTER1_start+0x86>
     3ba:	8e b5       	in	r24, 0x2e	; 46
     3bc:	84 60       	ori	r24, 0x04	; 4
     3be:	8e bd       	out	0x2e, r24	; 46
     3c0:	0f c0       	rjmp	.+30     	; 0x3e0 <TIMER_COUNTER1_start+0x86>
     3c2:	8e b5       	in	r24, 0x2e	; 46
     3c4:	85 60       	ori	r24, 0x05	; 5
     3c6:	8e bd       	out	0x2e, r24	; 46
     3c8:	0b c0       	rjmp	.+22     	; 0x3e0 <TIMER_COUNTER1_start+0x86>
     3ca:	8e b5       	in	r24, 0x2e	; 46
     3cc:	86 60       	ori	r24, 0x06	; 6
     3ce:	8e bd       	out	0x2e, r24	; 46
     3d0:	07 c0       	rjmp	.+14     	; 0x3e0 <TIMER_COUNTER1_start+0x86>
     3d2:	8e b5       	in	r24, 0x2e	; 46
     3d4:	87 60       	ori	r24, 0x07	; 7
     3d6:	8e bd       	out	0x2e, r24	; 46
     3d8:	03 c0       	rjmp	.+6      	; 0x3e0 <TIMER_COUNTER1_start+0x86>
     3da:	8e b5       	in	r24, 0x2e	; 46
     3dc:	85 60       	ori	r24, 0x05	; 5
     3de:	8e bd       	out	0x2e, r24	; 46
     3e0:	81 e0       	ldi	r24, 0x01	; 1
     3e2:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <timer1_state>
     3e6:	08 95       	ret

000003e8 <TIMER_COUNTER1_compoutmodeA>:
     3e8:	9f b5       	in	r25, 0x2f	; 47
     3ea:	9f 73       	andi	r25, 0x3F	; 63
     3ec:	9f bd       	out	0x2f, r25	; 47
     3ee:	82 30       	cpi	r24, 0x02	; 2
     3f0:	41 f0       	breq	.+16     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     3f2:	83 30       	cpi	r24, 0x03	; 3
     3f4:	51 f0       	breq	.+20     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     3f6:	81 30       	cpi	r24, 0x01	; 1
     3f8:	59 f4       	brne	.+22     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     3fa:	8f b5       	in	r24, 0x2f	; 47
     3fc:	80 64       	ori	r24, 0x40	; 64
     3fe:	8f bd       	out	0x2f, r24	; 47
     400:	08 95       	ret
     402:	8f b5       	in	r24, 0x2f	; 47
     404:	80 68       	ori	r24, 0x80	; 128
     406:	8f bd       	out	0x2f, r24	; 47
     408:	08 95       	ret
     40a:	8f b5       	in	r24, 0x2f	; 47
     40c:	80 6c       	ori	r24, 0xC0	; 192
     40e:	8f bd       	out	0x2f, r24	; 47
     410:	08 95       	ret

00000412 <TIMER_COUNTER1_compoutmodeB>:
     412:	9f b5       	in	r25, 0x2f	; 47
     414:	9f 7c       	andi	r25, 0xCF	; 207
     416:	9f bd       	out	0x2f, r25	; 47
     418:	82 30       	cpi	r24, 0x02	; 2
     41a:	41 f0       	breq	.+16     	; 0x42c <TIMER_COUNTER1_compoutmodeB+0x1a>
     41c:	83 30       	cpi	r24, 0x03	; 3
     41e:	51 f0       	breq	.+20     	; 0x434 <TIMER_COUNTER1_compoutmodeB+0x22>
     420:	81 30       	cpi	r24, 0x01	; 1
     422:	59 f4       	brne	.+22     	; 0x43a <TIMER_COUNTER1_compoutmodeB+0x28>
     424:	8f b5       	in	r24, 0x2f	; 47
     426:	80 61       	ori	r24, 0x10	; 16
     428:	8f bd       	out	0x2f, r24	; 47
     42a:	08 95       	ret
     42c:	8f b5       	in	r24, 0x2f	; 47
     42e:	80 62       	ori	r24, 0x20	; 32
     430:	8f bd       	out	0x2f, r24	; 47
     432:	08 95       	ret
     434:	8f b5       	in	r24, 0x2f	; 47
     436:	80 63       	ori	r24, 0x30	; 48
     438:	8f bd       	out	0x2f, r24	; 47
     43a:	08 95       	ret

0000043c <TIMER_COUNTER1_compoutmodeC>:
     43c:	9f b5       	in	r25, 0x2f	; 47
     43e:	93 7f       	andi	r25, 0xF3	; 243
     440:	9f bd       	out	0x2f, r25	; 47
     442:	82 30       	cpi	r24, 0x02	; 2
     444:	41 f0       	breq	.+16     	; 0x456 <TIMER_COUNTER1_compoutmodeC+0x1a>
     446:	83 30       	cpi	r24, 0x03	; 3
     448:	51 f0       	breq	.+20     	; 0x45e <TIMER_COUNTER1_compoutmodeC+0x22>
     44a:	81 30       	cpi	r24, 0x01	; 1
     44c:	59 f4       	brne	.+22     	; 0x464 <TIMER_COUNTER1_compoutmodeC+0x28>
     44e:	8f b5       	in	r24, 0x2f	; 47
     450:	84 60       	ori	r24, 0x04	; 4
     452:	8f bd       	out	0x2f, r24	; 47
     454:	08 95       	ret
     456:	8f b5       	in	r24, 0x2f	; 47
     458:	88 60       	ori	r24, 0x08	; 8
     45a:	8f bd       	out	0x2f, r24	; 47
     45c:	08 95       	ret
     45e:	8f b5       	in	r24, 0x2f	; 47
     460:	8c 60       	ori	r24, 0x0C	; 12
     462:	8f bd       	out	0x2f, r24	; 47
     464:	08 95       	ret

00000466 <TIMER_COUNTER1_compareA>:
     466:	9b bd       	out	0x2b, r25	; 43
     468:	8a bd       	out	0x2a, r24	; 42
     46a:	08 95       	ret

0000046c <TIMER_COUNTER1_compareB>:
     46c:	99 bd       	out	0x29, r25	; 41
     46e:	88 bd       	out	0x28, r24	; 40
     470:	08 95       	ret

00000472 <TIMER_COUNTER1_compareC>:
     472:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     476:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     47a:	08 95       	ret

0000047c <TIMER_COUNTER1_stop>:
     47c:	8e b5       	in	r24, 0x2e	; 46
     47e:	88 7f       	andi	r24, 0xF8	; 248
     480:	8e bd       	out	0x2e, r24	; 46
     482:	1d bc       	out	0x2d, r1	; 45
     484:	1c bc       	out	0x2c, r1	; 44
     486:	10 92 3b 02 	sts	0x023B, r1	; 0x80023b <timer1_state>
     48a:	08 95       	ret

0000048c <TIMER_COUNTER1enable>:
     48c:	0f 93       	push	r16
     48e:	1f 93       	push	r17
     490:	dc 01       	movw	r26, r24
     492:	10 92 3b 02 	sts	0x023B, r1	; 0x80023b <timer1_state>
     496:	8f b5       	in	r24, 0x2f	; 47
     498:	8c 7f       	andi	r24, 0xFC	; 252
     49a:	8f bd       	out	0x2f, r24	; 47
     49c:	8e b5       	in	r24, 0x2e	; 46
     49e:	87 7e       	andi	r24, 0xE7	; 231
     4a0:	8e bd       	out	0x2e, r24	; 46
     4a2:	06 2f       	mov	r16, r22
     4a4:	10 e0       	ldi	r17, 0x00	; 0
     4a6:	f8 01       	movw	r30, r16
     4a8:	31 97       	sbiw	r30, 0x01	; 1
     4aa:	ef 30       	cpi	r30, 0x0F	; 15
     4ac:	f1 05       	cpc	r31, r1
     4ae:	08 f0       	brcs	.+2      	; 0x4b2 <TIMER_COUNTER1enable+0x26>
     4b0:	5a c0       	rjmp	.+180    	; 0x566 <TIMER_COUNTER1enable+0xda>
     4b2:	ea 5b       	subi	r30, 0xBA	; 186
     4b4:	ff 4f       	sbci	r31, 0xFF	; 255
     4b6:	0c 94 a1 18 	jmp	0x3142	; 0x3142 <__tablejump2__>
     4ba:	8f b5       	in	r24, 0x2f	; 47
     4bc:	81 60       	ori	r24, 0x01	; 1
     4be:	8f bd       	out	0x2f, r24	; 47
     4c0:	52 c0       	rjmp	.+164    	; 0x566 <TIMER_COUNTER1enable+0xda>
     4c2:	8f b5       	in	r24, 0x2f	; 47
     4c4:	82 60       	ori	r24, 0x02	; 2
     4c6:	8f bd       	out	0x2f, r24	; 47
     4c8:	4e c0       	rjmp	.+156    	; 0x566 <TIMER_COUNTER1enable+0xda>
     4ca:	8f b5       	in	r24, 0x2f	; 47
     4cc:	83 60       	ori	r24, 0x03	; 3
     4ce:	8f bd       	out	0x2f, r24	; 47
     4d0:	4a c0       	rjmp	.+148    	; 0x566 <TIMER_COUNTER1enable+0xda>
     4d2:	8e b5       	in	r24, 0x2e	; 46
     4d4:	88 60       	ori	r24, 0x08	; 8
     4d6:	8e bd       	out	0x2e, r24	; 46
     4d8:	46 c0       	rjmp	.+140    	; 0x566 <TIMER_COUNTER1enable+0xda>
     4da:	8f b5       	in	r24, 0x2f	; 47
     4dc:	81 60       	ori	r24, 0x01	; 1
     4de:	8f bd       	out	0x2f, r24	; 47
     4e0:	8e b5       	in	r24, 0x2e	; 46
     4e2:	88 60       	ori	r24, 0x08	; 8
     4e4:	8e bd       	out	0x2e, r24	; 46
     4e6:	3f c0       	rjmp	.+126    	; 0x566 <TIMER_COUNTER1enable+0xda>
     4e8:	8f b5       	in	r24, 0x2f	; 47
     4ea:	82 60       	ori	r24, 0x02	; 2
     4ec:	8f bd       	out	0x2f, r24	; 47
     4ee:	8e b5       	in	r24, 0x2e	; 46
     4f0:	88 60       	ori	r24, 0x08	; 8
     4f2:	8e bd       	out	0x2e, r24	; 46
     4f4:	38 c0       	rjmp	.+112    	; 0x566 <TIMER_COUNTER1enable+0xda>
     4f6:	8f b5       	in	r24, 0x2f	; 47
     4f8:	83 60       	ori	r24, 0x03	; 3
     4fa:	8f bd       	out	0x2f, r24	; 47
     4fc:	8e b5       	in	r24, 0x2e	; 46
     4fe:	88 60       	ori	r24, 0x08	; 8
     500:	8e bd       	out	0x2e, r24	; 46
     502:	31 c0       	rjmp	.+98     	; 0x566 <TIMER_COUNTER1enable+0xda>
     504:	8e b5       	in	r24, 0x2e	; 46
     506:	80 61       	ori	r24, 0x10	; 16
     508:	8e bd       	out	0x2e, r24	; 46
     50a:	2d c0       	rjmp	.+90     	; 0x566 <TIMER_COUNTER1enable+0xda>
     50c:	8f b5       	in	r24, 0x2f	; 47
     50e:	81 60       	ori	r24, 0x01	; 1
     510:	8f bd       	out	0x2f, r24	; 47
     512:	8e b5       	in	r24, 0x2e	; 46
     514:	80 61       	ori	r24, 0x10	; 16
     516:	8e bd       	out	0x2e, r24	; 46
     518:	26 c0       	rjmp	.+76     	; 0x566 <TIMER_COUNTER1enable+0xda>
     51a:	8f b5       	in	r24, 0x2f	; 47
     51c:	82 60       	ori	r24, 0x02	; 2
     51e:	8f bd       	out	0x2f, r24	; 47
     520:	8e b5       	in	r24, 0x2e	; 46
     522:	80 61       	ori	r24, 0x10	; 16
     524:	8e bd       	out	0x2e, r24	; 46
     526:	1f c0       	rjmp	.+62     	; 0x566 <TIMER_COUNTER1enable+0xda>
     528:	8f b5       	in	r24, 0x2f	; 47
     52a:	83 60       	ori	r24, 0x03	; 3
     52c:	8f bd       	out	0x2f, r24	; 47
     52e:	8e b5       	in	r24, 0x2e	; 46
     530:	80 61       	ori	r24, 0x10	; 16
     532:	8e bd       	out	0x2e, r24	; 46
     534:	18 c0       	rjmp	.+48     	; 0x566 <TIMER_COUNTER1enable+0xda>
     536:	8e b5       	in	r24, 0x2e	; 46
     538:	88 61       	ori	r24, 0x18	; 24
     53a:	8e bd       	out	0x2e, r24	; 46
     53c:	14 c0       	rjmp	.+40     	; 0x566 <TIMER_COUNTER1enable+0xda>
     53e:	8f b5       	in	r24, 0x2f	; 47
     540:	81 60       	ori	r24, 0x01	; 1
     542:	8f bd       	out	0x2f, r24	; 47
     544:	8e b5       	in	r24, 0x2e	; 46
     546:	88 61       	ori	r24, 0x18	; 24
     548:	8e bd       	out	0x2e, r24	; 46
     54a:	0d c0       	rjmp	.+26     	; 0x566 <TIMER_COUNTER1enable+0xda>
     54c:	8f b5       	in	r24, 0x2f	; 47
     54e:	82 60       	ori	r24, 0x02	; 2
     550:	8f bd       	out	0x2f, r24	; 47
     552:	8e b5       	in	r24, 0x2e	; 46
     554:	88 61       	ori	r24, 0x18	; 24
     556:	8e bd       	out	0x2e, r24	; 46
     558:	06 c0       	rjmp	.+12     	; 0x566 <TIMER_COUNTER1enable+0xda>
     55a:	8f b5       	in	r24, 0x2f	; 47
     55c:	83 60       	ori	r24, 0x03	; 3
     55e:	8f bd       	out	0x2f, r24	; 47
     560:	8e b5       	in	r24, 0x2e	; 46
     562:	88 61       	ori	r24, 0x18	; 24
     564:	8e bd       	out	0x2e, r24	; 46
     566:	8f b5       	in	r24, 0x2f	; 47
     568:	83 70       	andi	r24, 0x03	; 3
     56a:	8f bd       	out	0x2f, r24	; 47
     56c:	87 b7       	in	r24, 0x37	; 55
     56e:	83 7c       	andi	r24, 0xC3	; 195
     570:	87 bf       	out	0x37, r24	; 55
     572:	ed e7       	ldi	r30, 0x7D	; 125
     574:	f0 e0       	ldi	r31, 0x00	; 0
     576:	80 81       	ld	r24, Z
     578:	8e 7f       	andi	r24, 0xFE	; 254
     57a:	80 83       	st	Z, r24
     57c:	50 e0       	ldi	r21, 0x00	; 0
     57e:	fa 01       	movw	r30, r20
     580:	31 97       	sbiw	r30, 0x01	; 1
     582:	ec 30       	cpi	r30, 0x0C	; 12
     584:	f1 05       	cpc	r31, r1
     586:	08 f0       	brcs	.+2      	; 0x58a <TIMER_COUNTER1enable+0xfe>
     588:	44 c0       	rjmp	.+136    	; 0x612 <TIMER_COUNTER1enable+0x186>
     58a:	eb 5a       	subi	r30, 0xAB	; 171
     58c:	ff 4f       	sbci	r31, 0xFF	; 255
     58e:	0c 94 a1 18 	jmp	0x3142	; 0x3142 <__tablejump2__>
     592:	87 b7       	in	r24, 0x37	; 55
     594:	84 60       	ori	r24, 0x04	; 4
     596:	87 bf       	out	0x37, r24	; 55
     598:	3c c0       	rjmp	.+120    	; 0x612 <TIMER_COUNTER1enable+0x186>
     59a:	87 b7       	in	r24, 0x37	; 55
     59c:	80 61       	ori	r24, 0x10	; 16
     59e:	87 bf       	out	0x37, r24	; 55
     5a0:	38 c0       	rjmp	.+112    	; 0x612 <TIMER_COUNTER1enable+0x186>
     5a2:	87 b7       	in	r24, 0x37	; 55
     5a4:	88 60       	ori	r24, 0x08	; 8
     5a6:	87 bf       	out	0x37, r24	; 55
     5a8:	34 c0       	rjmp	.+104    	; 0x612 <TIMER_COUNTER1enable+0x186>
     5aa:	ed e7       	ldi	r30, 0x7D	; 125
     5ac:	f0 e0       	ldi	r31, 0x00	; 0
     5ae:	80 81       	ld	r24, Z
     5b0:	81 60       	ori	r24, 0x01	; 1
     5b2:	80 83       	st	Z, r24
     5b4:	2e c0       	rjmp	.+92     	; 0x612 <TIMER_COUNTER1enable+0x186>
     5b6:	87 b7       	in	r24, 0x37	; 55
     5b8:	80 62       	ori	r24, 0x20	; 32
     5ba:	87 bf       	out	0x37, r24	; 55
     5bc:	2a c0       	rjmp	.+84     	; 0x612 <TIMER_COUNTER1enable+0x186>
     5be:	87 b7       	in	r24, 0x37	; 55
     5c0:	84 61       	ori	r24, 0x14	; 20
     5c2:	87 bf       	out	0x37, r24	; 55
     5c4:	26 c0       	rjmp	.+76     	; 0x612 <TIMER_COUNTER1enable+0x186>
     5c6:	87 b7       	in	r24, 0x37	; 55
     5c8:	8c 60       	ori	r24, 0x0C	; 12
     5ca:	87 bf       	out	0x37, r24	; 55
     5cc:	22 c0       	rjmp	.+68     	; 0x612 <TIMER_COUNTER1enable+0x186>
     5ce:	87 b7       	in	r24, 0x37	; 55
     5d0:	84 60       	ori	r24, 0x04	; 4
     5d2:	87 bf       	out	0x37, r24	; 55
     5d4:	ed e7       	ldi	r30, 0x7D	; 125
     5d6:	f0 e0       	ldi	r31, 0x00	; 0
     5d8:	80 81       	ld	r24, Z
     5da:	81 60       	ori	r24, 0x01	; 1
     5dc:	80 83       	st	Z, r24
     5de:	19 c0       	rjmp	.+50     	; 0x612 <TIMER_COUNTER1enable+0x186>
     5e0:	87 b7       	in	r24, 0x37	; 55
     5e2:	84 62       	ori	r24, 0x24	; 36
     5e4:	87 bf       	out	0x37, r24	; 55
     5e6:	15 c0       	rjmp	.+42     	; 0x612 <TIMER_COUNTER1enable+0x186>
     5e8:	87 b7       	in	r24, 0x37	; 55
     5ea:	8c 61       	ori	r24, 0x1C	; 28
     5ec:	87 bf       	out	0x37, r24	; 55
     5ee:	11 c0       	rjmp	.+34     	; 0x612 <TIMER_COUNTER1enable+0x186>
     5f0:	87 b7       	in	r24, 0x37	; 55
     5f2:	8c 61       	ori	r24, 0x1C	; 28
     5f4:	87 bf       	out	0x37, r24	; 55
     5f6:	ed e7       	ldi	r30, 0x7D	; 125
     5f8:	f0 e0       	ldi	r31, 0x00	; 0
     5fa:	80 81       	ld	r24, Z
     5fc:	81 60       	ori	r24, 0x01	; 1
     5fe:	80 83       	st	Z, r24
     600:	08 c0       	rjmp	.+16     	; 0x612 <TIMER_COUNTER1enable+0x186>
     602:	87 b7       	in	r24, 0x37	; 55
     604:	88 61       	ori	r24, 0x18	; 24
     606:	87 bf       	out	0x37, r24	; 55
     608:	ed e7       	ldi	r30, 0x7D	; 125
     60a:	f0 e0       	ldi	r31, 0x00	; 0
     60c:	80 81       	ld	r24, Z
     60e:	81 60       	ori	r24, 0x01	; 1
     610:	80 83       	st	Z, r24
     612:	84 ef       	ldi	r24, 0xF4	; 244
     614:	91 e0       	ldi	r25, 0x01	; 1
     616:	11 96       	adiw	r26, 0x01	; 1
     618:	9c 93       	st	X, r25
     61a:	8e 93       	st	-X, r24
     61c:	89 e0       	ldi	r24, 0x09	; 9
     61e:	92 e0       	ldi	r25, 0x02	; 2
     620:	13 96       	adiw	r26, 0x03	; 3
     622:	9c 93       	st	X, r25
     624:	8e 93       	st	-X, r24
     626:	12 97       	sbiw	r26, 0x02	; 2
     628:	8e e1       	ldi	r24, 0x1E	; 30
     62a:	92 e0       	ldi	r25, 0x02	; 2
     62c:	15 96       	adiw	r26, 0x05	; 5
     62e:	9c 93       	st	X, r25
     630:	8e 93       	st	-X, r24
     632:	14 97       	sbiw	r26, 0x04	; 4
     634:	83 e3       	ldi	r24, 0x33	; 51
     636:	92 e0       	ldi	r25, 0x02	; 2
     638:	17 96       	adiw	r26, 0x07	; 7
     63a:	9c 93       	st	X, r25
     63c:	8e 93       	st	-X, r24
     63e:	16 97       	sbiw	r26, 0x06	; 6
     640:	86 e3       	ldi	r24, 0x36	; 54
     642:	92 e0       	ldi	r25, 0x02	; 2
     644:	19 96       	adiw	r26, 0x09	; 9
     646:	9c 93       	st	X, r25
     648:	8e 93       	st	-X, r24
     64a:	18 97       	sbiw	r26, 0x08	; 8
     64c:	89 e3       	ldi	r24, 0x39	; 57
     64e:	92 e0       	ldi	r25, 0x02	; 2
     650:	1b 96       	adiw	r26, 0x0b	; 11
     652:	9c 93       	st	X, r25
     654:	8e 93       	st	-X, r24
     656:	1a 97       	sbiw	r26, 0x0a	; 10
     658:	8d ea       	ldi	r24, 0xAD	; 173
     65a:	91 e0       	ldi	r25, 0x01	; 1
     65c:	1d 96       	adiw	r26, 0x0d	; 13
     65e:	9c 93       	st	X, r25
     660:	8e 93       	st	-X, r24
     662:	1c 97       	sbiw	r26, 0x0c	; 12
     664:	8e e3       	ldi	r24, 0x3E	; 62
     666:	92 e0       	ldi	r25, 0x02	; 2
     668:	1f 96       	adiw	r26, 0x0f	; 15
     66a:	9c 93       	st	X, r25
     66c:	8e 93       	st	-X, r24
     66e:	1e 97       	sbiw	r26, 0x0e	; 14
     670:	cd 01       	movw	r24, r26
     672:	1f 91       	pop	r17
     674:	0f 91       	pop	r16
     676:	08 95       	ret

00000678 <__vector_16>:
/*
** interrupt
*/
// So that main will not freeze when not defined, but rather exclude.
//ISR(TIMER0_COMP_vect){ }
ISR(TIMER0_OVF_vect){ }
     678:	1f 92       	push	r1
     67a:	0f 92       	push	r0
     67c:	0f b6       	in	r0, 0x3f	; 63
     67e:	0f 92       	push	r0
     680:	11 24       	eor	r1, r1
     682:	0f 90       	pop	r0
     684:	0f be       	out	0x3f, r0	; 63
     686:	0f 90       	pop	r0
     688:	1f 90       	pop	r1
     68a:	18 95       	reti

0000068c <__vector_11>:
ISR(TIMER1_CAPT_vect){ }
     68c:	1f 92       	push	r1
     68e:	0f 92       	push	r0
     690:	0f b6       	in	r0, 0x3f	; 63
     692:	0f 92       	push	r0
     694:	11 24       	eor	r1, r1
     696:	0f 90       	pop	r0
     698:	0f be       	out	0x3f, r0	; 63
     69a:	0f 90       	pop	r0
     69c:	1f 90       	pop	r1
     69e:	18 95       	reti

000006a0 <__vector_12>:
ISR(TIMER1_COMPA_vect){ }
     6a0:	1f 92       	push	r1
     6a2:	0f 92       	push	r0
     6a4:	0f b6       	in	r0, 0x3f	; 63
     6a6:	0f 92       	push	r0
     6a8:	11 24       	eor	r1, r1
     6aa:	0f 90       	pop	r0
     6ac:	0f be       	out	0x3f, r0	; 63
     6ae:	0f 90       	pop	r0
     6b0:	1f 90       	pop	r1
     6b2:	18 95       	reti

000006b4 <__vector_13>:
ISR(TIMER1_COMPB_vect){ }
     6b4:	1f 92       	push	r1
     6b6:	0f 92       	push	r0
     6b8:	0f b6       	in	r0, 0x3f	; 63
     6ba:	0f 92       	push	r0
     6bc:	11 24       	eor	r1, r1
     6be:	0f 90       	pop	r0
     6c0:	0f be       	out	0x3f, r0	; 63
     6c2:	0f 90       	pop	r0
     6c4:	1f 90       	pop	r1
     6c6:	18 95       	reti

000006c8 <__vector_24>:
ISR(TIMER1_COMPC_vect){ }
     6c8:	1f 92       	push	r1
     6ca:	0f 92       	push	r0
     6cc:	0f b6       	in	r0, 0x3f	; 63
     6ce:	0f 92       	push	r0
     6d0:	11 24       	eor	r1, r1
     6d2:	0f 90       	pop	r0
     6d4:	0f be       	out	0x3f, r0	; 63
     6d6:	0f 90       	pop	r0
     6d8:	1f 90       	pop	r1
     6da:	18 95       	reti

000006dc <__vector_14>:
ISR(TIMER1_OVF_vect){ }
     6dc:	1f 92       	push	r1
     6de:	0f 92       	push	r0
     6e0:	0f b6       	in	r0, 0x3f	; 63
     6e2:	0f 92       	push	r0
     6e4:	11 24       	eor	r1, r1
     6e6:	0f 90       	pop	r0
     6e8:	0f be       	out	0x3f, r0	; 63
     6ea:	0f 90       	pop	r0
     6ec:	1f 90       	pop	r1
     6ee:	18 95       	reti

000006f0 <__vector_10>:
ISR(TIMER2_OVF_vect){ }
     6f0:	1f 92       	push	r1
     6f2:	0f 92       	push	r0
     6f4:	0f b6       	in	r0, 0x3f	; 63
     6f6:	0f 92       	push	r0
     6f8:	11 24       	eor	r1, r1
     6fa:	0f 90       	pop	r0
     6fc:	0f be       	out	0x3f, r0	; 63
     6fe:	0f 90       	pop	r0
     700:	1f 90       	pop	r1
     702:	18 95       	reti

00000704 <__vector_25>:
ISR(TIMER3_CAPT_vect){ }
     704:	1f 92       	push	r1
     706:	0f 92       	push	r0
     708:	0f b6       	in	r0, 0x3f	; 63
     70a:	0f 92       	push	r0
     70c:	11 24       	eor	r1, r1
     70e:	0f 90       	pop	r0
     710:	0f be       	out	0x3f, r0	; 63
     712:	0f 90       	pop	r0
     714:	1f 90       	pop	r1
     716:	18 95       	reti

00000718 <__vector_26>:
ISR(TIMER3_COMPA_vect){ }
     718:	1f 92       	push	r1
     71a:	0f 92       	push	r0
     71c:	0f b6       	in	r0, 0x3f	; 63
     71e:	0f 92       	push	r0
     720:	11 24       	eor	r1, r1
     722:	0f 90       	pop	r0
     724:	0f be       	out	0x3f, r0	; 63
     726:	0f 90       	pop	r0
     728:	1f 90       	pop	r1
     72a:	18 95       	reti

0000072c <__vector_27>:
ISR(TIMER3_COMPB_vect){ }
     72c:	1f 92       	push	r1
     72e:	0f 92       	push	r0
     730:	0f b6       	in	r0, 0x3f	; 63
     732:	0f 92       	push	r0
     734:	11 24       	eor	r1, r1
     736:	0f 90       	pop	r0
     738:	0f be       	out	0x3f, r0	; 63
     73a:	0f 90       	pop	r0
     73c:	1f 90       	pop	r1
     73e:	18 95       	reti

00000740 <__vector_28>:
ISR(TIMER3_COMPC_vect){ }
     740:	1f 92       	push	r1
     742:	0f 92       	push	r0
     744:	0f b6       	in	r0, 0x3f	; 63
     746:	0f 92       	push	r0
     748:	11 24       	eor	r1, r1
     74a:	0f 90       	pop	r0
     74c:	0f be       	out	0x3f, r0	; 63
     74e:	0f 90       	pop	r0
     750:	1f 90       	pop	r1
     752:	18 95       	reti

00000754 <__vector_29>:
ISR(TIMER3_OVF_vect){ }
     754:	1f 92       	push	r1
     756:	0f 92       	push	r0
     758:	0f b6       	in	r0, 0x3f	; 63
     75a:	0f 92       	push	r0
     75c:	11 24       	eor	r1, r1
     75e:	0f 90       	pop	r0
     760:	0f be       	out	0x3f, r0	; 63
     762:	0f 90       	pop	r0
     764:	1f 90       	pop	r1
     766:	18 95       	reti

00000768 <__vector_18>:
void uart1_puts_p(const char *progmem_s )
{
    register char c;
    while ( (c = pgm_read_byte(progmem_s++)) ) 
      uart1_putc(c);
}/* uart1_puts_p */
     768:	1f 92       	push	r1
     76a:	0f 92       	push	r0
     76c:	0f b6       	in	r0, 0x3f	; 63
     76e:	0f 92       	push	r0
     770:	11 24       	eor	r1, r1
     772:	0b b6       	in	r0, 0x3b	; 59
     774:	0f 92       	push	r0
     776:	8f 93       	push	r24
     778:	9f 93       	push	r25
     77a:	ef 93       	push	r30
     77c:	ff 93       	push	r31
     77e:	8b b1       	in	r24, 0x0b	; 11
     780:	9a b1       	in	r25, 0x0a	; 10
     782:	88 71       	andi	r24, 0x18	; 24
     784:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <UART_LastRxError>
     788:	e0 91 f8 01 	lds	r30, 0x01F8	; 0x8001f8 <UART_RxHead>
     78c:	ef 5f       	subi	r30, 0xFF	; 255
     78e:	ef 71       	andi	r30, 0x1F	; 31
     790:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <UART_RxTail>
     794:	e8 13       	cpse	r30, r24
     796:	04 c0       	rjmp	.+8      	; 0x7a0 <__vector_18+0x38>
     798:	82 e0       	ldi	r24, 0x02	; 2
     79a:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <UART_LastRxError>
     79e:	11 c0       	rjmp	.+34     	; 0x7c2 <__vector_18+0x5a>
     7a0:	9c b1       	in	r25, 0x0c	; 12
     7a2:	e0 93 f8 01 	sts	0x01F8, r30	; 0x8001f8 <UART_RxHead>
     7a6:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <UART_LastRxError>
     7aa:	88 23       	and	r24, r24
     7ac:	31 f0       	breq	.+12     	; 0x7ba <__vector_18+0x52>
     7ae:	f0 e0       	ldi	r31, 0x00	; 0
     7b0:	e5 50       	subi	r30, 0x05	; 5
     7b2:	fe 4f       	sbci	r31, 0xFE	; 254
     7b4:	88 e5       	ldi	r24, 0x58	; 88
     7b6:	80 83       	st	Z, r24
     7b8:	04 c0       	rjmp	.+8      	; 0x7c2 <__vector_18+0x5a>
     7ba:	f0 e0       	ldi	r31, 0x00	; 0
     7bc:	e5 50       	subi	r30, 0x05	; 5
     7be:	fe 4f       	sbci	r31, 0xFE	; 254
     7c0:	90 83       	st	Z, r25
     7c2:	ff 91       	pop	r31
     7c4:	ef 91       	pop	r30
     7c6:	9f 91       	pop	r25
     7c8:	8f 91       	pop	r24
     7ca:	0f 90       	pop	r0
     7cc:	0b be       	out	0x3b, r0	; 59
     7ce:	0f 90       	pop	r0
     7d0:	0f be       	out	0x3f, r0	; 63
     7d2:	0f 90       	pop	r0
     7d4:	1f 90       	pop	r1
     7d6:	18 95       	reti

000007d8 <__vector_19>:
     7d8:	1f 92       	push	r1
     7da:	0f 92       	push	r0
     7dc:	0f b6       	in	r0, 0x3f	; 63
     7de:	0f 92       	push	r0
     7e0:	11 24       	eor	r1, r1
     7e2:	0b b6       	in	r0, 0x3b	; 59
     7e4:	0f 92       	push	r0
     7e6:	8f 93       	push	r24
     7e8:	9f 93       	push	r25
     7ea:	ef 93       	push	r30
     7ec:	ff 93       	push	r31
     7ee:	90 91 fa 01 	lds	r25, 0x01FA	; 0x8001fa <UART_TxHead>
     7f2:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <UART_TxTail>
     7f6:	98 13       	cpse	r25, r24
     7f8:	02 c0       	rjmp	.+4      	; 0x7fe <__vector_19+0x26>
     7fa:	55 98       	cbi	0x0a, 5	; 10
     7fc:	0b c0       	rjmp	.+22     	; 0x814 <__vector_19+0x3c>
     7fe:	e0 91 f9 01 	lds	r30, 0x01F9	; 0x8001f9 <UART_TxTail>
     802:	ef 5f       	subi	r30, 0xFF	; 255
     804:	ef 71       	andi	r30, 0x1F	; 31
     806:	e0 93 f9 01 	sts	0x01F9, r30	; 0x8001f9 <UART_TxTail>
     80a:	f0 e0       	ldi	r31, 0x00	; 0
     80c:	e5 5e       	subi	r30, 0xE5	; 229
     80e:	fd 4f       	sbci	r31, 0xFD	; 253
     810:	80 81       	ld	r24, Z
     812:	8c b9       	out	0x0c, r24	; 12
     814:	ff 91       	pop	r31
     816:	ef 91       	pop	r30
     818:	9f 91       	pop	r25
     81a:	8f 91       	pop	r24
     81c:	0f 90       	pop	r0
     81e:	0b be       	out	0x3b, r0	; 59
     820:	0f 90       	pop	r0
     822:	0f be       	out	0x3f, r0	; 63
     824:	0f 90       	pop	r0
     826:	1f 90       	pop	r1
     828:	18 95       	reti

0000082a <__vector_30>:
SIGNAL(UART1_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART1 Receive Complete interrupt
Purpose:  called when the UART1 has received a character
**************************************************************************/
{
     82a:	1f 92       	push	r1
     82c:	0f 92       	push	r0
     82e:	0f b6       	in	r0, 0x3f	; 63
     830:	0f 92       	push	r0
     832:	11 24       	eor	r1, r1
     834:	0b b6       	in	r0, 0x3b	; 59
     836:	0f 92       	push	r0
     838:	8f 93       	push	r24
     83a:	9f 93       	push	r25
     83c:	ef 93       	push	r30
     83e:	ff 93       	push	r31
    unsigned char tmphead;
	unsigned char data;
	unsigned char bit9;
    unsigned char usr;
    /* read UART status register and UART data register */
	usr  = UART1_STATUS;
     840:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    bit9 = UART1_CONTROL;
     844:	90 91 9a 00 	lds	r25, 0x009A	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
    bit9 = 0x01 & (bit9>>1);
    /* */
    UART1_LastRxError = (usr & (_BV(FE1)|_BV(DOR1)));
     848:	88 71       	andi	r24, 0x18	; 24
     84a:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <UART1_LastRxError>
	/* calculate buffer index */
    tmphead = ( UART1_RxHead + 1) & UART_RX_BUFFER_MASK;
     84e:	e0 91 b3 01 	lds	r30, 0x01B3	; 0x8001b3 <UART1_RxHead>
     852:	ef 5f       	subi	r30, 0xFF	; 255
     854:	ef 71       	andi	r30, 0x1F	; 31
    if ( tmphead == UART1_RxTail ) {	
     856:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <UART1_RxTail>
     85a:	e8 13       	cpse	r30, r24
     85c:	04 c0       	rjmp	.+8      	; 0x866 <__vector_30+0x3c>
        /* error: receive buffer overflow, caracter is lost*/
        UART1_LastRxError = UART_BUFFER_OVERFLOW >> 8; 
     85e:	82 e0       	ldi	r24, 0x02	; 2
     860:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <UART1_LastRxError>
     864:	12 c0       	rjmp	.+36     	; 0x88a <__vector_30+0x60>
	}else{
		data = UART1_DATA;
     866:	90 91 9c 00 	lds	r25, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
        /* store new index */
        UART1_RxHead = tmphead;
     86a:	e0 93 b3 01 	sts	0x01B3, r30	; 0x8001b3 <UART1_RxHead>
		if(UART1_LastRxError){
     86e:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <UART1_LastRxError>
     872:	88 23       	and	r24, r24
     874:	31 f0       	breq	.+12     	; 0x882 <__vector_30+0x58>
			/* store indication data error in buffer */
			UART1_RxBuf[tmphead] = 'X';
     876:	f0 e0       	ldi	r31, 0x00	; 0
     878:	ea 54       	subi	r30, 0x4A	; 74
     87a:	fe 4f       	sbci	r31, 0xFE	; 254
     87c:	88 e5       	ldi	r24, 0x58	; 88
     87e:	80 83       	st	Z, r24
     880:	04 c0       	rjmp	.+8      	; 0x88a <__vector_30+0x60>
		}else{
			/* store received data in buffer */
			UART1_RxBuf[tmphead] = data;
     882:	f0 e0       	ldi	r31, 0x00	; 0
     884:	ea 54       	subi	r30, 0x4A	; 74
     886:	fe 4f       	sbci	r31, 0xFE	; 254
     888:	90 83       	st	Z, r25
		}
    }
}
     88a:	ff 91       	pop	r31
     88c:	ef 91       	pop	r30
     88e:	9f 91       	pop	r25
     890:	8f 91       	pop	r24
     892:	0f 90       	pop	r0
     894:	0b be       	out	0x3b, r0	; 59
     896:	0f 90       	pop	r0
     898:	0f be       	out	0x3f, r0	; 63
     89a:	0f 90       	pop	r0
     89c:	1f 90       	pop	r1
     89e:	18 95       	reti

000008a0 <__vector_31>:
SIGNAL(UART1_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART1 Data Register Empty interrupt
Purpose:  called when the UART1 is ready to transmit the next byte
**************************************************************************/
{
     8a0:	1f 92       	push	r1
     8a2:	0f 92       	push	r0
     8a4:	0f b6       	in	r0, 0x3f	; 63
     8a6:	0f 92       	push	r0
     8a8:	11 24       	eor	r1, r1
     8aa:	0b b6       	in	r0, 0x3b	; 59
     8ac:	0f 92       	push	r0
     8ae:	8f 93       	push	r24
     8b0:	9f 93       	push	r25
     8b2:	ef 93       	push	r30
     8b4:	ff 93       	push	r31
    if ( UART1_TxHead == UART1_TxTail ) {
     8b6:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <UART1_TxHead>
     8ba:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <UART1_TxTail>
     8be:	98 13       	cpse	r25, r24
     8c0:	06 c0       	rjmp	.+12     	; 0x8ce <__vector_31+0x2e>
        /* tx buffer empty, disable UDRE interrupt */
        UART1_CONTROL &= ~_BV(UART1_UDRIE);
     8c2:	ea e9       	ldi	r30, 0x9A	; 154
     8c4:	f0 e0       	ldi	r31, 0x00	; 0
     8c6:	80 81       	ld	r24, Z
     8c8:	8f 7d       	andi	r24, 0xDF	; 223
     8ca:	80 83       	st	Z, r24
     8cc:	0e c0       	rjmp	.+28     	; 0x8ea <__vector_31+0x4a>
    }else{
		/* calculate and store new buffer index */
        UART1_TxTail = (UART1_TxTail + 1) & UART_TX_BUFFER_MASK;
     8ce:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <UART1_TxTail>
     8d2:	8f 5f       	subi	r24, 0xFF	; 255
     8d4:	8f 71       	andi	r24, 0x1F	; 31
     8d6:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <UART1_TxTail>
        /* get one byte from buffer and write it to UART */
		UART1_DATA = UART1_TxBuf[UART1_TxTail];  /* start transmission */
     8da:	e0 91 b4 01 	lds	r30, 0x01B4	; 0x8001b4 <UART1_TxTail>
     8de:	f0 e0       	ldi	r31, 0x00	; 0
     8e0:	ea 52       	subi	r30, 0x2A	; 42
     8e2:	fe 4f       	sbci	r31, 0xFE	; 254
     8e4:	80 81       	ld	r24, Z
     8e6:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
	}
}
     8ea:	ff 91       	pop	r31
     8ec:	ef 91       	pop	r30
     8ee:	9f 91       	pop	r25
     8f0:	8f 91       	pop	r24
     8f2:	0f 90       	pop	r0
     8f4:	0b be       	out	0x3b, r0	; 59
     8f6:	0f 90       	pop	r0
     8f8:	0f be       	out	0x3f, r0	; 63
     8fa:	0f 90       	pop	r0
     8fc:	1f 90       	pop	r1
     8fe:	18 95       	reti

00000900 <FUNCpinmatch>:
}
//pinmatch
uint8_t FUNCpinmatch(uint8_t match, uint8_t pin, uint8_t HL)
{
	uint8_t result;
	result=match&pin;
     900:	68 23       	and	r22, r24
	if(HL){
     902:	44 23       	and	r20, r20
     904:	21 f0       	breq	.+8      	; 0x90e <FUNCpinmatch+0xe>
		if(result==match);
     906:	86 17       	cp	r24, r22
     908:	21 f0       	breq	.+8      	; 0x912 <FUNCpinmatch+0x12>
		else
			result=0;
     90a:	80 e0       	ldi	r24, 0x00	; 0
     90c:	08 95       	ret
	}else{
		if(result)
     90e:	61 11       	cpse	r22, r1
			result=0;
     910:	80 e0       	ldi	r24, 0x00	; 0
		else
			result=match;
	}
	return result;
}
     912:	08 95       	ret

00000914 <FUNChmerge>:
// hmerge
uint8_t FUNChmerge(uint8_t X, uint8_t Y)
{
	return (X | Y);
}
     914:	86 2b       	or	r24, r22
     916:	08 95       	ret

00000918 <FUNClmerge>:
// lmerge
uint8_t FUNClmerge(uint8_t X, uint8_t Y)
{
	return (X & Y);
}
     918:	86 23       	and	r24, r22
     91a:	08 95       	ret

0000091c <FUNChh>:
uint8_t FUNChh(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xi&xf;
	return i;
}
     91c:	86 23       	and	r24, r22
     91e:	08 95       	ret

00000920 <FUNCll>:
// ll
uint8_t FUNCll(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xi|xf;
	return ~i;
     920:	86 2b       	or	r24, r22
}
     922:	80 95       	com	r24
     924:	08 95       	ret

00000926 <FUNClh>:
// lh
uint8_t FUNClh(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xi^xf;
     926:	86 27       	eor	r24, r22
	i&=xf;
	return i;
}
     928:	86 23       	and	r24, r22
     92a:	08 95       	ret

0000092c <FUNChl>:
// hl
uint8_t FUNChl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xf^xi;
     92c:	60 95       	com	r22
	i&=xi;
	return i;
}
     92e:	86 23       	and	r24, r22
     930:	08 95       	ret

00000932 <FUNCdiff>:
// diff
uint8_t FUNCdiff(uint8_t xi, uint8_t xf)
{
	return xf^xi;
}
     932:	86 27       	eor	r24, r22
     934:	08 95       	ret

00000936 <FUNCswap>:
// interchange *px and *py
void FUNCswap(long *px, long *py)
{
     936:	cf 92       	push	r12
     938:	df 92       	push	r13
     93a:	ef 92       	push	r14
     93c:	ff 92       	push	r15
     93e:	0f 93       	push	r16
     940:	1f 93       	push	r17
	long temp;
	temp = *px;
     942:	fc 01       	movw	r30, r24
     944:	00 81       	ld	r16, Z
     946:	11 81       	ldd	r17, Z+1	; 0x01
     948:	22 81       	ldd	r18, Z+2	; 0x02
     94a:	33 81       	ldd	r19, Z+3	; 0x03
	*px = *py;
     94c:	fb 01       	movw	r30, r22
     94e:	c0 80       	ld	r12, Z
     950:	d1 80       	ldd	r13, Z+1	; 0x01
     952:	e2 80       	ldd	r14, Z+2	; 0x02
     954:	f3 80       	ldd	r15, Z+3	; 0x03
     956:	fc 01       	movw	r30, r24
     958:	c0 82       	st	Z, r12
     95a:	d1 82       	std	Z+1, r13	; 0x01
     95c:	e2 82       	std	Z+2, r14	; 0x02
     95e:	f3 82       	std	Z+3, r15	; 0x03
	*py = temp;
     960:	fb 01       	movw	r30, r22
     962:	00 83       	st	Z, r16
     964:	11 83       	std	Z+1, r17	; 0x01
     966:	22 83       	std	Z+2, r18	; 0x02
     968:	33 83       	std	Z+3, r19	; 0x03
}
     96a:	1f 91       	pop	r17
     96c:	0f 91       	pop	r16
     96e:	ff 90       	pop	r15
     970:	ef 90       	pop	r14
     972:	df 90       	pop	r13
     974:	cf 90       	pop	r12
     976:	08 95       	ret

00000978 <FUNCcopy>:
// copy: copy 'from' into 'to'; assume to is big enough
void FUNCcopy(char to[], char from[])
{
	int i;
	i = 0;
	while ((to[i] = from[i]) != '\0')
     978:	fb 01       	movw	r30, r22
     97a:	20 81       	ld	r18, Z
     97c:	fc 01       	movw	r30, r24
     97e:	20 83       	st	Z, r18
     980:	22 23       	and	r18, r18
     982:	39 f0       	breq	.+14     	; 0x992 <FUNCcopy+0x1a>
     984:	db 01       	movw	r26, r22
     986:	11 96       	adiw	r26, 0x01	; 1
     988:	31 96       	adiw	r30, 0x01	; 1
     98a:	9d 91       	ld	r25, X+
     98c:	91 93       	st	Z+, r25
     98e:	91 11       	cpse	r25, r1
     990:	fc cf       	rjmp	.-8      	; 0x98a <FUNCcopy+0x12>
     992:	08 95       	ret

00000994 <FUNCsqueeze>:
		++i;
}
// squeeze: delete all c from s
void FUNCsqueeze(char s[], int c)
{
     994:	cf 93       	push	r28
     996:	df 93       	push	r29
     998:	ec 01       	movw	r28, r24
	int i, j;
	for (i = j = 0; s[i] != '\0'; i++)
     99a:	98 81       	ld	r25, Y
     99c:	99 23       	and	r25, r25
     99e:	99 f0       	breq	.+38     	; 0x9c6 <FUNCsqueeze+0x32>
     9a0:	fe 01       	movw	r30, r28
     9a2:	31 96       	adiw	r30, 0x01	; 1
     9a4:	20 e0       	ldi	r18, 0x00	; 0
     9a6:	30 e0       	ldi	r19, 0x00	; 0
		if (s[i] != c)
     9a8:	49 2f       	mov	r20, r25
     9aa:	50 e0       	ldi	r21, 0x00	; 0
     9ac:	46 17       	cp	r20, r22
     9ae:	57 07       	cpc	r21, r23
     9b0:	31 f0       	breq	.+12     	; 0x9be <FUNCsqueeze+0x2a>
			s[j++] = s[i];
     9b2:	de 01       	movw	r26, r28
     9b4:	a2 0f       	add	r26, r18
     9b6:	b3 1f       	adc	r27, r19
     9b8:	9c 93       	st	X, r25
     9ba:	2f 5f       	subi	r18, 0xFF	; 255
     9bc:	3f 4f       	sbci	r19, 0xFF	; 255
}
// squeeze: delete all c from s
void FUNCsqueeze(char s[], int c)
{
	int i, j;
	for (i = j = 0; s[i] != '\0'; i++)
     9be:	91 91       	ld	r25, Z+
     9c0:	91 11       	cpse	r25, r1
     9c2:	f2 cf       	rjmp	.-28     	; 0x9a8 <FUNCsqueeze+0x14>
     9c4:	02 c0       	rjmp	.+4      	; 0x9ca <FUNCsqueeze+0x36>
     9c6:	20 e0       	ldi	r18, 0x00	; 0
     9c8:	30 e0       	ldi	r19, 0x00	; 0
		if (s[i] != c)
			s[j++] = s[i];
		s[j] = '\0';
     9ca:	fe 01       	movw	r30, r28
     9cc:	e2 0f       	add	r30, r18
     9ce:	f3 1f       	adc	r31, r19
     9d0:	10 82       	st	Z, r1
}
     9d2:	df 91       	pop	r29
     9d4:	cf 91       	pop	r28
     9d6:	08 95       	ret

000009d8 <FUNCshellsort>:
// shellsort: sort v[0]...v[n-1] into increasing order
void FUNCshellsort(int v[], int n)
{
     9d8:	2f 92       	push	r2
     9da:	3f 92       	push	r3
     9dc:	4f 92       	push	r4
     9de:	5f 92       	push	r5
     9e0:	6f 92       	push	r6
     9e2:	7f 92       	push	r7
     9e4:	8f 92       	push	r8
     9e6:	9f 92       	push	r9
     9e8:	af 92       	push	r10
     9ea:	bf 92       	push	r11
     9ec:	cf 92       	push	r12
     9ee:	df 92       	push	r13
     9f0:	ef 92       	push	r14
     9f2:	ff 92       	push	r15
     9f4:	0f 93       	push	r16
     9f6:	1f 93       	push	r17
     9f8:	cf 93       	push	r28
     9fa:	df 93       	push	r29
     9fc:	00 d0       	rcall	.+0      	; 0x9fe <FUNCshellsort+0x26>
     9fe:	00 d0       	rcall	.+0      	; 0xa00 <FUNCshellsort+0x28>
     a00:	cd b7       	in	r28, 0x3d	; 61
     a02:	de b7       	in	r29, 0x3e	; 62
     a04:	2c 01       	movw	r4, r24
     a06:	1b 01       	movw	r2, r22
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
     a08:	4b 01       	movw	r8, r22
     a0a:	77 23       	and	r23, r23
     a0c:	1c f4       	brge	.+6      	; 0xa14 <FUNCshellsort+0x3c>
     a0e:	2f ef       	ldi	r18, 0xFF	; 255
     a10:	82 1a       	sub	r8, r18
     a12:	92 0a       	sbc	r9, r18
     a14:	95 94       	asr	r9
     a16:	87 94       	ror	r8
     a18:	18 14       	cp	r1, r8
     a1a:	19 04       	cpc	r1, r9
     a1c:	0c f4       	brge	.+2      	; 0xa20 <FUNCshellsort+0x48>
     a1e:	51 c0       	rjmp	.+162    	; 0xac2 <FUNCshellsort+0xea>
     a20:	6a c0       	rjmp	.+212    	; 0xaf6 <FUNCshellsort+0x11e>
		for (i = gap; i < n; i++)
			for (j=i-gap; j>=0 && v[j]>v[j+gap]; j-=gap){
     a22:	96 01       	movw	r18, r12
     a24:	dd 20       	and	r13, r13
     a26:	9c f1       	brlt	.+102    	; 0xa8e <FUNCshellsort+0xb6>
     a28:	f5 01       	movw	r30, r10
     a2a:	40 81       	ld	r20, Z
     a2c:	51 81       	ldd	r21, Z+1	; 0x01
     a2e:	f4 01       	movw	r30, r8
     a30:	60 81       	ld	r22, Z
     a32:	71 81       	ldd	r23, Z+1	; 0x01
     a34:	64 17       	cp	r22, r20
     a36:	75 07       	cpc	r23, r21
     a38:	54 f5       	brge	.+84     	; 0xa8e <FUNCshellsort+0xb6>
     a3a:	8c 01       	movw	r16, r24
     a3c:	0a 0d       	add	r16, r10
     a3e:	1b 1d       	adc	r17, r11
     a40:	d4 01       	movw	r26, r8
     a42:	bc 82       	std	Y+4, r11	; 0x04
     a44:	ab 82       	std	Y+3, r10	; 0x03
     a46:	ba 82       	std	Y+2, r11	; 0x02
     a48:	a9 82       	std	Y+1, r10	; 0x01
				temp = v[j];
				v[j] = v[j+gap];
     a4a:	eb 81       	ldd	r30, Y+3	; 0x03
     a4c:	fc 81       	ldd	r31, Y+4	; 0x04
     a4e:	71 83       	std	Z+1, r23	; 0x01
     a50:	60 83       	st	Z, r22
				v[j+gap] = temp;
     a52:	11 96       	adiw	r26, 0x01	; 1
     a54:	5c 93       	st	X, r21
     a56:	4e 93       	st	-X, r20
void FUNCshellsort(int v[], int n)
{
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
		for (i = gap; i < n; i++)
			for (j=i-gap; j>=0 && v[j]>v[j+gap]; j-=gap){
     a58:	2e 19       	sub	r18, r14
     a5a:	3f 09       	sbc	r19, r15
     a5c:	c2 f0       	brmi	.+48     	; 0xa8e <FUNCshellsort+0xb6>
     a5e:	f8 01       	movw	r30, r16
     a60:	40 81       	ld	r20, Z
     a62:	51 81       	ldd	r21, Z+1	; 0x01
     a64:	e9 81       	ldd	r30, Y+1	; 0x01
     a66:	fa 81       	ldd	r31, Y+2	; 0x02
     a68:	60 81       	ld	r22, Z
     a6a:	71 81       	ldd	r23, Z+1	; 0x01
     a6c:	08 0f       	add	r16, r24
     a6e:	19 1f       	adc	r17, r25
     a70:	e8 0f       	add	r30, r24
     a72:	f9 1f       	adc	r31, r25
     a74:	fa 83       	std	Y+2, r31	; 0x02
     a76:	e9 83       	std	Y+1, r30	; 0x01
     a78:	eb 81       	ldd	r30, Y+3	; 0x03
     a7a:	fc 81       	ldd	r31, Y+4	; 0x04
     a7c:	e8 0f       	add	r30, r24
     a7e:	f9 1f       	adc	r31, r25
     a80:	fc 83       	std	Y+4, r31	; 0x04
     a82:	eb 83       	std	Y+3, r30	; 0x03
     a84:	a8 0f       	add	r26, r24
     a86:	b9 1f       	adc	r27, r25
     a88:	64 17       	cp	r22, r20
     a8a:	75 07       	cpc	r23, r21
     a8c:	f4 f2       	brlt	.-68     	; 0xa4a <FUNCshellsort+0x72>
     a8e:	ff ef       	ldi	r31, 0xFF	; 255
     a90:	cf 1a       	sub	r12, r31
     a92:	df 0a       	sbc	r13, r31
     a94:	22 e0       	ldi	r18, 0x02	; 2
     a96:	a2 0e       	add	r10, r18
     a98:	b1 1c       	adc	r11, r1
     a9a:	e2 e0       	ldi	r30, 0x02	; 2
     a9c:	8e 0e       	add	r8, r30
     a9e:	91 1c       	adc	r9, r1
// shellsort: sort v[0]...v[n-1] into increasing order
void FUNCshellsort(int v[], int n)
{
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
		for (i = gap; i < n; i++)
     aa0:	c6 14       	cp	r12, r6
     aa2:	d7 04       	cpc	r13, r7
     aa4:	09 f0       	breq	.+2      	; 0xaa8 <FUNCshellsort+0xd0>
     aa6:	bd cf       	rjmp	.-134    	; 0xa22 <FUNCshellsort+0x4a>
}
// shellsort: sort v[0]...v[n-1] into increasing order
void FUNCshellsort(int v[], int n)
{
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
     aa8:	47 01       	movw	r8, r14
     aaa:	ff 20       	and	r15, r15
     aac:	1c f4       	brge	.+6      	; 0xab4 <FUNCshellsort+0xdc>
     aae:	ff ef       	ldi	r31, 0xFF	; 255
     ab0:	8f 1a       	sub	r8, r31
     ab2:	9f 0a       	sbc	r9, r31
     ab4:	95 94       	asr	r9
     ab6:	87 94       	ror	r8
     ab8:	18 14       	cp	r1, r8
     aba:	19 04       	cpc	r1, r9
     abc:	e4 f4       	brge	.+56     	; 0xaf6 <FUNCshellsort+0x11e>
     abe:	74 01       	movw	r14, r8
     ac0:	01 c0       	rjmp	.+2      	; 0xac4 <FUNCshellsort+0xec>
     ac2:	74 01       	movw	r14, r8
		for (i = gap; i < n; i++)
     ac4:	82 14       	cp	r8, r2
     ac6:	93 04       	cpc	r9, r3
     ac8:	7c f7       	brge	.-34     	; 0xaa8 <FUNCshellsort+0xd0>
     aca:	64 01       	movw	r12, r8
     acc:	ce 18       	sub	r12, r14
     ace:	df 08       	sbc	r13, r15
     ad0:	56 01       	movw	r10, r12
     ad2:	aa 0c       	add	r10, r10
     ad4:	bb 1c       	adc	r11, r11
     ad6:	a4 0c       	add	r10, r4
     ad8:	b5 1c       	adc	r11, r5
     ada:	88 0c       	add	r8, r8
     adc:	99 1c       	adc	r9, r9
     ade:	84 0c       	add	r8, r4
     ae0:	95 1c       	adc	r9, r5
     ae2:	31 01       	movw	r6, r2
     ae4:	6e 18       	sub	r6, r14
     ae6:	7f 08       	sbc	r7, r15
     ae8:	c7 01       	movw	r24, r14
     aea:	88 0f       	add	r24, r24
     aec:	99 1f       	adc	r25, r25
     aee:	91 95       	neg	r25
     af0:	81 95       	neg	r24
     af2:	91 09       	sbc	r25, r1
     af4:	96 cf       	rjmp	.-212    	; 0xa22 <FUNCshellsort+0x4a>
			for (j=i-gap; j>=0 && v[j]>v[j+gap]; j-=gap){
				temp = v[j];
				v[j] = v[j+gap];
				v[j+gap] = temp;
			}
}
     af6:	0f 90       	pop	r0
     af8:	0f 90       	pop	r0
     afa:	0f 90       	pop	r0
     afc:	0f 90       	pop	r0
     afe:	df 91       	pop	r29
     b00:	cf 91       	pop	r28
     b02:	1f 91       	pop	r17
     b04:	0f 91       	pop	r16
     b06:	ff 90       	pop	r15
     b08:	ef 90       	pop	r14
     b0a:	df 90       	pop	r13
     b0c:	cf 90       	pop	r12
     b0e:	bf 90       	pop	r11
     b10:	af 90       	pop	r10
     b12:	9f 90       	pop	r9
     b14:	8f 90       	pop	r8
     b16:	7f 90       	pop	r7
     b18:	6f 90       	pop	r6
     b1a:	5f 90       	pop	r5
     b1c:	4f 90       	pop	r4
     b1e:	3f 90       	pop	r3
     b20:	2f 90       	pop	r2
     b22:	08 95       	ret

00000b24 <FUNCpmax>:
	if(a1 > a2){
		biggest = a1;
	}else{
		biggest = a2;
	}
	return biggest;
     b24:	86 17       	cp	r24, r22
     b26:	97 07       	cpc	r25, r23
     b28:	0c f4       	brge	.+2      	; 0xb2c <FUNCpmax+0x8>
     b2a:	cb 01       	movw	r24, r22
}
     b2c:	08 95       	ret

00000b2e <FUNCgcd>:
// common divisor
int FUNCgcd (int u, int v)
{
     b2e:	9b 01       	movw	r18, r22
	int temp;
	while ( v != 0 ) {
     b30:	67 2b       	or	r22, r23
     b32:	11 f4       	brne	.+4      	; 0xb38 <FUNCgcd+0xa>
     b34:	08 95       	ret
		temp = u % v;
		u = v;
		v = temp;
     b36:	9a 01       	movw	r18, r20
// common divisor
int FUNCgcd (int u, int v)
{
	int temp;
	while ( v != 0 ) {
		temp = u % v;
     b38:	b9 01       	movw	r22, r18
     b3a:	0e 94 50 18 	call	0x30a0	; 0x30a0 <__divmodhi4>
     b3e:	ac 01       	movw	r20, r24
     b40:	82 2f       	mov	r24, r18
     b42:	93 2f       	mov	r25, r19
}
// common divisor
int FUNCgcd (int u, int v)
{
	int temp;
	while ( v != 0 ) {
     b44:	41 15       	cp	r20, r1
     b46:	51 05       	cpc	r21, r1
     b48:	b1 f7       	brne	.-20     	; 0xb36 <FUNCgcd+0x8>
		temp = u % v;
		u = v;
		v = temp;
	}
	return u;
}
     b4a:	08 95       	ret

00000b4c <FUNCstrToInt>:
// Function to convert a string to an integer
int FUNCstrToInt (const char string[])
{
     b4c:	fc 01       	movw	r30, r24
	int i, intValue, result = 0;
	for ( i = 0; string[i] >= '0' && string[i] <= '9'; ++i ){
     b4e:	90 81       	ld	r25, Z
     b50:	80 ed       	ldi	r24, 0xD0	; 208
     b52:	89 0f       	add	r24, r25
     b54:	8a 30       	cpi	r24, 0x0A	; 10
     b56:	d0 f4       	brcc	.+52     	; 0xb8c <FUNCstrToInt+0x40>
     b58:	31 96       	adiw	r30, 0x01	; 1
     b5a:	20 e0       	ldi	r18, 0x00	; 0
     b5c:	30 e0       	ldi	r19, 0x00	; 0
		intValue = string[i] - '0';
		result = result * 10 + intValue;
     b5e:	a9 01       	movw	r20, r18
     b60:	44 0f       	add	r20, r20
     b62:	55 1f       	adc	r21, r21
     b64:	22 0f       	add	r18, r18
     b66:	33 1f       	adc	r19, r19
     b68:	22 0f       	add	r18, r18
     b6a:	33 1f       	adc	r19, r19
     b6c:	22 0f       	add	r18, r18
     b6e:	33 1f       	adc	r19, r19
     b70:	42 0f       	add	r20, r18
     b72:	53 1f       	adc	r21, r19
     b74:	29 2f       	mov	r18, r25
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	20 53       	subi	r18, 0x30	; 48
     b7a:	31 09       	sbc	r19, r1
     b7c:	24 0f       	add	r18, r20
     b7e:	35 1f       	adc	r19, r21
}
// Function to convert a string to an integer
int FUNCstrToInt (const char string[])
{
	int i, intValue, result = 0;
	for ( i = 0; string[i] >= '0' && string[i] <= '9'; ++i ){
     b80:	91 91       	ld	r25, Z+
     b82:	80 ed       	ldi	r24, 0xD0	; 208
     b84:	89 0f       	add	r24, r25
     b86:	8a 30       	cpi	r24, 0x0A	; 10
     b88:	50 f3       	brcs	.-44     	; 0xb5e <FUNCstrToInt+0x12>
     b8a:	02 c0       	rjmp	.+4      	; 0xb90 <FUNCstrToInt+0x44>
	return u;
}
// Function to convert a string to an integer
int FUNCstrToInt (const char string[])
{
	int i, intValue, result = 0;
     b8c:	20 e0       	ldi	r18, 0x00	; 0
     b8e:	30 e0       	ldi	r19, 0x00	; 0
	for ( i = 0; string[i] >= '0' && string[i] <= '9'; ++i ){
		intValue = string[i] - '0';
		result = result * 10 + intValue;
	}
	return result;
}
     b90:	c9 01       	movw	r24, r18
     b92:	08 95       	ret

00000b94 <FUNCfilter>:
uint8_t FUNCfilter(uint8_t mask, uint8_t data)
{
	uint8_t Z;
	Z=mask & data;
	return Z;
}
     b94:	86 23       	and	r24, r22
     b96:	08 95       	ret

00000b98 <FUNCticks>:
// ticks
unsigned int FUNCticks(unsigned int num)
{
	unsigned int count;
	for(count=0;count<num;count++)
     b98:	00 97       	sbiw	r24, 0x00	; 0
     b9a:	39 f0       	breq	.+14     	; 0xbaa <FUNCticks+0x12>
     b9c:	20 e0       	ldi	r18, 0x00	; 0
     b9e:	30 e0       	ldi	r19, 0x00	; 0
     ba0:	2f 5f       	subi	r18, 0xFF	; 255
     ba2:	3f 4f       	sbci	r19, 0xFF	; 255
     ba4:	82 17       	cp	r24, r18
     ba6:	93 07       	cpc	r25, r19
     ba8:	d9 f7       	brne	.-10     	; 0xba0 <FUNCticks+0x8>
		;
	return count;
}
     baa:	08 95       	ret

00000bac <FUNCtwocomptoint8bit>:
// Two's Complement function
int FUNCtwocomptoint8bit(int twoscomp){
  
  //Let's see if the byte is negative
  if (twoscomp & 0B10000000){
     bac:	87 ff       	sbrs	r24, 7
     bae:	08 c0       	rjmp	.+16     	; 0xbc0 <FUNCtwocomptoint8bit+0x14>
    //Invert
    twoscomp = ~twoscomp + 1;
     bb0:	91 95       	neg	r25
     bb2:	81 95       	neg	r24
     bb4:	91 09       	sbc	r25, r1
	twoscomp = (twoscomp & 0B11111111);
    //Cast as int and multiply by negative one
    int value = (int)(twoscomp)*(-1);
     bb6:	99 27       	eor	r25, r25
     bb8:	91 95       	neg	r25
     bba:	81 95       	neg	r24
     bbc:	91 09       	sbc	r25, r1
    return value;
     bbe:	08 95       	ret
    //Byte is non-negative, therefore convert to decimal and display
    //Make sure we are never over 1279
    twoscomp = (twoscomp & 0B01111111);
    //Cast as int and return
    int value = (int)(twoscomp);
    return value;
     bc0:	8f 77       	andi	r24, 0x7F	; 127
     bc2:	99 27       	eor	r25, r25
  }
}
     bc4:	08 95       	ret

00000bc6 <FUNCtwocomptoint10bit>:
// Two's Complement function, shifts 10 bit binary to signed integers (-512 to 512)
int FUNCtwocomptoint10bit(int twoscomp){
	
  //Let's see if the byte is negative
  if (twoscomp & 0x200){
     bc6:	91 ff       	sbrs	r25, 1
     bc8:	08 c0       	rjmp	.+16     	; 0xbda <FUNCtwocomptoint10bit+0x14>
    //Invert
    twoscomp = ~twoscomp + 1;
     bca:	91 95       	neg	r25
     bcc:	81 95       	neg	r24
     bce:	91 09       	sbc	r25, r1
    twoscomp = (twoscomp & 0x3FF);
    //Cast as int and multiply by negative one
    int value = (int)(twoscomp)*(-1);
     bd0:	93 70       	andi	r25, 0x03	; 3
     bd2:	91 95       	neg	r25
     bd4:	81 95       	neg	r24
     bd6:	91 09       	sbc	r25, r1
    return value;
     bd8:	08 95       	ret
    //Byte is non-negative, therefore convert to decimal and display
    twoscomp = (twoscomp & 0x1FF);
    //Cast as int and return
    //Serial.println(twoscomp);
    int value = (int)(twoscomp);
    return value;
     bda:	91 70       	andi	r25, 0x01	; 1
  }
}
     bdc:	08 95       	ret

00000bde <FUNCtwocomptointnbit>:
// Two's Complement function, nbits
int FUNCtwocomptointnbit(int twoscomp, uint8_t nbits){
  unsigned int signmask;
  unsigned int mask;
  signmask = (1<<(nbits-1));
     bde:	61 50       	subi	r22, 0x01	; 1
     be0:	21 e0       	ldi	r18, 0x01	; 1
     be2:	30 e0       	ldi	r19, 0x00	; 0
     be4:	02 c0       	rjmp	.+4      	; 0xbea <FUNCtwocomptointnbit+0xc>
     be6:	22 0f       	add	r18, r18
     be8:	33 1f       	adc	r19, r19
     bea:	6a 95       	dec	r22
     bec:	e2 f7       	brpl	.-8      	; 0xbe6 <FUNCtwocomptointnbit+0x8>
  mask=signmask-1;
     bee:	a9 01       	movw	r20, r18
     bf0:	41 50       	subi	r20, 0x01	; 1
     bf2:	51 09       	sbc	r21, r1
  //Let's see if the number is negative
  if (twoscomp & signmask){
     bf4:	b9 01       	movw	r22, r18
     bf6:	68 23       	and	r22, r24
     bf8:	79 23       	and	r23, r25
     bfa:	67 2b       	or	r22, r23
     bfc:	29 f0       	breq	.+10     	; 0xc08 <FUNCtwocomptointnbit+0x2a>
	twoscomp &= mask;
    twoscomp -= signmask;
     bfe:	84 23       	and	r24, r20
     c00:	95 23       	and	r25, r21
     c02:	82 1b       	sub	r24, r18
     c04:	93 0b       	sbc	r25, r19
     c06:	08 95       	ret
  }else{
	  twoscomp &= mask;
     c08:	84 23       	and	r24, r20
     c0a:	95 23       	and	r25, r21
  }
  return twoscomp;
}
     c0c:	08 95       	ret

00000c0e <FUNCdec2bcd>:
// Convert Decimal to Binary Coded Decimal (BCD)
char FUNCdec2bcd(char num)
{
	return ((num/10 * 16) + (num % 10));
     c0e:	9d ec       	ldi	r25, 0xCD	; 205
     c10:	89 9f       	mul	r24, r25
     c12:	91 2d       	mov	r25, r1
     c14:	11 24       	eor	r1, r1
     c16:	96 95       	lsr	r25
     c18:	96 95       	lsr	r25
     c1a:	96 95       	lsr	r25
     c1c:	39 2f       	mov	r19, r25
     c1e:	33 0f       	add	r19, r19
     c20:	23 2f       	mov	r18, r19
     c22:	22 0f       	add	r18, r18
     c24:	22 0f       	add	r18, r18
     c26:	23 0f       	add	r18, r19
     c28:	82 1b       	sub	r24, r18
}
     c2a:	20 e1       	ldi	r18, 0x10	; 16
     c2c:	92 9f       	mul	r25, r18
     c2e:	80 0d       	add	r24, r0
     c30:	11 24       	eor	r1, r1
     c32:	08 95       	ret

00000c34 <FUNCbcd2dec>:
// Convert Binary Coded Decimal (BCD) to Decimal
char FUNCbcd2dec(char num)
{
	return ((num/16 * 10) + (num % 16));
     c34:	98 2f       	mov	r25, r24
     c36:	92 95       	swap	r25
     c38:	9f 70       	andi	r25, 0x0F	; 15
     c3a:	99 0f       	add	r25, r25
     c3c:	29 2f       	mov	r18, r25
     c3e:	22 0f       	add	r18, r18
     c40:	22 0f       	add	r18, r18
     c42:	92 0f       	add	r25, r18
     c44:	8f 70       	andi	r24, 0x0F	; 15
}
     c46:	89 0f       	add	r24, r25
     c48:	08 95       	ret

00000c4a <FUNCresizestr>:
char* FUNCresizestr(char *string, int size)
{
     c4a:	fc 01       	movw	r30, r24
	int i;
	FUNCstr[size]='\0';
     c4c:	db 01       	movw	r26, r22
     c4e:	a1 5c       	subi	r26, 0xC1	; 193
     c50:	bd 4f       	sbci	r27, 0xFD	; 253
     c52:	1c 92       	st	X, r1
	for(i=0;i<size;i++){
     c54:	16 16       	cp	r1, r22
     c56:	17 06       	cpc	r1, r23
     c58:	14 f5       	brge	.+68     	; 0xc9e <FUNCresizestr+0x54>
		if(*(string+i)=='\0'){
     c5a:	90 81       	ld	r25, Z
     c5c:	91 11       	cpse	r25, r1
     c5e:	0c c0       	rjmp	.+24     	; 0xc78 <FUNCresizestr+0x2e>
     c60:	17 c0       	rjmp	.+46     	; 0xc90 <FUNCresizestr+0x46>
     c62:	91 91       	ld	r25, Z+
     c64:	91 11       	cpse	r25, r1
     c66:	0d c0       	rjmp	.+26     	; 0xc82 <FUNCresizestr+0x38>
     c68:	15 c0       	rjmp	.+42     	; 0xc94 <FUNCresizestr+0x4a>
			for(;i<size;i++){
				FUNCstr[i]=' ';
     c6a:	81 93       	st	Z+, r24
{
	int i;
	FUNCstr[size]='\0';
	for(i=0;i<size;i++){
		if(*(string+i)=='\0'){
			for(;i<size;i++){
     c6c:	2f 5f       	subi	r18, 0xFF	; 255
     c6e:	3f 4f       	sbci	r19, 0xFF	; 255
     c70:	26 17       	cp	r18, r22
     c72:	37 07       	cpc	r19, r23
     c74:	d4 f3       	brlt	.-12     	; 0xc6a <FUNCresizestr+0x20>
     c76:	13 c0       	rjmp	.+38     	; 0xc9e <FUNCresizestr+0x54>
     c78:	af e3       	ldi	r26, 0x3F	; 63
     c7a:	b2 e0       	ldi	r27, 0x02	; 2
     c7c:	31 96       	adiw	r30, 0x01	; 1
char* FUNCresizestr(char *string, int size)
{
	int i;
	FUNCstr[size]='\0';
	for(i=0;i<size;i++){
		if(*(string+i)=='\0'){
     c7e:	20 e0       	ldi	r18, 0x00	; 0
     c80:	30 e0       	ldi	r19, 0x00	; 0
			for(;i<size;i++){
				FUNCstr[i]=' ';
			}
			break;
		}
		FUNCstr[i]=*(string+i);
     c82:	9d 93       	st	X+, r25
}
char* FUNCresizestr(char *string, int size)
{
	int i;
	FUNCstr[size]='\0';
	for(i=0;i<size;i++){
     c84:	2f 5f       	subi	r18, 0xFF	; 255
     c86:	3f 4f       	sbci	r19, 0xFF	; 255
     c88:	62 17       	cp	r22, r18
     c8a:	73 07       	cpc	r23, r19
     c8c:	51 f7       	brne	.-44     	; 0xc62 <FUNCresizestr+0x18>
     c8e:	07 c0       	rjmp	.+14     	; 0xc9e <FUNCresizestr+0x54>
     c90:	20 e0       	ldi	r18, 0x00	; 0
     c92:	30 e0       	ldi	r19, 0x00	; 0
     c94:	f9 01       	movw	r30, r18
     c96:	e1 5c       	subi	r30, 0xC1	; 193
     c98:	fd 4f       	sbci	r31, 0xFD	; 253
		if(*(string+i)=='\0'){
			for(;i<size;i++){
				FUNCstr[i]=' ';
     c9a:	80 e2       	ldi	r24, 0x20	; 32
     c9c:	e6 cf       	rjmp	.-52     	; 0xc6a <FUNCresizestr+0x20>
			break;
		}
		FUNCstr[i]=*(string+i);
	}
	return FUNCstr;
}
     c9e:	8f e3       	ldi	r24, 0x3F	; 63
     ca0:	92 e0       	ldi	r25, 0x02	; 2
     ca2:	08 95       	ret

00000ca4 <FUNCtrimmer>:
long FUNCtrimmer(long x, long in_min, long in_max, long out_min, long out_max)
/*
	same as arduino map function.
*/
{
     ca4:	4f 92       	push	r4
     ca6:	5f 92       	push	r5
     ca8:	6f 92       	push	r6
     caa:	7f 92       	push	r7
     cac:	af 92       	push	r10
     cae:	bf 92       	push	r11
     cb0:	cf 92       	push	r12
     cb2:	df 92       	push	r13
     cb4:	ef 92       	push	r14
     cb6:	ff 92       	push	r15
     cb8:	0f 93       	push	r16
     cba:	1f 93       	push	r17
     cbc:	cf 93       	push	r28
     cbe:	df 93       	push	r29
     cc0:	cd b7       	in	r28, 0x3d	; 61
     cc2:	de b7       	in	r29, 0x3e	; 62
     cc4:	29 01       	movw	r4, r18
     cc6:	3a 01       	movw	r6, r20
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
     cc8:	9b 01       	movw	r18, r22
     cca:	ac 01       	movw	r20, r24
     ccc:	24 19       	sub	r18, r4
     cce:	35 09       	sbc	r19, r5
     cd0:	46 09       	sbc	r20, r6
     cd2:	57 09       	sbc	r21, r7
     cd4:	89 89       	ldd	r24, Y+17	; 0x11
     cd6:	9a 89       	ldd	r25, Y+18	; 0x12
     cd8:	ab 89       	ldd	r26, Y+19	; 0x13
     cda:	bc 89       	ldd	r27, Y+20	; 0x14
     cdc:	bc 01       	movw	r22, r24
     cde:	cd 01       	movw	r24, r26
     ce0:	6a 19       	sub	r22, r10
     ce2:	7b 09       	sbc	r23, r11
     ce4:	8c 09       	sbc	r24, r12
     ce6:	9d 09       	sbc	r25, r13
     ce8:	0e 94 2d 18 	call	0x305a	; 0x305a <__mulsi3>
     cec:	a8 01       	movw	r20, r16
     cee:	97 01       	movw	r18, r14
     cf0:	24 19       	sub	r18, r4
     cf2:	35 09       	sbc	r19, r5
     cf4:	46 09       	sbc	r20, r6
     cf6:	57 09       	sbc	r21, r7
     cf8:	0e 94 85 18 	call	0x310a	; 0x310a <__divmodsi4>
     cfc:	ca 01       	movw	r24, r20
     cfe:	b9 01       	movw	r22, r18
     d00:	6a 0d       	add	r22, r10
     d02:	7b 1d       	adc	r23, r11
     d04:	8c 1d       	adc	r24, r12
     d06:	9d 1d       	adc	r25, r13
}
     d08:	df 91       	pop	r29
     d0a:	cf 91       	pop	r28
     d0c:	1f 91       	pop	r17
     d0e:	0f 91       	pop	r16
     d10:	ff 90       	pop	r15
     d12:	ef 90       	pop	r14
     d14:	df 90       	pop	r13
     d16:	cf 90       	pop	r12
     d18:	bf 90       	pop	r11
     d1a:	af 90       	pop	r10
     d1c:	7f 90       	pop	r7
     d1e:	6f 90       	pop	r6
     d20:	5f 90       	pop	r5
     d22:	4f 90       	pop	r4
     d24:	08 95       	ret

00000d26 <Pwr>:
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
     d26:	70 e0       	ldi	r23, 0x00	; 0
     d28:	61 15       	cp	r22, r1
     d2a:	71 05       	cpc	r23, r1
     d2c:	99 f0       	breq	.+38     	; 0xd54 <Pwr+0x2e>
     d2e:	41 e0       	ldi	r20, 0x01	; 1
     d30:	50 e0       	ldi	r21, 0x00	; 0
     d32:	21 e0       	ldi	r18, 0x01	; 1
     d34:	30 e0       	ldi	r19, 0x00	; 0
        p = p * bs;
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	fa 01       	movw	r30, r20
     d3a:	e8 9f       	mul	r30, r24
     d3c:	a0 01       	movw	r20, r0
     d3e:	e9 9f       	mul	r30, r25
     d40:	50 0d       	add	r21, r0
     d42:	f8 9f       	mul	r31, r24
     d44:	50 0d       	add	r21, r0
     d46:	11 24       	eor	r1, r1
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
     d48:	2f 5f       	subi	r18, 0xFF	; 255
     d4a:	3f 4f       	sbci	r19, 0xFF	; 255
     d4c:	62 17       	cp	r22, r18
     d4e:	73 07       	cpc	r23, r19
     d50:	98 f7       	brcc	.-26     	; 0xd38 <Pwr+0x12>
     d52:	02 c0       	rjmp	.+4      	; 0xd58 <Pwr+0x32>
}
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
     d54:	41 e0       	ldi	r20, 0x01	; 1
     d56:	50 e0       	ldi	r21, 0x00	; 0
    for (i = 1; i <= n; ++i)
        p = p * bs;
    return p;
}
     d58:	ca 01       	movw	r24, r20
     d5a:	08 95       	ret

00000d5c <StringLength>:
// Function to count the number of characters in a string
int StringLength (const char string[])
{
	int count = 0;
	while ( string[count] != '\0' )
     d5c:	fc 01       	movw	r30, r24
     d5e:	20 81       	ld	r18, Z
     d60:	22 23       	and	r18, r18
     d62:	41 f0       	breq	.+16     	; 0xd74 <StringLength+0x18>
     d64:	31 96       	adiw	r30, 0x01	; 1
     d66:	80 e0       	ldi	r24, 0x00	; 0
     d68:	90 e0       	ldi	r25, 0x00	; 0
		++count;
     d6a:	01 96       	adiw	r24, 0x01	; 1
}
// Function to count the number of characters in a string
int StringLength (const char string[])
{
	int count = 0;
	while ( string[count] != '\0' )
     d6c:	21 91       	ld	r18, Z+
     d6e:	21 11       	cpse	r18, r1
     d70:	fc cf       	rjmp	.-8      	; 0xd6a <StringLength+0xe>
     d72:	08 95       	ret
    return p;
}
// Function to count the number of characters in a string
int StringLength (const char string[])
{
	int count = 0;
     d74:	80 e0       	ldi	r24, 0x00	; 0
     d76:	90 e0       	ldi	r25, 0x00	; 0
	while ( string[count] != '\0' )
		++count;
	return count;
}
     d78:	08 95       	ret

00000d7a <FUNCtrim>:
	Reverse(FUNCstr);
	return FUNCstr;
}
// trim: remove trailing blanks, tabs, newlines
int FUNCtrim(char s[])
{
     d7a:	cf 93       	push	r28
     d7c:	df 93       	push	r29
     d7e:	ec 01       	movw	r28, r24
	int n;
	for (n = StringLength(s)-1; n >= 0; n--)
     d80:	ed df       	rcall	.-38     	; 0xd5c <StringLength>
     d82:	9c 01       	movw	r18, r24
     d84:	21 50       	subi	r18, 0x01	; 1
     d86:	31 09       	sbc	r19, r1
     d88:	62 f0       	brmi	.+24     	; 0xda2 <FUNCtrim+0x28>
     d8a:	fe 01       	movw	r30, r28
     d8c:	e8 0f       	add	r30, r24
     d8e:	f9 1f       	adc	r31, r25
		if (s[n] != ' ' && s[n] != '\t' && s[n] != '\n')
     d90:	92 91       	ld	r25, -Z
     d92:	90 32       	cpi	r25, 0x20	; 32
     d94:	19 f0       	breq	.+6      	; 0xd9c <FUNCtrim+0x22>
     d96:	99 50       	subi	r25, 0x09	; 9
     d98:	92 30       	cpi	r25, 0x02	; 2
     d9a:	18 f4       	brcc	.+6      	; 0xda2 <FUNCtrim+0x28>
}
// trim: remove trailing blanks, tabs, newlines
int FUNCtrim(char s[])
{
	int n;
	for (n = StringLength(s)-1; n >= 0; n--)
     d9c:	21 50       	subi	r18, 0x01	; 1
     d9e:	31 09       	sbc	r19, r1
     da0:	b8 f7       	brcc	.-18     	; 0xd90 <FUNCtrim+0x16>
		if (s[n] != ' ' && s[n] != '\t' && s[n] != '\n')
			break;
	s[n+1] = '\0';
     da2:	c2 0f       	add	r28, r18
     da4:	d3 1f       	adc	r29, r19
     da6:	19 82       	std	Y+1, r1	; 0x01
	return n;
}
     da8:	c9 01       	movw	r24, r18
     daa:	df 91       	pop	r29
     dac:	cf 91       	pop	r28
     dae:	08 95       	ret

00000db0 <Reverse>:
		++count;
	return count;
}
// reverse: reverse string s in place
void Reverse(char s[])
{
     db0:	cf 93       	push	r28
     db2:	df 93       	push	r29
     db4:	ec 01       	movw	r28, r24
	int c, i, j;
	for (i = 0, j = StringLength(s)-1; i < j; i++, j--){
     db6:	d2 df       	rcall	.-92     	; 0xd5c <StringLength>
     db8:	9c 01       	movw	r18, r24
     dba:	21 50       	subi	r18, 0x01	; 1
     dbc:	31 09       	sbc	r19, r1
     dbe:	12 16       	cp	r1, r18
     dc0:	13 06       	cpc	r1, r19
     dc2:	84 f4       	brge	.+32     	; 0xde4 <Reverse+0x34>
     dc4:	de 01       	movw	r26, r28
     dc6:	a8 0f       	add	r26, r24
     dc8:	b9 1f       	adc	r27, r25
     dca:	fe 01       	movw	r30, r28
     dcc:	80 e0       	ldi	r24, 0x00	; 0
     dce:	90 e0       	ldi	r25, 0x00	; 0
		c = s[i];
     dd0:	40 81       	ld	r20, Z
		s[i] = s[j];
     dd2:	5e 91       	ld	r21, -X
     dd4:	51 93       	st	Z+, r21
		s[j] = c;
     dd6:	4c 93       	st	X, r20
}
// reverse: reverse string s in place
void Reverse(char s[])
{
	int c, i, j;
	for (i = 0, j = StringLength(s)-1; i < j; i++, j--){
     dd8:	01 96       	adiw	r24, 0x01	; 1
     dda:	21 50       	subi	r18, 0x01	; 1
     ddc:	31 09       	sbc	r19, r1
     dde:	82 17       	cp	r24, r18
     de0:	93 07       	cpc	r25, r19
     de2:	b4 f3       	brlt	.-20     	; 0xdd0 <Reverse+0x20>
		c = s[i];
		s[i] = s[j];
		s[j] = c;
	}
}
     de4:	df 91       	pop	r29
     de6:	cf 91       	pop	r28
     de8:	08 95       	ret

00000dea <FUNCi32toa>:
				v[j+gap] = temp;
			}
}
// i32toa: convert n to characters in s
char* FUNCi32toa(int32_t n)
{
     dea:	8f 92       	push	r8
     dec:	9f 92       	push	r9
     dee:	af 92       	push	r10
     df0:	bf 92       	push	r11
     df2:	cf 92       	push	r12
     df4:	df 92       	push	r13
     df6:	ef 92       	push	r14
     df8:	ff 92       	push	r15
     dfa:	0f 93       	push	r16
     dfc:	1f 93       	push	r17
     dfe:	cf 93       	push	r28
     e00:	df 93       	push	r29
     e02:	6b 01       	movw	r12, r22
     e04:	7c 01       	movw	r14, r24
     e06:	dc 01       	movw	r26, r24
     e08:	cb 01       	movw	r24, r22
     e0a:	ff 20       	and	r15, r15
     e0c:	3c f4       	brge	.+14     	; 0xe1c <FUNCi32toa+0x32>
     e0e:	88 27       	eor	r24, r24
     e10:	99 27       	eor	r25, r25
     e12:	dc 01       	movw	r26, r24
     e14:	8c 19       	sub	r24, r12
     e16:	9d 09       	sbc	r25, r13
     e18:	ae 09       	sbc	r26, r14
     e1a:	bf 09       	sbc	r27, r15
     e1c:	bc 01       	movw	r22, r24
     e1e:	cd 01       	movw	r24, r26
     e20:	10 e0       	ldi	r17, 0x00	; 0
	int32_t sign;
	if ((sign = n) < 0) // record sign
	n = -n; // make n positive
	i = 0;
	do { // generate digits in reverse order
		FUNCstr[i++] = n % 10 + '0'; // get next digit
     e22:	0f 2e       	mov	r0, r31
     e24:	fa e0       	ldi	r31, 0x0A	; 10
     e26:	8f 2e       	mov	r8, r31
     e28:	91 2c       	mov	r9, r1
     e2a:	a1 2c       	mov	r10, r1
     e2c:	b1 2c       	mov	r11, r1
     e2e:	f0 2d       	mov	r31, r0
     e30:	01 c0       	rjmp	.+2      	; 0xe34 <FUNCi32toa+0x4a>
     e32:	10 2f       	mov	r17, r16
     e34:	01 e0       	ldi	r16, 0x01	; 1
     e36:	01 0f       	add	r16, r17
     e38:	c1 2f       	mov	r28, r17
     e3a:	d0 e0       	ldi	r29, 0x00	; 0
     e3c:	c1 5c       	subi	r28, 0xC1	; 193
     e3e:	dd 4f       	sbci	r29, 0xFD	; 253
     e40:	a5 01       	movw	r20, r10
     e42:	94 01       	movw	r18, r8
     e44:	0e 94 85 18 	call	0x310a	; 0x310a <__divmodsi4>
     e48:	60 5d       	subi	r22, 0xD0	; 208
     e4a:	68 83       	st	Y, r22
	}while ((n /= 10) > 0); // delete it
     e4c:	62 2f       	mov	r22, r18
     e4e:	73 2f       	mov	r23, r19
     e50:	84 2f       	mov	r24, r20
     e52:	95 2f       	mov	r25, r21
     e54:	16 16       	cp	r1, r22
     e56:	17 06       	cpc	r1, r23
     e58:	18 06       	cpc	r1, r24
     e5a:	19 06       	cpc	r1, r25
     e5c:	54 f3       	brlt	.-44     	; 0xe32 <FUNCi32toa+0x48>
	if (sign < 0)
     e5e:	ff 20       	and	r15, r15
     e60:	44 f4       	brge	.+16     	; 0xe72 <FUNCi32toa+0x88>
	FUNCstr[i++] = '-';
     e62:	e0 2f       	mov	r30, r16
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	e1 5c       	subi	r30, 0xC1	; 193
     e68:	fd 4f       	sbci	r31, 0xFD	; 253
     e6a:	8d e2       	ldi	r24, 0x2D	; 45
     e6c:	80 83       	st	Z, r24
     e6e:	02 e0       	ldi	r16, 0x02	; 2
     e70:	01 0f       	add	r16, r17
	FUNCstr[i] = '\0';
     e72:	e0 2f       	mov	r30, r16
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	e1 5c       	subi	r30, 0xC1	; 193
     e78:	fd 4f       	sbci	r31, 0xFD	; 253
     e7a:	10 82       	st	Z, r1
	Reverse(FUNCstr);
     e7c:	8f e3       	ldi	r24, 0x3F	; 63
     e7e:	92 e0       	ldi	r25, 0x02	; 2
     e80:	97 df       	rcall	.-210    	; 0xdb0 <Reverse>
	return FUNCstr;
}
     e82:	8f e3       	ldi	r24, 0x3F	; 63
     e84:	92 e0       	ldi	r25, 0x02	; 2
     e86:	df 91       	pop	r29
     e88:	cf 91       	pop	r28
     e8a:	1f 91       	pop	r17
     e8c:	0f 91       	pop	r16
     e8e:	ff 90       	pop	r15
     e90:	ef 90       	pop	r14
     e92:	df 90       	pop	r13
     e94:	cf 90       	pop	r12
     e96:	bf 90       	pop	r11
     e98:	af 90       	pop	r10
     e9a:	9f 90       	pop	r9
     e9c:	8f 90       	pop	r8
     e9e:	08 95       	ret

00000ea0 <FUNCi16toa>:
// i16toa: convert n to characters in s
char* FUNCi16toa(int16_t n)
{
     ea0:	0f 93       	push	r16
     ea2:	1f 93       	push	r17
     ea4:	cf 93       	push	r28
     ea6:	df 93       	push	r29
     ea8:	ec 01       	movw	r28, r24
     eaa:	99 23       	and	r25, r25
     eac:	24 f4       	brge	.+8      	; 0xeb6 <FUNCi16toa+0x16>
     eae:	88 27       	eor	r24, r24
     eb0:	99 27       	eor	r25, r25
     eb2:	8c 1b       	sub	r24, r28
     eb4:	9d 0b       	sbc	r25, r29
     eb6:	20 e0       	ldi	r18, 0x00	; 0
	int16_t sign;
	if ((sign = n) < 0) // record sign
		n = -n; // make n positive
	i = 0;
	do { // generate digits in reverse order
		FUNCstr[i++] = n % 10 + '0'; // get next digit
     eb8:	0a e0       	ldi	r16, 0x0A	; 10
     eba:	10 e0       	ldi	r17, 0x00	; 0
     ebc:	01 c0       	rjmp	.+2      	; 0xec0 <FUNCi16toa+0x20>
     ebe:	23 2f       	mov	r18, r19
     ec0:	31 e0       	ldi	r19, 0x01	; 1
     ec2:	32 0f       	add	r19, r18
     ec4:	e2 2f       	mov	r30, r18
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	e1 5c       	subi	r30, 0xC1	; 193
     eca:	fd 4f       	sbci	r31, 0xFD	; 253
     ecc:	b8 01       	movw	r22, r16
     ece:	0e 94 50 18 	call	0x30a0	; 0x30a0 <__divmodhi4>
     ed2:	80 5d       	subi	r24, 0xD0	; 208
     ed4:	80 83       	st	Z, r24
	}while ((n /= 10) > 0); // delete it
     ed6:	86 2f       	mov	r24, r22
     ed8:	97 2f       	mov	r25, r23
     eda:	18 16       	cp	r1, r24
     edc:	19 06       	cpc	r1, r25
     ede:	7c f3       	brlt	.-34     	; 0xebe <FUNCi16toa+0x1e>
	if (sign < 0)
     ee0:	dd 23       	and	r29, r29
     ee2:	44 f4       	brge	.+16     	; 0xef4 <FUNCi16toa+0x54>
		FUNCstr[i++] = '-';
     ee4:	e3 2f       	mov	r30, r19
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	e1 5c       	subi	r30, 0xC1	; 193
     eea:	fd 4f       	sbci	r31, 0xFD	; 253
     eec:	8d e2       	ldi	r24, 0x2D	; 45
     eee:	80 83       	st	Z, r24
     ef0:	32 e0       	ldi	r19, 0x02	; 2
     ef2:	32 0f       	add	r19, r18
	FUNCstr[i] = '\0';
     ef4:	e3 2f       	mov	r30, r19
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	e1 5c       	subi	r30, 0xC1	; 193
     efa:	fd 4f       	sbci	r31, 0xFD	; 253
     efc:	10 82       	st	Z, r1
	Reverse(FUNCstr);
     efe:	8f e3       	ldi	r24, 0x3F	; 63
     f00:	92 e0       	ldi	r25, 0x02	; 2
     f02:	56 df       	rcall	.-340    	; 0xdb0 <Reverse>
	return FUNCstr;
}
     f04:	8f e3       	ldi	r24, 0x3F	; 63
     f06:	92 e0       	ldi	r25, 0x02	; 2
     f08:	df 91       	pop	r29
     f0a:	cf 91       	pop	r28
     f0c:	1f 91       	pop	r17
     f0e:	0f 91       	pop	r16
     f10:	08 95       	ret

00000f12 <FUNCui16toa>:
// ui16toa: convert n to characters in s
char* FUNCui16toa(uint16_t n)
{
     f12:	cf 93       	push	r28
     f14:	ac 01       	movw	r20, r24
	uint8_t i;
	i = 0;
     f16:	e0 e0       	ldi	r30, 0x00	; 0
	do { // generate digits in reverse order
		FUNCstr[i++] = n % 10 + '0'; // get next digit
     f18:	c1 e0       	ldi	r28, 0x01	; 1
     f1a:	ce 0f       	add	r28, r30
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	e1 5c       	subi	r30, 0xC1	; 193
     f20:	fd 4f       	sbci	r31, 0xFD	; 253
     f22:	9a 01       	movw	r18, r20
     f24:	ad ec       	ldi	r26, 0xCD	; 205
     f26:	bc ec       	ldi	r27, 0xCC	; 204
     f28:	0e 94 aa 18 	call	0x3154	; 0x3154 <__umulhisi3>
     f2c:	96 95       	lsr	r25
     f2e:	87 95       	ror	r24
     f30:	96 95       	lsr	r25
     f32:	87 95       	ror	r24
     f34:	96 95       	lsr	r25
     f36:	87 95       	ror	r24
     f38:	9c 01       	movw	r18, r24
     f3a:	22 0f       	add	r18, r18
     f3c:	33 1f       	adc	r19, r19
     f3e:	88 0f       	add	r24, r24
     f40:	99 1f       	adc	r25, r25
     f42:	88 0f       	add	r24, r24
     f44:	99 1f       	adc	r25, r25
     f46:	88 0f       	add	r24, r24
     f48:	99 1f       	adc	r25, r25
     f4a:	82 0f       	add	r24, r18
     f4c:	93 1f       	adc	r25, r19
     f4e:	9a 01       	movw	r18, r20
     f50:	28 1b       	sub	r18, r24
     f52:	39 0b       	sbc	r19, r25
     f54:	c9 01       	movw	r24, r18
     f56:	80 5d       	subi	r24, 0xD0	; 208
     f58:	80 83       	st	Z, r24
	}while ((n /= 10) > 0); // delete it
     f5a:	9a 01       	movw	r18, r20
     f5c:	0e 94 aa 18 	call	0x3154	; 0x3154 <__umulhisi3>
     f60:	ac 01       	movw	r20, r24
     f62:	56 95       	lsr	r21
     f64:	47 95       	ror	r20
     f66:	56 95       	lsr	r21
     f68:	47 95       	ror	r20
     f6a:	56 95       	lsr	r21
     f6c:	47 95       	ror	r20
char* FUNCui16toa(uint16_t n)
{
	uint8_t i;
	i = 0;
	do { // generate digits in reverse order
		FUNCstr[i++] = n % 10 + '0'; // get next digit
     f6e:	ec 2f       	mov	r30, r28
	}while ((n /= 10) > 0); // delete it
     f70:	41 15       	cp	r20, r1
     f72:	51 05       	cpc	r21, r1
     f74:	89 f6       	brne	.-94     	; 0xf18 <FUNCui16toa+0x6>
	FUNCstr[i] = '\0';
     f76:	ec 2f       	mov	r30, r28
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	e1 5c       	subi	r30, 0xC1	; 193
     f7c:	fd 4f       	sbci	r31, 0xFD	; 253
     f7e:	10 82       	st	Z, r1
	Reverse(FUNCstr);
     f80:	8f e3       	ldi	r24, 0x3F	; 63
     f82:	92 e0       	ldi	r25, 0x02	; 2
     f84:	15 df       	rcall	.-470    	; 0xdb0 <Reverse>
	return FUNCstr;
}
     f86:	8f e3       	ldi	r24, 0x3F	; 63
     f88:	92 e0       	ldi	r25, 0x02	; 2
     f8a:	cf 91       	pop	r28
     f8c:	08 95       	ret

00000f8e <FUNCbcd2bin>:
		s[j] = c;
	}
}
unsigned char FUNCbcd2bin(unsigned char val)
{
	return (val & 0x0f) + (val >> 4) * 10;
     f8e:	98 2f       	mov	r25, r24
     f90:	92 95       	swap	r25
     f92:	9f 70       	andi	r25, 0x0F	; 15
     f94:	99 0f       	add	r25, r25
     f96:	29 2f       	mov	r18, r25
     f98:	22 0f       	add	r18, r18
     f9a:	22 0f       	add	r18, r18
     f9c:	92 0f       	add	r25, r18
     f9e:	8f 70       	andi	r24, 0x0F	; 15
}
     fa0:	89 0f       	add	r24, r25
     fa2:	08 95       	ret

00000fa4 <FUNCbin2bcd>:
unsigned char FUNCbin2bcd(unsigned val)
{
     fa4:	ac 01       	movw	r20, r24
	return ((val / 10) << 4) + val % 10;
     fa6:	9c 01       	movw	r18, r24
     fa8:	ad ec       	ldi	r26, 0xCD	; 205
     faa:	bc ec       	ldi	r27, 0xCC	; 204
     fac:	0e 94 aa 18 	call	0x3154	; 0x3154 <__umulhisi3>
     fb0:	96 95       	lsr	r25
     fb2:	87 95       	ror	r24
     fb4:	96 95       	lsr	r25
     fb6:	87 95       	ror	r24
     fb8:	96 95       	lsr	r25
     fba:	87 95       	ror	r24
     fbc:	bc 01       	movw	r22, r24
     fbe:	66 0f       	add	r22, r22
     fc0:	77 1f       	adc	r23, r23
     fc2:	9c 01       	movw	r18, r24
     fc4:	22 0f       	add	r18, r18
     fc6:	33 1f       	adc	r19, r19
     fc8:	22 0f       	add	r18, r18
     fca:	33 1f       	adc	r19, r19
     fcc:	22 0f       	add	r18, r18
     fce:	33 1f       	adc	r19, r19
     fd0:	26 0f       	add	r18, r22
     fd2:	37 1f       	adc	r19, r23
     fd4:	42 1b       	sub	r20, r18
     fd6:	53 0b       	sbc	r21, r19
}
     fd8:	34 2f       	mov	r19, r20
     fda:	20 e1       	ldi	r18, 0x10	; 16
     fdc:	82 9f       	mul	r24, r18
     fde:	30 0d       	add	r19, r0
     fe0:	11 24       	eor	r1, r1
     fe2:	83 2f       	mov	r24, r19
     fe4:	08 95       	ret

00000fe6 <FUNCgcd1>:
long FUNCgcd1(long a, long b)
{
     fe6:	cf 92       	push	r12
     fe8:	df 92       	push	r13
     fea:	ef 92       	push	r14
     fec:	ff 92       	push	r15
     fee:	cf 93       	push	r28
     ff0:	df 93       	push	r29
     ff2:	cd b7       	in	r28, 0x3d	; 61
     ff4:	de b7       	in	r29, 0x3e	; 62
     ff6:	28 97       	sbiw	r28, 0x08	; 8
     ff8:	0f b6       	in	r0, 0x3f	; 63
     ffa:	f8 94       	cli
     ffc:	de bf       	out	0x3e, r29	; 62
     ffe:	0f be       	out	0x3f, r0	; 63
    1000:	cd bf       	out	0x3d, r28	; 61
    1002:	6b 01       	movw	r12, r22
    1004:	7c 01       	movw	r14, r24
    1006:	69 83       	std	Y+1, r22	; 0x01
    1008:	7a 83       	std	Y+2, r23	; 0x02
    100a:	8b 83       	std	Y+3, r24	; 0x03
    100c:	9c 83       	std	Y+4, r25	; 0x04
    100e:	2d 83       	std	Y+5, r18	; 0x05
    1010:	3e 83       	std	Y+6, r19	; 0x06
    1012:	4f 83       	std	Y+7, r20	; 0x07
    1014:	58 87       	std	Y+8, r21	; 0x08
	long r;
	if (a < b)
    1016:	c2 16       	cp	r12, r18
    1018:	d3 06       	cpc	r13, r19
    101a:	e4 06       	cpc	r14, r20
    101c:	f5 06       	cpc	r15, r21
    101e:	34 f4       	brge	.+12     	; 0x102c <FUNCgcd1+0x46>
		FUNCswap(&a, &b);
    1020:	be 01       	movw	r22, r28
    1022:	6b 5f       	subi	r22, 0xFB	; 251
    1024:	7f 4f       	sbci	r23, 0xFF	; 255
    1026:	ce 01       	movw	r24, r28
    1028:	01 96       	adiw	r24, 0x01	; 1
    102a:	85 dc       	rcall	.-1782   	; 0x936 <FUNCswap>
	if (!b){
    102c:	8d 81       	ldd	r24, Y+5	; 0x05
    102e:	9e 81       	ldd	r25, Y+6	; 0x06
    1030:	af 81       	ldd	r26, Y+7	; 0x07
    1032:	b8 85       	ldd	r27, Y+8	; 0x08
    1034:	89 2b       	or	r24, r25
    1036:	8a 2b       	or	r24, r26
    1038:	8b 2b       	or	r24, r27
    103a:	71 f4       	brne	.+28     	; 0x1058 <FUNCgcd1+0x72>
		while ((r = a % b) != 0) {
    103c:	69 81       	ldd	r22, Y+1	; 0x01
    103e:	7a 81       	ldd	r23, Y+2	; 0x02
    1040:	8b 81       	ldd	r24, Y+3	; 0x03
    1042:	9c 81       	ldd	r25, Y+4	; 0x04
    1044:	20 e0       	ldi	r18, 0x00	; 0
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	a9 01       	movw	r20, r18
    104a:	0e 94 85 18 	call	0x310a	; 0x310a <__divmodsi4>
    104e:	61 15       	cp	r22, r1
    1050:	71 05       	cpc	r23, r1
    1052:	81 05       	cpc	r24, r1
    1054:	91 05       	cpc	r25, r1
    1056:	29 f4       	brne	.+10     	; 0x1062 <FUNCgcd1+0x7c>
			a = b;
			b = r;
		}
	}	
	return b;
    1058:	6d 81       	ldd	r22, Y+5	; 0x05
    105a:	7e 81       	ldd	r23, Y+6	; 0x06
    105c:	8f 81       	ldd	r24, Y+7	; 0x07
    105e:	98 85       	ldd	r25, Y+8	; 0x08
    1060:	05 c0       	rjmp	.+10     	; 0x106c <FUNCgcd1+0x86>
	if (a < b)
		FUNCswap(&a, &b);
	if (!b){
		while ((r = a % b) != 0) {
			a = b;
			b = r;
    1062:	6d 83       	std	Y+5, r22	; 0x05
    1064:	7e 83       	std	Y+6, r23	; 0x06
    1066:	8f 83       	std	Y+7, r24	; 0x07
    1068:	98 87       	std	Y+8, r25	; 0x08
    106a:	f6 cf       	rjmp	.-20     	; 0x1058 <FUNCgcd1+0x72>
		}
	}	
	return b;
}
    106c:	28 96       	adiw	r28, 0x08	; 8
    106e:	0f b6       	in	r0, 0x3f	; 63
    1070:	f8 94       	cli
    1072:	de bf       	out	0x3e, r29	; 62
    1074:	0f be       	out	0x3f, r0	; 63
    1076:	cd bf       	out	0x3d, r28	; 61
    1078:	df 91       	pop	r29
    107a:	cf 91       	pop	r28
    107c:	ff 90       	pop	r15
    107e:	ef 90       	pop	r14
    1080:	df 90       	pop	r13
    1082:	cf 90       	pop	r12
    1084:	08 95       	ret

00001086 <FUNCpincheck>:
	uint8_t lh;
	if(port & (1<<pin))
		lh=1;
	else
		lh=0;
	return lh;
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	02 c0       	rjmp	.+4      	; 0x108e <FUNCpincheck+0x8>
    108a:	95 95       	asr	r25
    108c:	87 95       	ror	r24
    108e:	6a 95       	dec	r22
    1090:	e2 f7       	brpl	.-8      	; 0x108a <FUNCpincheck+0x4>
}
    1092:	81 70       	andi	r24, 0x01	; 1
    1094:	08 95       	ret

00001096 <FUNCprint_binary>:
char* FUNCprint_binary(uint8_t number)
{
    1096:	ef e3       	ldi	r30, 0x3F	; 63
    1098:	f2 e0       	ldi	r31, 0x02	; 2
	uint8_t i,c;
    for(i=128,c=0;i;i>>=1,c++){
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	20 e8       	ldi	r18, 0x80	; 128
	(number & i) ? (FUNCstr[c]='1') : (FUNCstr[c]='0');
    109e:	50 e3       	ldi	r21, 0x30	; 48
    10a0:	41 e3       	ldi	r20, 0x31	; 49
    10a2:	38 2f       	mov	r19, r24
    10a4:	32 23       	and	r19, r18
    10a6:	11 f0       	breq	.+4      	; 0x10ac <FUNCprint_binary+0x16>
    10a8:	40 83       	st	Z, r20
    10aa:	01 c0       	rjmp	.+2      	; 0x10ae <FUNCprint_binary+0x18>
    10ac:	50 83       	st	Z, r21
	return lh;
}
char* FUNCprint_binary(uint8_t number)
{
	uint8_t i,c;
    for(i=128,c=0;i;i>>=1,c++){
    10ae:	26 95       	lsr	r18
    10b0:	9f 5f       	subi	r25, 0xFF	; 255
    10b2:	31 96       	adiw	r30, 0x01	; 1
    10b4:	98 30       	cpi	r25, 0x08	; 8
    10b6:	a9 f7       	brne	.-22     	; 0x10a2 <FUNCprint_binary+0xc>
	(number & i) ? (FUNCstr[c]='1') : (FUNCstr[c]='0');
	}
	FUNCstr[c]='\0';
    10b8:	10 92 47 02 	sts	0x0247, r1	; 0x800247 <FUNCstr+0x8>
	return FUNCstr;
}
    10bc:	8f e3       	ldi	r24, 0x3F	; 63
    10be:	92 e0       	ldi	r25, 0x02	; 2
    10c0:	08 95       	ret

000010c2 <FUNCmayia>:
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
    10c2:	a4 2f       	mov	r26, r20
    10c4:	b0 e0       	ldi	r27, 0x00	; 0
    10c6:	10 97       	sbiw	r26, 0x00	; 0
    10c8:	61 f0       	breq	.+24     	; 0x10e2 <FUNCmayia+0x20>
    10ca:	21 e0       	ldi	r18, 0x01	; 1
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	e1 e0       	ldi	r30, 0x01	; 1
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
        p = p * bs;
    10d2:	ee 0f       	add	r30, r30
    10d4:	ff 1f       	adc	r31, r31
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
    10d6:	2f 5f       	subi	r18, 0xFF	; 255
    10d8:	3f 4f       	sbci	r19, 0xFF	; 255
    10da:	a2 17       	cp	r26, r18
    10dc:	b3 07       	cpc	r27, r19
    10de:	c8 f7       	brcc	.-14     	; 0x10d2 <FUNCmayia+0x10>
    10e0:	02 c0       	rjmp	.+4      	; 0x10e6 <FUNCmayia+0x24>
}
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    10e2:	e1 e0       	ldi	r30, 0x01	; 1
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
unsigned int FUNCmayia(unsigned int xi, unsigned int xf, uint8_t nbits)
{//magic formula
	unsigned int mask;
	unsigned int diff;
	unsigned int trans;
	mask=Pwr(2,nbits)-1;
    10e6:	31 97       	sbiw	r30, 0x01	; 1
	xi&=mask;
	xf&=mask;
    10e8:	6e 23       	and	r22, r30
    10ea:	7f 23       	and	r23, r31
	diff=xf^xi;
    10ec:	8e 23       	and	r24, r30
    10ee:	9f 23       	and	r25, r31
    10f0:	86 27       	eor	r24, r22
    10f2:	97 27       	eor	r25, r23
	trans=diff&xf;
	return (trans<<nbits)|diff;
    10f4:	68 23       	and	r22, r24
    10f6:	79 23       	and	r23, r25
    10f8:	02 c0       	rjmp	.+4      	; 0x10fe <FUNCmayia+0x3c>
    10fa:	66 0f       	add	r22, r22
    10fc:	77 1f       	adc	r23, r23
    10fe:	4a 95       	dec	r20
    1100:	e2 f7       	brpl	.-8      	; 0x10fa <FUNCmayia+0x38>
}
    1102:	86 2b       	or	r24, r22
    1104:	97 2b       	or	r25, r23
    1106:	08 95       	ret

00001108 <FUNCenable>:
// uint8_t TRANupdate(struct TRAN *tr, uint8_t idata);
/*
** procedure and function
*/
FUNC FUNCenable( void )
{
    1108:	fc 01       	movw	r30, r24
	uint8_t tSREG;
	tSREG=SREG;
    110a:	9f b7       	in	r25, 0x3f	; 63
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
    110c:	8f b7       	in	r24, 0x3f	; 63
    110e:	8f 77       	andi	r24, 0x7F	; 127
    1110:	8f bf       	out	0x3f, r24	; 63
	func.putstr=FUNCputstr;
	func.getnum=FUNCgetnum;
	func.getnumv2=FUNCgetnumv2;
	func.readint=FUNCreadint;
	*/
	SREG=tSREG;
    1112:	9f bf       	out	0x3f, r25	; 63
	/******/
	return func;
    1114:	83 e9       	ldi	r24, 0x93	; 147
    1116:	96 e0       	ldi	r25, 0x06	; 6
    1118:	91 83       	std	Z+1, r25	; 0x01
    111a:	80 83       	st	Z, r24
    111c:	8e ea       	ldi	r24, 0xAE	; 174
    111e:	96 e0       	ldi	r25, 0x06	; 6
    1120:	93 83       	std	Z+3, r25	; 0x03
    1122:	82 83       	std	Z+2, r24	; 0x02
    1124:	88 ed       	ldi	r24, 0xD8	; 216
    1126:	96 e0       	ldi	r25, 0x06	; 6
    1128:	95 83       	std	Z+5, r25	; 0x05
    112a:	84 83       	std	Z+4, r24	; 0x04
    112c:	81 e6       	ldi	r24, 0x61	; 97
    112e:	98 e0       	ldi	r25, 0x08	; 8
    1130:	97 83       	std	Z+7, r25	; 0x07
    1132:	86 83       	std	Z+6, r24	; 0x06
    1134:	80 e8       	ldi	r24, 0x80	; 128
    1136:	94 e0       	ldi	r25, 0x04	; 4
    1138:	91 87       	std	Z+9, r25	; 0x09
    113a:	80 87       	std	Z+8, r24	; 0x08
    113c:	8e e8       	ldi	r24, 0x8E	; 142
    113e:	94 e0       	ldi	r25, 0x04	; 4
    1140:	93 87       	std	Z+11, r25	; 0x0b
    1142:	82 87       	std	Z+10, r24	; 0x0a
    1144:	80 e9       	ldi	r24, 0x90	; 144
    1146:	94 e0       	ldi	r25, 0x04	; 4
    1148:	95 87       	std	Z+13, r25	; 0x0d
    114a:	84 87       	std	Z+12, r24	; 0x0c
    114c:	83 e9       	ldi	r24, 0x93	; 147
    114e:	94 e0       	ldi	r25, 0x04	; 4
    1150:	97 87       	std	Z+15, r25	; 0x0f
    1152:	86 87       	std	Z+14, r24	; 0x0e
    1154:	86 e9       	ldi	r24, 0x96	; 150
    1156:	94 e0       	ldi	r25, 0x04	; 4
    1158:	91 8b       	std	Z+17, r25	; 0x11
    115a:	80 8b       	std	Z+16, r24	; 0x10
    115c:	89 e9       	ldi	r24, 0x99	; 153
    115e:	94 e0       	ldi	r25, 0x04	; 4
    1160:	93 8b       	std	Z+19, r25	; 0x13
    1162:	82 8b       	std	Z+18, r24	; 0x12
    1164:	8a e8       	ldi	r24, 0x8A	; 138
    1166:	94 e0       	ldi	r25, 0x04	; 4
    1168:	95 8b       	std	Z+21, r25	; 0x15
    116a:	84 8b       	std	Z+20, r24	; 0x14
    116c:	8c e8       	ldi	r24, 0x8C	; 140
    116e:	94 e0       	ldi	r25, 0x04	; 4
    1170:	97 8b       	std	Z+23, r25	; 0x17
    1172:	86 8b       	std	Z+22, r24	; 0x16
    1174:	8b e9       	ldi	r24, 0x9B	; 155
    1176:	94 e0       	ldi	r25, 0x04	; 4
    1178:	91 8f       	std	Z+25, r25	; 0x19
    117a:	80 8f       	std	Z+24, r24	; 0x18
    117c:	8c eb       	ldi	r24, 0xBC	; 188
    117e:	94 e0       	ldi	r25, 0x04	; 4
    1180:	93 8f       	std	Z+27, r25	; 0x1b
    1182:	82 8f       	std	Z+26, r24	; 0x1a
    1184:	8a ec       	ldi	r24, 0xCA	; 202
    1186:	94 e0       	ldi	r25, 0x04	; 4
    1188:	95 8f       	std	Z+29, r25	; 0x1d
    118a:	84 8f       	std	Z+28, r24	; 0x1c
    118c:	8c ee       	ldi	r24, 0xEC	; 236
    118e:	94 e0       	ldi	r25, 0x04	; 4
    1190:	97 8f       	std	Z+31, r25	; 0x1f
    1192:	86 8f       	std	Z+30, r24	; 0x1e
    1194:	80 e5       	ldi	r24, 0x50	; 80
    1196:	97 e0       	ldi	r25, 0x07	; 7
    1198:	91 a3       	std	Z+33, r25	; 0x21
    119a:	80 a3       	std	Z+32, r24	; 0x20
    119c:	89 e8       	ldi	r24, 0x89	; 137
    119e:	97 e0       	ldi	r25, 0x07	; 7
    11a0:	93 a3       	std	Z+35, r25	; 0x23
    11a2:	82 a3       	std	Z+34, r24	; 0x22
    11a4:	85 ef       	ldi	r24, 0xF5	; 245
    11a6:	96 e0       	ldi	r25, 0x06	; 6
    11a8:	95 a3       	std	Z+37, r25	; 0x25
    11aa:	84 a3       	std	Z+36, r24	; 0x24
    11ac:	8d eb       	ldi	r24, 0xBD	; 189
    11ae:	96 e0       	ldi	r25, 0x06	; 6
    11b0:	97 a3       	std	Z+39, r25	; 0x27
    11b2:	86 a3       	std	Z+38, r24	; 0x26
    11b4:	82 e9       	ldi	r24, 0x92	; 146
    11b6:	95 e0       	ldi	r25, 0x05	; 5
    11b8:	91 a7       	std	Z+41, r25	; 0x29
    11ba:	80 a7       	std	Z+40, r24	; 0x28
    11bc:	87 e9       	ldi	r24, 0x97	; 151
    11be:	95 e0       	ldi	r25, 0x05	; 5
    11c0:	93 a7       	std	Z+43, r25	; 0x2b
    11c2:	82 a7       	std	Z+42, r24	; 0x2a
    11c4:	86 ea       	ldi	r24, 0xA6	; 166
    11c6:	95 e0       	ldi	r25, 0x05	; 5
    11c8:	95 a7       	std	Z+45, r25	; 0x2d
    11ca:	84 a7       	std	Z+44, r24	; 0x2c
    11cc:	8a ec       	ldi	r24, 0xCA	; 202
    11ce:	95 e0       	ldi	r25, 0x05	; 5
    11d0:	97 a7       	std	Z+47, r25	; 0x2f
    11d2:	86 a7       	std	Z+46, r24	; 0x2e
    11d4:	8c ec       	ldi	r24, 0xCC	; 204
    11d6:	95 e0       	ldi	r25, 0x05	; 5
    11d8:	91 ab       	std	Z+49, r25	; 0x31
    11da:	80 ab       	std	Z+48, r24	; 0x30
    11dc:	86 ed       	ldi	r24, 0xD6	; 214
    11de:	95 e0       	ldi	r25, 0x05	; 5
    11e0:	93 ab       	std	Z+51, r25	; 0x33
    11e2:	82 ab       	std	Z+50, r24	; 0x32
    11e4:	83 ee       	ldi	r24, 0xE3	; 227
    11e6:	95 e0       	ldi	r25, 0x05	; 5
    11e8:	95 ab       	std	Z+53, r25	; 0x35
    11ea:	84 ab       	std	Z+52, r24	; 0x34
    11ec:	8f ee       	ldi	r24, 0xEF	; 239
    11ee:	95 e0       	ldi	r25, 0x05	; 5
    11f0:	97 ab       	std	Z+55, r25	; 0x37
    11f2:	86 ab       	std	Z+54, r24	; 0x36
    11f4:	87 e0       	ldi	r24, 0x07	; 7
    11f6:	96 e0       	ldi	r25, 0x06	; 6
    11f8:	91 af       	std	Z+57, r25	; 0x39
    11fa:	80 af       	std	Z+56, r24	; 0x38
    11fc:	8a e1       	ldi	r24, 0x1A	; 26
    11fe:	96 e0       	ldi	r25, 0x06	; 6
    1200:	93 af       	std	Z+59, r25	; 0x3b
    1202:	82 af       	std	Z+58, r24	; 0x3a
    1204:	85 e2       	ldi	r24, 0x25	; 37
    1206:	96 e0       	ldi	r25, 0x06	; 6
    1208:	95 af       	std	Z+61, r25	; 0x3d
    120a:	84 af       	std	Z+60, r24	; 0x3c
    120c:	82 e5       	ldi	r24, 0x52	; 82
    120e:	96 e0       	ldi	r25, 0x06	; 6
    1210:	97 af       	std	Z+63, r25	; 0x3f
    1212:	86 af       	std	Z+62, r24	; 0x3e
    1214:	df 01       	movw	r26, r30
    1216:	a0 5c       	subi	r26, 0xC0	; 192
    1218:	bf 4f       	sbci	r27, 0xFF	; 255
    121a:	87 ec       	ldi	r24, 0xC7	; 199
    121c:	97 e0       	ldi	r25, 0x07	; 7
    121e:	11 96       	adiw	r26, 0x01	; 1
    1220:	9c 93       	st	X, r25
    1222:	8e 93       	st	-X, r24
    1224:	12 96       	adiw	r26, 0x02	; 2
    1226:	82 ed       	ldi	r24, 0xD2	; 210
    1228:	97 e0       	ldi	r25, 0x07	; 7
    122a:	11 96       	adiw	r26, 0x01	; 1
    122c:	9c 93       	st	X, r25
    122e:	8e 93       	st	-X, r24
    1230:	12 96       	adiw	r26, 0x02	; 2
    1232:	83 ef       	ldi	r24, 0xF3	; 243
    1234:	97 e0       	ldi	r25, 0x07	; 7
    1236:	11 96       	adiw	r26, 0x01	; 1
    1238:	9c 93       	st	X, r25
    123a:	8e 93       	st	-X, r24
    123c:	12 96       	adiw	r26, 0x02	; 2
    123e:	83 e4       	ldi	r24, 0x43	; 67
    1240:	98 e0       	ldi	r25, 0x08	; 8
    1242:	11 96       	adiw	r26, 0x01	; 1
    1244:	9c 93       	st	X, r25
    1246:	8e 93       	st	-X, r24
    1248:	12 96       	adiw	r26, 0x02	; 2
    124a:	8b e4       	ldi	r24, 0x4B	; 75
    124c:	98 e0       	ldi	r25, 0x08	; 8
    124e:	8d 93       	st	X+, r24
    1250:	9c 93       	st	X, r25
}
    1252:	cf 01       	movw	r24, r30
    1254:	08 95       	ret

00001256 <I2C_Start>:
	/***Vtable***/
}
/***void I2C_Start(void)***/
void I2C_Start(void)
{
  TWI_CONTROL_REGISTER = ((1<<TWINT) | (1<<TWSTA) | (1<<TWEN));
    1256:	e4 e7       	ldi	r30, 0x74	; 116
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	84 ea       	ldi	r24, 0xA4	; 164
    125c:	80 83       	st	Z, r24
  for (ticks=Nticks; !(TWI_CONTROL_REGISTER & (1<<TWINT)) && ticks; ticks--);
    125e:	8f ef       	ldi	r24, 0xFF	; 255
    1260:	93 e0       	ldi	r25, 0x03	; 3
    1262:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <ticks+0x1>
    1266:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <ticks>
    126a:	80 81       	ld	r24, Z
    126c:	88 23       	and	r24, r24
    126e:	5c f0       	brlt	.+22     	; 0x1286 <I2C_Start+0x30>
    1270:	8e ef       	ldi	r24, 0xFE	; 254
    1272:	93 e0       	ldi	r25, 0x03	; 3
    1274:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <ticks+0x1>
    1278:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <ticks>
    127c:	20 81       	ld	r18, Z
    127e:	22 23       	and	r18, r18
    1280:	14 f0       	brlt	.+4      	; 0x1286 <I2C_Start+0x30>
    1282:	01 97       	sbiw	r24, 0x01	; 1
    1284:	b8 f7       	brcc	.-18     	; 0x1274 <I2C_Start+0x1e>
    1286:	08 95       	ret

00001288 <I2C_Write>:
   _delay_us(100); //wait for a short time
}
/***void I2C_Write(uint8_t var_i2cData_u8)***/
void I2C_Write(uint8_t var_i2cData_u8)
{
  TWI_DATA_REGISTER = var_i2cData_u8 ;
    1288:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
  TWI_CONTROL_REGISTER = ((1<< TWINT) | (1<<TWEN));
    128c:	e4 e7       	ldi	r30, 0x74	; 116
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	84 e8       	ldi	r24, 0x84	; 132
    1292:	80 83       	st	Z, r24
  for (ticks=Nticks; !(TWI_CONTROL_REGISTER & (1 <<TWINT)) && ticks; ticks--);
    1294:	8f ef       	ldi	r24, 0xFF	; 255
    1296:	93 e0       	ldi	r25, 0x03	; 3
    1298:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <ticks+0x1>
    129c:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <ticks>
    12a0:	80 81       	ld	r24, Z
    12a2:	88 23       	and	r24, r24
    12a4:	5c f0       	brlt	.+22     	; 0x12bc <I2C_Write+0x34>
    12a6:	8e ef       	ldi	r24, 0xFE	; 254
    12a8:	93 e0       	ldi	r25, 0x03	; 3
    12aa:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <ticks+0x1>
    12ae:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <ticks>
    12b2:	20 81       	ld	r18, Z
    12b4:	22 23       	and	r18, r18
    12b6:	14 f0       	brlt	.+4      	; 0x12bc <I2C_Write+0x34>
    12b8:	01 97       	sbiw	r24, 0x01	; 1
    12ba:	b8 f7       	brcc	.-18     	; 0x12aa <I2C_Write+0x22>
    12bc:	08 95       	ret

000012be <I2C_Read>:
}
/***uint8_t I2C_Read(uint8_t var_ackOption_u8)***/
uint8_t I2C_Read(uint8_t var_ackOption_u8)
{
 TWI_CONTROL_REGISTER = ((1<< TWINT) | (1<<TWEN) | (var_ackOption_u8<<TWEA));
    12be:	20 e4       	ldi	r18, 0x40	; 64
    12c0:	82 9f       	mul	r24, r18
    12c2:	c0 01       	movw	r24, r0
    12c4:	11 24       	eor	r1, r1
    12c6:	84 68       	ori	r24, 0x84	; 132
    12c8:	e4 e7       	ldi	r30, 0x74	; 116
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	80 83       	st	Z, r24
   for (ticks=Nticks; !(TWI_CONTROL_REGISTER & (1 <<TWINT)) && ticks; ticks--);
    12ce:	8f ef       	ldi	r24, 0xFF	; 255
    12d0:	93 e0       	ldi	r25, 0x03	; 3
    12d2:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <ticks+0x1>
    12d6:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <ticks>
    12da:	80 81       	ld	r24, Z
    12dc:	88 23       	and	r24, r24
    12de:	5c f0       	brlt	.+22     	; 0x12f6 <I2C_Read+0x38>
    12e0:	8e ef       	ldi	r24, 0xFE	; 254
    12e2:	93 e0       	ldi	r25, 0x03	; 3
    12e4:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <ticks+0x1>
    12e8:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <ticks>
    12ec:	20 81       	ld	r18, Z
    12ee:	22 23       	and	r18, r18
    12f0:	14 f0       	brlt	.+4      	; 0x12f6 <I2C_Read+0x38>
    12f2:	01 97       	sbiw	r24, 0x01	; 1
    12f4:	b8 f7       	brcc	.-18     	; 0x12e4 <I2C_Read+0x26>
   return TWI_DATA_REGISTER;
    12f6:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
}
    12fa:	08 95       	ret

000012fc <I2C_Status>:
/***uint8_t I2C_status(void)***/
uint8_t I2C_Status(void)
{
	return TWI_STATUS_REGISTER & TWI_STATUS_MASK;
    12fc:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
}
    1300:	88 7f       	andi	r24, 0xF8	; 248
    1302:	08 95       	ret

00001304 <I2C_Stop>:
  for (ticks=Nticks; !(TWI_CONTROL_REGISTER & (1<<TWINT)) && ticks; ticks--);
}
/***void I2C_Stop(void)***/
void I2C_Stop(void)
{
  TWI_CONTROL_REGISTER = ((1<< TWINT) | (1<<TWEN) | (1<<TWSTO));
    1304:	84 e9       	ldi	r24, 0x94	; 148
    1306:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    130a:	8f e8       	ldi	r24, 0x8F	; 143
    130c:	91 e0       	ldi	r25, 0x01	; 1
    130e:	01 97       	sbiw	r24, 0x01	; 1
    1310:	f1 f7       	brne	.-4      	; 0x130e <I2C_Stop+0xa>
    1312:	00 c0       	rjmp	.+0      	; 0x1314 <I2C_Stop+0x10>
    1314:	00 00       	nop
    1316:	08 95       	ret

00001318 <I2C_Init>:
  return ic;
}
/***void I2C_Init(uint8_t prescaler)***/
void I2C_Init(uint8_t prescaler)
{
	I2C_DDR|=I2C_IO_MASK;
    1318:	91 b3       	in	r25, 0x11	; 17
    131a:	93 60       	ori	r25, 0x03	; 3
    131c:	91 bb       	out	0x11, r25	; 17
	I2C_PORT|=I2C_IO_MASK;
    131e:	92 b3       	in	r25, 0x12	; 18
    1320:	93 60       	ori	r25, 0x03	; 3
    1322:	92 bb       	out	0x12, r25	; 18
	switch(prescaler){
    1324:	84 30       	cpi	r24, 0x04	; 4
    1326:	79 f0       	breq	.+30     	; 0x1346 <I2C_Init+0x2e>
    1328:	18 f4       	brcc	.+6      	; 0x1330 <I2C_Init+0x18>
    132a:	81 30       	cpi	r24, 0x01	; 1
    132c:	31 f0       	breq	.+12     	; 0x133a <I2C_Init+0x22>
    132e:	1d c0       	rjmp	.+58     	; 0x136a <I2C_Init+0x52>
    1330:	80 31       	cpi	r24, 0x10	; 16
    1332:	79 f0       	breq	.+30     	; 0x1352 <I2C_Init+0x3a>
    1334:	80 34       	cpi	r24, 0x40	; 64
    1336:	99 f0       	breq	.+38     	; 0x135e <I2C_Init+0x46>
    1338:	18 c0       	rjmp	.+48     	; 0x136a <I2C_Init+0x52>
		case 1:
		TWI_STATUS_REGISTER &= ~TWI_PRESCALER_MASK;
    133a:	e1 e7       	ldi	r30, 0x71	; 113
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	90 81       	ld	r25, Z
    1340:	9c 7f       	andi	r25, 0xFC	; 252
    1342:	90 83       	st	Z, r25
		break;
    1344:	18 c0       	rjmp	.+48     	; 0x1376 <I2C_Init+0x5e>
		case 4:
		TWI_STATUS_REGISTER |= (1<<TWPS0);
    1346:	e1 e7       	ldi	r30, 0x71	; 113
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	90 81       	ld	r25, Z
    134c:	91 60       	ori	r25, 0x01	; 1
    134e:	90 83       	st	Z, r25
		break;
    1350:	12 c0       	rjmp	.+36     	; 0x1376 <I2C_Init+0x5e>
		case 16:
		TWI_STATUS_REGISTER |= (2<<TWPS0);
    1352:	e1 e7       	ldi	r30, 0x71	; 113
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	90 81       	ld	r25, Z
    1358:	92 60       	ori	r25, 0x02	; 2
    135a:	90 83       	st	Z, r25
		break;
    135c:	0c c0       	rjmp	.+24     	; 0x1376 <I2C_Init+0x5e>
		case 64:
		TWI_STATUS_REGISTER |= (3<<TWPS0);
    135e:	e1 e7       	ldi	r30, 0x71	; 113
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	90 81       	ld	r25, Z
    1364:	93 60       	ori	r25, 0x03	; 3
    1366:	90 83       	st	Z, r25
		break;
    1368:	06 c0       	rjmp	.+12     	; 0x1376 <I2C_Init+0x5e>
		default:
		prescaler=1;
		TWI_STATUS_REGISTER &= ~TWI_PRESCALER_MASK;
    136a:	e1 e7       	ldi	r30, 0x71	; 113
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	80 81       	ld	r24, Z
    1370:	8c 7f       	andi	r24, 0xFC	; 252
    1372:	80 83       	st	Z, r24
		break;
		case 64:
		TWI_STATUS_REGISTER |= (3<<TWPS0);
		break;
		default:
		prescaler=1;
    1374:	81 e0       	ldi	r24, 0x01	; 1
		TWI_STATUS_REGISTER &= ~TWI_PRESCALER_MASK;
		break;
	}
	TWI_BIT_RATE_REGISTER = ((F_CPU/I2C_SCL_CLOCK)-16)/(2*prescaler);
    1376:	28 2f       	mov	r18, r24
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	22 0f       	add	r18, r18
    137c:	33 1f       	adc	r19, r19
    137e:	03 2e       	mov	r0, r19
    1380:	00 0c       	add	r0, r0
    1382:	44 0b       	sbc	r20, r20
    1384:	55 0b       	sbc	r21, r21
    1386:	60 e9       	ldi	r22, 0x90	; 144
    1388:	70 e0       	ldi	r23, 0x00	; 0
    138a:	80 e0       	ldi	r24, 0x00	; 0
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	0e 94 63 18 	call	0x30c6	; 0x30c6 <__udivmodsi4>
    1392:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
    1396:	08 95       	ret

00001398 <I2Cenable>:
void I2C_Write(uint8_t var_i2cData_u8);
uint8_t I2C_Read(uint8_t var_ackOption_u8);
uint8_t I2C_Status(void);
/***I2C I2Cenable(uint8_t prescaler)***/
I2C I2Cenable(uint8_t prescaler)
{
    1398:	1f 93       	push	r17
    139a:	cf 93       	push	r28
    139c:	df 93       	push	r29
    139e:	ec 01       	movw	r28, r24
    13a0:	86 2f       	mov	r24, r22
  uint8_t tSREG;
  tSREG=SREG;
    13a2:	1f b7       	in	r17, 0x3f	; 63
  SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
    13a4:	9f b7       	in	r25, 0x3f	; 63
    13a6:	9f 77       	andi	r25, 0x7F	; 127
    13a8:	9f bf       	out	0x3f, r25	; 63
  I2C ic;
  I2C_Init(prescaler);
    13aa:	b6 df       	rcall	.-148    	; 0x1318 <I2C_Init>
  ic.Stop=I2C_Stop;
  ic.Write=I2C_Write;
  ic.Read=I2C_Read;
  ic.Status=I2C_Status;
  /******/
  SREG=tSREG;
    13ac:	1f bf       	out	0x3f, r17	; 63
  return ic;
    13ae:	8b e2       	ldi	r24, 0x2B	; 43
    13b0:	99 e0       	ldi	r25, 0x09	; 9
    13b2:	99 83       	std	Y+1, r25	; 0x01
    13b4:	88 83       	st	Y, r24
    13b6:	82 e8       	ldi	r24, 0x82	; 130
    13b8:	99 e0       	ldi	r25, 0x09	; 9
    13ba:	9b 83       	std	Y+3, r25	; 0x03
    13bc:	8a 83       	std	Y+2, r24	; 0x02
    13be:	84 e4       	ldi	r24, 0x44	; 68
    13c0:	99 e0       	ldi	r25, 0x09	; 9
    13c2:	9d 83       	std	Y+5, r25	; 0x05
    13c4:	8c 83       	std	Y+4, r24	; 0x04
    13c6:	8f e5       	ldi	r24, 0x5F	; 95
    13c8:	99 e0       	ldi	r25, 0x09	; 9
    13ca:	9f 83       	std	Y+7, r25	; 0x07
    13cc:	8e 83       	std	Y+6, r24	; 0x06
    13ce:	8e e7       	ldi	r24, 0x7E	; 126
    13d0:	99 e0       	ldi	r25, 0x09	; 9
    13d2:	99 87       	std	Y+9, r25	; 0x09
    13d4:	88 87       	std	Y+8, r24	; 0x08
}
    13d6:	ce 01       	movw	r24, r28
    13d8:	df 91       	pop	r29
    13da:	cf 91       	pop	r28
    13dc:	1f 91       	pop	r17
    13de:	08 95       	ret

000013e0 <KEYPAD_get>:
	}
	return data;
}
/***read***/
struct keypadata KEYPAD_get(void)
{
    13e0:	cf 93       	push	r28
    13e2:	df 93       	push	r29
    13e4:	00 d0       	rcall	.+0      	; 0x13e6 <KEYPAD_get+0x6>
    13e6:	00 d0       	rcall	.+0      	; 0x13e8 <KEYPAD_get+0x8>
    13e8:	1f 92       	push	r1
    13ea:	cd b7       	in	r28, 0x3d	; 61
    13ec:	de b7       	in	r29, 0x3e	; 62
	return data;
    13ee:	85 e0       	ldi	r24, 0x05	; 5
    13f0:	e4 e9       	ldi	r30, 0x94	; 148
    13f2:	f2 e0       	ldi	r31, 0x02	; 2
    13f4:	de 01       	movw	r26, r28
    13f6:	11 96       	adiw	r26, 0x01	; 1
    13f8:	01 90       	ld	r0, Z+
    13fa:	0d 92       	st	X+, r0
    13fc:	8a 95       	dec	r24
    13fe:	e1 f7       	brne	.-8      	; 0x13f8 <KEYPAD_get+0x18>
    1400:	29 81       	ldd	r18, Y+1	; 0x01
    1402:	3a 81       	ldd	r19, Y+2	; 0x02
    1404:	4b 81       	ldd	r20, Y+3	; 0x03
    1406:	5c 81       	ldd	r21, Y+4	; 0x04
    1408:	6d 81       	ldd	r22, Y+5	; 0x05
}
    140a:	70 e0       	ldi	r23, 0x00	; 0
    140c:	80 e0       	ldi	r24, 0x00	; 0
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	0f 90       	pop	r0
    1412:	0f 90       	pop	r0
    1414:	0f 90       	pop	r0
    1416:	0f 90       	pop	r0
    1418:	0f 90       	pop	r0
    141a:	df 91       	pop	r29
    141c:	cf 91       	pop	r28
    141e:	08 95       	ret

00001420 <KEYPAD_flush>:
/***flush***/
void KEYPAD_flush(void)
{
	KEYPADSTRINGINDEX=0;
    1420:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <KEYPADSTRINGINDEX>
	data.character=' ';
    1424:	e4 e9       	ldi	r30, 0x94	; 148
    1426:	f2 e0       	ldi	r31, 0x02	; 2
    1428:	80 e2       	ldi	r24, 0x20	; 32
    142a:	80 83       	st	Z, r24
	data.printstring="\0";
    142c:	80 e1       	ldi	r24, 0x10	; 16
    142e:	91 e0       	ldi	r25, 0x01	; 1
    1430:	92 83       	std	Z+2, r25	; 0x02
    1432:	81 83       	std	Z+1, r24	; 0x01
	data.string="\0";
    1434:	94 83       	std	Z+4, r25	; 0x04
    1436:	83 83       	std	Z+3, r24	; 0x03
    1438:	08 95       	ret

0000143a <KEYPAD_getkey>:
	//Going to use pull down method.
	//Inic String Vec
	return keypad;
}
char KEYPAD_getkey(void)
{
    143a:	cf 93       	push	r28
    143c:	df 93       	push	r29
    143e:	21 e0       	ldi	r18, 0x01	; 1
	uint8_t HL;
	char c='\0';
    1440:	80 e0       	ldi	r24, 0x00	; 0
				*keypad_PORT|=(1<<KEYPADLINE_1);
				break;
			case 1: //line 2 index 1
				*keypad_DDR|=(1<<KEYPADLINE_2);
				*keypad_PORT&=~(1<<KEYPADLINE_2);
				keypad_dataf.line_2=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
    1442:	a9 e5       	ldi	r26, 0x59	; 89
    1444:	b2 e0       	ldi	r27, 0x02	; 2
				HL=KEYPADhl(keypad_datai.line_2,keypad_dataf.line_2);
    1446:	ed e5       	ldi	r30, 0x5D	; 93
    1448:	f2 e0       	ldi	r31, 0x02	; 2
					if(HL == (1<<KEYPADDATA_2))
						c=keypadvalue[1][1];
					if(HL == (1<<KEYPADDATA_3))
						c=keypadvalue[1][2];
					if(HL == (1<<KEYPADDATA_4))
						c=keypadvalue[1][3];
    144a:	60 e0       	ldi	r22, 0x00	; 0
    144c:	71 e0       	ldi	r23, 0x01	; 1
    144e:	01 c0       	rjmp	.+2      	; 0x1452 <KEYPAD_getkey+0x18>
    1450:	2f 5f       	subi	r18, 0xFF	; 255
{
	uint8_t HL;
	char c='\0';
	uint8_t keypad_option;
	for(keypad_option=0;keypad_option<KEYPADLINES;keypad_option++){
		switch (keypad_option)
    1452:	9f ef       	ldi	r25, 0xFF	; 255
    1454:	92 0f       	add	r25, r18
    1456:	91 30       	cpi	r25, 0x01	; 1
    1458:	09 f4       	brne	.+2      	; 0x145c <KEYPAD_getkey+0x22>
    145a:	4b c0       	rjmp	.+150    	; 0x14f2 <KEYPAD_getkey+0xb8>
    145c:	38 f0       	brcs	.+14     	; 0x146c <KEYPAD_getkey+0x32>
    145e:	92 30       	cpi	r25, 0x02	; 2
    1460:	09 f4       	brne	.+2      	; 0x1464 <KEYPAD_getkey+0x2a>
    1462:	8c c0       	rjmp	.+280    	; 0x157c <KEYPAD_getkey+0x142>
    1464:	93 30       	cpi	r25, 0x03	; 3
    1466:	09 f4       	brne	.+2      	; 0x146a <KEYPAD_getkey+0x30>
    1468:	ce c0       	rjmp	.+412    	; 0x1606 <KEYPAD_getkey+0x1cc>
    146a:	0e c1       	rjmp	.+540    	; 0x1688 <KEYPAD_getkey+0x24e>
		{
			case 0: //line 1 index 0
				*keypad_DDR|=(1<<KEYPADLINE_1);
    146c:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <keypad_DDR>
    1470:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <keypad_DDR+0x1>
    1474:	ea 01       	movw	r28, r20
    1476:	98 81       	ld	r25, Y
    1478:	90 68       	ori	r25, 0x80	; 128
    147a:	98 83       	st	Y, r25
				*keypad_PORT&=~(1<<KEYPADLINE_1);
    147c:	40 91 56 02 	lds	r20, 0x0256	; 0x800256 <keypad_PORT>
    1480:	50 91 57 02 	lds	r21, 0x0257	; 0x800257 <keypad_PORT+0x1>
    1484:	ea 01       	movw	r28, r20
    1486:	98 81       	ld	r25, Y
    1488:	9f 77       	andi	r25, 0x7F	; 127
    148a:	98 83       	st	Y, r25
				keypad_dataf.line_1=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
    148c:	40 91 62 02 	lds	r20, 0x0262	; 0x800262 <keypad_PIN>
    1490:	50 91 63 02 	lds	r21, 0x0263	; 0x800263 <keypad_PIN+0x1>
    1494:	ea 01       	movw	r28, r20
    1496:	38 81       	ld	r19, Y
    1498:	34 77       	andi	r19, 0x74	; 116
    149a:	3c 93       	st	X, r19
				HL=KEYPADhl(keypad_datai.line_1,keypad_dataf.line_1);
    149c:	90 81       	ld	r25, Z
uint8_t KEYPADhl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	//printf("KEYPADhl\n");
	i=xf^xi;
	i&=xi;
    149e:	43 2f       	mov	r20, r19
    14a0:	49 27       	eor	r20, r25
    14a2:	94 23       	and	r25, r20
			case 0: //line 1 index 0
				*keypad_DDR|=(1<<KEYPADLINE_1);
				*keypad_PORT&=~(1<<KEYPADLINE_1);
				keypad_dataf.line_1=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
				HL=KEYPADhl(keypad_datai.line_1,keypad_dataf.line_1);
				keypad_datai.line_1=keypad_dataf.line_1;
    14a4:	30 83       	st	Z, r19
				if(HL){
    14a6:	99 23       	and	r25, r25
    14a8:	99 f0       	breq	.+38     	; 0x14d0 <KEYPAD_getkey+0x96>
					//decode index line one column what ?
					if(HL == (1<<KEYPADDATA_1))
    14aa:	94 30       	cpi	r25, 0x04	; 4
    14ac:	19 f4       	brne	.+6      	; 0x14b4 <KEYPAD_getkey+0x7a>
						c=keypadvalue[0][0];
    14ae:	eb 01       	movw	r28, r22
    14b0:	88 81       	ld	r24, Y
    14b2:	0a c0       	rjmp	.+20     	; 0x14c8 <KEYPAD_getkey+0x8e>
					if(HL == (1<<KEYPADDATA_2))
    14b4:	90 31       	cpi	r25, 0x10	; 16
    14b6:	19 f4       	brne	.+6      	; 0x14be <KEYPAD_getkey+0x84>
						c=keypadvalue[0][1];
    14b8:	eb 01       	movw	r28, r22
    14ba:	89 81       	ldd	r24, Y+1	; 0x01
    14bc:	09 c0       	rjmp	.+18     	; 0x14d0 <KEYPAD_getkey+0x96>
					if(HL == (1<<KEYPADDATA_3))
    14be:	90 32       	cpi	r25, 0x20	; 32
    14c0:	19 f4       	brne	.+6      	; 0x14c8 <KEYPAD_getkey+0x8e>
						c=keypadvalue[0][2];
    14c2:	eb 01       	movw	r28, r22
    14c4:	8a 81       	ldd	r24, Y+2	; 0x02
    14c6:	04 c0       	rjmp	.+8      	; 0x14d0 <KEYPAD_getkey+0x96>
					if(HL == (1<<KEYPADDATA_4))
    14c8:	90 34       	cpi	r25, 0x40	; 64
    14ca:	11 f4       	brne	.+4      	; 0x14d0 <KEYPAD_getkey+0x96>
						c=keypadvalue[0][3];
    14cc:	eb 01       	movw	r28, r22
    14ce:	8b 81       	ldd	r24, Y+3	; 0x03
				}
				*keypad_DDR&=~(1<<KEYPADLINE_1);
    14d0:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <keypad_DDR>
    14d4:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <keypad_DDR+0x1>
    14d8:	ea 01       	movw	r28, r20
    14da:	98 81       	ld	r25, Y
    14dc:	9f 77       	andi	r25, 0x7F	; 127
    14de:	98 83       	st	Y, r25
				*keypad_PORT|=(1<<KEYPADLINE_1);
    14e0:	40 91 56 02 	lds	r20, 0x0256	; 0x800256 <keypad_PORT>
    14e4:	50 91 57 02 	lds	r21, 0x0257	; 0x800257 <keypad_PORT+0x1>
    14e8:	ea 01       	movw	r28, r20
    14ea:	98 81       	ld	r25, Y
    14ec:	90 68       	ori	r25, 0x80	; 128
    14ee:	98 83       	st	Y, r25
				break;
    14f0:	af cf       	rjmp	.-162    	; 0x1450 <KEYPAD_getkey+0x16>
			case 1: //line 2 index 1
				*keypad_DDR|=(1<<KEYPADLINE_2);
    14f2:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <keypad_DDR>
    14f6:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <keypad_DDR+0x1>
    14fa:	ea 01       	movw	r28, r20
    14fc:	98 81       	ld	r25, Y
    14fe:	91 60       	ori	r25, 0x01	; 1
    1500:	98 83       	st	Y, r25
				*keypad_PORT&=~(1<<KEYPADLINE_2);
    1502:	40 91 56 02 	lds	r20, 0x0256	; 0x800256 <keypad_PORT>
    1506:	50 91 57 02 	lds	r21, 0x0257	; 0x800257 <keypad_PORT+0x1>
    150a:	ea 01       	movw	r28, r20
    150c:	98 81       	ld	r25, Y
    150e:	9e 7f       	andi	r25, 0xFE	; 254
    1510:	98 83       	st	Y, r25
				keypad_dataf.line_2=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
    1512:	40 91 62 02 	lds	r20, 0x0262	; 0x800262 <keypad_PIN>
    1516:	50 91 63 02 	lds	r21, 0x0263	; 0x800263 <keypad_PIN+0x1>
    151a:	ea 01       	movw	r28, r20
    151c:	38 81       	ld	r19, Y
    151e:	34 77       	andi	r19, 0x74	; 116
    1520:	11 96       	adiw	r26, 0x01	; 1
    1522:	3c 93       	st	X, r19
    1524:	11 97       	sbiw	r26, 0x01	; 1
				HL=KEYPADhl(keypad_datai.line_2,keypad_dataf.line_2);
    1526:	91 81       	ldd	r25, Z+1	; 0x01
uint8_t KEYPADhl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	//printf("KEYPADhl\n");
	i=xf^xi;
	i&=xi;
    1528:	43 2f       	mov	r20, r19
    152a:	49 27       	eor	r20, r25
    152c:	94 23       	and	r25, r20
			case 1: //line 2 index 1
				*keypad_DDR|=(1<<KEYPADLINE_2);
				*keypad_PORT&=~(1<<KEYPADLINE_2);
				keypad_dataf.line_2=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
				HL=KEYPADhl(keypad_datai.line_2,keypad_dataf.line_2);
				keypad_datai.line_2=keypad_dataf.line_2;
    152e:	31 83       	std	Z+1, r19	; 0x01
				if(HL){
    1530:	99 23       	and	r25, r25
    1532:	99 f0       	breq	.+38     	; 0x155a <KEYPAD_getkey+0x120>
					//decode index line two column what ?
					if(HL == (1<<KEYPADDATA_1))
    1534:	94 30       	cpi	r25, 0x04	; 4
    1536:	19 f4       	brne	.+6      	; 0x153e <KEYPAD_getkey+0x104>
						c=keypadvalue[1][0];
    1538:	eb 01       	movw	r28, r22
    153a:	8c 81       	ldd	r24, Y+4	; 0x04
    153c:	0a c0       	rjmp	.+20     	; 0x1552 <KEYPAD_getkey+0x118>
					if(HL == (1<<KEYPADDATA_2))
    153e:	90 31       	cpi	r25, 0x10	; 16
    1540:	19 f4       	brne	.+6      	; 0x1548 <KEYPAD_getkey+0x10e>
						c=keypadvalue[1][1];
    1542:	eb 01       	movw	r28, r22
    1544:	8d 81       	ldd	r24, Y+5	; 0x05
    1546:	09 c0       	rjmp	.+18     	; 0x155a <KEYPAD_getkey+0x120>
					if(HL == (1<<KEYPADDATA_3))
    1548:	90 32       	cpi	r25, 0x20	; 32
    154a:	19 f4       	brne	.+6      	; 0x1552 <KEYPAD_getkey+0x118>
						c=keypadvalue[1][2];
    154c:	eb 01       	movw	r28, r22
    154e:	8e 81       	ldd	r24, Y+6	; 0x06
    1550:	04 c0       	rjmp	.+8      	; 0x155a <KEYPAD_getkey+0x120>
					if(HL == (1<<KEYPADDATA_4))
    1552:	90 34       	cpi	r25, 0x40	; 64
    1554:	11 f4       	brne	.+4      	; 0x155a <KEYPAD_getkey+0x120>
						c=keypadvalue[1][3];
    1556:	eb 01       	movw	r28, r22
    1558:	8f 81       	ldd	r24, Y+7	; 0x07
				}
				*keypad_DDR&=~(1<<KEYPADLINE_2);
    155a:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <keypad_DDR>
    155e:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <keypad_DDR+0x1>
    1562:	ea 01       	movw	r28, r20
    1564:	98 81       	ld	r25, Y
    1566:	9e 7f       	andi	r25, 0xFE	; 254
    1568:	98 83       	st	Y, r25
				*keypad_PORT|=(1<<KEYPADLINE_2);
    156a:	40 91 56 02 	lds	r20, 0x0256	; 0x800256 <keypad_PORT>
    156e:	50 91 57 02 	lds	r21, 0x0257	; 0x800257 <keypad_PORT+0x1>
    1572:	ea 01       	movw	r28, r20
    1574:	98 81       	ld	r25, Y
    1576:	91 60       	ori	r25, 0x01	; 1
    1578:	98 83       	st	Y, r25
				break;
    157a:	6a cf       	rjmp	.-300    	; 0x1450 <KEYPAD_getkey+0x16>
			case 2: //line 3 index 2
				*keypad_DDR|=(1<<KEYPADLINE_3);
    157c:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <keypad_DDR>
    1580:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <keypad_DDR+0x1>
    1584:	ea 01       	movw	r28, r20
    1586:	98 81       	ld	r25, Y
    1588:	92 60       	ori	r25, 0x02	; 2
    158a:	98 83       	st	Y, r25
				*keypad_PORT&=~(1<<KEYPADLINE_3);
    158c:	40 91 56 02 	lds	r20, 0x0256	; 0x800256 <keypad_PORT>
    1590:	50 91 57 02 	lds	r21, 0x0257	; 0x800257 <keypad_PORT+0x1>
    1594:	ea 01       	movw	r28, r20
    1596:	98 81       	ld	r25, Y
    1598:	9d 7f       	andi	r25, 0xFD	; 253
    159a:	98 83       	st	Y, r25
				keypad_dataf.line_3=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
    159c:	40 91 62 02 	lds	r20, 0x0262	; 0x800262 <keypad_PIN>
    15a0:	50 91 63 02 	lds	r21, 0x0263	; 0x800263 <keypad_PIN+0x1>
    15a4:	ea 01       	movw	r28, r20
    15a6:	38 81       	ld	r19, Y
    15a8:	34 77       	andi	r19, 0x74	; 116
    15aa:	12 96       	adiw	r26, 0x02	; 2
    15ac:	3c 93       	st	X, r19
    15ae:	12 97       	sbiw	r26, 0x02	; 2
				HL=KEYPADhl(keypad_datai.line_3,keypad_dataf.line_3);
    15b0:	92 81       	ldd	r25, Z+2	; 0x02
uint8_t KEYPADhl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	//printf("KEYPADhl\n");
	i=xf^xi;
	i&=xi;
    15b2:	43 2f       	mov	r20, r19
    15b4:	49 27       	eor	r20, r25
    15b6:	94 23       	and	r25, r20
			case 2: //line 3 index 2
				*keypad_DDR|=(1<<KEYPADLINE_3);
				*keypad_PORT&=~(1<<KEYPADLINE_3);
				keypad_dataf.line_3=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
				HL=KEYPADhl(keypad_datai.line_3,keypad_dataf.line_3);
				keypad_datai.line_3=keypad_dataf.line_3;
    15b8:	32 83       	std	Z+2, r19	; 0x02
				if(HL){
    15ba:	99 23       	and	r25, r25
    15bc:	99 f0       	breq	.+38     	; 0x15e4 <KEYPAD_getkey+0x1aa>
					//decode index line three column what ?
					if(HL == (1<<KEYPADDATA_1))
    15be:	94 30       	cpi	r25, 0x04	; 4
    15c0:	19 f4       	brne	.+6      	; 0x15c8 <KEYPAD_getkey+0x18e>
						c=keypadvalue[2][0];
    15c2:	eb 01       	movw	r28, r22
    15c4:	88 85       	ldd	r24, Y+8	; 0x08
    15c6:	0a c0       	rjmp	.+20     	; 0x15dc <KEYPAD_getkey+0x1a2>
					if(HL == (1<<KEYPADDATA_2))
    15c8:	90 31       	cpi	r25, 0x10	; 16
    15ca:	19 f4       	brne	.+6      	; 0x15d2 <KEYPAD_getkey+0x198>
						c=keypadvalue[2][1];
    15cc:	eb 01       	movw	r28, r22
    15ce:	89 85       	ldd	r24, Y+9	; 0x09
    15d0:	09 c0       	rjmp	.+18     	; 0x15e4 <KEYPAD_getkey+0x1aa>
					if(HL == (1<<KEYPADDATA_3))
    15d2:	90 32       	cpi	r25, 0x20	; 32
    15d4:	19 f4       	brne	.+6      	; 0x15dc <KEYPAD_getkey+0x1a2>
						c=keypadvalue[2][2];
    15d6:	eb 01       	movw	r28, r22
    15d8:	8a 85       	ldd	r24, Y+10	; 0x0a
    15da:	04 c0       	rjmp	.+8      	; 0x15e4 <KEYPAD_getkey+0x1aa>
					if(HL == (1<<KEYPADDATA_4))
    15dc:	90 34       	cpi	r25, 0x40	; 64
    15de:	11 f4       	brne	.+4      	; 0x15e4 <KEYPAD_getkey+0x1aa>
						c=keypadvalue[2][3];
    15e0:	eb 01       	movw	r28, r22
    15e2:	8b 85       	ldd	r24, Y+11	; 0x0b
				}
				*keypad_DDR&=~(1<<KEYPADLINE_3);
    15e4:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <keypad_DDR>
    15e8:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <keypad_DDR+0x1>
    15ec:	ea 01       	movw	r28, r20
    15ee:	98 81       	ld	r25, Y
    15f0:	9d 7f       	andi	r25, 0xFD	; 253
    15f2:	98 83       	st	Y, r25
				*keypad_PORT|=(1<<KEYPADLINE_3);
    15f4:	40 91 56 02 	lds	r20, 0x0256	; 0x800256 <keypad_PORT>
    15f8:	50 91 57 02 	lds	r21, 0x0257	; 0x800257 <keypad_PORT+0x1>
    15fc:	ea 01       	movw	r28, r20
    15fe:	98 81       	ld	r25, Y
    1600:	92 60       	ori	r25, 0x02	; 2
    1602:	98 83       	st	Y, r25
				break;
    1604:	25 cf       	rjmp	.-438    	; 0x1450 <KEYPAD_getkey+0x16>
			case 3: //line 4 index 3
				*keypad_DDR|=(1<<KEYPADLINE_4);
    1606:	e0 91 64 02 	lds	r30, 0x0264	; 0x800264 <keypad_DDR>
    160a:	f0 91 65 02 	lds	r31, 0x0265	; 0x800265 <keypad_DDR+0x1>
    160e:	90 81       	ld	r25, Z
    1610:	98 60       	ori	r25, 0x08	; 8
    1612:	90 83       	st	Z, r25
				*keypad_PORT&=~(1<<KEYPADLINE_4);
    1614:	e0 91 56 02 	lds	r30, 0x0256	; 0x800256 <keypad_PORT>
    1618:	f0 91 57 02 	lds	r31, 0x0257	; 0x800257 <keypad_PORT+0x1>
    161c:	90 81       	ld	r25, Z
    161e:	97 7f       	andi	r25, 0xF7	; 247
    1620:	90 83       	st	Z, r25
				keypad_dataf.line_4=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
    1622:	e0 91 62 02 	lds	r30, 0x0262	; 0x800262 <keypad_PIN>
    1626:	f0 91 63 02 	lds	r31, 0x0263	; 0x800263 <keypad_PIN+0x1>
    162a:	20 81       	ld	r18, Z
    162c:	24 77       	andi	r18, 0x74	; 116
    162e:	20 93 5c 02 	sts	0x025C, r18	; 0x80025c <keypad_dataf+0x3>
				HL=KEYPADhl(keypad_datai.line_4,keypad_dataf.line_4);
    1632:	ed e5       	ldi	r30, 0x5D	; 93
    1634:	f2 e0       	ldi	r31, 0x02	; 2
    1636:	93 81       	ldd	r25, Z+3	; 0x03
uint8_t KEYPADhl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	//printf("KEYPADhl\n");
	i=xf^xi;
	i&=xi;
    1638:	32 2f       	mov	r19, r18
    163a:	39 27       	eor	r19, r25
    163c:	93 23       	and	r25, r19
			case 3: //line 4 index 3
				*keypad_DDR|=(1<<KEYPADLINE_4);
				*keypad_PORT&=~(1<<KEYPADLINE_4);
				keypad_dataf.line_4=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
				HL=KEYPADhl(keypad_datai.line_4,keypad_dataf.line_4);
				keypad_datai.line_4=keypad_dataf.line_4;
    163e:	23 83       	std	Z+3, r18	; 0x03
				if(HL){
    1640:	99 23       	and	r25, r25
    1642:	99 f0       	breq	.+38     	; 0x166a <KEYPAD_getkey+0x230>
					//decode index line four column what ?
					if(HL == (1<<KEYPADDATA_1))
    1644:	94 30       	cpi	r25, 0x04	; 4
    1646:	19 f4       	brne	.+6      	; 0x164e <KEYPAD_getkey+0x214>
						c=keypadvalue[3][0];
    1648:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__DATA_REGION_ORIGIN__+0xc>
    164c:	0a c0       	rjmp	.+20     	; 0x1662 <KEYPAD_getkey+0x228>
					if(HL == (1<<KEYPADDATA_2))
    164e:	90 31       	cpi	r25, 0x10	; 16
    1650:	19 f4       	brne	.+6      	; 0x1658 <KEYPAD_getkey+0x21e>
						c=keypadvalue[3][1];
    1652:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <__DATA_REGION_ORIGIN__+0xd>
    1656:	09 c0       	rjmp	.+18     	; 0x166a <KEYPAD_getkey+0x230>
					if(HL == (1<<KEYPADDATA_3))
    1658:	90 32       	cpi	r25, 0x20	; 32
    165a:	19 f4       	brne	.+6      	; 0x1662 <KEYPAD_getkey+0x228>
						c=keypadvalue[3][2];
    165c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__DATA_REGION_ORIGIN__+0xe>
    1660:	04 c0       	rjmp	.+8      	; 0x166a <KEYPAD_getkey+0x230>
					if(HL == (1<<KEYPADDATA_4))
    1662:	90 34       	cpi	r25, 0x40	; 64
    1664:	11 f4       	brne	.+4      	; 0x166a <KEYPAD_getkey+0x230>
						c=keypadvalue[3][3];
    1666:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <__DATA_REGION_ORIGIN__+0xf>
				}
				*keypad_DDR&=~(1<<KEYPADLINE_4);
    166a:	e0 91 64 02 	lds	r30, 0x0264	; 0x800264 <keypad_DDR>
    166e:	f0 91 65 02 	lds	r31, 0x0265	; 0x800265 <keypad_DDR+0x1>
    1672:	90 81       	ld	r25, Z
    1674:	97 7f       	andi	r25, 0xF7	; 247
    1676:	90 83       	st	Z, r25
				*keypad_PORT|=(1<<KEYPADLINE_4);
    1678:	e0 91 56 02 	lds	r30, 0x0256	; 0x800256 <keypad_PORT>
    167c:	f0 91 57 02 	lds	r31, 0x0257	; 0x800257 <keypad_PORT+0x1>
    1680:	90 81       	ld	r25, Z
    1682:	98 60       	ori	r25, 0x08	; 8
    1684:	90 83       	st	Z, r25
    1686:	03 c0       	rjmp	.+6      	; 0x168e <KEYPAD_getkey+0x254>
char KEYPAD_getkey(void)
{
	uint8_t HL;
	char c='\0';
	uint8_t keypad_option;
	for(keypad_option=0;keypad_option<KEYPADLINES;keypad_option++){
    1688:	24 30       	cpi	r18, 0x04	; 4
    168a:	08 f4       	brcc	.+2      	; 0x168e <KEYPAD_getkey+0x254>
    168c:	e1 ce       	rjmp	.-574    	; 0x1450 <KEYPAD_getkey+0x16>
			default:
				break;
		}//endswitch
	}//endfor
	return c;
}
    168e:	df 91       	pop	r29
    1690:	cf 91       	pop	r28
    1692:	08 95       	ret

00001694 <KEYPAD_read>:
/***read***/
struct keypadata KEYPAD_read(void)
{
    1694:	cf 93       	push	r28
    1696:	df 93       	push	r29
    1698:	00 d0       	rcall	.+0      	; 0x169a <KEYPAD_read+0x6>
    169a:	00 d0       	rcall	.+0      	; 0x169c <KEYPAD_read+0x8>
    169c:	1f 92       	push	r1
    169e:	cd b7       	in	r28, 0x3d	; 61
    16a0:	de b7       	in	r29, 0x3e	; 62
	char c;
	c=KEYPAD_getkey(); //returns null all the time when no entry
    16a2:	cb de       	rcall	.-618    	; 0x143a <KEYPAD_getkey>
	if(c){
    16a4:	88 23       	and	r24, r24
    16a6:	b1 f1       	breq	.+108    	; 0x1714 <KEYPAD_read+0x80>
		data.character=c;
    16a8:	80 93 94 02 	sts	0x0294, r24	; 0x800294 <data>
		if(KEYPADSTRINGINDEX<(KEYPADSTRINGSIZE)){
    16ac:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <KEYPADSTRINGINDEX>
    16b0:	94 31       	cpi	r25, 0x14	; 20
    16b2:	88 f4       	brcc	.+34     	; 0x16d6 <KEYPAD_read+0x42>
			KEYPAD_string[KEYPADSTRINGINDEX]=c;
    16b4:	e0 91 61 02 	lds	r30, 0x0261	; 0x800261 <KEYPADSTRINGINDEX>
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	ea 59       	subi	r30, 0x9A	; 154
    16bc:	fd 4f       	sbci	r31, 0xFD	; 253
    16be:	80 83       	st	Z, r24
			KEYPADSTRINGINDEX++;
    16c0:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <KEYPADSTRINGINDEX>
    16c4:	9f 5f       	subi	r25, 0xFF	; 255
    16c6:	90 93 61 02 	sts	0x0261, r25	; 0x800261 <KEYPADSTRINGINDEX>
			KEYPAD_string[KEYPADSTRINGINDEX]='\0';
    16ca:	e0 91 61 02 	lds	r30, 0x0261	; 0x800261 <KEYPADSTRINGINDEX>
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	ea 59       	subi	r30, 0x9A	; 154
    16d2:	fd 4f       	sbci	r31, 0xFD	; 253
    16d4:	10 82       	st	Z, r1
		}
		if(c==KEYPADENTERKEY){
    16d6:	84 34       	cpi	r24, 0x44	; 68
    16d8:	99 f4       	brne	.+38     	; 0x1700 <KEYPAD_read+0x6c>
			KEYPAD_string[KEYPADSTRINGINDEX-1]='\0';
    16da:	e0 91 61 02 	lds	r30, 0x0261	; 0x800261 <KEYPADSTRINGINDEX>
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	eb 59       	subi	r30, 0x9B	; 155
    16e2:	fd 4f       	sbci	r31, 0xFD	; 253
    16e4:	10 82       	st	Z, r1
			KEYPADSTRINGINDEX=0;
    16e6:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <KEYPADSTRINGINDEX>
			data.printstring="\0";
    16ea:	e4 e9       	ldi	r30, 0x94	; 148
    16ec:	f2 e0       	ldi	r31, 0x02	; 2
    16ee:	80 e1       	ldi	r24, 0x10	; 16
    16f0:	91 e0       	ldi	r25, 0x01	; 1
    16f2:	92 83       	std	Z+2, r25	; 0x02
    16f4:	81 83       	std	Z+1, r24	; 0x01
			data.string=KEYPAD_string;
    16f6:	86 e6       	ldi	r24, 0x66	; 102
    16f8:	92 e0       	ldi	r25, 0x02	; 2
    16fa:	94 83       	std	Z+4, r25	; 0x04
    16fc:	83 83       	std	Z+3, r24	; 0x03
    16fe:	0a c0       	rjmp	.+20     	; 0x1714 <KEYPAD_read+0x80>
		}else{
			data.printstring=KEYPAD_string;
    1700:	e4 e9       	ldi	r30, 0x94	; 148
    1702:	f2 e0       	ldi	r31, 0x02	; 2
    1704:	86 e6       	ldi	r24, 0x66	; 102
    1706:	92 e0       	ldi	r25, 0x02	; 2
    1708:	92 83       	std	Z+2, r25	; 0x02
    170a:	81 83       	std	Z+1, r24	; 0x01
			data.string="\0";
    170c:	80 e1       	ldi	r24, 0x10	; 16
    170e:	91 e0       	ldi	r25, 0x01	; 1
    1710:	94 83       	std	Z+4, r25	; 0x04
    1712:	83 83       	std	Z+3, r24	; 0x03
		}
	}
	return data;
    1714:	85 e0       	ldi	r24, 0x05	; 5
    1716:	e4 e9       	ldi	r30, 0x94	; 148
    1718:	f2 e0       	ldi	r31, 0x02	; 2
    171a:	de 01       	movw	r26, r28
    171c:	11 96       	adiw	r26, 0x01	; 1
    171e:	01 90       	ld	r0, Z+
    1720:	0d 92       	st	X+, r0
    1722:	8a 95       	dec	r24
    1724:	e1 f7       	brne	.-8      	; 0x171e <KEYPAD_read+0x8a>
    1726:	29 81       	ldd	r18, Y+1	; 0x01
    1728:	3a 81       	ldd	r19, Y+2	; 0x02
    172a:	4b 81       	ldd	r20, Y+3	; 0x03
    172c:	5c 81       	ldd	r21, Y+4	; 0x04
    172e:	6d 81       	ldd	r22, Y+5	; 0x05
}
    1730:	70 e0       	ldi	r23, 0x00	; 0
    1732:	80 e0       	ldi	r24, 0x00	; 0
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	0f 90       	pop	r0
    1738:	0f 90       	pop	r0
    173a:	0f 90       	pop	r0
    173c:	0f 90       	pop	r0
    173e:	0f 90       	pop	r0
    1740:	df 91       	pop	r29
    1742:	cf 91       	pop	r28
    1744:	08 95       	ret

00001746 <KEYPADenable>:
uint8_t KEYPADhl(uint8_t xi, uint8_t xf);
/*
** procedure and function
*/
KEYPAD KEYPADenable(volatile uint8_t *ddr, volatile uint8_t *pin, volatile uint8_t *port)
{
    1746:	cf 93       	push	r28
    1748:	df 93       	push	r29
    174a:	cd b7       	in	r28, 0x3d	; 61
    174c:	de b7       	in	r29, 0x3e	; 62
    174e:	28 97       	sbiw	r28, 0x08	; 8
    1750:	0f b6       	in	r0, 0x3f	; 63
    1752:	f8 94       	cli
    1754:	de bf       	out	0x3e, r29	; 62
    1756:	0f be       	out	0x3f, r0	; 63
    1758:	cd bf       	out	0x3d, r28	; 61
	//LOCAL VARIABLE
	uint8_t tSREG;
	tSREG=SREG;
    175a:	2f b7       	in	r18, 0x3f	; 63
	data.character=' ';
    175c:	30 e2       	ldi	r19, 0x20	; 32
    175e:	30 93 94 02 	sts	0x0294, r19	; 0x800294 <data>
	//ALLOCAÇÂO MEMORIA PARA Estrutura
	KEYPAD keypad;
	//import parametros
	keypad_DDR=ddr;
    1762:	90 93 65 02 	sts	0x0265, r25	; 0x800265 <keypad_DDR+0x1>
    1766:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <keypad_DDR>
	keypad_PIN=pin;
    176a:	70 93 63 02 	sts	0x0263, r23	; 0x800263 <keypad_PIN+0x1>
    176e:	60 93 62 02 	sts	0x0262, r22	; 0x800262 <keypad_PIN>
	keypad_PORT=port;
    1772:	50 93 57 02 	sts	0x0257, r21	; 0x800257 <keypad_PORT+0x1>
    1776:	40 93 56 02 	sts	0x0256, r20	; 0x800256 <keypad_PORT>
	//inic variables
	*keypad_DDR=(1<<KEYPADLINE_1) | (1<<KEYPADLINE_2) | (1<<KEYPADLINE_3) | (1<<KEYPADLINE_4);
    177a:	3b e8       	ldi	r19, 0x8B	; 139
    177c:	fc 01       	movw	r30, r24
    177e:	30 83       	st	Z, r19
	*keypad_PORT=(1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4);
    1780:	e0 91 56 02 	lds	r30, 0x0256	; 0x800256 <keypad_PORT>
    1784:	f0 91 57 02 	lds	r31, 0x0257	; 0x800257 <keypad_PORT+0x1>
    1788:	84 e7       	ldi	r24, 0x74	; 116
    178a:	80 83       	st	Z, r24
	keypad_datai.line_1=keypad_dataf.line_1=(1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4);
    178c:	a9 e5       	ldi	r26, 0x59	; 89
    178e:	b2 e0       	ldi	r27, 0x02	; 2
    1790:	8c 93       	st	X, r24
    1792:	ed e5       	ldi	r30, 0x5D	; 93
    1794:	f2 e0       	ldi	r31, 0x02	; 2
    1796:	80 83       	st	Z, r24
	keypad_datai.line_2=keypad_dataf.line_2=(1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4);
    1798:	11 96       	adiw	r26, 0x01	; 1
    179a:	8c 93       	st	X, r24
    179c:	11 97       	sbiw	r26, 0x01	; 1
    179e:	81 83       	std	Z+1, r24	; 0x01
	keypad_datai.line_3=keypad_dataf.line_3=(1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4);
    17a0:	12 96       	adiw	r26, 0x02	; 2
    17a2:	8c 93       	st	X, r24
    17a4:	12 97       	sbiw	r26, 0x02	; 2
    17a6:	82 83       	std	Z+2, r24	; 0x02
	keypad_datai.line_4=keypad_dataf.line_4=(1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4);
    17a8:	13 96       	adiw	r26, 0x03	; 3
    17aa:	8c 93       	st	X, r24
    17ac:	83 83       	std	Z+3, r24	; 0x03
	KEYPADSTRINGINDEX=0;
    17ae:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <KEYPADSTRINGINDEX>
	//Direccionar apontadores para PROTOTIPOS
	keypad.getkey=KEYPAD_getkey;
	keypad.read=KEYPAD_read;
	keypad.get=KEYPAD_get;
	keypad.flush=KEYPAD_flush;
	SREG=tSREG;
    17b2:	2f bf       	out	0x3f, r18	; 63
	//
	*keypad_PORT|=(1<<KEYPADLINE_1) | (1<<KEYPADLINE_2) | (1<<KEYPADLINE_3) | (1<<KEYPADLINE_4);
    17b4:	e0 91 56 02 	lds	r30, 0x0256	; 0x800256 <keypad_PORT>
    17b8:	f0 91 57 02 	lds	r31, 0x0257	; 0x800257 <keypad_PORT+0x1>
    17bc:	80 81       	ld	r24, Z
    17be:	8b 68       	ori	r24, 0x8B	; 139
    17c0:	80 83       	st	Z, r24
	//Going to use pull down method.
	//Inic String Vec
	return keypad;
    17c2:	2d e1       	ldi	r18, 0x1D	; 29
    17c4:	3a e0       	ldi	r19, 0x0A	; 10
    17c6:	3a 83       	std	Y+2, r19	; 0x02
    17c8:	29 83       	std	Y+1, r18	; 0x01
    17ca:	4a e4       	ldi	r20, 0x4A	; 74
    17cc:	5b e0       	ldi	r21, 0x0B	; 11
    17ce:	5c 83       	std	Y+4, r21	; 0x04
    17d0:	4b 83       	std	Y+3, r20	; 0x03
    17d2:	60 ef       	ldi	r22, 0xF0	; 240
    17d4:	79 e0       	ldi	r23, 0x09	; 9
    17d6:	7e 83       	std	Y+6, r23	; 0x06
    17d8:	6d 83       	std	Y+5, r22	; 0x05
    17da:	80 e1       	ldi	r24, 0x10	; 16
    17dc:	9a e0       	ldi	r25, 0x0A	; 10
    17de:	98 87       	std	Y+8, r25	; 0x08
    17e0:	8f 83       	std	Y+7, r24	; 0x07
    17e2:	3a 81       	ldd	r19, Y+2	; 0x02
    17e4:	5c 81       	ldd	r21, Y+4	; 0x04
    17e6:	7e 81       	ldd	r23, Y+6	; 0x06
}
    17e8:	98 85       	ldd	r25, Y+8	; 0x08
    17ea:	28 96       	adiw	r28, 0x08	; 8
    17ec:	0f b6       	in	r0, 0x3f	; 63
    17ee:	f8 94       	cli
    17f0:	de bf       	out	0x3e, r29	; 62
    17f2:	0f be       	out	0x3f, r0	; 63
    17f4:	cd bf       	out	0x3d, r28	; 61
    17f6:	df 91       	pop	r29
    17f8:	cf 91       	pop	r28
    17fa:	08 95       	ret

000017fc <LCD0_write>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    17fc:	e0 91 85 02 	lds	r30, 0x0285	; 0x800285 <lcd0_PORT>
    1800:	f0 91 86 02 	lds	r31, 0x0286	; 0x800286 <lcd0_PORT+0x1>
    1804:	90 81       	ld	r25, Z
    1806:	9d 7f       	andi	r25, 0xFD	; 253
    1808:	90 83       	st	Z, r25
    180a:	67 2b       	or	r22, r23
    180c:	41 f0       	breq	.+16     	; 0x181e <LCD0_write+0x22>
    180e:	e0 91 85 02 	lds	r30, 0x0285	; 0x800285 <lcd0_PORT>
    1812:	f0 91 86 02 	lds	r31, 0x0286	; 0x800286 <lcd0_PORT+0x1>
    1816:	90 81       	ld	r25, Z
    1818:	91 60       	ori	r25, 0x01	; 1
    181a:	90 83       	st	Z, r25
    181c:	07 c0       	rjmp	.+14     	; 0x182c <LCD0_write+0x30>
    181e:	e0 91 85 02 	lds	r30, 0x0285	; 0x800285 <lcd0_PORT>
    1822:	f0 91 86 02 	lds	r31, 0x0286	; 0x800286 <lcd0_PORT+0x1>
    1826:	90 81       	ld	r25, Z
    1828:	9e 7f       	andi	r25, 0xFE	; 254
    182a:	90 83       	st	Z, r25
    182c:	e0 91 82 02 	lds	r30, 0x0282	; 0x800282 <lcd0_DDR>
    1830:	f0 91 83 02 	lds	r31, 0x0283	; 0x800283 <lcd0_DDR+0x1>
    1834:	90 81       	ld	r25, Z
    1836:	90 6f       	ori	r25, 0xF0	; 240
    1838:	90 83       	st	Z, r25
    183a:	e0 91 85 02 	lds	r30, 0x0285	; 0x800285 <lcd0_PORT>
    183e:	f0 91 86 02 	lds	r31, 0x0286	; 0x800286 <lcd0_PORT+0x1>
    1842:	90 81       	ld	r25, Z
    1844:	94 60       	ori	r25, 0x04	; 4
    1846:	90 83       	st	Z, r25
    1848:	88 23       	and	r24, r24
    184a:	44 f4       	brge	.+16     	; 0x185c <LCD0_write+0x60>
    184c:	e0 91 85 02 	lds	r30, 0x0285	; 0x800285 <lcd0_PORT>
    1850:	f0 91 86 02 	lds	r31, 0x0286	; 0x800286 <lcd0_PORT+0x1>
    1854:	90 81       	ld	r25, Z
    1856:	90 68       	ori	r25, 0x80	; 128
    1858:	90 83       	st	Z, r25
    185a:	07 c0       	rjmp	.+14     	; 0x186a <LCD0_write+0x6e>
    185c:	e0 91 85 02 	lds	r30, 0x0285	; 0x800285 <lcd0_PORT>
    1860:	f0 91 86 02 	lds	r31, 0x0286	; 0x800286 <lcd0_PORT+0x1>
    1864:	90 81       	ld	r25, Z
    1866:	9f 77       	andi	r25, 0x7F	; 127
    1868:	90 83       	st	Z, r25
    186a:	86 ff       	sbrs	r24, 6
    186c:	08 c0       	rjmp	.+16     	; 0x187e <LCD0_write+0x82>
    186e:	e0 91 85 02 	lds	r30, 0x0285	; 0x800285 <lcd0_PORT>
    1872:	f0 91 86 02 	lds	r31, 0x0286	; 0x800286 <lcd0_PORT+0x1>
    1876:	90 81       	ld	r25, Z
    1878:	90 64       	ori	r25, 0x40	; 64
    187a:	90 83       	st	Z, r25
    187c:	07 c0       	rjmp	.+14     	; 0x188c <LCD0_write+0x90>
    187e:	e0 91 85 02 	lds	r30, 0x0285	; 0x800285 <lcd0_PORT>
    1882:	f0 91 86 02 	lds	r31, 0x0286	; 0x800286 <lcd0_PORT+0x1>
    1886:	90 81       	ld	r25, Z
    1888:	9f 7b       	andi	r25, 0xBF	; 191
    188a:	90 83       	st	Z, r25
    188c:	85 ff       	sbrs	r24, 5
    188e:	08 c0       	rjmp	.+16     	; 0x18a0 <LCD0_write+0xa4>
    1890:	e0 91 85 02 	lds	r30, 0x0285	; 0x800285 <lcd0_PORT>
    1894:	f0 91 86 02 	lds	r31, 0x0286	; 0x800286 <lcd0_PORT+0x1>
    1898:	90 81       	ld	r25, Z
    189a:	90 62       	ori	r25, 0x20	; 32
    189c:	90 83       	st	Z, r25
    189e:	07 c0       	rjmp	.+14     	; 0x18ae <LCD0_write+0xb2>
    18a0:	e0 91 85 02 	lds	r30, 0x0285	; 0x800285 <lcd0_PORT>
    18a4:	f0 91 86 02 	lds	r31, 0x0286	; 0x800286 <lcd0_PORT+0x1>
    18a8:	90 81       	ld	r25, Z
    18aa:	9f 7d       	andi	r25, 0xDF	; 223
    18ac:	90 83       	st	Z, r25
    18ae:	84 ff       	sbrs	r24, 4
    18b0:	08 c0       	rjmp	.+16     	; 0x18c2 <LCD0_write+0xc6>
    18b2:	e0 91 85 02 	lds	r30, 0x0285	; 0x800285 <lcd0_PORT>
    18b6:	f0 91 86 02 	lds	r31, 0x0286	; 0x800286 <lcd0_PORT+0x1>
    18ba:	90 81       	ld	r25, Z
    18bc:	90 61       	ori	r25, 0x10	; 16
    18be:	90 83       	st	Z, r25
    18c0:	07 c0       	rjmp	.+14     	; 0x18d0 <LCD0_write+0xd4>
    18c2:	e0 91 85 02 	lds	r30, 0x0285	; 0x800285 <lcd0_PORT>
    18c6:	f0 91 86 02 	lds	r31, 0x0286	; 0x800286 <lcd0_PORT+0x1>
    18ca:	90 81       	ld	r25, Z
    18cc:	9f 7e       	andi	r25, 0xEF	; 239
    18ce:	90 83       	st	Z, r25
    18d0:	e0 91 85 02 	lds	r30, 0x0285	; 0x800285 <lcd0_PORT>
    18d4:	f0 91 86 02 	lds	r31, 0x0286	; 0x800286 <lcd0_PORT+0x1>
    18d8:	90 81       	ld	r25, Z
    18da:	9b 7f       	andi	r25, 0xFB	; 251
    18dc:	90 83       	st	Z, r25
    18de:	e0 91 85 02 	lds	r30, 0x0285	; 0x800285 <lcd0_PORT>
    18e2:	f0 91 86 02 	lds	r31, 0x0286	; 0x800286 <lcd0_PORT+0x1>
    18e6:	90 81       	ld	r25, Z
    18e8:	94 60       	ori	r25, 0x04	; 4
    18ea:	90 83       	st	Z, r25
    18ec:	83 ff       	sbrs	r24, 3
    18ee:	08 c0       	rjmp	.+16     	; 0x1900 <LCD0_write+0x104>
    18f0:	e0 91 85 02 	lds	r30, 0x0285	; 0x800285 <lcd0_PORT>
    18f4:	f0 91 86 02 	lds	r31, 0x0286	; 0x800286 <lcd0_PORT+0x1>
    18f8:	90 81       	ld	r25, Z
    18fa:	90 68       	ori	r25, 0x80	; 128
    18fc:	90 83       	st	Z, r25
    18fe:	07 c0       	rjmp	.+14     	; 0x190e <LCD0_write+0x112>
    1900:	e0 91 85 02 	lds	r30, 0x0285	; 0x800285 <lcd0_PORT>
    1904:	f0 91 86 02 	lds	r31, 0x0286	; 0x800286 <lcd0_PORT+0x1>
    1908:	90 81       	ld	r25, Z
    190a:	9f 77       	andi	r25, 0x7F	; 127
    190c:	90 83       	st	Z, r25
    190e:	82 ff       	sbrs	r24, 2
    1910:	08 c0       	rjmp	.+16     	; 0x1922 <LCD0_write+0x126>
    1912:	e0 91 85 02 	lds	r30, 0x0285	; 0x800285 <lcd0_PORT>
    1916:	f0 91 86 02 	lds	r31, 0x0286	; 0x800286 <lcd0_PORT+0x1>
    191a:	90 81       	ld	r25, Z
    191c:	90 64       	ori	r25, 0x40	; 64
    191e:	90 83       	st	Z, r25
    1920:	07 c0       	rjmp	.+14     	; 0x1930 <LCD0_write+0x134>
    1922:	e0 91 85 02 	lds	r30, 0x0285	; 0x800285 <lcd0_PORT>
    1926:	f0 91 86 02 	lds	r31, 0x0286	; 0x800286 <lcd0_PORT+0x1>
    192a:	90 81       	ld	r25, Z
    192c:	9f 7b       	andi	r25, 0xBF	; 191
    192e:	90 83       	st	Z, r25
    1930:	81 ff       	sbrs	r24, 1
    1932:	08 c0       	rjmp	.+16     	; 0x1944 <LCD0_write+0x148>
    1934:	e0 91 85 02 	lds	r30, 0x0285	; 0x800285 <lcd0_PORT>
    1938:	f0 91 86 02 	lds	r31, 0x0286	; 0x800286 <lcd0_PORT+0x1>
    193c:	90 81       	ld	r25, Z
    193e:	90 62       	ori	r25, 0x20	; 32
    1940:	90 83       	st	Z, r25
    1942:	07 c0       	rjmp	.+14     	; 0x1952 <LCD0_write+0x156>
    1944:	e0 91 85 02 	lds	r30, 0x0285	; 0x800285 <lcd0_PORT>
    1948:	f0 91 86 02 	lds	r31, 0x0286	; 0x800286 <lcd0_PORT+0x1>
    194c:	90 81       	ld	r25, Z
    194e:	9f 7d       	andi	r25, 0xDF	; 223
    1950:	90 83       	st	Z, r25
    1952:	80 ff       	sbrs	r24, 0
    1954:	08 c0       	rjmp	.+16     	; 0x1966 <LCD0_write+0x16a>
    1956:	e0 91 85 02 	lds	r30, 0x0285	; 0x800285 <lcd0_PORT>
    195a:	f0 91 86 02 	lds	r31, 0x0286	; 0x800286 <lcd0_PORT+0x1>
    195e:	80 81       	ld	r24, Z
    1960:	80 61       	ori	r24, 0x10	; 16
    1962:	80 83       	st	Z, r24
    1964:	07 c0       	rjmp	.+14     	; 0x1974 <LCD0_write+0x178>
    1966:	e0 91 85 02 	lds	r30, 0x0285	; 0x800285 <lcd0_PORT>
    196a:	f0 91 86 02 	lds	r31, 0x0286	; 0x800286 <lcd0_PORT+0x1>
    196e:	80 81       	ld	r24, Z
    1970:	8f 7e       	andi	r24, 0xEF	; 239
    1972:	80 83       	st	Z, r24
    1974:	e0 91 85 02 	lds	r30, 0x0285	; 0x800285 <lcd0_PORT>
    1978:	f0 91 86 02 	lds	r31, 0x0286	; 0x800286 <lcd0_PORT+0x1>
    197c:	80 81       	ld	r24, Z
    197e:	8b 7f       	andi	r24, 0xFB	; 251
    1980:	80 83       	st	Z, r24
    1982:	08 95       	ret

00001984 <LCD0_read>:
    1984:	e0 91 82 02 	lds	r30, 0x0282	; 0x800282 <lcd0_DDR>
    1988:	f0 91 83 02 	lds	r31, 0x0283	; 0x800283 <lcd0_DDR+0x1>
    198c:	20 81       	ld	r18, Z
    198e:	2f 70       	andi	r18, 0x0F	; 15
    1990:	20 83       	st	Z, r18
    1992:	e0 91 85 02 	lds	r30, 0x0285	; 0x800285 <lcd0_PORT>
    1996:	f0 91 86 02 	lds	r31, 0x0286	; 0x800286 <lcd0_PORT+0x1>
    199a:	20 81       	ld	r18, Z
    199c:	20 6f       	ori	r18, 0xF0	; 240
    199e:	20 83       	st	Z, r18
    19a0:	e0 91 85 02 	lds	r30, 0x0285	; 0x800285 <lcd0_PORT>
    19a4:	f0 91 86 02 	lds	r31, 0x0286	; 0x800286 <lcd0_PORT+0x1>
    19a8:	20 81       	ld	r18, Z
    19aa:	22 60       	ori	r18, 0x02	; 2
    19ac:	20 83       	st	Z, r18
    19ae:	89 2b       	or	r24, r25
    19b0:	41 f0       	breq	.+16     	; 0x19c2 <LCD0_read+0x3e>
    19b2:	e0 91 85 02 	lds	r30, 0x0285	; 0x800285 <lcd0_PORT>
    19b6:	f0 91 86 02 	lds	r31, 0x0286	; 0x800286 <lcd0_PORT+0x1>
    19ba:	80 81       	ld	r24, Z
    19bc:	81 60       	ori	r24, 0x01	; 1
    19be:	80 83       	st	Z, r24
    19c0:	07 c0       	rjmp	.+14     	; 0x19d0 <LCD0_read+0x4c>
    19c2:	e0 91 85 02 	lds	r30, 0x0285	; 0x800285 <lcd0_PORT>
    19c6:	f0 91 86 02 	lds	r31, 0x0286	; 0x800286 <lcd0_PORT+0x1>
    19ca:	80 81       	ld	r24, Z
    19cc:	8e 7f       	andi	r24, 0xFE	; 254
    19ce:	80 83       	st	Z, r24
    19d0:	e0 91 85 02 	lds	r30, 0x0285	; 0x800285 <lcd0_PORT>
    19d4:	f0 91 86 02 	lds	r31, 0x0286	; 0x800286 <lcd0_PORT+0x1>
    19d8:	80 81       	ld	r24, Z
    19da:	84 60       	ori	r24, 0x04	; 4
    19dc:	80 83       	st	Z, r24
    19de:	e0 91 7b 02 	lds	r30, 0x027B	; 0x80027b <lcd0_PIN>
    19e2:	f0 91 7c 02 	lds	r31, 0x027C	; 0x80027c <lcd0_PIN+0x1>
    19e6:	80 81       	ld	r24, Z
    19e8:	88 23       	and	r24, r24
    19ea:	14 f0       	brlt	.+4      	; 0x19f0 <LCD0_read+0x6c>
    19ec:	80 e0       	ldi	r24, 0x00	; 0
    19ee:	01 c0       	rjmp	.+2      	; 0x19f2 <LCD0_read+0x6e>
    19f0:	80 e8       	ldi	r24, 0x80	; 128
    19f2:	90 81       	ld	r25, Z
    19f4:	96 ff       	sbrs	r25, 6
    19f6:	02 c0       	rjmp	.+4      	; 0x19fc <LCD0_read+0x78>
    19f8:	80 64       	ori	r24, 0x40	; 64
    19fa:	01 c0       	rjmp	.+2      	; 0x19fe <LCD0_read+0x7a>
    19fc:	8f 7b       	andi	r24, 0xBF	; 191
    19fe:	90 81       	ld	r25, Z
    1a00:	95 ff       	sbrs	r25, 5
    1a02:	02 c0       	rjmp	.+4      	; 0x1a08 <LCD0_read+0x84>
    1a04:	80 62       	ori	r24, 0x20	; 32
    1a06:	01 c0       	rjmp	.+2      	; 0x1a0a <LCD0_read+0x86>
    1a08:	8f 7d       	andi	r24, 0xDF	; 223
    1a0a:	90 81       	ld	r25, Z
    1a0c:	94 ff       	sbrs	r25, 4
    1a0e:	02 c0       	rjmp	.+4      	; 0x1a14 <LCD0_read+0x90>
    1a10:	80 61       	ori	r24, 0x10	; 16
    1a12:	01 c0       	rjmp	.+2      	; 0x1a16 <LCD0_read+0x92>
    1a14:	8f 7e       	andi	r24, 0xEF	; 239
    1a16:	e0 91 85 02 	lds	r30, 0x0285	; 0x800285 <lcd0_PORT>
    1a1a:	f0 91 86 02 	lds	r31, 0x0286	; 0x800286 <lcd0_PORT+0x1>
    1a1e:	90 81       	ld	r25, Z
    1a20:	9b 7f       	andi	r25, 0xFB	; 251
    1a22:	90 83       	st	Z, r25
    1a24:	e0 91 85 02 	lds	r30, 0x0285	; 0x800285 <lcd0_PORT>
    1a28:	f0 91 86 02 	lds	r31, 0x0286	; 0x800286 <lcd0_PORT+0x1>
    1a2c:	90 81       	ld	r25, Z
    1a2e:	94 60       	ori	r25, 0x04	; 4
    1a30:	90 83       	st	Z, r25
    1a32:	e0 91 7b 02 	lds	r30, 0x027B	; 0x80027b <lcd0_PIN>
    1a36:	f0 91 7c 02 	lds	r31, 0x027C	; 0x80027c <lcd0_PIN+0x1>
    1a3a:	90 81       	ld	r25, Z
    1a3c:	99 23       	and	r25, r25
    1a3e:	14 f4       	brge	.+4      	; 0x1a44 <LCD0_read+0xc0>
    1a40:	88 60       	ori	r24, 0x08	; 8
    1a42:	01 c0       	rjmp	.+2      	; 0x1a46 <LCD0_read+0xc2>
    1a44:	87 7f       	andi	r24, 0xF7	; 247
    1a46:	90 81       	ld	r25, Z
    1a48:	96 ff       	sbrs	r25, 6
    1a4a:	02 c0       	rjmp	.+4      	; 0x1a50 <LCD0_read+0xcc>
    1a4c:	84 60       	ori	r24, 0x04	; 4
    1a4e:	01 c0       	rjmp	.+2      	; 0x1a52 <LCD0_read+0xce>
    1a50:	8b 7f       	andi	r24, 0xFB	; 251
    1a52:	90 81       	ld	r25, Z
    1a54:	95 ff       	sbrs	r25, 5
    1a56:	02 c0       	rjmp	.+4      	; 0x1a5c <LCD0_read+0xd8>
    1a58:	82 60       	ori	r24, 0x02	; 2
    1a5a:	01 c0       	rjmp	.+2      	; 0x1a5e <LCD0_read+0xda>
    1a5c:	8d 7f       	andi	r24, 0xFD	; 253
    1a5e:	90 81       	ld	r25, Z
    1a60:	94 ff       	sbrs	r25, 4
    1a62:	02 c0       	rjmp	.+4      	; 0x1a68 <LCD0_read+0xe4>
    1a64:	81 60       	ori	r24, 0x01	; 1
    1a66:	01 c0       	rjmp	.+2      	; 0x1a6a <LCD0_read+0xe6>
    1a68:	8e 7f       	andi	r24, 0xFE	; 254
    1a6a:	e0 91 85 02 	lds	r30, 0x0285	; 0x800285 <lcd0_PORT>
    1a6e:	f0 91 86 02 	lds	r31, 0x0286	; 0x800286 <lcd0_PORT+0x1>
    1a72:	90 81       	ld	r25, Z
    1a74:	9b 7f       	andi	r25, 0xFB	; 251
    1a76:	90 83       	st	Z, r25
    1a78:	08 95       	ret

00001a7a <LCD0_BF>:
    1a7a:	cf 93       	push	r28
    1a7c:	df 93       	push	r29
    1a7e:	80 e0       	ldi	r24, 0x00	; 0
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	80 df       	rcall	.-256    	; 0x1984 <LCD0_read>
    1a84:	cb e0       	ldi	r28, 0x0B	; 11
    1a86:	d0 e0       	ldi	r29, 0x00	; 0
    1a88:	05 c0       	rjmp	.+10     	; 0x1a94 <LCD0_BF+0x1a>
    1a8a:	80 e0       	ldi	r24, 0x00	; 0
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	7a df       	rcall	.-268    	; 0x1984 <LCD0_read>
    1a90:	21 97       	sbiw	r28, 0x01	; 1
    1a92:	11 f0       	breq	.+4      	; 0x1a98 <LCD0_BF+0x1e>
    1a94:	88 23       	and	r24, r24
    1a96:	cc f3       	brlt	.-14     	; 0x1a8a <LCD0_BF+0x10>
    1a98:	df 91       	pop	r29
    1a9a:	cf 91       	pop	r28
    1a9c:	08 95       	ret

00001a9e <LCD0_putch>:
    1a9e:	61 e0       	ldi	r22, 0x01	; 1
    1aa0:	70 e0       	ldi	r23, 0x00	; 0
    1aa2:	ac de       	rcall	.-680    	; 0x17fc <LCD0_write>
    1aa4:	ea cf       	rjmp	.-44     	; 0x1a7a <LCD0_BF>
    1aa6:	08 95       	ret

00001aa8 <LCD0_getch>:
    1aa8:	cf 93       	push	r28
    1aaa:	81 e0       	ldi	r24, 0x01	; 1
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	6a df       	rcall	.-300    	; 0x1984 <LCD0_read>
    1ab0:	c8 2f       	mov	r28, r24
    1ab2:	e3 df       	rcall	.-58     	; 0x1a7a <LCD0_BF>
    1ab4:	8c 2f       	mov	r24, r28
    1ab6:	cf 91       	pop	r28
    1ab8:	08 95       	ret

00001aba <LCD0_string>:
    1aba:	cf 93       	push	r28
    1abc:	df 93       	push	r29
    1abe:	ec 01       	movw	r28, r24
    1ac0:	88 81       	ld	r24, Y
    1ac2:	88 23       	and	r24, r24
    1ac4:	41 f0       	breq	.+16     	; 0x1ad6 <LCD0_string+0x1c>
    1ac6:	21 96       	adiw	r28, 0x01	; 1
    1ac8:	61 e0       	ldi	r22, 0x01	; 1
    1aca:	70 e0       	ldi	r23, 0x00	; 0
    1acc:	97 de       	rcall	.-722    	; 0x17fc <LCD0_write>
    1ace:	d5 df       	rcall	.-86     	; 0x1a7a <LCD0_BF>
    1ad0:	89 91       	ld	r24, Y+
    1ad2:	81 11       	cpse	r24, r1
    1ad4:	f9 cf       	rjmp	.-14     	; 0x1ac8 <LCD0_string+0xe>
    1ad6:	df 91       	pop	r29
    1ad8:	cf 91       	pop	r28
    1ada:	08 95       	ret

00001adc <LCD0_string_size>:
    1adc:	0f 93       	push	r16
    1ade:	1f 93       	push	r17
    1ae0:	cf 93       	push	r28
    1ae2:	df 93       	push	r29
    1ae4:	fc 01       	movw	r30, r24
    1ae6:	d6 2f       	mov	r29, r22
    1ae8:	80 81       	ld	r24, Z
    1aea:	88 23       	and	r24, r24
    1aec:	51 f0       	breq	.+20     	; 0x1b02 <LCD0_string_size+0x26>
    1aee:	8f 01       	movw	r16, r30
    1af0:	0f 5f       	subi	r16, 0xFF	; 255
    1af2:	1f 4f       	sbci	r17, 0xFF	; 255
    1af4:	61 11       	cpse	r22, r1
    1af6:	09 c0       	rjmp	.+18     	; 0x1b0a <LCD0_string_size+0x2e>
    1af8:	1b c0       	rjmp	.+54     	; 0x1b30 <LCD0_string_size+0x54>
    1afa:	cf 5f       	subi	r28, 0xFF	; 255
    1afc:	dc 17       	cp	r29, r28
    1afe:	30 f4       	brcc	.+12     	; 0x1b0c <LCD0_string_size+0x30>
    1b00:	01 c0       	rjmp	.+2      	; 0x1b04 <LCD0_string_size+0x28>
    1b02:	c0 e0       	ldi	r28, 0x00	; 0
    1b04:	cd 17       	cp	r28, r29
    1b06:	60 f0       	brcs	.+24     	; 0x1b20 <LCD0_string_size+0x44>
    1b08:	13 c0       	rjmp	.+38     	; 0x1b30 <LCD0_string_size+0x54>
    1b0a:	c1 e0       	ldi	r28, 0x01	; 1
    1b0c:	61 e0       	ldi	r22, 0x01	; 1
    1b0e:	70 e0       	ldi	r23, 0x00	; 0
    1b10:	75 de       	rcall	.-790    	; 0x17fc <LCD0_write>
    1b12:	b3 df       	rcall	.-154    	; 0x1a7a <LCD0_BF>
    1b14:	f8 01       	movw	r30, r16
    1b16:	81 91       	ld	r24, Z+
    1b18:	8f 01       	movw	r16, r30
    1b1a:	81 11       	cpse	r24, r1
    1b1c:	ee cf       	rjmp	.-36     	; 0x1afa <LCD0_string_size+0x1e>
    1b1e:	f2 cf       	rjmp	.-28     	; 0x1b04 <LCD0_string_size+0x28>
    1b20:	cf 5f       	subi	r28, 0xFF	; 255
    1b22:	61 e0       	ldi	r22, 0x01	; 1
    1b24:	70 e0       	ldi	r23, 0x00	; 0
    1b26:	80 e2       	ldi	r24, 0x20	; 32
    1b28:	69 de       	rcall	.-814    	; 0x17fc <LCD0_write>
    1b2a:	a7 df       	rcall	.-178    	; 0x1a7a <LCD0_BF>
    1b2c:	cd 17       	cp	r28, r29
    1b2e:	c0 f3       	brcs	.-16     	; 0x1b20 <LCD0_string_size+0x44>
    1b30:	df 91       	pop	r29
    1b32:	cf 91       	pop	r28
    1b34:	1f 91       	pop	r17
    1b36:	0f 91       	pop	r16
    1b38:	08 95       	ret

00001b3a <LCD0_hspace>:
    1b3a:	cf 93       	push	r28
    1b3c:	c8 2f       	mov	r28, r24
    1b3e:	88 23       	and	r24, r24
    1b40:	39 f0       	breq	.+14     	; 0x1b50 <LCD0_hspace+0x16>
    1b42:	61 e0       	ldi	r22, 0x01	; 1
    1b44:	70 e0       	ldi	r23, 0x00	; 0
    1b46:	80 e2       	ldi	r24, 0x20	; 32
    1b48:	59 de       	rcall	.-846    	; 0x17fc <LCD0_write>
    1b4a:	97 df       	rcall	.-210    	; 0x1a7a <LCD0_BF>
    1b4c:	c1 50       	subi	r28, 0x01	; 1
    1b4e:	c9 f7       	brne	.-14     	; 0x1b42 <LCD0_hspace+0x8>
    1b50:	cf 91       	pop	r28
    1b52:	08 95       	ret

00001b54 <LCD0_gotoxy>:
    1b54:	26 2f       	mov	r18, r22
    1b56:	81 30       	cpi	r24, 0x01	; 1
    1b58:	91 05       	cpc	r25, r1
    1b5a:	71 f0       	breq	.+28     	; 0x1b78 <LCD0_gotoxy+0x24>
    1b5c:	30 f0       	brcs	.+12     	; 0x1b6a <LCD0_gotoxy+0x16>
    1b5e:	82 30       	cpi	r24, 0x02	; 2
    1b60:	91 05       	cpc	r25, r1
    1b62:	89 f0       	breq	.+34     	; 0x1b86 <LCD0_gotoxy+0x32>
    1b64:	03 97       	sbiw	r24, 0x03	; 3
    1b66:	b1 f0       	breq	.+44     	; 0x1b94 <LCD0_gotoxy+0x40>
    1b68:	08 95       	ret
    1b6a:	60 e0       	ldi	r22, 0x00	; 0
    1b6c:	70 e0       	ldi	r23, 0x00	; 0
    1b6e:	80 e8       	ldi	r24, 0x80	; 128
    1b70:	82 0f       	add	r24, r18
    1b72:	44 de       	rcall	.-888    	; 0x17fc <LCD0_write>
    1b74:	82 cf       	rjmp	.-252    	; 0x1a7a <LCD0_BF>
    1b76:	08 95       	ret
    1b78:	60 e0       	ldi	r22, 0x00	; 0
    1b7a:	70 e0       	ldi	r23, 0x00	; 0
    1b7c:	80 ec       	ldi	r24, 0xC0	; 192
    1b7e:	82 0f       	add	r24, r18
    1b80:	3d de       	rcall	.-902    	; 0x17fc <LCD0_write>
    1b82:	7b cf       	rjmp	.-266    	; 0x1a7a <LCD0_BF>
    1b84:	08 95       	ret
    1b86:	60 e0       	ldi	r22, 0x00	; 0
    1b88:	70 e0       	ldi	r23, 0x00	; 0
    1b8a:	84 e9       	ldi	r24, 0x94	; 148
    1b8c:	82 0f       	add	r24, r18
    1b8e:	36 de       	rcall	.-916    	; 0x17fc <LCD0_write>
    1b90:	74 cf       	rjmp	.-280    	; 0x1a7a <LCD0_BF>
    1b92:	08 95       	ret
    1b94:	60 e0       	ldi	r22, 0x00	; 0
    1b96:	70 e0       	ldi	r23, 0x00	; 0
    1b98:	84 ed       	ldi	r24, 0xD4	; 212
    1b9a:	82 0f       	add	r24, r18
    1b9c:	2f de       	rcall	.-930    	; 0x17fc <LCD0_write>
    1b9e:	6d cf       	rjmp	.-294    	; 0x1a7a <LCD0_BF>
    1ba0:	08 95       	ret

00001ba2 <LCD0_clear>:
    1ba2:	60 e0       	ldi	r22, 0x00	; 0
    1ba4:	70 e0       	ldi	r23, 0x00	; 0
    1ba6:	81 e0       	ldi	r24, 0x01	; 1
    1ba8:	29 de       	rcall	.-942    	; 0x17fc <LCD0_write>
    1baa:	87 ee       	ldi	r24, 0xE7	; 231
    1bac:	97 e1       	ldi	r25, 0x17	; 23
    1bae:	01 97       	sbiw	r24, 0x01	; 1
    1bb0:	f1 f7       	brne	.-4      	; 0x1bae <LCD0_clear+0xc>
    1bb2:	00 c0       	rjmp	.+0      	; 0x1bb4 <LCD0_clear+0x12>
    1bb4:	00 00       	nop
    1bb6:	08 95       	ret

00001bb8 <LCD0_inic>:
	return lcd0;
}
void LCD0_inic(void)
{
	//LCD INIC
	*lcd0_DDR=(1<<RS)|(1<<RW)|(1<<EN)|(0<<NC);
    1bb8:	e0 91 82 02 	lds	r30, 0x0282	; 0x800282 <lcd0_DDR>
    1bbc:	f0 91 83 02 	lds	r31, 0x0283	; 0x800283 <lcd0_DDR+0x1>
    1bc0:	87 e0       	ldi	r24, 0x07	; 7
    1bc2:	80 83       	st	Z, r24
	*lcd0_PORT=(1<<NC);
    1bc4:	e0 91 85 02 	lds	r30, 0x0285	; 0x800285 <lcd0_PORT>
    1bc8:	f0 91 86 02 	lds	r31, 0x0286	; 0x800286 <lcd0_PORT+0x1>
    1bcc:	88 e0       	ldi	r24, 0x08	; 8
    1bce:	80 83       	st	Z, r24
    1bd0:	2f ef       	ldi	r18, 0xFF	; 255
    1bd2:	83 ef       	ldi	r24, 0xF3	; 243
    1bd4:	91 e0       	ldi	r25, 0x01	; 1
    1bd6:	21 50       	subi	r18, 0x01	; 1
    1bd8:	80 40       	sbci	r24, 0x00	; 0
    1bda:	90 40       	sbci	r25, 0x00	; 0
    1bdc:	e1 f7       	brne	.-8      	; 0x1bd6 <LCD0_inic+0x1e>
    1bde:	00 c0       	rjmp	.+0      	; 0x1be0 <LCD0_inic+0x28>
    1be0:	00 00       	nop
	/***INICIALIZACAO LCD**datasheet*/
	_delay_ms(40);
	LCD0_write(0x33,INST); //function set
    1be2:	60 e0       	ldi	r22, 0x00	; 0
    1be4:	70 e0       	ldi	r23, 0x00	; 0
    1be6:	83 e3       	ldi	r24, 0x33	; 51
    1be8:	09 de       	rcall	.-1006   	; 0x17fc <LCD0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1bea:	20 ed       	ldi	r18, 0xD0	; 208
    1bec:	2a 95       	dec	r18
    1bee:	f1 f7       	brne	.-4      	; 0x1bec <LCD0_inic+0x34>
	_delay_us(39);
	LCD0_write(0x33,INST); //function set
    1bf0:	60 e0       	ldi	r22, 0x00	; 0
    1bf2:	70 e0       	ldi	r23, 0x00	; 0
    1bf4:	83 e3       	ldi	r24, 0x33	; 51
    1bf6:	02 de       	rcall	.-1020   	; 0x17fc <LCD0_write>
    1bf8:	80 ed       	ldi	r24, 0xD0	; 208
    1bfa:	8a 95       	dec	r24
    1bfc:	f1 f7       	brne	.-4      	; 0x1bfa <LCD0_inic+0x42>
	_delay_us(39);
	LCD0_write(0x2B,INST); //function set
    1bfe:	60 e0       	ldi	r22, 0x00	; 0
    1c00:	70 e0       	ldi	r23, 0x00	; 0
    1c02:	8b e2       	ldi	r24, 0x2B	; 43
    1c04:	fb dd       	rcall	.-1034   	; 0x17fc <LCD0_write>
    1c06:	95 ec       	ldi	r25, 0xC5	; 197
    1c08:	9a 95       	dec	r25
    1c0a:	f1 f7       	brne	.-4      	; 0x1c08 <LCD0_inic+0x50>
    1c0c:	00 00       	nop
	_delay_us(37);
	LCD0_write(0x0C,INST);// display on/off control
    1c0e:	60 e0       	ldi	r22, 0x00	; 0
    1c10:	70 e0       	ldi	r23, 0x00	; 0
    1c12:	8c e0       	ldi	r24, 0x0C	; 12
    1c14:	f3 dd       	rcall	.-1050   	; 0x17fc <LCD0_write>
    1c16:	25 ec       	ldi	r18, 0xC5	; 197
    1c18:	2a 95       	dec	r18
    1c1a:	f1 f7       	brne	.-4      	; 0x1c18 <LCD0_inic+0x60>
	_delay_us(37);
	LCD0_write(0x01,INST);// clear display
    1c1c:	00 00       	nop
    1c1e:	60 e0       	ldi	r22, 0x00	; 0
    1c20:	70 e0       	ldi	r23, 0x00	; 0
    1c22:	81 e0       	ldi	r24, 0x01	; 1
    1c24:	eb dd       	rcall	.-1066   	; 0x17fc <LCD0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1c26:	87 ee       	ldi	r24, 0xE7	; 231
    1c28:	97 e1       	ldi	r25, 0x17	; 23
    1c2a:	01 97       	sbiw	r24, 0x01	; 1
    1c2c:	f1 f7       	brne	.-4      	; 0x1c2a <LCD0_inic+0x72>
    1c2e:	00 c0       	rjmp	.+0      	; 0x1c30 <LCD0_inic+0x78>
	_delay_ms(1.53);
	LCD0_write(0x06,INST);// entry mode set (crazy settings)
    1c30:	00 00       	nop
    1c32:	60 e0       	ldi	r22, 0x00	; 0
    1c34:	70 e0       	ldi	r23, 0x00	; 0
    1c36:	86 e0       	ldi	r24, 0x06	; 6
    1c38:	e1 dd       	rcall	.-1086   	; 0x17fc <LCD0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1c3a:	95 ec       	ldi	r25, 0xC5	; 197
    1c3c:	9a 95       	dec	r25
    1c3e:	f1 f7       	brne	.-4      	; 0x1c3c <LCD0_inic+0x84>
    1c40:	00 00       	nop
    1c42:	08 95       	ret

00001c44 <LCD0enable>:
unsigned int LCD_ticks(unsigned int num);
/*
** procedure and function
*/
LCD0 LCD0enable(volatile uint8_t *ddr, volatile uint8_t *pin, volatile uint8_t *port)
{
    1c44:	1f 93       	push	r17
    1c46:	cf 93       	push	r28
    1c48:	df 93       	push	r29
    1c4a:	ec 01       	movw	r28, r24
	//LOCAL VARIABLES
	uint8_t tSREG;
	tSREG=SREG;
    1c4c:	1f b7       	in	r17, 0x3f	; 63
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
    1c4e:	8f b7       	in	r24, 0x3f	; 63
    1c50:	8f 77       	andi	r24, 0x7F	; 127
    1c52:	8f bf       	out	0x3f, r24	; 63
	//ALLOCAÇÂO MEMORIA PARA Estrutura
	LCD0 lcd0;
	//import parametros
	lcd0_DDR=ddr;
    1c54:	70 93 83 02 	sts	0x0283, r23	; 0x800283 <lcd0_DDR+0x1>
    1c58:	60 93 82 02 	sts	0x0282, r22	; 0x800282 <lcd0_DDR>
	lcd0_PIN=pin;
    1c5c:	50 93 7c 02 	sts	0x027C, r21	; 0x80027c <lcd0_PIN+0x1>
    1c60:	40 93 7b 02 	sts	0x027B, r20	; 0x80027b <lcd0_PIN>
	lcd0_PORT=port;
    1c64:	30 93 86 02 	sts	0x0286, r19	; 0x800286 <lcd0_PORT+0x1>
    1c68:	20 93 85 02 	sts	0x0285, r18	; 0x800285 <lcd0_PORT>
	//inic variables
	*lcd0_DDR=0x00;
    1c6c:	fb 01       	movw	r30, r22
    1c6e:	10 82       	st	Z, r1
	*lcd0_PORT=0xFF;
    1c70:	e0 91 85 02 	lds	r30, 0x0285	; 0x800285 <lcd0_PORT>
    1c74:	f0 91 86 02 	lds	r31, 0x0286	; 0x800286 <lcd0_PORT+0x1>
    1c78:	8f ef       	ldi	r24, 0xFF	; 255
    1c7a:	80 83       	st	Z, r24
	lcd0_detect=*lcd0_PIN & (1<<NC);
    1c7c:	e0 91 7b 02 	lds	r30, 0x027B	; 0x80027b <lcd0_PIN>
    1c80:	f0 91 7c 02 	lds	r31, 0x027C	; 0x80027c <lcd0_PIN+0x1>
    1c84:	80 81       	ld	r24, Z
    1c86:	88 70       	andi	r24, 0x08	; 8
    1c88:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <lcd0_detect>
	lcd0.hspace=LCD0_hspace;
	lcd0.clear=LCD0_clear;
	lcd0.gotoxy=LCD0_gotoxy;
	lcd0.reboot=LCD0_reboot;
	//LCD INIC
	LCD0_inic();
    1c8c:	95 df       	rcall	.-214    	; 0x1bb8 <LCD0_inic>
	SREG=tSREG;
    1c8e:	1f bf       	out	0x3f, r17	; 63
	//
	return lcd0;
    1c90:	8e ef       	ldi	r24, 0xFE	; 254
    1c92:	9b e0       	ldi	r25, 0x0B	; 11
    1c94:	99 83       	std	Y+1, r25	; 0x01
    1c96:	88 83       	st	Y, r24
    1c98:	82 ec       	ldi	r24, 0xC2	; 194
    1c9a:	9c e0       	ldi	r25, 0x0C	; 12
    1c9c:	9b 83       	std	Y+3, r25	; 0x03
    1c9e:	8a 83       	std	Y+2, r24	; 0x02
    1ca0:	8d e3       	ldi	r24, 0x3D	; 61
    1ca2:	9d e0       	ldi	r25, 0x0D	; 13
    1ca4:	9d 83       	std	Y+5, r25	; 0x05
    1ca6:	8c 83       	std	Y+4, r24	; 0x04
    1ca8:	8f e4       	ldi	r24, 0x4F	; 79
    1caa:	9d e0       	ldi	r25, 0x0D	; 13
    1cac:	9f 83       	std	Y+7, r25	; 0x07
    1cae:	8e 83       	std	Y+6, r24	; 0x06
    1cb0:	84 e5       	ldi	r24, 0x54	; 84
    1cb2:	9d e0       	ldi	r25, 0x0D	; 13
    1cb4:	99 87       	std	Y+9, r25	; 0x09
    1cb6:	88 87       	std	Y+8, r24	; 0x08
    1cb8:	8d e5       	ldi	r24, 0x5D	; 93
    1cba:	9d e0       	ldi	r25, 0x0D	; 13
    1cbc:	9b 87       	std	Y+11, r25	; 0x0b
    1cbe:	8a 87       	std	Y+10, r24	; 0x0a
    1cc0:	8e e6       	ldi	r24, 0x6E	; 110
    1cc2:	9d e0       	ldi	r25, 0x0D	; 13
    1cc4:	9d 87       	std	Y+13, r25	; 0x0d
    1cc6:	8c 87       	std	Y+12, r24	; 0x0c
    1cc8:	8d e9       	ldi	r24, 0x9D	; 157
    1cca:	9d e0       	ldi	r25, 0x0D	; 13
    1ccc:	9f 87       	std	Y+15, r25	; 0x0f
    1cce:	8e 87       	std	Y+14, r24	; 0x0e
    1cd0:	81 ed       	ldi	r24, 0xD1	; 209
    1cd2:	9d e0       	ldi	r25, 0x0D	; 13
    1cd4:	99 8b       	std	Y+17, r25	; 0x11
    1cd6:	88 8b       	std	Y+16, r24	; 0x10
    1cd8:	8a ea       	ldi	r24, 0xAA	; 170
    1cda:	9d e0       	ldi	r25, 0x0D	; 13
    1cdc:	9b 8b       	std	Y+19, r25	; 0x13
    1cde:	8a 8b       	std	Y+18, r24	; 0x12
    1ce0:	89 e7       	ldi	r24, 0x79	; 121
    1ce2:	9e e0       	ldi	r25, 0x0E	; 14
    1ce4:	9d 8b       	std	Y+21, r25	; 0x15
    1ce6:	8c 8b       	std	Y+20, r24	; 0x14
}
    1ce8:	ce 01       	movw	r24, r28
    1cea:	df 91       	pop	r29
    1cec:	cf 91       	pop	r28
    1cee:	1f 91       	pop	r17
    1cf0:	08 95       	ret

00001cf2 <LCD0_reboot>:
	*lcd0_PORT|=(1<<EN);
	LCD_ticks(num);
	*lcd0_PORT&=~(1<<EN);
}
void LCD0_reboot(void)
{
    1cf2:	cf 93       	push	r28
	//low high detect pin NC
	uint8_t i;
	uint8_t tmp;
	tmp=*lcd0_PIN & (1<<NC);
    1cf4:	e0 91 7b 02 	lds	r30, 0x027B	; 0x80027b <lcd0_PIN>
    1cf8:	f0 91 7c 02 	lds	r31, 0x027C	; 0x80027c <lcd0_PIN+0x1>
    1cfc:	c0 81       	ld	r28, Z
    1cfe:	c8 70       	andi	r28, 0x08	; 8
	i=tmp^lcd0_detect;
    1d00:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <lcd0_detect>
    1d04:	8c 27       	eor	r24, r28
	i&=tmp;
	if(i)
    1d06:	8c 23       	and	r24, r28
    1d08:	09 f0       	breq	.+2      	; 0x1d0c <LCD0_reboot+0x1a>
		LCD0_inic();
    1d0a:	56 df       	rcall	.-340    	; 0x1bb8 <LCD0_inic>
	lcd0_detect=tmp;
    1d0c:	c0 93 84 02 	sts	0x0284, r28	; 0x800284 <lcd0_detect>
}
    1d10:	cf 91       	pop	r28
    1d12:	08 95       	ret

00001d14 <PCF8563RTC_SetTime>:
	i2c.Write(0x00);						// Write 0x00 to Control register to disable SQW-Out
	i2c.Stop();								// Stop I2C communication after initializing PCF8563
}
/***void PCF8563RTC_SetTime(uint8_t var_hour_u8, uint8_t var_min_u8, uint8_t var_sec_u8)***/
void PCF8563RTC_SetTime(uint8_t var_hour_u8, uint8_t var_min_u8, uint8_t var_sec_u8)
{
    1d14:	ff 92       	push	r15
    1d16:	0f 93       	push	r16
    1d18:	1f 93       	push	r17
    1d1a:	cf 93       	push	r28
    1d1c:	df 93       	push	r29
    1d1e:	18 2f       	mov	r17, r24
    1d20:	06 2f       	mov	r16, r22
    1d22:	f4 2e       	mov	r15, r20
	i2c.Start();                            // Start I2C communication
    1d24:	ca ea       	ldi	r28, 0xAA	; 170
    1d26:	d2 e0       	ldi	r29, 0x02	; 2
    1d28:	e8 81       	ld	r30, Y
    1d2a:	f9 81       	ldd	r31, Y+1	; 0x01
    1d2c:	09 95       	icall
	i2c.Write(PCF8563WriteMode_U8);         // connect to PCF8563 by sending its ID on I2c Bus
    1d2e:	ec 81       	ldd	r30, Y+4	; 0x04
    1d30:	fd 81       	ldd	r31, Y+5	; 0x05
    1d32:	82 ea       	ldi	r24, 0xA2	; 162
    1d34:	09 95       	icall
	i2c.Write(PCF8563SecondRegAddress_U8);  // Select the SEC RAM address
    1d36:	ec 81       	ldd	r30, Y+4	; 0x04
    1d38:	fd 81       	ldd	r31, Y+5	; 0x05
    1d3a:	82 e0       	ldi	r24, 0x02	; 2
    1d3c:	09 95       	icall
	i2c.Write(var_sec_u8);			        // Write sec from RAM address 02H
    1d3e:	ec 81       	ldd	r30, Y+4	; 0x04
    1d40:	fd 81       	ldd	r31, Y+5	; 0x05
    1d42:	8f 2d       	mov	r24, r15
    1d44:	09 95       	icall
	i2c.Write(var_min_u8);			        // Write min from RAM address 03H
    1d46:	ec 81       	ldd	r30, Y+4	; 0x04
    1d48:	fd 81       	ldd	r31, Y+5	; 0x05
    1d4a:	80 2f       	mov	r24, r16
    1d4c:	09 95       	icall
	i2c.Write(var_hour_u8);			        // Write hour from RAM address 04H
    1d4e:	ec 81       	ldd	r30, Y+4	; 0x04
    1d50:	fd 81       	ldd	r31, Y+5	; 0x05
    1d52:	81 2f       	mov	r24, r17
    1d54:	09 95       	icall
	i2c.Stop();           	                // Stop I2C communication after Setting the Time
    1d56:	ea 81       	ldd	r30, Y+2	; 0x02
    1d58:	fb 81       	ldd	r31, Y+3	; 0x03
    1d5a:	09 95       	icall
}
    1d5c:	df 91       	pop	r29
    1d5e:	cf 91       	pop	r28
    1d60:	1f 91       	pop	r17
    1d62:	0f 91       	pop	r16
    1d64:	ff 90       	pop	r15
    1d66:	08 95       	ret

00001d68 <PCF8563RTC_SetHour>:
/***void PCF8563RTC_SetHour(uint8_t var_hour_u8)***/
void PCF8563RTC_SetHour(uint8_t var_hour_u8)
{
    1d68:	1f 93       	push	r17
    1d6a:	cf 93       	push	r28
    1d6c:	df 93       	push	r29
    1d6e:	18 2f       	mov	r17, r24
	i2c.Start();                            // Start I2C communication
    1d70:	ca ea       	ldi	r28, 0xAA	; 170
    1d72:	d2 e0       	ldi	r29, 0x02	; 2
    1d74:	e8 81       	ld	r30, Y
    1d76:	f9 81       	ldd	r31, Y+1	; 0x01
    1d78:	09 95       	icall
	i2c.Write(PCF8563WriteMode_U8);         // connect to PCF8563 by sending its ID on I2c Bus
    1d7a:	ec 81       	ldd	r30, Y+4	; 0x04
    1d7c:	fd 81       	ldd	r31, Y+5	; 0x05
    1d7e:	82 ea       	ldi	r24, 0xA2	; 162
    1d80:	09 95       	icall
	i2c.Write(PCF8563HourRegAddress_U8);    // Select the SEC RAM address
    1d82:	ec 81       	ldd	r30, Y+4	; 0x04
    1d84:	fd 81       	ldd	r31, Y+5	; 0x05
    1d86:	84 e0       	ldi	r24, 0x04	; 4
    1d88:	09 95       	icall
	i2c.Write(var_hour_u8);			        // Write hour from RAM address 04H
    1d8a:	ec 81       	ldd	r30, Y+4	; 0x04
    1d8c:	fd 81       	ldd	r31, Y+5	; 0x05
    1d8e:	81 2f       	mov	r24, r17
    1d90:	09 95       	icall
	i2c.Stop();           	                // Stop I2C communication after Setting the Time
    1d92:	ea 81       	ldd	r30, Y+2	; 0x02
    1d94:	fb 81       	ldd	r31, Y+3	; 0x03
    1d96:	09 95       	icall
}
    1d98:	df 91       	pop	r29
    1d9a:	cf 91       	pop	r28
    1d9c:	1f 91       	pop	r17
    1d9e:	08 95       	ret

00001da0 <PCF8563RTC_SetMinute>:
/***void PCF8563RTC_SetMinute(uint8_t var_min_u8)***/
void PCF8563RTC_SetMinute(uint8_t var_min_u8)
{
    1da0:	1f 93       	push	r17
    1da2:	cf 93       	push	r28
    1da4:	df 93       	push	r29
    1da6:	18 2f       	mov	r17, r24
	i2c.Start();                            // Start I2C communication
    1da8:	ca ea       	ldi	r28, 0xAA	; 170
    1daa:	d2 e0       	ldi	r29, 0x02	; 2
    1dac:	e8 81       	ld	r30, Y
    1dae:	f9 81       	ldd	r31, Y+1	; 0x01
    1db0:	09 95       	icall
	i2c.Write(PCF8563WriteMode_U8);         // connect to PCF8563 by sending its ID on I2c Bus
    1db2:	ec 81       	ldd	r30, Y+4	; 0x04
    1db4:	fd 81       	ldd	r31, Y+5	; 0x05
    1db6:	82 ea       	ldi	r24, 0xA2	; 162
    1db8:	09 95       	icall
	i2c.Write(PCF8563MinuteRegAddress_U8);  // Select the SEC RAM address
    1dba:	ec 81       	ldd	r30, Y+4	; 0x04
    1dbc:	fd 81       	ldd	r31, Y+5	; 0x05
    1dbe:	83 e0       	ldi	r24, 0x03	; 3
    1dc0:	09 95       	icall
	i2c.Write(var_min_u8);			        // Write min from RAM address 03H
    1dc2:	ec 81       	ldd	r30, Y+4	; 0x04
    1dc4:	fd 81       	ldd	r31, Y+5	; 0x05
    1dc6:	81 2f       	mov	r24, r17
    1dc8:	09 95       	icall
	i2c.Stop();           	                // Stop I2C communication after Setting the Time
    1dca:	ea 81       	ldd	r30, Y+2	; 0x02
    1dcc:	fb 81       	ldd	r31, Y+3	; 0x03
    1dce:	09 95       	icall
}
    1dd0:	df 91       	pop	r29
    1dd2:	cf 91       	pop	r28
    1dd4:	1f 91       	pop	r17
    1dd6:	08 95       	ret

00001dd8 <PCF8563RTC_SetSecond>:
/***void PCF8563RTC_SetSecond(uint8_t var_sec_u8)***/
void PCF8563RTC_SetSecond(uint8_t var_sec_u8)
{
    1dd8:	1f 93       	push	r17
    1dda:	cf 93       	push	r28
    1ddc:	df 93       	push	r29
    1dde:	18 2f       	mov	r17, r24
	i2c.Start();                            // Start I2C communication
    1de0:	ca ea       	ldi	r28, 0xAA	; 170
    1de2:	d2 e0       	ldi	r29, 0x02	; 2
    1de4:	e8 81       	ld	r30, Y
    1de6:	f9 81       	ldd	r31, Y+1	; 0x01
    1de8:	09 95       	icall
	i2c.Write(PCF8563WriteMode_U8);         // connect to PCF8563 by sending its ID on I2c Bus
    1dea:	ec 81       	ldd	r30, Y+4	; 0x04
    1dec:	fd 81       	ldd	r31, Y+5	; 0x05
    1dee:	82 ea       	ldi	r24, 0xA2	; 162
    1df0:	09 95       	icall
	i2c.Write(PCF8563SecondRegAddress_U8);  // Select the SEC RAM address
    1df2:	ec 81       	ldd	r30, Y+4	; 0x04
    1df4:	fd 81       	ldd	r31, Y+5	; 0x05
    1df6:	82 e0       	ldi	r24, 0x02	; 2
    1df8:	09 95       	icall
	i2c.Write(var_sec_u8);			        // Write sec from RAM address 02H
    1dfa:	ec 81       	ldd	r30, Y+4	; 0x04
    1dfc:	fd 81       	ldd	r31, Y+5	; 0x05
    1dfe:	81 2f       	mov	r24, r17
    1e00:	09 95       	icall
	i2c.Stop();           	                // Stop I2C communication after Setting the Time
    1e02:	ea 81       	ldd	r30, Y+2	; 0x02
    1e04:	fb 81       	ldd	r31, Y+3	; 0x03
    1e06:	09 95       	icall
}
    1e08:	df 91       	pop	r29
    1e0a:	cf 91       	pop	r28
    1e0c:	1f 91       	pop	r17
    1e0e:	08 95       	ret

00001e10 <PCF8563RTC_SetClkOut>:
/***void PCF8563RTC_SetClkOut(uint8_t onoff, uint8_t freq)***/
void PCF8563RTC_SetClkOut(uint8_t onoff, uint8_t freq)
{
    1e10:	1f 93       	push	r17
    1e12:	cf 93       	push	r28
    1e14:	df 93       	push	r29
	uint8_t word=0;
	if(onoff)
    1e16:	88 23       	and	r24, r24
    1e18:	21 f0       	breq	.+8      	; 0x1e22 <PCF8563RTC_SetClkOut+0x12>
		word=0x80 | (freq & 0x03);
    1e1a:	63 70       	andi	r22, 0x03	; 3
    1e1c:	16 2f       	mov	r17, r22
    1e1e:	10 68       	ori	r17, 0x80	; 128
    1e20:	01 c0       	rjmp	.+2      	; 0x1e24 <PCF8563RTC_SetClkOut+0x14>
	i2c.Stop();           	                // Stop I2C communication after Setting the Time
}
/***void PCF8563RTC_SetClkOut(uint8_t onoff, uint8_t freq)***/
void PCF8563RTC_SetClkOut(uint8_t onoff, uint8_t freq)
{
	uint8_t word=0;
    1e22:	10 e0       	ldi	r17, 0x00	; 0
	if(onoff)
		word=0x80 | (freq & 0x03);
	i2c.Start();                            // Start I2C communication
    1e24:	ca ea       	ldi	r28, 0xAA	; 170
    1e26:	d2 e0       	ldi	r29, 0x02	; 2
    1e28:	e8 81       	ld	r30, Y
    1e2a:	f9 81       	ldd	r31, Y+1	; 0x01
    1e2c:	09 95       	icall
	i2c.Write(PCF8563WriteMode_U8);			// connect to PCF8563 by sending its ID on I2c Bus
    1e2e:	ec 81       	ldd	r30, Y+4	; 0x04
    1e30:	fd 81       	ldd	r31, Y+5	; 0x05
    1e32:	82 ea       	ldi	r24, 0xA2	; 162
    1e34:	09 95       	icall
	i2c.Write(PCF8563CLKOUT_control_U8);	// Select the CLKOUT RAM address
    1e36:	ec 81       	ldd	r30, Y+4	; 0x04
    1e38:	fd 81       	ldd	r31, Y+5	; 0x05
    1e3a:	8d e0       	ldi	r24, 0x0D	; 13
    1e3c:	09 95       	icall
	i2c.Write(word);						// Write Clock from RAM address 0DH						
    1e3e:	ec 81       	ldd	r30, Y+4	; 0x04
    1e40:	fd 81       	ldd	r31, Y+5	; 0x05
    1e42:	81 2f       	mov	r24, r17
    1e44:	09 95       	icall
	i2c.Stop();           	                // Stop I2C communication after Setting the Time
    1e46:	ea 81       	ldd	r30, Y+2	; 0x02
    1e48:	fb 81       	ldd	r31, Y+3	; 0x03
    1e4a:	09 95       	icall
}
    1e4c:	df 91       	pop	r29
    1e4e:	cf 91       	pop	r28
    1e50:	1f 91       	pop	r17
    1e52:	08 95       	ret

00001e54 <PCF8563RTC_SetDate>:
/***void PCF8563RTC_SetDate(uint8_t var_day_u8, uint8_t var_weekday_u8, uint8_t var_month_u8, uint8_t var_year_u8)***/
void PCF8563RTC_SetDate(uint8_t var_day_u8, uint8_t var_weekday_u8, uint8_t var_month_u8, uint8_t var_year_u8)
{
    1e54:	ef 92       	push	r14
    1e56:	ff 92       	push	r15
    1e58:	0f 93       	push	r16
    1e5a:	1f 93       	push	r17
    1e5c:	cf 93       	push	r28
    1e5e:	df 93       	push	r29
    1e60:	e8 2e       	mov	r14, r24
    1e62:	f6 2e       	mov	r15, r22
    1e64:	04 2f       	mov	r16, r20
    1e66:	12 2f       	mov	r17, r18
	i2c.Start();                          // Start I2C communication
    1e68:	ca ea       	ldi	r28, 0xAA	; 170
    1e6a:	d2 e0       	ldi	r29, 0x02	; 2
    1e6c:	e8 81       	ld	r30, Y
    1e6e:	f9 81       	ldd	r31, Y+1	; 0x01
    1e70:	09 95       	icall
	i2c.Write(PCF8563WriteMode_U8);	      // connect to PCF8563 by sending its ID on I2c Bus
    1e72:	ec 81       	ldd	r30, Y+4	; 0x04
    1e74:	fd 81       	ldd	r31, Y+5	; 0x05
    1e76:	82 ea       	ldi	r24, 0xA2	; 162
    1e78:	09 95       	icall
	i2c.Write(PCF8563DayRegAddress_U8);  // Request DAY RAM address at 05H
    1e7a:	ec 81       	ldd	r30, Y+4	; 0x04
    1e7c:	fd 81       	ldd	r31, Y+5	; 0x05
    1e7e:	85 e0       	ldi	r24, 0x05	; 5
    1e80:	09 95       	icall
	i2c.Write(var_day_u8);			      // Write date on RAM address 05H
    1e82:	ec 81       	ldd	r30, Y+4	; 0x04
    1e84:	fd 81       	ldd	r31, Y+5	; 0x05
    1e86:	8e 2d       	mov	r24, r14
    1e88:	09 95       	icall
	i2c.Write(var_weekday_u8);            // Write date on RAM address 06H
    1e8a:	ec 81       	ldd	r30, Y+4	; 0x04
    1e8c:	fd 81       	ldd	r31, Y+5	; 0x05
    1e8e:	8f 2d       	mov	r24, r15
    1e90:	09 95       	icall
	i2c.Write(var_month_u8);			  // Write month on RAM address 07H
    1e92:	ec 81       	ldd	r30, Y+4	; 0x04
    1e94:	fd 81       	ldd	r31, Y+5	; 0x05
    1e96:	80 2f       	mov	r24, r16
    1e98:	09 95       	icall
	i2c.Write(var_year_u8);			      // Write year on RAM address 08h
    1e9a:	ec 81       	ldd	r30, Y+4	; 0x04
    1e9c:	fd 81       	ldd	r31, Y+5	; 0x05
    1e9e:	81 2f       	mov	r24, r17
    1ea0:	09 95       	icall
	i2c.Stop();				              // Stop I2C communication after Setting the Date
    1ea2:	ea 81       	ldd	r30, Y+2	; 0x02
    1ea4:	fb 81       	ldd	r31, Y+3	; 0x03
    1ea6:	09 95       	icall
}
    1ea8:	df 91       	pop	r29
    1eaa:	cf 91       	pop	r28
    1eac:	1f 91       	pop	r17
    1eae:	0f 91       	pop	r16
    1eb0:	ff 90       	pop	r15
    1eb2:	ef 90       	pop	r14
    1eb4:	08 95       	ret

00001eb6 <PCF8563RTC_SetYear>:
/***void PCF8563RTC_SetYear(uint8_t var_year_u8)***/
void PCF8563RTC_SetYear(uint8_t var_year_u8)
{
    1eb6:	1f 93       	push	r17
    1eb8:	cf 93       	push	r28
    1eba:	df 93       	push	r29
    1ebc:	18 2f       	mov	r17, r24
	i2c.Start();                          // Start I2C communication
    1ebe:	ca ea       	ldi	r28, 0xAA	; 170
    1ec0:	d2 e0       	ldi	r29, 0x02	; 2
    1ec2:	e8 81       	ld	r30, Y
    1ec4:	f9 81       	ldd	r31, Y+1	; 0x01
    1ec6:	09 95       	icall
	i2c.Write(PCF8563WriteMode_U8);	      // connect to PCF8563 by sending its ID on I2c Bus
    1ec8:	ec 81       	ldd	r30, Y+4	; 0x04
    1eca:	fd 81       	ldd	r31, Y+5	; 0x05
    1ecc:	82 ea       	ldi	r24, 0xA2	; 162
    1ece:	09 95       	icall
	i2c.Write(PCF8563YearRegAddress_U8);  // Request DAY RAM address at 08H
    1ed0:	ec 81       	ldd	r30, Y+4	; 0x04
    1ed2:	fd 81       	ldd	r31, Y+5	; 0x05
    1ed4:	88 e0       	ldi	r24, 0x08	; 8
    1ed6:	09 95       	icall
	i2c.Write(var_year_u8);			      // Write year on RAM address 08h
    1ed8:	ec 81       	ldd	r30, Y+4	; 0x04
    1eda:	fd 81       	ldd	r31, Y+5	; 0x05
    1edc:	81 2f       	mov	r24, r17
    1ede:	09 95       	icall
	i2c.Stop();				              // Stop I2C communication after Setting the Date
    1ee0:	ea 81       	ldd	r30, Y+2	; 0x02
    1ee2:	fb 81       	ldd	r31, Y+3	; 0x03
    1ee4:	09 95       	icall
}
    1ee6:	df 91       	pop	r29
    1ee8:	cf 91       	pop	r28
    1eea:	1f 91       	pop	r17
    1eec:	08 95       	ret

00001eee <PCF8563RTC_SetMonth>:
/***void PCF8563RTC_SetMonth(uint8_t var_month_u8)***/
void PCF8563RTC_SetMonth(uint8_t var_month_u8)
{
    1eee:	1f 93       	push	r17
    1ef0:	cf 93       	push	r28
    1ef2:	df 93       	push	r29
    1ef4:	18 2f       	mov	r17, r24
	i2c.Start();                           // Start I2C communication
    1ef6:	ca ea       	ldi	r28, 0xAA	; 170
    1ef8:	d2 e0       	ldi	r29, 0x02	; 2
    1efa:	e8 81       	ld	r30, Y
    1efc:	f9 81       	ldd	r31, Y+1	; 0x01
    1efe:	09 95       	icall
	i2c.Write(PCF8563WriteMode_U8);	       // connect to PCF8563 by sending its ID on I2c Bus
    1f00:	ec 81       	ldd	r30, Y+4	; 0x04
    1f02:	fd 81       	ldd	r31, Y+5	; 0x05
    1f04:	82 ea       	ldi	r24, 0xA2	; 162
    1f06:	09 95       	icall
	i2c.Write(PCF8563MonthRegAddress_U8);  // Request DAY RAM address at 07H
    1f08:	ec 81       	ldd	r30, Y+4	; 0x04
    1f0a:	fd 81       	ldd	r31, Y+5	; 0x05
    1f0c:	87 e0       	ldi	r24, 0x07	; 7
    1f0e:	09 95       	icall
	i2c.Write(var_month_u8);			   // Write month on RAM address 07H
    1f10:	ec 81       	ldd	r30, Y+4	; 0x04
    1f12:	fd 81       	ldd	r31, Y+5	; 0x05
    1f14:	81 2f       	mov	r24, r17
    1f16:	09 95       	icall
	i2c.Stop();				               // Stop I2C communication after Setting the Date
    1f18:	ea 81       	ldd	r30, Y+2	; 0x02
    1f1a:	fb 81       	ldd	r31, Y+3	; 0x03
    1f1c:	09 95       	icall
}
    1f1e:	df 91       	pop	r29
    1f20:	cf 91       	pop	r28
    1f22:	1f 91       	pop	r17
    1f24:	08 95       	ret

00001f26 <PCF8563RTC_SetWeekday>:
/***void PCF8563RTC_SetWeekday(uint8_t var_weekday_u8)***/
void PCF8563RTC_SetWeekday(uint8_t var_weekday_u8)
{
    1f26:	1f 93       	push	r17
    1f28:	cf 93       	push	r28
    1f2a:	df 93       	push	r29
    1f2c:	18 2f       	mov	r17, r24
	i2c.Start();                             // Start I2C communication
    1f2e:	ca ea       	ldi	r28, 0xAA	; 170
    1f30:	d2 e0       	ldi	r29, 0x02	; 2
    1f32:	e8 81       	ld	r30, Y
    1f34:	f9 81       	ldd	r31, Y+1	; 0x01
    1f36:	09 95       	icall
	i2c.Write(PCF8563WriteMode_U8);	         // connect to PCF8563 by sending its ID on I2c Bus
    1f38:	ec 81       	ldd	r30, Y+4	; 0x04
    1f3a:	fd 81       	ldd	r31, Y+5	; 0x05
    1f3c:	82 ea       	ldi	r24, 0xA2	; 162
    1f3e:	09 95       	icall
	i2c.Write(PCF8563WeekdayRegAddress_U8);  // Request DAY RAM address at 06H
    1f40:	ec 81       	ldd	r30, Y+4	; 0x04
    1f42:	fd 81       	ldd	r31, Y+5	; 0x05
    1f44:	86 e0       	ldi	r24, 0x06	; 6
    1f46:	09 95       	icall
	i2c.Write(var_weekday_u8);               // Write date on RAM address 06H
    1f48:	ec 81       	ldd	r30, Y+4	; 0x04
    1f4a:	fd 81       	ldd	r31, Y+5	; 0x05
    1f4c:	81 2f       	mov	r24, r17
    1f4e:	09 95       	icall
	i2c.Stop();				                 // Stop I2C communication after Setting the Date
    1f50:	ea 81       	ldd	r30, Y+2	; 0x02
    1f52:	fb 81       	ldd	r31, Y+3	; 0x03
    1f54:	09 95       	icall
}
    1f56:	df 91       	pop	r29
    1f58:	cf 91       	pop	r28
    1f5a:	1f 91       	pop	r17
    1f5c:	08 95       	ret

00001f5e <PCF8563RTC_SetDay>:
/***void PCF8563RTC_SetDay(uint8_t var_day_u8)***/
void PCF8563RTC_SetDay(uint8_t var_day_u8)
{
    1f5e:	1f 93       	push	r17
    1f60:	cf 93       	push	r28
    1f62:	df 93       	push	r29
    1f64:	18 2f       	mov	r17, r24
	i2c.Start();                          // Start I2C communication
    1f66:	ca ea       	ldi	r28, 0xAA	; 170
    1f68:	d2 e0       	ldi	r29, 0x02	; 2
    1f6a:	e8 81       	ld	r30, Y
    1f6c:	f9 81       	ldd	r31, Y+1	; 0x01
    1f6e:	09 95       	icall
	i2c.Write(PCF8563WriteMode_U8);	      // connect to PCF8563 by sending its ID on I2c Bus
    1f70:	ec 81       	ldd	r30, Y+4	; 0x04
    1f72:	fd 81       	ldd	r31, Y+5	; 0x05
    1f74:	82 ea       	ldi	r24, 0xA2	; 162
    1f76:	09 95       	icall
	i2c.Write(PCF8563DayRegAddress_U8);  // Request DAY RAM address at 05H
    1f78:	ec 81       	ldd	r30, Y+4	; 0x04
    1f7a:	fd 81       	ldd	r31, Y+5	; 0x05
    1f7c:	85 e0       	ldi	r24, 0x05	; 5
    1f7e:	09 95       	icall
	i2c.Write(var_day_u8);			      // Write date on RAM address 05H
    1f80:	ec 81       	ldd	r30, Y+4	; 0x04
    1f82:	fd 81       	ldd	r31, Y+5	; 0x05
    1f84:	81 2f       	mov	r24, r17
    1f86:	09 95       	icall
	i2c.Stop();				              // Stop I2C communication after Setting the Date
    1f88:	ea 81       	ldd	r30, Y+2	; 0x02
    1f8a:	fb 81       	ldd	r31, Y+3	; 0x03
    1f8c:	09 95       	icall
}
    1f8e:	df 91       	pop	r29
    1f90:	cf 91       	pop	r28
    1f92:	1f 91       	pop	r17
    1f94:	08 95       	ret

00001f96 <PCF8563RTC_GetTime>:
/***struct time PCF8563RTC_GetTime(void)***/
struct time PCF8563RTC_GetTime(void)
{
    1f96:	ff 92       	push	r15
    1f98:	0f 93       	push	r16
    1f9a:	1f 93       	push	r17
    1f9c:	cf 93       	push	r28
    1f9e:	df 93       	push	r29
	struct time result;
	i2c.Start();							       // Start I2C communication
    1fa0:	ca ea       	ldi	r28, 0xAA	; 170
    1fa2:	d2 e0       	ldi	r29, 0x02	; 2
    1fa4:	e8 81       	ld	r30, Y
    1fa6:	f9 81       	ldd	r31, Y+1	; 0x01
    1fa8:	09 95       	icall
	i2c.Write(PCF8563WriteMode_U8);			       // connect to PCF8563 by sending its ID on I2c Bus
    1faa:	ec 81       	ldd	r30, Y+4	; 0x04
    1fac:	fd 81       	ldd	r31, Y+5	; 0x05
    1fae:	82 ea       	ldi	r24, 0xA2	; 162
    1fb0:	09 95       	icall
	i2c.Write(PCF8563SecondRegAddress_U8);	       // Request Sec RAM address at 00H
    1fb2:	ec 81       	ldd	r30, Y+4	; 0x04
    1fb4:	fd 81       	ldd	r31, Y+5	; 0x05
    1fb6:	82 e0       	ldi	r24, 0x02	; 2
    1fb8:	09 95       	icall
	i2c.Stop();								       // Stop I2C communication after selecting Sec Register
    1fba:	ea 81       	ldd	r30, Y+2	; 0x02
    1fbc:	fb 81       	ldd	r31, Y+3	; 0x03
    1fbe:	09 95       	icall
	i2c.Start();							       // Start I2C communication
    1fc0:	e8 81       	ld	r30, Y
    1fc2:	f9 81       	ldd	r31, Y+1	; 0x01
    1fc4:	09 95       	icall
	i2c.Write(PCF8563ReadMode_U8);			       // connect to PCF8563(Read mode) by sending its ID
    1fc6:	ec 81       	ldd	r30, Y+4	; 0x04
    1fc8:	fd 81       	ldd	r31, Y+5	; 0x05
    1fca:	83 ea       	ldi	r24, 0xA3	; 163
    1fcc:	09 95       	icall
	result.VL_seconds = i2c.Read(1) & ~0x80;	   // read second and return Positive ACK
    1fce:	ee 81       	ldd	r30, Y+6	; 0x06
    1fd0:	ff 81       	ldd	r31, Y+7	; 0x07
    1fd2:	81 e0       	ldi	r24, 0x01	; 1
    1fd4:	09 95       	icall
    1fd6:	f8 2e       	mov	r15, r24
	result.minutes = i2c.Read(1) & ~0x80;		   // read minute and return Positive ACK
    1fd8:	ee 81       	ldd	r30, Y+6	; 0x06
    1fda:	ff 81       	ldd	r31, Y+7	; 0x07
    1fdc:	81 e0       	ldi	r24, 0x01	; 1
    1fde:	09 95       	icall
    1fe0:	18 2f       	mov	r17, r24
	result.hours = i2c.Read(0) & ~0xC0;			   // read hour and return Negative/No ACK
    1fe2:	ee 81       	ldd	r30, Y+6	; 0x06
    1fe4:	ff 81       	ldd	r31, Y+7	; 0x07
    1fe6:	80 e0       	ldi	r24, 0x00	; 0
    1fe8:	09 95       	icall
    1fea:	08 2f       	mov	r16, r24
	i2c.Stop();								       // Stop I2C communication after reading the Time
    1fec:	ea 81       	ldd	r30, Y+2	; 0x02
    1fee:	fb 81       	ldd	r31, Y+3	; 0x03
    1ff0:	09 95       	icall
	return result;
    1ff2:	60 2f       	mov	r22, r16
    1ff4:	6f 73       	andi	r22, 0x3F	; 63
    1ff6:	71 2f       	mov	r23, r17
    1ff8:	7f 77       	andi	r23, 0x7F	; 127
}
    1ffa:	8f 2d       	mov	r24, r15
    1ffc:	8f 77       	andi	r24, 0x7F	; 127
    1ffe:	df 91       	pop	r29
    2000:	cf 91       	pop	r28
    2002:	1f 91       	pop	r17
    2004:	0f 91       	pop	r16
    2006:	ff 90       	pop	r15
    2008:	08 95       	ret

0000200a <PCF8563RTC_GetDate>:
/***struct date PCF8563RTC_GetDate(void)***/
struct date PCF8563RTC_GetDate(void)
{
    200a:	ef 92       	push	r14
    200c:	ff 92       	push	r15
    200e:	0f 93       	push	r16
    2010:	1f 93       	push	r17
    2012:	cf 93       	push	r28
    2014:	df 93       	push	r29
	struct date result;
	i2c.Start();							        // Start I2C communication
    2016:	ca ea       	ldi	r28, 0xAA	; 170
    2018:	d2 e0       	ldi	r29, 0x02	; 2
    201a:	e8 81       	ld	r30, Y
    201c:	f9 81       	ldd	r31, Y+1	; 0x01
    201e:	09 95       	icall
	i2c.Write(PCF8563WriteMode_U8);			        // connect to PCF8563 by sending its ID on I2c Bus
    2020:	ec 81       	ldd	r30, Y+4	; 0x04
    2022:	fd 81       	ldd	r31, Y+5	; 0x05
    2024:	82 ea       	ldi	r24, 0xA2	; 162
    2026:	09 95       	icall
	i2c.Write(PCF8563DayRegAddress_U8);	            // Request DAY RAM address at 04H
    2028:	ec 81       	ldd	r30, Y+4	; 0x04
    202a:	fd 81       	ldd	r31, Y+5	; 0x05
    202c:	85 e0       	ldi	r24, 0x05	; 5
    202e:	09 95       	icall
	i2c.Stop();								        // Stop I2C communication after selecting DAY Register
    2030:	ea 81       	ldd	r30, Y+2	; 0x02
    2032:	fb 81       	ldd	r31, Y+3	; 0x03
    2034:	09 95       	icall
	i2c.Start();							        // Start I2C communication
    2036:	e8 81       	ld	r30, Y
    2038:	f9 81       	ldd	r31, Y+1	; 0x01
    203a:	09 95       	icall
	i2c.Write(PCF8563ReadMode_U8);			        // connect to PCF8563 (Read mode) by sending its ID
    203c:	ec 81       	ldd	r30, Y+4	; 0x04
    203e:	fd 81       	ldd	r31, Y+5	; 0x05
    2040:	83 ea       	ldi	r24, 0xA3	; 163
    2042:	09 95       	icall
	result.days = i2c.Read(1) & ~0xC0;				// read Day and return Positive ACK
    2044:	ee 81       	ldd	r30, Y+6	; 0x06
    2046:	ff 81       	ldd	r31, Y+7	; 0x07
    2048:	81 e0       	ldi	r24, 0x01	; 1
    204a:	09 95       	icall
    204c:	08 2f       	mov	r16, r24
	result.weekdays = i2c.Read(1) & ~0xF8;			// read Month and return Positive ACK
    204e:	ee 81       	ldd	r30, Y+6	; 0x06
    2050:	ff 81       	ldd	r31, Y+7	; 0x07
    2052:	81 e0       	ldi	r24, 0x01	; 1
    2054:	09 95       	icall
    2056:	f8 2e       	mov	r15, r24
	result.century_months = i2c.Read(1) & ~0xE0;
    2058:	ee 81       	ldd	r30, Y+6	; 0x06
    205a:	ff 81       	ldd	r31, Y+7	; 0x07
    205c:	81 e0       	ldi	r24, 0x01	; 1
    205e:	09 95       	icall
    2060:	18 2f       	mov	r17, r24
	result.years = i2c.Read(0);				        // read Year and return Negative/No ACK
    2062:	ee 81       	ldd	r30, Y+6	; 0x06
    2064:	ff 81       	ldd	r31, Y+7	; 0x07
    2066:	80 e0       	ldi	r24, 0x00	; 0
    2068:	09 95       	icall
    206a:	e8 2e       	mov	r14, r24
	i2c.Stop();								        // Stop I2C communication after reading the Date
    206c:	ea 81       	ldd	r30, Y+2	; 0x02
    206e:	fb 81       	ldd	r31, Y+3	; 0x03
    2070:	09 95       	icall
	return result;
    2072:	71 2f       	mov	r23, r17
    2074:	7f 71       	andi	r23, 0x1F	; 31
}
    2076:	6e 2d       	mov	r22, r14
    2078:	8f 2d       	mov	r24, r15
    207a:	87 70       	andi	r24, 0x07	; 7
    207c:	90 2f       	mov	r25, r16
    207e:	9f 73       	andi	r25, 0x3F	; 63
    2080:	df 91       	pop	r29
    2082:	cf 91       	pop	r28
    2084:	1f 91       	pop	r17
    2086:	0f 91       	pop	r16
    2088:	ff 90       	pop	r15
    208a:	ef 90       	pop	r14
    208c:	08 95       	ret

0000208e <PCF8563RTC_bcd2dec>:
/***uint8_t PCF8563RTC_bcd2dec(uint8_t num)***/
uint8_t PCF8563RTC_bcd2dec(uint8_t num)
{
	return ((num/16 * 10) + (num % 16));
    208e:	98 2f       	mov	r25, r24
    2090:	92 95       	swap	r25
    2092:	9f 70       	andi	r25, 0x0F	; 15
    2094:	99 0f       	add	r25, r25
    2096:	29 2f       	mov	r18, r25
    2098:	22 0f       	add	r18, r18
    209a:	22 0f       	add	r18, r18
    209c:	92 0f       	add	r25, r18
    209e:	8f 70       	andi	r24, 0x0F	; 15
}
    20a0:	89 0f       	add	r24, r25
    20a2:	08 95       	ret

000020a4 <PCF8563RTC_bintobcd>:
/***uint8_t PCF8563RTC_bintobcd(uint8_t bin)***/
uint8_t PCF8563RTC_bintobcd(uint8_t bin)
{
	return (((bin) / 10) << 4) + ((bin) % 10);
    20a4:	9d ec       	ldi	r25, 0xCD	; 205
    20a6:	89 9f       	mul	r24, r25
    20a8:	91 2d       	mov	r25, r1
    20aa:	11 24       	eor	r1, r1
    20ac:	96 95       	lsr	r25
    20ae:	96 95       	lsr	r25
    20b0:	96 95       	lsr	r25
    20b2:	39 2f       	mov	r19, r25
    20b4:	33 0f       	add	r19, r19
    20b6:	23 2f       	mov	r18, r19
    20b8:	22 0f       	add	r18, r18
    20ba:	22 0f       	add	r18, r18
    20bc:	23 0f       	add	r18, r19
    20be:	82 1b       	sub	r24, r18
}
    20c0:	20 e1       	ldi	r18, 0x10	; 16
    20c2:	92 9f       	mul	r25, r18
    20c4:	80 0d       	add	r24, r0
    20c6:	11 24       	eor	r1, r1
    20c8:	08 95       	ret

000020ca <PCF8563RTC_Init>:
	SREG=tSREG;
	return pcf;
}
/***void PCF8563RTC_Init(uint8_t prescaler)***/
void PCF8563RTC_Init(void)
{
    20ca:	cf 93       	push	r28
    20cc:	df 93       	push	r29
	i2c.Start();							// Start I2C communication
    20ce:	ca ea       	ldi	r28, 0xAA	; 170
    20d0:	d2 e0       	ldi	r29, 0x02	; 2
    20d2:	e8 81       	ld	r30, Y
    20d4:	f9 81       	ldd	r31, Y+1	; 0x01
    20d6:	09 95       	icall
	i2c.Write(PCF8563WriteMode_U8);			// Connect to PCF8563 by sending its ID on I2c Bus
    20d8:	ec 81       	ldd	r30, Y+4	; 0x04
    20da:	fd 81       	ldd	r31, Y+5	; 0x05
    20dc:	82 ea       	ldi	r24, 0xA2	; 162
    20de:	09 95       	icall
	i2c.Write(PCF8563ControlRegAddress_U8);	// Select the PCF8563 ControlRegister to configure PCF8563
    20e0:	ec 81       	ldd	r30, Y+4	; 0x04
    20e2:	fd 81       	ldd	r31, Y+5	; 0x05
    20e4:	80 e0       	ldi	r24, 0x00	; 0
    20e6:	09 95       	icall
	i2c.Write(0x00);						// Write 0x00 to Control register to disable SQW-Out
    20e8:	ec 81       	ldd	r30, Y+4	; 0x04
    20ea:	fd 81       	ldd	r31, Y+5	; 0x05
    20ec:	80 e0       	ldi	r24, 0x00	; 0
    20ee:	09 95       	icall
	i2c.Stop();								// Stop I2C communication after initializing PCF8563
    20f0:	ea 81       	ldd	r30, Y+2	; 0x02
    20f2:	fb 81       	ldd	r31, Y+3	; 0x03
    20f4:	09 95       	icall
}
    20f6:	df 91       	pop	r29
    20f8:	cf 91       	pop	r28
    20fa:	08 95       	ret

000020fc <PCF8563RTCenable>:
struct date PCF8563RTC_GetDate(void);
uint8_t PCF8563RTC_bcd2dec(uint8_t num);
uint8_t PCF8563RTC_bintobcd(uint8_t bin);
/***PCF8563RTC PCF8563RTCenable(uint8_t prescaler)***/
PCF8563RTC PCF8563RTCenable(uint8_t prescaler)
{
    20fc:	ff 92       	push	r15
    20fe:	0f 93       	push	r16
    2100:	1f 93       	push	r17
    2102:	cf 93       	push	r28
    2104:	df 93       	push	r29
    2106:	cd b7       	in	r28, 0x3d	; 61
    2108:	de b7       	in	r29, 0x3e	; 62
    210a:	2a 97       	sbiw	r28, 0x0a	; 10
    210c:	0f b6       	in	r0, 0x3f	; 63
    210e:	f8 94       	cli
    2110:	de bf       	out	0x3e, r29	; 62
    2112:	0f be       	out	0x3f, r0	; 63
    2114:	cd bf       	out	0x3d, r28	; 61
    2116:	8c 01       	movw	r16, r24
	uint8_t tSREG;
	tSREG=SREG;
    2118:	ff b6       	in	r15, 0x3f	; 63
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
    211a:	8f b7       	in	r24, 0x3f	; 63
    211c:	8f 77       	andi	r24, 0x7F	; 127
    211e:	8f bf       	out	0x3f, r24	; 63
	PCF8563RTC pcf;
	i2c = I2Cenable(prescaler);  			// Initialize the I2c module.
    2120:	ce 01       	movw	r24, r28
    2122:	01 96       	adiw	r24, 0x01	; 1
    2124:	39 d9       	rcall	.-3470   	; 0x1398 <I2Cenable>
    2126:	8a e0       	ldi	r24, 0x0A	; 10
    2128:	fe 01       	movw	r30, r28
    212a:	31 96       	adiw	r30, 0x01	; 1
    212c:	aa ea       	ldi	r26, 0xAA	; 170
    212e:	b2 e0       	ldi	r27, 0x02	; 2
    2130:	01 90       	ld	r0, Z+
    2132:	0d 92       	st	X+, r0
    2134:	8a 95       	dec	r24
    2136:	e1 f7       	brne	.-8      	; 0x2130 <PCF8563RTCenable+0x34>
	PCF8563RTC_Init();                      //Initialize RTC
    2138:	c8 df       	rcall	.-112    	; 0x20ca <PCF8563RTC_Init>
    213a:	ff be       	out	0x3f, r15	; 63
	pcf.GetTime=PCF8563RTC_GetTime;
	pcf.GetDate=PCF8563RTC_GetDate;
	pcf.bcd2dec=PCF8563RTC_bcd2dec;
	pcf.bintobcd=PCF8563RTC_bintobcd;
	/******/
	SREG=tSREG;
    213c:	8a e8       	ldi	r24, 0x8A	; 138
	return pcf;
    213e:	9e e0       	ldi	r25, 0x0E	; 14
    2140:	f8 01       	movw	r30, r16
    2142:	91 83       	std	Z+1, r25	; 0x01
    2144:	80 83       	st	Z, r24
    2146:	84 eb       	ldi	r24, 0xB4	; 180
    2148:	9e e0       	ldi	r25, 0x0E	; 14
    214a:	93 83       	std	Z+3, r25	; 0x03
    214c:	82 83       	std	Z+2, r24	; 0x02
    214e:	80 ed       	ldi	r24, 0xD0	; 208
    2150:	9e e0       	ldi	r25, 0x0E	; 14
    2152:	95 83       	std	Z+5, r25	; 0x05
    2154:	84 83       	std	Z+4, r24	; 0x04
    2156:	8c ee       	ldi	r24, 0xEC	; 236
    2158:	9e e0       	ldi	r25, 0x0E	; 14
    215a:	97 83       	std	Z+7, r25	; 0x07
    215c:	86 83       	std	Z+6, r24	; 0x06
    215e:	88 e0       	ldi	r24, 0x08	; 8
    2160:	9f e0       	ldi	r25, 0x0F	; 15
    2162:	91 87       	std	Z+9, r25	; 0x09
    2164:	80 87       	std	Z+8, r24	; 0x08
    2166:	8a e2       	ldi	r24, 0x2A	; 42
    2168:	9f e0       	ldi	r25, 0x0F	; 15
    216a:	93 87       	std	Z+11, r25	; 0x0b
    216c:	82 87       	std	Z+10, r24	; 0x0a
    216e:	8f ea       	ldi	r24, 0xAF	; 175
    2170:	9f e0       	ldi	r25, 0x0F	; 15
    2172:	95 87       	std	Z+13, r25	; 0x0d
    2174:	84 87       	std	Z+12, r24	; 0x0c
    2176:	83 e9       	ldi	r24, 0x93	; 147
    2178:	9f e0       	ldi	r25, 0x0F	; 15
    217a:	97 87       	std	Z+15, r25	; 0x0f
    217c:	86 87       	std	Z+14, r24	; 0x0e
    217e:	87 e7       	ldi	r24, 0x77	; 119
    2180:	9f e0       	ldi	r25, 0x0F	; 15
    2182:	91 8b       	std	Z+17, r25	; 0x11
    2184:	80 8b       	std	Z+16, r24	; 0x10
    2186:	8b e5       	ldi	r24, 0x5B	; 91
    2188:	9f e0       	ldi	r25, 0x0F	; 15
    218a:	93 8b       	std	Z+19, r25	; 0x13
    218c:	82 8b       	std	Z+18, r24	; 0x12
    218e:	8b ec       	ldi	r24, 0xCB	; 203
    2190:	9f e0       	ldi	r25, 0x0F	; 15
    2192:	95 8b       	std	Z+21, r25	; 0x15
    2194:	84 8b       	std	Z+20, r24	; 0x14
    2196:	85 e0       	ldi	r24, 0x05	; 5
    2198:	90 e1       	ldi	r25, 0x10	; 16
    219a:	97 8b       	std	Z+23, r25	; 0x17
    219c:	86 8b       	std	Z+22, r24	; 0x16
    219e:	87 e4       	ldi	r24, 0x47	; 71
    21a0:	90 e1       	ldi	r25, 0x10	; 16
    21a2:	91 8f       	std	Z+25, r25	; 0x19
    21a4:	80 8f       	std	Z+24, r24	; 0x18
    21a6:	82 e5       	ldi	r24, 0x52	; 82
    21a8:	90 e1       	ldi	r25, 0x10	; 16
    21aa:	93 8f       	std	Z+27, r25	; 0x1b
    21ac:	82 8f       	std	Z+26, r24	; 0x1a
    21ae:	c8 01       	movw	r24, r16
}
    21b0:	2a 96       	adiw	r28, 0x0a	; 10
    21b2:	0f b6       	in	r0, 0x3f	; 63
    21b4:	f8 94       	cli
    21b6:	de bf       	out	0x3e, r29	; 62
    21b8:	0f be       	out	0x3f, r0	; 63
    21ba:	cd bf       	out	0x3d, r28	; 61
    21bc:	df 91       	pop	r29
    21be:	cf 91       	pop	r28
    21c0:	1f 91       	pop	r17
    21c2:	0f 91       	pop	r16
    21c4:	ff 90       	pop	r15
    21c6:	08 95       	ret

000021c8 <PORTINIT>:
** procedure and function
*/
void PORTINIT()
{
	//INPUT
	DDRF=0x00;
    21c8:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	PORTF=0x0F;
    21cc:	8f e0       	ldi	r24, 0x0F	; 15
    21ce:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	//OUTPUT
	DDRB|=(1<<5) | (1<<6) | (1<<7);
    21d2:	87 b3       	in	r24, 0x17	; 23
    21d4:	80 6e       	ori	r24, 0xE0	; 224
    21d6:	87 bb       	out	0x17, r24	; 23
    21d8:	08 95       	ret

000021da <main>:
** Header
*/
void PORTINIT();
/****MAIN****/
int main(void)
{
    21da:	cf 93       	push	r28
    21dc:	df 93       	push	r29
    21de:	cd b7       	in	r28, 0x3d	; 61
    21e0:	de b7       	in	r29, 0x3e	; 62
    21e2:	c5 54       	subi	r28, 0x45	; 69
    21e4:	d1 40       	sbci	r29, 0x01	; 1
    21e6:	0f b6       	in	r0, 0x3f	; 63
    21e8:	f8 94       	cli
    21ea:	de bf       	out	0x3e, r29	; 62
    21ec:	0f be       	out	0x3f, r0	; 63
    21ee:	cd bf       	out	0x3d, r28	; 61
	PORTINIT();
    21f0:	eb df       	rcall	.-42     	; 0x21c8 <PORTINIT>
	/***INICIALIZE OBJECTS***/
	FUNC function= FUNCenable();
    21f2:	ce 01       	movw	r24, r28
    21f4:	88 57       	subi	r24, 0x78	; 120
    21f6:	9f 4f       	sbci	r25, 0xFF	; 255
    21f8:	0e 94 84 08 	call	0x1108	; 0x1108 <FUNCenable>
    21fc:	c6 55       	subi	r28, 0x56	; 86
    21fe:	df 4f       	sbci	r29, 0xFF	; 255
    2200:	28 81       	ld	r18, Y
    2202:	39 81       	ldd	r19, Y+1	; 0x01
    2204:	ca 5a       	subi	r28, 0xAA	; 170
    2206:	d0 40       	sbci	r29, 0x00	; 0
    2208:	cf 5c       	subi	r28, 0xCF	; 207
    220a:	de 4f       	sbci	r29, 0xFE	; 254
    220c:	39 83       	std	Y+1, r19	; 0x01
    220e:	28 83       	st	Y, r18
    2210:	c1 53       	subi	r28, 0x31	; 49
    2212:	d1 40       	sbci	r29, 0x01	; 1
    2214:	cc 54       	subi	r28, 0x4C	; 76
    2216:	df 4f       	sbci	r29, 0xFF	; 255
    2218:	88 81       	ld	r24, Y
    221a:	99 81       	ldd	r25, Y+1	; 0x01
    221c:	c4 5b       	subi	r28, 0xB4	; 180
    221e:	d0 40       	sbci	r29, 0x00	; 0
    2220:	ce 5b       	subi	r28, 0xBE	; 190
    2222:	de 4f       	sbci	r29, 0xFE	; 254
    2224:	99 83       	std	Y+1, r25	; 0x01
    2226:	88 83       	st	Y, r24
    2228:	c2 54       	subi	r28, 0x42	; 66
    222a:	d1 40       	sbci	r29, 0x01	; 1
    222c:	ca 53       	subi	r28, 0x3A	; 58
    222e:	df 4f       	sbci	r29, 0xFF	; 255
    2230:	a8 81       	ld	r26, Y
    2232:	b9 81       	ldd	r27, Y+1	; 0x01
    2234:	c6 5c       	subi	r28, 0xC6	; 198
    2236:	d0 40       	sbci	r29, 0x00	; 0
    2238:	c6 5c       	subi	r28, 0xC6	; 198
    223a:	de 4f       	sbci	r29, 0xFE	; 254
    223c:	b9 83       	std	Y+1, r27	; 0x01
    223e:	a8 83       	st	Y, r26
    2240:	ca 53       	subi	r28, 0x3A	; 58
    2242:	d1 40       	sbci	r29, 0x01	; 1
	LCD0 lcd0 = LCD0enable(&DDRA,&PINA,&PORTA);
    2244:	2b e3       	ldi	r18, 0x3B	; 59
    2246:	30 e0       	ldi	r19, 0x00	; 0
    2248:	49 e3       	ldi	r20, 0x39	; 57
    224a:	50 e0       	ldi	r21, 0x00	; 0
    224c:	6a e3       	ldi	r22, 0x3A	; 58
    224e:	70 e0       	ldi	r23, 0x00	; 0
    2250:	ce 01       	movw	r24, r28
    2252:	8e 52       	subi	r24, 0x2E	; 46
    2254:	9f 4f       	sbci	r25, 0xFF	; 255
    2256:	f6 dc       	rcall	.-1556   	; 0x1c44 <LCD0enable>
    2258:	c8 52       	subi	r28, 0x28	; 40
    225a:	df 4f       	sbci	r29, 0xFF	; 255
    225c:	e8 81       	ld	r30, Y
    225e:	f9 81       	ldd	r31, Y+1	; 0x01
    2260:	c8 5d       	subi	r28, 0xD8	; 216
    2262:	d0 40       	sbci	r29, 0x00	; 0
    2264:	cb 5c       	subi	r28, 0xCB	; 203
    2266:	de 4f       	sbci	r29, 0xFE	; 254
    2268:	f9 83       	std	Y+1, r31	; 0x01
    226a:	e8 83       	st	Y, r30
    226c:	c5 53       	subi	r28, 0x35	; 53
    226e:	d1 40       	sbci	r29, 0x01	; 1
    2270:	c2 52       	subi	r28, 0x22	; 34
    2272:	df 4f       	sbci	r29, 0xFF	; 255
    2274:	68 80       	ld	r6, Y
    2276:	79 80       	ldd	r7, Y+1	; 0x01
    2278:	ce 5d       	subi	r28, 0xDE	; 222
    227a:	d0 40       	sbci	r29, 0x00	; 0
    227c:	ce 51       	subi	r28, 0x1E	; 30
    227e:	df 4f       	sbci	r29, 0xFF	; 255
    2280:	28 81       	ld	r18, Y
    2282:	39 81       	ldd	r19, Y+1	; 0x01
    2284:	c2 5e       	subi	r28, 0xE2	; 226
    2286:	d0 40       	sbci	r29, 0x00	; 0
    2288:	c1 5d       	subi	r28, 0xD1	; 209
    228a:	de 4f       	sbci	r29, 0xFE	; 254
    228c:	39 83       	std	Y+1, r19	; 0x01
    228e:	28 83       	st	Y, r18
    2290:	cf 52       	subi	r28, 0x2F	; 47
    2292:	d1 40       	sbci	r29, 0x01	; 1
    2294:	cc 51       	subi	r28, 0x1C	; 28
    2296:	df 4f       	sbci	r29, 0xFF	; 255
    2298:	28 80       	ld	r2, Y
    229a:	39 80       	ldd	r3, Y+1	; 0x01
    229c:	c4 5e       	subi	r28, 0xE4	; 228
    229e:	d0 40       	sbci	r29, 0x00	; 0
	KEYPAD keypad = KEYPADenable(&DDRE,&PINE,&PORTE);
    22a0:	43 e2       	ldi	r20, 0x23	; 35
    22a2:	50 e0       	ldi	r21, 0x00	; 0
    22a4:	61 e2       	ldi	r22, 0x21	; 33
    22a6:	70 e0       	ldi	r23, 0x00	; 0
    22a8:	82 e2       	ldi	r24, 0x22	; 34
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	4c da       	rcall	.-2920   	; 0x1746 <KEYPADenable>
    22ae:	c6 51       	subi	r28, 0x16	; 22
    22b0:	df 4f       	sbci	r29, 0xFF	; 255
    22b2:	48 83       	st	Y, r20
    22b4:	ca 5e       	subi	r28, 0xEA	; 234
    22b6:	d0 40       	sbci	r29, 0x00	; 0
    22b8:	c5 51       	subi	r28, 0x15	; 21
    22ba:	df 4f       	sbci	r29, 0xFF	; 255
    22bc:	58 83       	st	Y, r21
    22be:	cb 5e       	subi	r28, 0xEB	; 235
    22c0:	d0 40       	sbci	r29, 0x00	; 0
    22c2:	c4 51       	subi	r28, 0x14	; 20
    22c4:	df 4f       	sbci	r29, 0xFF	; 255
    22c6:	68 83       	st	Y, r22
    22c8:	cc 5e       	subi	r28, 0xEC	; 236
    22ca:	d0 40       	sbci	r29, 0x00	; 0
    22cc:	c3 51       	subi	r28, 0x13	; 19
    22ce:	df 4f       	sbci	r29, 0xFF	; 255
    22d0:	78 83       	st	Y, r23
    22d2:	cd 5e       	subi	r28, 0xED	; 237
    22d4:	d0 40       	sbci	r29, 0x00	; 0
    22d6:	c2 51       	subi	r28, 0x12	; 18
    22d8:	df 4f       	sbci	r29, 0xFF	; 255
    22da:	88 83       	st	Y, r24
    22dc:	ce 5e       	subi	r28, 0xEE	; 238
    22de:	d0 40       	sbci	r29, 0x00	; 0
    22e0:	c1 51       	subi	r28, 0x11	; 17
    22e2:	df 4f       	sbci	r29, 0xFF	; 255
    22e4:	98 83       	st	Y, r25
    22e6:	cf 5e       	subi	r28, 0xEF	; 239
    22e8:	d0 40       	sbci	r29, 0x00	; 0
    22ea:	c4 51       	subi	r28, 0x14	; 20
    22ec:	df 4f       	sbci	r29, 0xFF	; 255
    22ee:	88 80       	ld	r8, Y
    22f0:	99 80       	ldd	r9, Y+1	; 0x01
    22f2:	cc 5e       	subi	r28, 0xEC	; 236
    22f4:	d0 40       	sbci	r29, 0x00	; 0
    22f6:	c2 51       	subi	r28, 0x12	; 18
    22f8:	df 4f       	sbci	r29, 0xFF	; 255
    22fa:	48 80       	ld	r4, Y
    22fc:	59 80       	ldd	r5, Y+1	; 0x01
    22fe:	ce 5e       	subi	r28, 0xEE	; 238
    2300:	d0 40       	sbci	r29, 0x00	; 0
	ANALOG analog = ANALOGenable(1, 128, 1, 0); // channel 0 for position
    2302:	1f 92       	push	r1
    2304:	1f 92       	push	r1
    2306:	1f 92       	push	r1
    2308:	81 e0       	ldi	r24, 0x01	; 1
    230a:	8f 93       	push	r24
    230c:	90 e8       	ldi	r25, 0x80	; 128
    230e:	9f 93       	push	r25
    2310:	8f 93       	push	r24
    2312:	0e 94 92 00 	call	0x124	; 0x124 <ANALOGenable>
    2316:	c2 5c       	subi	r28, 0xC2	; 194
    2318:	de 4f       	sbci	r29, 0xFE	; 254
    231a:	68 83       	st	Y, r22
    231c:	79 83       	std	Y+1, r23	; 0x01
    231e:	8a 83       	std	Y+2, r24	; 0x02
    2320:	9b 83       	std	Y+3, r25	; 0x03
    2322:	ce 53       	subi	r28, 0x3E	; 62
    2324:	d1 40       	sbci	r29, 0x01	; 1
	TIMER_COUNTER1 timer1 = TIMER_COUNTER1enable(9,0); // PWM positioning
    2326:	40 e0       	ldi	r20, 0x00	; 0
    2328:	69 e0       	ldi	r22, 0x09	; 9
    232a:	ce 01       	movw	r24, r28
    232c:	80 51       	subi	r24, 0x10	; 16
    232e:	9f 4f       	sbci	r25, 0xFF	; 255
    2330:	0e 94 46 02 	call	0x48c	; 0x48c <TIMER_COUNTER1enable>
    2334:	c8 50       	subi	r28, 0x08	; 8
    2336:	df 4f       	sbci	r29, 0xFF	; 255
    2338:	88 81       	ld	r24, Y
    233a:	99 81       	ldd	r25, Y+1	; 0x01
    233c:	c8 5f       	subi	r28, 0xF8	; 248
    233e:	d0 40       	sbci	r29, 0x00	; 0
    2340:	c4 5c       	subi	r28, 0xC4	; 196
    2342:	de 4f       	sbci	r29, 0xFE	; 254
    2344:	99 83       	std	Y+1, r25	; 0x01
    2346:	88 83       	st	Y, r24
    2348:	cc 53       	subi	r28, 0x3C	; 60
    234a:	d1 40       	sbci	r29, 0x01	; 1
	//TIMER_COUNTER3 timer3 = TIMER_COUNTER3enable(12,12);
	PCF8563RTC rtc = PCF8563RTCenable(16);
    234c:	60 e1       	ldi	r22, 0x10	; 16
    234e:	ce 01       	movw	r24, r28
    2350:	93 95       	inc	r25
    2352:	d4 de       	rcall	.-600    	; 0x20fc <PCF8563RTCenable>
    2354:	c8 5e       	subi	r28, 0xE8	; 232
    2356:	de 4f       	sbci	r29, 0xFE	; 254
    2358:	a8 81       	ld	r26, Y
    235a:	b9 81       	ldd	r27, Y+1	; 0x01
    235c:	c8 51       	subi	r28, 0x18	; 24
    235e:	d1 40       	sbci	r29, 0x01	; 1
    2360:	cd 5c       	subi	r28, 0xCD	; 205
    2362:	de 4f       	sbci	r29, 0xFE	; 254
    2364:	b9 83       	std	Y+1, r27	; 0x01
    2366:	a8 83       	st	Y, r26
    2368:	c3 53       	subi	r28, 0x33	; 51
    236a:	d1 40       	sbci	r29, 0x01	; 1
    236c:	c6 5e       	subi	r28, 0xE6	; 230
    236e:	de 4f       	sbci	r29, 0xFE	; 254
    2370:	e8 81       	ld	r30, Y
    2372:	f9 81       	ldd	r31, Y+1	; 0x01
    2374:	ca 51       	subi	r28, 0x1A	; 26
    2376:	d1 40       	sbci	r29, 0x01	; 1
    2378:	cc 5b       	subi	r28, 0xBC	; 188
    237a:	de 4f       	sbci	r29, 0xFE	; 254
    237c:	f9 83       	std	Y+1, r31	; 0x01
    237e:	e8 83       	st	Y, r30
    2380:	c4 54       	subi	r28, 0x44	; 68
    2382:	d1 40       	sbci	r29, 0x01	; 1
	/******/
	char Menu='1';
	int adcvalue;
	char str[6]="0";
    2384:	fe 01       	movw	r30, r28
    2386:	e4 5e       	subi	r30, 0xE4	; 228
    2388:	fe 4f       	sbci	r31, 0xFE	; 254
    238a:	80 e3       	ldi	r24, 0x30	; 48
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	81 93       	st	Z+, r24
    2390:	91 93       	st	Z+, r25
    2392:	84 e0       	ldi	r24, 0x04	; 4
    2394:	df 01       	movw	r26, r30
    2396:	1d 92       	st	X+, r1
    2398:	8a 95       	dec	r24
    239a:	e9 f7       	brne	.-6      	; 0x2396 <main+0x1bc>
	int mvalue=90;
	char mstr[6]="90";
    239c:	89 e3       	ldi	r24, 0x39	; 57
    239e:	90 e3       	ldi	r25, 0x30	; 48
    23a0:	ce 5d       	subi	r28, 0xDE	; 222
    23a2:	de 4f       	sbci	r29, 0xFE	; 254
    23a4:	99 83       	std	Y+1, r25	; 0x01
    23a6:	88 83       	st	Y, r24
    23a8:	c2 52       	subi	r28, 0x22	; 34
    23aa:	d1 40       	sbci	r29, 0x01	; 1
    23ac:	cc 5d       	subi	r28, 0xDC	; 220
    23ae:	de 4f       	sbci	r29, 0xFE	; 254
    23b0:	19 82       	std	Y+1, r1	; 0x01
    23b2:	18 82       	st	Y, r1
    23b4:	c4 52       	subi	r28, 0x24	; 36
    23b6:	d1 40       	sbci	r29, 0x01	; 1
    23b8:	ca 5d       	subi	r28, 0xDA	; 218
    23ba:	de 4f       	sbci	r29, 0xFE	; 254
    23bc:	19 82       	std	Y+1, r1	; 0x01
    23be:	18 82       	st	Y, r1
    23c0:	c6 52       	subi	r28, 0x26	; 38
    23c2:	d1 40       	sbci	r29, 0x01	; 1
	char tstr[6];
	char cal='0';
	uint16_t set;
	/***Parameters timers***/
	timer1.compoutmodeB(2);
    23c4:	ce 50       	subi	r28, 0x0E	; 14
    23c6:	df 4f       	sbci	r29, 0xFF	; 255
    23c8:	e8 81       	ld	r30, Y
    23ca:	f9 81       	ldd	r31, Y+1	; 0x01
    23cc:	c2 5f       	subi	r28, 0xF2	; 242
    23ce:	d0 40       	sbci	r29, 0x00	; 0
    23d0:	82 e0       	ldi	r24, 0x02	; 2
    23d2:	09 95       	icall
	timer1.compareA(20000);
    23d4:	ca 50       	subi	r28, 0x0A	; 10
    23d6:	df 4f       	sbci	r29, 0xFF	; 255
    23d8:	e8 81       	ld	r30, Y
    23da:	f9 81       	ldd	r31, Y+1	; 0x01
    23dc:	c6 5f       	subi	r28, 0xF6	; 246
    23de:	d0 40       	sbci	r29, 0x00	; 0
    23e0:	80 e2       	ldi	r24, 0x20	; 32
    23e2:	9e e4       	ldi	r25, 0x4E	; 78
    23e4:	09 95       	icall
	timer1.start(8);
    23e6:	c4 50       	subi	r28, 0x04	; 4
    23e8:	df 4f       	sbci	r29, 0xFF	; 255
    23ea:	e8 81       	ld	r30, Y
    23ec:	f9 81       	ldd	r31, Y+1	; 0x01
    23ee:	cc 5f       	subi	r28, 0xFC	; 252
    23f0:	d0 40       	sbci	r29, 0x00	; 0
    23f2:	88 e0       	ldi	r24, 0x08	; 8
    23f4:	90 e0       	ldi	r25, 0x00	; 0
    23f6:	09 95       	icall
	rtc.SetClkOut(1, 2);
    23f8:	c8 5f       	subi	r28, 0xF8	; 248
    23fa:	de 4f       	sbci	r29, 0xFE	; 254
    23fc:	e8 81       	ld	r30, Y
    23fe:	f9 81       	ldd	r31, Y+1	; 0x01
    2400:	c8 50       	subi	r28, 0x08	; 8
    2402:	d1 40       	sbci	r29, 0x01	; 1
    2404:	62 e0       	ldi	r22, 0x02	; 2
    2406:	81 e0       	ldi	r24, 0x01	; 1
    2408:	09 95       	icall
    240a:	0f 90       	pop	r0
    240c:	0f 90       	pop	r0
    240e:	0f 90       	pop	r0
    2410:	0f 90       	pop	r0
    2412:	0f 90       	pop	r0
    2414:	0f 90       	pop	r0
	int adcvalue;
	char str[6]="0";
	int mvalue=90;
	char mstr[6]="90";
	char tstr[6];
	char cal='0';
    2416:	b0 e3       	ldi	r27, 0x30	; 48
    2418:	c7 5c       	subi	r28, 0xC7	; 199
    241a:	de 4f       	sbci	r29, 0xFE	; 254
    241c:	b8 83       	st	Y, r27
    241e:	c9 53       	subi	r28, 0x39	; 57
    2420:	d1 40       	sbci	r29, 0x01	; 1
	ANALOG analog = ANALOGenable(1, 128, 1, 0); // channel 0 for position
	TIMER_COUNTER1 timer1 = TIMER_COUNTER1enable(9,0); // PWM positioning
	//TIMER_COUNTER3 timer3 = TIMER_COUNTER3enable(12,12);
	PCF8563RTC rtc = PCF8563RTCenable(16);
	/******/
	char Menu='1';
    2422:	e1 e3       	ldi	r30, 0x31	; 49
    2424:	c2 5d       	subi	r28, 0xD2	; 210
    2426:	de 4f       	sbci	r29, 0xFE	; 254
    2428:	e8 83       	st	Y, r30
    242a:	ce 52       	subi	r28, 0x2E	; 46
    242c:	d1 40       	sbci	r29, 0x01	; 1
    242e:	06 c0       	rjmp	.+12     	; 0x243c <main+0x262>
								}
								keypad.flush();
							}
						break;
						default:
							cal='0';
    2430:	f0 e3       	ldi	r31, 0x30	; 48
    2432:	c7 5c       	subi	r28, 0xC7	; 199
    2434:	de 4f       	sbci	r29, 0xFE	; 254
    2436:	f8 83       	st	Y, r31
    2438:	c9 53       	subi	r28, 0x39	; 57
    243a:	d1 40       	sbci	r29, 0x01	; 1
    243c:	c2 5d       	subi	r28, 0xD2	; 210
    243e:	de 4f       	sbci	r29, 0xFE	; 254
    2440:	18 81       	ld	r17, Y
    2442:	ce 52       	subi	r28, 0x2E	; 46
    2444:	d1 40       	sbci	r29, 0x01	; 1
	rtc.SetClkOut(1, 2);
	/**********/
	//TODO:: Please write your application code
	while(TRUE){
		//PREAMBLE
		lcd0.reboot();
    2446:	ca 51       	subi	r28, 0x1A	; 26
    2448:	df 4f       	sbci	r29, 0xFF	; 255
    244a:	e8 81       	ld	r30, Y
    244c:	f9 81       	ldd	r31, Y+1	; 0x01
    244e:	c6 5e       	subi	r28, 0xE6	; 230
    2450:	d0 40       	sbci	r29, 0x00	; 0
    2452:	09 95       	icall
		keypad.read();
    2454:	c6 51       	subi	r28, 0x16	; 22
    2456:	df 4f       	sbci	r29, 0xFF	; 255
    2458:	e8 81       	ld	r30, Y
    245a:	f9 81       	ldd	r31, Y+1	; 0x01
    245c:	ca 5e       	subi	r28, 0xEA	; 234
    245e:	d0 40       	sbci	r29, 0x00	; 0
    2460:	09 95       	icall
		/***Entry Start***/
		lcd0.gotoxy(3,14);
    2462:	6e e0       	ldi	r22, 0x0E	; 14
    2464:	70 e0       	ldi	r23, 0x00	; 0
    2466:	83 e0       	ldi	r24, 0x03	; 3
    2468:	90 e0       	ldi	r25, 0x00	; 0
    246a:	f1 01       	movw	r30, r2
    246c:	09 95       	icall
		lcd0.string_size(keypad.get().printstring,6);
    246e:	f4 01       	movw	r30, r8
    2470:	09 95       	icall
    2472:	cc 57       	subi	r28, 0x7C	; 124
    2474:	df 4f       	sbci	r29, 0xFF	; 255
    2476:	38 83       	st	Y, r19
    2478:	c4 58       	subi	r28, 0x84	; 132
    247a:	d0 40       	sbci	r29, 0x00	; 0
    247c:	cb 57       	subi	r28, 0x7B	; 123
    247e:	df 4f       	sbci	r29, 0xFF	; 255
    2480:	48 83       	st	Y, r20
    2482:	c5 58       	subi	r28, 0x85	; 133
    2484:	d0 40       	sbci	r29, 0x00	; 0
    2486:	66 e0       	ldi	r22, 0x06	; 6
    2488:	cc 57       	subi	r28, 0x7C	; 124
    248a:	df 4f       	sbci	r29, 0xFF	; 255
    248c:	88 81       	ld	r24, Y
    248e:	99 81       	ldd	r25, Y+1	; 0x01
    2490:	c4 58       	subi	r28, 0x84	; 132
    2492:	d0 40       	sbci	r29, 0x00	; 0
    2494:	f3 01       	movw	r30, r6
    2496:	09 95       	icall
		/***ENTRY END***/
		switch(Menu){
    2498:	12 33       	cpi	r17, 0x32	; 50
    249a:	09 f4       	brne	.+2      	; 0x249e <main+0x2c4>
    249c:	80 c1       	rjmp	.+768    	; 0x279e <main+0x5c4>
    249e:	13 33       	cpi	r17, 0x33	; 51
    24a0:	09 f4       	brne	.+2      	; 0x24a4 <main+0x2ca>
    24a2:	35 c2       	rjmp	.+1130   	; 0x290e <main+0x734>
    24a4:	11 33       	cpi	r17, 0x31	; 49
    24a6:	79 f6       	brne	.-98     	; 0x2446 <main+0x26c>
			/***MENU 1***/
			case '1': //Main Program Menu
				if(!strcmp(keypad.get().string,"A")){Menu='2';strcpy(mstr,"");keypad.flush();lcd0.clear();}
    24a8:	f4 01       	movw	r30, r8
    24aa:	09 95       	icall
    24ac:	cf 57       	subi	r28, 0x7F	; 127
    24ae:	df 4f       	sbci	r29, 0xFF	; 255
    24b0:	58 83       	st	Y, r21
    24b2:	c1 58       	subi	r28, 0x81	; 129
    24b4:	d0 40       	sbci	r29, 0x00	; 0
    24b6:	ce 57       	subi	r28, 0x7E	; 126
    24b8:	df 4f       	sbci	r29, 0xFF	; 255
    24ba:	68 83       	st	Y, r22
    24bc:	c2 58       	subi	r28, 0x82	; 130
    24be:	d0 40       	sbci	r29, 0x00	; 0
    24c0:	62 e1       	ldi	r22, 0x12	; 18
    24c2:	71 e0       	ldi	r23, 0x01	; 1
    24c4:	cf 57       	subi	r28, 0x7F	; 127
    24c6:	df 4f       	sbci	r29, 0xFF	; 255
    24c8:	88 81       	ld	r24, Y
    24ca:	99 81       	ldd	r25, Y+1	; 0x01
    24cc:	c1 58       	subi	r28, 0x81	; 129
    24ce:	d0 40       	sbci	r29, 0x00	; 0
    24d0:	5a d6       	rcall	.+3252   	; 0x3186 <strcmp>
    24d2:	89 2b       	or	r24, r25
    24d4:	a9 f4       	brne	.+42     	; 0x2500 <main+0x326>
    24d6:	ce 5d       	subi	r28, 0xDE	; 222
    24d8:	de 4f       	sbci	r29, 0xFE	; 254
    24da:	18 82       	st	Y, r1
    24dc:	c2 52       	subi	r28, 0x22	; 34
    24de:	d1 40       	sbci	r29, 0x01	; 1
    24e0:	f2 01       	movw	r30, r4
    24e2:	09 95       	icall
    24e4:	c1 5d       	subi	r28, 0xD1	; 209
    24e6:	de 4f       	sbci	r29, 0xFE	; 254
    24e8:	e8 81       	ld	r30, Y
    24ea:	f9 81       	ldd	r31, Y+1	; 0x01
    24ec:	cf 52       	subi	r28, 0x2F	; 47
    24ee:	d1 40       	sbci	r29, 0x01	; 1
    24f0:	09 95       	icall
    24f2:	f2 e3       	ldi	r31, 0x32	; 50
    24f4:	c2 5d       	subi	r28, 0xD2	; 210
    24f6:	de 4f       	sbci	r29, 0xFE	; 254
    24f8:	f8 83       	st	Y, r31
    24fa:	ce 52       	subi	r28, 0x2E	; 46
    24fc:	d1 40       	sbci	r29, 0x01	; 1
    24fe:	9e cf       	rjmp	.-196    	; 0x243c <main+0x262>
				else 
				if(!strcmp(keypad.get().string,"B")){Menu='3';strcpy(mstr,"");keypad.flush();lcd0.clear();}
    2500:	f4 01       	movw	r30, r8
    2502:	09 95       	icall
    2504:	ed 96       	adiw	r28, 0x3d	; 61
    2506:	5f af       	std	Y+63, r21	; 0x3f
    2508:	ed 97       	sbiw	r28, 0x3d	; 61
    250a:	ee 96       	adiw	r28, 0x3e	; 62
    250c:	6f af       	std	Y+63, r22	; 0x3f
    250e:	ee 97       	sbiw	r28, 0x3e	; 62
    2510:	64 e1       	ldi	r22, 0x14	; 20
    2512:	71 e0       	ldi	r23, 0x01	; 1
    2514:	ee 96       	adiw	r28, 0x3e	; 62
    2516:	8e ad       	ldd	r24, Y+62	; 0x3e
    2518:	9f ad       	ldd	r25, Y+63	; 0x3f
    251a:	ee 97       	sbiw	r28, 0x3e	; 62
    251c:	34 d6       	rcall	.+3176   	; 0x3186 <strcmp>
    251e:	89 2b       	or	r24, r25
    2520:	a9 f4       	brne	.+42     	; 0x254c <main+0x372>
    2522:	ce 5d       	subi	r28, 0xDE	; 222
    2524:	de 4f       	sbci	r29, 0xFE	; 254
    2526:	18 82       	st	Y, r1
    2528:	c2 52       	subi	r28, 0x22	; 34
    252a:	d1 40       	sbci	r29, 0x01	; 1
    252c:	f2 01       	movw	r30, r4
    252e:	09 95       	icall
    2530:	c1 5d       	subi	r28, 0xD1	; 209
    2532:	de 4f       	sbci	r29, 0xFE	; 254
    2534:	e8 81       	ld	r30, Y
    2536:	f9 81       	ldd	r31, Y+1	; 0x01
    2538:	cf 52       	subi	r28, 0x2F	; 47
    253a:	d1 40       	sbci	r29, 0x01	; 1
    253c:	09 95       	icall
    253e:	f3 e3       	ldi	r31, 0x33	; 51
    2540:	c2 5d       	subi	r28, 0xD2	; 210
    2542:	de 4f       	sbci	r29, 0xFE	; 254
    2544:	f8 83       	st	Y, r31
    2546:	ce 52       	subi	r28, 0x2E	; 46
    2548:	d1 40       	sbci	r29, 0x01	; 1
    254a:	78 cf       	rjmp	.-272    	; 0x243c <main+0x262>
				else{
					/***RTC***/
					tm=rtc.GetTime();
    254c:	cc 5e       	subi	r28, 0xEC	; 236
    254e:	de 4f       	sbci	r29, 0xFE	; 254
    2550:	e8 81       	ld	r30, Y
    2552:	f9 81       	ldd	r31, Y+1	; 0x01
    2554:	c4 51       	subi	r28, 0x14	; 20
    2556:	d1 40       	sbci	r29, 0x01	; 1
    2558:	09 95       	icall
    255a:	60 93 b4 02 	sts	0x02B4, r22	; 0x8002b4 <tm>
    255e:	70 93 b5 02 	sts	0x02B5, r23	; 0x8002b5 <tm+0x1>
    2562:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <tm+0x2>
					dt=rtc.GetDate();
    2566:	ca 5e       	subi	r28, 0xEA	; 234
    2568:	de 4f       	sbci	r29, 0xFE	; 254
    256a:	e8 81       	ld	r30, Y
    256c:	f9 81       	ldd	r31, Y+1	; 0x01
    256e:	c6 51       	subi	r28, 0x16	; 22
    2570:	d1 40       	sbci	r29, 0x01	; 1
    2572:	09 95       	icall
    2574:	60 93 b7 02 	sts	0x02B7, r22	; 0x8002b7 <dt>
    2578:	70 93 b8 02 	sts	0x02B8, r23	; 0x8002b8 <dt+0x1>
    257c:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <dt+0x2>
    2580:	90 93 ba 02 	sts	0x02BA, r25	; 0x8002ba <dt+0x3>
					/***Reading analog***/
					adcvalue=analog.read(0);
    2584:	80 e0       	ldi	r24, 0x00	; 0
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	c0 5c       	subi	r28, 0xC0	; 192
    258a:	de 4f       	sbci	r29, 0xFE	; 254
    258c:	e8 81       	ld	r30, Y
    258e:	f9 81       	ldd	r31, Y+1	; 0x01
    2590:	c0 54       	subi	r28, 0x40	; 64
    2592:	d1 40       	sbci	r29, 0x01	; 1
    2594:	09 95       	icall
    2596:	c9 5c       	subi	r28, 0xC9	; 201
    2598:	de 4f       	sbci	r29, 0xFE	; 254
    259a:	99 83       	std	Y+1, r25	; 0x01
    259c:	88 83       	st	Y, r24
    259e:	c7 53       	subi	r28, 0x37	; 55
    25a0:	d1 40       	sbci	r29, 0x01	; 1
					/***Set Position***/
					timer1.compareB(function.trimmer(adcvalue,0,1023,Min,Max));
    25a2:	bc 01       	movw	r22, r24
    25a4:	99 0f       	add	r25, r25
    25a6:	88 0b       	sbc	r24, r24
    25a8:	99 0b       	sbc	r25, r25
    25aa:	1f 92       	push	r1
    25ac:	1f 92       	push	r1
    25ae:	29 e0       	ldi	r18, 0x09	; 9
    25b0:	2f 93       	push	r18
    25b2:	2e e2       	ldi	r18, 0x2E	; 46
    25b4:	2f 93       	push	r18
    25b6:	0f 2e       	mov	r0, r31
    25b8:	f4 ef       	ldi	r31, 0xF4	; 244
    25ba:	af 2e       	mov	r10, r31
    25bc:	bb 24       	eor	r11, r11
    25be:	b3 94       	inc	r11
    25c0:	c1 2c       	mov	r12, r1
    25c2:	d1 2c       	mov	r13, r1
    25c4:	f0 2d       	mov	r31, r0
    25c6:	ee 24       	eor	r14, r14
    25c8:	ea 94       	dec	r14
    25ca:	13 e0       	ldi	r17, 0x03	; 3
    25cc:	f1 2e       	mov	r15, r17
    25ce:	00 e0       	ldi	r16, 0x00	; 0
    25d0:	10 e0       	ldi	r17, 0x00	; 0
    25d2:	20 e0       	ldi	r18, 0x00	; 0
    25d4:	30 e0       	ldi	r19, 0x00	; 0
    25d6:	a9 01       	movw	r20, r18
    25d8:	c6 5c       	subi	r28, 0xC6	; 198
    25da:	de 4f       	sbci	r29, 0xFE	; 254
    25dc:	e8 81       	ld	r30, Y
    25de:	f9 81       	ldd	r31, Y+1	; 0x01
    25e0:	ca 53       	subi	r28, 0x3A	; 58
    25e2:	d1 40       	sbci	r29, 0x01	; 1
    25e4:	09 95       	icall
    25e6:	cb 01       	movw	r24, r22
    25e8:	c4 5c       	subi	r28, 0xC4	; 196
    25ea:	de 4f       	sbci	r29, 0xFE	; 254
    25ec:	e8 81       	ld	r30, Y
    25ee:	f9 81       	ldd	r31, Y+1	; 0x01
    25f0:	cc 53       	subi	r28, 0x3C	; 60
    25f2:	d1 40       	sbci	r29, 0x01	; 1
    25f4:	09 95       	icall
					lcd0.gotoxy(0,0);
    25f6:	60 e0       	ldi	r22, 0x00	; 0
    25f8:	70 e0       	ldi	r23, 0x00	; 0
    25fa:	80 e0       	ldi	r24, 0x00	; 0
    25fc:	90 e0       	ldi	r25, 0x00	; 0
    25fe:	f1 01       	movw	r30, r2
    2600:	09 95       	icall
					lcd0.string_size("Sense: ",7);
    2602:	67 e0       	ldi	r22, 0x07	; 7
    2604:	86 e1       	ldi	r24, 0x16	; 22
    2606:	91 e0       	ldi	r25, 0x01	; 1
    2608:	f3 01       	movw	r30, r6
    260a:	09 95       	icall
					//lcd0.hspace(1);
					strcpy(str,function.i16toa(adcvalue));
    260c:	c8 55       	subi	r28, 0x58	; 88
    260e:	df 4f       	sbci	r29, 0xFF	; 255
    2610:	e8 81       	ld	r30, Y
    2612:	f9 81       	ldd	r31, Y+1	; 0x01
    2614:	c8 5a       	subi	r28, 0xA8	; 168
    2616:	d0 40       	sbci	r29, 0x00	; 0
    2618:	c9 5c       	subi	r28, 0xC9	; 201
    261a:	de 4f       	sbci	r29, 0xFE	; 254
    261c:	88 81       	ld	r24, Y
    261e:	99 81       	ldd	r25, Y+1	; 0x01
    2620:	c7 53       	subi	r28, 0x37	; 55
    2622:	d1 40       	sbci	r29, 0x01	; 1
    2624:	09 95       	icall
    2626:	bc 01       	movw	r22, r24
    2628:	ce 01       	movw	r24, r28
    262a:	84 5e       	subi	r24, 0xE4	; 228
    262c:	9e 4f       	sbci	r25, 0xFE	; 254
    262e:	b4 d5       	rcall	.+2920   	; 0x3198 <strcpy>
					lcd0.string_size(str,4);
    2630:	64 e0       	ldi	r22, 0x04	; 4
    2632:	ce 01       	movw	r24, r28
    2634:	84 5e       	subi	r24, 0xE4	; 228
    2636:	9e 4f       	sbci	r25, 0xFE	; 254
    2638:	f3 01       	movw	r30, r6
    263a:	09 95       	icall
					lcd0.gotoxy(0,12);
    263c:	6c e0       	ldi	r22, 0x0C	; 12
    263e:	70 e0       	ldi	r23, 0x00	; 0
    2640:	80 e0       	ldi	r24, 0x00	; 0
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	f1 01       	movw	r30, r2
    2646:	09 95       	icall
					lcd0.string_size(function.ui16toa(rtc.bcd2dec(dt.days)),2);
    2648:	07 eb       	ldi	r16, 0xB7	; 183
    264a:	12 e0       	ldi	r17, 0x02	; 2
    264c:	d8 01       	movw	r26, r16
    264e:	13 96       	adiw	r26, 0x03	; 3
    2650:	8c 91       	ld	r24, X
    2652:	cd 5c       	subi	r28, 0xCD	; 205
    2654:	de 4f       	sbci	r29, 0xFE	; 254
    2656:	e8 81       	ld	r30, Y
    2658:	f9 81       	ldd	r31, Y+1	; 0x01
    265a:	c3 53       	subi	r28, 0x33	; 51
    265c:	d1 40       	sbci	r29, 0x01	; 1
    265e:	09 95       	icall
    2660:	90 e0       	ldi	r25, 0x00	; 0
    2662:	cf 5c       	subi	r28, 0xCF	; 207
    2664:	de 4f       	sbci	r29, 0xFE	; 254
    2666:	e8 81       	ld	r30, Y
    2668:	f9 81       	ldd	r31, Y+1	; 0x01
    266a:	c1 53       	subi	r28, 0x31	; 49
    266c:	d1 40       	sbci	r29, 0x01	; 1
    266e:	09 95       	icall
    2670:	62 e0       	ldi	r22, 0x02	; 2
    2672:	f3 01       	movw	r30, r6
    2674:	09 95       	icall
					lcd0.putch(':');
    2676:	8a e3       	ldi	r24, 0x3A	; 58
    2678:	cb 5c       	subi	r28, 0xCB	; 203
    267a:	de 4f       	sbci	r29, 0xFE	; 254
    267c:	e8 81       	ld	r30, Y
    267e:	f9 81       	ldd	r31, Y+1	; 0x01
    2680:	c5 53       	subi	r28, 0x35	; 53
    2682:	d1 40       	sbci	r29, 0x01	; 1
    2684:	09 95       	icall
					lcd0.string_size(function.ui16toa(rtc.bcd2dec(dt.century_months)),2);
    2686:	d8 01       	movw	r26, r16
    2688:	11 96       	adiw	r26, 0x01	; 1
    268a:	8c 91       	ld	r24, X
    268c:	cd 5c       	subi	r28, 0xCD	; 205
    268e:	de 4f       	sbci	r29, 0xFE	; 254
    2690:	e8 81       	ld	r30, Y
    2692:	f9 81       	ldd	r31, Y+1	; 0x01
    2694:	c3 53       	subi	r28, 0x33	; 51
    2696:	d1 40       	sbci	r29, 0x01	; 1
    2698:	09 95       	icall
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	cf 5c       	subi	r28, 0xCF	; 207
    269e:	de 4f       	sbci	r29, 0xFE	; 254
    26a0:	e8 81       	ld	r30, Y
    26a2:	f9 81       	ldd	r31, Y+1	; 0x01
    26a4:	c1 53       	subi	r28, 0x31	; 49
    26a6:	d1 40       	sbci	r29, 0x01	; 1
    26a8:	09 95       	icall
    26aa:	62 e0       	ldi	r22, 0x02	; 2
    26ac:	f3 01       	movw	r30, r6
    26ae:	09 95       	icall
					lcd0.putch(':');
    26b0:	8a e3       	ldi	r24, 0x3A	; 58
    26b2:	cb 5c       	subi	r28, 0xCB	; 203
    26b4:	de 4f       	sbci	r29, 0xFE	; 254
    26b6:	e8 81       	ld	r30, Y
    26b8:	f9 81       	ldd	r31, Y+1	; 0x01
    26ba:	c5 53       	subi	r28, 0x35	; 53
    26bc:	d1 40       	sbci	r29, 0x01	; 1
    26be:	09 95       	icall
					lcd0.string_size(function.ui16toa(rtc.bcd2dec(dt.years)),2);
    26c0:	d8 01       	movw	r26, r16
    26c2:	8c 91       	ld	r24, X
    26c4:	cd 5c       	subi	r28, 0xCD	; 205
    26c6:	de 4f       	sbci	r29, 0xFE	; 254
    26c8:	e8 81       	ld	r30, Y
    26ca:	f9 81       	ldd	r31, Y+1	; 0x01
    26cc:	c3 53       	subi	r28, 0x33	; 51
    26ce:	d1 40       	sbci	r29, 0x01	; 1
    26d0:	09 95       	icall
    26d2:	90 e0       	ldi	r25, 0x00	; 0
    26d4:	cf 5c       	subi	r28, 0xCF	; 207
    26d6:	de 4f       	sbci	r29, 0xFE	; 254
    26d8:	e8 81       	ld	r30, Y
    26da:	f9 81       	ldd	r31, Y+1	; 0x01
    26dc:	c1 53       	subi	r28, 0x31	; 49
    26de:	d1 40       	sbci	r29, 0x01	; 1
    26e0:	09 95       	icall
    26e2:	62 e0       	ldi	r22, 0x02	; 2
    26e4:	f3 01       	movw	r30, r6
    26e6:	09 95       	icall
					lcd0.gotoxy(1,12);
    26e8:	6c e0       	ldi	r22, 0x0C	; 12
    26ea:	70 e0       	ldi	r23, 0x00	; 0
    26ec:	81 e0       	ldi	r24, 0x01	; 1
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	f1 01       	movw	r30, r2
    26f2:	09 95       	icall
					lcd0.string_size(function.ui16toa(rtc.bcd2dec(tm.hours)),2);
    26f4:	04 eb       	ldi	r16, 0xB4	; 180
    26f6:	12 e0       	ldi	r17, 0x02	; 2
    26f8:	d8 01       	movw	r26, r16
    26fa:	8c 91       	ld	r24, X
    26fc:	cd 5c       	subi	r28, 0xCD	; 205
    26fe:	de 4f       	sbci	r29, 0xFE	; 254
    2700:	e8 81       	ld	r30, Y
    2702:	f9 81       	ldd	r31, Y+1	; 0x01
    2704:	c3 53       	subi	r28, 0x33	; 51
    2706:	d1 40       	sbci	r29, 0x01	; 1
    2708:	09 95       	icall
    270a:	90 e0       	ldi	r25, 0x00	; 0
    270c:	cf 5c       	subi	r28, 0xCF	; 207
    270e:	de 4f       	sbci	r29, 0xFE	; 254
    2710:	e8 81       	ld	r30, Y
    2712:	f9 81       	ldd	r31, Y+1	; 0x01
    2714:	c1 53       	subi	r28, 0x31	; 49
    2716:	d1 40       	sbci	r29, 0x01	; 1
    2718:	09 95       	icall
    271a:	62 e0       	ldi	r22, 0x02	; 2
    271c:	f3 01       	movw	r30, r6
    271e:	09 95       	icall
					lcd0.putch(':');
    2720:	8a e3       	ldi	r24, 0x3A	; 58
    2722:	cb 5c       	subi	r28, 0xCB	; 203
    2724:	de 4f       	sbci	r29, 0xFE	; 254
    2726:	e8 81       	ld	r30, Y
    2728:	f9 81       	ldd	r31, Y+1	; 0x01
    272a:	c5 53       	subi	r28, 0x35	; 53
    272c:	d1 40       	sbci	r29, 0x01	; 1
    272e:	09 95       	icall
					lcd0.string_size(function.ui16toa(rtc.bcd2dec(tm.minutes)),2);
    2730:	d8 01       	movw	r26, r16
    2732:	11 96       	adiw	r26, 0x01	; 1
    2734:	8c 91       	ld	r24, X
    2736:	cd 5c       	subi	r28, 0xCD	; 205
    2738:	de 4f       	sbci	r29, 0xFE	; 254
    273a:	e8 81       	ld	r30, Y
    273c:	f9 81       	ldd	r31, Y+1	; 0x01
    273e:	c3 53       	subi	r28, 0x33	; 51
    2740:	d1 40       	sbci	r29, 0x01	; 1
    2742:	09 95       	icall
    2744:	90 e0       	ldi	r25, 0x00	; 0
    2746:	cf 5c       	subi	r28, 0xCF	; 207
    2748:	de 4f       	sbci	r29, 0xFE	; 254
    274a:	e8 81       	ld	r30, Y
    274c:	f9 81       	ldd	r31, Y+1	; 0x01
    274e:	c1 53       	subi	r28, 0x31	; 49
    2750:	d1 40       	sbci	r29, 0x01	; 1
    2752:	09 95       	icall
    2754:	62 e0       	ldi	r22, 0x02	; 2
    2756:	f3 01       	movw	r30, r6
    2758:	09 95       	icall
					lcd0.putch(':');
    275a:	8a e3       	ldi	r24, 0x3A	; 58
    275c:	cb 5c       	subi	r28, 0xCB	; 203
    275e:	de 4f       	sbci	r29, 0xFE	; 254
    2760:	e8 81       	ld	r30, Y
    2762:	f9 81       	ldd	r31, Y+1	; 0x01
    2764:	c5 53       	subi	r28, 0x35	; 53
    2766:	d1 40       	sbci	r29, 0x01	; 1
    2768:	09 95       	icall
					lcd0.string_size(function.ui16toa(rtc.bcd2dec(tm.VL_seconds)),2);
    276a:	d8 01       	movw	r26, r16
    276c:	12 96       	adiw	r26, 0x02	; 2
    276e:	8c 91       	ld	r24, X
    2770:	cd 5c       	subi	r28, 0xCD	; 205
    2772:	de 4f       	sbci	r29, 0xFE	; 254
    2774:	e8 81       	ld	r30, Y
    2776:	f9 81       	ldd	r31, Y+1	; 0x01
    2778:	c3 53       	subi	r28, 0x33	; 51
    277a:	d1 40       	sbci	r29, 0x01	; 1
    277c:	09 95       	icall
    277e:	90 e0       	ldi	r25, 0x00	; 0
    2780:	cf 5c       	subi	r28, 0xCF	; 207
    2782:	de 4f       	sbci	r29, 0xFE	; 254
    2784:	e8 81       	ld	r30, Y
    2786:	f9 81       	ldd	r31, Y+1	; 0x01
    2788:	c1 53       	subi	r28, 0x31	; 49
    278a:	d1 40       	sbci	r29, 0x01	; 1
    278c:	09 95       	icall
    278e:	62 e0       	ldi	r22, 0x02	; 2
    2790:	f3 01       	movw	r30, r6
    2792:	09 95       	icall
    2794:	0f 90       	pop	r0
    2796:	0f 90       	pop	r0
    2798:	0f 90       	pop	r0
    279a:	0f 90       	pop	r0
    279c:	4f ce       	rjmp	.-866    	; 0x243c <main+0x262>
				}
				break;
			/***MENU 2***/
			case '2': // Manual position override 
				if(!strcmp(keypad.get().string,"A")){Menu='3';keypad.flush();lcd0.clear();
    279e:	f4 01       	movw	r30, r8
    27a0:	09 95       	icall
    27a2:	e8 96       	adiw	r28, 0x38	; 56
    27a4:	5f af       	std	Y+63, r21	; 0x3f
    27a6:	e8 97       	sbiw	r28, 0x38	; 56
    27a8:	e9 96       	adiw	r28, 0x39	; 57
    27aa:	6f af       	std	Y+63, r22	; 0x3f
    27ac:	e9 97       	sbiw	r28, 0x39	; 57
    27ae:	62 e1       	ldi	r22, 0x12	; 18
    27b0:	71 e0       	ldi	r23, 0x01	; 1
    27b2:	e9 96       	adiw	r28, 0x39	; 57
    27b4:	8e ad       	ldd	r24, Y+62	; 0x3e
    27b6:	9f ad       	ldd	r25, Y+63	; 0x3f
    27b8:	e9 97       	sbiw	r28, 0x39	; 57
    27ba:	e5 d4       	rcall	.+2506   	; 0x3186 <strcmp>
    27bc:	89 2b       	or	r24, r25
    27be:	81 f4       	brne	.+32     	; 0x27e0 <main+0x606>
    27c0:	f2 01       	movw	r30, r4
    27c2:	09 95       	icall
    27c4:	c1 5d       	subi	r28, 0xD1	; 209
    27c6:	de 4f       	sbci	r29, 0xFE	; 254
    27c8:	e8 81       	ld	r30, Y
    27ca:	f9 81       	ldd	r31, Y+1	; 0x01
    27cc:	cf 52       	subi	r28, 0x2F	; 47
    27ce:	d1 40       	sbci	r29, 0x01	; 1
    27d0:	09 95       	icall
    27d2:	f3 e3       	ldi	r31, 0x33	; 51
    27d4:	c2 5d       	subi	r28, 0xD2	; 210
    27d6:	de 4f       	sbci	r29, 0xFE	; 254
    27d8:	f8 83       	st	Y, r31
    27da:	ce 52       	subi	r28, 0x2E	; 46
    27dc:	d1 40       	sbci	r29, 0x01	; 1
    27de:	2e ce       	rjmp	.-932    	; 0x243c <main+0x262>
				}else if(!strcmp(keypad.get().string,"B")){Menu='1';keypad.flush();lcd0.clear();
    27e0:	f4 01       	movw	r30, r8
    27e2:	09 95       	icall
    27e4:	e3 96       	adiw	r28, 0x33	; 51
    27e6:	5f af       	std	Y+63, r21	; 0x3f
    27e8:	e3 97       	sbiw	r28, 0x33	; 51
    27ea:	e4 96       	adiw	r28, 0x34	; 52
    27ec:	6f af       	std	Y+63, r22	; 0x3f
    27ee:	e4 97       	sbiw	r28, 0x34	; 52
    27f0:	64 e1       	ldi	r22, 0x14	; 20
    27f2:	71 e0       	ldi	r23, 0x01	; 1
    27f4:	e4 96       	adiw	r28, 0x34	; 52
    27f6:	8e ad       	ldd	r24, Y+62	; 0x3e
    27f8:	9f ad       	ldd	r25, Y+63	; 0x3f
    27fa:	e4 97       	sbiw	r28, 0x34	; 52
    27fc:	c4 d4       	rcall	.+2440   	; 0x3186 <strcmp>
    27fe:	89 2b       	or	r24, r25
    2800:	81 f4       	brne	.+32     	; 0x2822 <main+0x648>
    2802:	f2 01       	movw	r30, r4
    2804:	09 95       	icall
    2806:	c1 5d       	subi	r28, 0xD1	; 209
    2808:	de 4f       	sbci	r29, 0xFE	; 254
    280a:	e8 81       	ld	r30, Y
    280c:	f9 81       	ldd	r31, Y+1	; 0x01
    280e:	cf 52       	subi	r28, 0x2F	; 47
    2810:	d1 40       	sbci	r29, 0x01	; 1
    2812:	09 95       	icall
    2814:	f1 e3       	ldi	r31, 0x31	; 49
    2816:	c2 5d       	subi	r28, 0xD2	; 210
    2818:	de 4f       	sbci	r29, 0xFE	; 254
    281a:	f8 83       	st	Y, r31
    281c:	ce 52       	subi	r28, 0x2E	; 46
    281e:	d1 40       	sbci	r29, 0x01	; 1
    2820:	0d ce       	rjmp	.-998    	; 0x243c <main+0x262>
				}else{
					lcd0.gotoxy(0,0);
    2822:	60 e0       	ldi	r22, 0x00	; 0
    2824:	70 e0       	ldi	r23, 0x00	; 0
    2826:	80 e0       	ldi	r24, 0x00	; 0
    2828:	90 e0       	ldi	r25, 0x00	; 0
    282a:	f1 01       	movw	r30, r2
    282c:	09 95       	icall
					lcd0.string_size("Manual: ",8);
    282e:	68 e0       	ldi	r22, 0x08	; 8
    2830:	8e e1       	ldi	r24, 0x1E	; 30
    2832:	91 e0       	ldi	r25, 0x01	; 1
    2834:	f3 01       	movw	r30, r6
    2836:	09 95       	icall
					lcd0.string_size(mstr,3);
    2838:	63 e0       	ldi	r22, 0x03	; 3
    283a:	ce 01       	movw	r24, r28
    283c:	8e 5d       	subi	r24, 0xDE	; 222
    283e:	9e 4f       	sbci	r25, 0xFE	; 254
    2840:	f3 01       	movw	r30, r6
    2842:	09 95       	icall
					if(keypad.get().character==KEYPADENTERKEY){
    2844:	f4 01       	movw	r30, r8
    2846:	09 95       	icall
    2848:	24 34       	cpi	r18, 0x44	; 68
    284a:	09 f0       	breq	.+2      	; 0x284e <main+0x674>
    284c:	f7 cd       	rjmp	.-1042   	; 0x243c <main+0x262>
						strncpy(mstr,keypad.get().string,6);
    284e:	f4 01       	movw	r30, r8
    2850:	09 95       	icall
    2852:	a9 96       	adiw	r28, 0x29	; 41
    2854:	5f af       	std	Y+63, r21	; 0x3f
    2856:	a9 97       	sbiw	r28, 0x29	; 41
    2858:	aa 96       	adiw	r28, 0x2a	; 42
    285a:	6f af       	std	Y+63, r22	; 0x3f
    285c:	aa 97       	sbiw	r28, 0x2a	; 42
    285e:	aa 96       	adiw	r28, 0x2a	; 42
    2860:	6e ad       	ldd	r22, Y+62	; 0x3e
    2862:	7f ad       	ldd	r23, Y+63	; 0x3f
    2864:	aa 97       	sbiw	r28, 0x2a	; 42
    2866:	46 e0       	ldi	r20, 0x06	; 6
    2868:	50 e0       	ldi	r21, 0x00	; 0
    286a:	ce 01       	movw	r24, r28
    286c:	8e 5d       	subi	r24, 0xDE	; 222
    286e:	9e 4f       	sbci	r25, 0xFE	; 254
    2870:	9a d4       	rcall	.+2356   	; 0x31a6 <strncpy>
						mvalue=function.strToInt(mstr);
    2872:	ce 01       	movw	r24, r28
    2874:	8e 5d       	subi	r24, 0xDE	; 222
    2876:	9e 4f       	sbci	r25, 0xFE	; 254
    2878:	ce 5b       	subi	r28, 0xBE	; 190
    287a:	de 4f       	sbci	r29, 0xFE	; 254
    287c:	e8 81       	ld	r30, Y
    287e:	f9 81       	ldd	r31, Y+1	; 0x01
    2880:	c2 54       	subi	r28, 0x42	; 66
    2882:	d1 40       	sbci	r29, 0x01	; 1
    2884:	09 95       	icall
						if(mvalue >=0 && mvalue <181){
    2886:	85 3b       	cpi	r24, 0xB5	; 181
    2888:	91 05       	cpc	r25, r1
    288a:	70 f5       	brcc	.+92     	; 0x28e8 <main+0x70e>
							timer1.compareB(function.trimmer(mvalue,0,180,Min,Max));
    288c:	bc 01       	movw	r22, r24
    288e:	99 0f       	add	r25, r25
    2890:	88 0b       	sbc	r24, r24
    2892:	99 0b       	sbc	r25, r25
    2894:	1f 92       	push	r1
    2896:	1f 92       	push	r1
    2898:	29 e0       	ldi	r18, 0x09	; 9
    289a:	2f 93       	push	r18
    289c:	2e e2       	ldi	r18, 0x2E	; 46
    289e:	2f 93       	push	r18
    28a0:	0f 2e       	mov	r0, r31
    28a2:	f4 ef       	ldi	r31, 0xF4	; 244
    28a4:	af 2e       	mov	r10, r31
    28a6:	bb 24       	eor	r11, r11
    28a8:	b3 94       	inc	r11
    28aa:	c1 2c       	mov	r12, r1
    28ac:	d1 2c       	mov	r13, r1
    28ae:	f0 2d       	mov	r31, r0
    28b0:	14 eb       	ldi	r17, 0xB4	; 180
    28b2:	e1 2e       	mov	r14, r17
    28b4:	f1 2c       	mov	r15, r1
    28b6:	00 e0       	ldi	r16, 0x00	; 0
    28b8:	10 e0       	ldi	r17, 0x00	; 0
    28ba:	20 e0       	ldi	r18, 0x00	; 0
    28bc:	30 e0       	ldi	r19, 0x00	; 0
    28be:	a9 01       	movw	r20, r18
    28c0:	c6 5c       	subi	r28, 0xC6	; 198
    28c2:	de 4f       	sbci	r29, 0xFE	; 254
    28c4:	e8 81       	ld	r30, Y
    28c6:	f9 81       	ldd	r31, Y+1	; 0x01
    28c8:	ca 53       	subi	r28, 0x3A	; 58
    28ca:	d1 40       	sbci	r29, 0x01	; 1
    28cc:	09 95       	icall
    28ce:	cb 01       	movw	r24, r22
    28d0:	c4 5c       	subi	r28, 0xC4	; 196
    28d2:	de 4f       	sbci	r29, 0xFE	; 254
    28d4:	e8 81       	ld	r30, Y
    28d6:	f9 81       	ldd	r31, Y+1	; 0x01
    28d8:	cc 53       	subi	r28, 0x3C	; 60
    28da:	d1 40       	sbci	r29, 0x01	; 1
    28dc:	09 95       	icall
    28de:	0f 90       	pop	r0
    28e0:	0f 90       	pop	r0
    28e2:	0f 90       	pop	r0
    28e4:	0f 90       	pop	r0
    28e6:	10 c0       	rjmp	.+32     	; 0x2908 <main+0x72e>
						}else{
							strcpy(mstr,"err");
    28e8:	85 e6       	ldi	r24, 0x65	; 101
    28ea:	92 e7       	ldi	r25, 0x72	; 114
    28ec:	ce 5d       	subi	r28, 0xDE	; 222
    28ee:	de 4f       	sbci	r29, 0xFE	; 254
    28f0:	99 83       	std	Y+1, r25	; 0x01
    28f2:	88 83       	st	Y, r24
    28f4:	c2 52       	subi	r28, 0x22	; 34
    28f6:	d1 40       	sbci	r29, 0x01	; 1
    28f8:	82 e7       	ldi	r24, 0x72	; 114
    28fa:	90 e0       	ldi	r25, 0x00	; 0
    28fc:	cc 5d       	subi	r28, 0xDC	; 220
    28fe:	de 4f       	sbci	r29, 0xFE	; 254
    2900:	99 83       	std	Y+1, r25	; 0x01
    2902:	88 83       	st	Y, r24
    2904:	c4 52       	subi	r28, 0x24	; 36
    2906:	d1 40       	sbci	r29, 0x01	; 1
						}
						keypad.flush();
    2908:	f2 01       	movw	r30, r4
    290a:	09 95       	icall
    290c:	97 cd       	rjmp	.-1234   	; 0x243c <main+0x262>
					}
				}
				break;
			/***MENU 3***/
			case '3': //Set Time and Date
				if(!strcmp(keypad.get().string,"A")){Menu='1';keypad.flush();lcd0.clear();
    290e:	f4 01       	movw	r30, r8
    2910:	09 95       	icall
    2912:	a4 96       	adiw	r28, 0x24	; 36
    2914:	5f af       	std	Y+63, r21	; 0x3f
    2916:	a4 97       	sbiw	r28, 0x24	; 36
    2918:	a5 96       	adiw	r28, 0x25	; 37
    291a:	6f af       	std	Y+63, r22	; 0x3f
    291c:	a5 97       	sbiw	r28, 0x25	; 37
    291e:	62 e1       	ldi	r22, 0x12	; 18
    2920:	71 e0       	ldi	r23, 0x01	; 1
    2922:	a5 96       	adiw	r28, 0x25	; 37
    2924:	8e ad       	ldd	r24, Y+62	; 0x3e
    2926:	9f ad       	ldd	r25, Y+63	; 0x3f
    2928:	a5 97       	sbiw	r28, 0x25	; 37
    292a:	2d d4       	rcall	.+2138   	; 0x3186 <strcmp>
    292c:	89 2b       	or	r24, r25
    292e:	81 f4       	brne	.+32     	; 0x2950 <main+0x776>
    2930:	f2 01       	movw	r30, r4
    2932:	09 95       	icall
    2934:	c1 5d       	subi	r28, 0xD1	; 209
    2936:	de 4f       	sbci	r29, 0xFE	; 254
    2938:	e8 81       	ld	r30, Y
    293a:	f9 81       	ldd	r31, Y+1	; 0x01
    293c:	cf 52       	subi	r28, 0x2F	; 47
    293e:	d1 40       	sbci	r29, 0x01	; 1
    2940:	09 95       	icall
    2942:	f1 e3       	ldi	r31, 0x31	; 49
    2944:	c2 5d       	subi	r28, 0xD2	; 210
    2946:	de 4f       	sbci	r29, 0xFE	; 254
    2948:	f8 83       	st	Y, r31
    294a:	ce 52       	subi	r28, 0x2E	; 46
    294c:	d1 40       	sbci	r29, 0x01	; 1
    294e:	76 cd       	rjmp	.-1300   	; 0x243c <main+0x262>
				}else if(!strcmp(keypad.get().string,"B")){Menu='2';keypad.flush();lcd0.clear();
    2950:	f4 01       	movw	r30, r8
    2952:	09 95       	icall
    2954:	6f 96       	adiw	r28, 0x1f	; 31
    2956:	5f af       	std	Y+63, r21	; 0x3f
    2958:	6f 97       	sbiw	r28, 0x1f	; 31
    295a:	a0 96       	adiw	r28, 0x20	; 32
    295c:	6f af       	std	Y+63, r22	; 0x3f
    295e:	a0 97       	sbiw	r28, 0x20	; 32
    2960:	64 e1       	ldi	r22, 0x14	; 20
    2962:	71 e0       	ldi	r23, 0x01	; 1
    2964:	a0 96       	adiw	r28, 0x20	; 32
    2966:	8e ad       	ldd	r24, Y+62	; 0x3e
    2968:	9f ad       	ldd	r25, Y+63	; 0x3f
    296a:	a0 97       	sbiw	r28, 0x20	; 32
    296c:	0c d4       	rcall	.+2072   	; 0x3186 <strcmp>
    296e:	89 2b       	or	r24, r25
    2970:	81 f4       	brne	.+32     	; 0x2992 <main+0x7b8>
    2972:	f2 01       	movw	r30, r4
    2974:	09 95       	icall
    2976:	c1 5d       	subi	r28, 0xD1	; 209
    2978:	de 4f       	sbci	r29, 0xFE	; 254
    297a:	e8 81       	ld	r30, Y
    297c:	f9 81       	ldd	r31, Y+1	; 0x01
    297e:	cf 52       	subi	r28, 0x2F	; 47
    2980:	d1 40       	sbci	r29, 0x01	; 1
    2982:	09 95       	icall
    2984:	f2 e3       	ldi	r31, 0x32	; 50
    2986:	c2 5d       	subi	r28, 0xD2	; 210
    2988:	de 4f       	sbci	r29, 0xFE	; 254
    298a:	f8 83       	st	Y, r31
    298c:	ce 52       	subi	r28, 0x2E	; 46
    298e:	d1 40       	sbci	r29, 0x01	; 1
    2990:	55 cd       	rjmp	.-1366   	; 0x243c <main+0x262>
				}else{
					/*** Menu to set RTC Time and Date ***/
					lcd0.gotoxy(0,0);
    2992:	60 e0       	ldi	r22, 0x00	; 0
    2994:	70 e0       	ldi	r23, 0x00	; 0
    2996:	80 e0       	ldi	r24, 0x00	; 0
    2998:	90 e0       	ldi	r25, 0x00	; 0
    299a:	f1 01       	movw	r30, r2
    299c:	09 95       	icall
					lcd0.string_size("Date and Time Setup",19);
    299e:	63 e1       	ldi	r22, 0x13	; 19
    29a0:	87 e2       	ldi	r24, 0x27	; 39
    29a2:	91 e0       	ldi	r25, 0x01	; 1
    29a4:	f3 01       	movw	r30, r6
    29a6:	09 95       	icall
					/***Calibrate***/
					switch(cal){
    29a8:	c7 5c       	subi	r28, 0xC7	; 199
    29aa:	de 4f       	sbci	r29, 0xFE	; 254
    29ac:	f8 81       	ld	r31, Y
    29ae:	c9 53       	subi	r28, 0x39	; 57
    29b0:	d1 40       	sbci	r29, 0x01	; 1
    29b2:	8f 2f       	mov	r24, r31
    29b4:	90 e0       	ldi	r25, 0x00	; 0
    29b6:	fc 01       	movw	r30, r24
    29b8:	f0 97       	sbiw	r30, 0x30	; 48
    29ba:	e7 30       	cpi	r30, 0x07	; 7
    29bc:	f1 05       	cpc	r31, r1
    29be:	08 f0       	brcs	.+2      	; 0x29c2 <main+0x7e8>
    29c0:	37 cd       	rjmp	.-1426   	; 0x2430 <main+0x256>
    29c2:	ef 59       	subi	r30, 0x9F	; 159
    29c4:	ff 4f       	sbci	r31, 0xFF	; 255
    29c6:	bd c3       	rjmp	.+1914   	; 0x3142 <__tablejump2__>
						case '0':
							lcd0.gotoxy(1,0);
    29c8:	60 e0       	ldi	r22, 0x00	; 0
    29ca:	70 e0       	ldi	r23, 0x00	; 0
    29cc:	81 e0       	ldi	r24, 0x01	; 1
    29ce:	90 e0       	ldi	r25, 0x00	; 0
    29d0:	f1 01       	movw	r30, r2
    29d2:	09 95       	icall
							lcd0.string_size("1-Year",7);
    29d4:	67 e0       	ldi	r22, 0x07	; 7
    29d6:	8b e3       	ldi	r24, 0x3B	; 59
    29d8:	91 e0       	ldi	r25, 0x01	; 1
    29da:	f3 01       	movw	r30, r6
    29dc:	09 95       	icall
							lcd0.string_size("2-Month",8);
    29de:	68 e0       	ldi	r22, 0x08	; 8
    29e0:	82 e4       	ldi	r24, 0x42	; 66
    29e2:	91 e0       	ldi	r25, 0x01	; 1
    29e4:	f3 01       	movw	r30, r6
    29e6:	09 95       	icall
							lcd0.string_size("3-Day",5);
    29e8:	65 e0       	ldi	r22, 0x05	; 5
    29ea:	8a e4       	ldi	r24, 0x4A	; 74
    29ec:	91 e0       	ldi	r25, 0x01	; 1
    29ee:	f3 01       	movw	r30, r6
    29f0:	09 95       	icall
							lcd0.gotoxy(2,0);
    29f2:	60 e0       	ldi	r22, 0x00	; 0
    29f4:	70 e0       	ldi	r23, 0x00	; 0
    29f6:	82 e0       	ldi	r24, 0x02	; 2
    29f8:	90 e0       	ldi	r25, 0x00	; 0
    29fa:	f1 01       	movw	r30, r2
    29fc:	09 95       	icall
							lcd0.string_size("4-Hour",7);
    29fe:	67 e0       	ldi	r22, 0x07	; 7
    2a00:	80 e5       	ldi	r24, 0x50	; 80
    2a02:	91 e0       	ldi	r25, 0x01	; 1
    2a04:	f3 01       	movw	r30, r6
    2a06:	09 95       	icall
							lcd0.string_size("5-Min",8);
    2a08:	68 e0       	ldi	r22, 0x08	; 8
    2a0a:	87 e5       	ldi	r24, 0x57	; 87
    2a0c:	91 e0       	ldi	r25, 0x01	; 1
    2a0e:	f3 01       	movw	r30, r6
    2a10:	09 95       	icall
							lcd0.string_size("6-Sec",5);
    2a12:	65 e0       	ldi	r22, 0x05	; 5
    2a14:	8d e5       	ldi	r24, 0x5D	; 93
    2a16:	91 e0       	ldi	r25, 0x01	; 1
    2a18:	f3 01       	movw	r30, r6
    2a1a:	09 95       	icall
							lcd0.gotoxy(3,0);
    2a1c:	60 e0       	ldi	r22, 0x00	; 0
    2a1e:	70 e0       	ldi	r23, 0x00	; 0
    2a20:	83 e0       	ldi	r24, 0x03	; 3
    2a22:	90 e0       	ldi	r25, 0x00	; 0
    2a24:	f1 01       	movw	r30, r2
    2a26:	09 95       	icall
							lcd0.string_size("C - exit",8);
    2a28:	68 e0       	ldi	r22, 0x08	; 8
    2a2a:	83 e6       	ldi	r24, 0x63	; 99
    2a2c:	91 e0       	ldi	r25, 0x01	; 1
    2a2e:	f3 01       	movw	r30, r6
    2a30:	09 95       	icall
							if(!strcmp(keypad.get().string,"1")){cal='1';keypad.flush();lcd0.clear();}
    2a32:	f4 01       	movw	r30, r8
    2a34:	09 95       	icall
    2a36:	6a 96       	adiw	r28, 0x1a	; 26
    2a38:	5f af       	std	Y+63, r21	; 0x3f
    2a3a:	6a 97       	sbiw	r28, 0x1a	; 26
    2a3c:	6b 96       	adiw	r28, 0x1b	; 27
    2a3e:	6f af       	std	Y+63, r22	; 0x3f
    2a40:	6b 97       	sbiw	r28, 0x1b	; 27
    2a42:	6c e6       	ldi	r22, 0x6C	; 108
    2a44:	71 e0       	ldi	r23, 0x01	; 1
    2a46:	6b 96       	adiw	r28, 0x1b	; 27
    2a48:	8e ad       	ldd	r24, Y+62	; 0x3e
    2a4a:	9f ad       	ldd	r25, Y+63	; 0x3f
    2a4c:	6b 97       	sbiw	r28, 0x1b	; 27
    2a4e:	9b d3       	rcall	.+1846   	; 0x3186 <strcmp>
    2a50:	89 2b       	or	r24, r25
    2a52:	79 f4       	brne	.+30     	; 0x2a72 <main+0x898>
    2a54:	f2 01       	movw	r30, r4
    2a56:	09 95       	icall
    2a58:	c1 5d       	subi	r28, 0xD1	; 209
    2a5a:	de 4f       	sbci	r29, 0xFE	; 254
    2a5c:	e8 81       	ld	r30, Y
    2a5e:	f9 81       	ldd	r31, Y+1	; 0x01
    2a60:	cf 52       	subi	r28, 0x2F	; 47
    2a62:	d1 40       	sbci	r29, 0x01	; 1
    2a64:	09 95       	icall
    2a66:	f1 e3       	ldi	r31, 0x31	; 49
    2a68:	c7 5c       	subi	r28, 0xC7	; 199
    2a6a:	de 4f       	sbci	r29, 0xFE	; 254
    2a6c:	f8 83       	st	Y, r31
    2a6e:	c9 53       	subi	r28, 0x39	; 57
    2a70:	d1 40       	sbci	r29, 0x01	; 1
							if(!strcmp(keypad.get().string,"2")){cal='2';keypad.flush();lcd0.clear();}
    2a72:	f4 01       	movw	r30, r8
    2a74:	09 95       	icall
    2a76:	65 96       	adiw	r28, 0x15	; 21
    2a78:	5f af       	std	Y+63, r21	; 0x3f
    2a7a:	65 97       	sbiw	r28, 0x15	; 21
    2a7c:	66 96       	adiw	r28, 0x16	; 22
    2a7e:	6f af       	std	Y+63, r22	; 0x3f
    2a80:	66 97       	sbiw	r28, 0x16	; 22
    2a82:	6e e6       	ldi	r22, 0x6E	; 110
    2a84:	71 e0       	ldi	r23, 0x01	; 1
    2a86:	66 96       	adiw	r28, 0x16	; 22
    2a88:	8e ad       	ldd	r24, Y+62	; 0x3e
    2a8a:	9f ad       	ldd	r25, Y+63	; 0x3f
    2a8c:	66 97       	sbiw	r28, 0x16	; 22
    2a8e:	7b d3       	rcall	.+1782   	; 0x3186 <strcmp>
    2a90:	89 2b       	or	r24, r25
    2a92:	79 f4       	brne	.+30     	; 0x2ab2 <main+0x8d8>
    2a94:	f2 01       	movw	r30, r4
    2a96:	09 95       	icall
    2a98:	c1 5d       	subi	r28, 0xD1	; 209
    2a9a:	de 4f       	sbci	r29, 0xFE	; 254
    2a9c:	e8 81       	ld	r30, Y
    2a9e:	f9 81       	ldd	r31, Y+1	; 0x01
    2aa0:	cf 52       	subi	r28, 0x2F	; 47
    2aa2:	d1 40       	sbci	r29, 0x01	; 1
    2aa4:	09 95       	icall
    2aa6:	f2 e3       	ldi	r31, 0x32	; 50
    2aa8:	c7 5c       	subi	r28, 0xC7	; 199
    2aaa:	de 4f       	sbci	r29, 0xFE	; 254
    2aac:	f8 83       	st	Y, r31
    2aae:	c9 53       	subi	r28, 0x39	; 57
							if(!strcmp(keypad.get().string,"3")){cal='3';keypad.flush();lcd0.clear();}
    2ab0:	d1 40       	sbci	r29, 0x01	; 1
    2ab2:	f4 01       	movw	r30, r8
    2ab4:	09 95       	icall
    2ab6:	60 96       	adiw	r28, 0x10	; 16
    2ab8:	5f af       	std	Y+63, r21	; 0x3f
    2aba:	60 97       	sbiw	r28, 0x10	; 16
    2abc:	61 96       	adiw	r28, 0x11	; 17
    2abe:	6f af       	std	Y+63, r22	; 0x3f
    2ac0:	61 97       	sbiw	r28, 0x11	; 17
    2ac2:	60 e7       	ldi	r22, 0x70	; 112
    2ac4:	71 e0       	ldi	r23, 0x01	; 1
    2ac6:	61 96       	adiw	r28, 0x11	; 17
    2ac8:	8e ad       	ldd	r24, Y+62	; 0x3e
    2aca:	9f ad       	ldd	r25, Y+63	; 0x3f
    2acc:	61 97       	sbiw	r28, 0x11	; 17
    2ace:	5b d3       	rcall	.+1718   	; 0x3186 <strcmp>
    2ad0:	89 2b       	or	r24, r25
    2ad2:	79 f4       	brne	.+30     	; 0x2af2 <main+0x918>
    2ad4:	f2 01       	movw	r30, r4
    2ad6:	09 95       	icall
    2ad8:	c1 5d       	subi	r28, 0xD1	; 209
    2ada:	de 4f       	sbci	r29, 0xFE	; 254
    2adc:	e8 81       	ld	r30, Y
    2ade:	f9 81       	ldd	r31, Y+1	; 0x01
    2ae0:	cf 52       	subi	r28, 0x2F	; 47
    2ae2:	d1 40       	sbci	r29, 0x01	; 1
    2ae4:	09 95       	icall
    2ae6:	f3 e3       	ldi	r31, 0x33	; 51
    2ae8:	c7 5c       	subi	r28, 0xC7	; 199
    2aea:	de 4f       	sbci	r29, 0xFE	; 254
    2aec:	f8 83       	st	Y, r31
    2aee:	c9 53       	subi	r28, 0x39	; 57
							if(!strcmp(keypad.get().string,"4")){cal='4';keypad.flush();lcd0.clear();}
    2af0:	d1 40       	sbci	r29, 0x01	; 1
    2af2:	f4 01       	movw	r30, r8
    2af4:	09 95       	icall
    2af6:	2b 96       	adiw	r28, 0x0b	; 11
    2af8:	5f af       	std	Y+63, r21	; 0x3f
    2afa:	2b 97       	sbiw	r28, 0x0b	; 11
    2afc:	2c 96       	adiw	r28, 0x0c	; 12
    2afe:	6f af       	std	Y+63, r22	; 0x3f
    2b00:	2c 97       	sbiw	r28, 0x0c	; 12
    2b02:	62 e7       	ldi	r22, 0x72	; 114
    2b04:	71 e0       	ldi	r23, 0x01	; 1
    2b06:	2c 96       	adiw	r28, 0x0c	; 12
    2b08:	8e ad       	ldd	r24, Y+62	; 0x3e
    2b0a:	9f ad       	ldd	r25, Y+63	; 0x3f
    2b0c:	2c 97       	sbiw	r28, 0x0c	; 12
    2b0e:	3b d3       	rcall	.+1654   	; 0x3186 <strcmp>
    2b10:	89 2b       	or	r24, r25
    2b12:	79 f4       	brne	.+30     	; 0x2b32 <main+0x958>
    2b14:	f2 01       	movw	r30, r4
    2b16:	09 95       	icall
    2b18:	c1 5d       	subi	r28, 0xD1	; 209
    2b1a:	de 4f       	sbci	r29, 0xFE	; 254
    2b1c:	e8 81       	ld	r30, Y
    2b1e:	f9 81       	ldd	r31, Y+1	; 0x01
    2b20:	cf 52       	subi	r28, 0x2F	; 47
    2b22:	d1 40       	sbci	r29, 0x01	; 1
    2b24:	09 95       	icall
    2b26:	f4 e3       	ldi	r31, 0x34	; 52
    2b28:	c7 5c       	subi	r28, 0xC7	; 199
    2b2a:	de 4f       	sbci	r29, 0xFE	; 254
    2b2c:	f8 83       	st	Y, r31
    2b2e:	c9 53       	subi	r28, 0x39	; 57
							if(!strcmp(keypad.get().string,"5")){cal='5';keypad.flush();lcd0.clear();}
    2b30:	d1 40       	sbci	r29, 0x01	; 1
    2b32:	f4 01       	movw	r30, r8
    2b34:	09 95       	icall
    2b36:	26 96       	adiw	r28, 0x06	; 6
    2b38:	5f af       	std	Y+63, r21	; 0x3f
    2b3a:	26 97       	sbiw	r28, 0x06	; 6
    2b3c:	27 96       	adiw	r28, 0x07	; 7
    2b3e:	6f af       	std	Y+63, r22	; 0x3f
    2b40:	27 97       	sbiw	r28, 0x07	; 7
    2b42:	64 e7       	ldi	r22, 0x74	; 116
    2b44:	71 e0       	ldi	r23, 0x01	; 1
    2b46:	27 96       	adiw	r28, 0x07	; 7
    2b48:	8e ad       	ldd	r24, Y+62	; 0x3e
    2b4a:	9f ad       	ldd	r25, Y+63	; 0x3f
    2b4c:	27 97       	sbiw	r28, 0x07	; 7
    2b4e:	1b d3       	rcall	.+1590   	; 0x3186 <strcmp>
    2b50:	89 2b       	or	r24, r25
    2b52:	79 f4       	brne	.+30     	; 0x2b72 <main+0x998>
    2b54:	f2 01       	movw	r30, r4
    2b56:	09 95       	icall
    2b58:	c1 5d       	subi	r28, 0xD1	; 209
    2b5a:	de 4f       	sbci	r29, 0xFE	; 254
    2b5c:	e8 81       	ld	r30, Y
    2b5e:	f9 81       	ldd	r31, Y+1	; 0x01
    2b60:	cf 52       	subi	r28, 0x2F	; 47
    2b62:	d1 40       	sbci	r29, 0x01	; 1
    2b64:	09 95       	icall
    2b66:	f5 e3       	ldi	r31, 0x35	; 53
    2b68:	c7 5c       	subi	r28, 0xC7	; 199
    2b6a:	de 4f       	sbci	r29, 0xFE	; 254
    2b6c:	f8 83       	st	Y, r31
    2b6e:	c9 53       	subi	r28, 0x39	; 57
							if(!strcmp(keypad.get().string,"6")){cal='6';keypad.flush();lcd0.clear();}
    2b70:	d1 40       	sbci	r29, 0x01	; 1
    2b72:	f4 01       	movw	r30, r8
    2b74:	09 95       	icall
    2b76:	21 96       	adiw	r28, 0x01	; 1
    2b78:	5f af       	std	Y+63, r21	; 0x3f
    2b7a:	21 97       	sbiw	r28, 0x01	; 1
    2b7c:	22 96       	adiw	r28, 0x02	; 2
    2b7e:	6f af       	std	Y+63, r22	; 0x3f
    2b80:	22 97       	sbiw	r28, 0x02	; 2
    2b82:	66 e7       	ldi	r22, 0x76	; 118
    2b84:	71 e0       	ldi	r23, 0x01	; 1
    2b86:	22 96       	adiw	r28, 0x02	; 2
    2b88:	8e ad       	ldd	r24, Y+62	; 0x3e
    2b8a:	9f ad       	ldd	r25, Y+63	; 0x3f
    2b8c:	22 97       	sbiw	r28, 0x02	; 2
    2b8e:	fb d2       	rcall	.+1526   	; 0x3186 <strcmp>
    2b90:	89 2b       	or	r24, r25
    2b92:	09 f0       	breq	.+2      	; 0x2b96 <main+0x9bc>
    2b94:	53 cc       	rjmp	.-1882   	; 0x243c <main+0x262>
    2b96:	f2 01       	movw	r30, r4
    2b98:	09 95       	icall
    2b9a:	c1 5d       	subi	r28, 0xD1	; 209
    2b9c:	de 4f       	sbci	r29, 0xFE	; 254
    2b9e:	e8 81       	ld	r30, Y
    2ba0:	f9 81       	ldd	r31, Y+1	; 0x01
    2ba2:	cf 52       	subi	r28, 0x2F	; 47
    2ba4:	d1 40       	sbci	r29, 0x01	; 1
    2ba6:	09 95       	icall
    2ba8:	f6 e3       	ldi	r31, 0x36	; 54
    2baa:	c7 5c       	subi	r28, 0xC7	; 199
    2bac:	de 4f       	sbci	r29, 0xFE	; 254
    2bae:	f8 83       	st	Y, r31
    2bb0:	c9 53       	subi	r28, 0x39	; 57
    2bb2:	d1 40       	sbci	r29, 0x01	; 1
    2bb4:	43 cc       	rjmp	.-1914   	; 0x243c <main+0x262>
							//if(keypad.get().character=='1'){cal='1';keypad.flush();lcd0.clear();}
							break;
						/********************************************************************/
						case '1': // YEAR
							lcd0.gotoxy(1,0);
    2bb6:	60 e0       	ldi	r22, 0x00	; 0
    2bb8:	70 e0       	ldi	r23, 0x00	; 0
    2bba:	81 e0       	ldi	r24, 0x01	; 1
    2bbc:	90 e0       	ldi	r25, 0x00	; 0
    2bbe:	f1 01       	movw	r30, r2
    2bc0:	09 95       	icall
							lcd0.string_size("Enter Value:",9);	
    2bc2:	69 e0       	ldi	r22, 0x09	; 9
    2bc4:	88 e7       	ldi	r24, 0x78	; 120
    2bc6:	91 e0       	ldi	r25, 0x01	; 1
    2bc8:	f3 01       	movw	r30, r6
							/***YEAR***/
							if(keypad.get().character==KEYPADENTERKEY){
    2bca:	09 95       	icall
    2bcc:	f4 01       	movw	r30, r8
    2bce:	09 95       	icall
    2bd0:	24 34       	cpi	r18, 0x44	; 68
    2bd2:	09 f0       	breq	.+2      	; 0x2bd6 <main+0x9fc>
								strcpy(tstr,keypad.get().string);
    2bd4:	33 cc       	rjmp	.-1946   	; 0x243c <main+0x262>
    2bd6:	f4 01       	movw	r30, r8
    2bd8:	09 95       	icall
    2bda:	5e ab       	std	Y+54, r21	; 0x36
    2bdc:	6f ab       	std	Y+55, r22	; 0x37
    2bde:	6e a9       	ldd	r22, Y+54	; 0x36
    2be0:	7f a9       	ldd	r23, Y+55	; 0x37
    2be2:	ce 01       	movw	r24, r28
    2be4:	88 5d       	subi	r24, 0xD8	; 216
    2be6:	9e 4f       	sbci	r25, 0xFE	; 254
								set=function.strToInt(tstr);
    2be8:	d7 d2       	rcall	.+1454   	; 0x3198 <strcpy>
    2bea:	ce 01       	movw	r24, r28
    2bec:	88 5d       	subi	r24, 0xD8	; 216
    2bee:	9e 4f       	sbci	r25, 0xFE	; 254
    2bf0:	ce 5b       	subi	r28, 0xBE	; 190
    2bf2:	de 4f       	sbci	r29, 0xFE	; 254
    2bf4:	e8 81       	ld	r30, Y
    2bf6:	f9 81       	ldd	r31, Y+1	; 0x01
    2bf8:	c2 54       	subi	r28, 0x42	; 66
    2bfa:	d1 40       	sbci	r29, 0x01	; 1
    2bfc:	09 95       	icall
								if(!strcmp(tstr,"C")){cal='0';keypad.flush();break;}
    2bfe:	8c 01       	movw	r16, r24
    2c00:	65 e8       	ldi	r22, 0x85	; 133
    2c02:	71 e0       	ldi	r23, 0x01	; 1
    2c04:	ce 01       	movw	r24, r28
    2c06:	88 5d       	subi	r24, 0xD8	; 216
    2c08:	9e 4f       	sbci	r25, 0xFE	; 254
    2c0a:	bd d2       	rcall	.+1402   	; 0x3186 <strcmp>
    2c0c:	89 2b       	or	r24, r25
    2c0e:	49 f4       	brne	.+18     	; 0x2c22 <main+0xa48>
    2c10:	f2 01       	movw	r30, r4
    2c12:	09 95       	icall
    2c14:	f0 e3       	ldi	r31, 0x30	; 48
    2c16:	c7 5c       	subi	r28, 0xC7	; 199
    2c18:	de 4f       	sbci	r29, 0xFE	; 254
    2c1a:	f8 83       	st	Y, r31
    2c1c:	c9 53       	subi	r28, 0x39	; 57
    2c1e:	d1 40       	sbci	r29, 0x01	; 1
    2c20:	0d cc       	rjmp	.-2022   	; 0x243c <main+0x262>
								if(set >=0 && set <100){
    2c22:	04 36       	cpi	r16, 0x64	; 100
    2c24:	11 05       	cpc	r17, r1
    2c26:	b8 f4       	brcc	.+46     	; 0x2c56 <main+0xa7c>
									//lcd0.string_size(tstr,4);
									rtc.SetYear(rtc.bintobcd(set));
    2c28:	ce 5e       	subi	r28, 0xEE	; 238
    2c2a:	de 4f       	sbci	r29, 0xFE	; 254
    2c2c:	e8 80       	ld	r14, Y
    2c2e:	f9 80       	ldd	r15, Y+1	; 0x01
    2c30:	c2 51       	subi	r28, 0x12	; 18
    2c32:	d1 40       	sbci	r29, 0x01	; 1
    2c34:	80 2f       	mov	r24, r16
    2c36:	cc 5b       	subi	r28, 0xBC	; 188
    2c38:	de 4f       	sbci	r29, 0xFE	; 254
    2c3a:	e8 81       	ld	r30, Y
    2c3c:	f9 81       	ldd	r31, Y+1	; 0x01
    2c3e:	c4 54       	subi	r28, 0x44	; 68
    2c40:	d1 40       	sbci	r29, 0x01	; 1
    2c42:	09 95       	icall
    2c44:	f7 01       	movw	r30, r14
    2c46:	09 95       	icall
									cal='0';
    2c48:	f0 e3       	ldi	r31, 0x30	; 48
    2c4a:	c7 5c       	subi	r28, 0xC7	; 199
    2c4c:	de 4f       	sbci	r29, 0xFE	; 254
    2c4e:	f8 83       	st	Y, r31
    2c50:	c9 53       	subi	r28, 0x39	; 57
    2c52:	d1 40       	sbci	r29, 0x01	; 1
    2c54:	10 c0       	rjmp	.+32     	; 0x2c76 <main+0xa9c>
									}else{
									strcpy(tstr,"err");
    2c56:	85 e6       	ldi	r24, 0x65	; 101
    2c58:	92 e7       	ldi	r25, 0x72	; 114
    2c5a:	c8 5d       	subi	r28, 0xD8	; 216
    2c5c:	de 4f       	sbci	r29, 0xFE	; 254
    2c5e:	99 83       	std	Y+1, r25	; 0x01
    2c60:	88 83       	st	Y, r24
    2c62:	c8 52       	subi	r28, 0x28	; 40
    2c64:	d1 40       	sbci	r29, 0x01	; 1
    2c66:	82 e7       	ldi	r24, 0x72	; 114
    2c68:	90 e0       	ldi	r25, 0x00	; 0
    2c6a:	c6 5d       	subi	r28, 0xD6	; 214
    2c6c:	de 4f       	sbci	r29, 0xFE	; 254
    2c6e:	99 83       	std	Y+1, r25	; 0x01
    2c70:	88 83       	st	Y, r24
    2c72:	ca 52       	subi	r28, 0x2A	; 42
    2c74:	d1 40       	sbci	r29, 0x01	; 1
								}
								keypad.flush();
    2c76:	f2 01       	movw	r30, r4
    2c78:	09 95       	icall
    2c7a:	e0 cb       	rjmp	.-2112   	; 0x243c <main+0x262>
							}
						break;
						/********************************************************************/
						case '2': // MONTH
							lcd0.gotoxy(1,0);
    2c7c:	60 e0       	ldi	r22, 0x00	; 0
    2c7e:	70 e0       	ldi	r23, 0x00	; 0
    2c80:	81 e0       	ldi	r24, 0x01	; 1
    2c82:	90 e0       	ldi	r25, 0x00	; 0
    2c84:	f1 01       	movw	r30, r2
							lcd0.string_size("Enter Value:",9);
    2c86:	09 95       	icall
    2c88:	69 e0       	ldi	r22, 0x09	; 9
    2c8a:	88 e7       	ldi	r24, 0x78	; 120
    2c8c:	91 e0       	ldi	r25, 0x01	; 1
    2c8e:	f3 01       	movw	r30, r6
							/***MONTH***/
							if(keypad.get().character==KEYPADENTERKEY){
    2c90:	09 95       	icall
    2c92:	f4 01       	movw	r30, r8
    2c94:	09 95       	icall
    2c96:	24 34       	cpi	r18, 0x44	; 68
    2c98:	09 f0       	breq	.+2      	; 0x2c9c <main+0xac2>
								strcpy(tstr,keypad.get().string);
    2c9a:	d0 cb       	rjmp	.-2144   	; 0x243c <main+0x262>
    2c9c:	f4 01       	movw	r30, r8
    2c9e:	09 95       	icall
    2ca0:	5c a7       	std	Y+44, r21	; 0x2c
    2ca2:	6d a7       	std	Y+45, r22	; 0x2d
    2ca4:	6c a5       	ldd	r22, Y+44	; 0x2c
    2ca6:	7d a5       	ldd	r23, Y+45	; 0x2d
    2ca8:	ce 01       	movw	r24, r28
    2caa:	88 5d       	subi	r24, 0xD8	; 216
    2cac:	9e 4f       	sbci	r25, 0xFE	; 254
								set=function.strToInt(tstr);
    2cae:	74 d2       	rcall	.+1256   	; 0x3198 <strcpy>
    2cb0:	ce 01       	movw	r24, r28
    2cb2:	88 5d       	subi	r24, 0xD8	; 216
    2cb4:	9e 4f       	sbci	r25, 0xFE	; 254
    2cb6:	ce 5b       	subi	r28, 0xBE	; 190
    2cb8:	de 4f       	sbci	r29, 0xFE	; 254
    2cba:	e8 81       	ld	r30, Y
    2cbc:	f9 81       	ldd	r31, Y+1	; 0x01
    2cbe:	c2 54       	subi	r28, 0x42	; 66
    2cc0:	d1 40       	sbci	r29, 0x01	; 1
    2cc2:	09 95       	icall
								if(!strcmp(tstr,"C")){cal='0';keypad.flush();break;}
    2cc4:	8c 01       	movw	r16, r24
    2cc6:	65 e8       	ldi	r22, 0x85	; 133
    2cc8:	71 e0       	ldi	r23, 0x01	; 1
    2cca:	ce 01       	movw	r24, r28
    2ccc:	88 5d       	subi	r24, 0xD8	; 216
    2cce:	9e 4f       	sbci	r25, 0xFE	; 254
    2cd0:	5a d2       	rcall	.+1204   	; 0x3186 <strcmp>
    2cd2:	89 2b       	or	r24, r25
    2cd4:	49 f4       	brne	.+18     	; 0x2ce8 <main+0xb0e>
    2cd6:	f2 01       	movw	r30, r4
    2cd8:	09 95       	icall
    2cda:	f0 e3       	ldi	r31, 0x30	; 48
    2cdc:	c7 5c       	subi	r28, 0xC7	; 199
    2cde:	de 4f       	sbci	r29, 0xFE	; 254
    2ce0:	f8 83       	st	Y, r31
    2ce2:	c9 53       	subi	r28, 0x39	; 57
    2ce4:	d1 40       	sbci	r29, 0x01	; 1
    2ce6:	aa cb       	rjmp	.-2220   	; 0x243c <main+0x262>
								if(set >=0 && set <13){
    2ce8:	0d 30       	cpi	r16, 0x0D	; 13
    2cea:	11 05       	cpc	r17, r1
    2cec:	b8 f4       	brcc	.+46     	; 0x2d1c <main+0xb42>
									rtc.SetMonth(rtc.bintobcd(set));
    2cee:	c0 5f       	subi	r28, 0xF0	; 240
    2cf0:	de 4f       	sbci	r29, 0xFE	; 254
    2cf2:	e8 80       	ld	r14, Y
    2cf4:	f9 80       	ldd	r15, Y+1	; 0x01
    2cf6:	c0 51       	subi	r28, 0x10	; 16
    2cf8:	d1 40       	sbci	r29, 0x01	; 1
    2cfa:	80 2f       	mov	r24, r16
    2cfc:	cc 5b       	subi	r28, 0xBC	; 188
    2cfe:	de 4f       	sbci	r29, 0xFE	; 254
    2d00:	e8 81       	ld	r30, Y
    2d02:	f9 81       	ldd	r31, Y+1	; 0x01
    2d04:	c4 54       	subi	r28, 0x44	; 68
    2d06:	d1 40       	sbci	r29, 0x01	; 1
    2d08:	09 95       	icall
    2d0a:	f7 01       	movw	r30, r14
    2d0c:	09 95       	icall
									cal='0';
    2d0e:	f0 e3       	ldi	r31, 0x30	; 48
    2d10:	c7 5c       	subi	r28, 0xC7	; 199
    2d12:	de 4f       	sbci	r29, 0xFE	; 254
    2d14:	f8 83       	st	Y, r31
    2d16:	c9 53       	subi	r28, 0x39	; 57
    2d18:	d1 40       	sbci	r29, 0x01	; 1
    2d1a:	10 c0       	rjmp	.+32     	; 0x2d3c <main+0xb62>
								}else{
									strcpy(tstr,"err");
    2d1c:	85 e6       	ldi	r24, 0x65	; 101
    2d1e:	92 e7       	ldi	r25, 0x72	; 114
    2d20:	c8 5d       	subi	r28, 0xD8	; 216
    2d22:	de 4f       	sbci	r29, 0xFE	; 254
    2d24:	99 83       	std	Y+1, r25	; 0x01
    2d26:	88 83       	st	Y, r24
    2d28:	c8 52       	subi	r28, 0x28	; 40
    2d2a:	d1 40       	sbci	r29, 0x01	; 1
    2d2c:	82 e7       	ldi	r24, 0x72	; 114
    2d2e:	90 e0       	ldi	r25, 0x00	; 0
    2d30:	c6 5d       	subi	r28, 0xD6	; 214
    2d32:	de 4f       	sbci	r29, 0xFE	; 254
    2d34:	99 83       	std	Y+1, r25	; 0x01
    2d36:	88 83       	st	Y, r24
    2d38:	ca 52       	subi	r28, 0x2A	; 42
    2d3a:	d1 40       	sbci	r29, 0x01	; 1
								}
								keypad.flush();
    2d3c:	f2 01       	movw	r30, r4
    2d3e:	09 95       	icall
    2d40:	7d cb       	rjmp	.-2310   	; 0x243c <main+0x262>
							}
							break;
						/********************************************************************/
						case '3': // DAY
							lcd0.gotoxy(1,0);
    2d42:	60 e0       	ldi	r22, 0x00	; 0
    2d44:	70 e0       	ldi	r23, 0x00	; 0
    2d46:	81 e0       	ldi	r24, 0x01	; 1
    2d48:	90 e0       	ldi	r25, 0x00	; 0
    2d4a:	f1 01       	movw	r30, r2
							lcd0.string_size("Enter Value:",9);
    2d4c:	09 95       	icall
    2d4e:	69 e0       	ldi	r22, 0x09	; 9
    2d50:	88 e7       	ldi	r24, 0x78	; 120
    2d52:	91 e0       	ldi	r25, 0x01	; 1
    2d54:	f3 01       	movw	r30, r6
							/***DAY***/
							if(keypad.get().character==KEYPADENTERKEY){
    2d56:	09 95       	icall
    2d58:	f4 01       	movw	r30, r8
    2d5a:	09 95       	icall
    2d5c:	24 34       	cpi	r18, 0x44	; 68
    2d5e:	09 f0       	breq	.+2      	; 0x2d62 <main+0xb88>
								strcpy(tstr,keypad.get().string);
    2d60:	6d cb       	rjmp	.-2342   	; 0x243c <main+0x262>
    2d62:	f4 01       	movw	r30, r8
    2d64:	09 95       	icall
    2d66:	5a a3       	std	Y+34, r21	; 0x22
    2d68:	6b a3       	std	Y+35, r22	; 0x23
    2d6a:	6a a1       	ldd	r22, Y+34	; 0x22
    2d6c:	7b a1       	ldd	r23, Y+35	; 0x23
    2d6e:	ce 01       	movw	r24, r28
    2d70:	88 5d       	subi	r24, 0xD8	; 216
    2d72:	9e 4f       	sbci	r25, 0xFE	; 254
								set=function.strToInt(tstr);
    2d74:	11 d2       	rcall	.+1058   	; 0x3198 <strcpy>
    2d76:	ce 01       	movw	r24, r28
    2d78:	88 5d       	subi	r24, 0xD8	; 216
    2d7a:	9e 4f       	sbci	r25, 0xFE	; 254
    2d7c:	ce 5b       	subi	r28, 0xBE	; 190
    2d7e:	de 4f       	sbci	r29, 0xFE	; 254
    2d80:	e8 81       	ld	r30, Y
    2d82:	f9 81       	ldd	r31, Y+1	; 0x01
    2d84:	c2 54       	subi	r28, 0x42	; 66
    2d86:	d1 40       	sbci	r29, 0x01	; 1
    2d88:	09 95       	icall
								if(!strcmp(tstr,"C")){cal='0';keypad.flush();break;}
    2d8a:	8c 01       	movw	r16, r24
    2d8c:	65 e8       	ldi	r22, 0x85	; 133
    2d8e:	71 e0       	ldi	r23, 0x01	; 1
    2d90:	ce 01       	movw	r24, r28
    2d92:	88 5d       	subi	r24, 0xD8	; 216
    2d94:	9e 4f       	sbci	r25, 0xFE	; 254
    2d96:	f7 d1       	rcall	.+1006   	; 0x3186 <strcmp>
    2d98:	89 2b       	or	r24, r25
    2d9a:	49 f4       	brne	.+18     	; 0x2dae <main+0xbd4>
    2d9c:	f2 01       	movw	r30, r4
    2d9e:	09 95       	icall
    2da0:	f0 e3       	ldi	r31, 0x30	; 48
    2da2:	c7 5c       	subi	r28, 0xC7	; 199
    2da4:	de 4f       	sbci	r29, 0xFE	; 254
    2da6:	f8 83       	st	Y, r31
    2da8:	c9 53       	subi	r28, 0x39	; 57
    2daa:	d1 40       	sbci	r29, 0x01	; 1
    2dac:	47 cb       	rjmp	.-2418   	; 0x243c <main+0x262>
								if(set >=0 && set <32){
    2dae:	00 32       	cpi	r16, 0x20	; 32
    2db0:	11 05       	cpc	r17, r1
    2db2:	b8 f4       	brcc	.+46     	; 0x2de2 <main+0xc08>
									rtc.SetDay(rtc.bintobcd(set));
    2db4:	c4 5f       	subi	r28, 0xF4	; 244
    2db6:	de 4f       	sbci	r29, 0xFE	; 254
    2db8:	e8 80       	ld	r14, Y
    2dba:	f9 80       	ldd	r15, Y+1	; 0x01
    2dbc:	cc 50       	subi	r28, 0x0C	; 12
    2dbe:	d1 40       	sbci	r29, 0x01	; 1
    2dc0:	80 2f       	mov	r24, r16
    2dc2:	cc 5b       	subi	r28, 0xBC	; 188
    2dc4:	de 4f       	sbci	r29, 0xFE	; 254
    2dc6:	e8 81       	ld	r30, Y
    2dc8:	f9 81       	ldd	r31, Y+1	; 0x01
    2dca:	c4 54       	subi	r28, 0x44	; 68
    2dcc:	d1 40       	sbci	r29, 0x01	; 1
    2dce:	09 95       	icall
    2dd0:	f7 01       	movw	r30, r14
    2dd2:	09 95       	icall
									cal='0';
    2dd4:	f0 e3       	ldi	r31, 0x30	; 48
    2dd6:	c7 5c       	subi	r28, 0xC7	; 199
    2dd8:	de 4f       	sbci	r29, 0xFE	; 254
    2dda:	f8 83       	st	Y, r31
    2ddc:	c9 53       	subi	r28, 0x39	; 57
    2dde:	d1 40       	sbci	r29, 0x01	; 1
    2de0:	10 c0       	rjmp	.+32     	; 0x2e02 <main+0xc28>
								}else{
									strcpy(tstr,"err");
    2de2:	85 e6       	ldi	r24, 0x65	; 101
    2de4:	92 e7       	ldi	r25, 0x72	; 114
    2de6:	c8 5d       	subi	r28, 0xD8	; 216
    2de8:	de 4f       	sbci	r29, 0xFE	; 254
    2dea:	99 83       	std	Y+1, r25	; 0x01
    2dec:	88 83       	st	Y, r24
    2dee:	c8 52       	subi	r28, 0x28	; 40
    2df0:	d1 40       	sbci	r29, 0x01	; 1
    2df2:	82 e7       	ldi	r24, 0x72	; 114
    2df4:	90 e0       	ldi	r25, 0x00	; 0
    2df6:	c6 5d       	subi	r28, 0xD6	; 214
    2df8:	de 4f       	sbci	r29, 0xFE	; 254
    2dfa:	99 83       	std	Y+1, r25	; 0x01
    2dfc:	88 83       	st	Y, r24
    2dfe:	ca 52       	subi	r28, 0x2A	; 42
    2e00:	d1 40       	sbci	r29, 0x01	; 1
								}
								keypad.flush();
    2e02:	f2 01       	movw	r30, r4
    2e04:	09 95       	icall
    2e06:	1a cb       	rjmp	.-2508   	; 0x243c <main+0x262>
							}
						break;
						/********************************************************************/
						case '4': // HOUR
							lcd0.gotoxy(1,0);
    2e08:	60 e0       	ldi	r22, 0x00	; 0
    2e0a:	70 e0       	ldi	r23, 0x00	; 0
    2e0c:	81 e0       	ldi	r24, 0x01	; 1
    2e0e:	90 e0       	ldi	r25, 0x00	; 0
    2e10:	f1 01       	movw	r30, r2
							lcd0.string_size("Enter Value:",9);
    2e12:	09 95       	icall
    2e14:	69 e0       	ldi	r22, 0x09	; 9
    2e16:	88 e7       	ldi	r24, 0x78	; 120
    2e18:	91 e0       	ldi	r25, 0x01	; 1
    2e1a:	f3 01       	movw	r30, r6
							/***HOUR***/
							if(keypad.get().character==KEYPADENTERKEY){
    2e1c:	09 95       	icall
    2e1e:	f4 01       	movw	r30, r8
    2e20:	09 95       	icall
    2e22:	24 34       	cpi	r18, 0x44	; 68
    2e24:	09 f0       	breq	.+2      	; 0x2e28 <main+0xc4e>
								strcpy(tstr,keypad.get().string);
    2e26:	0a cb       	rjmp	.-2540   	; 0x243c <main+0x262>
    2e28:	f4 01       	movw	r30, r8
    2e2a:	09 95       	icall
    2e2c:	58 8f       	std	Y+24, r21	; 0x18
    2e2e:	69 8f       	std	Y+25, r22	; 0x19
    2e30:	68 8d       	ldd	r22, Y+24	; 0x18
    2e32:	79 8d       	ldd	r23, Y+25	; 0x19
    2e34:	ce 01       	movw	r24, r28
    2e36:	88 5d       	subi	r24, 0xD8	; 216
    2e38:	9e 4f       	sbci	r25, 0xFE	; 254
								set=function.strToInt(tstr);
    2e3a:	ae d1       	rcall	.+860    	; 0x3198 <strcpy>
    2e3c:	ce 01       	movw	r24, r28
    2e3e:	88 5d       	subi	r24, 0xD8	; 216
    2e40:	9e 4f       	sbci	r25, 0xFE	; 254
    2e42:	ce 5b       	subi	r28, 0xBE	; 190
    2e44:	de 4f       	sbci	r29, 0xFE	; 254
    2e46:	e8 81       	ld	r30, Y
    2e48:	f9 81       	ldd	r31, Y+1	; 0x01
    2e4a:	c2 54       	subi	r28, 0x42	; 66
    2e4c:	d1 40       	sbci	r29, 0x01	; 1
    2e4e:	09 95       	icall
								if(!strcmp(tstr,"C")){cal='0';keypad.flush();break;}
    2e50:	8c 01       	movw	r16, r24
    2e52:	65 e8       	ldi	r22, 0x85	; 133
    2e54:	71 e0       	ldi	r23, 0x01	; 1
    2e56:	ce 01       	movw	r24, r28
    2e58:	88 5d       	subi	r24, 0xD8	; 216
    2e5a:	9e 4f       	sbci	r25, 0xFE	; 254
    2e5c:	94 d1       	rcall	.+808    	; 0x3186 <strcmp>
    2e5e:	89 2b       	or	r24, r25
    2e60:	49 f4       	brne	.+18     	; 0x2e74 <main+0xc9a>
    2e62:	f2 01       	movw	r30, r4
    2e64:	09 95       	icall
    2e66:	f0 e3       	ldi	r31, 0x30	; 48
    2e68:	c7 5c       	subi	r28, 0xC7	; 199
    2e6a:	de 4f       	sbci	r29, 0xFE	; 254
    2e6c:	f8 83       	st	Y, r31
    2e6e:	c9 53       	subi	r28, 0x39	; 57
    2e70:	d1 40       	sbci	r29, 0x01	; 1
    2e72:	e4 ca       	rjmp	.-2616   	; 0x243c <main+0x262>
								if(set >=0 && set <24){
    2e74:	08 31       	cpi	r16, 0x18	; 24
    2e76:	11 05       	cpc	r17, r1
    2e78:	b8 f4       	brcc	.+46     	; 0x2ea8 <main+0xcce>
									rtc.SetHour(rtc.bintobcd(set));
    2e7a:	ce 5f       	subi	r28, 0xFE	; 254
    2e7c:	de 4f       	sbci	r29, 0xFE	; 254
    2e7e:	e8 80       	ld	r14, Y
    2e80:	f9 80       	ldd	r15, Y+1	; 0x01
    2e82:	c2 50       	subi	r28, 0x02	; 2
    2e84:	d1 40       	sbci	r29, 0x01	; 1
    2e86:	80 2f       	mov	r24, r16
    2e88:	cc 5b       	subi	r28, 0xBC	; 188
    2e8a:	de 4f       	sbci	r29, 0xFE	; 254
    2e8c:	e8 81       	ld	r30, Y
    2e8e:	f9 81       	ldd	r31, Y+1	; 0x01
    2e90:	c4 54       	subi	r28, 0x44	; 68
    2e92:	d1 40       	sbci	r29, 0x01	; 1
    2e94:	09 95       	icall
    2e96:	f7 01       	movw	r30, r14
    2e98:	09 95       	icall
									cal='0';
    2e9a:	f0 e3       	ldi	r31, 0x30	; 48
    2e9c:	c7 5c       	subi	r28, 0xC7	; 199
    2e9e:	de 4f       	sbci	r29, 0xFE	; 254
    2ea0:	f8 83       	st	Y, r31
    2ea2:	c9 53       	subi	r28, 0x39	; 57
    2ea4:	d1 40       	sbci	r29, 0x01	; 1
    2ea6:	10 c0       	rjmp	.+32     	; 0x2ec8 <main+0xcee>
								}else{
									strcpy(tstr,"err");
    2ea8:	85 e6       	ldi	r24, 0x65	; 101
    2eaa:	92 e7       	ldi	r25, 0x72	; 114
    2eac:	c8 5d       	subi	r28, 0xD8	; 216
    2eae:	de 4f       	sbci	r29, 0xFE	; 254
    2eb0:	99 83       	std	Y+1, r25	; 0x01
    2eb2:	88 83       	st	Y, r24
    2eb4:	c8 52       	subi	r28, 0x28	; 40
    2eb6:	d1 40       	sbci	r29, 0x01	; 1
    2eb8:	82 e7       	ldi	r24, 0x72	; 114
    2eba:	90 e0       	ldi	r25, 0x00	; 0
    2ebc:	c6 5d       	subi	r28, 0xD6	; 214
    2ebe:	de 4f       	sbci	r29, 0xFE	; 254
    2ec0:	99 83       	std	Y+1, r25	; 0x01
    2ec2:	88 83       	st	Y, r24
    2ec4:	ca 52       	subi	r28, 0x2A	; 42
    2ec6:	d1 40       	sbci	r29, 0x01	; 1
								}
								keypad.flush();
    2ec8:	f2 01       	movw	r30, r4
    2eca:	09 95       	icall
							}
						break;
						/********************************************************************/
						case '5': // MINUTE
							lcd0.gotoxy(1,0);
    2ecc:	b7 ca       	rjmp	.-2706   	; 0x243c <main+0x262>
    2ece:	60 e0       	ldi	r22, 0x00	; 0
    2ed0:	70 e0       	ldi	r23, 0x00	; 0
    2ed2:	81 e0       	ldi	r24, 0x01	; 1
    2ed4:	90 e0       	ldi	r25, 0x00	; 0
    2ed6:	f1 01       	movw	r30, r2
							lcd0.string_size("Enter Value:",9);
    2ed8:	09 95       	icall
    2eda:	69 e0       	ldi	r22, 0x09	; 9
    2edc:	88 e7       	ldi	r24, 0x78	; 120
    2ede:	91 e0       	ldi	r25, 0x01	; 1
    2ee0:	f3 01       	movw	r30, r6
							/***MINUTE***/
							if(keypad.get().character==KEYPADENTERKEY){
    2ee2:	09 95       	icall
    2ee4:	f4 01       	movw	r30, r8
    2ee6:	09 95       	icall
    2ee8:	24 34       	cpi	r18, 0x44	; 68
								strcpy(tstr,keypad.get().string);
    2eea:	09 f0       	breq	.+2      	; 0x2eee <main+0xd14>
    2eec:	a7 ca       	rjmp	.-2738   	; 0x243c <main+0x262>
    2eee:	f4 01       	movw	r30, r8
    2ef0:	09 95       	icall
    2ef2:	5e 87       	std	Y+14, r21	; 0x0e
    2ef4:	6f 87       	std	Y+15, r22	; 0x0f
    2ef6:	6e 85       	ldd	r22, Y+14	; 0x0e
    2ef8:	7f 85       	ldd	r23, Y+15	; 0x0f
    2efa:	ce 01       	movw	r24, r28
    2efc:	88 5d       	subi	r24, 0xD8	; 216
    2efe:	9e 4f       	sbci	r25, 0xFE	; 254
								set=function.strToInt(tstr);
    2f00:	4b d1       	rcall	.+662    	; 0x3198 <strcpy>
    2f02:	ce 01       	movw	r24, r28
    2f04:	88 5d       	subi	r24, 0xD8	; 216
    2f06:	9e 4f       	sbci	r25, 0xFE	; 254
    2f08:	ce 5b       	subi	r28, 0xBE	; 190
    2f0a:	de 4f       	sbci	r29, 0xFE	; 254
    2f0c:	e8 81       	ld	r30, Y
    2f0e:	f9 81       	ldd	r31, Y+1	; 0x01
    2f10:	c2 54       	subi	r28, 0x42	; 66
    2f12:	d1 40       	sbci	r29, 0x01	; 1
    2f14:	09 95       	icall
								if(!strcmp(tstr,"C")){cal='0';keypad.flush();break;}
    2f16:	8c 01       	movw	r16, r24
    2f18:	65 e8       	ldi	r22, 0x85	; 133
    2f1a:	71 e0       	ldi	r23, 0x01	; 1
    2f1c:	ce 01       	movw	r24, r28
    2f1e:	88 5d       	subi	r24, 0xD8	; 216
    2f20:	9e 4f       	sbci	r25, 0xFE	; 254
    2f22:	31 d1       	rcall	.+610    	; 0x3186 <strcmp>
    2f24:	89 2b       	or	r24, r25
    2f26:	49 f4       	brne	.+18     	; 0x2f3a <main+0xd60>
    2f28:	f2 01       	movw	r30, r4
    2f2a:	09 95       	icall
    2f2c:	f0 e3       	ldi	r31, 0x30	; 48
    2f2e:	c7 5c       	subi	r28, 0xC7	; 199
    2f30:	de 4f       	sbci	r29, 0xFE	; 254
    2f32:	f8 83       	st	Y, r31
    2f34:	c9 53       	subi	r28, 0x39	; 57
    2f36:	d1 40       	sbci	r29, 0x01	; 1
    2f38:	81 ca       	rjmp	.-2814   	; 0x243c <main+0x262>
								if(set >=0 && set <24){
    2f3a:	08 31       	cpi	r16, 0x18	; 24
    2f3c:	11 05       	cpc	r17, r1
    2f3e:	b8 f4       	brcc	.+46     	; 0x2f6e <main+0xd94>
									rtc.SetMinute(rtc.bintobcd(set));
    2f40:	cc 5f       	subi	r28, 0xFC	; 252
    2f42:	de 4f       	sbci	r29, 0xFE	; 254
    2f44:	e8 80       	ld	r14, Y
    2f46:	f9 80       	ldd	r15, Y+1	; 0x01
    2f48:	c4 50       	subi	r28, 0x04	; 4
    2f4a:	d1 40       	sbci	r29, 0x01	; 1
    2f4c:	80 2f       	mov	r24, r16
    2f4e:	cc 5b       	subi	r28, 0xBC	; 188
    2f50:	de 4f       	sbci	r29, 0xFE	; 254
    2f52:	e8 81       	ld	r30, Y
    2f54:	f9 81       	ldd	r31, Y+1	; 0x01
    2f56:	c4 54       	subi	r28, 0x44	; 68
    2f58:	d1 40       	sbci	r29, 0x01	; 1
    2f5a:	09 95       	icall
    2f5c:	f7 01       	movw	r30, r14
    2f5e:	09 95       	icall
									cal='0';
    2f60:	f0 e3       	ldi	r31, 0x30	; 48
    2f62:	c7 5c       	subi	r28, 0xC7	; 199
    2f64:	de 4f       	sbci	r29, 0xFE	; 254
    2f66:	f8 83       	st	Y, r31
    2f68:	c9 53       	subi	r28, 0x39	; 57
    2f6a:	d1 40       	sbci	r29, 0x01	; 1
    2f6c:	10 c0       	rjmp	.+32     	; 0x2f8e <main+0xdb4>
								}else{
									strcpy(tstr,"err");
    2f6e:	85 e6       	ldi	r24, 0x65	; 101
    2f70:	92 e7       	ldi	r25, 0x72	; 114
    2f72:	c8 5d       	subi	r28, 0xD8	; 216
    2f74:	de 4f       	sbci	r29, 0xFE	; 254
    2f76:	99 83       	std	Y+1, r25	; 0x01
    2f78:	88 83       	st	Y, r24
    2f7a:	c8 52       	subi	r28, 0x28	; 40
    2f7c:	d1 40       	sbci	r29, 0x01	; 1
    2f7e:	82 e7       	ldi	r24, 0x72	; 114
    2f80:	90 e0       	ldi	r25, 0x00	; 0
    2f82:	c6 5d       	subi	r28, 0xD6	; 214
    2f84:	de 4f       	sbci	r29, 0xFE	; 254
    2f86:	99 83       	std	Y+1, r25	; 0x01
    2f88:	88 83       	st	Y, r24
    2f8a:	ca 52       	subi	r28, 0x2A	; 42
								}
								keypad.flush();
    2f8c:	d1 40       	sbci	r29, 0x01	; 1
    2f8e:	f2 01       	movw	r30, r4
    2f90:	09 95       	icall
							}
						break;
						/********************************************************************/
						case '6': // SECOND
							lcd0.gotoxy(1,0);
    2f92:	54 ca       	rjmp	.-2904   	; 0x243c <main+0x262>
    2f94:	60 e0       	ldi	r22, 0x00	; 0
    2f96:	70 e0       	ldi	r23, 0x00	; 0
    2f98:	81 e0       	ldi	r24, 0x01	; 1
    2f9a:	90 e0       	ldi	r25, 0x00	; 0
    2f9c:	f1 01       	movw	r30, r2
							lcd0.string_size("Enter Value:",9);
    2f9e:	09 95       	icall
    2fa0:	69 e0       	ldi	r22, 0x09	; 9
    2fa2:	88 e7       	ldi	r24, 0x78	; 120
    2fa4:	91 e0       	ldi	r25, 0x01	; 1
    2fa6:	f3 01       	movw	r30, r6
							/***SECOND***/
							if(keypad.get().character==KEYPADENTERKEY){
    2fa8:	09 95       	icall
    2faa:	f4 01       	movw	r30, r8
    2fac:	09 95       	icall
    2fae:	24 34       	cpi	r18, 0x44	; 68
								strcpy(tstr,keypad.get().string);
    2fb0:	09 f0       	breq	.+2      	; 0x2fb4 <main+0xdda>
    2fb2:	44 ca       	rjmp	.-2936   	; 0x243c <main+0x262>
    2fb4:	f4 01       	movw	r30, r8
    2fb6:	09 95       	icall
    2fb8:	5c 83       	std	Y+4, r21	; 0x04
    2fba:	6d 83       	std	Y+5, r22	; 0x05
    2fbc:	6c 81       	ldd	r22, Y+4	; 0x04
    2fbe:	7d 81       	ldd	r23, Y+5	; 0x05
    2fc0:	ce 01       	movw	r24, r28
    2fc2:	88 5d       	subi	r24, 0xD8	; 216
    2fc4:	9e 4f       	sbci	r25, 0xFE	; 254
								set=function.strToInt(tstr);
    2fc6:	e8 d0       	rcall	.+464    	; 0x3198 <strcpy>
    2fc8:	ce 01       	movw	r24, r28
    2fca:	88 5d       	subi	r24, 0xD8	; 216
    2fcc:	9e 4f       	sbci	r25, 0xFE	; 254
    2fce:	ce 5b       	subi	r28, 0xBE	; 190
    2fd0:	de 4f       	sbci	r29, 0xFE	; 254
    2fd2:	e8 81       	ld	r30, Y
    2fd4:	f9 81       	ldd	r31, Y+1	; 0x01
    2fd6:	c2 54       	subi	r28, 0x42	; 66
    2fd8:	d1 40       	sbci	r29, 0x01	; 1
    2fda:	09 95       	icall
								if(!strcmp(tstr,"C")){cal='0';keypad.flush();break;}
    2fdc:	8c 01       	movw	r16, r24
    2fde:	65 e8       	ldi	r22, 0x85	; 133
    2fe0:	71 e0       	ldi	r23, 0x01	; 1
    2fe2:	ce 01       	movw	r24, r28
    2fe4:	88 5d       	subi	r24, 0xD8	; 216
    2fe6:	9e 4f       	sbci	r25, 0xFE	; 254
    2fe8:	ce d0       	rcall	.+412    	; 0x3186 <strcmp>
    2fea:	89 2b       	or	r24, r25
    2fec:	49 f4       	brne	.+18     	; 0x3000 <main+0xe26>
    2fee:	f2 01       	movw	r30, r4
    2ff0:	09 95       	icall
    2ff2:	f0 e3       	ldi	r31, 0x30	; 48
    2ff4:	c7 5c       	subi	r28, 0xC7	; 199
    2ff6:	de 4f       	sbci	r29, 0xFE	; 254
    2ff8:	f8 83       	st	Y, r31
    2ffa:	c9 53       	subi	r28, 0x39	; 57
    2ffc:	d1 40       	sbci	r29, 0x01	; 1
    2ffe:	1e ca       	rjmp	.-3012   	; 0x243c <main+0x262>
								if(set >=0 && set <24){
    3000:	08 31       	cpi	r16, 0x18	; 24
    3002:	11 05       	cpc	r17, r1
    3004:	b8 f4       	brcc	.+46     	; 0x3034 <main+0xe5a>
									rtc.SetSecond(rtc.bintobcd(set));
    3006:	ca 5f       	subi	r28, 0xFA	; 250
    3008:	de 4f       	sbci	r29, 0xFE	; 254
    300a:	e8 80       	ld	r14, Y
    300c:	f9 80       	ldd	r15, Y+1	; 0x01
    300e:	c6 50       	subi	r28, 0x06	; 6
    3010:	d1 40       	sbci	r29, 0x01	; 1
    3012:	80 2f       	mov	r24, r16
    3014:	cc 5b       	subi	r28, 0xBC	; 188
    3016:	de 4f       	sbci	r29, 0xFE	; 254
    3018:	e8 81       	ld	r30, Y
    301a:	f9 81       	ldd	r31, Y+1	; 0x01
    301c:	c4 54       	subi	r28, 0x44	; 68
    301e:	d1 40       	sbci	r29, 0x01	; 1
    3020:	09 95       	icall
    3022:	f7 01       	movw	r30, r14
    3024:	09 95       	icall
									cal='0';
    3026:	f0 e3       	ldi	r31, 0x30	; 48
    3028:	c7 5c       	subi	r28, 0xC7	; 199
    302a:	de 4f       	sbci	r29, 0xFE	; 254
    302c:	f8 83       	st	Y, r31
    302e:	c9 53       	subi	r28, 0x39	; 57
    3030:	d1 40       	sbci	r29, 0x01	; 1
    3032:	10 c0       	rjmp	.+32     	; 0x3054 <main+0xe7a>
								}else{
									strcpy(tstr,"err");
    3034:	85 e6       	ldi	r24, 0x65	; 101
    3036:	92 e7       	ldi	r25, 0x72	; 114
    3038:	c8 5d       	subi	r28, 0xD8	; 216
    303a:	de 4f       	sbci	r29, 0xFE	; 254
    303c:	99 83       	std	Y+1, r25	; 0x01
    303e:	88 83       	st	Y, r24
    3040:	c8 52       	subi	r28, 0x28	; 40
    3042:	d1 40       	sbci	r29, 0x01	; 1
    3044:	82 e7       	ldi	r24, 0x72	; 114
    3046:	90 e0       	ldi	r25, 0x00	; 0
    3048:	c6 5d       	subi	r28, 0xD6	; 214
    304a:	de 4f       	sbci	r29, 0xFE	; 254
    304c:	99 83       	std	Y+1, r25	; 0x01
    304e:	88 83       	st	Y, r24
    3050:	ca 52       	subi	r28, 0x2A	; 42
    3052:	d1 40       	sbci	r29, 0x01	; 1
								}
								keypad.flush();
    3054:	f2 01       	movw	r30, r4
    3056:	09 95       	icall
    3058:	f1 c9       	rjmp	.-3102   	; 0x243c <main+0x262>

0000305a <__mulsi3>:
    305a:	db 01       	movw	r26, r22
    305c:	8f 93       	push	r24
    305e:	9f 93       	push	r25
    3060:	88 d0       	rcall	.+272    	; 0x3172 <__muluhisi3>
    3062:	bf 91       	pop	r27
    3064:	af 91       	pop	r26
    3066:	a2 9f       	mul	r26, r18
    3068:	80 0d       	add	r24, r0
    306a:	91 1d       	adc	r25, r1
    306c:	a3 9f       	mul	r26, r19
    306e:	90 0d       	add	r25, r0
    3070:	b2 9f       	mul	r27, r18
    3072:	90 0d       	add	r25, r0
    3074:	11 24       	eor	r1, r1
    3076:	08 95       	ret

00003078 <__udivmodhi4>:
    3078:	aa 1b       	sub	r26, r26
    307a:	bb 1b       	sub	r27, r27
    307c:	51 e1       	ldi	r21, 0x11	; 17
    307e:	07 c0       	rjmp	.+14     	; 0x308e <__udivmodhi4_ep>

00003080 <__udivmodhi4_loop>:
    3080:	aa 1f       	adc	r26, r26
    3082:	bb 1f       	adc	r27, r27
    3084:	a6 17       	cp	r26, r22
    3086:	b7 07       	cpc	r27, r23
    3088:	10 f0       	brcs	.+4      	; 0x308e <__udivmodhi4_ep>
    308a:	a6 1b       	sub	r26, r22
    308c:	b7 0b       	sbc	r27, r23

0000308e <__udivmodhi4_ep>:
    308e:	88 1f       	adc	r24, r24
    3090:	99 1f       	adc	r25, r25
    3092:	5a 95       	dec	r21
    3094:	a9 f7       	brne	.-22     	; 0x3080 <__udivmodhi4_loop>
    3096:	80 95       	com	r24
    3098:	90 95       	com	r25
    309a:	bc 01       	movw	r22, r24
    309c:	cd 01       	movw	r24, r26
    309e:	08 95       	ret

000030a0 <__divmodhi4>:
    30a0:	97 fb       	bst	r25, 7
    30a2:	07 2e       	mov	r0, r23
    30a4:	16 f4       	brtc	.+4      	; 0x30aa <__divmodhi4+0xa>
    30a6:	00 94       	com	r0
    30a8:	06 d0       	rcall	.+12     	; 0x30b6 <__divmodhi4_neg1>
    30aa:	77 fd       	sbrc	r23, 7
    30ac:	08 d0       	rcall	.+16     	; 0x30be <__divmodhi4_neg2>
    30ae:	e4 df       	rcall	.-56     	; 0x3078 <__udivmodhi4>
    30b0:	07 fc       	sbrc	r0, 7
    30b2:	05 d0       	rcall	.+10     	; 0x30be <__divmodhi4_neg2>
    30b4:	3e f4       	brtc	.+14     	; 0x30c4 <__divmodhi4_exit>

000030b6 <__divmodhi4_neg1>:
    30b6:	90 95       	com	r25
    30b8:	81 95       	neg	r24
    30ba:	9f 4f       	sbci	r25, 0xFF	; 255
    30bc:	08 95       	ret

000030be <__divmodhi4_neg2>:
    30be:	70 95       	com	r23
    30c0:	61 95       	neg	r22
    30c2:	7f 4f       	sbci	r23, 0xFF	; 255

000030c4 <__divmodhi4_exit>:
    30c4:	08 95       	ret

000030c6 <__udivmodsi4>:
    30c6:	a1 e2       	ldi	r26, 0x21	; 33
    30c8:	1a 2e       	mov	r1, r26
    30ca:	aa 1b       	sub	r26, r26
    30cc:	bb 1b       	sub	r27, r27
    30ce:	fd 01       	movw	r30, r26
    30d0:	0d c0       	rjmp	.+26     	; 0x30ec <__udivmodsi4_ep>

000030d2 <__udivmodsi4_loop>:
    30d2:	aa 1f       	adc	r26, r26
    30d4:	bb 1f       	adc	r27, r27
    30d6:	ee 1f       	adc	r30, r30
    30d8:	ff 1f       	adc	r31, r31
    30da:	a2 17       	cp	r26, r18
    30dc:	b3 07       	cpc	r27, r19
    30de:	e4 07       	cpc	r30, r20
    30e0:	f5 07       	cpc	r31, r21
    30e2:	20 f0       	brcs	.+8      	; 0x30ec <__udivmodsi4_ep>
    30e4:	a2 1b       	sub	r26, r18
    30e6:	b3 0b       	sbc	r27, r19
    30e8:	e4 0b       	sbc	r30, r20
    30ea:	f5 0b       	sbc	r31, r21

000030ec <__udivmodsi4_ep>:
    30ec:	66 1f       	adc	r22, r22
    30ee:	77 1f       	adc	r23, r23
    30f0:	88 1f       	adc	r24, r24
    30f2:	99 1f       	adc	r25, r25
    30f4:	1a 94       	dec	r1
    30f6:	69 f7       	brne	.-38     	; 0x30d2 <__udivmodsi4_loop>
    30f8:	60 95       	com	r22
    30fa:	70 95       	com	r23
    30fc:	80 95       	com	r24
    30fe:	90 95       	com	r25
    3100:	9b 01       	movw	r18, r22
    3102:	ac 01       	movw	r20, r24
    3104:	bd 01       	movw	r22, r26
    3106:	cf 01       	movw	r24, r30
    3108:	08 95       	ret

0000310a <__divmodsi4>:
    310a:	05 2e       	mov	r0, r21
    310c:	97 fb       	bst	r25, 7
    310e:	16 f4       	brtc	.+4      	; 0x3114 <__divmodsi4+0xa>
    3110:	00 94       	com	r0
    3112:	0f d0       	rcall	.+30     	; 0x3132 <__negsi2>
    3114:	57 fd       	sbrc	r21, 7
    3116:	05 d0       	rcall	.+10     	; 0x3122 <__divmodsi4_neg2>
    3118:	d6 df       	rcall	.-84     	; 0x30c6 <__udivmodsi4>
    311a:	07 fc       	sbrc	r0, 7
    311c:	02 d0       	rcall	.+4      	; 0x3122 <__divmodsi4_neg2>
    311e:	46 f4       	brtc	.+16     	; 0x3130 <__divmodsi4_exit>
    3120:	08 c0       	rjmp	.+16     	; 0x3132 <__negsi2>

00003122 <__divmodsi4_neg2>:
    3122:	50 95       	com	r21
    3124:	40 95       	com	r20
    3126:	30 95       	com	r19
    3128:	21 95       	neg	r18
    312a:	3f 4f       	sbci	r19, 0xFF	; 255
    312c:	4f 4f       	sbci	r20, 0xFF	; 255
    312e:	5f 4f       	sbci	r21, 0xFF	; 255

00003130 <__divmodsi4_exit>:
    3130:	08 95       	ret

00003132 <__negsi2>:
    3132:	90 95       	com	r25
    3134:	80 95       	com	r24
    3136:	70 95       	com	r23
    3138:	61 95       	neg	r22
    313a:	7f 4f       	sbci	r23, 0xFF	; 255
    313c:	8f 4f       	sbci	r24, 0xFF	; 255
    313e:	9f 4f       	sbci	r25, 0xFF	; 255
    3140:	08 95       	ret

00003142 <__tablejump2__>:
    3142:	ee 0f       	add	r30, r30
    3144:	ff 1f       	adc	r31, r31
    3146:	00 24       	eor	r0, r0
    3148:	00 1c       	adc	r0, r0
    314a:	0b be       	out	0x3b, r0	; 59
    314c:	07 90       	elpm	r0, Z+
    314e:	f6 91       	elpm	r31, Z
    3150:	e0 2d       	mov	r30, r0
    3152:	09 94       	ijmp

00003154 <__umulhisi3>:
    3154:	a2 9f       	mul	r26, r18
    3156:	b0 01       	movw	r22, r0
    3158:	b3 9f       	mul	r27, r19
    315a:	c0 01       	movw	r24, r0
    315c:	a3 9f       	mul	r26, r19
    315e:	70 0d       	add	r23, r0
    3160:	81 1d       	adc	r24, r1
    3162:	11 24       	eor	r1, r1
    3164:	91 1d       	adc	r25, r1
    3166:	b2 9f       	mul	r27, r18
    3168:	70 0d       	add	r23, r0
    316a:	81 1d       	adc	r24, r1
    316c:	11 24       	eor	r1, r1
    316e:	91 1d       	adc	r25, r1
    3170:	08 95       	ret

00003172 <__muluhisi3>:
    3172:	f0 df       	rcall	.-32     	; 0x3154 <__umulhisi3>
    3174:	a5 9f       	mul	r26, r21
    3176:	90 0d       	add	r25, r0
    3178:	b4 9f       	mul	r27, r20
    317a:	90 0d       	add	r25, r0
    317c:	a4 9f       	mul	r26, r20
    317e:	80 0d       	add	r24, r0
    3180:	91 1d       	adc	r25, r1
    3182:	11 24       	eor	r1, r1
    3184:	08 95       	ret

00003186 <strcmp>:
    3186:	fb 01       	movw	r30, r22
    3188:	dc 01       	movw	r26, r24
    318a:	8d 91       	ld	r24, X+
    318c:	01 90       	ld	r0, Z+
    318e:	80 19       	sub	r24, r0
    3190:	01 10       	cpse	r0, r1
    3192:	d9 f3       	breq	.-10     	; 0x318a <strcmp+0x4>
    3194:	99 0b       	sbc	r25, r25
    3196:	08 95       	ret

00003198 <strcpy>:
    3198:	fb 01       	movw	r30, r22
    319a:	dc 01       	movw	r26, r24
    319c:	01 90       	ld	r0, Z+
    319e:	0d 92       	st	X+, r0
    31a0:	00 20       	and	r0, r0
    31a2:	e1 f7       	brne	.-8      	; 0x319c <strcpy+0x4>
    31a4:	08 95       	ret

000031a6 <strncpy>:
    31a6:	fb 01       	movw	r30, r22
    31a8:	dc 01       	movw	r26, r24
    31aa:	41 50       	subi	r20, 0x01	; 1
    31ac:	50 40       	sbci	r21, 0x00	; 0
    31ae:	48 f0       	brcs	.+18     	; 0x31c2 <strncpy+0x1c>
    31b0:	01 90       	ld	r0, Z+
    31b2:	0d 92       	st	X+, r0
    31b4:	00 20       	and	r0, r0
    31b6:	c9 f7       	brne	.-14     	; 0x31aa <strncpy+0x4>
    31b8:	01 c0       	rjmp	.+2      	; 0x31bc <strncpy+0x16>
    31ba:	1d 92       	st	X+, r1
    31bc:	41 50       	subi	r20, 0x01	; 1
    31be:	50 40       	sbci	r21, 0x00	; 0
    31c0:	e0 f7       	brcc	.-8      	; 0x31ba <strncpy+0x14>
    31c2:	08 95       	ret

000031c4 <_exit>:
    31c4:	f8 94       	cli

000031c6 <__stop_program>:
    31c6:	ff cf       	rjmp	.-2      	; 0x31c6 <__stop_program>
