
Atmega128.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000011a  00800100  000048b8  0000494c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000048b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002cf  0080021a  0080021a  00004a66  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004a66  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00004a98  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000006e0  00000000  00000000  00004ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000086ec  00000000  00000000  000051b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001e8f  00000000  00000000  0000d8a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000047a8  00000000  00000000  0000f72f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000148c  00000000  00000000  00013ed8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000171f  00000000  00000000  00015364  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006f52  00000000  00000000  00016a83  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000630  00000000  00000000  0001d9d5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	a8 c0       	rjmp	.+336    	; 0x152 <__ctors_end>
       2:	00 00       	nop
       4:	c5 c0       	rjmp	.+394    	; 0x190 <__bad_interrupt>
       6:	00 00       	nop
       8:	c3 c0       	rjmp	.+390    	; 0x190 <__bad_interrupt>
       a:	00 00       	nop
       c:	c1 c0       	rjmp	.+386    	; 0x190 <__bad_interrupt>
       e:	00 00       	nop
      10:	bf c0       	rjmp	.+382    	; 0x190 <__bad_interrupt>
      12:	00 00       	nop
      14:	bd c0       	rjmp	.+378    	; 0x190 <__bad_interrupt>
      16:	00 00       	nop
      18:	bb c0       	rjmp	.+374    	; 0x190 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	b9 c0       	rjmp	.+370    	; 0x190 <__bad_interrupt>
      1e:	00 00       	nop
      20:	b7 c0       	rjmp	.+366    	; 0x190 <__bad_interrupt>
      22:	00 00       	nop
      24:	b5 c0       	rjmp	.+362    	; 0x190 <__bad_interrupt>
      26:	00 00       	nop
      28:	f4 c5       	rjmp	.+3048   	; 0xc12 <__vector_10>
      2a:	00 00       	nop
      2c:	c0 c5       	rjmp	.+2944   	; 0xbae <__vector_11>
      2e:	00 00       	nop
      30:	c8 c5       	rjmp	.+2960   	; 0xbc2 <__vector_12>
      32:	00 00       	nop
      34:	d0 c5       	rjmp	.+2976   	; 0xbd6 <__vector_13>
      36:	00 00       	nop
      38:	e2 c5       	rjmp	.+3012   	; 0xbfe <__vector_14>
      3a:	00 00       	nop
      3c:	0c 94 ca 1f 	jmp	0x3f94	; 0x3f94 <__vector_15>
      40:	ac c5       	rjmp	.+2904   	; 0xb9a <__vector_16>
      42:	00 00       	nop
      44:	a5 c0       	rjmp	.+330    	; 0x190 <__bad_interrupt>
      46:	00 00       	nop
      48:	7e c6       	rjmp	.+3324   	; 0xd46 <__vector_18>
      4a:	00 00       	nop
      4c:	b2 c6       	rjmp	.+3428   	; 0xdb2 <__vector_19>
      4e:	00 00       	nop
      50:	9f c0       	rjmp	.+318    	; 0x190 <__bad_interrupt>
      52:	00 00       	nop
      54:	1b c2       	rjmp	.+1078   	; 0x48c <__vector_21>
      56:	00 00       	nop
      58:	9b c0       	rjmp	.+310    	; 0x190 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	99 c0       	rjmp	.+306    	; 0x190 <__bad_interrupt>
      5e:	00 00       	nop
      60:	c4 c5       	rjmp	.+2952   	; 0xbea <__vector_24>
      62:	00 00       	nop
      64:	e0 c5       	rjmp	.+3008   	; 0xc26 <__vector_25>
      66:	00 00       	nop
      68:	e8 c5       	rjmp	.+3024   	; 0xc3a <__vector_26>
      6a:	00 00       	nop
      6c:	f0 c5       	rjmp	.+3040   	; 0xc4e <__vector_27>
      6e:	00 00       	nop
      70:	f8 c5       	rjmp	.+3056   	; 0xc62 <__vector_28>
      72:	00 00       	nop
      74:	00 c6       	rjmp	.+3072   	; 0xc76 <__vector_29>
      76:	00 00       	nop
      78:	f2 c7       	rjmp	.+4068   	; 0x105e <__vector_30>
      7a:	00 00       	nop
      7c:	0c 94 68 08 	jmp	0x10d0	; 0x10d0 <__vector_31>
      80:	87 c0       	rjmp	.+270    	; 0x190 <__bad_interrupt>
      82:	00 00       	nop
      84:	85 c0       	rjmp	.+266    	; 0x190 <__bad_interrupt>
      86:	00 00       	nop
      88:	83 c0       	rjmp	.+262    	; 0x190 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	ee 04       	cpc	r14, r14
      8e:	f2 04       	cpc	r15, r2
      90:	f6 04       	cpc	r15, r6
      92:	fa 04       	cpc	r15, r10
      94:	fe 04       	cpc	r15, r14
      96:	05 05       	cpc	r16, r5
      98:	0c 05       	cpc	r16, r12
      9a:	13 05       	cpc	r17, r3
      9c:	17 05       	cpc	r17, r7
      9e:	1e 05       	cpc	r17, r14
      a0:	25 05       	cpc	r18, r5
      a2:	2c 05       	cpc	r18, r12
      a4:	30 05       	cpc	r19, r0
      a6:	37 05       	cpc	r19, r7
      a8:	3e 05       	cpc	r19, r14
      aa:	5a 05       	cpc	r21, r10
      ac:	5e 05       	cpc	r21, r14
      ae:	62 05       	cpc	r22, r2
      b0:	66 05       	cpc	r22, r6
      b2:	6c 05       	cpc	r22, r12
      b4:	70 05       	cpc	r23, r0
      b6:	74 05       	cpc	r23, r4
      b8:	78 05       	cpc	r23, r8
      ba:	81 05       	cpc	r24, r1
      bc:	85 05       	cpc	r24, r5
      be:	89 05       	cpc	r24, r9
      c0:	92 05       	cpc	r25, r2
      c2:	f4 1b       	sub	r31, r20
      c4:	39 1d       	adc	r19, r9
      c6:	9a 1d       	adc	r25, r10
      c8:	fb 1d       	adc	r31, r11
      ca:	5c 1e       	adc	r5, r28
      cc:	be 1e       	adc	r11, r30
      ce:	21 1f       	adc	r18, r17
      d0:	07 63       	ori	r16, 0x37	; 55
      d2:	42 36       	cpi	r20, 0x62	; 98
      d4:	b7 9b       	sbis	0x16, 7	; 22
      d6:	d8 a7       	std	Y+40, r29	; 0x28
      d8:	1a 39       	cpi	r17, 0x9A	; 154
      da:	68 56       	subi	r22, 0x68	; 104
      dc:	18 ae       	std	Y+56, r1	; 0x38
      de:	ba ab       	std	Y+50, r27	; 0x32
      e0:	55 8c       	ldd	r5, Z+29	; 0x1d
      e2:	1d 3c       	cpi	r17, 0xCD	; 205
      e4:	b7 cc       	rjmp	.-1682   	; 0xfffffa54 <__eeprom_end+0xff7efa54>
      e6:	57 63       	ori	r21, 0x37	; 55
      e8:	bd 6d       	ori	r27, 0xDD	; 221
      ea:	ed fd       	.word	0xfded	; ????
      ec:	75 3e       	cpi	r23, 0xE5	; 229
      ee:	f6 17       	cp	r31, r22
      f0:	72 31       	cpi	r23, 0x12	; 18
      f2:	bf 00       	.word	0x00bf	; ????
      f4:	00 00       	nop
      f6:	80 3f       	cpi	r24, 0xF0	; 240
      f8:	08 00       	.word	0x0008	; ????
      fa:	00 00       	nop
      fc:	be 92       	st	-X, r11
      fe:	24 49       	sbci	r18, 0x94	; 148
     100:	12 3e       	cpi	r17, 0xE2	; 226
     102:	ab aa       	std	Y+51, r10	; 0x33
     104:	aa 2a       	or	r10, r26
     106:	be cd       	rjmp	.-1156   	; 0xfffffc84 <__eeprom_end+0xff7efc84>
     108:	cc cc       	rjmp	.-1640   	; 0xfffffaa2 <__eeprom_end+0xff7efaa2>
     10a:	4c 3e       	cpi	r20, 0xEC	; 236
     10c:	00 00       	nop
     10e:	00 80       	ld	r0, Z
     110:	be ab       	std	Y+54, r27	; 0x36
     112:	aa aa       	std	Y+50, r10	; 0x32
     114:	aa 3e       	cpi	r26, 0xEA	; 234
     116:	00 00       	nop
     118:	00 00       	nop
     11a:	bf 00       	.word	0x00bf	; ????
     11c:	00 00       	nop
     11e:	80 3f       	cpi	r24, 0xF0	; 240
     120:	00 00       	nop
     122:	00 00       	nop
     124:	00 08       	sbc	r0, r0
     126:	41 78       	andi	r20, 0x81	; 129
     128:	d3 bb       	out	0x13, r29	; 19
     12a:	43 87       	std	Z+11, r20	; 0x0b
     12c:	d1 13       	cpse	r29, r17
     12e:	3d 19       	sub	r19, r13
     130:	0e 3c       	cpi	r16, 0xCE	; 206
     132:	c3 bd       	out	0x23, r28	; 35
     134:	42 82       	std	Z+2, r4	; 0x02
     136:	ad 2b       	or	r26, r29
     138:	3e 68       	ori	r19, 0x8E	; 142
     13a:	ec 82       	std	Y+4, r14	; 0x04
     13c:	76 be       	out	0x36, r7	; 54
     13e:	d9 8f       	std	Y+25, r29	; 0x19
     140:	e1 a9       	ldd	r30, Z+49	; 0x31
     142:	3e 4c       	sbci	r19, 0xCE	; 206
     144:	80 ef       	ldi	r24, 0xF0	; 240
     146:	ff be       	out	0x3f, r15	; 63
     148:	01 c4       	rjmp	.+2050   	; 0x94c <TIMER_COUNTER0enable+0x22>
     14a:	ff 7f       	andi	r31, 0xFF	; 255
     14c:	3f 00       	.word	0x003f	; ????
     14e:	00 00       	nop
	...

00000152 <__ctors_end>:
     152:	11 24       	eor	r1, r1
     154:	1f be       	out	0x3f, r1	; 63
     156:	cf ef       	ldi	r28, 0xFF	; 255
     158:	d0 e1       	ldi	r29, 0x10	; 16
     15a:	de bf       	out	0x3e, r29	; 62
     15c:	cd bf       	out	0x3d, r28	; 61

0000015e <__do_copy_data>:
     15e:	12 e0       	ldi	r17, 0x02	; 2
     160:	a0 e0       	ldi	r26, 0x00	; 0
     162:	b1 e0       	ldi	r27, 0x01	; 1
     164:	e8 eb       	ldi	r30, 0xB8	; 184
     166:	f8 e4       	ldi	r31, 0x48	; 72
     168:	00 e0       	ldi	r16, 0x00	; 0
     16a:	0b bf       	out	0x3b, r16	; 59
     16c:	02 c0       	rjmp	.+4      	; 0x172 <__do_copy_data+0x14>
     16e:	07 90       	elpm	r0, Z+
     170:	0d 92       	st	X+, r0
     172:	aa 31       	cpi	r26, 0x1A	; 26
     174:	b1 07       	cpc	r27, r17
     176:	d9 f7       	brne	.-10     	; 0x16e <__do_copy_data+0x10>

00000178 <__do_clear_bss>:
     178:	24 e0       	ldi	r18, 0x04	; 4
     17a:	aa e1       	ldi	r26, 0x1A	; 26
     17c:	b2 e0       	ldi	r27, 0x02	; 2
     17e:	01 c0       	rjmp	.+2      	; 0x182 <.do_clear_bss_start>

00000180 <.do_clear_bss_loop>:
     180:	1d 92       	st	X+, r1

00000182 <.do_clear_bss_start>:
     182:	a9 3e       	cpi	r26, 0xE9	; 233
     184:	b2 07       	cpc	r27, r18
     186:	e1 f7       	brne	.-8      	; 0x180 <.do_clear_bss_loop>
     188:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <main>
     18c:	0c 94 5a 24 	jmp	0x48b4	; 0x48b4 <_exit>

00000190 <__bad_interrupt>:
     190:	37 cf       	rjmp	.-402    	; 0x0 <__vectors>

00000192 <HC595_shift_bit>:
	//
	return hc595;
}
void HC595_shift_bit(uint8_t bool)
{
	if (bool)
     192:	88 23       	and	r24, r24
     194:	89 f0       	breq	.+34     	; 0x1b8 <HC595_shift_bit+0x26>
		*hc595_PORT |= (1<<HC595_datapin); //Data bit HIGH
     196:	e0 91 4b 02 	lds	r30, 0x024B	; 0x80024b <hc595_PORT>
     19a:	f0 91 4c 02 	lds	r31, 0x024C	; 0x80024c <hc595_PORT+0x1>
     19e:	20 81       	ld	r18, Z
     1a0:	81 e0       	ldi	r24, 0x01	; 1
     1a2:	90 e0       	ldi	r25, 0x00	; 0
     1a4:	00 90 4d 02 	lds	r0, 0x024D	; 0x80024d <HC595_datapin>
     1a8:	02 c0       	rjmp	.+4      	; 0x1ae <HC595_shift_bit+0x1c>
     1aa:	88 0f       	add	r24, r24
     1ac:	99 1f       	adc	r25, r25
     1ae:	0a 94       	dec	r0
     1b0:	e2 f7       	brpl	.-8      	; 0x1aa <HC595_shift_bit+0x18>
     1b2:	82 2b       	or	r24, r18
     1b4:	80 83       	st	Z, r24
     1b6:	11 c0       	rjmp	.+34     	; 0x1da <HC595_shift_bit+0x48>
	else
		*hc595_PORT &= ~(1<<HC595_datapin); //Data bit LOW
     1b8:	e0 91 4b 02 	lds	r30, 0x024B	; 0x80024b <hc595_PORT>
     1bc:	f0 91 4c 02 	lds	r31, 0x024C	; 0x80024c <hc595_PORT+0x1>
     1c0:	20 81       	ld	r18, Z
     1c2:	81 e0       	ldi	r24, 0x01	; 1
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	00 90 4d 02 	lds	r0, 0x024D	; 0x80024d <HC595_datapin>
     1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <HC595_shift_bit+0x3e>
     1cc:	88 0f       	add	r24, r24
     1ce:	99 1f       	adc	r25, r25
     1d0:	0a 94       	dec	r0
     1d2:	e2 f7       	brpl	.-8      	; 0x1cc <HC595_shift_bit+0x3a>
     1d4:	80 95       	com	r24
     1d6:	82 23       	and	r24, r18
     1d8:	80 83       	st	Z, r24
	*hc595_PORT |= (1<<HC595_clkpin); // Shift bit
     1da:	e0 91 4b 02 	lds	r30, 0x024B	; 0x80024b <hc595_PORT>
     1de:	f0 91 4c 02 	lds	r31, 0x024C	; 0x80024c <hc595_PORT+0x1>
     1e2:	40 81       	ld	r20, Z
     1e4:	81 e0       	ldi	r24, 0x01	; 1
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	9c 01       	movw	r18, r24
     1ea:	00 90 4f 02 	lds	r0, 0x024F	; 0x80024f <HC595_clkpin>
     1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <HC595_shift_bit+0x62>
     1f0:	22 0f       	add	r18, r18
     1f2:	33 1f       	adc	r19, r19
     1f4:	0a 94       	dec	r0
     1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <HC595_shift_bit+0x5e>
     1f8:	24 2b       	or	r18, r20
     1fa:	20 83       	st	Z, r18
	*hc595_PORT &= ~(1<<HC595_clkpin); //Shift disable
     1fc:	e0 91 4b 02 	lds	r30, 0x024B	; 0x80024b <hc595_PORT>
     200:	f0 91 4c 02 	lds	r31, 0x024C	; 0x80024c <hc595_PORT+0x1>
     204:	20 81       	ld	r18, Z
     206:	00 90 4f 02 	lds	r0, 0x024F	; 0x80024f <HC595_clkpin>
     20a:	02 c0       	rjmp	.+4      	; 0x210 <HC595_shift_bit+0x7e>
     20c:	88 0f       	add	r24, r24
     20e:	99 1f       	adc	r25, r25
     210:	0a 94       	dec	r0
     212:	e2 f7       	brpl	.-8      	; 0x20c <HC595_shift_bit+0x7a>
     214:	80 95       	com	r24
     216:	82 23       	and	r24, r18
     218:	80 83       	st	Z, r24
     21a:	08 95       	ret

0000021c <HC595_shift_out>:
		HC595_shift_bit(byte & (1<<i));
	HC595_shift_out();
}
void HC595_shift_out(void)
{
	*hc595_PORT |= (1<<HC595_outpin); //Output enable
     21c:	e0 91 4b 02 	lds	r30, 0x024B	; 0x80024b <hc595_PORT>
     220:	f0 91 4c 02 	lds	r31, 0x024C	; 0x80024c <hc595_PORT+0x1>
     224:	40 81       	ld	r20, Z
     226:	81 e0       	ldi	r24, 0x01	; 1
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	9c 01       	movw	r18, r24
     22c:	00 90 4e 02 	lds	r0, 0x024E	; 0x80024e <HC595_outpin>
     230:	02 c0       	rjmp	.+4      	; 0x236 <HC595_shift_out+0x1a>
     232:	22 0f       	add	r18, r18
     234:	33 1f       	adc	r19, r19
     236:	0a 94       	dec	r0
     238:	e2 f7       	brpl	.-8      	; 0x232 <HC595_shift_out+0x16>
     23a:	24 2b       	or	r18, r20
     23c:	20 83       	st	Z, r18
	*hc595_PORT &= ~(1<<HC595_outpin); //Output disable
     23e:	e0 91 4b 02 	lds	r30, 0x024B	; 0x80024b <hc595_PORT>
     242:	f0 91 4c 02 	lds	r31, 0x024C	; 0x80024c <hc595_PORT+0x1>
     246:	20 81       	ld	r18, Z
     248:	00 90 4e 02 	lds	r0, 0x024E	; 0x80024e <HC595_outpin>
     24c:	02 c0       	rjmp	.+4      	; 0x252 <HC595_shift_out+0x36>
     24e:	88 0f       	add	r24, r24
     250:	99 1f       	adc	r25, r25
     252:	0a 94       	dec	r0
     254:	e2 f7       	brpl	.-8      	; 0x24e <HC595_shift_out+0x32>
     256:	80 95       	com	r24
     258:	82 23       	and	r24, r18
     25a:	80 83       	st	Z, r24
     25c:	08 95       	ret

0000025e <HC595_shift_byte>:
		*hc595_PORT &= ~(1<<HC595_datapin); //Data bit LOW
	*hc595_PORT |= (1<<HC595_clkpin); // Shift bit
	*hc595_PORT &= ~(1<<HC595_clkpin); //Shift disable
}
void HC595_shift_byte(uint8_t byte)
{
     25e:	ff 92       	push	r15
     260:	0f 93       	push	r16
     262:	1f 93       	push	r17
     264:	cf 93       	push	r28
     266:	df 93       	push	r29
     268:	f8 2e       	mov	r15, r24
     26a:	c0 e0       	ldi	r28, 0x00	; 0
     26c:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t i;
	for(i=0;i<8;i++)
		HC595_shift_bit(byte & (1<<i));
     26e:	01 e0       	ldi	r16, 0x01	; 1
     270:	10 e0       	ldi	r17, 0x00	; 0
     272:	c8 01       	movw	r24, r16
     274:	0c 2e       	mov	r0, r28
     276:	02 c0       	rjmp	.+4      	; 0x27c <HC595_shift_byte+0x1e>
     278:	88 0f       	add	r24, r24
     27a:	99 1f       	adc	r25, r25
     27c:	0a 94       	dec	r0
     27e:	e2 f7       	brpl	.-8      	; 0x278 <HC595_shift_byte+0x1a>
     280:	8f 21       	and	r24, r15
     282:	87 df       	rcall	.-242    	; 0x192 <HC595_shift_bit>
     284:	21 96       	adiw	r28, 0x01	; 1
	*hc595_PORT &= ~(1<<HC595_clkpin); //Shift disable
}
void HC595_shift_byte(uint8_t byte)
{
	uint8_t i;
	for(i=0;i<8;i++)
     286:	c8 30       	cpi	r28, 0x08	; 8
     288:	d1 05       	cpc	r29, r1
		HC595_shift_bit(byte & (1<<i));
	HC595_shift_out();
     28a:	99 f7       	brne	.-26     	; 0x272 <HC595_shift_byte+0x14>
     28c:	c7 df       	rcall	.-114    	; 0x21c <HC595_shift_out>
}
     28e:	df 91       	pop	r29
     290:	cf 91       	pop	r28
     292:	1f 91       	pop	r17
     294:	0f 91       	pop	r16
     296:	ff 90       	pop	r15
     298:	08 95       	ret

0000029a <HC595enable>:
void HC595_shift_bit(uint8_t bool);
void HC595_shift_byte(uint8_t byte);
void HC595_shift_out(void);
/***Procedure & Function***/
HC595 HC595enable(volatile uint8_t *ddr, volatile uint8_t *port, uint8_t datapin, uint8_t clkpin, uint8_t outpin)
{
     29a:	0f 93       	push	r16
     29c:	cf 93       	push	r28
     29e:	df 93       	push	r29
     2a0:	00 d0       	rcall	.+0      	; 0x2a2 <HC595enable+0x8>
     2a2:	00 d0       	rcall	.+0      	; 0x2a4 <HC595enable+0xa>
     2a4:	00 d0       	rcall	.+0      	; 0x2a6 <HC595enable+0xc>
     2a6:	cd b7       	in	r28, 0x3d	; 61
     2a8:	de b7       	in	r29, 0x3e	; 62
	//LOCAL VARIABLES
	uint8_t tSREG;
	tSREG=SREG;
     2aa:	5f b7       	in	r21, 0x3f	; 63
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
     2ac:	3f b7       	in	r19, 0x3f	; 63
     2ae:	3f 77       	andi	r19, 0x7F	; 127
     2b0:	3f bf       	out	0x3f, r19	; 63
	//ALLOCAÇÂO MEMORIA PARA Estrutura
	HC595 hc595;
	//import parametros
	hc595_DDR=ddr;
     2b2:	90 93 4a 02 	sts	0x024A, r25	; 0x80024a <hc595_DDR+0x1>
     2b6:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <hc595_DDR>
	hc595_PORT=port;
     2ba:	70 93 4c 02 	sts	0x024C, r23	; 0x80024c <hc595_PORT+0x1>
     2be:	60 93 4b 02 	sts	0x024B, r22	; 0x80024b <hc595_PORT>
	HC595_datapin=datapin;
     2c2:	40 93 4d 02 	sts	0x024D, r20	; 0x80024d <HC595_datapin>
	HC595_clkpin=clkpin;
     2c6:	20 93 4f 02 	sts	0x024F, r18	; 0x80024f <HC595_clkpin>
	HC595_outpin=outpin;
     2ca:	00 93 4e 02 	sts	0x024E, r16	; 0x80024e <HC595_outpin>
	//inic variables
    *hc595_DDR |= (1<<datapin) | (1<<clkpin) | (1<<outpin);
     2ce:	fc 01       	movw	r30, r24
     2d0:	30 81       	ld	r19, Z
     2d2:	61 e0       	ldi	r22, 0x01	; 1
     2d4:	70 e0       	ldi	r23, 0x00	; 0
     2d6:	db 01       	movw	r26, r22
     2d8:	02 c0       	rjmp	.+4      	; 0x2de <HC595enable+0x44>
     2da:	aa 0f       	add	r26, r26
     2dc:	bb 1f       	adc	r27, r27
     2de:	2a 95       	dec	r18
     2e0:	e2 f7       	brpl	.-8      	; 0x2da <HC595enable+0x40>
     2e2:	fb 01       	movw	r30, r22
     2e4:	02 c0       	rjmp	.+4      	; 0x2ea <HC595enable+0x50>
     2e6:	ee 0f       	add	r30, r30
     2e8:	ff 1f       	adc	r31, r31
     2ea:	0a 95       	dec	r16
     2ec:	e2 f7       	brpl	.-8      	; 0x2e6 <HC595enable+0x4c>
     2ee:	ea 2b       	or	r30, r26
     2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <HC595enable+0x5c>
     2f2:	66 0f       	add	r22, r22
     2f4:	77 1f       	adc	r23, r23
     2f6:	4a 95       	dec	r20
     2f8:	e2 f7       	brpl	.-8      	; 0x2f2 <HC595enable+0x58>
     2fa:	6e 2b       	or	r22, r30
     2fc:	23 2f       	mov	r18, r19
     2fe:	26 2b       	or	r18, r22
     300:	fc 01       	movw	r30, r24
     302:	20 83       	st	Z, r18
	*hc595_PORT &= ~((1<<datapin) | (1<<clkpin) | (1<<outpin));
     304:	e0 91 4b 02 	lds	r30, 0x024B	; 0x80024b <hc595_PORT>
     308:	f0 91 4c 02 	lds	r31, 0x024C	; 0x80024c <hc595_PORT+0x1>
     30c:	80 81       	ld	r24, Z
     30e:	60 95       	com	r22
     310:	68 23       	and	r22, r24
     312:	60 83       	st	Z, r22
	//Direccionar apontadores para PROTOTIPOS
	hc595.bit=HC595_shift_bit;
	hc595.byte=HC595_shift_byte;
	hc595.out=HC595_shift_out;
	SREG=tSREG;
     314:	5f bf       	out	0x3f, r21	; 63
	//
	return hc595;
     316:	29 ec       	ldi	r18, 0xC9	; 201
     318:	30 e0       	ldi	r19, 0x00	; 0
     31a:	3a 83       	std	Y+2, r19	; 0x02
     31c:	29 83       	std	Y+1, r18	; 0x01
     31e:	4f e2       	ldi	r20, 0x2F	; 47
     320:	51 e0       	ldi	r21, 0x01	; 1
     322:	5c 83       	std	Y+4, r21	; 0x04
     324:	4b 83       	std	Y+3, r20	; 0x03
     326:	6e e0       	ldi	r22, 0x0E	; 14
     328:	71 e0       	ldi	r23, 0x01	; 1
     32a:	7e 83       	std	Y+6, r23	; 0x06
     32c:	6d 83       	std	Y+5, r22	; 0x05
     32e:	3a 81       	ldd	r19, Y+2	; 0x02
     330:	5c 81       	ldd	r21, Y+4	; 0x04
     332:	7e 81       	ldd	r23, Y+6	; 0x06
}
     334:	80 e0       	ldi	r24, 0x00	; 0
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	26 96       	adiw	r28, 0x06	; 6
     33a:	0f b6       	in	r0, 0x3f	; 63
     33c:	f8 94       	cli
     33e:	de bf       	out	0x3e, r29	; 62
     340:	0f be       	out	0x3f, r0	; 63
     342:	cd bf       	out	0x3d, r28	; 61
     344:	df 91       	pop	r29
     346:	cf 91       	pop	r28
     348:	0f 91       	pop	r16
     34a:	08 95       	ret

0000034c <ANALOG_read>:
Returns selected Channel ADC_VALUE
***/
{
	uint8_t ADSC_FLAG;
	ADSC_FLAG=(1<<ADSC);
	if( !(ADC_CONTROL & ADSC_FLAG) ){
     34c:	36 9b       	sbis	0x06, 6	; 6
		//ADC_SELECT
		/***/
		ADC_CONTROL|=(1<<ADSC);
     34e:	36 9a       	sbi	0x06, 6	; 6
	}	
	return ADC_VALUE[selection];
     350:	fc 01       	movw	r30, r24
     352:	ee 0f       	add	r30, r30
     354:	ff 1f       	adc	r31, r31
     356:	ed 5c       	subi	r30, 0xCD	; 205
     358:	fd 4f       	sbci	r31, 0xFD	; 253
     35a:	80 81       	ld	r24, Z
     35c:	91 81       	ldd	r25, Z+1	; 0x01
}
     35e:	08 95       	ret

00000360 <ANALOGenable>:
ANALOG ANALOGenable( uint8_t Vreff, uint8_t Divfactor, int n_channel, ... )
/***
Interrupt running mode setup
setup, and list of channels to be probed
***/
{
     360:	0f 93       	push	r16
     362:	1f 93       	push	r17
     364:	cf 93       	push	r28
     366:	df 93       	push	r29
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	9f 81       	ldd	r25, Y+7	; 0x07
     36e:	68 85       	ldd	r22, Y+8	; 0x08
     370:	49 85       	ldd	r20, Y+9	; 0x09
     372:	5a 85       	ldd	r21, Y+10	; 0x0a
	/***LOCAL VARIABLES***/
	uint8_t tSREG;
	va_list list;
	int i;
	//inic variables
	tSREG=STATUS_REGISTER;
     374:	1f b7       	in	r17, 0x3f	; 63
	STATUS_REGISTER&=~(1<<GLOBAL_INTERRUPT_ENABLE);
     376:	8f b7       	in	r24, 0x3f	; 63
     378:	8f 77       	andi	r24, 0x7F	; 127
     37a:	8f bf       	out	0x3f, r24	; 63
	/***GLOBAL VARIABLES INICIALIZE***/
	ADC_N_CHANNEL=n_channel;
     37c:	50 93 22 02 	sts	0x0222, r21	; 0x800222 <ADC_N_CHANNEL+0x1>
     380:	40 93 21 02 	sts	0x0221, r20	; 0x800221 <ADC_N_CHANNEL>
	ADC_SELECTOR=0;
     384:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <ADC_SELECTOR+0x1>
     388:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <ADC_SELECTOR>
	adc_n_sample=0;
     38c:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <__data_end>
	//import parametros
	//inic parameters
	//Direccionar apontadores para PROTOTIPOS
	analog.read=ANALOG_read;
		/******/
		ADC_SELECT&=~(3<<REFS0);
     390:	87 b1       	in	r24, 0x07	; 7
     392:	8f 73       	andi	r24, 0x3F	; 63
     394:	87 b9       	out	0x07, r24	; 7
		switch( Vreff ){
     396:	91 30       	cpi	r25, 0x01	; 1
     398:	19 f0       	breq	.+6      	; 0x3a0 <ANALOGenable+0x40>
     39a:	93 30       	cpi	r25, 0x03	; 3
     39c:	21 f0       	breq	.+8      	; 0x3a6 <ANALOGenable+0x46>
     39e:	08 c0       	rjmp	.+16     	; 0x3b0 <ANALOGenable+0x50>
			case 0:
				analog.VREFF=0;
				break;
			case 1:
				ADC_SELECT|=(1<<REFS0);
     3a0:	3e 9a       	sbi	0x07, 6	; 7
				analog.VREFF=1;
     3a2:	01 e0       	ldi	r16, 0x01	; 1
				break;
     3a4:	06 c0       	rjmp	.+12     	; 0x3b2 <ANALOGenable+0x52>
			case 3:
				ADC_SELECT|=(3<<REFS0);
     3a6:	87 b1       	in	r24, 0x07	; 7
     3a8:	80 6c       	ori	r24, 0xC0	; 192
     3aa:	87 b9       	out	0x07, r24	; 7
				analog.VREFF=3;
     3ac:	03 e0       	ldi	r16, 0x03	; 3
				break;
     3ae:	01 c0       	rjmp	.+2      	; 0x3b2 <ANALOGenable+0x52>
	analog.read=ANALOG_read;
		/******/
		ADC_SELECT&=~(3<<REFS0);
		switch( Vreff ){
			case 0:
				analog.VREFF=0;
     3b0:	00 e0       	ldi	r16, 0x00	; 0
			default:
				analog.VREFF=0;
				break;
		}
		//
		ADC_SELECT&=~(1<<ADLAR);
     3b2:	3d 98       	cbi	0x07, 5	; 7
		/******/
		va_start(list, n_channel);
		for(i=0;i<n_channel;i++){
     3b4:	14 16       	cp	r1, r20
     3b6:	15 06       	cpc	r1, r21
     3b8:	8c f4       	brge	.+34     	; 0x3dc <ANALOGenable+0x7c>
     3ba:	de 01       	movw	r26, r28
     3bc:	1b 96       	adiw	r26, 0x0b	; 11
     3be:	80 e0       	ldi	r24, 0x00	; 0
     3c0:	90 e0       	ldi	r25, 0x00	; 0
			ADC_CHANNEL_GAIN[i] = va_arg(list, int);
     3c2:	2d 91       	ld	r18, X+
     3c4:	3d 91       	ld	r19, X+
     3c6:	fc 01       	movw	r30, r24
     3c8:	ee 0f       	add	r30, r30
     3ca:	ff 1f       	adc	r31, r31
     3cc:	ed 5d       	subi	r30, 0xDD	; 221
     3ce:	fd 4f       	sbci	r31, 0xFD	; 253
     3d0:	31 83       	std	Z+1, r19	; 0x01
     3d2:	20 83       	st	Z, r18
		}
		//
		ADC_SELECT&=~(1<<ADLAR);
		/******/
		va_start(list, n_channel);
		for(i=0;i<n_channel;i++){
     3d4:	01 96       	adiw	r24, 0x01	; 1
     3d6:	48 17       	cp	r20, r24
     3d8:	59 07       	cpc	r21, r25
     3da:	99 f7       	brne	.-26     	; 0x3c2 <ANALOGenable+0x62>
			ADC_CHANNEL_GAIN[i] = va_arg(list, int);
		}
		va_end(list);
		ADC_SELECT&=~MUX_MASK;
     3dc:	87 b1       	in	r24, 0x07	; 7
     3de:	80 7e       	andi	r24, 0xE0	; 224
     3e0:	87 b9       	out	0x07, r24	; 7
		ADC_SELECT|=(MUX_MASK & ADC_CHANNEL_GAIN[ADC_SELECTOR]);
     3e2:	e0 91 1f 02 	lds	r30, 0x021F	; 0x80021f <ADC_SELECTOR>
     3e6:	f0 91 20 02 	lds	r31, 0x0220	; 0x800220 <ADC_SELECTOR+0x1>
     3ea:	ee 0f       	add	r30, r30
     3ec:	ff 1f       	adc	r31, r31
     3ee:	ed 5d       	subi	r30, 0xDD	; 221
     3f0:	fd 4f       	sbci	r31, 0xFD	; 253
     3f2:	80 81       	ld	r24, Z
     3f4:	91 81       	ldd	r25, Z+1	; 0x01
     3f6:	27 b1       	in	r18, 0x07	; 7
     3f8:	8f 71       	andi	r24, 0x1F	; 31
     3fa:	99 27       	eor	r25, r25
     3fc:	82 2b       	or	r24, r18
     3fe:	87 b9       	out	0x07, r24	; 7
		/******/
		ADC_CONTROL|=(1<<ADEN);
     400:	37 9a       	sbi	0x06, 7	; 6
		ADC_CONTROL|=(1<<ADSC);
     402:	36 9a       	sbi	0x06, 6	; 6
		ADC_CONTROL&=~(1<<ADFR);
     404:	35 98       	cbi	0x06, 5	; 6
		ADC_CONTROL|=(1<<ADIE);
     406:	33 9a       	sbi	0x06, 3	; 6
		/******/
		ADC_CONTROL&=~(7<<ADPS0);
     408:	86 b1       	in	r24, 0x06	; 6
     40a:	88 7f       	andi	r24, 0xF8	; 248
     40c:	86 b9       	out	0x06, r24	; 6
		switch( Divfactor ){
     40e:	60 31       	cpi	r22, 0x10	; 16
     410:	d1 f0       	breq	.+52     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     412:	38 f4       	brcc	.+14     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     414:	64 30       	cpi	r22, 0x04	; 4
     416:	79 f0       	breq	.+30     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     418:	68 30       	cpi	r22, 0x08	; 8
     41a:	81 f0       	breq	.+32     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     41c:	62 30       	cpi	r22, 0x02	; 2
     41e:	29 f5       	brne	.+74     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
     420:	07 c0       	rjmp	.+14     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     422:	60 34       	cpi	r22, 0x40	; 64
     424:	c1 f0       	breq	.+48     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
     426:	60 38       	cpi	r22, 0x80	; 128
     428:	d9 f0       	breq	.+54     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     42a:	60 32       	cpi	r22, 0x20	; 32
     42c:	f1 f4       	brne	.+60     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
     42e:	0e c0       	rjmp	.+28     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
			case 2://1
				ADC_CONTROL|=(1<<ADPS0);
     430:	30 9a       	sbi	0x06, 0	; 6
				analog.DIVISION_FACTOR=2;
     432:	22 e0       	ldi	r18, 0x02	; 2
				break;
     434:	1e c0       	rjmp	.+60     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
			case 4://2
				ADC_CONTROL|=(1<<ADPS1);
     436:	31 9a       	sbi	0x06, 1	; 6
				analog.DIVISION_FACTOR=4;
     438:	24 e0       	ldi	r18, 0x04	; 4
				break;
     43a:	1b c0       	rjmp	.+54     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
			case 8://3
				ADC_CONTROL|=(3<<ADPS0);
     43c:	86 b1       	in	r24, 0x06	; 6
     43e:	83 60       	ori	r24, 0x03	; 3
     440:	86 b9       	out	0x06, r24	; 6
				analog.DIVISION_FACTOR=8;
     442:	28 e0       	ldi	r18, 0x08	; 8
				break;
     444:	16 c0       	rjmp	.+44     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
			case 16://4
				ADC_CONTROL|=(1<<ADPS2);
     446:	32 9a       	sbi	0x06, 2	; 6
				analog.DIVISION_FACTOR=16;
     448:	20 e1       	ldi	r18, 0x10	; 16
				break;
     44a:	13 c0       	rjmp	.+38     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
			case 32://5
				ADC_CONTROL|=(5<<ADPS0);
     44c:	86 b1       	in	r24, 0x06	; 6
     44e:	85 60       	ori	r24, 0x05	; 5
     450:	86 b9       	out	0x06, r24	; 6
				analog.DIVISION_FACTOR=32;
     452:	20 e2       	ldi	r18, 0x20	; 32
				break;
     454:	0e c0       	rjmp	.+28     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
			case 64://6
				ADC_CONTROL|=(6<<ADPS0);
     456:	86 b1       	in	r24, 0x06	; 6
     458:	86 60       	ori	r24, 0x06	; 6
     45a:	86 b9       	out	0x06, r24	; 6
				analog.DIVISION_FACTOR=64;
     45c:	20 e4       	ldi	r18, 0x40	; 64
				break;
     45e:	09 c0       	rjmp	.+18     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
			case 128://7
				ADC_CONTROL|=(7<<ADPS0);
     460:	86 b1       	in	r24, 0x06	; 6
     462:	87 60       	ori	r24, 0x07	; 7
     464:	86 b9       	out	0x06, r24	; 6
				analog.DIVISION_FACTOR=128;
     466:	20 e8       	ldi	r18, 0x80	; 128
				break;
     468:	04 c0       	rjmp	.+8      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
			default:
				ADC_CONTROL|=(7<<ADPS0);
     46a:	86 b1       	in	r24, 0x06	; 6
     46c:	87 60       	ori	r24, 0x07	; 7
     46e:	86 b9       	out	0x06, r24	; 6
				analog.DIVISION_FACTOR=128;
     470:	20 e8       	ldi	r18, 0x80	; 128
				break;
		}
	
	STATUS_REGISTER=tSREG;
     472:	1f bf       	out	0x3f, r17	; 63
	STATUS_REGISTER|=(1<<GLOBAL_INTERRUPT_ENABLE);
     474:	8f b7       	in	r24, 0x3f	; 63
     476:	80 68       	ori	r24, 0x80	; 128
     478:	8f bf       	out	0x3f, r24	; 63
	/******/
	return analog;
     47a:	60 2f       	mov	r22, r16
     47c:	72 2f       	mov	r23, r18
     47e:	86 ea       	ldi	r24, 0xA6	; 166
     480:	91 e0       	ldi	r25, 0x01	; 1
}
     482:	df 91       	pop	r29
     484:	cf 91       	pop	r28
     486:	1f 91       	pop	r17
     488:	0f 91       	pop	r16
     48a:	08 95       	ret

0000048c <__vector_21>:
ISR(ANALOG_INTERRUPT)
/*************************************************************************
Function: ANALOG interrupt
Purpose:  Read Analog Input
**************************************************************************/
{
     48c:	1f 92       	push	r1
     48e:	0f 92       	push	r0
     490:	0f b6       	in	r0, 0x3f	; 63
     492:	0f 92       	push	r0
     494:	11 24       	eor	r1, r1
     496:	0b b6       	in	r0, 0x3b	; 59
     498:	0f 92       	push	r0
     49a:	2f 93       	push	r18
     49c:	3f 93       	push	r19
     49e:	4f 93       	push	r20
     4a0:	5f 93       	push	r21
     4a2:	8f 93       	push	r24
     4a4:	9f 93       	push	r25
     4a6:	ef 93       	push	r30
     4a8:	ff 93       	push	r31
	uint8_t Sreg;
	Sreg=STATUS_REGISTER;
     4aa:	2f b7       	in	r18, 0x3f	; 63
	STATUS_REGISTER&=~(1<<GLOBAL_INTERRUPT_ENABLE);
     4ac:	8f b7       	in	r24, 0x3f	; 63
     4ae:	8f 77       	andi	r24, 0x7F	; 127
     4b0:	8f bf       	out	0x3f, r24	; 63
	adc_tmp=ADCL;
     4b2:	84 b1       	in	r24, 0x04	; 4
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <adc_tmp+0x1>
     4ba:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <adc_tmp>
	adc_tmp|=(ADCH<<8);
     4be:	35 b1       	in	r19, 0x05	; 5
     4c0:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <adc_tmp>
     4c4:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <adc_tmp+0x1>
     4c8:	93 2b       	or	r25, r19
     4ca:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <adc_tmp+0x1>
     4ce:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <adc_tmp>
	if(adc_n_sample < (1<<ADC_NUMBER_SAMPLE)){
     4d2:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <__data_end>
     4d6:	84 30       	cpi	r24, 0x04	; 4
     4d8:	a0 f4       	brcc	.+40     	; 0x502 <__vector_21+0x76>
		adc_n_sample++;
     4da:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <__data_end>
     4de:	8f 5f       	subi	r24, 0xFF	; 255
     4e0:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <__data_end>
		adc_sample+=adc_tmp;
     4e4:	40 91 1b 02 	lds	r20, 0x021B	; 0x80021b <adc_tmp>
     4e8:	50 91 1c 02 	lds	r21, 0x021C	; 0x80021c <adc_tmp+0x1>
     4ec:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <adc_sample>
     4f0:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <adc_sample+0x1>
     4f4:	84 0f       	add	r24, r20
     4f6:	95 1f       	adc	r25, r21
     4f8:	90 93 1e 02 	sts	0x021E, r25	; 0x80021e <adc_sample+0x1>
     4fc:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <adc_sample>
     500:	43 c0       	rjmp	.+134    	; 0x588 <__vector_21+0xfc>
	}else{
		ADC_VALUE[ADC_SELECTOR]=adc_sample>>ADC_NUMBER_SAMPLE;
     502:	e0 91 1f 02 	lds	r30, 0x021F	; 0x80021f <ADC_SELECTOR>
     506:	f0 91 20 02 	lds	r31, 0x0220	; 0x800220 <ADC_SELECTOR+0x1>
     50a:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <adc_sample>
     50e:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <adc_sample+0x1>
     512:	95 95       	asr	r25
     514:	87 95       	ror	r24
     516:	95 95       	asr	r25
     518:	87 95       	ror	r24
     51a:	ee 0f       	add	r30, r30
     51c:	ff 1f       	adc	r31, r31
     51e:	ed 5c       	subi	r30, 0xCD	; 205
     520:	fd 4f       	sbci	r31, 0xFD	; 253
     522:	91 83       	std	Z+1, r25	; 0x01
     524:	80 83       	st	Z, r24
		adc_n_sample=adc_sample=0;
     526:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <adc_sample+0x1>
     52a:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <adc_sample>
     52e:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <__data_end>
		/******/
		if(ADC_SELECTOR < ADC_N_CHANNEL)
     532:	40 91 1f 02 	lds	r20, 0x021F	; 0x80021f <ADC_SELECTOR>
     536:	50 91 20 02 	lds	r21, 0x0220	; 0x800220 <ADC_SELECTOR+0x1>
     53a:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <ADC_N_CHANNEL>
     53e:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <ADC_N_CHANNEL+0x1>
     542:	48 17       	cp	r20, r24
     544:	59 07       	cpc	r21, r25
     546:	54 f4       	brge	.+20     	; 0x55c <__vector_21+0xd0>
			ADC_SELECTOR++;
     548:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <ADC_SELECTOR>
     54c:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <ADC_SELECTOR+0x1>
     550:	01 96       	adiw	r24, 0x01	; 1
     552:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <ADC_SELECTOR+0x1>
     556:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <ADC_SELECTOR>
     55a:	04 c0       	rjmp	.+8      	; 0x564 <__vector_21+0xd8>
		else
			ADC_SELECTOR=0;
     55c:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <ADC_SELECTOR+0x1>
     560:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <ADC_SELECTOR>
		ADC_SELECT &= ~MUX_MASK;
     564:	87 b1       	in	r24, 0x07	; 7
     566:	80 7e       	andi	r24, 0xE0	; 224
     568:	87 b9       	out	0x07, r24	; 7
		ADC_SELECT |= (ADC_CHANNEL_GAIN[ADC_SELECTOR] & MUX_MASK);
     56a:	e0 91 1f 02 	lds	r30, 0x021F	; 0x80021f <ADC_SELECTOR>
     56e:	f0 91 20 02 	lds	r31, 0x0220	; 0x800220 <ADC_SELECTOR+0x1>
     572:	ee 0f       	add	r30, r30
     574:	ff 1f       	adc	r31, r31
     576:	ed 5d       	subi	r30, 0xDD	; 221
     578:	fd 4f       	sbci	r31, 0xFD	; 253
     57a:	80 81       	ld	r24, Z
     57c:	91 81       	ldd	r25, Z+1	; 0x01
     57e:	37 b1       	in	r19, 0x07	; 7
     580:	8f 71       	andi	r24, 0x1F	; 31
     582:	99 27       	eor	r25, r25
     584:	83 2b       	or	r24, r19
     586:	87 b9       	out	0x07, r24	; 7
	}
	STATUS_REGISTER=Sreg;
     588:	2f bf       	out	0x3f, r18	; 63
}
     58a:	ff 91       	pop	r31
     58c:	ef 91       	pop	r30
     58e:	9f 91       	pop	r25
     590:	8f 91       	pop	r24
     592:	5f 91       	pop	r21
     594:	4f 91       	pop	r20
     596:	3f 91       	pop	r19
     598:	2f 91       	pop	r18
     59a:	0f 90       	pop	r0
     59c:	0b be       	out	0x3b, r0	; 59
     59e:	0f 90       	pop	r0
     5a0:	0f be       	out	0x3f, r0	; 63
     5a2:	0f 90       	pop	r0
     5a4:	1f 90       	pop	r1
     5a6:	18 95       	reti

000005a8 <I2C_Start>:
	/***Vtable***/
}
/***void I2C_Start(void)***/
void I2C_Start(void)
{
  TWI_CONTROL_REGISTER = ((1<<TWINT) | (1<<TWSTA) | (1<<TWEN));
     5a8:	e4 e7       	ldi	r30, 0x74	; 116
     5aa:	f0 e0       	ldi	r31, 0x00	; 0
     5ac:	84 ea       	ldi	r24, 0xA4	; 164
     5ae:	80 83       	st	Z, r24
  for (ticks=Nticks; !(TWI_CONTROL_REGISTER & (1<<TWINT)) && ticks; ticks--);
     5b0:	8f ef       	ldi	r24, 0xFF	; 255
     5b2:	93 e0       	ldi	r25, 0x03	; 3
     5b4:	90 93 51 02 	sts	0x0251, r25	; 0x800251 <ticks+0x1>
     5b8:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <ticks>
     5bc:	80 81       	ld	r24, Z
     5be:	88 23       	and	r24, r24
     5c0:	5c f0       	brlt	.+22     	; 0x5d8 <I2C_Start+0x30>
     5c2:	8e ef       	ldi	r24, 0xFE	; 254
     5c4:	93 e0       	ldi	r25, 0x03	; 3
     5c6:	90 93 51 02 	sts	0x0251, r25	; 0x800251 <ticks+0x1>
     5ca:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <ticks>
     5ce:	20 81       	ld	r18, Z
     5d0:	22 23       	and	r18, r18
     5d2:	14 f0       	brlt	.+4      	; 0x5d8 <I2C_Start+0x30>
     5d4:	01 97       	sbiw	r24, 0x01	; 1
     5d6:	b8 f7       	brcc	.-18     	; 0x5c6 <I2C_Start+0x1e>
     5d8:	08 95       	ret

000005da <I2C_Write>:
   _delay_us(100); //wait for a short time
}
/***void I2C_Write(uint8_t var_i2cData_u8)***/
void I2C_Write(uint8_t var_i2cData_u8)
{
  TWI_DATA_REGISTER = var_i2cData_u8 ;
     5da:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
  TWI_CONTROL_REGISTER = ((1<< TWINT) | (1<<TWEN));
     5de:	e4 e7       	ldi	r30, 0x74	; 116
     5e0:	f0 e0       	ldi	r31, 0x00	; 0
     5e2:	84 e8       	ldi	r24, 0x84	; 132
     5e4:	80 83       	st	Z, r24
  for (ticks=Nticks; !(TWI_CONTROL_REGISTER & (1 <<TWINT)) && ticks; ticks--);
     5e6:	8f ef       	ldi	r24, 0xFF	; 255
     5e8:	93 e0       	ldi	r25, 0x03	; 3
     5ea:	90 93 51 02 	sts	0x0251, r25	; 0x800251 <ticks+0x1>
     5ee:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <ticks>
     5f2:	80 81       	ld	r24, Z
     5f4:	88 23       	and	r24, r24
     5f6:	5c f0       	brlt	.+22     	; 0x60e <I2C_Write+0x34>
     5f8:	8e ef       	ldi	r24, 0xFE	; 254
     5fa:	93 e0       	ldi	r25, 0x03	; 3
     5fc:	90 93 51 02 	sts	0x0251, r25	; 0x800251 <ticks+0x1>
     600:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <ticks>
     604:	20 81       	ld	r18, Z
     606:	22 23       	and	r18, r18
     608:	14 f0       	brlt	.+4      	; 0x60e <I2C_Write+0x34>
     60a:	01 97       	sbiw	r24, 0x01	; 1
     60c:	b8 f7       	brcc	.-18     	; 0x5fc <I2C_Write+0x22>
     60e:	08 95       	ret

00000610 <I2C_Read>:
}
/***uint8_t I2C_Read(uint8_t var_ackOption_u8)***/
uint8_t I2C_Read(uint8_t var_ackOption_u8)
{
 TWI_CONTROL_REGISTER = ((1<< TWINT) | (1<<TWEN) | (var_ackOption_u8<<TWEA));
     610:	20 e4       	ldi	r18, 0x40	; 64
     612:	82 9f       	mul	r24, r18
     614:	c0 01       	movw	r24, r0
     616:	11 24       	eor	r1, r1
     618:	84 68       	ori	r24, 0x84	; 132
     61a:	e4 e7       	ldi	r30, 0x74	; 116
     61c:	f0 e0       	ldi	r31, 0x00	; 0
     61e:	80 83       	st	Z, r24
   for (ticks=Nticks; !(TWI_CONTROL_REGISTER & (1 <<TWINT)) && ticks; ticks--);
     620:	8f ef       	ldi	r24, 0xFF	; 255
     622:	93 e0       	ldi	r25, 0x03	; 3
     624:	90 93 51 02 	sts	0x0251, r25	; 0x800251 <ticks+0x1>
     628:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <ticks>
     62c:	80 81       	ld	r24, Z
     62e:	88 23       	and	r24, r24
     630:	5c f0       	brlt	.+22     	; 0x648 <I2C_Read+0x38>
     632:	8e ef       	ldi	r24, 0xFE	; 254
     634:	93 e0       	ldi	r25, 0x03	; 3
     636:	90 93 51 02 	sts	0x0251, r25	; 0x800251 <ticks+0x1>
     63a:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <ticks>
     63e:	20 81       	ld	r18, Z
     640:	22 23       	and	r18, r18
     642:	14 f0       	brlt	.+4      	; 0x648 <I2C_Read+0x38>
     644:	01 97       	sbiw	r24, 0x01	; 1
     646:	b8 f7       	brcc	.-18     	; 0x636 <I2C_Read+0x26>
   return TWI_DATA_REGISTER;
     648:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
}
     64c:	08 95       	ret

0000064e <I2C_Status>:
/***uint8_t I2C_status(void)***/
uint8_t I2C_Status(void)
{
	return TWI_STATUS_REGISTER & TWI_STATUS_MASK;
     64e:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
}
     652:	88 7f       	andi	r24, 0xF8	; 248
     654:	08 95       	ret

00000656 <I2C_Stop>:
  for (ticks=Nticks; !(TWI_CONTROL_REGISTER & (1<<TWINT)) && ticks; ticks--);
}
/***void I2C_Stop(void)***/
void I2C_Stop(void)
{
  TWI_CONTROL_REGISTER = ((1<< TWINT) | (1<<TWEN) | (1<<TWSTO));
     656:	84 e9       	ldi	r24, 0x94	; 148
     658:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     65c:	8f e8       	ldi	r24, 0x8F	; 143
     65e:	91 e0       	ldi	r25, 0x01	; 1
     660:	01 97       	sbiw	r24, 0x01	; 1
     662:	f1 f7       	brne	.-4      	; 0x660 <I2C_Stop+0xa>
     664:	00 c0       	rjmp	.+0      	; 0x666 <I2C_Stop+0x10>
     666:	00 00       	nop
     668:	08 95       	ret

0000066a <I2C_Init>:
  return ic;
}
/***void I2C_Init(uint8_t prescaler)***/
void I2C_Init(uint8_t prescaler)
{
	I2C_DDR|=I2C_IO_MASK;
     66a:	91 b3       	in	r25, 0x11	; 17
     66c:	93 60       	ori	r25, 0x03	; 3
     66e:	91 bb       	out	0x11, r25	; 17
	I2C_PORT|=I2C_IO_MASK;
     670:	92 b3       	in	r25, 0x12	; 18
     672:	93 60       	ori	r25, 0x03	; 3
     674:	92 bb       	out	0x12, r25	; 18
	switch(prescaler){
     676:	84 30       	cpi	r24, 0x04	; 4
     678:	79 f0       	breq	.+30     	; 0x698 <I2C_Init+0x2e>
     67a:	18 f4       	brcc	.+6      	; 0x682 <I2C_Init+0x18>
     67c:	81 30       	cpi	r24, 0x01	; 1
     67e:	31 f0       	breq	.+12     	; 0x68c <I2C_Init+0x22>
     680:	1d c0       	rjmp	.+58     	; 0x6bc <I2C_Init+0x52>
     682:	80 31       	cpi	r24, 0x10	; 16
     684:	79 f0       	breq	.+30     	; 0x6a4 <I2C_Init+0x3a>
     686:	80 34       	cpi	r24, 0x40	; 64
     688:	99 f0       	breq	.+38     	; 0x6b0 <I2C_Init+0x46>
     68a:	18 c0       	rjmp	.+48     	; 0x6bc <I2C_Init+0x52>
		case 1:
		TWI_STATUS_REGISTER &= ~TWI_PRESCALER_MASK;
     68c:	e1 e7       	ldi	r30, 0x71	; 113
     68e:	f0 e0       	ldi	r31, 0x00	; 0
     690:	90 81       	ld	r25, Z
     692:	9c 7f       	andi	r25, 0xFC	; 252
     694:	90 83       	st	Z, r25
		break;
     696:	18 c0       	rjmp	.+48     	; 0x6c8 <I2C_Init+0x5e>
		case 4:
		TWI_STATUS_REGISTER |= (1<<TWPS0);
     698:	e1 e7       	ldi	r30, 0x71	; 113
     69a:	f0 e0       	ldi	r31, 0x00	; 0
     69c:	90 81       	ld	r25, Z
     69e:	91 60       	ori	r25, 0x01	; 1
     6a0:	90 83       	st	Z, r25
		break;
     6a2:	12 c0       	rjmp	.+36     	; 0x6c8 <I2C_Init+0x5e>
		case 16:
		TWI_STATUS_REGISTER |= (2<<TWPS0);
     6a4:	e1 e7       	ldi	r30, 0x71	; 113
     6a6:	f0 e0       	ldi	r31, 0x00	; 0
     6a8:	90 81       	ld	r25, Z
     6aa:	92 60       	ori	r25, 0x02	; 2
     6ac:	90 83       	st	Z, r25
		break;
     6ae:	0c c0       	rjmp	.+24     	; 0x6c8 <I2C_Init+0x5e>
		case 64:
		TWI_STATUS_REGISTER |= (3<<TWPS0);
     6b0:	e1 e7       	ldi	r30, 0x71	; 113
     6b2:	f0 e0       	ldi	r31, 0x00	; 0
     6b4:	90 81       	ld	r25, Z
     6b6:	93 60       	ori	r25, 0x03	; 3
     6b8:	90 83       	st	Z, r25
		break;
     6ba:	06 c0       	rjmp	.+12     	; 0x6c8 <I2C_Init+0x5e>
		default:
		prescaler=1;
		TWI_STATUS_REGISTER &= ~TWI_PRESCALER_MASK;
     6bc:	e1 e7       	ldi	r30, 0x71	; 113
     6be:	f0 e0       	ldi	r31, 0x00	; 0
     6c0:	80 81       	ld	r24, Z
     6c2:	8c 7f       	andi	r24, 0xFC	; 252
     6c4:	80 83       	st	Z, r24
		break;
		case 64:
		TWI_STATUS_REGISTER |= (3<<TWPS0);
		break;
		default:
		prescaler=1;
     6c6:	81 e0       	ldi	r24, 0x01	; 1
		TWI_STATUS_REGISTER &= ~TWI_PRESCALER_MASK;
		break;
	}
	TWI_BIT_RATE_REGISTER = ((F_CPU/I2C_SCL_CLOCK)-16)/(2*prescaler);
     6c8:	28 2f       	mov	r18, r24
     6ca:	30 e0       	ldi	r19, 0x00	; 0
     6cc:	22 0f       	add	r18, r18
     6ce:	33 1f       	adc	r19, r19
     6d0:	03 2e       	mov	r0, r19
     6d2:	00 0c       	add	r0, r0
     6d4:	44 0b       	sbc	r20, r20
     6d6:	55 0b       	sbc	r21, r21
     6d8:	60 e9       	ldi	r22, 0x90	; 144
     6da:	70 e0       	ldi	r23, 0x00	; 0
     6dc:	80 e0       	ldi	r24, 0x00	; 0
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	0e 94 db 23 	call	0x47b6	; 0x47b6 <__udivmodsi4>
     6e4:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
     6e8:	08 95       	ret

000006ea <I2Cenable>:
void I2C_Write(uint8_t var_i2cData_u8);
uint8_t I2C_Read(uint8_t var_ackOption_u8);
uint8_t I2C_Status(void);
/***I2C I2Cenable(uint8_t prescaler)***/
I2C I2Cenable(uint8_t prescaler)
{
     6ea:	1f 93       	push	r17
     6ec:	cf 93       	push	r28
     6ee:	df 93       	push	r29
     6f0:	ec 01       	movw	r28, r24
     6f2:	86 2f       	mov	r24, r22
  uint8_t tSREG;
  tSREG=SREG;
     6f4:	1f b7       	in	r17, 0x3f	; 63
  SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
     6f6:	9f b7       	in	r25, 0x3f	; 63
     6f8:	9f 77       	andi	r25, 0x7F	; 127
     6fa:	9f bf       	out	0x3f, r25	; 63
  I2C ic;
  I2C_Init(prescaler);
     6fc:	b6 df       	rcall	.-148    	; 0x66a <I2C_Init>
  ic.Stop=I2C_Stop;
  ic.Write=I2C_Write;
  ic.Read=I2C_Read;
  ic.Status=I2C_Status;
  /******/
  SREG=tSREG;
     6fe:	1f bf       	out	0x3f, r17	; 63
  return ic;
     700:	84 ed       	ldi	r24, 0xD4	; 212
     702:	92 e0       	ldi	r25, 0x02	; 2
     704:	99 83       	std	Y+1, r25	; 0x01
     706:	88 83       	st	Y, r24
     708:	8b e2       	ldi	r24, 0x2B	; 43
     70a:	93 e0       	ldi	r25, 0x03	; 3
     70c:	9b 83       	std	Y+3, r25	; 0x03
     70e:	8a 83       	std	Y+2, r24	; 0x02
     710:	8d ee       	ldi	r24, 0xED	; 237
     712:	92 e0       	ldi	r25, 0x02	; 2
     714:	9d 83       	std	Y+5, r25	; 0x05
     716:	8c 83       	std	Y+4, r24	; 0x04
     718:	88 e0       	ldi	r24, 0x08	; 8
     71a:	93 e0       	ldi	r25, 0x03	; 3
     71c:	9f 83       	std	Y+7, r25	; 0x07
     71e:	8e 83       	std	Y+6, r24	; 0x06
     720:	87 e2       	ldi	r24, 0x27	; 39
     722:	93 e0       	ldi	r25, 0x03	; 3
     724:	99 87       	std	Y+9, r25	; 0x09
     726:	88 87       	std	Y+8, r24	; 0x08
}
     728:	ce 01       	movw	r24, r28
     72a:	df 91       	pop	r29
     72c:	cf 91       	pop	r28
     72e:	1f 91       	pop	r17
     730:	08 95       	ret

00000732 <TIMER_COUNTER0_start>:
	timer3.compareB=TIMER_COUNTER3_compareB;
	timer3.compareC=TIMER_COUNTER3_compareC;
	timer3.start=TIMER_COUNTER3_start;
	timer3.stop=TIMER_COUNTER3_stop;
	return timer3;
}
     732:	20 91 55 02 	lds	r18, 0x0255	; 0x800255 <timer0_state>
     736:	21 11       	cpse	r18, r1
     738:	40 c0       	rjmp	.+128    	; 0x7ba <TIMER_COUNTER0_start+0x88>
     73a:	2f ef       	ldi	r18, 0xFF	; 255
     73c:	21 bf       	out	0x31, r18	; 49
     73e:	23 b7       	in	r18, 0x33	; 51
     740:	28 7f       	andi	r18, 0xF8	; 248
     742:	23 bf       	out	0x33, r18	; 51
     744:	80 34       	cpi	r24, 0x40	; 64
     746:	91 05       	cpc	r25, r1
     748:	11 f1       	breq	.+68     	; 0x78e <TIMER_COUNTER0_start+0x5c>
     74a:	48 f4       	brcc	.+18     	; 0x75e <TIMER_COUNTER0_start+0x2c>
     74c:	88 30       	cpi	r24, 0x08	; 8
     74e:	91 05       	cpc	r25, r1
     750:	b1 f0       	breq	.+44     	; 0x77e <TIMER_COUNTER0_start+0x4c>
     752:	80 32       	cpi	r24, 0x20	; 32
     754:	91 05       	cpc	r25, r1
     756:	b9 f0       	breq	.+46     	; 0x786 <TIMER_COUNTER0_start+0x54>
     758:	01 97       	sbiw	r24, 0x01	; 1
     75a:	49 f5       	brne	.+82     	; 0x7ae <TIMER_COUNTER0_start+0x7c>
     75c:	0c c0       	rjmp	.+24     	; 0x776 <TIMER_COUNTER0_start+0x44>
     75e:	81 15       	cp	r24, r1
     760:	21 e0       	ldi	r18, 0x01	; 1
     762:	92 07       	cpc	r25, r18
     764:	e1 f0       	breq	.+56     	; 0x79e <TIMER_COUNTER0_start+0x6c>
     766:	81 15       	cp	r24, r1
     768:	24 e0       	ldi	r18, 0x04	; 4
     76a:	92 07       	cpc	r25, r18
     76c:	e1 f0       	breq	.+56     	; 0x7a6 <TIMER_COUNTER0_start+0x74>
     76e:	80 38       	cpi	r24, 0x80	; 128
     770:	91 05       	cpc	r25, r1
     772:	e9 f4       	brne	.+58     	; 0x7ae <TIMER_COUNTER0_start+0x7c>
     774:	10 c0       	rjmp	.+32     	; 0x796 <TIMER_COUNTER0_start+0x64>
     776:	83 b7       	in	r24, 0x33	; 51
     778:	81 60       	ori	r24, 0x01	; 1
     77a:	83 bf       	out	0x33, r24	; 51
     77c:	1b c0       	rjmp	.+54     	; 0x7b4 <TIMER_COUNTER0_start+0x82>
     77e:	83 b7       	in	r24, 0x33	; 51
     780:	82 60       	ori	r24, 0x02	; 2
     782:	83 bf       	out	0x33, r24	; 51
     784:	17 c0       	rjmp	.+46     	; 0x7b4 <TIMER_COUNTER0_start+0x82>
     786:	83 b7       	in	r24, 0x33	; 51
     788:	83 60       	ori	r24, 0x03	; 3
     78a:	83 bf       	out	0x33, r24	; 51
     78c:	13 c0       	rjmp	.+38     	; 0x7b4 <TIMER_COUNTER0_start+0x82>
     78e:	83 b7       	in	r24, 0x33	; 51
     790:	84 60       	ori	r24, 0x04	; 4
     792:	83 bf       	out	0x33, r24	; 51
     794:	0f c0       	rjmp	.+30     	; 0x7b4 <TIMER_COUNTER0_start+0x82>
     796:	83 b7       	in	r24, 0x33	; 51
     798:	85 60       	ori	r24, 0x05	; 5
     79a:	83 bf       	out	0x33, r24	; 51
     79c:	0b c0       	rjmp	.+22     	; 0x7b4 <TIMER_COUNTER0_start+0x82>
     79e:	83 b7       	in	r24, 0x33	; 51
     7a0:	86 60       	ori	r24, 0x06	; 6
     7a2:	83 bf       	out	0x33, r24	; 51
     7a4:	07 c0       	rjmp	.+14     	; 0x7b4 <TIMER_COUNTER0_start+0x82>
     7a6:	83 b7       	in	r24, 0x33	; 51
     7a8:	87 60       	ori	r24, 0x07	; 7
     7aa:	83 bf       	out	0x33, r24	; 51
     7ac:	03 c0       	rjmp	.+6      	; 0x7b4 <TIMER_COUNTER0_start+0x82>
     7ae:	83 b7       	in	r24, 0x33	; 51
     7b0:	87 60       	ori	r24, 0x07	; 7
     7b2:	83 bf       	out	0x33, r24	; 51
     7b4:	81 e0       	ldi	r24, 0x01	; 1
     7b6:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <timer0_state>
     7ba:	08 95       	ret

000007bc <TIMER_COUNTER0_compoutmode>:
     7bc:	93 b7       	in	r25, 0x33	; 51
     7be:	9f 7c       	andi	r25, 0xCF	; 207
     7c0:	93 bf       	out	0x33, r25	; 51
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	41 f0       	breq	.+16     	; 0x7d6 <TIMER_COUNTER0_compoutmode+0x1a>
     7c6:	83 30       	cpi	r24, 0x03	; 3
     7c8:	51 f0       	breq	.+20     	; 0x7de <TIMER_COUNTER0_compoutmode+0x22>
     7ca:	81 30       	cpi	r24, 0x01	; 1
     7cc:	59 f4       	brne	.+22     	; 0x7e4 <TIMER_COUNTER0_compoutmode+0x28>
     7ce:	83 b7       	in	r24, 0x33	; 51
     7d0:	80 61       	ori	r24, 0x10	; 16
     7d2:	83 bf       	out	0x33, r24	; 51
     7d4:	08 95       	ret
     7d6:	83 b7       	in	r24, 0x33	; 51
     7d8:	80 62       	ori	r24, 0x20	; 32
     7da:	83 bf       	out	0x33, r24	; 51
     7dc:	08 95       	ret
     7de:	83 b7       	in	r24, 0x33	; 51
     7e0:	80 63       	ori	r24, 0x30	; 48
     7e2:	83 bf       	out	0x33, r24	; 51
     7e4:	08 95       	ret

000007e6 <TIMER_COUNTER0_compare>:
     7e6:	81 bf       	out	0x31, r24	; 49
     7e8:	08 95       	ret

000007ea <TIMER_COUNTER0_stop>:
     7ea:	83 b7       	in	r24, 0x33	; 51
     7ec:	88 7f       	andi	r24, 0xF8	; 248
     7ee:	83 bf       	out	0x33, r24	; 51
     7f0:	12 be       	out	0x32, r1	; 50
     7f2:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <timer0_state>
     7f6:	08 95       	ret

000007f8 <TIMER_COUNTER1_start>:
     7f8:	20 91 52 02 	lds	r18, 0x0252	; 0x800252 <timer1_state>
     7fc:	21 11       	cpse	r18, r1
     7fe:	42 c0       	rjmp	.+132    	; 0x884 <TIMER_COUNTER1_start+0x8c>
     800:	2f ef       	ldi	r18, 0xFF	; 255
     802:	3f ef       	ldi	r19, 0xFF	; 255
     804:	3b bd       	out	0x2b, r19	; 43
     806:	2a bd       	out	0x2a, r18	; 42
     808:	2e b5       	in	r18, 0x2e	; 46
     80a:	28 7f       	andi	r18, 0xF8	; 248
     80c:	2e bd       	out	0x2e, r18	; 46
     80e:	88 30       	cpi	r24, 0x08	; 8
     810:	91 05       	cpc	r25, r1
     812:	d1 f0       	breq	.+52     	; 0x848 <TIMER_COUNTER1_start+0x50>
     814:	48 f4       	brcc	.+18     	; 0x828 <TIMER_COUNTER1_start+0x30>
     816:	83 30       	cpi	r24, 0x03	; 3
     818:	91 05       	cpc	r25, r1
     81a:	31 f1       	breq	.+76     	; 0x868 <TIMER_COUNTER1_start+0x70>
     81c:	85 30       	cpi	r24, 0x05	; 5
     81e:	91 05       	cpc	r25, r1
     820:	39 f1       	breq	.+78     	; 0x870 <TIMER_COUNTER1_start+0x78>
     822:	01 97       	sbiw	r24, 0x01	; 1
     824:	49 f5       	brne	.+82     	; 0x878 <TIMER_COUNTER1_start+0x80>
     826:	0c c0       	rjmp	.+24     	; 0x840 <TIMER_COUNTER1_start+0x48>
     828:	81 15       	cp	r24, r1
     82a:	21 e0       	ldi	r18, 0x01	; 1
     82c:	92 07       	cpc	r25, r18
     82e:	a1 f0       	breq	.+40     	; 0x858 <TIMER_COUNTER1_start+0x60>
     830:	81 15       	cp	r24, r1
     832:	24 e0       	ldi	r18, 0x04	; 4
     834:	92 07       	cpc	r25, r18
     836:	a1 f0       	breq	.+40     	; 0x860 <TIMER_COUNTER1_start+0x68>
     838:	80 34       	cpi	r24, 0x40	; 64
     83a:	91 05       	cpc	r25, r1
     83c:	e9 f4       	brne	.+58     	; 0x878 <TIMER_COUNTER1_start+0x80>
     83e:	08 c0       	rjmp	.+16     	; 0x850 <TIMER_COUNTER1_start+0x58>
     840:	8e b5       	in	r24, 0x2e	; 46
     842:	81 60       	ori	r24, 0x01	; 1
     844:	8e bd       	out	0x2e, r24	; 46
     846:	1b c0       	rjmp	.+54     	; 0x87e <TIMER_COUNTER1_start+0x86>
     848:	8e b5       	in	r24, 0x2e	; 46
     84a:	82 60       	ori	r24, 0x02	; 2
     84c:	8e bd       	out	0x2e, r24	; 46
     84e:	17 c0       	rjmp	.+46     	; 0x87e <TIMER_COUNTER1_start+0x86>
     850:	8e b5       	in	r24, 0x2e	; 46
     852:	83 60       	ori	r24, 0x03	; 3
     854:	8e bd       	out	0x2e, r24	; 46
     856:	13 c0       	rjmp	.+38     	; 0x87e <TIMER_COUNTER1_start+0x86>
     858:	8e b5       	in	r24, 0x2e	; 46
     85a:	84 60       	ori	r24, 0x04	; 4
     85c:	8e bd       	out	0x2e, r24	; 46
     85e:	0f c0       	rjmp	.+30     	; 0x87e <TIMER_COUNTER1_start+0x86>
     860:	8e b5       	in	r24, 0x2e	; 46
     862:	85 60       	ori	r24, 0x05	; 5
     864:	8e bd       	out	0x2e, r24	; 46
     866:	0b c0       	rjmp	.+22     	; 0x87e <TIMER_COUNTER1_start+0x86>
     868:	8e b5       	in	r24, 0x2e	; 46
     86a:	86 60       	ori	r24, 0x06	; 6
     86c:	8e bd       	out	0x2e, r24	; 46
     86e:	07 c0       	rjmp	.+14     	; 0x87e <TIMER_COUNTER1_start+0x86>
     870:	8e b5       	in	r24, 0x2e	; 46
     872:	87 60       	ori	r24, 0x07	; 7
     874:	8e bd       	out	0x2e, r24	; 46
     876:	03 c0       	rjmp	.+6      	; 0x87e <TIMER_COUNTER1_start+0x86>
     878:	8e b5       	in	r24, 0x2e	; 46
     87a:	85 60       	ori	r24, 0x05	; 5
     87c:	8e bd       	out	0x2e, r24	; 46
     87e:	81 e0       	ldi	r24, 0x01	; 1
     880:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <timer1_state>
     884:	08 95       	ret

00000886 <TIMER_COUNTER1_compoutmodeA>:
     886:	9f b5       	in	r25, 0x2f	; 47
     888:	9f 73       	andi	r25, 0x3F	; 63
     88a:	9f bd       	out	0x2f, r25	; 47
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	41 f0       	breq	.+16     	; 0x8a0 <TIMER_COUNTER1_compoutmodeA+0x1a>
     890:	83 30       	cpi	r24, 0x03	; 3
     892:	51 f0       	breq	.+20     	; 0x8a8 <TIMER_COUNTER1_compoutmodeA+0x22>
     894:	81 30       	cpi	r24, 0x01	; 1
     896:	59 f4       	brne	.+22     	; 0x8ae <TIMER_COUNTER1_compoutmodeA+0x28>
     898:	8f b5       	in	r24, 0x2f	; 47
     89a:	80 64       	ori	r24, 0x40	; 64
     89c:	8f bd       	out	0x2f, r24	; 47
     89e:	08 95       	ret
     8a0:	8f b5       	in	r24, 0x2f	; 47
     8a2:	80 68       	ori	r24, 0x80	; 128
     8a4:	8f bd       	out	0x2f, r24	; 47
     8a6:	08 95       	ret
     8a8:	8f b5       	in	r24, 0x2f	; 47
     8aa:	80 6c       	ori	r24, 0xC0	; 192
     8ac:	8f bd       	out	0x2f, r24	; 47
     8ae:	08 95       	ret

000008b0 <TIMER_COUNTER1_compoutmodeB>:
     8b0:	9f b5       	in	r25, 0x2f	; 47
     8b2:	9f 7c       	andi	r25, 0xCF	; 207
     8b4:	9f bd       	out	0x2f, r25	; 47
     8b6:	82 30       	cpi	r24, 0x02	; 2
     8b8:	41 f0       	breq	.+16     	; 0x8ca <TIMER_COUNTER1_compoutmodeB+0x1a>
     8ba:	83 30       	cpi	r24, 0x03	; 3
     8bc:	51 f0       	breq	.+20     	; 0x8d2 <TIMER_COUNTER1_compoutmodeB+0x22>
     8be:	81 30       	cpi	r24, 0x01	; 1
     8c0:	59 f4       	brne	.+22     	; 0x8d8 <TIMER_COUNTER1_compoutmodeB+0x28>
     8c2:	8f b5       	in	r24, 0x2f	; 47
     8c4:	80 61       	ori	r24, 0x10	; 16
     8c6:	8f bd       	out	0x2f, r24	; 47
     8c8:	08 95       	ret
     8ca:	8f b5       	in	r24, 0x2f	; 47
     8cc:	80 62       	ori	r24, 0x20	; 32
     8ce:	8f bd       	out	0x2f, r24	; 47
     8d0:	08 95       	ret
     8d2:	8f b5       	in	r24, 0x2f	; 47
     8d4:	80 63       	ori	r24, 0x30	; 48
     8d6:	8f bd       	out	0x2f, r24	; 47
     8d8:	08 95       	ret

000008da <TIMER_COUNTER1_compoutmodeC>:
     8da:	9f b5       	in	r25, 0x2f	; 47
     8dc:	93 7f       	andi	r25, 0xF3	; 243
     8de:	9f bd       	out	0x2f, r25	; 47
     8e0:	82 30       	cpi	r24, 0x02	; 2
     8e2:	41 f0       	breq	.+16     	; 0x8f4 <TIMER_COUNTER1_compoutmodeC+0x1a>
     8e4:	83 30       	cpi	r24, 0x03	; 3
     8e6:	51 f0       	breq	.+20     	; 0x8fc <TIMER_COUNTER1_compoutmodeC+0x22>
     8e8:	81 30       	cpi	r24, 0x01	; 1
     8ea:	59 f4       	brne	.+22     	; 0x902 <TIMER_COUNTER1_compoutmodeC+0x28>
     8ec:	8f b5       	in	r24, 0x2f	; 47
     8ee:	84 60       	ori	r24, 0x04	; 4
     8f0:	8f bd       	out	0x2f, r24	; 47
     8f2:	08 95       	ret
     8f4:	8f b5       	in	r24, 0x2f	; 47
     8f6:	88 60       	ori	r24, 0x08	; 8
     8f8:	8f bd       	out	0x2f, r24	; 47
     8fa:	08 95       	ret
     8fc:	8f b5       	in	r24, 0x2f	; 47
     8fe:	8c 60       	ori	r24, 0x0C	; 12
     900:	8f bd       	out	0x2f, r24	; 47
     902:	08 95       	ret

00000904 <TIMER_COUNTER1_compareA>:
     904:	9b bd       	out	0x2b, r25	; 43
     906:	8a bd       	out	0x2a, r24	; 42
     908:	08 95       	ret

0000090a <TIMER_COUNTER1_compareB>:
     90a:	99 bd       	out	0x29, r25	; 41
     90c:	88 bd       	out	0x28, r24	; 40
     90e:	08 95       	ret

00000910 <TIMER_COUNTER1_compareC>:
     910:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     914:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     918:	08 95       	ret

0000091a <TIMER_COUNTER1_stop>:
     91a:	8e b5       	in	r24, 0x2e	; 46
     91c:	88 7f       	andi	r24, 0xF8	; 248
     91e:	8e bd       	out	0x2e, r24	; 46
     920:	1d bc       	out	0x2d, r1	; 45
     922:	1c bc       	out	0x2c, r1	; 44
     924:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <timer1_state>
     928:	08 95       	ret

0000092a <TIMER_COUNTER0enable>:
     92a:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <timer0_state>
     92e:	23 b7       	in	r18, 0x33	; 51
     930:	27 7b       	andi	r18, 0xB7	; 183
     932:	23 bf       	out	0x33, r18	; 51
     934:	62 30       	cpi	r22, 0x02	; 2
     936:	41 f0       	breq	.+16     	; 0x948 <TIMER_COUNTER0enable+0x1e>
     938:	63 30       	cpi	r22, 0x03	; 3
     93a:	51 f0       	breq	.+20     	; 0x950 <TIMER_COUNTER0enable+0x26>
     93c:	61 30       	cpi	r22, 0x01	; 1
     93e:	59 f4       	brne	.+22     	; 0x956 <TIMER_COUNTER0enable+0x2c>
     940:	23 b7       	in	r18, 0x33	; 51
     942:	20 64       	ori	r18, 0x40	; 64
     944:	23 bf       	out	0x33, r18	; 51
     946:	07 c0       	rjmp	.+14     	; 0x956 <TIMER_COUNTER0enable+0x2c>
     948:	23 b7       	in	r18, 0x33	; 51
     94a:	28 60       	ori	r18, 0x08	; 8
     94c:	23 bf       	out	0x33, r18	; 51
     94e:	03 c0       	rjmp	.+6      	; 0x956 <TIMER_COUNTER0enable+0x2c>
     950:	23 b7       	in	r18, 0x33	; 51
     952:	28 64       	ori	r18, 0x48	; 72
     954:	23 bf       	out	0x33, r18	; 51
     956:	27 b7       	in	r18, 0x37	; 55
     958:	2e 7f       	andi	r18, 0xFE	; 254
     95a:	27 bf       	out	0x37, r18	; 55
     95c:	27 b7       	in	r18, 0x37	; 55
     95e:	2d 7f       	andi	r18, 0xFD	; 253
     960:	27 bf       	out	0x37, r18	; 55
     962:	42 30       	cpi	r20, 0x02	; 2
     964:	41 f0       	breq	.+16     	; 0x976 <TIMER_COUNTER0enable+0x4c>
     966:	43 30       	cpi	r20, 0x03	; 3
     968:	51 f0       	breq	.+20     	; 0x97e <TIMER_COUNTER0enable+0x54>
     96a:	41 30       	cpi	r20, 0x01	; 1
     96c:	71 f4       	brne	.+28     	; 0x98a <TIMER_COUNTER0enable+0x60>
     96e:	27 b7       	in	r18, 0x37	; 55
     970:	21 60       	ori	r18, 0x01	; 1
     972:	27 bf       	out	0x37, r18	; 55
     974:	0a c0       	rjmp	.+20     	; 0x98a <TIMER_COUNTER0enable+0x60>
     976:	27 b7       	in	r18, 0x37	; 55
     978:	22 60       	ori	r18, 0x02	; 2
     97a:	27 bf       	out	0x37, r18	; 55
     97c:	06 c0       	rjmp	.+12     	; 0x98a <TIMER_COUNTER0enable+0x60>
     97e:	27 b7       	in	r18, 0x37	; 55
     980:	21 60       	ori	r18, 0x01	; 1
     982:	27 bf       	out	0x37, r18	; 55
     984:	27 b7       	in	r18, 0x37	; 55
     986:	22 60       	ori	r18, 0x02	; 2
     988:	27 bf       	out	0x37, r18	; 55
     98a:	2e ed       	ldi	r18, 0xDE	; 222
     98c:	33 e0       	ldi	r19, 0x03	; 3
     98e:	fc 01       	movw	r30, r24
     990:	31 83       	std	Z+1, r19	; 0x01
     992:	20 83       	st	Z, r18
     994:	23 ef       	ldi	r18, 0xF3	; 243
     996:	33 e0       	ldi	r19, 0x03	; 3
     998:	37 83       	std	Z+7, r19	; 0x07
     99a:	26 83       	std	Z+6, r18	; 0x06
     99c:	29 e9       	ldi	r18, 0x99	; 153
     99e:	33 e0       	ldi	r19, 0x03	; 3
     9a0:	35 87       	std	Z+13, r19	; 0x0d
     9a2:	24 87       	std	Z+12, r18	; 0x0c
     9a4:	25 ef       	ldi	r18, 0xF5	; 245
     9a6:	33 e0       	ldi	r19, 0x03	; 3
     9a8:	37 87       	std	Z+15, r19	; 0x0f
     9aa:	26 87       	std	Z+14, r18	; 0x0e
     9ac:	08 95       	ret

000009ae <TIMER_COUNTER1enable>:
     9ae:	0f 93       	push	r16
     9b0:	1f 93       	push	r17
     9b2:	dc 01       	movw	r26, r24
     9b4:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <timer1_state>
     9b8:	8f b5       	in	r24, 0x2f	; 47
     9ba:	8c 7f       	andi	r24, 0xFC	; 252
     9bc:	8f bd       	out	0x2f, r24	; 47
     9be:	8e b5       	in	r24, 0x2e	; 46
     9c0:	87 7e       	andi	r24, 0xE7	; 231
     9c2:	8e bd       	out	0x2e, r24	; 46
     9c4:	06 2f       	mov	r16, r22
     9c6:	10 e0       	ldi	r17, 0x00	; 0
     9c8:	f8 01       	movw	r30, r16
     9ca:	31 97       	sbiw	r30, 0x01	; 1
     9cc:	ef 30       	cpi	r30, 0x0F	; 15
     9ce:	f1 05       	cpc	r31, r1
     9d0:	08 f0       	brcs	.+2      	; 0x9d4 <TIMER_COUNTER1enable+0x26>
     9d2:	5a c0       	rjmp	.+180    	; 0xa88 <TIMER_COUNTER1enable+0xda>
     9d4:	ea 5b       	subi	r30, 0xBA	; 186
     9d6:	ff 4f       	sbci	r31, 0xFF	; 255
     9d8:	0c 94 19 24 	jmp	0x4832	; 0x4832 <__tablejump2__>
     9dc:	8f b5       	in	r24, 0x2f	; 47
     9de:	81 60       	ori	r24, 0x01	; 1
     9e0:	8f bd       	out	0x2f, r24	; 47
     9e2:	52 c0       	rjmp	.+164    	; 0xa88 <TIMER_COUNTER1enable+0xda>
     9e4:	8f b5       	in	r24, 0x2f	; 47
     9e6:	82 60       	ori	r24, 0x02	; 2
     9e8:	8f bd       	out	0x2f, r24	; 47
     9ea:	4e c0       	rjmp	.+156    	; 0xa88 <TIMER_COUNTER1enable+0xda>
     9ec:	8f b5       	in	r24, 0x2f	; 47
     9ee:	83 60       	ori	r24, 0x03	; 3
     9f0:	8f bd       	out	0x2f, r24	; 47
     9f2:	4a c0       	rjmp	.+148    	; 0xa88 <TIMER_COUNTER1enable+0xda>
     9f4:	8e b5       	in	r24, 0x2e	; 46
     9f6:	88 60       	ori	r24, 0x08	; 8
     9f8:	8e bd       	out	0x2e, r24	; 46
     9fa:	46 c0       	rjmp	.+140    	; 0xa88 <TIMER_COUNTER1enable+0xda>
     9fc:	8f b5       	in	r24, 0x2f	; 47
     9fe:	81 60       	ori	r24, 0x01	; 1
     a00:	8f bd       	out	0x2f, r24	; 47
     a02:	8e b5       	in	r24, 0x2e	; 46
     a04:	88 60       	ori	r24, 0x08	; 8
     a06:	8e bd       	out	0x2e, r24	; 46
     a08:	3f c0       	rjmp	.+126    	; 0xa88 <TIMER_COUNTER1enable+0xda>
     a0a:	8f b5       	in	r24, 0x2f	; 47
     a0c:	82 60       	ori	r24, 0x02	; 2
     a0e:	8f bd       	out	0x2f, r24	; 47
     a10:	8e b5       	in	r24, 0x2e	; 46
     a12:	88 60       	ori	r24, 0x08	; 8
     a14:	8e bd       	out	0x2e, r24	; 46
     a16:	38 c0       	rjmp	.+112    	; 0xa88 <TIMER_COUNTER1enable+0xda>
     a18:	8f b5       	in	r24, 0x2f	; 47
     a1a:	83 60       	ori	r24, 0x03	; 3
     a1c:	8f bd       	out	0x2f, r24	; 47
     a1e:	8e b5       	in	r24, 0x2e	; 46
     a20:	88 60       	ori	r24, 0x08	; 8
     a22:	8e bd       	out	0x2e, r24	; 46
     a24:	31 c0       	rjmp	.+98     	; 0xa88 <TIMER_COUNTER1enable+0xda>
     a26:	8e b5       	in	r24, 0x2e	; 46
     a28:	80 61       	ori	r24, 0x10	; 16
     a2a:	8e bd       	out	0x2e, r24	; 46
     a2c:	2d c0       	rjmp	.+90     	; 0xa88 <TIMER_COUNTER1enable+0xda>
     a2e:	8f b5       	in	r24, 0x2f	; 47
     a30:	81 60       	ori	r24, 0x01	; 1
     a32:	8f bd       	out	0x2f, r24	; 47
     a34:	8e b5       	in	r24, 0x2e	; 46
     a36:	80 61       	ori	r24, 0x10	; 16
     a38:	8e bd       	out	0x2e, r24	; 46
     a3a:	26 c0       	rjmp	.+76     	; 0xa88 <TIMER_COUNTER1enable+0xda>
     a3c:	8f b5       	in	r24, 0x2f	; 47
     a3e:	82 60       	ori	r24, 0x02	; 2
     a40:	8f bd       	out	0x2f, r24	; 47
     a42:	8e b5       	in	r24, 0x2e	; 46
     a44:	80 61       	ori	r24, 0x10	; 16
     a46:	8e bd       	out	0x2e, r24	; 46
     a48:	1f c0       	rjmp	.+62     	; 0xa88 <TIMER_COUNTER1enable+0xda>
     a4a:	8f b5       	in	r24, 0x2f	; 47
     a4c:	83 60       	ori	r24, 0x03	; 3
     a4e:	8f bd       	out	0x2f, r24	; 47
     a50:	8e b5       	in	r24, 0x2e	; 46
     a52:	80 61       	ori	r24, 0x10	; 16
     a54:	8e bd       	out	0x2e, r24	; 46
     a56:	18 c0       	rjmp	.+48     	; 0xa88 <TIMER_COUNTER1enable+0xda>
     a58:	8e b5       	in	r24, 0x2e	; 46
     a5a:	88 61       	ori	r24, 0x18	; 24
     a5c:	8e bd       	out	0x2e, r24	; 46
     a5e:	14 c0       	rjmp	.+40     	; 0xa88 <TIMER_COUNTER1enable+0xda>
     a60:	8f b5       	in	r24, 0x2f	; 47
     a62:	81 60       	ori	r24, 0x01	; 1
     a64:	8f bd       	out	0x2f, r24	; 47
     a66:	8e b5       	in	r24, 0x2e	; 46
     a68:	88 61       	ori	r24, 0x18	; 24
     a6a:	8e bd       	out	0x2e, r24	; 46
     a6c:	0d c0       	rjmp	.+26     	; 0xa88 <TIMER_COUNTER1enable+0xda>
     a6e:	8f b5       	in	r24, 0x2f	; 47
     a70:	82 60       	ori	r24, 0x02	; 2
     a72:	8f bd       	out	0x2f, r24	; 47
     a74:	8e b5       	in	r24, 0x2e	; 46
     a76:	88 61       	ori	r24, 0x18	; 24
     a78:	8e bd       	out	0x2e, r24	; 46
     a7a:	06 c0       	rjmp	.+12     	; 0xa88 <TIMER_COUNTER1enable+0xda>
     a7c:	8f b5       	in	r24, 0x2f	; 47
     a7e:	83 60       	ori	r24, 0x03	; 3
     a80:	8f bd       	out	0x2f, r24	; 47
     a82:	8e b5       	in	r24, 0x2e	; 46
     a84:	88 61       	ori	r24, 0x18	; 24
     a86:	8e bd       	out	0x2e, r24	; 46
     a88:	8f b5       	in	r24, 0x2f	; 47
     a8a:	83 70       	andi	r24, 0x03	; 3
     a8c:	8f bd       	out	0x2f, r24	; 47
     a8e:	87 b7       	in	r24, 0x37	; 55
     a90:	83 7c       	andi	r24, 0xC3	; 195
     a92:	87 bf       	out	0x37, r24	; 55
     a94:	ed e7       	ldi	r30, 0x7D	; 125
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	80 81       	ld	r24, Z
     a9a:	8e 7f       	andi	r24, 0xFE	; 254
     a9c:	80 83       	st	Z, r24
     a9e:	50 e0       	ldi	r21, 0x00	; 0
     aa0:	fa 01       	movw	r30, r20
     aa2:	31 97       	sbiw	r30, 0x01	; 1
     aa4:	ec 30       	cpi	r30, 0x0C	; 12
     aa6:	f1 05       	cpc	r31, r1
     aa8:	08 f0       	brcs	.+2      	; 0xaac <TIMER_COUNTER1enable+0xfe>
     aaa:	44 c0       	rjmp	.+136    	; 0xb34 <TIMER_COUNTER1enable+0x186>
     aac:	eb 5a       	subi	r30, 0xAB	; 171
     aae:	ff 4f       	sbci	r31, 0xFF	; 255
     ab0:	0c 94 19 24 	jmp	0x4832	; 0x4832 <__tablejump2__>
     ab4:	87 b7       	in	r24, 0x37	; 55
     ab6:	84 60       	ori	r24, 0x04	; 4
     ab8:	87 bf       	out	0x37, r24	; 55
     aba:	3c c0       	rjmp	.+120    	; 0xb34 <TIMER_COUNTER1enable+0x186>
     abc:	87 b7       	in	r24, 0x37	; 55
     abe:	80 61       	ori	r24, 0x10	; 16
     ac0:	87 bf       	out	0x37, r24	; 55
     ac2:	38 c0       	rjmp	.+112    	; 0xb34 <TIMER_COUNTER1enable+0x186>
     ac4:	87 b7       	in	r24, 0x37	; 55
     ac6:	88 60       	ori	r24, 0x08	; 8
     ac8:	87 bf       	out	0x37, r24	; 55
     aca:	34 c0       	rjmp	.+104    	; 0xb34 <TIMER_COUNTER1enable+0x186>
     acc:	ed e7       	ldi	r30, 0x7D	; 125
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	80 81       	ld	r24, Z
     ad2:	81 60       	ori	r24, 0x01	; 1
     ad4:	80 83       	st	Z, r24
     ad6:	2e c0       	rjmp	.+92     	; 0xb34 <TIMER_COUNTER1enable+0x186>
     ad8:	87 b7       	in	r24, 0x37	; 55
     ada:	80 62       	ori	r24, 0x20	; 32
     adc:	87 bf       	out	0x37, r24	; 55
     ade:	2a c0       	rjmp	.+84     	; 0xb34 <TIMER_COUNTER1enable+0x186>
     ae0:	87 b7       	in	r24, 0x37	; 55
     ae2:	84 61       	ori	r24, 0x14	; 20
     ae4:	87 bf       	out	0x37, r24	; 55
     ae6:	26 c0       	rjmp	.+76     	; 0xb34 <TIMER_COUNTER1enable+0x186>
     ae8:	87 b7       	in	r24, 0x37	; 55
     aea:	8c 60       	ori	r24, 0x0C	; 12
     aec:	87 bf       	out	0x37, r24	; 55
     aee:	22 c0       	rjmp	.+68     	; 0xb34 <TIMER_COUNTER1enable+0x186>
     af0:	87 b7       	in	r24, 0x37	; 55
     af2:	84 60       	ori	r24, 0x04	; 4
     af4:	87 bf       	out	0x37, r24	; 55
     af6:	ed e7       	ldi	r30, 0x7D	; 125
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	80 81       	ld	r24, Z
     afc:	81 60       	ori	r24, 0x01	; 1
     afe:	80 83       	st	Z, r24
     b00:	19 c0       	rjmp	.+50     	; 0xb34 <TIMER_COUNTER1enable+0x186>
     b02:	87 b7       	in	r24, 0x37	; 55
     b04:	84 62       	ori	r24, 0x24	; 36
     b06:	87 bf       	out	0x37, r24	; 55
     b08:	15 c0       	rjmp	.+42     	; 0xb34 <TIMER_COUNTER1enable+0x186>
     b0a:	87 b7       	in	r24, 0x37	; 55
     b0c:	8c 61       	ori	r24, 0x1C	; 28
     b0e:	87 bf       	out	0x37, r24	; 55
     b10:	11 c0       	rjmp	.+34     	; 0xb34 <TIMER_COUNTER1enable+0x186>
     b12:	87 b7       	in	r24, 0x37	; 55
     b14:	8c 61       	ori	r24, 0x1C	; 28
     b16:	87 bf       	out	0x37, r24	; 55
     b18:	ed e7       	ldi	r30, 0x7D	; 125
     b1a:	f0 e0       	ldi	r31, 0x00	; 0
     b1c:	80 81       	ld	r24, Z
     b1e:	81 60       	ori	r24, 0x01	; 1
     b20:	80 83       	st	Z, r24
     b22:	08 c0       	rjmp	.+16     	; 0xb34 <TIMER_COUNTER1enable+0x186>
     b24:	87 b7       	in	r24, 0x37	; 55
     b26:	88 61       	ori	r24, 0x18	; 24
     b28:	87 bf       	out	0x37, r24	; 55
     b2a:	ed e7       	ldi	r30, 0x7D	; 125
     b2c:	f0 e0       	ldi	r31, 0x00	; 0
     b2e:	80 81       	ld	r24, Z
     b30:	81 60       	ori	r24, 0x01	; 1
     b32:	80 83       	st	Z, r24
     b34:	83 e4       	ldi	r24, 0x43	; 67
     b36:	94 e0       	ldi	r25, 0x04	; 4
     b38:	11 96       	adiw	r26, 0x01	; 1
     b3a:	9c 93       	st	X, r25
     b3c:	8e 93       	st	-X, r24
     b3e:	88 e5       	ldi	r24, 0x58	; 88
     b40:	94 e0       	ldi	r25, 0x04	; 4
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	8d e6       	ldi	r24, 0x6D	; 109
     b4c:	94 e0       	ldi	r25, 0x04	; 4
     b4e:	15 96       	adiw	r26, 0x05	; 5
     b50:	9c 93       	st	X, r25
     b52:	8e 93       	st	-X, r24
     b54:	14 97       	sbiw	r26, 0x04	; 4
     b56:	82 e8       	ldi	r24, 0x82	; 130
     b58:	94 e0       	ldi	r25, 0x04	; 4
     b5a:	17 96       	adiw	r26, 0x07	; 7
     b5c:	9c 93       	st	X, r25
     b5e:	8e 93       	st	-X, r24
     b60:	16 97       	sbiw	r26, 0x06	; 6
     b62:	85 e8       	ldi	r24, 0x85	; 133
     b64:	94 e0       	ldi	r25, 0x04	; 4
     b66:	19 96       	adiw	r26, 0x09	; 9
     b68:	9c 93       	st	X, r25
     b6a:	8e 93       	st	-X, r24
     b6c:	18 97       	sbiw	r26, 0x08	; 8
     b6e:	88 e8       	ldi	r24, 0x88	; 136
     b70:	94 e0       	ldi	r25, 0x04	; 4
     b72:	1b 96       	adiw	r26, 0x0b	; 11
     b74:	9c 93       	st	X, r25
     b76:	8e 93       	st	-X, r24
     b78:	1a 97       	sbiw	r26, 0x0a	; 10
     b7a:	8c ef       	ldi	r24, 0xFC	; 252
     b7c:	93 e0       	ldi	r25, 0x03	; 3
     b7e:	1d 96       	adiw	r26, 0x0d	; 13
     b80:	9c 93       	st	X, r25
     b82:	8e 93       	st	-X, r24
     b84:	1c 97       	sbiw	r26, 0x0c	; 12
     b86:	8d e8       	ldi	r24, 0x8D	; 141
     b88:	94 e0       	ldi	r25, 0x04	; 4
     b8a:	1f 96       	adiw	r26, 0x0f	; 15
     b8c:	9c 93       	st	X, r25
     b8e:	8e 93       	st	-X, r24
     b90:	1e 97       	sbiw	r26, 0x0e	; 14
     b92:	cd 01       	movw	r24, r26
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	08 95       	ret

00000b9a <__vector_16>:
	timer3_state=0;
}
/***Interrupt***/
// So that main will not freeze when not defined, therefore exclude here! before use.
//ISR(TIMER0_COMP_vect){ }
ISR(TIMER0_OVF_vect){ }
     b9a:	1f 92       	push	r1
     b9c:	0f 92       	push	r0
     b9e:	0f b6       	in	r0, 0x3f	; 63
     ba0:	0f 92       	push	r0
     ba2:	11 24       	eor	r1, r1
     ba4:	0f 90       	pop	r0
     ba6:	0f be       	out	0x3f, r0	; 63
     ba8:	0f 90       	pop	r0
     baa:	1f 90       	pop	r1
     bac:	18 95       	reti

00000bae <__vector_11>:
ISR(TIMER1_CAPT_vect){ }
     bae:	1f 92       	push	r1
     bb0:	0f 92       	push	r0
     bb2:	0f b6       	in	r0, 0x3f	; 63
     bb4:	0f 92       	push	r0
     bb6:	11 24       	eor	r1, r1
     bb8:	0f 90       	pop	r0
     bba:	0f be       	out	0x3f, r0	; 63
     bbc:	0f 90       	pop	r0
     bbe:	1f 90       	pop	r1
     bc0:	18 95       	reti

00000bc2 <__vector_12>:
ISR(TIMER1_COMPA_vect){ }
     bc2:	1f 92       	push	r1
     bc4:	0f 92       	push	r0
     bc6:	0f b6       	in	r0, 0x3f	; 63
     bc8:	0f 92       	push	r0
     bca:	11 24       	eor	r1, r1
     bcc:	0f 90       	pop	r0
     bce:	0f be       	out	0x3f, r0	; 63
     bd0:	0f 90       	pop	r0
     bd2:	1f 90       	pop	r1
     bd4:	18 95       	reti

00000bd6 <__vector_13>:
ISR(TIMER1_COMPB_vect){ }
     bd6:	1f 92       	push	r1
     bd8:	0f 92       	push	r0
     bda:	0f b6       	in	r0, 0x3f	; 63
     bdc:	0f 92       	push	r0
     bde:	11 24       	eor	r1, r1
     be0:	0f 90       	pop	r0
     be2:	0f be       	out	0x3f, r0	; 63
     be4:	0f 90       	pop	r0
     be6:	1f 90       	pop	r1
     be8:	18 95       	reti

00000bea <__vector_24>:
ISR(TIMER1_COMPC_vect){ }
     bea:	1f 92       	push	r1
     bec:	0f 92       	push	r0
     bee:	0f b6       	in	r0, 0x3f	; 63
     bf0:	0f 92       	push	r0
     bf2:	11 24       	eor	r1, r1
     bf4:	0f 90       	pop	r0
     bf6:	0f be       	out	0x3f, r0	; 63
     bf8:	0f 90       	pop	r0
     bfa:	1f 90       	pop	r1
     bfc:	18 95       	reti

00000bfe <__vector_14>:
ISR(TIMER1_OVF_vect){ }
     bfe:	1f 92       	push	r1
     c00:	0f 92       	push	r0
     c02:	0f b6       	in	r0, 0x3f	; 63
     c04:	0f 92       	push	r0
     c06:	11 24       	eor	r1, r1
     c08:	0f 90       	pop	r0
     c0a:	0f be       	out	0x3f, r0	; 63
     c0c:	0f 90       	pop	r0
     c0e:	1f 90       	pop	r1
     c10:	18 95       	reti

00000c12 <__vector_10>:
ISR(TIMER2_OVF_vect){ }
     c12:	1f 92       	push	r1
     c14:	0f 92       	push	r0
     c16:	0f b6       	in	r0, 0x3f	; 63
     c18:	0f 92       	push	r0
     c1a:	11 24       	eor	r1, r1
     c1c:	0f 90       	pop	r0
     c1e:	0f be       	out	0x3f, r0	; 63
     c20:	0f 90       	pop	r0
     c22:	1f 90       	pop	r1
     c24:	18 95       	reti

00000c26 <__vector_25>:
ISR(TIMER3_CAPT_vect){ }
     c26:	1f 92       	push	r1
     c28:	0f 92       	push	r0
     c2a:	0f b6       	in	r0, 0x3f	; 63
     c2c:	0f 92       	push	r0
     c2e:	11 24       	eor	r1, r1
     c30:	0f 90       	pop	r0
     c32:	0f be       	out	0x3f, r0	; 63
     c34:	0f 90       	pop	r0
     c36:	1f 90       	pop	r1
     c38:	18 95       	reti

00000c3a <__vector_26>:
ISR(TIMER3_COMPA_vect){ }
     c3a:	1f 92       	push	r1
     c3c:	0f 92       	push	r0
     c3e:	0f b6       	in	r0, 0x3f	; 63
     c40:	0f 92       	push	r0
     c42:	11 24       	eor	r1, r1
     c44:	0f 90       	pop	r0
     c46:	0f be       	out	0x3f, r0	; 63
     c48:	0f 90       	pop	r0
     c4a:	1f 90       	pop	r1
     c4c:	18 95       	reti

00000c4e <__vector_27>:
ISR(TIMER3_COMPB_vect){ }
     c4e:	1f 92       	push	r1
     c50:	0f 92       	push	r0
     c52:	0f b6       	in	r0, 0x3f	; 63
     c54:	0f 92       	push	r0
     c56:	11 24       	eor	r1, r1
     c58:	0f 90       	pop	r0
     c5a:	0f be       	out	0x3f, r0	; 63
     c5c:	0f 90       	pop	r0
     c5e:	1f 90       	pop	r1
     c60:	18 95       	reti

00000c62 <__vector_28>:
ISR(TIMER3_COMPC_vect){ }
     c62:	1f 92       	push	r1
     c64:	0f 92       	push	r0
     c66:	0f b6       	in	r0, 0x3f	; 63
     c68:	0f 92       	push	r0
     c6a:	11 24       	eor	r1, r1
     c6c:	0f 90       	pop	r0
     c6e:	0f be       	out	0x3f, r0	; 63
     c70:	0f 90       	pop	r0
     c72:	1f 90       	pop	r1
     c74:	18 95       	reti

00000c76 <__vector_29>:
ISR(TIMER3_OVF_vect){ }
     c76:	1f 92       	push	r1
     c78:	0f 92       	push	r0
     c7a:	0f b6       	in	r0, 0x3f	; 63
     c7c:	0f 92       	push	r0
     c7e:	11 24       	eor	r1, r1
     c80:	0f 90       	pop	r0
     c82:	0f be       	out	0x3f, r0	; 63
     c84:	0f 90       	pop	r0
     c86:	1f 90       	pop	r1
     c88:	18 95       	reti

00000c8a <uart1_getc>:
{
    UART_TxHead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
    while ( UART_TxHead == UART_TxTail ){
		; /***wait for free space in buffer, Tx interrupt will send to free space [Poll]***/
	}	
    UART_TxBuf[UART_TxHead] = data;
     c8a:	e0 91 a2 03 	lds	r30, 0x03A2	; 0x8003a2 <UART1_RxTail>
     c8e:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <UART1_RxHead>
     c92:	8e 17       	cp	r24, r30
     c94:	49 f0       	breq	.+18     	; 0xca8 <uart1_getc+0x1e>
     c96:	ef 5f       	subi	r30, 0xFF	; 255
     c98:	ef 73       	andi	r30, 0x3F	; 63
     c9a:	e0 93 a2 03 	sts	0x03A2, r30	; 0x8003a2 <UART1_RxTail>
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	e7 56       	subi	r30, 0x67	; 103
     ca2:	fd 4f       	sbci	r31, 0xFD	; 253
     ca4:	80 81       	ld	r24, Z
     ca6:	08 95       	ret
     ca8:	80 e0       	ldi	r24, 0x00	; 0
     caa:	08 95       	ret

00000cac <uart1_Rxavailable>:
     cac:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <UART1_RxHead>
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	cf 96       	adiw	r24, 0x3f	; 63
     cb4:	20 91 a2 03 	lds	r18, 0x03A2	; 0x8003a2 <UART1_RxTail>
     cb8:	82 1b       	sub	r24, r18
     cba:	91 09       	sbc	r25, r1
     cbc:	6f e3       	ldi	r22, 0x3F	; 63
     cbe:	70 e0       	ldi	r23, 0x00	; 0
     cc0:	0c 94 c8 23 	jmp	0x4790	; 0x4790 <__divmodhi4>
     cc4:	08 95       	ret

00000cc6 <uart1_Rxflush>:
     cc6:	ef ed       	ldi	r30, 0xDF	; 223
     cc8:	f2 e0       	ldi	r31, 0x02	; 2
     cca:	10 82       	st	Z, r1
     ccc:	11 82       	std	Z+1, r1	; 0x01
     cce:	12 82       	std	Z+2, r1	; 0x02
     cd0:	80 91 a2 03 	lds	r24, 0x03A2	; 0x8003a2 <UART1_RxTail>
     cd4:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <UART1_RxHead>
     cd8:	08 95       	ret

00000cda <uart1_Txflush>:
     cda:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <UART1_TxTail>
     cde:	80 93 de 02 	sts	0x02DE, r24	; 0x8002de <UART1_TxHead>
     ce2:	08 95       	ret

00000ce4 <uart1_putc>:
     ce4:	e0 91 de 02 	lds	r30, 0x02DE	; 0x8002de <UART1_TxHead>
     ce8:	ae 2f       	mov	r26, r30
     cea:	b0 e0       	ldi	r27, 0x00	; 0
     cec:	a0 5e       	subi	r26, 0xE0	; 224
     cee:	bc 4f       	sbci	r27, 0xFC	; 252
     cf0:	8c 93       	st	X, r24
     cf2:	ef 5f       	subi	r30, 0xFF	; 255
     cf4:	ef 73       	andi	r30, 0x3F	; 63
     cf6:	e0 93 de 02 	sts	0x02DE, r30	; 0x8002de <UART1_TxHead>
     cfa:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <UART1_TxTail>
     cfe:	e8 17       	cp	r30, r24
     d00:	29 f0       	breq	.+10     	; 0xd0c <uart1_putc+0x28>
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	e0 5e       	subi	r30, 0xE0	; 224
     d06:	fc 4f       	sbci	r31, 0xFC	; 252
     d08:	10 82       	st	Z, r1
     d0a:	09 c0       	rjmp	.+18     	; 0xd1e <uart1_putc+0x3a>
     d0c:	2f ef       	ldi	r18, 0xFF	; 255
     d0e:	86 e7       	ldi	r24, 0x76	; 118
     d10:	91 e0       	ldi	r25, 0x01	; 1
     d12:	21 50       	subi	r18, 0x01	; 1
     d14:	80 40       	sbci	r24, 0x00	; 0
     d16:	90 40       	sbci	r25, 0x00	; 0
     d18:	e1 f7       	brne	.-8      	; 0xd12 <uart1_putc+0x2e>
     d1a:	00 c0       	rjmp	.+0      	; 0xd1c <uart1_putc+0x38>
     d1c:	00 00       	nop
     d1e:	ea e9       	ldi	r30, 0x9A	; 154
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	80 81       	ld	r24, Z
     d24:	80 62       	ori	r24, 0x20	; 32
     d26:	80 83       	st	Z, r24
     d28:	08 95       	ret

00000d2a <uart1_puts>:
     d2a:	cf 93       	push	r28
     d2c:	df 93       	push	r29
     d2e:	ec 01       	movw	r28, r24
     d30:	88 81       	ld	r24, Y
     d32:	88 23       	and	r24, r24
     d34:	29 f0       	breq	.+10     	; 0xd40 <uart1_puts+0x16>
     d36:	21 96       	adiw	r28, 0x01	; 1
     d38:	d5 df       	rcall	.-86     	; 0xce4 <uart1_putc>
     d3a:	89 91       	ld	r24, Y+
     d3c:	81 11       	cpse	r24, r1
     d3e:	fc cf       	rjmp	.-8      	; 0xd38 <uart1_puts+0xe>
     d40:	df 91       	pop	r29
     d42:	cf 91       	pop	r28
     d44:	08 95       	ret

00000d46 <__vector_18>:
}
/***Interrupt***/
/***ISR(UART0_RECEIVE_INTERRUPT)***/
ISR(UART0_RECEIVE_INTERRUPT)
{
     d46:	1f 92       	push	r1
     d48:	0f 92       	push	r0
     d4a:	0f b6       	in	r0, 0x3f	; 63
     d4c:	0f 92       	push	r0
     d4e:	11 24       	eor	r1, r1
     d50:	0b b6       	in	r0, 0x3b	; 59
     d52:	0f 92       	push	r0
     d54:	8f 93       	push	r24
     d56:	9f 93       	push	r25
     d58:	ef 93       	push	r30
     d5a:	ff 93       	push	r31
    unsigned char tmphead;
	unsigned char data;
	unsigned char bit9;
    unsigned char usr;
    /***read UART status register and UART data register***/
	usr  = UART0_STATUS;
     d5c:	8b b1       	in	r24, 0x0b	; 11
    bit9 = UART0_CONTROL;
     d5e:	9a b1       	in	r25, 0x0a	; 10
    bit9 = 0x01 & (bit9>>1);
    /***/
    UART_LastRxError = (usr & (_BV(FE0)|_BV(DOR0)) );
     d60:	88 71       	andi	r24, 0x18	; 24
     d62:	80 93 97 02 	sts	0x0297, r24	; 0x800297 <UART_LastRxError>
	/***calculate buffer index***/ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
     d66:	e0 91 a0 03 	lds	r30, 0x03A0	; 0x8003a0 <UART_RxHead>
     d6a:	ef 5f       	subi	r30, 0xFF	; 255
     d6c:	ef 73       	andi	r30, 0x3F	; 63
    if ( tmphead == UART_RxTail ) {	
     d6e:	90 91 a1 03 	lds	r25, 0x03A1	; 0x8003a1 <UART_RxTail>
     d72:	e9 13       	cpse	r30, r25
     d74:	04 c0       	rjmp	.+8      	; 0xd7e <__vector_18+0x38>
        /***error: receive buffer overflow***/
        UART_LastRxError = UART_BUFFER_OVERFLOW >> 8; 
     d76:	82 e0       	ldi	r24, 0x02	; 2
     d78:	80 93 97 02 	sts	0x0297, r24	; 0x800297 <UART_LastRxError>
     d7c:	0f c0       	rjmp	.+30     	; 0xd9c <__vector_18+0x56>
	}else{
		data = UART0_DATA;
     d7e:	9c b1       	in	r25, 0x0c	; 12
        /***store new index***/
        UART_RxHead = tmphead;
     d80:	e0 93 a0 03 	sts	0x03A0, r30	; 0x8003a0 <UART_RxHead>
		if(UART_LastRxError){
     d84:	88 23       	and	r24, r24
     d86:	31 f0       	breq	.+12     	; 0xd94 <__vector_18+0x4e>
			/***store indication data error in buffer***/
			UART_RxBuf[tmphead] = 'X';
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	ed 55       	subi	r30, 0x5D	; 93
     d8c:	fc 4f       	sbci	r31, 0xFC	; 252
     d8e:	88 e5       	ldi	r24, 0x58	; 88
     d90:	80 83       	st	Z, r24
     d92:	04 c0       	rjmp	.+8      	; 0xd9c <__vector_18+0x56>
		}else{
			/***store received data in buffer***/
			UART_RxBuf[tmphead] = data;
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	ed 55       	subi	r30, 0x5D	; 93
     d98:	fc 4f       	sbci	r31, 0xFC	; 252
     d9a:	90 83       	st	Z, r25
		}
    }
}
     d9c:	ff 91       	pop	r31
     d9e:	ef 91       	pop	r30
     da0:	9f 91       	pop	r25
     da2:	8f 91       	pop	r24
     da4:	0f 90       	pop	r0
     da6:	0b be       	out	0x3b, r0	; 59
     da8:	0f 90       	pop	r0
     daa:	0f be       	out	0x3f, r0	; 63
     dac:	0f 90       	pop	r0
     dae:	1f 90       	pop	r1
     db0:	18 95       	reti

00000db2 <__vector_19>:
/***ISR(UART0_TRANSMIT_INTERRUPT)***/
ISR(UART0_TRANSMIT_INTERRUPT)
{
     db2:	1f 92       	push	r1
     db4:	0f 92       	push	r0
     db6:	0f b6       	in	r0, 0x3f	; 63
     db8:	0f 92       	push	r0
     dba:	11 24       	eor	r1, r1
     dbc:	0b b6       	in	r0, 0x3b	; 59
     dbe:	0f 92       	push	r0
     dc0:	8f 93       	push	r24
     dc2:	9f 93       	push	r25
     dc4:	ef 93       	push	r30
     dc6:	ff 93       	push	r31
	uint8_t tail = UART_TxTail;
	UART0_DATA = UART_TxBuf[tail];
     dc8:	e0 91 db 02 	lds	r30, 0x02DB	; 0x8002db <UART_TxTail>
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	e0 5a       	subi	r30, 0xA0	; 160
     dd0:	fc 4f       	sbci	r31, 0xFC	; 252
     dd2:	80 81       	ld	r24, Z
     dd4:	8c b9       	out	0x0c, r24	; 12
	UART_TxBuf[tail]='\0';
     dd6:	10 82       	st	Z, r1
	UART_TxTail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
     dd8:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <UART_TxTail>
     ddc:	8f 5f       	subi	r24, 0xFF	; 255
     dde:	8f 73       	andi	r24, 0x3F	; 63
     de0:	80 93 db 02 	sts	0x02DB, r24	; 0x8002db <UART_TxTail>
	if ( UART_TxTail != UART_TxHead )
     de4:	90 91 96 02 	lds	r25, 0x0296	; 0x800296 <UART_TxHead>
     de8:	89 13       	cpse	r24, r25
     dea:	01 c0       	rjmp	.+2      	; 0xdee <__vector_19+0x3c>
		;
	else
		UART0_CONTROL &= ~_BV(UART0_UDRIE);
     dec:	55 98       	cbi	0x0a, 5	; 10
}
     dee:	ff 91       	pop	r31
     df0:	ef 91       	pop	r30
     df2:	9f 91       	pop	r25
     df4:	8f 91       	pop	r24
     df6:	0f 90       	pop	r0
     df8:	0b be       	out	0x3b, r0	; 59
     dfa:	0f 90       	pop	r0
     dfc:	0f be       	out	0x3f, r0	; 63
     dfe:	0f 90       	pop	r0
     e00:	1f 90       	pop	r1
     e02:	18 95       	reti

00000e04 <UART1enable>:
/***these functions are only for ATmegas with two USART***/
/***UART1 UART1enable(unsigned int baudrate, unsigned int FDbits, unsigned int Stopbits, unsigned int Parity )***/
UART1 UART1enable(unsigned int baudrate, unsigned int FDbits, unsigned int Stopbits, unsigned int Parity )
{
     e04:	0f 93       	push	r16
     e06:	1f 93       	push	r17
     e08:	cf 93       	push	r28
     e0a:	df 93       	push	r29
     e0c:	fc 01       	movw	r30, r24
	/***LOCAL VARIABLES***/
	uint8_t tSREG;
	tSREG=SREG;
     e0e:	bf b7       	in	r27, 0x3f	; 63
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
     e10:	8f b7       	in	r24, 0x3f	; 63
     e12:	8f 77       	andi	r24, 0x7F	; 127
     e14:	8f bf       	out	0x3f, r24	; 63
	/***GLOBAL VARIABLES INIC***/
    UART1_TxHead = 0;
     e16:	10 92 de 02 	sts	0x02DE, r1	; 0x8002de <UART1_TxHead>
    UART1_TxTail = 0;
     e1a:	10 92 98 02 	sts	0x0298, r1	; 0x800298 <UART1_TxTail>
    UART1_RxHead = 0;
     e1e:	10 92 dc 02 	sts	0x02DC, r1	; 0x8002dc <UART1_RxHead>
    UART1_RxTail = 0;
     e22:	10 92 a2 03 	sts	0x03A2, r1	; 0x8003a2 <UART1_RxTail>
	uart1_index=0;
     e26:	10 92 da 02 	sts	0x02DA, r1	; 0x8002da <uart1_index+0x1>
     e2a:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <uart1_index>
	uart1_msg[0]='\0';
     e2e:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <uart1_msg>
	/***struct***/
	UART1 uart;
	//local variables
	uart.ubrr=baudrate;
     e32:	a6 2f       	mov	r26, r22
	uart.puts=uart1_puts;
	uart.Rxavailable=uart1_Rxavailable;
	uart.Rxflush=uart1_Rxflush;
	uart.Txflush=uart1_Txflush;
    /***Set baud rate***/
    if ( baudrate & 0x8000 ) 
     e34:	77 23       	and	r23, r23
     e36:	24 f4       	brge	.+8      	; 0xe40 <UART1enable+0x3c>
    {
    	UART1_STATUS = (1<<U2X1);  //Enable 2x speed 
     e38:	82 e0       	ldi	r24, 0x02	; 2
     e3a:	80 93 9b 00 	sts	0x009B, r24	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
		baudrate &= ~0x8000;
     e3e:	7f 77       	andi	r23, 0x7F	; 127
    }
    UBRR1H = (unsigned char)(baudrate>>8);
     e40:	70 93 98 00 	sts	0x0098, r23	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
    UBRR1L = (unsigned char) baudrate;
     e44:	60 93 99 00 	sts	0x0099, r22	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
    /***Enable USART receiver and transmitter and receive complete interrupt***/
    UART1_CONTROL = _BV(RXCIE1)|(1<<RXEN1)|(1<<TXEN1);
     e48:	88 e9       	ldi	r24, 0x98	; 152
     e4a:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
		uart.FDbits=8;
		uart.Stopbits=1;
		uart.Parity=0;
    #else
    /***Parameters***/
    	switch(FDbits){
     e4e:	47 30       	cpi	r20, 0x07	; 7
     e50:	51 05       	cpc	r21, r1
     e52:	41 f1       	breq	.+80     	; 0xea4 <UART1enable+0xa0>
     e54:	40 f4       	brcc	.+16     	; 0xe66 <UART1enable+0x62>
     e56:	45 30       	cpi	r20, 0x05	; 5
     e58:	51 05       	cpc	r21, r1
     e5a:	09 f4       	brne	.+2      	; 0xe5e <UART1enable+0x5a>
     e5c:	41 c0       	rjmp	.+130    	; 0xee0 <UART1enable+0xdc>
     e5e:	46 30       	cpi	r20, 0x06	; 6
     e60:	51 05       	cpc	r21, r1
     e62:	79 f1       	breq	.+94     	; 0xec2 <UART1enable+0xbe>
     e64:	49 c0       	rjmp	.+146    	; 0xef8 <UART1enable+0xf4>
     e66:	48 30       	cpi	r20, 0x08	; 8
     e68:	51 05       	cpc	r21, r1
     e6a:	81 f0       	breq	.+32     	; 0xe8c <UART1enable+0x88>
     e6c:	49 30       	cpi	r20, 0x09	; 9
     e6e:	51 05       	cpc	r21, r1
     e70:	09 f0       	breq	.+2      	; 0xe74 <UART1enable+0x70>
     e72:	42 c0       	rjmp	.+132    	; 0xef8 <UART1enable+0xf4>
			case 9:
				UART1_CONTROL |= (1<<UCSZ12);
     e74:	ca e9       	ldi	r28, 0x9A	; 154
     e76:	d0 e0       	ldi	r29, 0x00	; 0
     e78:	88 81       	ld	r24, Y
     e7a:	84 60       	ori	r24, 0x04	; 4
     e7c:	88 83       	st	Y, r24
				UCSR1C |= (3<<UCSZ10);
     e7e:	cd e9       	ldi	r28, 0x9D	; 157
     e80:	d0 e0       	ldi	r29, 0x00	; 0
     e82:	88 81       	ld	r24, Y
     e84:	86 60       	ori	r24, 0x06	; 6
     e86:	88 83       	st	Y, r24
				uart.FDbits=9;
     e88:	49 e0       	ldi	r20, 0x09	; 9
				break;
     e8a:	41 c0       	rjmp	.+130    	; 0xf0e <UART1enable+0x10a>
			case 8:
				UART1_CONTROL &= ~(1<<UCSZ12);
     e8c:	ca e9       	ldi	r28, 0x9A	; 154
     e8e:	d0 e0       	ldi	r29, 0x00	; 0
     e90:	88 81       	ld	r24, Y
     e92:	8b 7f       	andi	r24, 0xFB	; 251
     e94:	88 83       	st	Y, r24
				UCSR1C |= (3<<UCSZ10);
     e96:	cd e9       	ldi	r28, 0x9D	; 157
     e98:	d0 e0       	ldi	r29, 0x00	; 0
     e9a:	88 81       	ld	r24, Y
     e9c:	86 60       	ori	r24, 0x06	; 6
     e9e:	88 83       	st	Y, r24
				uart.FDbits=8;
     ea0:	48 e0       	ldi	r20, 0x08	; 8
				break;
     ea2:	35 c0       	rjmp	.+106    	; 0xf0e <UART1enable+0x10a>
			case 7:	
				UART1_CONTROL &= ~(1<<UCSZ12);
     ea4:	ca e9       	ldi	r28, 0x9A	; 154
     ea6:	d0 e0       	ldi	r29, 0x00	; 0
     ea8:	88 81       	ld	r24, Y
     eaa:	8b 7f       	andi	r24, 0xFB	; 251
     eac:	88 83       	st	Y, r24
				UCSR1C |= (1<<UCSZ11);
     eae:	cd e9       	ldi	r28, 0x9D	; 157
     eb0:	d0 e0       	ldi	r29, 0x00	; 0
     eb2:	88 81       	ld	r24, Y
     eb4:	84 60       	ori	r24, 0x04	; 4
     eb6:	88 83       	st	Y, r24
				UCSR1C &= ~(1<<UCSZ10);
     eb8:	88 81       	ld	r24, Y
     eba:	8d 7f       	andi	r24, 0xFD	; 253
     ebc:	88 83       	st	Y, r24
				uart.FDbits=7;
     ebe:	47 e0       	ldi	r20, 0x07	; 7
				break;
     ec0:	26 c0       	rjmp	.+76     	; 0xf0e <UART1enable+0x10a>
			case 6:	
				UART1_CONTROL &= ~(1<<UCSZ12);
     ec2:	ca e9       	ldi	r28, 0x9A	; 154
     ec4:	d0 e0       	ldi	r29, 0x00	; 0
     ec6:	88 81       	ld	r24, Y
     ec8:	8b 7f       	andi	r24, 0xFB	; 251
     eca:	88 83       	st	Y, r24
				UCSR1C &= ~(1<<UCSZ11);
     ecc:	cd e9       	ldi	r28, 0x9D	; 157
     ece:	d0 e0       	ldi	r29, 0x00	; 0
     ed0:	88 81       	ld	r24, Y
     ed2:	8b 7f       	andi	r24, 0xFB	; 251
     ed4:	88 83       	st	Y, r24
				UCSR1C |= (1<<UCSZ10);
     ed6:	88 81       	ld	r24, Y
     ed8:	82 60       	ori	r24, 0x02	; 2
     eda:	88 83       	st	Y, r24
				uart.FDbits=6;
     edc:	46 e0       	ldi	r20, 0x06	; 6
				break;
     ede:	17 c0       	rjmp	.+46     	; 0xf0e <UART1enable+0x10a>
			case 5:	
				UART1_CONTROL &= ~(1<<UCSZ12);
     ee0:	ca e9       	ldi	r28, 0x9A	; 154
     ee2:	d0 e0       	ldi	r29, 0x00	; 0
     ee4:	88 81       	ld	r24, Y
     ee6:	8b 7f       	andi	r24, 0xFB	; 251
     ee8:	88 83       	st	Y, r24
				UCSR1C &= ~(3<<UCSZ10);
     eea:	cd e9       	ldi	r28, 0x9D	; 157
     eec:	d0 e0       	ldi	r29, 0x00	; 0
     eee:	88 81       	ld	r24, Y
     ef0:	89 7f       	andi	r24, 0xF9	; 249
     ef2:	88 83       	st	Y, r24
				uart.FDbits=5;
     ef4:	45 e0       	ldi	r20, 0x05	; 5
				break;
     ef6:	0b c0       	rjmp	.+22     	; 0xf0e <UART1enable+0x10a>
			default:
				UART1_CONTROL &= ~(1<<UCSZ12);
     ef8:	ca e9       	ldi	r28, 0x9A	; 154
     efa:	d0 e0       	ldi	r29, 0x00	; 0
     efc:	88 81       	ld	r24, Y
     efe:	8b 7f       	andi	r24, 0xFB	; 251
     f00:	88 83       	st	Y, r24
				UCSR1C |= (3<<UCSZ10);
     f02:	cd e9       	ldi	r28, 0x9D	; 157
     f04:	d0 e0       	ldi	r29, 0x00	; 0
     f06:	88 81       	ld	r24, Y
     f08:	86 60       	ori	r24, 0x06	; 6
     f0a:	88 83       	st	Y, r24
				uart.FDbits=8;
     f0c:	48 e0       	ldi	r20, 0x08	; 8
				break;
		}
		switch(Stopbits){
     f0e:	21 30       	cpi	r18, 0x01	; 1
     f10:	31 05       	cpc	r19, r1
     f12:	21 f0       	breq	.+8      	; 0xf1c <UART1enable+0x118>
     f14:	22 30       	cpi	r18, 0x02	; 2
     f16:	31 05       	cpc	r19, r1
     f18:	41 f0       	breq	.+16     	; 0xf2a <UART1enable+0x126>
     f1a:	0e c0       	rjmp	.+28     	; 0xf38 <UART1enable+0x134>
				case 1:
					UCSR1C &= ~(1<<USBS1);
     f1c:	cd e9       	ldi	r28, 0x9D	; 157
     f1e:	d0 e0       	ldi	r29, 0x00	; 0
     f20:	88 81       	ld	r24, Y
     f22:	87 7f       	andi	r24, 0xF7	; 247
     f24:	88 83       	st	Y, r24
					uart.Stopbits=1;
     f26:	21 e0       	ldi	r18, 0x01	; 1
					break;
     f28:	0d c0       	rjmp	.+26     	; 0xf44 <UART1enable+0x140>
				case 2:
					UCSR1C |= (1<<USBS1);
     f2a:	cd e9       	ldi	r28, 0x9D	; 157
     f2c:	d0 e0       	ldi	r29, 0x00	; 0
     f2e:	88 81       	ld	r24, Y
     f30:	88 60       	ori	r24, 0x08	; 8
     f32:	88 83       	st	Y, r24
					uart.Stopbits=2;
     f34:	22 e0       	ldi	r18, 0x02	; 2
					break;
     f36:	06 c0       	rjmp	.+12     	; 0xf44 <UART1enable+0x140>
				default:
					UCSR1C &= ~(1<<USBS1);
     f38:	cd e9       	ldi	r28, 0x9D	; 157
     f3a:	d0 e0       	ldi	r29, 0x00	; 0
     f3c:	88 81       	ld	r24, Y
     f3e:	87 7f       	andi	r24, 0xF7	; 247
     f40:	88 83       	st	Y, r24
					uart.Stopbits=1;
     f42:	21 e0       	ldi	r18, 0x01	; 1
					break;
		}
		switch(Parity){
     f44:	02 30       	cpi	r16, 0x02	; 2
     f46:	11 05       	cpc	r17, r1
     f48:	61 f0       	breq	.+24     	; 0xf62 <UART1enable+0x15e>
     f4a:	03 30       	cpi	r16, 0x03	; 3
     f4c:	11 05       	cpc	r17, r1
     f4e:	99 f0       	breq	.+38     	; 0xf76 <UART1enable+0x172>
     f50:	01 2b       	or	r16, r17
     f52:	c1 f4       	brne	.+48     	; 0xf84 <UART1enable+0x180>
			case 0://NONE
				UCSR1C &= ~(3<<UPM10);
     f54:	cd e9       	ldi	r28, 0x9D	; 157
     f56:	d0 e0       	ldi	r29, 0x00	; 0
     f58:	88 81       	ld	r24, Y
     f5a:	8f 7c       	andi	r24, 0xCF	; 207
     f5c:	88 83       	st	Y, r24
				uart.Parity=0;
     f5e:	90 e0       	ldi	r25, 0x00	; 0
				break;
     f60:	17 c0       	rjmp	.+46     	; 0xf90 <UART1enable+0x18c>
			case 2://EVEN
				UCSR1C |= (1<<UPM11);
     f62:	cd e9       	ldi	r28, 0x9D	; 157
     f64:	d0 e0       	ldi	r29, 0x00	; 0
     f66:	88 81       	ld	r24, Y
     f68:	80 62       	ori	r24, 0x20	; 32
     f6a:	88 83       	st	Y, r24
				UCSR1C &= ~(1<<UPM10);
     f6c:	88 81       	ld	r24, Y
     f6e:	8f 7e       	andi	r24, 0xEF	; 239
     f70:	88 83       	st	Y, r24
				uart.Parity=2;
     f72:	92 e0       	ldi	r25, 0x02	; 2
				break;
     f74:	0d c0       	rjmp	.+26     	; 0xf90 <UART1enable+0x18c>
			case 3://ODD
				UCSR1C |= (3<<UPM10);
     f76:	cd e9       	ldi	r28, 0x9D	; 157
     f78:	d0 e0       	ldi	r29, 0x00	; 0
     f7a:	88 81       	ld	r24, Y
     f7c:	80 63       	ori	r24, 0x30	; 48
     f7e:	88 83       	st	Y, r24
				uart.Parity=3;
     f80:	93 e0       	ldi	r25, 0x03	; 3
				break;	
     f82:	06 c0       	rjmp	.+12     	; 0xf90 <UART1enable+0x18c>
			default:
				UCSR1C &= ~(3<<UPM10);
     f84:	cd e9       	ldi	r28, 0x9D	; 157
     f86:	d0 e0       	ldi	r29, 0x00	; 0
     f88:	88 81       	ld	r24, Y
     f8a:	8f 7c       	andi	r24, 0xCF	; 207
     f8c:	88 83       	st	Y, r24
				uart.Parity=0;
     f8e:	90 e0       	ldi	r25, 0x00	; 0
				break;
		}
    #endif
	//UART1_CONTROL &= ~_BV(UART1_UDRIE);
	SREG=tSREG;
     f90:	bf bf       	out	0x3f, r27	; 63
	SREG|=(1<<GLOBAL_INTERRUPT_ENABLE);
     f92:	8f b7       	in	r24, 0x3f	; 63
     f94:	80 68       	ori	r24, 0x80	; 128
     f96:	8f bf       	out	0x3f, r24	; 63
	return uart;
     f98:	a0 83       	st	Z, r26
     f9a:	41 83       	std	Z+1, r20	; 0x01
     f9c:	22 83       	std	Z+2, r18	; 0x02
     f9e:	93 83       	std	Z+3, r25	; 0x03
     fa0:	83 e0       	ldi	r24, 0x03	; 3
     fa2:	98 e0       	ldi	r25, 0x08	; 8
     fa4:	95 83       	std	Z+5, r25	; 0x05
     fa6:	84 83       	std	Z+4, r24	; 0x04
     fa8:	85 e4       	ldi	r24, 0x45	; 69
     faa:	96 e0       	ldi	r25, 0x06	; 6
     fac:	97 83       	std	Z+7, r25	; 0x07
     fae:	86 83       	std	Z+6, r24	; 0x06
     fb0:	82 e7       	ldi	r24, 0x72	; 114
     fb2:	96 e0       	ldi	r25, 0x06	; 6
     fb4:	91 87       	std	Z+9, r25	; 0x09
     fb6:	80 87       	std	Z+8, r24	; 0x08
     fb8:	85 e9       	ldi	r24, 0x95	; 149
     fba:	96 e0       	ldi	r25, 0x06	; 6
     fbc:	93 87       	std	Z+11, r25	; 0x0b
     fbe:	82 87       	std	Z+10, r24	; 0x0a
     fc0:	86 e5       	ldi	r24, 0x56	; 86
     fc2:	96 e0       	ldi	r25, 0x06	; 6
     fc4:	95 87       	std	Z+13, r25	; 0x0d
     fc6:	84 87       	std	Z+12, r24	; 0x0c
     fc8:	83 e6       	ldi	r24, 0x63	; 99
     fca:	96 e0       	ldi	r25, 0x06	; 6
     fcc:	97 87       	std	Z+15, r25	; 0x0f
     fce:	86 87       	std	Z+14, r24	; 0x0e
     fd0:	8d e6       	ldi	r24, 0x6D	; 109
     fd2:	96 e0       	ldi	r25, 0x06	; 6
     fd4:	91 8b       	std	Z+17, r25	; 0x11
     fd6:	80 8b       	std	Z+16, r24	; 0x10
}
     fd8:	cf 01       	movw	r24, r30
     fda:	df 91       	pop	r29
     fdc:	cf 91       	pop	r28
     fde:	1f 91       	pop	r17
     fe0:	0f 91       	pop	r16
     fe2:	08 95       	ret

00000fe4 <UART1_Rx_pop>:
	return (UART1_LastRxError << 8) + data;
}
/***unsigned char UART1_Rx_pop(void)***/
unsigned char UART1_Rx_pop(void)
{
	if( UART1_RxTail == UART1_RxHead )
     fe4:	e0 91 a2 03 	lds	r30, 0x03A2	; 0x8003a2 <UART1_RxTail>
     fe8:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <UART1_RxHead>
     fec:	e8 17       	cp	r30, r24
     fee:	49 f0       	breq	.+18     	; 0x1002 <UART1_Rx_pop+0x1e>
		return (unsigned char)UART_NO_DATA;
	UART1_RxTail = (UART1_RxTail + 1) & UART_RX_BUFFER_MASK;
     ff0:	ef 5f       	subi	r30, 0xFF	; 255
     ff2:	ef 73       	andi	r30, 0x3F	; 63
     ff4:	e0 93 a2 03 	sts	0x03A2, r30	; 0x8003a2 <UART1_RxTail>
	return UART1_RxBuf[UART1_RxTail];
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	e7 56       	subi	r30, 0x67	; 103
     ffc:	fd 4f       	sbci	r31, 0xFD	; 253
     ffe:	80 81       	ld	r24, Z
    1000:	08 95       	ret
}
/***unsigned char UART1_Rx_pop(void)***/
unsigned char UART1_Rx_pop(void)
{
	if( UART1_RxTail == UART1_RxHead )
		return (unsigned char)UART_NO_DATA;
    1002:	80 e0       	ldi	r24, 0x00	; 0
	UART1_RxTail = (UART1_RxTail + 1) & UART_RX_BUFFER_MASK;
	return UART1_RxBuf[UART1_RxTail];
}
    1004:	08 95       	ret

00001006 <uart1_read>:
    while (*s) 
      uart1_putc(*s++);
}
/***char* uart1_read(void)***/
char* uart1_read(void)
{
    1006:	cf 93       	push	r28
    1008:	df 93       	push	r29
	char* ret;
	ret="\0";
	if((UART1_RxTail != UART1_RxHead) && (uart1_index < UART_RX_BUFFER_MASK)){
    100a:	90 91 a2 03 	lds	r25, 0x03A2	; 0x8003a2 <UART1_RxTail>
    100e:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <UART1_RxHead>
    1012:	98 17       	cp	r25, r24
    1014:	d9 f0       	breq	.+54     	; 0x104c <uart1_read+0x46>
    1016:	c0 91 d9 02 	lds	r28, 0x02D9	; 0x8002d9 <uart1_index>
    101a:	d0 91 da 02 	lds	r29, 0x02DA	; 0x8002da <uart1_index+0x1>
    101e:	cf 33       	cpi	r28, 0x3F	; 63
    1020:	d1 05       	cpc	r29, r1
    1022:	a4 f4       	brge	.+40     	; 0x104c <uart1_read+0x46>
		uart1_msg[uart1_index]=UART1_Rx_pop();
    1024:	df df       	rcall	.-66     	; 0xfe4 <UART1_Rx_pop>
    1026:	c1 52       	subi	r28, 0x21	; 33
    1028:	dd 4f       	sbci	r29, 0xFD	; 253
    102a:	88 83       	st	Y, r24
		uart1_index++;
    102c:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <uart1_index>
    1030:	90 91 da 02 	lds	r25, 0x02DA	; 0x8002da <uart1_index+0x1>
    1034:	01 96       	adiw	r24, 0x01	; 1
    1036:	90 93 da 02 	sts	0x02DA, r25	; 0x8002da <uart1_index+0x1>
    103a:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <uart1_index>
		uart1_msg[uart1_index]='\0';
    103e:	fc 01       	movw	r30, r24
    1040:	e1 52       	subi	r30, 0x21	; 33
    1042:	fd 4f       	sbci	r31, 0xFD	; 253
    1044:	10 82       	st	Z, r1
}
/***char* uart1_read(void)***/
char* uart1_read(void)
{
	char* ret;
	ret="\0";
    1046:	80 e1       	ldi	r24, 0x10	; 16
    1048:	91 e0       	ldi	r25, 0x01	; 1
	if((UART1_RxTail != UART1_RxHead) && (uart1_index < UART_RX_BUFFER_MASK)){
		uart1_msg[uart1_index]=UART1_Rx_pop();
		uart1_index++;
		uart1_msg[uart1_index]='\0';
    104a:	06 c0       	rjmp	.+12     	; 0x1058 <uart1_read+0x52>
	}else{
		uart1_index=0;
    104c:	10 92 da 02 	sts	0x02DA, r1	; 0x8002da <uart1_index+0x1>
    1050:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <uart1_index>
		ret=uart1_msg;
    1054:	8f ed       	ldi	r24, 0xDF	; 223
    1056:	92 e0       	ldi	r25, 0x02	; 2
	}
	return ret;
}
    1058:	df 91       	pop	r29
    105a:	cf 91       	pop	r28
    105c:	08 95       	ret

0000105e <__vector_30>:
	UART1_TxHead = UART1_TxTail;
}
/***Interrupt***/
/***SIGNAL(UART1_RECEIVE_INTERRUPT)***/
SIGNAL(UART1_RECEIVE_INTERRUPT)
{
    105e:	1f 92       	push	r1
    1060:	0f 92       	push	r0
    1062:	0f b6       	in	r0, 0x3f	; 63
    1064:	0f 92       	push	r0
    1066:	11 24       	eor	r1, r1
    1068:	0b b6       	in	r0, 0x3b	; 59
    106a:	0f 92       	push	r0
    106c:	8f 93       	push	r24
    106e:	9f 93       	push	r25
    1070:	ef 93       	push	r30
    1072:	ff 93       	push	r31
    unsigned char tmphead;
	unsigned char data;
	unsigned char bit9;
    unsigned char usr;
    /***read UART status register and UART data register***/
	usr  = UART1_STATUS;
    1074:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    bit9 = UART1_CONTROL;
    1078:	90 91 9a 00 	lds	r25, 0x009A	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
    bit9 = 0x01 & (bit9>>1);
    /***/
    UART1_LastRxError = (usr & (_BV(FE1)|_BV(DOR1)));
    107c:	88 71       	andi	r24, 0x18	; 24
    107e:	80 93 dd 02 	sts	0x02DD, r24	; 0x8002dd <UART1_LastRxError>
	/***calculate buffer index***/
    tmphead = ( UART1_RxHead + 1) & UART_RX_BUFFER_MASK;
    1082:	e0 91 dc 02 	lds	r30, 0x02DC	; 0x8002dc <UART1_RxHead>
    1086:	ef 5f       	subi	r30, 0xFF	; 255
    1088:	ef 73       	andi	r30, 0x3F	; 63
    if ( tmphead == UART1_RxTail ) {	
    108a:	90 91 a2 03 	lds	r25, 0x03A2	; 0x8003a2 <UART1_RxTail>
    108e:	e9 13       	cpse	r30, r25
    1090:	04 c0       	rjmp	.+8      	; 0x109a <__vector_30+0x3c>
        /***error: receive buffer overflow, caracter is lost***/
        UART1_LastRxError = UART_BUFFER_OVERFLOW >> 8; 
    1092:	82 e0       	ldi	r24, 0x02	; 2
    1094:	80 93 dd 02 	sts	0x02DD, r24	; 0x8002dd <UART1_LastRxError>
    1098:	10 c0       	rjmp	.+32     	; 0x10ba <__vector_30+0x5c>
	}else{
		data = UART1_DATA;
    109a:	90 91 9c 00 	lds	r25, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
        /***store new index***/
        UART1_RxHead = tmphead;
    109e:	e0 93 dc 02 	sts	0x02DC, r30	; 0x8002dc <UART1_RxHead>
		if(UART1_LastRxError){
    10a2:	88 23       	and	r24, r24
    10a4:	31 f0       	breq	.+12     	; 0x10b2 <__vector_30+0x54>
			/***store indication data error in buffer***/
			UART1_RxBuf[tmphead] = 'X';
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	e7 56       	subi	r30, 0x67	; 103
    10aa:	fd 4f       	sbci	r31, 0xFD	; 253
    10ac:	88 e5       	ldi	r24, 0x58	; 88
    10ae:	80 83       	st	Z, r24
    10b0:	04 c0       	rjmp	.+8      	; 0x10ba <__vector_30+0x5c>
		}else{
			/***store received data in buffer***/
			UART1_RxBuf[tmphead] = data;
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	e7 56       	subi	r30, 0x67	; 103
    10b6:	fd 4f       	sbci	r31, 0xFD	; 253
    10b8:	90 83       	st	Z, r25
		}
    }
}
    10ba:	ff 91       	pop	r31
    10bc:	ef 91       	pop	r30
    10be:	9f 91       	pop	r25
    10c0:	8f 91       	pop	r24
    10c2:	0f 90       	pop	r0
    10c4:	0b be       	out	0x3b, r0	; 59
    10c6:	0f 90       	pop	r0
    10c8:	0f be       	out	0x3f, r0	; 63
    10ca:	0f 90       	pop	r0
    10cc:	1f 90       	pop	r1
    10ce:	18 95       	reti

000010d0 <__vector_31>:
/***SIGNAL(UART1_TRANSMIT_INTERRUPT)***/
SIGNAL(UART1_TRANSMIT_INTERRUPT)
{
    10d0:	1f 92       	push	r1
    10d2:	0f 92       	push	r0
    10d4:	0f b6       	in	r0, 0x3f	; 63
    10d6:	0f 92       	push	r0
    10d8:	11 24       	eor	r1, r1
    10da:	0b b6       	in	r0, 0x3b	; 59
    10dc:	0f 92       	push	r0
    10de:	8f 93       	push	r24
    10e0:	9f 93       	push	r25
    10e2:	ef 93       	push	r30
    10e4:	ff 93       	push	r31
	uint8_t tail = UART1_TxTail;
	UART1_DATA = UART1_TxBuf[tail];
    10e6:	e0 91 98 02 	lds	r30, 0x0298	; 0x800298 <UART1_TxTail>
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	e0 5e       	subi	r30, 0xE0	; 224
    10ee:	fc 4f       	sbci	r31, 0xFC	; 252
    10f0:	80 81       	ld	r24, Z
    10f2:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
	UART1_TxBuf[tail]='\0';
    10f6:	10 82       	st	Z, r1
	UART1_TxTail = (UART1_TxTail + 1) & UART_TX_BUFFER_MASK;
    10f8:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <UART1_TxTail>
    10fc:	8f 5f       	subi	r24, 0xFF	; 255
    10fe:	8f 73       	andi	r24, 0x3F	; 63
    1100:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <UART1_TxTail>
	if ( UART1_TxTail != UART1_TxHead )
    1104:	90 91 de 02 	lds	r25, 0x02DE	; 0x8002de <UART1_TxHead>
    1108:	89 13       	cpse	r24, r25
    110a:	05 c0       	rjmp	.+10     	; 0x1116 <__stack+0x17>
        ;
    else
		UART1_CONTROL &= ~_BV(UART1_UDRIE);
    110c:	ea e9       	ldi	r30, 0x9A	; 154
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	8f 7d       	andi	r24, 0xDF	; 223
    1114:	80 83       	st	Z, r24
}
    1116:	ff 91       	pop	r31
    1118:	ef 91       	pop	r30
    111a:	9f 91       	pop	r25
    111c:	8f 91       	pop	r24
    111e:	0f 90       	pop	r0
    1120:	0b be       	out	0x3b, r0	; 59
    1122:	0f 90       	pop	r0
    1124:	0f be       	out	0x3f, r0	; 63
    1126:	0f 90       	pop	r0
    1128:	1f 90       	pop	r1
    112a:	18 95       	reti

0000112c <FUNCpinmatch>:
	return i;
}
uint8_t  bintobcd(uint8_t bin)
{
	return (((bin) / 10) << 4) + ((bin) % 10);
}
    112c:	68 23       	and	r22, r24
    112e:	44 23       	and	r20, r20
    1130:	21 f0       	breq	.+8      	; 0x113a <FUNCpinmatch+0xe>
    1132:	86 17       	cp	r24, r22
    1134:	21 f0       	breq	.+8      	; 0x113e <FUNCpinmatch+0x12>
    1136:	80 e0       	ldi	r24, 0x00	; 0
    1138:	08 95       	ret
    113a:	61 11       	cpse	r22, r1
    113c:	80 e0       	ldi	r24, 0x00	; 0
    113e:	08 95       	ret

00001140 <FUNChmerge>:
    1140:	86 2b       	or	r24, r22
    1142:	08 95       	ret

00001144 <FUNClmerge>:
    1144:	86 23       	and	r24, r22
    1146:	08 95       	ret

00001148 <FUNChh>:
    1148:	86 23       	and	r24, r22
    114a:	08 95       	ret

0000114c <FUNCll>:
    114c:	86 2b       	or	r24, r22
    114e:	80 95       	com	r24
    1150:	08 95       	ret

00001152 <FUNClh>:
    1152:	86 27       	eor	r24, r22
    1154:	86 23       	and	r24, r22
    1156:	08 95       	ret

00001158 <FUNChl>:
    1158:	60 95       	com	r22
    115a:	86 23       	and	r24, r22
    115c:	08 95       	ret

0000115e <FUNCdiff>:
    115e:	86 27       	eor	r24, r22
    1160:	08 95       	ret

00001162 <FUNCswap>:
    1162:	cf 92       	push	r12
    1164:	df 92       	push	r13
    1166:	ef 92       	push	r14
    1168:	ff 92       	push	r15
    116a:	0f 93       	push	r16
    116c:	1f 93       	push	r17
    116e:	fc 01       	movw	r30, r24
    1170:	00 81       	ld	r16, Z
    1172:	11 81       	ldd	r17, Z+1	; 0x01
    1174:	22 81       	ldd	r18, Z+2	; 0x02
    1176:	33 81       	ldd	r19, Z+3	; 0x03
    1178:	fb 01       	movw	r30, r22
    117a:	c0 80       	ld	r12, Z
    117c:	d1 80       	ldd	r13, Z+1	; 0x01
    117e:	e2 80       	ldd	r14, Z+2	; 0x02
    1180:	f3 80       	ldd	r15, Z+3	; 0x03
    1182:	fc 01       	movw	r30, r24
    1184:	c0 82       	st	Z, r12
    1186:	d1 82       	std	Z+1, r13	; 0x01
    1188:	e2 82       	std	Z+2, r14	; 0x02
    118a:	f3 82       	std	Z+3, r15	; 0x03
    118c:	fb 01       	movw	r30, r22
    118e:	00 83       	st	Z, r16
    1190:	11 83       	std	Z+1, r17	; 0x01
    1192:	22 83       	std	Z+2, r18	; 0x02
    1194:	33 83       	std	Z+3, r19	; 0x03
    1196:	1f 91       	pop	r17
    1198:	0f 91       	pop	r16
    119a:	ff 90       	pop	r15
    119c:	ef 90       	pop	r14
    119e:	df 90       	pop	r13
    11a0:	cf 90       	pop	r12
    11a2:	08 95       	ret

000011a4 <FUNCcopy>:
    11a4:	fb 01       	movw	r30, r22
    11a6:	20 81       	ld	r18, Z
    11a8:	fc 01       	movw	r30, r24
    11aa:	20 83       	st	Z, r18
    11ac:	22 23       	and	r18, r18
    11ae:	39 f0       	breq	.+14     	; 0x11be <FUNCcopy+0x1a>
    11b0:	db 01       	movw	r26, r22
    11b2:	11 96       	adiw	r26, 0x01	; 1
    11b4:	31 96       	adiw	r30, 0x01	; 1
    11b6:	9d 91       	ld	r25, X+
    11b8:	91 93       	st	Z+, r25
    11ba:	91 11       	cpse	r25, r1
    11bc:	fc cf       	rjmp	.-8      	; 0x11b6 <FUNCcopy+0x12>
    11be:	08 95       	ret

000011c0 <FUNCsqueeze>:
    11c0:	cf 93       	push	r28
    11c2:	df 93       	push	r29
    11c4:	ec 01       	movw	r28, r24
    11c6:	98 81       	ld	r25, Y
    11c8:	99 23       	and	r25, r25
    11ca:	99 f0       	breq	.+38     	; 0x11f2 <FUNCsqueeze+0x32>
    11cc:	fe 01       	movw	r30, r28
    11ce:	31 96       	adiw	r30, 0x01	; 1
    11d0:	20 e0       	ldi	r18, 0x00	; 0
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	49 2f       	mov	r20, r25
    11d6:	50 e0       	ldi	r21, 0x00	; 0
    11d8:	46 17       	cp	r20, r22
    11da:	57 07       	cpc	r21, r23
    11dc:	31 f0       	breq	.+12     	; 0x11ea <FUNCsqueeze+0x2a>
    11de:	de 01       	movw	r26, r28
    11e0:	a2 0f       	add	r26, r18
    11e2:	b3 1f       	adc	r27, r19
    11e4:	9c 93       	st	X, r25
    11e6:	2f 5f       	subi	r18, 0xFF	; 255
    11e8:	3f 4f       	sbci	r19, 0xFF	; 255
    11ea:	91 91       	ld	r25, Z+
    11ec:	91 11       	cpse	r25, r1
    11ee:	f2 cf       	rjmp	.-28     	; 0x11d4 <FUNCsqueeze+0x14>
    11f0:	02 c0       	rjmp	.+4      	; 0x11f6 <FUNCsqueeze+0x36>
    11f2:	20 e0       	ldi	r18, 0x00	; 0
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	fe 01       	movw	r30, r28
    11f8:	e2 0f       	add	r30, r18
    11fa:	f3 1f       	adc	r31, r19
    11fc:	10 82       	st	Z, r1
    11fe:	df 91       	pop	r29
    1200:	cf 91       	pop	r28
    1202:	08 95       	ret

00001204 <FUNCshellsort>:
    1204:	2f 92       	push	r2
    1206:	3f 92       	push	r3
    1208:	4f 92       	push	r4
    120a:	5f 92       	push	r5
    120c:	6f 92       	push	r6
    120e:	7f 92       	push	r7
    1210:	8f 92       	push	r8
    1212:	9f 92       	push	r9
    1214:	af 92       	push	r10
    1216:	bf 92       	push	r11
    1218:	cf 92       	push	r12
    121a:	df 92       	push	r13
    121c:	ef 92       	push	r14
    121e:	ff 92       	push	r15
    1220:	0f 93       	push	r16
    1222:	1f 93       	push	r17
    1224:	cf 93       	push	r28
    1226:	df 93       	push	r29
    1228:	00 d0       	rcall	.+0      	; 0x122a <FUNCshellsort+0x26>
    122a:	00 d0       	rcall	.+0      	; 0x122c <FUNCshellsort+0x28>
    122c:	cd b7       	in	r28, 0x3d	; 61
    122e:	de b7       	in	r29, 0x3e	; 62
    1230:	2c 01       	movw	r4, r24
    1232:	1b 01       	movw	r2, r22
    1234:	4b 01       	movw	r8, r22
    1236:	77 23       	and	r23, r23
    1238:	1c f4       	brge	.+6      	; 0x1240 <FUNCshellsort+0x3c>
    123a:	2f ef       	ldi	r18, 0xFF	; 255
    123c:	82 1a       	sub	r8, r18
    123e:	92 0a       	sbc	r9, r18
    1240:	95 94       	asr	r9
    1242:	87 94       	ror	r8
    1244:	18 14       	cp	r1, r8
    1246:	19 04       	cpc	r1, r9
    1248:	0c f4       	brge	.+2      	; 0x124c <FUNCshellsort+0x48>
    124a:	51 c0       	rjmp	.+162    	; 0x12ee <FUNCshellsort+0xea>
    124c:	6a c0       	rjmp	.+212    	; 0x1322 <FUNCshellsort+0x11e>
    124e:	96 01       	movw	r18, r12
    1250:	dd 20       	and	r13, r13
    1252:	9c f1       	brlt	.+102    	; 0x12ba <FUNCshellsort+0xb6>
    1254:	f5 01       	movw	r30, r10
    1256:	40 81       	ld	r20, Z
    1258:	51 81       	ldd	r21, Z+1	; 0x01
    125a:	f4 01       	movw	r30, r8
    125c:	60 81       	ld	r22, Z
    125e:	71 81       	ldd	r23, Z+1	; 0x01
    1260:	64 17       	cp	r22, r20
    1262:	75 07       	cpc	r23, r21
    1264:	54 f5       	brge	.+84     	; 0x12ba <FUNCshellsort+0xb6>
    1266:	8c 01       	movw	r16, r24
    1268:	0a 0d       	add	r16, r10
    126a:	1b 1d       	adc	r17, r11
    126c:	d4 01       	movw	r26, r8
    126e:	bc 82       	std	Y+4, r11	; 0x04
    1270:	ab 82       	std	Y+3, r10	; 0x03
    1272:	ba 82       	std	Y+2, r11	; 0x02
    1274:	a9 82       	std	Y+1, r10	; 0x01
    1276:	eb 81       	ldd	r30, Y+3	; 0x03
    1278:	fc 81       	ldd	r31, Y+4	; 0x04
    127a:	71 83       	std	Z+1, r23	; 0x01
    127c:	60 83       	st	Z, r22
    127e:	11 96       	adiw	r26, 0x01	; 1
    1280:	5c 93       	st	X, r21
    1282:	4e 93       	st	-X, r20
    1284:	2e 19       	sub	r18, r14
    1286:	3f 09       	sbc	r19, r15
    1288:	c2 f0       	brmi	.+48     	; 0x12ba <FUNCshellsort+0xb6>
    128a:	f8 01       	movw	r30, r16
    128c:	40 81       	ld	r20, Z
    128e:	51 81       	ldd	r21, Z+1	; 0x01
    1290:	e9 81       	ldd	r30, Y+1	; 0x01
    1292:	fa 81       	ldd	r31, Y+2	; 0x02
    1294:	60 81       	ld	r22, Z
    1296:	71 81       	ldd	r23, Z+1	; 0x01
    1298:	08 0f       	add	r16, r24
    129a:	19 1f       	adc	r17, r25
    129c:	e8 0f       	add	r30, r24
    129e:	f9 1f       	adc	r31, r25
    12a0:	fa 83       	std	Y+2, r31	; 0x02
    12a2:	e9 83       	std	Y+1, r30	; 0x01
    12a4:	eb 81       	ldd	r30, Y+3	; 0x03
    12a6:	fc 81       	ldd	r31, Y+4	; 0x04
    12a8:	e8 0f       	add	r30, r24
    12aa:	f9 1f       	adc	r31, r25
    12ac:	fc 83       	std	Y+4, r31	; 0x04
    12ae:	eb 83       	std	Y+3, r30	; 0x03
    12b0:	a8 0f       	add	r26, r24
    12b2:	b9 1f       	adc	r27, r25
    12b4:	64 17       	cp	r22, r20
    12b6:	75 07       	cpc	r23, r21
    12b8:	f4 f2       	brlt	.-68     	; 0x1276 <FUNCshellsort+0x72>
    12ba:	ff ef       	ldi	r31, 0xFF	; 255
    12bc:	cf 1a       	sub	r12, r31
    12be:	df 0a       	sbc	r13, r31
    12c0:	22 e0       	ldi	r18, 0x02	; 2
    12c2:	a2 0e       	add	r10, r18
    12c4:	b1 1c       	adc	r11, r1
    12c6:	e2 e0       	ldi	r30, 0x02	; 2
    12c8:	8e 0e       	add	r8, r30
    12ca:	91 1c       	adc	r9, r1
    12cc:	c6 14       	cp	r12, r6
    12ce:	d7 04       	cpc	r13, r7
    12d0:	09 f0       	breq	.+2      	; 0x12d4 <FUNCshellsort+0xd0>
    12d2:	bd cf       	rjmp	.-134    	; 0x124e <FUNCshellsort+0x4a>
    12d4:	47 01       	movw	r8, r14
    12d6:	ff 20       	and	r15, r15
    12d8:	1c f4       	brge	.+6      	; 0x12e0 <FUNCshellsort+0xdc>
    12da:	ff ef       	ldi	r31, 0xFF	; 255
    12dc:	8f 1a       	sub	r8, r31
    12de:	9f 0a       	sbc	r9, r31
    12e0:	95 94       	asr	r9
    12e2:	87 94       	ror	r8
    12e4:	18 14       	cp	r1, r8
    12e6:	19 04       	cpc	r1, r9
    12e8:	e4 f4       	brge	.+56     	; 0x1322 <FUNCshellsort+0x11e>
    12ea:	74 01       	movw	r14, r8
    12ec:	01 c0       	rjmp	.+2      	; 0x12f0 <FUNCshellsort+0xec>
    12ee:	74 01       	movw	r14, r8
    12f0:	82 14       	cp	r8, r2
    12f2:	93 04       	cpc	r9, r3
    12f4:	7c f7       	brge	.-34     	; 0x12d4 <FUNCshellsort+0xd0>
    12f6:	64 01       	movw	r12, r8
    12f8:	ce 18       	sub	r12, r14
    12fa:	df 08       	sbc	r13, r15
    12fc:	56 01       	movw	r10, r12
    12fe:	aa 0c       	add	r10, r10
    1300:	bb 1c       	adc	r11, r11
    1302:	a4 0c       	add	r10, r4
    1304:	b5 1c       	adc	r11, r5
    1306:	88 0c       	add	r8, r8
    1308:	99 1c       	adc	r9, r9
    130a:	84 0c       	add	r8, r4
    130c:	95 1c       	adc	r9, r5
    130e:	31 01       	movw	r6, r2
    1310:	6e 18       	sub	r6, r14
    1312:	7f 08       	sbc	r7, r15
    1314:	c7 01       	movw	r24, r14
    1316:	88 0f       	add	r24, r24
    1318:	99 1f       	adc	r25, r25
    131a:	91 95       	neg	r25
    131c:	81 95       	neg	r24
    131e:	91 09       	sbc	r25, r1
    1320:	96 cf       	rjmp	.-212    	; 0x124e <FUNCshellsort+0x4a>
    1322:	0f 90       	pop	r0
    1324:	0f 90       	pop	r0
    1326:	0f 90       	pop	r0
    1328:	0f 90       	pop	r0
    132a:	df 91       	pop	r29
    132c:	cf 91       	pop	r28
    132e:	1f 91       	pop	r17
    1330:	0f 91       	pop	r16
    1332:	ff 90       	pop	r15
    1334:	ef 90       	pop	r14
    1336:	df 90       	pop	r13
    1338:	cf 90       	pop	r12
    133a:	bf 90       	pop	r11
    133c:	af 90       	pop	r10
    133e:	9f 90       	pop	r9
    1340:	8f 90       	pop	r8
    1342:	7f 90       	pop	r7
    1344:	6f 90       	pop	r6
    1346:	5f 90       	pop	r5
    1348:	4f 90       	pop	r4
    134a:	3f 90       	pop	r3
    134c:	2f 90       	pop	r2
    134e:	08 95       	ret

00001350 <FUNCpmax>:
    1350:	86 17       	cp	r24, r22
    1352:	97 07       	cpc	r25, r23
    1354:	0c f4       	brge	.+2      	; 0x1358 <FUNCpmax+0x8>
    1356:	cb 01       	movw	r24, r22
    1358:	08 95       	ret

0000135a <FUNCgcd>:
    135a:	9b 01       	movw	r18, r22
    135c:	67 2b       	or	r22, r23
    135e:	11 f4       	brne	.+4      	; 0x1364 <FUNCgcd+0xa>
    1360:	08 95       	ret
    1362:	9a 01       	movw	r18, r20
    1364:	b9 01       	movw	r22, r18
    1366:	0e 94 c8 23 	call	0x4790	; 0x4790 <__divmodhi4>
    136a:	ac 01       	movw	r20, r24
    136c:	82 2f       	mov	r24, r18
    136e:	93 2f       	mov	r25, r19
    1370:	41 15       	cp	r20, r1
    1372:	51 05       	cpc	r21, r1
    1374:	b1 f7       	brne	.-20     	; 0x1362 <FUNCgcd+0x8>
    1376:	08 95       	ret

00001378 <FUNCstrToInt>:
    1378:	fc 01       	movw	r30, r24
    137a:	90 81       	ld	r25, Z
    137c:	80 ed       	ldi	r24, 0xD0	; 208
    137e:	89 0f       	add	r24, r25
    1380:	8a 30       	cpi	r24, 0x0A	; 10
    1382:	d0 f4       	brcc	.+52     	; 0x13b8 <FUNCstrToInt+0x40>
    1384:	31 96       	adiw	r30, 0x01	; 1
    1386:	20 e0       	ldi	r18, 0x00	; 0
    1388:	30 e0       	ldi	r19, 0x00	; 0
    138a:	a9 01       	movw	r20, r18
    138c:	44 0f       	add	r20, r20
    138e:	55 1f       	adc	r21, r21
    1390:	22 0f       	add	r18, r18
    1392:	33 1f       	adc	r19, r19
    1394:	22 0f       	add	r18, r18
    1396:	33 1f       	adc	r19, r19
    1398:	22 0f       	add	r18, r18
    139a:	33 1f       	adc	r19, r19
    139c:	42 0f       	add	r20, r18
    139e:	53 1f       	adc	r21, r19
    13a0:	29 2f       	mov	r18, r25
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	20 53       	subi	r18, 0x30	; 48
    13a6:	31 09       	sbc	r19, r1
    13a8:	24 0f       	add	r18, r20
    13aa:	35 1f       	adc	r19, r21
    13ac:	91 91       	ld	r25, Z+
    13ae:	80 ed       	ldi	r24, 0xD0	; 208
    13b0:	89 0f       	add	r24, r25
    13b2:	8a 30       	cpi	r24, 0x0A	; 10
    13b4:	50 f3       	brcs	.-44     	; 0x138a <FUNCstrToInt+0x12>
    13b6:	02 c0       	rjmp	.+4      	; 0x13bc <FUNCstrToInt+0x44>
    13b8:	20 e0       	ldi	r18, 0x00	; 0
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	c9 01       	movw	r24, r18
    13be:	08 95       	ret

000013c0 <FUNCfilter>:
    13c0:	86 23       	and	r24, r22
    13c2:	08 95       	ret

000013c4 <FUNCticks>:
    13c4:	00 97       	sbiw	r24, 0x00	; 0
    13c6:	39 f0       	breq	.+14     	; 0x13d6 <FUNCticks+0x12>
    13c8:	20 e0       	ldi	r18, 0x00	; 0
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	2f 5f       	subi	r18, 0xFF	; 255
    13ce:	3f 4f       	sbci	r19, 0xFF	; 255
    13d0:	82 17       	cp	r24, r18
    13d2:	93 07       	cpc	r25, r19
    13d4:	d9 f7       	brne	.-10     	; 0x13cc <FUNCticks+0x8>
    13d6:	08 95       	ret

000013d8 <FUNCtwocomptoint8bit>:
    13d8:	87 ff       	sbrs	r24, 7
    13da:	08 c0       	rjmp	.+16     	; 0x13ec <FUNCtwocomptoint8bit+0x14>
    13dc:	91 95       	neg	r25
    13de:	81 95       	neg	r24
    13e0:	91 09       	sbc	r25, r1
    13e2:	99 27       	eor	r25, r25
    13e4:	91 95       	neg	r25
    13e6:	81 95       	neg	r24
    13e8:	91 09       	sbc	r25, r1
    13ea:	08 95       	ret
    13ec:	8f 77       	andi	r24, 0x7F	; 127
    13ee:	99 27       	eor	r25, r25
    13f0:	08 95       	ret

000013f2 <FUNCtwocomptoint10bit>:
    13f2:	91 ff       	sbrs	r25, 1
    13f4:	08 c0       	rjmp	.+16     	; 0x1406 <FUNCtwocomptoint10bit+0x14>
    13f6:	91 95       	neg	r25
    13f8:	81 95       	neg	r24
    13fa:	91 09       	sbc	r25, r1
    13fc:	93 70       	andi	r25, 0x03	; 3
    13fe:	91 95       	neg	r25
    1400:	81 95       	neg	r24
    1402:	91 09       	sbc	r25, r1
    1404:	08 95       	ret
    1406:	91 70       	andi	r25, 0x01	; 1
    1408:	08 95       	ret

0000140a <FUNCtwocomptointnbit>:
    140a:	61 50       	subi	r22, 0x01	; 1
    140c:	21 e0       	ldi	r18, 0x01	; 1
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	02 c0       	rjmp	.+4      	; 0x1416 <FUNCtwocomptointnbit+0xc>
    1412:	22 0f       	add	r18, r18
    1414:	33 1f       	adc	r19, r19
    1416:	6a 95       	dec	r22
    1418:	e2 f7       	brpl	.-8      	; 0x1412 <FUNCtwocomptointnbit+0x8>
    141a:	a9 01       	movw	r20, r18
    141c:	41 50       	subi	r20, 0x01	; 1
    141e:	51 09       	sbc	r21, r1
    1420:	b9 01       	movw	r22, r18
    1422:	68 23       	and	r22, r24
    1424:	79 23       	and	r23, r25
    1426:	67 2b       	or	r22, r23
    1428:	29 f0       	breq	.+10     	; 0x1434 <FUNCtwocomptointnbit+0x2a>
    142a:	84 23       	and	r24, r20
    142c:	95 23       	and	r25, r21
    142e:	82 1b       	sub	r24, r18
    1430:	93 0b       	sbc	r25, r19
    1432:	08 95       	ret
    1434:	84 23       	and	r24, r20
    1436:	95 23       	and	r25, r21
    1438:	08 95       	ret

0000143a <FUNCdec2bcd>:
    143a:	9d ec       	ldi	r25, 0xCD	; 205
    143c:	89 9f       	mul	r24, r25
    143e:	91 2d       	mov	r25, r1
    1440:	11 24       	eor	r1, r1
    1442:	96 95       	lsr	r25
    1444:	96 95       	lsr	r25
    1446:	96 95       	lsr	r25
    1448:	39 2f       	mov	r19, r25
    144a:	33 0f       	add	r19, r19
    144c:	23 2f       	mov	r18, r19
    144e:	22 0f       	add	r18, r18
    1450:	22 0f       	add	r18, r18
    1452:	23 0f       	add	r18, r19
    1454:	82 1b       	sub	r24, r18
    1456:	20 e1       	ldi	r18, 0x10	; 16
    1458:	92 9f       	mul	r25, r18
    145a:	80 0d       	add	r24, r0
    145c:	11 24       	eor	r1, r1
    145e:	08 95       	ret

00001460 <FUNCbcd2dec>:
    1460:	98 2f       	mov	r25, r24
    1462:	92 95       	swap	r25
    1464:	9f 70       	andi	r25, 0x0F	; 15
    1466:	99 0f       	add	r25, r25
    1468:	29 2f       	mov	r18, r25
    146a:	22 0f       	add	r18, r18
    146c:	22 0f       	add	r18, r18
    146e:	92 0f       	add	r25, r18
    1470:	8f 70       	andi	r24, 0x0F	; 15
    1472:	89 0f       	add	r24, r25
    1474:	08 95       	ret

00001476 <FUNCresizestr>:
    1476:	fc 01       	movw	r30, r24
    1478:	db 01       	movw	r26, r22
    147a:	ad 51       	subi	r26, 0x1D	; 29
    147c:	bc 4f       	sbci	r27, 0xFC	; 252
    147e:	1c 92       	st	X, r1
    1480:	16 16       	cp	r1, r22
    1482:	17 06       	cpc	r1, r23
    1484:	14 f5       	brge	.+68     	; 0x14ca <FUNCresizestr+0x54>
    1486:	90 81       	ld	r25, Z
    1488:	91 11       	cpse	r25, r1
    148a:	0c c0       	rjmp	.+24     	; 0x14a4 <FUNCresizestr+0x2e>
    148c:	17 c0       	rjmp	.+46     	; 0x14bc <FUNCresizestr+0x46>
    148e:	91 91       	ld	r25, Z+
    1490:	91 11       	cpse	r25, r1
    1492:	0d c0       	rjmp	.+26     	; 0x14ae <FUNCresizestr+0x38>
    1494:	15 c0       	rjmp	.+42     	; 0x14c0 <FUNCresizestr+0x4a>
    1496:	81 93       	st	Z+, r24
    1498:	2f 5f       	subi	r18, 0xFF	; 255
    149a:	3f 4f       	sbci	r19, 0xFF	; 255
    149c:	26 17       	cp	r18, r22
    149e:	37 07       	cpc	r19, r23
    14a0:	d4 f3       	brlt	.-12     	; 0x1496 <FUNCresizestr+0x20>
    14a2:	13 c0       	rjmp	.+38     	; 0x14ca <FUNCresizestr+0x54>
    14a4:	a3 ee       	ldi	r26, 0xE3	; 227
    14a6:	b3 e0       	ldi	r27, 0x03	; 3
    14a8:	31 96       	adiw	r30, 0x01	; 1
    14aa:	20 e0       	ldi	r18, 0x00	; 0
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	9d 93       	st	X+, r25
    14b0:	2f 5f       	subi	r18, 0xFF	; 255
    14b2:	3f 4f       	sbci	r19, 0xFF	; 255
    14b4:	62 17       	cp	r22, r18
    14b6:	73 07       	cpc	r23, r19
    14b8:	51 f7       	brne	.-44     	; 0x148e <FUNCresizestr+0x18>
    14ba:	07 c0       	rjmp	.+14     	; 0x14ca <FUNCresizestr+0x54>
    14bc:	20 e0       	ldi	r18, 0x00	; 0
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	f9 01       	movw	r30, r18
    14c2:	ed 51       	subi	r30, 0x1D	; 29
    14c4:	fc 4f       	sbci	r31, 0xFC	; 252
    14c6:	80 e2       	ldi	r24, 0x20	; 32
    14c8:	e6 cf       	rjmp	.-52     	; 0x1496 <FUNCresizestr+0x20>
    14ca:	83 ee       	ldi	r24, 0xE3	; 227
    14cc:	93 e0       	ldi	r25, 0x03	; 3
    14ce:	08 95       	ret

000014d0 <FUNCtrimmer>:
    14d0:	4f 92       	push	r4
    14d2:	5f 92       	push	r5
    14d4:	6f 92       	push	r6
    14d6:	7f 92       	push	r7
    14d8:	af 92       	push	r10
    14da:	bf 92       	push	r11
    14dc:	cf 92       	push	r12
    14de:	df 92       	push	r13
    14e0:	ef 92       	push	r14
    14e2:	ff 92       	push	r15
    14e4:	0f 93       	push	r16
    14e6:	1f 93       	push	r17
    14e8:	cf 93       	push	r28
    14ea:	df 93       	push	r29
    14ec:	cd b7       	in	r28, 0x3d	; 61
    14ee:	de b7       	in	r29, 0x3e	; 62
    14f0:	29 01       	movw	r4, r18
    14f2:	3a 01       	movw	r6, r20
    14f4:	9b 01       	movw	r18, r22
    14f6:	ac 01       	movw	r20, r24
    14f8:	24 19       	sub	r18, r4
    14fa:	35 09       	sbc	r19, r5
    14fc:	46 09       	sbc	r20, r6
    14fe:	57 09       	sbc	r21, r7
    1500:	89 89       	ldd	r24, Y+17	; 0x11
    1502:	9a 89       	ldd	r25, Y+18	; 0x12
    1504:	ab 89       	ldd	r26, Y+19	; 0x13
    1506:	bc 89       	ldd	r27, Y+20	; 0x14
    1508:	bc 01       	movw	r22, r24
    150a:	cd 01       	movw	r24, r26
    150c:	6a 19       	sub	r22, r10
    150e:	7b 09       	sbc	r23, r11
    1510:	8c 09       	sbc	r24, r12
    1512:	9d 09       	sbc	r25, r13
    1514:	0e 94 a5 23 	call	0x474a	; 0x474a <__mulsi3>
    1518:	a8 01       	movw	r20, r16
    151a:	97 01       	movw	r18, r14
    151c:	24 19       	sub	r18, r4
    151e:	35 09       	sbc	r19, r5
    1520:	46 09       	sbc	r20, r6
    1522:	57 09       	sbc	r21, r7
    1524:	0e 94 fd 23 	call	0x47fa	; 0x47fa <__divmodsi4>
    1528:	ca 01       	movw	r24, r20
    152a:	b9 01       	movw	r22, r18
    152c:	6a 0d       	add	r22, r10
    152e:	7b 1d       	adc	r23, r11
    1530:	8c 1d       	adc	r24, r12
    1532:	9d 1d       	adc	r25, r13
    1534:	df 91       	pop	r29
    1536:	cf 91       	pop	r28
    1538:	1f 91       	pop	r17
    153a:	0f 91       	pop	r16
    153c:	ff 90       	pop	r15
    153e:	ef 90       	pop	r14
    1540:	df 90       	pop	r13
    1542:	cf 90       	pop	r12
    1544:	bf 90       	pop	r11
    1546:	af 90       	pop	r10
    1548:	7f 90       	pop	r7
    154a:	6f 90       	pop	r6
    154c:	5f 90       	pop	r5
    154e:	4f 90       	pop	r4
    1550:	08 95       	ret

00001552 <Pwr>:
    1552:	70 e0       	ldi	r23, 0x00	; 0
    1554:	61 15       	cp	r22, r1
    1556:	71 05       	cpc	r23, r1
    1558:	99 f0       	breq	.+38     	; 0x1580 <Pwr+0x2e>
    155a:	41 e0       	ldi	r20, 0x01	; 1
    155c:	50 e0       	ldi	r21, 0x00	; 0
    155e:	21 e0       	ldi	r18, 0x01	; 1
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	fa 01       	movw	r30, r20
    1566:	e8 9f       	mul	r30, r24
    1568:	a0 01       	movw	r20, r0
    156a:	e9 9f       	mul	r30, r25
    156c:	50 0d       	add	r21, r0
    156e:	f8 9f       	mul	r31, r24
    1570:	50 0d       	add	r21, r0
    1572:	11 24       	eor	r1, r1
    1574:	2f 5f       	subi	r18, 0xFF	; 255
    1576:	3f 4f       	sbci	r19, 0xFF	; 255
    1578:	62 17       	cp	r22, r18
    157a:	73 07       	cpc	r23, r19
    157c:	98 f7       	brcc	.-26     	; 0x1564 <Pwr+0x12>
    157e:	02 c0       	rjmp	.+4      	; 0x1584 <Pwr+0x32>
    1580:	41 e0       	ldi	r20, 0x01	; 1
    1582:	50 e0       	ldi	r21, 0x00	; 0
    1584:	ca 01       	movw	r24, r20
    1586:	08 95       	ret

00001588 <StringLength>:
    1588:	fc 01       	movw	r30, r24
    158a:	20 81       	ld	r18, Z
    158c:	22 23       	and	r18, r18
    158e:	41 f0       	breq	.+16     	; 0x15a0 <StringLength+0x18>
    1590:	31 96       	adiw	r30, 0x01	; 1
    1592:	80 e0       	ldi	r24, 0x00	; 0
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	01 96       	adiw	r24, 0x01	; 1
    1598:	21 91       	ld	r18, Z+
    159a:	21 11       	cpse	r18, r1
    159c:	fc cf       	rjmp	.-8      	; 0x1596 <StringLength+0xe>
    159e:	08 95       	ret
    15a0:	80 e0       	ldi	r24, 0x00	; 0
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	08 95       	ret

000015a6 <FUNCtrim>:
    15a6:	cf 93       	push	r28
    15a8:	df 93       	push	r29
    15aa:	ec 01       	movw	r28, r24
    15ac:	ed df       	rcall	.-38     	; 0x1588 <StringLength>
    15ae:	9c 01       	movw	r18, r24
    15b0:	21 50       	subi	r18, 0x01	; 1
    15b2:	31 09       	sbc	r19, r1
    15b4:	62 f0       	brmi	.+24     	; 0x15ce <FUNCtrim+0x28>
    15b6:	fe 01       	movw	r30, r28
    15b8:	e8 0f       	add	r30, r24
    15ba:	f9 1f       	adc	r31, r25
    15bc:	92 91       	ld	r25, -Z
    15be:	90 32       	cpi	r25, 0x20	; 32
    15c0:	19 f0       	breq	.+6      	; 0x15c8 <FUNCtrim+0x22>
    15c2:	99 50       	subi	r25, 0x09	; 9
    15c4:	92 30       	cpi	r25, 0x02	; 2
    15c6:	18 f4       	brcc	.+6      	; 0x15ce <FUNCtrim+0x28>
    15c8:	21 50       	subi	r18, 0x01	; 1
    15ca:	31 09       	sbc	r19, r1
    15cc:	b8 f7       	brcc	.-18     	; 0x15bc <FUNCtrim+0x16>
    15ce:	c2 0f       	add	r28, r18
    15d0:	d3 1f       	adc	r29, r19
    15d2:	19 82       	std	Y+1, r1	; 0x01
    15d4:	c9 01       	movw	r24, r18
    15d6:	df 91       	pop	r29
    15d8:	cf 91       	pop	r28
    15da:	08 95       	ret

000015dc <Reverse>:
    15dc:	cf 93       	push	r28
    15de:	df 93       	push	r29
    15e0:	ec 01       	movw	r28, r24
    15e2:	d2 df       	rcall	.-92     	; 0x1588 <StringLength>
    15e4:	9c 01       	movw	r18, r24
    15e6:	21 50       	subi	r18, 0x01	; 1
    15e8:	31 09       	sbc	r19, r1
    15ea:	12 16       	cp	r1, r18
    15ec:	13 06       	cpc	r1, r19
    15ee:	84 f4       	brge	.+32     	; 0x1610 <Reverse+0x34>
    15f0:	de 01       	movw	r26, r28
    15f2:	a8 0f       	add	r26, r24
    15f4:	b9 1f       	adc	r27, r25
    15f6:	fe 01       	movw	r30, r28
    15f8:	80 e0       	ldi	r24, 0x00	; 0
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	40 81       	ld	r20, Z
    15fe:	5e 91       	ld	r21, -X
    1600:	51 93       	st	Z+, r21
    1602:	4c 93       	st	X, r20
    1604:	01 96       	adiw	r24, 0x01	; 1
    1606:	21 50       	subi	r18, 0x01	; 1
    1608:	31 09       	sbc	r19, r1
    160a:	82 17       	cp	r24, r18
    160c:	93 07       	cpc	r25, r19
    160e:	b4 f3       	brlt	.-20     	; 0x15fc <Reverse+0x20>
    1610:	df 91       	pop	r29
    1612:	cf 91       	pop	r28
    1614:	08 95       	ret

00001616 <FUNCi32toa>:
    1616:	8f 92       	push	r8
    1618:	9f 92       	push	r9
    161a:	af 92       	push	r10
    161c:	bf 92       	push	r11
    161e:	cf 92       	push	r12
    1620:	df 92       	push	r13
    1622:	ef 92       	push	r14
    1624:	ff 92       	push	r15
    1626:	0f 93       	push	r16
    1628:	1f 93       	push	r17
    162a:	cf 93       	push	r28
    162c:	df 93       	push	r29
    162e:	6b 01       	movw	r12, r22
    1630:	7c 01       	movw	r14, r24
    1632:	dc 01       	movw	r26, r24
    1634:	cb 01       	movw	r24, r22
    1636:	ff 20       	and	r15, r15
    1638:	3c f4       	brge	.+14     	; 0x1648 <FUNCi32toa+0x32>
    163a:	88 27       	eor	r24, r24
    163c:	99 27       	eor	r25, r25
    163e:	dc 01       	movw	r26, r24
    1640:	8c 19       	sub	r24, r12
    1642:	9d 09       	sbc	r25, r13
    1644:	ae 09       	sbc	r26, r14
    1646:	bf 09       	sbc	r27, r15
    1648:	bc 01       	movw	r22, r24
    164a:	cd 01       	movw	r24, r26
    164c:	10 e0       	ldi	r17, 0x00	; 0
    164e:	0f 2e       	mov	r0, r31
    1650:	fa e0       	ldi	r31, 0x0A	; 10
    1652:	8f 2e       	mov	r8, r31
    1654:	91 2c       	mov	r9, r1
    1656:	a1 2c       	mov	r10, r1
    1658:	b1 2c       	mov	r11, r1
    165a:	f0 2d       	mov	r31, r0
    165c:	01 c0       	rjmp	.+2      	; 0x1660 <FUNCi32toa+0x4a>
    165e:	10 2f       	mov	r17, r16
    1660:	01 e0       	ldi	r16, 0x01	; 1
    1662:	01 0f       	add	r16, r17
    1664:	c1 2f       	mov	r28, r17
    1666:	d0 e0       	ldi	r29, 0x00	; 0
    1668:	cd 51       	subi	r28, 0x1D	; 29
    166a:	dc 4f       	sbci	r29, 0xFC	; 252
    166c:	a5 01       	movw	r20, r10
    166e:	94 01       	movw	r18, r8
    1670:	0e 94 fd 23 	call	0x47fa	; 0x47fa <__divmodsi4>
    1674:	60 5d       	subi	r22, 0xD0	; 208
    1676:	68 83       	st	Y, r22
    1678:	62 2f       	mov	r22, r18
    167a:	73 2f       	mov	r23, r19
    167c:	84 2f       	mov	r24, r20
    167e:	95 2f       	mov	r25, r21
    1680:	16 16       	cp	r1, r22
    1682:	17 06       	cpc	r1, r23
    1684:	18 06       	cpc	r1, r24
    1686:	19 06       	cpc	r1, r25
    1688:	54 f3       	brlt	.-44     	; 0x165e <FUNCi32toa+0x48>
    168a:	ff 20       	and	r15, r15
    168c:	44 f4       	brge	.+16     	; 0x169e <FUNCi32toa+0x88>
    168e:	e0 2f       	mov	r30, r16
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	ed 51       	subi	r30, 0x1D	; 29
    1694:	fc 4f       	sbci	r31, 0xFC	; 252
    1696:	8d e2       	ldi	r24, 0x2D	; 45
    1698:	80 83       	st	Z, r24
    169a:	02 e0       	ldi	r16, 0x02	; 2
    169c:	01 0f       	add	r16, r17
    169e:	e0 2f       	mov	r30, r16
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	ed 51       	subi	r30, 0x1D	; 29
    16a4:	fc 4f       	sbci	r31, 0xFC	; 252
    16a6:	10 82       	st	Z, r1
    16a8:	83 ee       	ldi	r24, 0xE3	; 227
    16aa:	93 e0       	ldi	r25, 0x03	; 3
    16ac:	97 df       	rcall	.-210    	; 0x15dc <Reverse>
    16ae:	83 ee       	ldi	r24, 0xE3	; 227
    16b0:	93 e0       	ldi	r25, 0x03	; 3
    16b2:	df 91       	pop	r29
    16b4:	cf 91       	pop	r28
    16b6:	1f 91       	pop	r17
    16b8:	0f 91       	pop	r16
    16ba:	ff 90       	pop	r15
    16bc:	ef 90       	pop	r14
    16be:	df 90       	pop	r13
    16c0:	cf 90       	pop	r12
    16c2:	bf 90       	pop	r11
    16c4:	af 90       	pop	r10
    16c6:	9f 90       	pop	r9
    16c8:	8f 90       	pop	r8
    16ca:	08 95       	ret

000016cc <FUNCi16toa>:
    16cc:	0f 93       	push	r16
    16ce:	1f 93       	push	r17
    16d0:	cf 93       	push	r28
    16d2:	df 93       	push	r29
    16d4:	ec 01       	movw	r28, r24
    16d6:	99 23       	and	r25, r25
    16d8:	24 f4       	brge	.+8      	; 0x16e2 <FUNCi16toa+0x16>
    16da:	88 27       	eor	r24, r24
    16dc:	99 27       	eor	r25, r25
    16de:	8c 1b       	sub	r24, r28
    16e0:	9d 0b       	sbc	r25, r29
    16e2:	20 e0       	ldi	r18, 0x00	; 0
    16e4:	0a e0       	ldi	r16, 0x0A	; 10
    16e6:	10 e0       	ldi	r17, 0x00	; 0
    16e8:	01 c0       	rjmp	.+2      	; 0x16ec <FUNCi16toa+0x20>
    16ea:	23 2f       	mov	r18, r19
    16ec:	31 e0       	ldi	r19, 0x01	; 1
    16ee:	32 0f       	add	r19, r18
    16f0:	e2 2f       	mov	r30, r18
    16f2:	f0 e0       	ldi	r31, 0x00	; 0
    16f4:	ed 51       	subi	r30, 0x1D	; 29
    16f6:	fc 4f       	sbci	r31, 0xFC	; 252
    16f8:	b8 01       	movw	r22, r16
    16fa:	0e 94 c8 23 	call	0x4790	; 0x4790 <__divmodhi4>
    16fe:	80 5d       	subi	r24, 0xD0	; 208
    1700:	80 83       	st	Z, r24
    1702:	86 2f       	mov	r24, r22
    1704:	97 2f       	mov	r25, r23
    1706:	18 16       	cp	r1, r24
    1708:	19 06       	cpc	r1, r25
    170a:	7c f3       	brlt	.-34     	; 0x16ea <FUNCi16toa+0x1e>
    170c:	dd 23       	and	r29, r29
    170e:	44 f4       	brge	.+16     	; 0x1720 <FUNCi16toa+0x54>
    1710:	e3 2f       	mov	r30, r19
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	ed 51       	subi	r30, 0x1D	; 29
    1716:	fc 4f       	sbci	r31, 0xFC	; 252
    1718:	8d e2       	ldi	r24, 0x2D	; 45
    171a:	80 83       	st	Z, r24
    171c:	32 e0       	ldi	r19, 0x02	; 2
    171e:	32 0f       	add	r19, r18
    1720:	e3 2f       	mov	r30, r19
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	ed 51       	subi	r30, 0x1D	; 29
    1726:	fc 4f       	sbci	r31, 0xFC	; 252
    1728:	10 82       	st	Z, r1
    172a:	83 ee       	ldi	r24, 0xE3	; 227
    172c:	93 e0       	ldi	r25, 0x03	; 3
    172e:	56 df       	rcall	.-340    	; 0x15dc <Reverse>
    1730:	83 ee       	ldi	r24, 0xE3	; 227
    1732:	93 e0       	ldi	r25, 0x03	; 3
    1734:	df 91       	pop	r29
    1736:	cf 91       	pop	r28
    1738:	1f 91       	pop	r17
    173a:	0f 91       	pop	r16
    173c:	08 95       	ret

0000173e <FUNCui16toa>:
    173e:	cf 93       	push	r28
    1740:	ac 01       	movw	r20, r24
    1742:	e0 e0       	ldi	r30, 0x00	; 0
    1744:	c1 e0       	ldi	r28, 0x01	; 1
    1746:	ce 0f       	add	r28, r30
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	ed 51       	subi	r30, 0x1D	; 29
    174c:	fc 4f       	sbci	r31, 0xFC	; 252
    174e:	9a 01       	movw	r18, r20
    1750:	ad ec       	ldi	r26, 0xCD	; 205
    1752:	bc ec       	ldi	r27, 0xCC	; 204
    1754:	0e 94 22 24 	call	0x4844	; 0x4844 <__umulhisi3>
    1758:	96 95       	lsr	r25
    175a:	87 95       	ror	r24
    175c:	96 95       	lsr	r25
    175e:	87 95       	ror	r24
    1760:	96 95       	lsr	r25
    1762:	87 95       	ror	r24
    1764:	9c 01       	movw	r18, r24
    1766:	22 0f       	add	r18, r18
    1768:	33 1f       	adc	r19, r19
    176a:	88 0f       	add	r24, r24
    176c:	99 1f       	adc	r25, r25
    176e:	88 0f       	add	r24, r24
    1770:	99 1f       	adc	r25, r25
    1772:	88 0f       	add	r24, r24
    1774:	99 1f       	adc	r25, r25
    1776:	82 0f       	add	r24, r18
    1778:	93 1f       	adc	r25, r19
    177a:	9a 01       	movw	r18, r20
    177c:	28 1b       	sub	r18, r24
    177e:	39 0b       	sbc	r19, r25
    1780:	c9 01       	movw	r24, r18
    1782:	80 5d       	subi	r24, 0xD0	; 208
    1784:	80 83       	st	Z, r24
    1786:	9a 01       	movw	r18, r20
    1788:	0e 94 22 24 	call	0x4844	; 0x4844 <__umulhisi3>
    178c:	ac 01       	movw	r20, r24
    178e:	56 95       	lsr	r21
    1790:	47 95       	ror	r20
    1792:	56 95       	lsr	r21
    1794:	47 95       	ror	r20
    1796:	56 95       	lsr	r21
    1798:	47 95       	ror	r20
    179a:	ec 2f       	mov	r30, r28
    179c:	41 15       	cp	r20, r1
    179e:	51 05       	cpc	r21, r1
    17a0:	89 f6       	brne	.-94     	; 0x1744 <FUNCui16toa+0x6>
    17a2:	ec 2f       	mov	r30, r28
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	ed 51       	subi	r30, 0x1D	; 29
    17a8:	fc 4f       	sbci	r31, 0xFC	; 252
    17aa:	10 82       	st	Z, r1
    17ac:	83 ee       	ldi	r24, 0xE3	; 227
    17ae:	93 e0       	ldi	r25, 0x03	; 3
    17b0:	15 df       	rcall	.-470    	; 0x15dc <Reverse>
    17b2:	83 ee       	ldi	r24, 0xE3	; 227
    17b4:	93 e0       	ldi	r25, 0x03	; 3
    17b6:	cf 91       	pop	r28
    17b8:	08 95       	ret

000017ba <FUNCbcd2bin>:
    17ba:	98 2f       	mov	r25, r24
    17bc:	92 95       	swap	r25
    17be:	9f 70       	andi	r25, 0x0F	; 15
    17c0:	99 0f       	add	r25, r25
    17c2:	29 2f       	mov	r18, r25
    17c4:	22 0f       	add	r18, r18
    17c6:	22 0f       	add	r18, r18
    17c8:	92 0f       	add	r25, r18
    17ca:	8f 70       	andi	r24, 0x0F	; 15
    17cc:	89 0f       	add	r24, r25
    17ce:	08 95       	ret

000017d0 <FUNCbin2bcd>:
    17d0:	ac 01       	movw	r20, r24
    17d2:	9c 01       	movw	r18, r24
    17d4:	ad ec       	ldi	r26, 0xCD	; 205
    17d6:	bc ec       	ldi	r27, 0xCC	; 204
    17d8:	0e 94 22 24 	call	0x4844	; 0x4844 <__umulhisi3>
    17dc:	96 95       	lsr	r25
    17de:	87 95       	ror	r24
    17e0:	96 95       	lsr	r25
    17e2:	87 95       	ror	r24
    17e4:	96 95       	lsr	r25
    17e6:	87 95       	ror	r24
    17e8:	bc 01       	movw	r22, r24
    17ea:	66 0f       	add	r22, r22
    17ec:	77 1f       	adc	r23, r23
    17ee:	9c 01       	movw	r18, r24
    17f0:	22 0f       	add	r18, r18
    17f2:	33 1f       	adc	r19, r19
    17f4:	22 0f       	add	r18, r18
    17f6:	33 1f       	adc	r19, r19
    17f8:	22 0f       	add	r18, r18
    17fa:	33 1f       	adc	r19, r19
    17fc:	26 0f       	add	r18, r22
    17fe:	37 1f       	adc	r19, r23
    1800:	42 1b       	sub	r20, r18
    1802:	53 0b       	sbc	r21, r19
    1804:	34 2f       	mov	r19, r20
    1806:	20 e1       	ldi	r18, 0x10	; 16
    1808:	82 9f       	mul	r24, r18
    180a:	30 0d       	add	r19, r0
    180c:	11 24       	eor	r1, r1
    180e:	83 2f       	mov	r24, r19
    1810:	08 95       	ret

00001812 <FUNCgcd1>:
    1812:	cf 92       	push	r12
    1814:	df 92       	push	r13
    1816:	ef 92       	push	r14
    1818:	ff 92       	push	r15
    181a:	cf 93       	push	r28
    181c:	df 93       	push	r29
    181e:	cd b7       	in	r28, 0x3d	; 61
    1820:	de b7       	in	r29, 0x3e	; 62
    1822:	28 97       	sbiw	r28, 0x08	; 8
    1824:	0f b6       	in	r0, 0x3f	; 63
    1826:	f8 94       	cli
    1828:	de bf       	out	0x3e, r29	; 62
    182a:	0f be       	out	0x3f, r0	; 63
    182c:	cd bf       	out	0x3d, r28	; 61
    182e:	6b 01       	movw	r12, r22
    1830:	7c 01       	movw	r14, r24
    1832:	69 83       	std	Y+1, r22	; 0x01
    1834:	7a 83       	std	Y+2, r23	; 0x02
    1836:	8b 83       	std	Y+3, r24	; 0x03
    1838:	9c 83       	std	Y+4, r25	; 0x04
    183a:	2d 83       	std	Y+5, r18	; 0x05
    183c:	3e 83       	std	Y+6, r19	; 0x06
    183e:	4f 83       	std	Y+7, r20	; 0x07
    1840:	58 87       	std	Y+8, r21	; 0x08
    1842:	c2 16       	cp	r12, r18
    1844:	d3 06       	cpc	r13, r19
    1846:	e4 06       	cpc	r14, r20
    1848:	f5 06       	cpc	r15, r21
    184a:	34 f4       	brge	.+12     	; 0x1858 <FUNCgcd1+0x46>
    184c:	be 01       	movw	r22, r28
    184e:	6b 5f       	subi	r22, 0xFB	; 251
    1850:	7f 4f       	sbci	r23, 0xFF	; 255
    1852:	ce 01       	movw	r24, r28
    1854:	01 96       	adiw	r24, 0x01	; 1
    1856:	85 dc       	rcall	.-1782   	; 0x1162 <FUNCswap>
    1858:	8d 81       	ldd	r24, Y+5	; 0x05
    185a:	9e 81       	ldd	r25, Y+6	; 0x06
    185c:	af 81       	ldd	r26, Y+7	; 0x07
    185e:	b8 85       	ldd	r27, Y+8	; 0x08
    1860:	89 2b       	or	r24, r25
    1862:	8a 2b       	or	r24, r26
    1864:	8b 2b       	or	r24, r27
    1866:	71 f4       	brne	.+28     	; 0x1884 <FUNCgcd1+0x72>
    1868:	69 81       	ldd	r22, Y+1	; 0x01
    186a:	7a 81       	ldd	r23, Y+2	; 0x02
    186c:	8b 81       	ldd	r24, Y+3	; 0x03
    186e:	9c 81       	ldd	r25, Y+4	; 0x04
    1870:	20 e0       	ldi	r18, 0x00	; 0
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	a9 01       	movw	r20, r18
    1876:	0e 94 fd 23 	call	0x47fa	; 0x47fa <__divmodsi4>
    187a:	61 15       	cp	r22, r1
    187c:	71 05       	cpc	r23, r1
    187e:	81 05       	cpc	r24, r1
    1880:	91 05       	cpc	r25, r1
    1882:	29 f4       	brne	.+10     	; 0x188e <FUNCgcd1+0x7c>
    1884:	6d 81       	ldd	r22, Y+5	; 0x05
    1886:	7e 81       	ldd	r23, Y+6	; 0x06
    1888:	8f 81       	ldd	r24, Y+7	; 0x07
    188a:	98 85       	ldd	r25, Y+8	; 0x08
    188c:	05 c0       	rjmp	.+10     	; 0x1898 <FUNCgcd1+0x86>
    188e:	6d 83       	std	Y+5, r22	; 0x05
    1890:	7e 83       	std	Y+6, r23	; 0x06
    1892:	8f 83       	std	Y+7, r24	; 0x07
    1894:	98 87       	std	Y+8, r25	; 0x08
    1896:	f6 cf       	rjmp	.-20     	; 0x1884 <FUNCgcd1+0x72>
    1898:	28 96       	adiw	r28, 0x08	; 8
    189a:	0f b6       	in	r0, 0x3f	; 63
    189c:	f8 94       	cli
    189e:	de bf       	out	0x3e, r29	; 62
    18a0:	0f be       	out	0x3f, r0	; 63
    18a2:	cd bf       	out	0x3d, r28	; 61
    18a4:	df 91       	pop	r29
    18a6:	cf 91       	pop	r28
    18a8:	ff 90       	pop	r15
    18aa:	ef 90       	pop	r14
    18ac:	df 90       	pop	r13
    18ae:	cf 90       	pop	r12
    18b0:	08 95       	ret

000018b2 <FUNCpincheck>:
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	02 c0       	rjmp	.+4      	; 0x18ba <FUNCpincheck+0x8>
    18b6:	95 95       	asr	r25
    18b8:	87 95       	ror	r24
    18ba:	6a 95       	dec	r22
    18bc:	e2 f7       	brpl	.-8      	; 0x18b6 <FUNCpincheck+0x4>
    18be:	81 70       	andi	r24, 0x01	; 1
    18c0:	08 95       	ret

000018c2 <FUNCprint_binary>:
    18c2:	e3 ee       	ldi	r30, 0xE3	; 227
    18c4:	f3 e0       	ldi	r31, 0x03	; 3
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	20 e8       	ldi	r18, 0x80	; 128
    18ca:	50 e3       	ldi	r21, 0x30	; 48
    18cc:	41 e3       	ldi	r20, 0x31	; 49
    18ce:	38 2f       	mov	r19, r24
    18d0:	32 23       	and	r19, r18
    18d2:	11 f0       	breq	.+4      	; 0x18d8 <FUNCprint_binary+0x16>
    18d4:	40 83       	st	Z, r20
    18d6:	01 c0       	rjmp	.+2      	; 0x18da <FUNCprint_binary+0x18>
    18d8:	50 83       	st	Z, r21
    18da:	26 95       	lsr	r18
    18dc:	9f 5f       	subi	r25, 0xFF	; 255
    18de:	31 96       	adiw	r30, 0x01	; 1
    18e0:	98 30       	cpi	r25, 0x08	; 8
    18e2:	a9 f7       	brne	.-22     	; 0x18ce <FUNCprint_binary+0xc>
    18e4:	10 92 eb 03 	sts	0x03EB, r1	; 0x8003eb <FUNCstr+0x8>
    18e8:	83 ee       	ldi	r24, 0xE3	; 227
    18ea:	93 e0       	ldi	r25, 0x03	; 3
    18ec:	08 95       	ret

000018ee <FUNCmayia>:
    18ee:	a4 2f       	mov	r26, r20
    18f0:	b0 e0       	ldi	r27, 0x00	; 0
    18f2:	10 97       	sbiw	r26, 0x00	; 0
    18f4:	61 f0       	breq	.+24     	; 0x190e <FUNCmayia+0x20>
    18f6:	21 e0       	ldi	r18, 0x01	; 1
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	e1 e0       	ldi	r30, 0x01	; 1
    18fc:	f0 e0       	ldi	r31, 0x00	; 0
    18fe:	ee 0f       	add	r30, r30
    1900:	ff 1f       	adc	r31, r31
    1902:	2f 5f       	subi	r18, 0xFF	; 255
    1904:	3f 4f       	sbci	r19, 0xFF	; 255
    1906:	a2 17       	cp	r26, r18
    1908:	b3 07       	cpc	r27, r19
    190a:	c8 f7       	brcc	.-14     	; 0x18fe <FUNCmayia+0x10>
    190c:	02 c0       	rjmp	.+4      	; 0x1912 <FUNCmayia+0x24>
    190e:	e1 e0       	ldi	r30, 0x01	; 1
    1910:	f0 e0       	ldi	r31, 0x00	; 0
    1912:	31 97       	sbiw	r30, 0x01	; 1
    1914:	6e 23       	and	r22, r30
    1916:	7f 23       	and	r23, r31
    1918:	8e 23       	and	r24, r30
    191a:	9f 23       	and	r25, r31
    191c:	86 27       	eor	r24, r22
    191e:	97 27       	eor	r25, r23
    1920:	68 23       	and	r22, r24
    1922:	79 23       	and	r23, r25
    1924:	02 c0       	rjmp	.+4      	; 0x192a <FUNCmayia+0x3c>
    1926:	66 0f       	add	r22, r22
    1928:	77 1f       	adc	r23, r23
    192a:	4a 95       	dec	r20
    192c:	e2 f7       	brpl	.-8      	; 0x1926 <FUNCmayia+0x38>
    192e:	86 2b       	or	r24, r22
    1930:	97 2b       	or	r25, r23
    1932:	08 95       	ret

00001934 <FUNCenable>:
    1934:	fc 01       	movw	r30, r24
    1936:	9f b7       	in	r25, 0x3f	; 63
    1938:	8f b7       	in	r24, 0x3f	; 63
    193a:	8f 77       	andi	r24, 0x7F	; 127
    193c:	8f bf       	out	0x3f, r24	; 63
    193e:	9f bf       	out	0x3f, r25	; 63
    1940:	89 ea       	ldi	r24, 0xA9	; 169
    1942:	9a e0       	ldi	r25, 0x0A	; 10
    1944:	91 83       	std	Z+1, r25	; 0x01
    1946:	80 83       	st	Z, r24
    1948:	84 ec       	ldi	r24, 0xC4	; 196
    194a:	9a e0       	ldi	r25, 0x0A	; 10
    194c:	93 83       	std	Z+3, r25	; 0x03
    194e:	82 83       	std	Z+2, r24	; 0x02
    1950:	8e ee       	ldi	r24, 0xEE	; 238
    1952:	9a e0       	ldi	r25, 0x0A	; 10
    1954:	95 83       	std	Z+5, r25	; 0x05
    1956:	84 83       	std	Z+4, r24	; 0x04
    1958:	87 e7       	ldi	r24, 0x77	; 119
    195a:	9c e0       	ldi	r25, 0x0C	; 12
    195c:	97 83       	std	Z+7, r25	; 0x07
    195e:	86 83       	std	Z+6, r24	; 0x06
    1960:	86 e9       	ldi	r24, 0x96	; 150
    1962:	98 e0       	ldi	r25, 0x08	; 8
    1964:	91 87       	std	Z+9, r25	; 0x09
    1966:	80 87       	std	Z+8, r24	; 0x08
    1968:	84 ea       	ldi	r24, 0xA4	; 164
    196a:	98 e0       	ldi	r25, 0x08	; 8
    196c:	93 87       	std	Z+11, r25	; 0x0b
    196e:	82 87       	std	Z+10, r24	; 0x0a
    1970:	86 ea       	ldi	r24, 0xA6	; 166
    1972:	98 e0       	ldi	r25, 0x08	; 8
    1974:	95 87       	std	Z+13, r25	; 0x0d
    1976:	84 87       	std	Z+12, r24	; 0x0c
    1978:	89 ea       	ldi	r24, 0xA9	; 169
    197a:	98 e0       	ldi	r25, 0x08	; 8
    197c:	97 87       	std	Z+15, r25	; 0x0f
    197e:	86 87       	std	Z+14, r24	; 0x0e
    1980:	8c ea       	ldi	r24, 0xAC	; 172
    1982:	98 e0       	ldi	r25, 0x08	; 8
    1984:	91 8b       	std	Z+17, r25	; 0x11
    1986:	80 8b       	std	Z+16, r24	; 0x10
    1988:	8f ea       	ldi	r24, 0xAF	; 175
    198a:	98 e0       	ldi	r25, 0x08	; 8
    198c:	93 8b       	std	Z+19, r25	; 0x13
    198e:	82 8b       	std	Z+18, r24	; 0x12
    1990:	80 ea       	ldi	r24, 0xA0	; 160
    1992:	98 e0       	ldi	r25, 0x08	; 8
    1994:	95 8b       	std	Z+21, r25	; 0x15
    1996:	84 8b       	std	Z+20, r24	; 0x14
    1998:	82 ea       	ldi	r24, 0xA2	; 162
    199a:	98 e0       	ldi	r25, 0x08	; 8
    199c:	97 8b       	std	Z+23, r25	; 0x17
    199e:	86 8b       	std	Z+22, r24	; 0x16
    19a0:	81 eb       	ldi	r24, 0xB1	; 177
    19a2:	98 e0       	ldi	r25, 0x08	; 8
    19a4:	91 8f       	std	Z+25, r25	; 0x19
    19a6:	80 8f       	std	Z+24, r24	; 0x18
    19a8:	82 ed       	ldi	r24, 0xD2	; 210
    19aa:	98 e0       	ldi	r25, 0x08	; 8
    19ac:	93 8f       	std	Z+27, r25	; 0x1b
    19ae:	82 8f       	std	Z+26, r24	; 0x1a
    19b0:	80 ee       	ldi	r24, 0xE0	; 224
    19b2:	98 e0       	ldi	r25, 0x08	; 8
    19b4:	95 8f       	std	Z+29, r25	; 0x1d
    19b6:	84 8f       	std	Z+28, r24	; 0x1c
    19b8:	82 e0       	ldi	r24, 0x02	; 2
    19ba:	99 e0       	ldi	r25, 0x09	; 9
    19bc:	97 8f       	std	Z+31, r25	; 0x1f
    19be:	86 8f       	std	Z+30, r24	; 0x1e
    19c0:	86 e6       	ldi	r24, 0x66	; 102
    19c2:	9b e0       	ldi	r25, 0x0B	; 11
    19c4:	91 a3       	std	Z+33, r25	; 0x21
    19c6:	80 a3       	std	Z+32, r24	; 0x20
    19c8:	8f e9       	ldi	r24, 0x9F	; 159
    19ca:	9b e0       	ldi	r25, 0x0B	; 11
    19cc:	93 a3       	std	Z+35, r25	; 0x23
    19ce:	82 a3       	std	Z+34, r24	; 0x22
    19d0:	8b e0       	ldi	r24, 0x0B	; 11
    19d2:	9b e0       	ldi	r25, 0x0B	; 11
    19d4:	95 a3       	std	Z+37, r25	; 0x25
    19d6:	84 a3       	std	Z+36, r24	; 0x24
    19d8:	83 ed       	ldi	r24, 0xD3	; 211
    19da:	9a e0       	ldi	r25, 0x0A	; 10
    19dc:	97 a3       	std	Z+39, r25	; 0x27
    19de:	86 a3       	std	Z+38, r24	; 0x26
    19e0:	88 ea       	ldi	r24, 0xA8	; 168
    19e2:	99 e0       	ldi	r25, 0x09	; 9
    19e4:	91 a7       	std	Z+41, r25	; 0x29
    19e6:	80 a7       	std	Z+40, r24	; 0x28
    19e8:	8d ea       	ldi	r24, 0xAD	; 173
    19ea:	99 e0       	ldi	r25, 0x09	; 9
    19ec:	93 a7       	std	Z+43, r25	; 0x2b
    19ee:	82 a7       	std	Z+42, r24	; 0x2a
    19f0:	8c eb       	ldi	r24, 0xBC	; 188
    19f2:	99 e0       	ldi	r25, 0x09	; 9
    19f4:	95 a7       	std	Z+45, r25	; 0x2d
    19f6:	84 a7       	std	Z+44, r24	; 0x2c
    19f8:	80 ee       	ldi	r24, 0xE0	; 224
    19fa:	99 e0       	ldi	r25, 0x09	; 9
    19fc:	97 a7       	std	Z+47, r25	; 0x2f
    19fe:	86 a7       	std	Z+46, r24	; 0x2e
    1a00:	82 ee       	ldi	r24, 0xE2	; 226
    1a02:	99 e0       	ldi	r25, 0x09	; 9
    1a04:	91 ab       	std	Z+49, r25	; 0x31
    1a06:	80 ab       	std	Z+48, r24	; 0x30
    1a08:	8c ee       	ldi	r24, 0xEC	; 236
    1a0a:	99 e0       	ldi	r25, 0x09	; 9
    1a0c:	93 ab       	std	Z+51, r25	; 0x33
    1a0e:	82 ab       	std	Z+50, r24	; 0x32
    1a10:	89 ef       	ldi	r24, 0xF9	; 249
    1a12:	99 e0       	ldi	r25, 0x09	; 9
    1a14:	95 ab       	std	Z+53, r25	; 0x35
    1a16:	84 ab       	std	Z+52, r24	; 0x34
    1a18:	85 e0       	ldi	r24, 0x05	; 5
    1a1a:	9a e0       	ldi	r25, 0x0A	; 10
    1a1c:	97 ab       	std	Z+55, r25	; 0x37
    1a1e:	86 ab       	std	Z+54, r24	; 0x36
    1a20:	8d e1       	ldi	r24, 0x1D	; 29
    1a22:	9a e0       	ldi	r25, 0x0A	; 10
    1a24:	91 af       	std	Z+57, r25	; 0x39
    1a26:	80 af       	std	Z+56, r24	; 0x38
    1a28:	80 e3       	ldi	r24, 0x30	; 48
    1a2a:	9a e0       	ldi	r25, 0x0A	; 10
    1a2c:	93 af       	std	Z+59, r25	; 0x3b
    1a2e:	82 af       	std	Z+58, r24	; 0x3a
    1a30:	8b e3       	ldi	r24, 0x3B	; 59
    1a32:	9a e0       	ldi	r25, 0x0A	; 10
    1a34:	95 af       	std	Z+61, r25	; 0x3d
    1a36:	84 af       	std	Z+60, r24	; 0x3c
    1a38:	88 e6       	ldi	r24, 0x68	; 104
    1a3a:	9a e0       	ldi	r25, 0x0A	; 10
    1a3c:	97 af       	std	Z+63, r25	; 0x3f
    1a3e:	86 af       	std	Z+62, r24	; 0x3e
    1a40:	df 01       	movw	r26, r30
    1a42:	a0 5c       	subi	r26, 0xC0	; 192
    1a44:	bf 4f       	sbci	r27, 0xFF	; 255
    1a46:	8d ed       	ldi	r24, 0xDD	; 221
    1a48:	9b e0       	ldi	r25, 0x0B	; 11
    1a4a:	11 96       	adiw	r26, 0x01	; 1
    1a4c:	9c 93       	st	X, r25
    1a4e:	8e 93       	st	-X, r24
    1a50:	12 96       	adiw	r26, 0x02	; 2
    1a52:	88 ee       	ldi	r24, 0xE8	; 232
    1a54:	9b e0       	ldi	r25, 0x0B	; 11
    1a56:	11 96       	adiw	r26, 0x01	; 1
    1a58:	9c 93       	st	X, r25
    1a5a:	8e 93       	st	-X, r24
    1a5c:	12 96       	adiw	r26, 0x02	; 2
    1a5e:	89 e0       	ldi	r24, 0x09	; 9
    1a60:	9c e0       	ldi	r25, 0x0C	; 12
    1a62:	11 96       	adiw	r26, 0x01	; 1
    1a64:	9c 93       	st	X, r25
    1a66:	8e 93       	st	-X, r24
    1a68:	12 96       	adiw	r26, 0x02	; 2
    1a6a:	89 e5       	ldi	r24, 0x59	; 89
    1a6c:	9c e0       	ldi	r25, 0x0C	; 12
    1a6e:	11 96       	adiw	r26, 0x01	; 1
    1a70:	9c 93       	st	X, r25
    1a72:	8e 93       	st	-X, r24
    1a74:	12 96       	adiw	r26, 0x02	; 2
    1a76:	81 e6       	ldi	r24, 0x61	; 97
    1a78:	9c e0       	ldi	r25, 0x0C	; 12
    1a7a:	11 96       	adiw	r26, 0x01	; 1
    1a7c:	9c 93       	st	X, r25
    1a7e:	8e 93       	st	-X, r24
    1a80:	12 96       	adiw	r26, 0x02	; 2
    1a82:	81 ea       	ldi	r24, 0xA1	; 161
    1a84:	9d e0       	ldi	r25, 0x0D	; 13
    1a86:	8d 93       	st	X+, r24
    1a88:	9c 93       	st	X, r25
    1a8a:	cf 01       	movw	r24, r30
    1a8c:	08 95       	ret

00001a8e <FUNCintinvstr>:
/***intinvstr***/
uint8_t FUNCintinvstr(int32_t n, char* res, uint8_t n_digit)
{
    1a8e:	8f 92       	push	r8
    1a90:	9f 92       	push	r9
    1a92:	af 92       	push	r10
    1a94:	bf 92       	push	r11
    1a96:	ef 92       	push	r14
    1a98:	ff 92       	push	r15
    1a9a:	0f 93       	push	r16
    1a9c:	1f 93       	push	r17
    1a9e:	cf 93       	push	r28
    1aa0:	df 93       	push	r29
    1aa2:	8a 01       	movw	r16, r20
    1aa4:	d2 2f       	mov	r29, r18
	uint8_t k=0;
	for(res[k++] = (n % 10) + '0' ; (n/=10) > ZERO ; res[k++] = (n % 10) + '0');
    1aa6:	2a e0       	ldi	r18, 0x0A	; 10
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	40 e0       	ldi	r20, 0x00	; 0
    1aac:	50 e0       	ldi	r21, 0x00	; 0
    1aae:	0e 94 fd 23 	call	0x47fa	; 0x47fa <__divmodsi4>
    1ab2:	60 5d       	subi	r22, 0xD0	; 208
    1ab4:	f8 01       	movw	r30, r16
    1ab6:	60 83       	st	Z, r22
    1ab8:	62 2f       	mov	r22, r18
    1aba:	73 2f       	mov	r23, r19
    1abc:	84 2f       	mov	r24, r20
    1abe:	95 2f       	mov	r25, r21
    1ac0:	16 16       	cp	r1, r22
    1ac2:	17 06       	cpc	r1, r23
    1ac4:	18 06       	cpc	r1, r24
    1ac6:	19 06       	cpc	r1, r25
    1ac8:	fc f4       	brge	.+62     	; 0x1b08 <FUNCintinvstr+0x7a>
    1aca:	21 e0       	ldi	r18, 0x01	; 1
    1acc:	0f 2e       	mov	r0, r31
    1ace:	fa e0       	ldi	r31, 0x0A	; 10
    1ad0:	8f 2e       	mov	r8, r31
    1ad2:	91 2c       	mov	r9, r1
    1ad4:	a1 2c       	mov	r10, r1
    1ad6:	b1 2c       	mov	r11, r1
    1ad8:	f0 2d       	mov	r31, r0
    1ada:	c1 e0       	ldi	r28, 0x01	; 1
    1adc:	c2 0f       	add	r28, r18
    1ade:	78 01       	movw	r14, r16
    1ae0:	e2 0e       	add	r14, r18
    1ae2:	f1 1c       	adc	r15, r1
    1ae4:	a5 01       	movw	r20, r10
    1ae6:	94 01       	movw	r18, r8
    1ae8:	0e 94 fd 23 	call	0x47fa	; 0x47fa <__divmodsi4>
    1aec:	60 5d       	subi	r22, 0xD0	; 208
    1aee:	f7 01       	movw	r30, r14
    1af0:	60 83       	st	Z, r22
    1af2:	62 2f       	mov	r22, r18
    1af4:	73 2f       	mov	r23, r19
    1af6:	84 2f       	mov	r24, r20
    1af8:	95 2f       	mov	r25, r21
    1afa:	2c 2f       	mov	r18, r28
    1afc:	16 16       	cp	r1, r22
    1afe:	17 06       	cpc	r1, r23
    1b00:	18 06       	cpc	r1, r24
    1b02:	19 06       	cpc	r1, r25
    1b04:	54 f3       	brlt	.-44     	; 0x1ada <FUNCintinvstr+0x4c>
    1b06:	01 c0       	rjmp	.+2      	; 0x1b0a <FUNCintinvstr+0x7c>
    1b08:	c1 e0       	ldi	r28, 0x01	; 1
	for( ; k < n_digit ; res[k++] = '0');
    1b0a:	cd 17       	cp	r28, r29
    1b0c:	48 f4       	brcc	.+18     	; 0x1b20 <FUNCintinvstr+0x92>
    1b0e:	80 e3       	ldi	r24, 0x30	; 48
    1b10:	f8 01       	movw	r30, r16
    1b12:	ec 0f       	add	r30, r28
    1b14:	f1 1d       	adc	r31, r1
    1b16:	80 83       	st	Z, r24
    1b18:	cf 5f       	subi	r28, 0xFF	; 255
    1b1a:	dc 13       	cpse	r29, r28
    1b1c:	f9 cf       	rjmp	.-14     	; 0x1b10 <FUNCintinvstr+0x82>
    1b1e:	01 c0       	rjmp	.+2      	; 0x1b22 <FUNCintinvstr+0x94>
    1b20:	dc 2f       	mov	r29, r28
	res[k]='\0';
    1b22:	f8 01       	movw	r30, r16
    1b24:	ed 0f       	add	r30, r29
    1b26:	f1 1d       	adc	r31, r1
    1b28:	10 82       	st	Z, r1
	return k;
}
    1b2a:	8d 2f       	mov	r24, r29
    1b2c:	df 91       	pop	r29
    1b2e:	cf 91       	pop	r28
    1b30:	1f 91       	pop	r17
    1b32:	0f 91       	pop	r16
    1b34:	ff 90       	pop	r15
    1b36:	ef 90       	pop	r14
    1b38:	bf 90       	pop	r11
    1b3a:	af 90       	pop	r10
    1b3c:	9f 90       	pop	r9
    1b3e:	8f 90       	pop	r8
    1b40:	08 95       	ret

00001b42 <FUNCftoa>:
/***ftoa***/
char* FUNCftoa(float n, char* res, uint8_t afterpoint)
{
    1b42:	4f 92       	push	r4
    1b44:	5f 92       	push	r5
    1b46:	6f 92       	push	r6
    1b48:	7f 92       	push	r7
    1b4a:	8f 92       	push	r8
    1b4c:	9f 92       	push	r9
    1b4e:	af 92       	push	r10
    1b50:	bf 92       	push	r11
    1b52:	cf 92       	push	r12
    1b54:	df 92       	push	r13
    1b56:	ef 92       	push	r14
    1b58:	ff 92       	push	r15
    1b5a:	1f 93       	push	r17
    1b5c:	cf 93       	push	r28
    1b5e:	df 93       	push	r29
    1b60:	6b 01       	movw	r12, r22
    1b62:	7c 01       	movw	r14, r24
    1b64:	ea 01       	movw	r28, r20
    1b66:	12 2f       	mov	r17, r18
	uint8_t k=ZERO;
	int32_t ipart;
	float fpart;
	int8_t sign;
	if (n < ZERO){
    1b68:	20 e0       	ldi	r18, 0x00	; 0
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	a9 01       	movw	r20, r18
    1b6e:	0e 94 8e 20 	call	0x411c	; 0x411c <__cmpsf2>
    1b72:	88 23       	and	r24, r24
    1b74:	0c f0       	brlt	.+2      	; 0x1b78 <FUNCftoa+0x36>
    1b76:	4d c0       	rjmp	.+154    	; 0x1c12 <FUNCftoa+0xd0>
		n = -n;
    1b78:	f7 fa       	bst	r15, 7
    1b7a:	f0 94       	com	r15
    1b7c:	f7 f8       	bld	r15, 7
    1b7e:	f0 94       	com	r15
		sign=-ONE;
	}else
		sign=ONE;
	ipart = (int32_t) n;
    1b80:	c7 01       	movw	r24, r14
    1b82:	b6 01       	movw	r22, r12
    1b84:	0e 94 92 20 	call	0x4124	; 0x4124 <__fixsfsi>
    1b88:	4b 01       	movw	r8, r22
    1b8a:	5c 01       	movw	r10, r24
	fpart = n - (float)ipart;
    1b8c:	0e 94 c5 20 	call	0x418a	; 0x418a <__floatsisf>
    1b90:	9b 01       	movw	r18, r22
    1b92:	ac 01       	movw	r20, r24
    1b94:	c7 01       	movw	r24, r14
    1b96:	b6 01       	movw	r22, r12
    1b98:	0e 94 29 20 	call	0x4052	; 0x4052 <__subsf3>
    1b9c:	2b 01       	movw	r4, r22
    1b9e:	3c 01       	movw	r6, r24
	k=FUNCintinvstr( ipart, res, ONE );
    1ba0:	21 e0       	ldi	r18, 0x01	; 1
    1ba2:	ae 01       	movw	r20, r28
    1ba4:	c5 01       	movw	r24, r10
    1ba6:	b4 01       	movw	r22, r8
    1ba8:	72 df       	rcall	.-284    	; 0x1a8e <FUNCintinvstr>
	if (sign < ZERO)
		res[k++] = '-';
    1baa:	ff 24       	eor	r15, r15
    1bac:	f3 94       	inc	r15
    1bae:	f8 0e       	add	r15, r24
    1bb0:	fe 01       	movw	r30, r28
    1bb2:	e8 0f       	add	r30, r24
    1bb4:	f1 1d       	adc	r31, r1
    1bb6:	8d e2       	ldi	r24, 0x2D	; 45
    1bb8:	80 83       	st	Z, r24
	else
		res[k++] = ' ';
	res[k]='\0';
    1bba:	6e 01       	movw	r12, r28
    1bbc:	cf 0c       	add	r12, r15
    1bbe:	d1 1c       	adc	r13, r1
    1bc0:	f6 01       	movw	r30, r12
    1bc2:	10 82       	st	Z, r1
	Reverse(res);
    1bc4:	ce 01       	movw	r24, r28
    1bc6:	0a dd       	rcall	.-1516   	; 0x15dc <Reverse>
	if (afterpoint > ZERO) {
    1bc8:	11 23       	and	r17, r17
    1bca:	09 f4       	brne	.+2      	; 0x1bce <FUNCftoa+0x8c>
    1bcc:	40 c0       	rjmp	.+128    	; 0x1c4e <FUNCftoa+0x10c>
		res[k++] = '.';
    1bce:	8e e2       	ldi	r24, 0x2E	; 46
    1bd0:	f6 01       	movw	r30, r12
    1bd2:	80 83       	st	Z, r24
		FUNCintinvstr( fpart * pow(10, afterpoint), res+k, afterpoint );
    1bd4:	f3 94       	inc	r15
    1bd6:	ce 01       	movw	r24, r28
    1bd8:	8f 0d       	add	r24, r15
    1bda:	91 1d       	adc	r25, r1
    1bdc:	7c 01       	movw	r14, r24
    1bde:	61 2f       	mov	r22, r17
    1be0:	70 e0       	ldi	r23, 0x00	; 0
    1be2:	80 e0       	ldi	r24, 0x00	; 0
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	0e 94 c3 20 	call	0x4186	; 0x4186 <__floatunsisf>
    1bea:	9b 01       	movw	r18, r22
    1bec:	ac 01       	movw	r20, r24
    1bee:	60 e0       	ldi	r22, 0x00	; 0
    1bf0:	70 e0       	ldi	r23, 0x00	; 0
    1bf2:	80 e2       	ldi	r24, 0x20	; 32
    1bf4:	91 e4       	ldi	r25, 0x41	; 65
    1bf6:	0e 94 d8 21 	call	0x43b0	; 0x43b0 <pow>
    1bfa:	a3 01       	movw	r20, r6
    1bfc:	92 01       	movw	r18, r4
    1bfe:	0e 94 75 21 	call	0x42ea	; 0x42ea <__mulsf3>
    1c02:	0e 94 92 20 	call	0x4124	; 0x4124 <__fixsfsi>
    1c06:	21 2f       	mov	r18, r17
    1c08:	a7 01       	movw	r20, r14
		Reverse(res+k);
    1c0a:	41 df       	rcall	.-382    	; 0x1a8e <FUNCintinvstr>
    1c0c:	c7 01       	movw	r24, r14
    1c0e:	e6 dc       	rcall	.-1588   	; 0x15dc <Reverse>
	}	
	return res;
    1c10:	1e c0       	rjmp	.+60     	; 0x1c4e <FUNCftoa+0x10c>
	if (n < ZERO){
		n = -n;
		sign=-ONE;
	}else
		sign=ONE;
	ipart = (int32_t) n;
    1c12:	c7 01       	movw	r24, r14
    1c14:	b6 01       	movw	r22, r12
    1c16:	0e 94 92 20 	call	0x4124	; 0x4124 <__fixsfsi>
    1c1a:	4b 01       	movw	r8, r22
    1c1c:	5c 01       	movw	r10, r24
	fpart = n - (float)ipart;
    1c1e:	0e 94 c5 20 	call	0x418a	; 0x418a <__floatsisf>
    1c22:	9b 01       	movw	r18, r22
    1c24:	ac 01       	movw	r20, r24
    1c26:	c7 01       	movw	r24, r14
    1c28:	b6 01       	movw	r22, r12
    1c2a:	0e 94 29 20 	call	0x4052	; 0x4052 <__subsf3>
    1c2e:	2b 01       	movw	r4, r22
    1c30:	3c 01       	movw	r6, r24
	k=FUNCintinvstr( ipart, res, ONE );
    1c32:	21 e0       	ldi	r18, 0x01	; 1
    1c34:	ae 01       	movw	r20, r28
    1c36:	c5 01       	movw	r24, r10
    1c38:	b4 01       	movw	r22, r8
    1c3a:	29 df       	rcall	.-430    	; 0x1a8e <FUNCintinvstr>
	if (sign < ZERO)
		res[k++] = '-';
	else
		res[k++] = ' ';
    1c3c:	ff 24       	eor	r15, r15
    1c3e:	f3 94       	inc	r15
    1c40:	f8 0e       	add	r15, r24
    1c42:	fe 01       	movw	r30, r28
    1c44:	e8 0f       	add	r30, r24
    1c46:	f1 1d       	adc	r31, r1
    1c48:	80 e2       	ldi	r24, 0x20	; 32
    1c4a:	80 83       	st	Z, r24
    1c4c:	b6 cf       	rjmp	.-148    	; 0x1bba <FUNCftoa+0x78>
		res[k++] = '.';
		FUNCintinvstr( fpart * pow(10, afterpoint), res+k, afterpoint );
		Reverse(res+k);
	}	
	return res;
}
    1c4e:	ce 01       	movw	r24, r28
    1c50:	df 91       	pop	r29
    1c52:	cf 91       	pop	r28
    1c54:	1f 91       	pop	r17
    1c56:	ff 90       	pop	r15
    1c58:	ef 90       	pop	r14
    1c5a:	df 90       	pop	r13
    1c5c:	cf 90       	pop	r12
    1c5e:	bf 90       	pop	r11
    1c60:	af 90       	pop	r10
    1c62:	9f 90       	pop	r9
    1c64:	8f 90       	pop	r8
    1c66:	7f 90       	pop	r7
    1c68:	6f 90       	pop	r6
    1c6a:	5f 90       	pop	r5
    1c6c:	4f 90       	pop	r4
    1c6e:	08 95       	ret

00001c70 <KEYPAD_get>:
	}
	return data;
}
/***read***/
struct keypadata KEYPAD_get(void)
{
    1c70:	cf 93       	push	r28
    1c72:	df 93       	push	r29
    1c74:	00 d0       	rcall	.+0      	; 0x1c76 <KEYPAD_get+0x6>
    1c76:	00 d0       	rcall	.+0      	; 0x1c78 <KEYPAD_get+0x8>
    1c78:	1f 92       	push	r1
    1c7a:	cd b7       	in	r28, 0x3d	; 61
    1c7c:	de b7       	in	r29, 0x3e	; 62
	return data;
    1c7e:	85 e0       	ldi	r24, 0x05	; 5
    1c80:	e2 e4       	ldi	r30, 0x42	; 66
    1c82:	f4 e0       	ldi	r31, 0x04	; 4
    1c84:	de 01       	movw	r26, r28
    1c86:	11 96       	adiw	r26, 0x01	; 1
    1c88:	01 90       	ld	r0, Z+
    1c8a:	0d 92       	st	X+, r0
    1c8c:	8a 95       	dec	r24
    1c8e:	e1 f7       	brne	.-8      	; 0x1c88 <KEYPAD_get+0x18>
    1c90:	29 81       	ldd	r18, Y+1	; 0x01
    1c92:	3a 81       	ldd	r19, Y+2	; 0x02
    1c94:	4b 81       	ldd	r20, Y+3	; 0x03
    1c96:	5c 81       	ldd	r21, Y+4	; 0x04
    1c98:	6d 81       	ldd	r22, Y+5	; 0x05
}
    1c9a:	70 e0       	ldi	r23, 0x00	; 0
    1c9c:	80 e0       	ldi	r24, 0x00	; 0
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	0f 90       	pop	r0
    1ca2:	0f 90       	pop	r0
    1ca4:	0f 90       	pop	r0
    1ca6:	0f 90       	pop	r0
    1ca8:	0f 90       	pop	r0
    1caa:	df 91       	pop	r29
    1cac:	cf 91       	pop	r28
    1cae:	08 95       	ret

00001cb0 <KEYPAD_flush>:
/***flush***/
void KEYPAD_flush(void)
{
	KEYPADSTRINGINDEX=0;
    1cb0:	10 92 0f 04 	sts	0x040F, r1	; 0x80040f <KEYPADSTRINGINDEX>
	data.character=' ';
    1cb4:	e2 e4       	ldi	r30, 0x42	; 66
    1cb6:	f4 e0       	ldi	r31, 0x04	; 4
    1cb8:	80 e2       	ldi	r24, 0x20	; 32
    1cba:	80 83       	st	Z, r24
	data.printstring="\0";
    1cbc:	82 e1       	ldi	r24, 0x12	; 18
    1cbe:	91 e0       	ldi	r25, 0x01	; 1
    1cc0:	92 83       	std	Z+2, r25	; 0x02
    1cc2:	81 83       	std	Z+1, r24	; 0x01
	data.string="\0";
    1cc4:	94 83       	std	Z+4, r25	; 0x04
    1cc6:	83 83       	std	Z+3, r24	; 0x03
    1cc8:	08 95       	ret

00001cca <KEYPAD_getkey>:
	*keypad_PORT|=(1<<KEYPADLINE_1) | (1<<KEYPADLINE_2) | (1<<KEYPADLINE_3) | (1<<KEYPADLINE_4);
	//Going to use pull down method.
	return keypad;
}
char KEYPAD_getkey(void)
{
    1cca:	cf 93       	push	r28
    1ccc:	df 93       	push	r29
    1cce:	21 e0       	ldi	r18, 0x01	; 1
	uint8_t HL;
	char c='\0';
    1cd0:	80 e0       	ldi	r24, 0x00	; 0
				*keypad_PORT|=(1<<KEYPADLINE_1);
				break;
			case 1: //line 2 index 1
				*keypad_DDR|=(1<<KEYPADLINE_2);
				*keypad_PORT&=~(1<<KEYPADLINE_2);
				keypad_dataf.line_2=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
    1cd2:	a7 e0       	ldi	r26, 0x07	; 7
    1cd4:	b4 e0       	ldi	r27, 0x04	; 4
				HL=KEYPADhl(keypad_datai.line_2,keypad_dataf.line_2);
    1cd6:	eb e0       	ldi	r30, 0x0B	; 11
    1cd8:	f4 e0       	ldi	r31, 0x04	; 4
					if(HL == (1<<KEYPADDATA_2))
						c=keypadvalue[1][1];
					if(HL == (1<<KEYPADDATA_3))
						c=keypadvalue[1][2];
					if(HL == (1<<KEYPADDATA_4))
						c=keypadvalue[1][3];
    1cda:	60 e0       	ldi	r22, 0x00	; 0
    1cdc:	71 e0       	ldi	r23, 0x01	; 1
    1cde:	01 c0       	rjmp	.+2      	; 0x1ce2 <KEYPAD_getkey+0x18>
    1ce0:	2f 5f       	subi	r18, 0xFF	; 255
{
	uint8_t HL;
	char c='\0';
	uint8_t keypad_option;
	for(keypad_option=0;keypad_option<KEYPADLINES;keypad_option++){
		switch (keypad_option)
    1ce2:	9f ef       	ldi	r25, 0xFF	; 255
    1ce4:	92 0f       	add	r25, r18
    1ce6:	91 30       	cpi	r25, 0x01	; 1
    1ce8:	09 f4       	brne	.+2      	; 0x1cec <KEYPAD_getkey+0x22>
    1cea:	4b c0       	rjmp	.+150    	; 0x1d82 <KEYPAD_getkey+0xb8>
    1cec:	38 f0       	brcs	.+14     	; 0x1cfc <KEYPAD_getkey+0x32>
    1cee:	92 30       	cpi	r25, 0x02	; 2
    1cf0:	09 f4       	brne	.+2      	; 0x1cf4 <KEYPAD_getkey+0x2a>
    1cf2:	8c c0       	rjmp	.+280    	; 0x1e0c <KEYPAD_getkey+0x142>
    1cf4:	93 30       	cpi	r25, 0x03	; 3
    1cf6:	09 f4       	brne	.+2      	; 0x1cfa <KEYPAD_getkey+0x30>
    1cf8:	ce c0       	rjmp	.+412    	; 0x1e96 <KEYPAD_getkey+0x1cc>
    1cfa:	0e c1       	rjmp	.+540    	; 0x1f18 <KEYPAD_getkey+0x24e>
		{
			case 0: //line 1 index 0
				*keypad_DDR|=(1<<KEYPADLINE_1);
    1cfc:	40 91 12 04 	lds	r20, 0x0412	; 0x800412 <keypad_DDR>
    1d00:	50 91 13 04 	lds	r21, 0x0413	; 0x800413 <keypad_DDR+0x1>
    1d04:	ea 01       	movw	r28, r20
    1d06:	98 81       	ld	r25, Y
    1d08:	90 68       	ori	r25, 0x80	; 128
    1d0a:	98 83       	st	Y, r25
				*keypad_PORT&=~(1<<KEYPADLINE_1);
    1d0c:	40 91 04 04 	lds	r20, 0x0404	; 0x800404 <keypad_PORT>
    1d10:	50 91 05 04 	lds	r21, 0x0405	; 0x800405 <keypad_PORT+0x1>
    1d14:	ea 01       	movw	r28, r20
    1d16:	98 81       	ld	r25, Y
    1d18:	9f 77       	andi	r25, 0x7F	; 127
    1d1a:	98 83       	st	Y, r25
				keypad_dataf.line_1=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
    1d1c:	40 91 10 04 	lds	r20, 0x0410	; 0x800410 <keypad_PIN>
    1d20:	50 91 11 04 	lds	r21, 0x0411	; 0x800411 <keypad_PIN+0x1>
    1d24:	ea 01       	movw	r28, r20
    1d26:	38 81       	ld	r19, Y
    1d28:	34 77       	andi	r19, 0x74	; 116
    1d2a:	3c 93       	st	X, r19
				HL=KEYPADhl(keypad_datai.line_1,keypad_dataf.line_1);
    1d2c:	90 81       	ld	r25, Z
uint8_t KEYPADhl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	//printf("KEYPADhl\n");
	i=xf^xi;
	i&=xi;
    1d2e:	43 2f       	mov	r20, r19
    1d30:	49 27       	eor	r20, r25
    1d32:	94 23       	and	r25, r20
			case 0: //line 1 index 0
				*keypad_DDR|=(1<<KEYPADLINE_1);
				*keypad_PORT&=~(1<<KEYPADLINE_1);
				keypad_dataf.line_1=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
				HL=KEYPADhl(keypad_datai.line_1,keypad_dataf.line_1);
				keypad_datai.line_1=keypad_dataf.line_1;
    1d34:	30 83       	st	Z, r19
				if(HL){
    1d36:	99 23       	and	r25, r25
    1d38:	99 f0       	breq	.+38     	; 0x1d60 <KEYPAD_getkey+0x96>
					//decode index line one column what ?
					if(HL == (1<<KEYPADDATA_1))
    1d3a:	94 30       	cpi	r25, 0x04	; 4
    1d3c:	19 f4       	brne	.+6      	; 0x1d44 <KEYPAD_getkey+0x7a>
						c=keypadvalue[0][0];
    1d3e:	eb 01       	movw	r28, r22
    1d40:	88 81       	ld	r24, Y
    1d42:	0a c0       	rjmp	.+20     	; 0x1d58 <KEYPAD_getkey+0x8e>
					if(HL == (1<<KEYPADDATA_2))
    1d44:	90 31       	cpi	r25, 0x10	; 16
    1d46:	19 f4       	brne	.+6      	; 0x1d4e <KEYPAD_getkey+0x84>
						c=keypadvalue[0][1];
    1d48:	eb 01       	movw	r28, r22
    1d4a:	89 81       	ldd	r24, Y+1	; 0x01
    1d4c:	09 c0       	rjmp	.+18     	; 0x1d60 <KEYPAD_getkey+0x96>
					if(HL == (1<<KEYPADDATA_3))
    1d4e:	90 32       	cpi	r25, 0x20	; 32
    1d50:	19 f4       	brne	.+6      	; 0x1d58 <KEYPAD_getkey+0x8e>
						c=keypadvalue[0][2];
    1d52:	eb 01       	movw	r28, r22
    1d54:	8a 81       	ldd	r24, Y+2	; 0x02
    1d56:	04 c0       	rjmp	.+8      	; 0x1d60 <KEYPAD_getkey+0x96>
					if(HL == (1<<KEYPADDATA_4))
    1d58:	90 34       	cpi	r25, 0x40	; 64
    1d5a:	11 f4       	brne	.+4      	; 0x1d60 <KEYPAD_getkey+0x96>
						c=keypadvalue[0][3];
    1d5c:	eb 01       	movw	r28, r22
    1d5e:	8b 81       	ldd	r24, Y+3	; 0x03
				}
				*keypad_DDR&=~(1<<KEYPADLINE_1);
    1d60:	40 91 12 04 	lds	r20, 0x0412	; 0x800412 <keypad_DDR>
    1d64:	50 91 13 04 	lds	r21, 0x0413	; 0x800413 <keypad_DDR+0x1>
    1d68:	ea 01       	movw	r28, r20
    1d6a:	98 81       	ld	r25, Y
    1d6c:	9f 77       	andi	r25, 0x7F	; 127
    1d6e:	98 83       	st	Y, r25
				*keypad_PORT|=(1<<KEYPADLINE_1);
    1d70:	40 91 04 04 	lds	r20, 0x0404	; 0x800404 <keypad_PORT>
    1d74:	50 91 05 04 	lds	r21, 0x0405	; 0x800405 <keypad_PORT+0x1>
    1d78:	ea 01       	movw	r28, r20
    1d7a:	98 81       	ld	r25, Y
    1d7c:	90 68       	ori	r25, 0x80	; 128
    1d7e:	98 83       	st	Y, r25
				break;
    1d80:	af cf       	rjmp	.-162    	; 0x1ce0 <KEYPAD_getkey+0x16>
			case 1: //line 2 index 1
				*keypad_DDR|=(1<<KEYPADLINE_2);
    1d82:	40 91 12 04 	lds	r20, 0x0412	; 0x800412 <keypad_DDR>
    1d86:	50 91 13 04 	lds	r21, 0x0413	; 0x800413 <keypad_DDR+0x1>
    1d8a:	ea 01       	movw	r28, r20
    1d8c:	98 81       	ld	r25, Y
    1d8e:	91 60       	ori	r25, 0x01	; 1
    1d90:	98 83       	st	Y, r25
				*keypad_PORT&=~(1<<KEYPADLINE_2);
    1d92:	40 91 04 04 	lds	r20, 0x0404	; 0x800404 <keypad_PORT>
    1d96:	50 91 05 04 	lds	r21, 0x0405	; 0x800405 <keypad_PORT+0x1>
    1d9a:	ea 01       	movw	r28, r20
    1d9c:	98 81       	ld	r25, Y
    1d9e:	9e 7f       	andi	r25, 0xFE	; 254
    1da0:	98 83       	st	Y, r25
				keypad_dataf.line_2=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
    1da2:	40 91 10 04 	lds	r20, 0x0410	; 0x800410 <keypad_PIN>
    1da6:	50 91 11 04 	lds	r21, 0x0411	; 0x800411 <keypad_PIN+0x1>
    1daa:	ea 01       	movw	r28, r20
    1dac:	38 81       	ld	r19, Y
    1dae:	34 77       	andi	r19, 0x74	; 116
    1db0:	11 96       	adiw	r26, 0x01	; 1
    1db2:	3c 93       	st	X, r19
    1db4:	11 97       	sbiw	r26, 0x01	; 1
				HL=KEYPADhl(keypad_datai.line_2,keypad_dataf.line_2);
    1db6:	91 81       	ldd	r25, Z+1	; 0x01
uint8_t KEYPADhl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	//printf("KEYPADhl\n");
	i=xf^xi;
	i&=xi;
    1db8:	43 2f       	mov	r20, r19
    1dba:	49 27       	eor	r20, r25
    1dbc:	94 23       	and	r25, r20
			case 1: //line 2 index 1
				*keypad_DDR|=(1<<KEYPADLINE_2);
				*keypad_PORT&=~(1<<KEYPADLINE_2);
				keypad_dataf.line_2=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
				HL=KEYPADhl(keypad_datai.line_2,keypad_dataf.line_2);
				keypad_datai.line_2=keypad_dataf.line_2;
    1dbe:	31 83       	std	Z+1, r19	; 0x01
				if(HL){
    1dc0:	99 23       	and	r25, r25
    1dc2:	99 f0       	breq	.+38     	; 0x1dea <KEYPAD_getkey+0x120>
					//decode index line two column what ?
					if(HL == (1<<KEYPADDATA_1))
    1dc4:	94 30       	cpi	r25, 0x04	; 4
    1dc6:	19 f4       	brne	.+6      	; 0x1dce <KEYPAD_getkey+0x104>
						c=keypadvalue[1][0];
    1dc8:	eb 01       	movw	r28, r22
    1dca:	8c 81       	ldd	r24, Y+4	; 0x04
    1dcc:	0a c0       	rjmp	.+20     	; 0x1de2 <KEYPAD_getkey+0x118>
					if(HL == (1<<KEYPADDATA_2))
    1dce:	90 31       	cpi	r25, 0x10	; 16
    1dd0:	19 f4       	brne	.+6      	; 0x1dd8 <KEYPAD_getkey+0x10e>
						c=keypadvalue[1][1];
    1dd2:	eb 01       	movw	r28, r22
    1dd4:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd6:	09 c0       	rjmp	.+18     	; 0x1dea <KEYPAD_getkey+0x120>
					if(HL == (1<<KEYPADDATA_3))
    1dd8:	90 32       	cpi	r25, 0x20	; 32
    1dda:	19 f4       	brne	.+6      	; 0x1de2 <KEYPAD_getkey+0x118>
						c=keypadvalue[1][2];
    1ddc:	eb 01       	movw	r28, r22
    1dde:	8e 81       	ldd	r24, Y+6	; 0x06
    1de0:	04 c0       	rjmp	.+8      	; 0x1dea <KEYPAD_getkey+0x120>
					if(HL == (1<<KEYPADDATA_4))
    1de2:	90 34       	cpi	r25, 0x40	; 64
    1de4:	11 f4       	brne	.+4      	; 0x1dea <KEYPAD_getkey+0x120>
						c=keypadvalue[1][3];
    1de6:	eb 01       	movw	r28, r22
    1de8:	8f 81       	ldd	r24, Y+7	; 0x07
				}
				*keypad_DDR&=~(1<<KEYPADLINE_2);
    1dea:	40 91 12 04 	lds	r20, 0x0412	; 0x800412 <keypad_DDR>
    1dee:	50 91 13 04 	lds	r21, 0x0413	; 0x800413 <keypad_DDR+0x1>
    1df2:	ea 01       	movw	r28, r20
    1df4:	98 81       	ld	r25, Y
    1df6:	9e 7f       	andi	r25, 0xFE	; 254
    1df8:	98 83       	st	Y, r25
				*keypad_PORT|=(1<<KEYPADLINE_2);
    1dfa:	40 91 04 04 	lds	r20, 0x0404	; 0x800404 <keypad_PORT>
    1dfe:	50 91 05 04 	lds	r21, 0x0405	; 0x800405 <keypad_PORT+0x1>
    1e02:	ea 01       	movw	r28, r20
    1e04:	98 81       	ld	r25, Y
    1e06:	91 60       	ori	r25, 0x01	; 1
    1e08:	98 83       	st	Y, r25
				break;
    1e0a:	6a cf       	rjmp	.-300    	; 0x1ce0 <KEYPAD_getkey+0x16>
			case 2: //line 3 index 2
				*keypad_DDR|=(1<<KEYPADLINE_3);
    1e0c:	40 91 12 04 	lds	r20, 0x0412	; 0x800412 <keypad_DDR>
    1e10:	50 91 13 04 	lds	r21, 0x0413	; 0x800413 <keypad_DDR+0x1>
    1e14:	ea 01       	movw	r28, r20
    1e16:	98 81       	ld	r25, Y
    1e18:	92 60       	ori	r25, 0x02	; 2
    1e1a:	98 83       	st	Y, r25
				*keypad_PORT&=~(1<<KEYPADLINE_3);
    1e1c:	40 91 04 04 	lds	r20, 0x0404	; 0x800404 <keypad_PORT>
    1e20:	50 91 05 04 	lds	r21, 0x0405	; 0x800405 <keypad_PORT+0x1>
    1e24:	ea 01       	movw	r28, r20
    1e26:	98 81       	ld	r25, Y
    1e28:	9d 7f       	andi	r25, 0xFD	; 253
    1e2a:	98 83       	st	Y, r25
				keypad_dataf.line_3=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
    1e2c:	40 91 10 04 	lds	r20, 0x0410	; 0x800410 <keypad_PIN>
    1e30:	50 91 11 04 	lds	r21, 0x0411	; 0x800411 <keypad_PIN+0x1>
    1e34:	ea 01       	movw	r28, r20
    1e36:	38 81       	ld	r19, Y
    1e38:	34 77       	andi	r19, 0x74	; 116
    1e3a:	12 96       	adiw	r26, 0x02	; 2
    1e3c:	3c 93       	st	X, r19
    1e3e:	12 97       	sbiw	r26, 0x02	; 2
				HL=KEYPADhl(keypad_datai.line_3,keypad_dataf.line_3);
    1e40:	92 81       	ldd	r25, Z+2	; 0x02
uint8_t KEYPADhl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	//printf("KEYPADhl\n");
	i=xf^xi;
	i&=xi;
    1e42:	43 2f       	mov	r20, r19
    1e44:	49 27       	eor	r20, r25
    1e46:	94 23       	and	r25, r20
			case 2: //line 3 index 2
				*keypad_DDR|=(1<<KEYPADLINE_3);
				*keypad_PORT&=~(1<<KEYPADLINE_3);
				keypad_dataf.line_3=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
				HL=KEYPADhl(keypad_datai.line_3,keypad_dataf.line_3);
				keypad_datai.line_3=keypad_dataf.line_3;
    1e48:	32 83       	std	Z+2, r19	; 0x02
				if(HL){
    1e4a:	99 23       	and	r25, r25
    1e4c:	99 f0       	breq	.+38     	; 0x1e74 <KEYPAD_getkey+0x1aa>
					//decode index line three column what ?
					if(HL == (1<<KEYPADDATA_1))
    1e4e:	94 30       	cpi	r25, 0x04	; 4
    1e50:	19 f4       	brne	.+6      	; 0x1e58 <KEYPAD_getkey+0x18e>
						c=keypadvalue[2][0];
    1e52:	eb 01       	movw	r28, r22
    1e54:	88 85       	ldd	r24, Y+8	; 0x08
    1e56:	0a c0       	rjmp	.+20     	; 0x1e6c <KEYPAD_getkey+0x1a2>
					if(HL == (1<<KEYPADDATA_2))
    1e58:	90 31       	cpi	r25, 0x10	; 16
    1e5a:	19 f4       	brne	.+6      	; 0x1e62 <KEYPAD_getkey+0x198>
						c=keypadvalue[2][1];
    1e5c:	eb 01       	movw	r28, r22
    1e5e:	89 85       	ldd	r24, Y+9	; 0x09
    1e60:	09 c0       	rjmp	.+18     	; 0x1e74 <KEYPAD_getkey+0x1aa>
					if(HL == (1<<KEYPADDATA_3))
    1e62:	90 32       	cpi	r25, 0x20	; 32
    1e64:	19 f4       	brne	.+6      	; 0x1e6c <KEYPAD_getkey+0x1a2>
						c=keypadvalue[2][2];
    1e66:	eb 01       	movw	r28, r22
    1e68:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e6a:	04 c0       	rjmp	.+8      	; 0x1e74 <KEYPAD_getkey+0x1aa>
					if(HL == (1<<KEYPADDATA_4))
    1e6c:	90 34       	cpi	r25, 0x40	; 64
    1e6e:	11 f4       	brne	.+4      	; 0x1e74 <KEYPAD_getkey+0x1aa>
						c=keypadvalue[2][3];
    1e70:	eb 01       	movw	r28, r22
    1e72:	8b 85       	ldd	r24, Y+11	; 0x0b
				}
				*keypad_DDR&=~(1<<KEYPADLINE_3);
    1e74:	40 91 12 04 	lds	r20, 0x0412	; 0x800412 <keypad_DDR>
    1e78:	50 91 13 04 	lds	r21, 0x0413	; 0x800413 <keypad_DDR+0x1>
    1e7c:	ea 01       	movw	r28, r20
    1e7e:	98 81       	ld	r25, Y
    1e80:	9d 7f       	andi	r25, 0xFD	; 253
    1e82:	98 83       	st	Y, r25
				*keypad_PORT|=(1<<KEYPADLINE_3);
    1e84:	40 91 04 04 	lds	r20, 0x0404	; 0x800404 <keypad_PORT>
    1e88:	50 91 05 04 	lds	r21, 0x0405	; 0x800405 <keypad_PORT+0x1>
    1e8c:	ea 01       	movw	r28, r20
    1e8e:	98 81       	ld	r25, Y
    1e90:	92 60       	ori	r25, 0x02	; 2
    1e92:	98 83       	st	Y, r25
				break;
    1e94:	25 cf       	rjmp	.-438    	; 0x1ce0 <KEYPAD_getkey+0x16>
			case 3: //line 4 index 3
				*keypad_DDR|=(1<<KEYPADLINE_4);
    1e96:	e0 91 12 04 	lds	r30, 0x0412	; 0x800412 <keypad_DDR>
    1e9a:	f0 91 13 04 	lds	r31, 0x0413	; 0x800413 <keypad_DDR+0x1>
    1e9e:	90 81       	ld	r25, Z
    1ea0:	98 60       	ori	r25, 0x08	; 8
    1ea2:	90 83       	st	Z, r25
				*keypad_PORT&=~(1<<KEYPADLINE_4);
    1ea4:	e0 91 04 04 	lds	r30, 0x0404	; 0x800404 <keypad_PORT>
    1ea8:	f0 91 05 04 	lds	r31, 0x0405	; 0x800405 <keypad_PORT+0x1>
    1eac:	90 81       	ld	r25, Z
    1eae:	97 7f       	andi	r25, 0xF7	; 247
    1eb0:	90 83       	st	Z, r25
				keypad_dataf.line_4=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
    1eb2:	e0 91 10 04 	lds	r30, 0x0410	; 0x800410 <keypad_PIN>
    1eb6:	f0 91 11 04 	lds	r31, 0x0411	; 0x800411 <keypad_PIN+0x1>
    1eba:	20 81       	ld	r18, Z
    1ebc:	24 77       	andi	r18, 0x74	; 116
    1ebe:	20 93 0a 04 	sts	0x040A, r18	; 0x80040a <keypad_dataf+0x3>
				HL=KEYPADhl(keypad_datai.line_4,keypad_dataf.line_4);
    1ec2:	eb e0       	ldi	r30, 0x0B	; 11
    1ec4:	f4 e0       	ldi	r31, 0x04	; 4
    1ec6:	93 81       	ldd	r25, Z+3	; 0x03
uint8_t KEYPADhl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	//printf("KEYPADhl\n");
	i=xf^xi;
	i&=xi;
    1ec8:	32 2f       	mov	r19, r18
    1eca:	39 27       	eor	r19, r25
    1ecc:	93 23       	and	r25, r19
			case 3: //line 4 index 3
				*keypad_DDR|=(1<<KEYPADLINE_4);
				*keypad_PORT&=~(1<<KEYPADLINE_4);
				keypad_dataf.line_4=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
				HL=KEYPADhl(keypad_datai.line_4,keypad_dataf.line_4);
				keypad_datai.line_4=keypad_dataf.line_4;
    1ece:	23 83       	std	Z+3, r18	; 0x03
				if(HL){
    1ed0:	99 23       	and	r25, r25
    1ed2:	99 f0       	breq	.+38     	; 0x1efa <KEYPAD_getkey+0x230>
					//decode index line four column what ?
					if(HL == (1<<KEYPADDATA_1))
    1ed4:	94 30       	cpi	r25, 0x04	; 4
    1ed6:	19 f4       	brne	.+6      	; 0x1ede <KEYPAD_getkey+0x214>
						c=keypadvalue[3][0];
    1ed8:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__DATA_REGION_ORIGIN__+0xc>
    1edc:	0a c0       	rjmp	.+20     	; 0x1ef2 <KEYPAD_getkey+0x228>
					if(HL == (1<<KEYPADDATA_2))
    1ede:	90 31       	cpi	r25, 0x10	; 16
    1ee0:	19 f4       	brne	.+6      	; 0x1ee8 <KEYPAD_getkey+0x21e>
						c=keypadvalue[3][1];
    1ee2:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <__DATA_REGION_ORIGIN__+0xd>
    1ee6:	09 c0       	rjmp	.+18     	; 0x1efa <KEYPAD_getkey+0x230>
					if(HL == (1<<KEYPADDATA_3))
    1ee8:	90 32       	cpi	r25, 0x20	; 32
    1eea:	19 f4       	brne	.+6      	; 0x1ef2 <KEYPAD_getkey+0x228>
						c=keypadvalue[3][2];
    1eec:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__DATA_REGION_ORIGIN__+0xe>
    1ef0:	04 c0       	rjmp	.+8      	; 0x1efa <KEYPAD_getkey+0x230>
					if(HL == (1<<KEYPADDATA_4))
    1ef2:	90 34       	cpi	r25, 0x40	; 64
    1ef4:	11 f4       	brne	.+4      	; 0x1efa <KEYPAD_getkey+0x230>
						c=keypadvalue[3][3];
    1ef6:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <__DATA_REGION_ORIGIN__+0xf>
				}
				*keypad_DDR&=~(1<<KEYPADLINE_4);
    1efa:	e0 91 12 04 	lds	r30, 0x0412	; 0x800412 <keypad_DDR>
    1efe:	f0 91 13 04 	lds	r31, 0x0413	; 0x800413 <keypad_DDR+0x1>
    1f02:	90 81       	ld	r25, Z
    1f04:	97 7f       	andi	r25, 0xF7	; 247
    1f06:	90 83       	st	Z, r25
				*keypad_PORT|=(1<<KEYPADLINE_4);
    1f08:	e0 91 04 04 	lds	r30, 0x0404	; 0x800404 <keypad_PORT>
    1f0c:	f0 91 05 04 	lds	r31, 0x0405	; 0x800405 <keypad_PORT+0x1>
    1f10:	90 81       	ld	r25, Z
    1f12:	98 60       	ori	r25, 0x08	; 8
    1f14:	90 83       	st	Z, r25
    1f16:	03 c0       	rjmp	.+6      	; 0x1f1e <KEYPAD_getkey+0x254>
char KEYPAD_getkey(void)
{
	uint8_t HL;
	char c='\0';
	uint8_t keypad_option;
	for(keypad_option=0;keypad_option<KEYPADLINES;keypad_option++){
    1f18:	24 30       	cpi	r18, 0x04	; 4
    1f1a:	08 f4       	brcc	.+2      	; 0x1f1e <KEYPAD_getkey+0x254>
    1f1c:	e1 ce       	rjmp	.-574    	; 0x1ce0 <KEYPAD_getkey+0x16>
			default:
				break;
		}
	}
	return c;
}
    1f1e:	df 91       	pop	r29
    1f20:	cf 91       	pop	r28
    1f22:	08 95       	ret

00001f24 <KEYPAD_read>:
/***read***/
struct keypadata KEYPAD_read(void)
{
    1f24:	cf 93       	push	r28
    1f26:	df 93       	push	r29
    1f28:	00 d0       	rcall	.+0      	; 0x1f2a <KEYPAD_read+0x6>
    1f2a:	00 d0       	rcall	.+0      	; 0x1f2c <KEYPAD_read+0x8>
    1f2c:	1f 92       	push	r1
    1f2e:	cd b7       	in	r28, 0x3d	; 61
    1f30:	de b7       	in	r29, 0x3e	; 62
	char c;
	c=KEYPAD_getkey(); //returns null all the time when no entry
    1f32:	cb de       	rcall	.-618    	; 0x1cca <KEYPAD_getkey>
	if(c){
    1f34:	88 23       	and	r24, r24
    1f36:	b1 f1       	breq	.+108    	; 0x1fa4 <KEYPAD_read+0x80>
		data.character=c;
    1f38:	80 93 42 04 	sts	0x0442, r24	; 0x800442 <data>
		if(KEYPADSTRINGINDEX<(KEYPADSTRINGSIZE)){
    1f3c:	90 91 0f 04 	lds	r25, 0x040F	; 0x80040f <KEYPADSTRINGINDEX>
    1f40:	94 31       	cpi	r25, 0x14	; 20
    1f42:	88 f4       	brcc	.+34     	; 0x1f66 <KEYPAD_read+0x42>
			KEYPAD_string[KEYPADSTRINGINDEX]=c;
    1f44:	e0 91 0f 04 	lds	r30, 0x040F	; 0x80040f <KEYPADSTRINGINDEX>
    1f48:	f0 e0       	ldi	r31, 0x00	; 0
    1f4a:	ec 5e       	subi	r30, 0xEC	; 236
    1f4c:	fb 4f       	sbci	r31, 0xFB	; 251
    1f4e:	80 83       	st	Z, r24
			KEYPADSTRINGINDEX++;
    1f50:	90 91 0f 04 	lds	r25, 0x040F	; 0x80040f <KEYPADSTRINGINDEX>
    1f54:	9f 5f       	subi	r25, 0xFF	; 255
    1f56:	90 93 0f 04 	sts	0x040F, r25	; 0x80040f <KEYPADSTRINGINDEX>
			KEYPAD_string[KEYPADSTRINGINDEX]='\0';
    1f5a:	e0 91 0f 04 	lds	r30, 0x040F	; 0x80040f <KEYPADSTRINGINDEX>
    1f5e:	f0 e0       	ldi	r31, 0x00	; 0
    1f60:	ec 5e       	subi	r30, 0xEC	; 236
    1f62:	fb 4f       	sbci	r31, 0xFB	; 251
    1f64:	10 82       	st	Z, r1
		}
		if(c==KEYPADENTERKEY){
    1f66:	84 34       	cpi	r24, 0x44	; 68
    1f68:	99 f4       	brne	.+38     	; 0x1f90 <KEYPAD_read+0x6c>
			KEYPAD_string[KEYPADSTRINGINDEX-1]='\0';
    1f6a:	e0 91 0f 04 	lds	r30, 0x040F	; 0x80040f <KEYPADSTRINGINDEX>
    1f6e:	f0 e0       	ldi	r31, 0x00	; 0
    1f70:	ed 5e       	subi	r30, 0xED	; 237
    1f72:	fb 4f       	sbci	r31, 0xFB	; 251
    1f74:	10 82       	st	Z, r1
			KEYPADSTRINGINDEX=0;
    1f76:	10 92 0f 04 	sts	0x040F, r1	; 0x80040f <KEYPADSTRINGINDEX>
			data.printstring="\0";
    1f7a:	e2 e4       	ldi	r30, 0x42	; 66
    1f7c:	f4 e0       	ldi	r31, 0x04	; 4
    1f7e:	82 e1       	ldi	r24, 0x12	; 18
    1f80:	91 e0       	ldi	r25, 0x01	; 1
    1f82:	92 83       	std	Z+2, r25	; 0x02
    1f84:	81 83       	std	Z+1, r24	; 0x01
			data.string=KEYPAD_string; // shift output
    1f86:	84 e1       	ldi	r24, 0x14	; 20
    1f88:	94 e0       	ldi	r25, 0x04	; 4
    1f8a:	94 83       	std	Z+4, r25	; 0x04
    1f8c:	83 83       	std	Z+3, r24	; 0x03
    1f8e:	0a c0       	rjmp	.+20     	; 0x1fa4 <KEYPAD_read+0x80>
		}else{
			data.printstring=KEYPAD_string;
    1f90:	e2 e4       	ldi	r30, 0x42	; 66
    1f92:	f4 e0       	ldi	r31, 0x04	; 4
    1f94:	84 e1       	ldi	r24, 0x14	; 20
    1f96:	94 e0       	ldi	r25, 0x04	; 4
    1f98:	92 83       	std	Z+2, r25	; 0x02
    1f9a:	81 83       	std	Z+1, r24	; 0x01
			data.string="\0"; // clear output
    1f9c:	82 e1       	ldi	r24, 0x12	; 18
    1f9e:	91 e0       	ldi	r25, 0x01	; 1
    1fa0:	94 83       	std	Z+4, r25	; 0x04
    1fa2:	83 83       	std	Z+3, r24	; 0x03
		}
	}
	return data;
    1fa4:	85 e0       	ldi	r24, 0x05	; 5
    1fa6:	e2 e4       	ldi	r30, 0x42	; 66
    1fa8:	f4 e0       	ldi	r31, 0x04	; 4
    1faa:	de 01       	movw	r26, r28
    1fac:	11 96       	adiw	r26, 0x01	; 1
    1fae:	01 90       	ld	r0, Z+
    1fb0:	0d 92       	st	X+, r0
    1fb2:	8a 95       	dec	r24
    1fb4:	e1 f7       	brne	.-8      	; 0x1fae <KEYPAD_read+0x8a>
    1fb6:	29 81       	ldd	r18, Y+1	; 0x01
    1fb8:	3a 81       	ldd	r19, Y+2	; 0x02
    1fba:	4b 81       	ldd	r20, Y+3	; 0x03
    1fbc:	5c 81       	ldd	r21, Y+4	; 0x04
    1fbe:	6d 81       	ldd	r22, Y+5	; 0x05
}
    1fc0:	70 e0       	ldi	r23, 0x00	; 0
    1fc2:	80 e0       	ldi	r24, 0x00	; 0
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	0f 90       	pop	r0
    1fc8:	0f 90       	pop	r0
    1fca:	0f 90       	pop	r0
    1fcc:	0f 90       	pop	r0
    1fce:	0f 90       	pop	r0
    1fd0:	df 91       	pop	r29
    1fd2:	cf 91       	pop	r28
    1fd4:	08 95       	ret

00001fd6 <KEYPADenable>:
uint8_t KEYPADlh(uint8_t xi, uint8_t xf);
/***hl***/
uint8_t KEYPADhl(uint8_t xi, uint8_t xf);
/***Procedure & Function***/
KEYPAD KEYPADenable(volatile uint8_t *ddr, volatile uint8_t *pin, volatile uint8_t *port)
{
    1fd6:	cf 93       	push	r28
    1fd8:	df 93       	push	r29
    1fda:	cd b7       	in	r28, 0x3d	; 61
    1fdc:	de b7       	in	r29, 0x3e	; 62
    1fde:	28 97       	sbiw	r28, 0x08	; 8
    1fe0:	0f b6       	in	r0, 0x3f	; 63
    1fe2:	f8 94       	cli
    1fe4:	de bf       	out	0x3e, r29	; 62
    1fe6:	0f be       	out	0x3f, r0	; 63
    1fe8:	cd bf       	out	0x3d, r28	; 61
	//LOCAL VARIABLE
	uint8_t tSREG;
	tSREG=SREG;
    1fea:	2f b7       	in	r18, 0x3f	; 63
	data.character=' ';
    1fec:	30 e2       	ldi	r19, 0x20	; 32
    1fee:	30 93 42 04 	sts	0x0442, r19	; 0x800442 <data>
	//ALLOCAÇÂO MEMORIA PARA Estrutura
	KEYPAD keypad;
	//import parametros
	keypad_DDR=ddr;
    1ff2:	90 93 13 04 	sts	0x0413, r25	; 0x800413 <keypad_DDR+0x1>
    1ff6:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <keypad_DDR>
	keypad_PIN=pin;
    1ffa:	70 93 11 04 	sts	0x0411, r23	; 0x800411 <keypad_PIN+0x1>
    1ffe:	60 93 10 04 	sts	0x0410, r22	; 0x800410 <keypad_PIN>
	keypad_PORT=port;
    2002:	50 93 05 04 	sts	0x0405, r21	; 0x800405 <keypad_PORT+0x1>
    2006:	40 93 04 04 	sts	0x0404, r20	; 0x800404 <keypad_PORT>
	//inic variables
	*keypad_DDR=(1<<KEYPADLINE_1) | (1<<KEYPADLINE_2) | (1<<KEYPADLINE_3) | (1<<KEYPADLINE_4);
    200a:	3b e8       	ldi	r19, 0x8B	; 139
    200c:	fc 01       	movw	r30, r24
    200e:	30 83       	st	Z, r19
	*keypad_PORT=(1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4);
    2010:	e0 91 04 04 	lds	r30, 0x0404	; 0x800404 <keypad_PORT>
    2014:	f0 91 05 04 	lds	r31, 0x0405	; 0x800405 <keypad_PORT+0x1>
    2018:	84 e7       	ldi	r24, 0x74	; 116
    201a:	80 83       	st	Z, r24
	keypad_datai.line_1=keypad_dataf.line_1=(1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4);
    201c:	a7 e0       	ldi	r26, 0x07	; 7
    201e:	b4 e0       	ldi	r27, 0x04	; 4
    2020:	8c 93       	st	X, r24
    2022:	eb e0       	ldi	r30, 0x0B	; 11
    2024:	f4 e0       	ldi	r31, 0x04	; 4
    2026:	80 83       	st	Z, r24
	keypad_datai.line_2=keypad_dataf.line_2=(1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4);
    2028:	11 96       	adiw	r26, 0x01	; 1
    202a:	8c 93       	st	X, r24
    202c:	11 97       	sbiw	r26, 0x01	; 1
    202e:	81 83       	std	Z+1, r24	; 0x01
	keypad_datai.line_3=keypad_dataf.line_3=(1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4);
    2030:	12 96       	adiw	r26, 0x02	; 2
    2032:	8c 93       	st	X, r24
    2034:	12 97       	sbiw	r26, 0x02	; 2
    2036:	82 83       	std	Z+2, r24	; 0x02
	keypad_datai.line_4=keypad_dataf.line_4=(1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4);
    2038:	13 96       	adiw	r26, 0x03	; 3
    203a:	8c 93       	st	X, r24
    203c:	83 83       	std	Z+3, r24	; 0x03
	KEYPADSTRINGINDEX=0;
    203e:	10 92 0f 04 	sts	0x040F, r1	; 0x80040f <KEYPADSTRINGINDEX>
	//Vtable
	keypad.getkey=KEYPAD_getkey;
	keypad.read=KEYPAD_read;
	keypad.get=KEYPAD_get;
	keypad.flush=KEYPAD_flush;
	SREG=tSREG;
    2042:	2f bf       	out	0x3f, r18	; 63
	//
	*keypad_PORT|=(1<<KEYPADLINE_1) | (1<<KEYPADLINE_2) | (1<<KEYPADLINE_3) | (1<<KEYPADLINE_4);
    2044:	e0 91 04 04 	lds	r30, 0x0404	; 0x800404 <keypad_PORT>
    2048:	f0 91 05 04 	lds	r31, 0x0405	; 0x800405 <keypad_PORT+0x1>
    204c:	80 81       	ld	r24, Z
    204e:	8b 68       	ori	r24, 0x8B	; 139
    2050:	80 83       	st	Z, r24
	//Going to use pull down method.
	return keypad;
    2052:	25 e6       	ldi	r18, 0x65	; 101
    2054:	3e e0       	ldi	r19, 0x0E	; 14
    2056:	3a 83       	std	Y+2, r19	; 0x02
    2058:	29 83       	std	Y+1, r18	; 0x01
    205a:	42 e9       	ldi	r20, 0x92	; 146
    205c:	5f e0       	ldi	r21, 0x0F	; 15
    205e:	5c 83       	std	Y+4, r21	; 0x04
    2060:	4b 83       	std	Y+3, r20	; 0x03
    2062:	68 e3       	ldi	r22, 0x38	; 56
    2064:	7e e0       	ldi	r23, 0x0E	; 14
    2066:	7e 83       	std	Y+6, r23	; 0x06
    2068:	6d 83       	std	Y+5, r22	; 0x05
    206a:	88 e5       	ldi	r24, 0x58	; 88
    206c:	9e e0       	ldi	r25, 0x0E	; 14
    206e:	98 87       	std	Y+8, r25	; 0x08
    2070:	8f 83       	std	Y+7, r24	; 0x07
    2072:	3a 81       	ldd	r19, Y+2	; 0x02
    2074:	5c 81       	ldd	r21, Y+4	; 0x04
    2076:	7e 81       	ldd	r23, Y+6	; 0x06
}
    2078:	98 85       	ldd	r25, Y+8	; 0x08
    207a:	28 96       	adiw	r28, 0x08	; 8
    207c:	0f b6       	in	r0, 0x3f	; 63
    207e:	f8 94       	cli
    2080:	de bf       	out	0x3e, r29	; 62
    2082:	0f be       	out	0x3f, r0	; 63
    2084:	cd bf       	out	0x3d, r28	; 61
    2086:	df 91       	pop	r29
    2088:	cf 91       	pop	r28
    208a:	08 95       	ret

0000208c <LCD0_write>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    208c:	e0 91 33 04 	lds	r30, 0x0433	; 0x800433 <lcd0_PORT>
    2090:	f0 91 34 04 	lds	r31, 0x0434	; 0x800434 <lcd0_PORT+0x1>
    2094:	90 81       	ld	r25, Z
    2096:	9d 7f       	andi	r25, 0xFD	; 253
    2098:	90 83       	st	Z, r25
    209a:	67 2b       	or	r22, r23
    209c:	41 f0       	breq	.+16     	; 0x20ae <LCD0_write+0x22>
    209e:	e0 91 33 04 	lds	r30, 0x0433	; 0x800433 <lcd0_PORT>
    20a2:	f0 91 34 04 	lds	r31, 0x0434	; 0x800434 <lcd0_PORT+0x1>
    20a6:	90 81       	ld	r25, Z
    20a8:	91 60       	ori	r25, 0x01	; 1
    20aa:	90 83       	st	Z, r25
    20ac:	07 c0       	rjmp	.+14     	; 0x20bc <LCD0_write+0x30>
    20ae:	e0 91 33 04 	lds	r30, 0x0433	; 0x800433 <lcd0_PORT>
    20b2:	f0 91 34 04 	lds	r31, 0x0434	; 0x800434 <lcd0_PORT+0x1>
    20b6:	90 81       	ld	r25, Z
    20b8:	9e 7f       	andi	r25, 0xFE	; 254
    20ba:	90 83       	st	Z, r25
    20bc:	e0 91 30 04 	lds	r30, 0x0430	; 0x800430 <lcd0_DDR>
    20c0:	f0 91 31 04 	lds	r31, 0x0431	; 0x800431 <lcd0_DDR+0x1>
    20c4:	90 81       	ld	r25, Z
    20c6:	90 6f       	ori	r25, 0xF0	; 240
    20c8:	90 83       	st	Z, r25
    20ca:	e0 91 33 04 	lds	r30, 0x0433	; 0x800433 <lcd0_PORT>
    20ce:	f0 91 34 04 	lds	r31, 0x0434	; 0x800434 <lcd0_PORT+0x1>
    20d2:	90 81       	ld	r25, Z
    20d4:	94 60       	ori	r25, 0x04	; 4
    20d6:	90 83       	st	Z, r25
    20d8:	88 23       	and	r24, r24
    20da:	44 f4       	brge	.+16     	; 0x20ec <LCD0_write+0x60>
    20dc:	e0 91 33 04 	lds	r30, 0x0433	; 0x800433 <lcd0_PORT>
    20e0:	f0 91 34 04 	lds	r31, 0x0434	; 0x800434 <lcd0_PORT+0x1>
    20e4:	90 81       	ld	r25, Z
    20e6:	90 68       	ori	r25, 0x80	; 128
    20e8:	90 83       	st	Z, r25
    20ea:	07 c0       	rjmp	.+14     	; 0x20fa <LCD0_write+0x6e>
    20ec:	e0 91 33 04 	lds	r30, 0x0433	; 0x800433 <lcd0_PORT>
    20f0:	f0 91 34 04 	lds	r31, 0x0434	; 0x800434 <lcd0_PORT+0x1>
    20f4:	90 81       	ld	r25, Z
    20f6:	9f 77       	andi	r25, 0x7F	; 127
    20f8:	90 83       	st	Z, r25
    20fa:	86 ff       	sbrs	r24, 6
    20fc:	08 c0       	rjmp	.+16     	; 0x210e <LCD0_write+0x82>
    20fe:	e0 91 33 04 	lds	r30, 0x0433	; 0x800433 <lcd0_PORT>
    2102:	f0 91 34 04 	lds	r31, 0x0434	; 0x800434 <lcd0_PORT+0x1>
    2106:	90 81       	ld	r25, Z
    2108:	90 64       	ori	r25, 0x40	; 64
    210a:	90 83       	st	Z, r25
    210c:	07 c0       	rjmp	.+14     	; 0x211c <LCD0_write+0x90>
    210e:	e0 91 33 04 	lds	r30, 0x0433	; 0x800433 <lcd0_PORT>
    2112:	f0 91 34 04 	lds	r31, 0x0434	; 0x800434 <lcd0_PORT+0x1>
    2116:	90 81       	ld	r25, Z
    2118:	9f 7b       	andi	r25, 0xBF	; 191
    211a:	90 83       	st	Z, r25
    211c:	85 ff       	sbrs	r24, 5
    211e:	08 c0       	rjmp	.+16     	; 0x2130 <LCD0_write+0xa4>
    2120:	e0 91 33 04 	lds	r30, 0x0433	; 0x800433 <lcd0_PORT>
    2124:	f0 91 34 04 	lds	r31, 0x0434	; 0x800434 <lcd0_PORT+0x1>
    2128:	90 81       	ld	r25, Z
    212a:	90 62       	ori	r25, 0x20	; 32
    212c:	90 83       	st	Z, r25
    212e:	07 c0       	rjmp	.+14     	; 0x213e <LCD0_write+0xb2>
    2130:	e0 91 33 04 	lds	r30, 0x0433	; 0x800433 <lcd0_PORT>
    2134:	f0 91 34 04 	lds	r31, 0x0434	; 0x800434 <lcd0_PORT+0x1>
    2138:	90 81       	ld	r25, Z
    213a:	9f 7d       	andi	r25, 0xDF	; 223
    213c:	90 83       	st	Z, r25
    213e:	84 ff       	sbrs	r24, 4
    2140:	08 c0       	rjmp	.+16     	; 0x2152 <LCD0_write+0xc6>
    2142:	e0 91 33 04 	lds	r30, 0x0433	; 0x800433 <lcd0_PORT>
    2146:	f0 91 34 04 	lds	r31, 0x0434	; 0x800434 <lcd0_PORT+0x1>
    214a:	90 81       	ld	r25, Z
    214c:	90 61       	ori	r25, 0x10	; 16
    214e:	90 83       	st	Z, r25
    2150:	07 c0       	rjmp	.+14     	; 0x2160 <LCD0_write+0xd4>
    2152:	e0 91 33 04 	lds	r30, 0x0433	; 0x800433 <lcd0_PORT>
    2156:	f0 91 34 04 	lds	r31, 0x0434	; 0x800434 <lcd0_PORT+0x1>
    215a:	90 81       	ld	r25, Z
    215c:	9f 7e       	andi	r25, 0xEF	; 239
    215e:	90 83       	st	Z, r25
    2160:	e0 91 33 04 	lds	r30, 0x0433	; 0x800433 <lcd0_PORT>
    2164:	f0 91 34 04 	lds	r31, 0x0434	; 0x800434 <lcd0_PORT+0x1>
    2168:	90 81       	ld	r25, Z
    216a:	9b 7f       	andi	r25, 0xFB	; 251
    216c:	90 83       	st	Z, r25
    216e:	e0 91 33 04 	lds	r30, 0x0433	; 0x800433 <lcd0_PORT>
    2172:	f0 91 34 04 	lds	r31, 0x0434	; 0x800434 <lcd0_PORT+0x1>
    2176:	90 81       	ld	r25, Z
    2178:	94 60       	ori	r25, 0x04	; 4
    217a:	90 83       	st	Z, r25
    217c:	83 ff       	sbrs	r24, 3
    217e:	08 c0       	rjmp	.+16     	; 0x2190 <LCD0_write+0x104>
    2180:	e0 91 33 04 	lds	r30, 0x0433	; 0x800433 <lcd0_PORT>
    2184:	f0 91 34 04 	lds	r31, 0x0434	; 0x800434 <lcd0_PORT+0x1>
    2188:	90 81       	ld	r25, Z
    218a:	90 68       	ori	r25, 0x80	; 128
    218c:	90 83       	st	Z, r25
    218e:	07 c0       	rjmp	.+14     	; 0x219e <LCD0_write+0x112>
    2190:	e0 91 33 04 	lds	r30, 0x0433	; 0x800433 <lcd0_PORT>
    2194:	f0 91 34 04 	lds	r31, 0x0434	; 0x800434 <lcd0_PORT+0x1>
    2198:	90 81       	ld	r25, Z
    219a:	9f 77       	andi	r25, 0x7F	; 127
    219c:	90 83       	st	Z, r25
    219e:	82 ff       	sbrs	r24, 2
    21a0:	08 c0       	rjmp	.+16     	; 0x21b2 <LCD0_write+0x126>
    21a2:	e0 91 33 04 	lds	r30, 0x0433	; 0x800433 <lcd0_PORT>
    21a6:	f0 91 34 04 	lds	r31, 0x0434	; 0x800434 <lcd0_PORT+0x1>
    21aa:	90 81       	ld	r25, Z
    21ac:	90 64       	ori	r25, 0x40	; 64
    21ae:	90 83       	st	Z, r25
    21b0:	07 c0       	rjmp	.+14     	; 0x21c0 <LCD0_write+0x134>
    21b2:	e0 91 33 04 	lds	r30, 0x0433	; 0x800433 <lcd0_PORT>
    21b6:	f0 91 34 04 	lds	r31, 0x0434	; 0x800434 <lcd0_PORT+0x1>
    21ba:	90 81       	ld	r25, Z
    21bc:	9f 7b       	andi	r25, 0xBF	; 191
    21be:	90 83       	st	Z, r25
    21c0:	81 ff       	sbrs	r24, 1
    21c2:	08 c0       	rjmp	.+16     	; 0x21d4 <LCD0_write+0x148>
    21c4:	e0 91 33 04 	lds	r30, 0x0433	; 0x800433 <lcd0_PORT>
    21c8:	f0 91 34 04 	lds	r31, 0x0434	; 0x800434 <lcd0_PORT+0x1>
    21cc:	90 81       	ld	r25, Z
    21ce:	90 62       	ori	r25, 0x20	; 32
    21d0:	90 83       	st	Z, r25
    21d2:	07 c0       	rjmp	.+14     	; 0x21e2 <LCD0_write+0x156>
    21d4:	e0 91 33 04 	lds	r30, 0x0433	; 0x800433 <lcd0_PORT>
    21d8:	f0 91 34 04 	lds	r31, 0x0434	; 0x800434 <lcd0_PORT+0x1>
    21dc:	90 81       	ld	r25, Z
    21de:	9f 7d       	andi	r25, 0xDF	; 223
    21e0:	90 83       	st	Z, r25
    21e2:	80 ff       	sbrs	r24, 0
    21e4:	08 c0       	rjmp	.+16     	; 0x21f6 <LCD0_write+0x16a>
    21e6:	e0 91 33 04 	lds	r30, 0x0433	; 0x800433 <lcd0_PORT>
    21ea:	f0 91 34 04 	lds	r31, 0x0434	; 0x800434 <lcd0_PORT+0x1>
    21ee:	80 81       	ld	r24, Z
    21f0:	80 61       	ori	r24, 0x10	; 16
    21f2:	80 83       	st	Z, r24
    21f4:	07 c0       	rjmp	.+14     	; 0x2204 <LCD0_write+0x178>
    21f6:	e0 91 33 04 	lds	r30, 0x0433	; 0x800433 <lcd0_PORT>
    21fa:	f0 91 34 04 	lds	r31, 0x0434	; 0x800434 <lcd0_PORT+0x1>
    21fe:	80 81       	ld	r24, Z
    2200:	8f 7e       	andi	r24, 0xEF	; 239
    2202:	80 83       	st	Z, r24
    2204:	e0 91 33 04 	lds	r30, 0x0433	; 0x800433 <lcd0_PORT>
    2208:	f0 91 34 04 	lds	r31, 0x0434	; 0x800434 <lcd0_PORT+0x1>
    220c:	80 81       	ld	r24, Z
    220e:	8b 7f       	andi	r24, 0xFB	; 251
    2210:	80 83       	st	Z, r24
    2212:	08 95       	ret

00002214 <LCD0_read>:
    2214:	e0 91 30 04 	lds	r30, 0x0430	; 0x800430 <lcd0_DDR>
    2218:	f0 91 31 04 	lds	r31, 0x0431	; 0x800431 <lcd0_DDR+0x1>
    221c:	20 81       	ld	r18, Z
    221e:	2f 70       	andi	r18, 0x0F	; 15
    2220:	20 83       	st	Z, r18
    2222:	e0 91 33 04 	lds	r30, 0x0433	; 0x800433 <lcd0_PORT>
    2226:	f0 91 34 04 	lds	r31, 0x0434	; 0x800434 <lcd0_PORT+0x1>
    222a:	20 81       	ld	r18, Z
    222c:	20 6f       	ori	r18, 0xF0	; 240
    222e:	20 83       	st	Z, r18
    2230:	e0 91 33 04 	lds	r30, 0x0433	; 0x800433 <lcd0_PORT>
    2234:	f0 91 34 04 	lds	r31, 0x0434	; 0x800434 <lcd0_PORT+0x1>
    2238:	20 81       	ld	r18, Z
    223a:	22 60       	ori	r18, 0x02	; 2
    223c:	20 83       	st	Z, r18
    223e:	89 2b       	or	r24, r25
    2240:	41 f0       	breq	.+16     	; 0x2252 <LCD0_read+0x3e>
    2242:	e0 91 33 04 	lds	r30, 0x0433	; 0x800433 <lcd0_PORT>
    2246:	f0 91 34 04 	lds	r31, 0x0434	; 0x800434 <lcd0_PORT+0x1>
    224a:	80 81       	ld	r24, Z
    224c:	81 60       	ori	r24, 0x01	; 1
    224e:	80 83       	st	Z, r24
    2250:	07 c0       	rjmp	.+14     	; 0x2260 <LCD0_read+0x4c>
    2252:	e0 91 33 04 	lds	r30, 0x0433	; 0x800433 <lcd0_PORT>
    2256:	f0 91 34 04 	lds	r31, 0x0434	; 0x800434 <lcd0_PORT+0x1>
    225a:	80 81       	ld	r24, Z
    225c:	8e 7f       	andi	r24, 0xFE	; 254
    225e:	80 83       	st	Z, r24
    2260:	e0 91 33 04 	lds	r30, 0x0433	; 0x800433 <lcd0_PORT>
    2264:	f0 91 34 04 	lds	r31, 0x0434	; 0x800434 <lcd0_PORT+0x1>
    2268:	80 81       	ld	r24, Z
    226a:	84 60       	ori	r24, 0x04	; 4
    226c:	80 83       	st	Z, r24
    226e:	e0 91 29 04 	lds	r30, 0x0429	; 0x800429 <lcd0_PIN>
    2272:	f0 91 2a 04 	lds	r31, 0x042A	; 0x80042a <lcd0_PIN+0x1>
    2276:	80 81       	ld	r24, Z
    2278:	88 23       	and	r24, r24
    227a:	14 f0       	brlt	.+4      	; 0x2280 <LCD0_read+0x6c>
    227c:	80 e0       	ldi	r24, 0x00	; 0
    227e:	01 c0       	rjmp	.+2      	; 0x2282 <LCD0_read+0x6e>
    2280:	80 e8       	ldi	r24, 0x80	; 128
    2282:	90 81       	ld	r25, Z
    2284:	96 ff       	sbrs	r25, 6
    2286:	02 c0       	rjmp	.+4      	; 0x228c <LCD0_read+0x78>
    2288:	80 64       	ori	r24, 0x40	; 64
    228a:	01 c0       	rjmp	.+2      	; 0x228e <LCD0_read+0x7a>
    228c:	8f 7b       	andi	r24, 0xBF	; 191
    228e:	90 81       	ld	r25, Z
    2290:	95 ff       	sbrs	r25, 5
    2292:	02 c0       	rjmp	.+4      	; 0x2298 <LCD0_read+0x84>
    2294:	80 62       	ori	r24, 0x20	; 32
    2296:	01 c0       	rjmp	.+2      	; 0x229a <LCD0_read+0x86>
    2298:	8f 7d       	andi	r24, 0xDF	; 223
    229a:	90 81       	ld	r25, Z
    229c:	94 ff       	sbrs	r25, 4
    229e:	02 c0       	rjmp	.+4      	; 0x22a4 <LCD0_read+0x90>
    22a0:	80 61       	ori	r24, 0x10	; 16
    22a2:	01 c0       	rjmp	.+2      	; 0x22a6 <LCD0_read+0x92>
    22a4:	8f 7e       	andi	r24, 0xEF	; 239
    22a6:	e0 91 33 04 	lds	r30, 0x0433	; 0x800433 <lcd0_PORT>
    22aa:	f0 91 34 04 	lds	r31, 0x0434	; 0x800434 <lcd0_PORT+0x1>
    22ae:	90 81       	ld	r25, Z
    22b0:	9b 7f       	andi	r25, 0xFB	; 251
    22b2:	90 83       	st	Z, r25
    22b4:	e0 91 33 04 	lds	r30, 0x0433	; 0x800433 <lcd0_PORT>
    22b8:	f0 91 34 04 	lds	r31, 0x0434	; 0x800434 <lcd0_PORT+0x1>
    22bc:	90 81       	ld	r25, Z
    22be:	94 60       	ori	r25, 0x04	; 4
    22c0:	90 83       	st	Z, r25
    22c2:	e0 91 29 04 	lds	r30, 0x0429	; 0x800429 <lcd0_PIN>
    22c6:	f0 91 2a 04 	lds	r31, 0x042A	; 0x80042a <lcd0_PIN+0x1>
    22ca:	90 81       	ld	r25, Z
    22cc:	99 23       	and	r25, r25
    22ce:	14 f4       	brge	.+4      	; 0x22d4 <LCD0_read+0xc0>
    22d0:	88 60       	ori	r24, 0x08	; 8
    22d2:	01 c0       	rjmp	.+2      	; 0x22d6 <LCD0_read+0xc2>
    22d4:	87 7f       	andi	r24, 0xF7	; 247
    22d6:	90 81       	ld	r25, Z
    22d8:	96 ff       	sbrs	r25, 6
    22da:	02 c0       	rjmp	.+4      	; 0x22e0 <LCD0_read+0xcc>
    22dc:	84 60       	ori	r24, 0x04	; 4
    22de:	01 c0       	rjmp	.+2      	; 0x22e2 <LCD0_read+0xce>
    22e0:	8b 7f       	andi	r24, 0xFB	; 251
    22e2:	90 81       	ld	r25, Z
    22e4:	95 ff       	sbrs	r25, 5
    22e6:	02 c0       	rjmp	.+4      	; 0x22ec <LCD0_read+0xd8>
    22e8:	82 60       	ori	r24, 0x02	; 2
    22ea:	01 c0       	rjmp	.+2      	; 0x22ee <LCD0_read+0xda>
    22ec:	8d 7f       	andi	r24, 0xFD	; 253
    22ee:	90 81       	ld	r25, Z
    22f0:	94 ff       	sbrs	r25, 4
    22f2:	02 c0       	rjmp	.+4      	; 0x22f8 <LCD0_read+0xe4>
    22f4:	81 60       	ori	r24, 0x01	; 1
    22f6:	01 c0       	rjmp	.+2      	; 0x22fa <LCD0_read+0xe6>
    22f8:	8e 7f       	andi	r24, 0xFE	; 254
    22fa:	e0 91 33 04 	lds	r30, 0x0433	; 0x800433 <lcd0_PORT>
    22fe:	f0 91 34 04 	lds	r31, 0x0434	; 0x800434 <lcd0_PORT+0x1>
    2302:	90 81       	ld	r25, Z
    2304:	9b 7f       	andi	r25, 0xFB	; 251
    2306:	90 83       	st	Z, r25
    2308:	08 95       	ret

0000230a <LCD0_BF>:
    230a:	cf 93       	push	r28
    230c:	df 93       	push	r29
    230e:	80 e0       	ldi	r24, 0x00	; 0
    2310:	90 e0       	ldi	r25, 0x00	; 0
    2312:	80 df       	rcall	.-256    	; 0x2214 <LCD0_read>
    2314:	cb e0       	ldi	r28, 0x0B	; 11
    2316:	d0 e0       	ldi	r29, 0x00	; 0
    2318:	05 c0       	rjmp	.+10     	; 0x2324 <LCD0_BF+0x1a>
    231a:	80 e0       	ldi	r24, 0x00	; 0
    231c:	90 e0       	ldi	r25, 0x00	; 0
    231e:	7a df       	rcall	.-268    	; 0x2214 <LCD0_read>
    2320:	21 97       	sbiw	r28, 0x01	; 1
    2322:	11 f0       	breq	.+4      	; 0x2328 <LCD0_BF+0x1e>
    2324:	88 23       	and	r24, r24
    2326:	cc f3       	brlt	.-14     	; 0x231a <LCD0_BF+0x10>
    2328:	df 91       	pop	r29
    232a:	cf 91       	pop	r28
    232c:	08 95       	ret

0000232e <LCD0_putch>:
    232e:	61 e0       	ldi	r22, 0x01	; 1
    2330:	70 e0       	ldi	r23, 0x00	; 0
    2332:	ac de       	rcall	.-680    	; 0x208c <LCD0_write>
    2334:	ea cf       	rjmp	.-44     	; 0x230a <LCD0_BF>
    2336:	08 95       	ret

00002338 <LCD0_getch>:
    2338:	cf 93       	push	r28
    233a:	81 e0       	ldi	r24, 0x01	; 1
    233c:	90 e0       	ldi	r25, 0x00	; 0
    233e:	6a df       	rcall	.-300    	; 0x2214 <LCD0_read>
    2340:	c8 2f       	mov	r28, r24
    2342:	e3 df       	rcall	.-58     	; 0x230a <LCD0_BF>
    2344:	8c 2f       	mov	r24, r28
    2346:	cf 91       	pop	r28
    2348:	08 95       	ret

0000234a <LCD0_string>:
    234a:	cf 93       	push	r28
    234c:	df 93       	push	r29
    234e:	ec 01       	movw	r28, r24
    2350:	88 81       	ld	r24, Y
    2352:	88 23       	and	r24, r24
    2354:	41 f0       	breq	.+16     	; 0x2366 <LCD0_string+0x1c>
    2356:	21 96       	adiw	r28, 0x01	; 1
    2358:	61 e0       	ldi	r22, 0x01	; 1
    235a:	70 e0       	ldi	r23, 0x00	; 0
    235c:	97 de       	rcall	.-722    	; 0x208c <LCD0_write>
    235e:	d5 df       	rcall	.-86     	; 0x230a <LCD0_BF>
    2360:	89 91       	ld	r24, Y+
    2362:	81 11       	cpse	r24, r1
    2364:	f9 cf       	rjmp	.-14     	; 0x2358 <LCD0_string+0xe>
    2366:	df 91       	pop	r29
    2368:	cf 91       	pop	r28
    236a:	08 95       	ret

0000236c <LCD0_string_size>:
    236c:	0f 93       	push	r16
    236e:	1f 93       	push	r17
    2370:	cf 93       	push	r28
    2372:	df 93       	push	r29
    2374:	fc 01       	movw	r30, r24
    2376:	d6 2f       	mov	r29, r22
    2378:	80 81       	ld	r24, Z
    237a:	88 23       	and	r24, r24
    237c:	51 f0       	breq	.+20     	; 0x2392 <LCD0_string_size+0x26>
    237e:	8f 01       	movw	r16, r30
    2380:	0f 5f       	subi	r16, 0xFF	; 255
    2382:	1f 4f       	sbci	r17, 0xFF	; 255
    2384:	61 11       	cpse	r22, r1
    2386:	09 c0       	rjmp	.+18     	; 0x239a <LCD0_string_size+0x2e>
    2388:	1b c0       	rjmp	.+54     	; 0x23c0 <LCD0_string_size+0x54>
    238a:	cf 5f       	subi	r28, 0xFF	; 255
    238c:	dc 17       	cp	r29, r28
    238e:	30 f4       	brcc	.+12     	; 0x239c <LCD0_string_size+0x30>
    2390:	01 c0       	rjmp	.+2      	; 0x2394 <LCD0_string_size+0x28>
    2392:	c0 e0       	ldi	r28, 0x00	; 0
    2394:	cd 17       	cp	r28, r29
    2396:	60 f0       	brcs	.+24     	; 0x23b0 <LCD0_string_size+0x44>
    2398:	13 c0       	rjmp	.+38     	; 0x23c0 <LCD0_string_size+0x54>
    239a:	c1 e0       	ldi	r28, 0x01	; 1
    239c:	61 e0       	ldi	r22, 0x01	; 1
    239e:	70 e0       	ldi	r23, 0x00	; 0
    23a0:	75 de       	rcall	.-790    	; 0x208c <LCD0_write>
    23a2:	b3 df       	rcall	.-154    	; 0x230a <LCD0_BF>
    23a4:	f8 01       	movw	r30, r16
    23a6:	81 91       	ld	r24, Z+
    23a8:	8f 01       	movw	r16, r30
    23aa:	81 11       	cpse	r24, r1
    23ac:	ee cf       	rjmp	.-36     	; 0x238a <LCD0_string_size+0x1e>
    23ae:	f2 cf       	rjmp	.-28     	; 0x2394 <LCD0_string_size+0x28>
    23b0:	cf 5f       	subi	r28, 0xFF	; 255
    23b2:	61 e0       	ldi	r22, 0x01	; 1
    23b4:	70 e0       	ldi	r23, 0x00	; 0
    23b6:	80 e2       	ldi	r24, 0x20	; 32
    23b8:	69 de       	rcall	.-814    	; 0x208c <LCD0_write>
    23ba:	a7 df       	rcall	.-178    	; 0x230a <LCD0_BF>
    23bc:	cd 17       	cp	r28, r29
    23be:	c0 f3       	brcs	.-16     	; 0x23b0 <LCD0_string_size+0x44>
    23c0:	df 91       	pop	r29
    23c2:	cf 91       	pop	r28
    23c4:	1f 91       	pop	r17
    23c6:	0f 91       	pop	r16
    23c8:	08 95       	ret

000023ca <LCD0_hspace>:
    23ca:	cf 93       	push	r28
    23cc:	c8 2f       	mov	r28, r24
    23ce:	88 23       	and	r24, r24
    23d0:	39 f0       	breq	.+14     	; 0x23e0 <LCD0_hspace+0x16>
    23d2:	61 e0       	ldi	r22, 0x01	; 1
    23d4:	70 e0       	ldi	r23, 0x00	; 0
    23d6:	80 e2       	ldi	r24, 0x20	; 32
    23d8:	59 de       	rcall	.-846    	; 0x208c <LCD0_write>
    23da:	97 df       	rcall	.-210    	; 0x230a <LCD0_BF>
    23dc:	c1 50       	subi	r28, 0x01	; 1
    23de:	c9 f7       	brne	.-14     	; 0x23d2 <LCD0_hspace+0x8>
    23e0:	cf 91       	pop	r28
    23e2:	08 95       	ret

000023e4 <LCD0_gotoxy>:
    23e4:	26 2f       	mov	r18, r22
    23e6:	81 30       	cpi	r24, 0x01	; 1
    23e8:	91 05       	cpc	r25, r1
    23ea:	71 f0       	breq	.+28     	; 0x2408 <LCD0_gotoxy+0x24>
    23ec:	30 f0       	brcs	.+12     	; 0x23fa <LCD0_gotoxy+0x16>
    23ee:	82 30       	cpi	r24, 0x02	; 2
    23f0:	91 05       	cpc	r25, r1
    23f2:	89 f0       	breq	.+34     	; 0x2416 <LCD0_gotoxy+0x32>
    23f4:	03 97       	sbiw	r24, 0x03	; 3
    23f6:	b1 f0       	breq	.+44     	; 0x2424 <LCD0_gotoxy+0x40>
    23f8:	08 95       	ret
    23fa:	60 e0       	ldi	r22, 0x00	; 0
    23fc:	70 e0       	ldi	r23, 0x00	; 0
    23fe:	80 e8       	ldi	r24, 0x80	; 128
    2400:	82 0f       	add	r24, r18
    2402:	44 de       	rcall	.-888    	; 0x208c <LCD0_write>
    2404:	82 cf       	rjmp	.-252    	; 0x230a <LCD0_BF>
    2406:	08 95       	ret
    2408:	60 e0       	ldi	r22, 0x00	; 0
    240a:	70 e0       	ldi	r23, 0x00	; 0
    240c:	80 ec       	ldi	r24, 0xC0	; 192
    240e:	82 0f       	add	r24, r18
    2410:	3d de       	rcall	.-902    	; 0x208c <LCD0_write>
    2412:	7b cf       	rjmp	.-266    	; 0x230a <LCD0_BF>
    2414:	08 95       	ret
    2416:	60 e0       	ldi	r22, 0x00	; 0
    2418:	70 e0       	ldi	r23, 0x00	; 0
    241a:	84 e9       	ldi	r24, 0x94	; 148
    241c:	82 0f       	add	r24, r18
    241e:	36 de       	rcall	.-916    	; 0x208c <LCD0_write>
    2420:	74 cf       	rjmp	.-280    	; 0x230a <LCD0_BF>
    2422:	08 95       	ret
    2424:	60 e0       	ldi	r22, 0x00	; 0
    2426:	70 e0       	ldi	r23, 0x00	; 0
    2428:	84 ed       	ldi	r24, 0xD4	; 212
    242a:	82 0f       	add	r24, r18
    242c:	2f de       	rcall	.-930    	; 0x208c <LCD0_write>
    242e:	6d cf       	rjmp	.-294    	; 0x230a <LCD0_BF>
    2430:	08 95       	ret

00002432 <LCD0_clear>:
    2432:	60 e0       	ldi	r22, 0x00	; 0
    2434:	70 e0       	ldi	r23, 0x00	; 0
    2436:	81 e0       	ldi	r24, 0x01	; 1
    2438:	29 de       	rcall	.-942    	; 0x208c <LCD0_write>
    243a:	87 ee       	ldi	r24, 0xE7	; 231
    243c:	97 e1       	ldi	r25, 0x17	; 23
    243e:	01 97       	sbiw	r24, 0x01	; 1
    2440:	f1 f7       	brne	.-4      	; 0x243e <LCD0_clear+0xc>
    2442:	00 c0       	rjmp	.+0      	; 0x2444 <LCD0_clear+0x12>
    2444:	00 00       	nop
    2446:	08 95       	ret

00002448 <LCD0_inic>:
	return lcd0;
}
void LCD0_inic(void)
{
	//LCD INIC
	*lcd0_DDR=(1<<RS)|(1<<RW)|(1<<EN)|(0<<NC);
    2448:	e0 91 30 04 	lds	r30, 0x0430	; 0x800430 <lcd0_DDR>
    244c:	f0 91 31 04 	lds	r31, 0x0431	; 0x800431 <lcd0_DDR+0x1>
    2450:	87 e0       	ldi	r24, 0x07	; 7
    2452:	80 83       	st	Z, r24
	*lcd0_PORT=(1<<NC);
    2454:	e0 91 33 04 	lds	r30, 0x0433	; 0x800433 <lcd0_PORT>
    2458:	f0 91 34 04 	lds	r31, 0x0434	; 0x800434 <lcd0_PORT+0x1>
    245c:	88 e0       	ldi	r24, 0x08	; 8
    245e:	80 83       	st	Z, r24
    2460:	2f ef       	ldi	r18, 0xFF	; 255
    2462:	83 ef       	ldi	r24, 0xF3	; 243
    2464:	91 e0       	ldi	r25, 0x01	; 1
    2466:	21 50       	subi	r18, 0x01	; 1
    2468:	80 40       	sbci	r24, 0x00	; 0
    246a:	90 40       	sbci	r25, 0x00	; 0
    246c:	e1 f7       	brne	.-8      	; 0x2466 <LCD0_inic+0x1e>
    246e:	00 c0       	rjmp	.+0      	; 0x2470 <LCD0_inic+0x28>
    2470:	00 00       	nop
	/***INICIALIZACAO LCD**datasheet*/
	_delay_ms(40);
	LCD0_write(0x33,INST); //function set
    2472:	60 e0       	ldi	r22, 0x00	; 0
    2474:	70 e0       	ldi	r23, 0x00	; 0
    2476:	83 e3       	ldi	r24, 0x33	; 51
    2478:	09 de       	rcall	.-1006   	; 0x208c <LCD0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    247a:	20 ed       	ldi	r18, 0xD0	; 208
    247c:	2a 95       	dec	r18
    247e:	f1 f7       	brne	.-4      	; 0x247c <LCD0_inic+0x34>
	_delay_us(39);
	LCD0_write(0x33,INST); //function set
    2480:	60 e0       	ldi	r22, 0x00	; 0
    2482:	70 e0       	ldi	r23, 0x00	; 0
    2484:	83 e3       	ldi	r24, 0x33	; 51
    2486:	02 de       	rcall	.-1020   	; 0x208c <LCD0_write>
    2488:	80 ed       	ldi	r24, 0xD0	; 208
    248a:	8a 95       	dec	r24
    248c:	f1 f7       	brne	.-4      	; 0x248a <LCD0_inic+0x42>
	_delay_us(39);
	LCD0_write(0x2B,INST); //function set
    248e:	60 e0       	ldi	r22, 0x00	; 0
    2490:	70 e0       	ldi	r23, 0x00	; 0
    2492:	8b e2       	ldi	r24, 0x2B	; 43
    2494:	fb dd       	rcall	.-1034   	; 0x208c <LCD0_write>
    2496:	95 ec       	ldi	r25, 0xC5	; 197
    2498:	9a 95       	dec	r25
    249a:	f1 f7       	brne	.-4      	; 0x2498 <LCD0_inic+0x50>
    249c:	00 00       	nop
	_delay_us(37);
	LCD0_write(0x0C,INST);// display on/off control
    249e:	60 e0       	ldi	r22, 0x00	; 0
    24a0:	70 e0       	ldi	r23, 0x00	; 0
    24a2:	8c e0       	ldi	r24, 0x0C	; 12
    24a4:	f3 dd       	rcall	.-1050   	; 0x208c <LCD0_write>
    24a6:	25 ec       	ldi	r18, 0xC5	; 197
    24a8:	2a 95       	dec	r18
    24aa:	f1 f7       	brne	.-4      	; 0x24a8 <LCD0_inic+0x60>
	_delay_us(37);
	LCD0_write(0x01,INST);// clear display
    24ac:	00 00       	nop
    24ae:	60 e0       	ldi	r22, 0x00	; 0
    24b0:	70 e0       	ldi	r23, 0x00	; 0
    24b2:	81 e0       	ldi	r24, 0x01	; 1
    24b4:	eb dd       	rcall	.-1066   	; 0x208c <LCD0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    24b6:	87 ee       	ldi	r24, 0xE7	; 231
    24b8:	97 e1       	ldi	r25, 0x17	; 23
    24ba:	01 97       	sbiw	r24, 0x01	; 1
    24bc:	f1 f7       	brne	.-4      	; 0x24ba <LCD0_inic+0x72>
    24be:	00 c0       	rjmp	.+0      	; 0x24c0 <LCD0_inic+0x78>
	_delay_ms(1.53);
	LCD0_write(0x06,INST);// entry mode set (crazy settings)
    24c0:	00 00       	nop
    24c2:	60 e0       	ldi	r22, 0x00	; 0
    24c4:	70 e0       	ldi	r23, 0x00	; 0
    24c6:	86 e0       	ldi	r24, 0x06	; 6
    24c8:	e1 dd       	rcall	.-1086   	; 0x208c <LCD0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    24ca:	95 ec       	ldi	r25, 0xC5	; 197
    24cc:	9a 95       	dec	r25
    24ce:	f1 f7       	brne	.-4      	; 0x24cc <LCD0_inic+0x84>
    24d0:	00 00       	nop
    24d2:	08 95       	ret

000024d4 <LCD0enable>:
void LCD1_strobe(unsigned int num);
void LCD1_reboot(void);
unsigned int LCD_ticks(unsigned int num);
/***Procedure & Function***/
LCD0 LCD0enable(volatile uint8_t *ddr, volatile uint8_t *pin, volatile uint8_t *port)
{
    24d4:	1f 93       	push	r17
    24d6:	cf 93       	push	r28
    24d8:	df 93       	push	r29
    24da:	ec 01       	movw	r28, r24
	//LOCAL VARIABLES
	uint8_t tSREG;
	tSREG=SREG;
    24dc:	1f b7       	in	r17, 0x3f	; 63
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
    24de:	8f b7       	in	r24, 0x3f	; 63
    24e0:	8f 77       	andi	r24, 0x7F	; 127
    24e2:	8f bf       	out	0x3f, r24	; 63
	//ALLOCAÇÂO MEMORIA PARA Estrutura
	LCD0 lcd0;
	//import parametros
	lcd0_DDR=ddr;
    24e4:	70 93 31 04 	sts	0x0431, r23	; 0x800431 <lcd0_DDR+0x1>
    24e8:	60 93 30 04 	sts	0x0430, r22	; 0x800430 <lcd0_DDR>
	lcd0_PIN=pin;
    24ec:	50 93 2a 04 	sts	0x042A, r21	; 0x80042a <lcd0_PIN+0x1>
    24f0:	40 93 29 04 	sts	0x0429, r20	; 0x800429 <lcd0_PIN>
	lcd0_PORT=port;
    24f4:	30 93 34 04 	sts	0x0434, r19	; 0x800434 <lcd0_PORT+0x1>
    24f8:	20 93 33 04 	sts	0x0433, r18	; 0x800433 <lcd0_PORT>
	//inic variables
	*lcd0_DDR=0x00;
    24fc:	fb 01       	movw	r30, r22
    24fe:	10 82       	st	Z, r1
	*lcd0_PORT=0xFF;
    2500:	e0 91 33 04 	lds	r30, 0x0433	; 0x800433 <lcd0_PORT>
    2504:	f0 91 34 04 	lds	r31, 0x0434	; 0x800434 <lcd0_PORT+0x1>
    2508:	8f ef       	ldi	r24, 0xFF	; 255
    250a:	80 83       	st	Z, r24
	lcd0_detect=*lcd0_PIN & (1<<NC);
    250c:	e0 91 29 04 	lds	r30, 0x0429	; 0x800429 <lcd0_PIN>
    2510:	f0 91 2a 04 	lds	r31, 0x042A	; 0x80042a <lcd0_PIN+0x1>
    2514:	80 81       	ld	r24, Z
    2516:	88 70       	andi	r24, 0x08	; 8
    2518:	80 93 32 04 	sts	0x0432, r24	; 0x800432 <lcd0_detect>
	lcd0.hspace=LCD0_hspace;
	lcd0.clear=LCD0_clear;
	lcd0.gotoxy=LCD0_gotoxy;
	lcd0.reboot=LCD0_reboot;
	//LCD INIC
	LCD0_inic();
    251c:	95 df       	rcall	.-214    	; 0x2448 <LCD0_inic>
	SREG=tSREG;
    251e:	1f bf       	out	0x3f, r17	; 63
	//
	return lcd0;
    2520:	86 e4       	ldi	r24, 0x46	; 70
    2522:	90 e1       	ldi	r25, 0x10	; 16
    2524:	99 83       	std	Y+1, r25	; 0x01
    2526:	88 83       	st	Y, r24
    2528:	8a e0       	ldi	r24, 0x0A	; 10
    252a:	91 e1       	ldi	r25, 0x11	; 17
    252c:	9b 83       	std	Y+3, r25	; 0x03
    252e:	8a 83       	std	Y+2, r24	; 0x02
    2530:	85 e8       	ldi	r24, 0x85	; 133
    2532:	91 e1       	ldi	r25, 0x11	; 17
    2534:	9d 83       	std	Y+5, r25	; 0x05
    2536:	8c 83       	std	Y+4, r24	; 0x04
    2538:	87 e9       	ldi	r24, 0x97	; 151
    253a:	91 e1       	ldi	r25, 0x11	; 17
    253c:	9f 83       	std	Y+7, r25	; 0x07
    253e:	8e 83       	std	Y+6, r24	; 0x06
    2540:	8c e9       	ldi	r24, 0x9C	; 156
    2542:	91 e1       	ldi	r25, 0x11	; 17
    2544:	99 87       	std	Y+9, r25	; 0x09
    2546:	88 87       	std	Y+8, r24	; 0x08
    2548:	85 ea       	ldi	r24, 0xA5	; 165
    254a:	91 e1       	ldi	r25, 0x11	; 17
    254c:	9b 87       	std	Y+11, r25	; 0x0b
    254e:	8a 87       	std	Y+10, r24	; 0x0a
    2550:	86 eb       	ldi	r24, 0xB6	; 182
    2552:	91 e1       	ldi	r25, 0x11	; 17
    2554:	9d 87       	std	Y+13, r25	; 0x0d
    2556:	8c 87       	std	Y+12, r24	; 0x0c
    2558:	85 ee       	ldi	r24, 0xE5	; 229
    255a:	91 e1       	ldi	r25, 0x11	; 17
    255c:	9f 87       	std	Y+15, r25	; 0x0f
    255e:	8e 87       	std	Y+14, r24	; 0x0e
    2560:	89 e1       	ldi	r24, 0x19	; 25
    2562:	92 e1       	ldi	r25, 0x12	; 18
    2564:	99 8b       	std	Y+17, r25	; 0x11
    2566:	88 8b       	std	Y+16, r24	; 0x10
    2568:	82 ef       	ldi	r24, 0xF2	; 242
    256a:	91 e1       	ldi	r25, 0x11	; 17
    256c:	9b 8b       	std	Y+19, r25	; 0x13
    256e:	8a 8b       	std	Y+18, r24	; 0x12
    2570:	81 ec       	ldi	r24, 0xC1	; 193
    2572:	92 e1       	ldi	r25, 0x12	; 18
    2574:	9d 8b       	std	Y+21, r25	; 0x15
    2576:	8c 8b       	std	Y+20, r24	; 0x14
}
    2578:	ce 01       	movw	r24, r28
    257a:	df 91       	pop	r29
    257c:	cf 91       	pop	r28
    257e:	1f 91       	pop	r17
    2580:	08 95       	ret

00002582 <LCD0_reboot>:
	*lcd0_PORT|=(1<<EN);
	LCD_ticks(num);
	*lcd0_PORT&=~(1<<EN);
}
void LCD0_reboot(void)
{
    2582:	cf 93       	push	r28
    2584:	df 93       	push	r29
	uint8_t tSREG;
	tSREG=SREG;
    2586:	df b7       	in	r29, 0x3f	; 63
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
    2588:	8f b7       	in	r24, 0x3f	; 63
    258a:	8f 77       	andi	r24, 0x7F	; 127
    258c:	8f bf       	out	0x3f, r24	; 63
	//low high detect pin NC
	uint8_t i;
	uint8_t tmp;
	tmp=*lcd0_PIN & (1<<NC);
    258e:	e0 91 29 04 	lds	r30, 0x0429	; 0x800429 <lcd0_PIN>
    2592:	f0 91 2a 04 	lds	r31, 0x042A	; 0x80042a <lcd0_PIN+0x1>
    2596:	c0 81       	ld	r28, Z
    2598:	c8 70       	andi	r28, 0x08	; 8
	i=tmp^lcd0_detect;
    259a:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <lcd0_detect>
    259e:	8c 27       	eor	r24, r28
	i&=tmp;
	if(i)
    25a0:	8c 23       	and	r24, r28
    25a2:	09 f0       	breq	.+2      	; 0x25a6 <LCD0_reboot+0x24>
		LCD0_inic();
    25a4:	51 df       	rcall	.-350    	; 0x2448 <LCD0_inic>
	lcd0_detect=tmp;
    25a6:	c0 93 32 04 	sts	0x0432, r28	; 0x800432 <lcd0_detect>
	SREG=tSREG;
    25aa:	df bf       	out	0x3f, r29	; 63
}
    25ac:	df 91       	pop	r29
    25ae:	cf 91       	pop	r28
    25b0:	08 95       	ret

000025b2 <PCF8563RTC_SetTime>:
	i2c.Write(0x00);						// Write 0x00 to Control register to disable SQW-Out
	i2c.Stop();								// Stop I2C communication after initializing PCF8563
}
/***void PCF8563RTC_SetTime(uint8_t var_hour_u8, uint8_t var_min_u8, uint8_t var_sec_u8)***/
void PCF8563RTC_SetTime(uint8_t var_hour_u8, uint8_t var_min_u8, uint8_t var_sec_u8)
{
    25b2:	ff 92       	push	r15
    25b4:	0f 93       	push	r16
    25b6:	1f 93       	push	r17
    25b8:	cf 93       	push	r28
    25ba:	df 93       	push	r29
    25bc:	18 2f       	mov	r17, r24
    25be:	06 2f       	mov	r16, r22
    25c0:	f4 2e       	mov	r15, r20
	i2c.Start();                            // Start I2C communication
    25c2:	c8 e5       	ldi	r28, 0x58	; 88
    25c4:	d4 e0       	ldi	r29, 0x04	; 4
    25c6:	e8 81       	ld	r30, Y
    25c8:	f9 81       	ldd	r31, Y+1	; 0x01
    25ca:	09 95       	icall
	i2c.Write(PCF8563WriteMode_U8);         // connect to PCF8563 by sending its ID on I2c Bus
    25cc:	ec 81       	ldd	r30, Y+4	; 0x04
    25ce:	fd 81       	ldd	r31, Y+5	; 0x05
    25d0:	82 ea       	ldi	r24, 0xA2	; 162
    25d2:	09 95       	icall
	i2c.Write(PCF8563SecondRegAddress_U8);  // Select the SEC RAM address
    25d4:	ec 81       	ldd	r30, Y+4	; 0x04
    25d6:	fd 81       	ldd	r31, Y+5	; 0x05
    25d8:	82 e0       	ldi	r24, 0x02	; 2
    25da:	09 95       	icall
	i2c.Write(var_sec_u8);			        // Write sec from RAM address 02H
    25dc:	ec 81       	ldd	r30, Y+4	; 0x04
    25de:	fd 81       	ldd	r31, Y+5	; 0x05
    25e0:	8f 2d       	mov	r24, r15
    25e2:	09 95       	icall
	i2c.Write(var_min_u8);			        // Write min from RAM address 03H
    25e4:	ec 81       	ldd	r30, Y+4	; 0x04
    25e6:	fd 81       	ldd	r31, Y+5	; 0x05
    25e8:	80 2f       	mov	r24, r16
    25ea:	09 95       	icall
	i2c.Write(var_hour_u8);			        // Write hour from RAM address 04H
    25ec:	ec 81       	ldd	r30, Y+4	; 0x04
    25ee:	fd 81       	ldd	r31, Y+5	; 0x05
    25f0:	81 2f       	mov	r24, r17
    25f2:	09 95       	icall
	i2c.Stop();           	                // Stop I2C communication after Setting the Time
    25f4:	ea 81       	ldd	r30, Y+2	; 0x02
    25f6:	fb 81       	ldd	r31, Y+3	; 0x03
    25f8:	09 95       	icall
}
    25fa:	df 91       	pop	r29
    25fc:	cf 91       	pop	r28
    25fe:	1f 91       	pop	r17
    2600:	0f 91       	pop	r16
    2602:	ff 90       	pop	r15
    2604:	08 95       	ret

00002606 <PCF8563RTC_SetHour>:
/***void PCF8563RTC_SetHour(uint8_t var_hour_u8)***/
void PCF8563RTC_SetHour(uint8_t var_hour_u8)
{
    2606:	1f 93       	push	r17
    2608:	cf 93       	push	r28
    260a:	df 93       	push	r29
    260c:	18 2f       	mov	r17, r24
	i2c.Start();                            // Start I2C communication
    260e:	c8 e5       	ldi	r28, 0x58	; 88
    2610:	d4 e0       	ldi	r29, 0x04	; 4
    2612:	e8 81       	ld	r30, Y
    2614:	f9 81       	ldd	r31, Y+1	; 0x01
    2616:	09 95       	icall
	i2c.Write(PCF8563WriteMode_U8);         // connect to PCF8563 by sending its ID on I2c Bus
    2618:	ec 81       	ldd	r30, Y+4	; 0x04
    261a:	fd 81       	ldd	r31, Y+5	; 0x05
    261c:	82 ea       	ldi	r24, 0xA2	; 162
    261e:	09 95       	icall
	i2c.Write(PCF8563HourRegAddress_U8);    // Select the SEC RAM address
    2620:	ec 81       	ldd	r30, Y+4	; 0x04
    2622:	fd 81       	ldd	r31, Y+5	; 0x05
    2624:	84 e0       	ldi	r24, 0x04	; 4
    2626:	09 95       	icall
	i2c.Write(var_hour_u8);			        // Write hour from RAM address 04H
    2628:	ec 81       	ldd	r30, Y+4	; 0x04
    262a:	fd 81       	ldd	r31, Y+5	; 0x05
    262c:	81 2f       	mov	r24, r17
    262e:	09 95       	icall
	i2c.Stop();           	                // Stop I2C communication after Setting the Time
    2630:	ea 81       	ldd	r30, Y+2	; 0x02
    2632:	fb 81       	ldd	r31, Y+3	; 0x03
    2634:	09 95       	icall
}
    2636:	df 91       	pop	r29
    2638:	cf 91       	pop	r28
    263a:	1f 91       	pop	r17
    263c:	08 95       	ret

0000263e <PCF8563RTC_SetMinute>:
/***void PCF8563RTC_SetMinute(uint8_t var_min_u8)***/
void PCF8563RTC_SetMinute(uint8_t var_min_u8)
{
    263e:	1f 93       	push	r17
    2640:	cf 93       	push	r28
    2642:	df 93       	push	r29
    2644:	18 2f       	mov	r17, r24
	i2c.Start();                            // Start I2C communication
    2646:	c8 e5       	ldi	r28, 0x58	; 88
    2648:	d4 e0       	ldi	r29, 0x04	; 4
    264a:	e8 81       	ld	r30, Y
    264c:	f9 81       	ldd	r31, Y+1	; 0x01
    264e:	09 95       	icall
	i2c.Write(PCF8563WriteMode_U8);         // connect to PCF8563 by sending its ID on I2c Bus
    2650:	ec 81       	ldd	r30, Y+4	; 0x04
    2652:	fd 81       	ldd	r31, Y+5	; 0x05
    2654:	82 ea       	ldi	r24, 0xA2	; 162
    2656:	09 95       	icall
	i2c.Write(PCF8563MinuteRegAddress_U8);  // Select the SEC RAM address
    2658:	ec 81       	ldd	r30, Y+4	; 0x04
    265a:	fd 81       	ldd	r31, Y+5	; 0x05
    265c:	83 e0       	ldi	r24, 0x03	; 3
    265e:	09 95       	icall
	i2c.Write(var_min_u8);			        // Write min from RAM address 03H
    2660:	ec 81       	ldd	r30, Y+4	; 0x04
    2662:	fd 81       	ldd	r31, Y+5	; 0x05
    2664:	81 2f       	mov	r24, r17
    2666:	09 95       	icall
	i2c.Stop();           	                // Stop I2C communication after Setting the Time
    2668:	ea 81       	ldd	r30, Y+2	; 0x02
    266a:	fb 81       	ldd	r31, Y+3	; 0x03
    266c:	09 95       	icall
}
    266e:	df 91       	pop	r29
    2670:	cf 91       	pop	r28
    2672:	1f 91       	pop	r17
    2674:	08 95       	ret

00002676 <PCF8563RTC_SetSecond>:
/***void PCF8563RTC_SetSecond(uint8_t var_sec_u8)***/
void PCF8563RTC_SetSecond(uint8_t var_sec_u8)
{
    2676:	1f 93       	push	r17
    2678:	cf 93       	push	r28
    267a:	df 93       	push	r29
    267c:	18 2f       	mov	r17, r24
	i2c.Start();                            // Start I2C communication
    267e:	c8 e5       	ldi	r28, 0x58	; 88
    2680:	d4 e0       	ldi	r29, 0x04	; 4
    2682:	e8 81       	ld	r30, Y
    2684:	f9 81       	ldd	r31, Y+1	; 0x01
    2686:	09 95       	icall
	i2c.Write(PCF8563WriteMode_U8);         // connect to PCF8563 by sending its ID on I2c Bus
    2688:	ec 81       	ldd	r30, Y+4	; 0x04
    268a:	fd 81       	ldd	r31, Y+5	; 0x05
    268c:	82 ea       	ldi	r24, 0xA2	; 162
    268e:	09 95       	icall
	i2c.Write(PCF8563SecondRegAddress_U8);  // Select the SEC RAM address
    2690:	ec 81       	ldd	r30, Y+4	; 0x04
    2692:	fd 81       	ldd	r31, Y+5	; 0x05
    2694:	82 e0       	ldi	r24, 0x02	; 2
    2696:	09 95       	icall
	i2c.Write(var_sec_u8);			        // Write sec from RAM address 02H
    2698:	ec 81       	ldd	r30, Y+4	; 0x04
    269a:	fd 81       	ldd	r31, Y+5	; 0x05
    269c:	81 2f       	mov	r24, r17
    269e:	09 95       	icall
	i2c.Stop();           	                // Stop I2C communication after Setting the Time
    26a0:	ea 81       	ldd	r30, Y+2	; 0x02
    26a2:	fb 81       	ldd	r31, Y+3	; 0x03
    26a4:	09 95       	icall
}
    26a6:	df 91       	pop	r29
    26a8:	cf 91       	pop	r28
    26aa:	1f 91       	pop	r17
    26ac:	08 95       	ret

000026ae <PCF8563RTC_SetClkOut>:
/***void PCF8563RTC_SetClkOut(uint8_t onoff, uint8_t freq)***/
void PCF8563RTC_SetClkOut(uint8_t onoff, uint8_t freq)
{
    26ae:	1f 93       	push	r17
    26b0:	cf 93       	push	r28
    26b2:	df 93       	push	r29
	uint8_t word=0;
	if(onoff)
    26b4:	88 23       	and	r24, r24
    26b6:	21 f0       	breq	.+8      	; 0x26c0 <PCF8563RTC_SetClkOut+0x12>
		word=0x80 | (freq & 0x03);
    26b8:	63 70       	andi	r22, 0x03	; 3
    26ba:	16 2f       	mov	r17, r22
    26bc:	10 68       	ori	r17, 0x80	; 128
    26be:	01 c0       	rjmp	.+2      	; 0x26c2 <PCF8563RTC_SetClkOut+0x14>
	i2c.Stop();           	                // Stop I2C communication after Setting the Time
}
/***void PCF8563RTC_SetClkOut(uint8_t onoff, uint8_t freq)***/
void PCF8563RTC_SetClkOut(uint8_t onoff, uint8_t freq)
{
	uint8_t word=0;
    26c0:	10 e0       	ldi	r17, 0x00	; 0
	if(onoff)
		word=0x80 | (freq & 0x03);
	i2c.Start();                            // Start I2C communication
    26c2:	c8 e5       	ldi	r28, 0x58	; 88
    26c4:	d4 e0       	ldi	r29, 0x04	; 4
    26c6:	e8 81       	ld	r30, Y
    26c8:	f9 81       	ldd	r31, Y+1	; 0x01
    26ca:	09 95       	icall
	i2c.Write(PCF8563WriteMode_U8);			// connect to PCF8563 by sending its ID on I2c Bus
    26cc:	ec 81       	ldd	r30, Y+4	; 0x04
    26ce:	fd 81       	ldd	r31, Y+5	; 0x05
    26d0:	82 ea       	ldi	r24, 0xA2	; 162
    26d2:	09 95       	icall
	i2c.Write(PCF8563CLKOUT_control_U8);	// Select the CLKOUT RAM address
    26d4:	ec 81       	ldd	r30, Y+4	; 0x04
    26d6:	fd 81       	ldd	r31, Y+5	; 0x05
    26d8:	8d e0       	ldi	r24, 0x0D	; 13
    26da:	09 95       	icall
	i2c.Write(word);						// Write Clock from RAM address 0DH						
    26dc:	ec 81       	ldd	r30, Y+4	; 0x04
    26de:	fd 81       	ldd	r31, Y+5	; 0x05
    26e0:	81 2f       	mov	r24, r17
    26e2:	09 95       	icall
	i2c.Stop();           	                // Stop I2C communication after Setting the Time
    26e4:	ea 81       	ldd	r30, Y+2	; 0x02
    26e6:	fb 81       	ldd	r31, Y+3	; 0x03
    26e8:	09 95       	icall
}
    26ea:	df 91       	pop	r29
    26ec:	cf 91       	pop	r28
    26ee:	1f 91       	pop	r17
    26f0:	08 95       	ret

000026f2 <PCF8563RTC_SetDate>:
/***void PCF8563RTC_SetDate(uint8_t var_day_u8, uint8_t var_weekday_u8, uint8_t var_month_u8, uint8_t var_year_u8)***/
void PCF8563RTC_SetDate(uint8_t var_day_u8, uint8_t var_weekday_u8, uint8_t var_month_u8, uint8_t var_year_u8)
{
    26f2:	ef 92       	push	r14
    26f4:	ff 92       	push	r15
    26f6:	0f 93       	push	r16
    26f8:	1f 93       	push	r17
    26fa:	cf 93       	push	r28
    26fc:	df 93       	push	r29
    26fe:	e8 2e       	mov	r14, r24
    2700:	f6 2e       	mov	r15, r22
    2702:	04 2f       	mov	r16, r20
    2704:	12 2f       	mov	r17, r18
	i2c.Start();                          // Start I2C communication
    2706:	c8 e5       	ldi	r28, 0x58	; 88
    2708:	d4 e0       	ldi	r29, 0x04	; 4
    270a:	e8 81       	ld	r30, Y
    270c:	f9 81       	ldd	r31, Y+1	; 0x01
    270e:	09 95       	icall
	i2c.Write(PCF8563WriteMode_U8);	      // connect to PCF8563 by sending its ID on I2c Bus
    2710:	ec 81       	ldd	r30, Y+4	; 0x04
    2712:	fd 81       	ldd	r31, Y+5	; 0x05
    2714:	82 ea       	ldi	r24, 0xA2	; 162
    2716:	09 95       	icall
	i2c.Write(PCF8563DayRegAddress_U8);  // Request DAY RAM address at 05H
    2718:	ec 81       	ldd	r30, Y+4	; 0x04
    271a:	fd 81       	ldd	r31, Y+5	; 0x05
    271c:	85 e0       	ldi	r24, 0x05	; 5
    271e:	09 95       	icall
	i2c.Write(var_day_u8);			      // Write date on RAM address 05H
    2720:	ec 81       	ldd	r30, Y+4	; 0x04
    2722:	fd 81       	ldd	r31, Y+5	; 0x05
    2724:	8e 2d       	mov	r24, r14
    2726:	09 95       	icall
	i2c.Write(var_weekday_u8);            // Write date on RAM address 06H
    2728:	ec 81       	ldd	r30, Y+4	; 0x04
    272a:	fd 81       	ldd	r31, Y+5	; 0x05
    272c:	8f 2d       	mov	r24, r15
    272e:	09 95       	icall
	i2c.Write(var_month_u8);			  // Write month on RAM address 07H
    2730:	ec 81       	ldd	r30, Y+4	; 0x04
    2732:	fd 81       	ldd	r31, Y+5	; 0x05
    2734:	80 2f       	mov	r24, r16
    2736:	09 95       	icall
	i2c.Write(var_year_u8);			      // Write year on RAM address 08h
    2738:	ec 81       	ldd	r30, Y+4	; 0x04
    273a:	fd 81       	ldd	r31, Y+5	; 0x05
    273c:	81 2f       	mov	r24, r17
    273e:	09 95       	icall
	i2c.Stop();				              // Stop I2C communication after Setting the Date
    2740:	ea 81       	ldd	r30, Y+2	; 0x02
    2742:	fb 81       	ldd	r31, Y+3	; 0x03
    2744:	09 95       	icall
}
    2746:	df 91       	pop	r29
    2748:	cf 91       	pop	r28
    274a:	1f 91       	pop	r17
    274c:	0f 91       	pop	r16
    274e:	ff 90       	pop	r15
    2750:	ef 90       	pop	r14
    2752:	08 95       	ret

00002754 <PCF8563RTC_SetYear>:
/***void PCF8563RTC_SetYear(uint8_t var_year_u8)***/
void PCF8563RTC_SetYear(uint8_t var_year_u8)
{
    2754:	1f 93       	push	r17
    2756:	cf 93       	push	r28
    2758:	df 93       	push	r29
    275a:	18 2f       	mov	r17, r24
	i2c.Start();                          // Start I2C communication
    275c:	c8 e5       	ldi	r28, 0x58	; 88
    275e:	d4 e0       	ldi	r29, 0x04	; 4
    2760:	e8 81       	ld	r30, Y
    2762:	f9 81       	ldd	r31, Y+1	; 0x01
    2764:	09 95       	icall
	i2c.Write(PCF8563WriteMode_U8);	      // connect to PCF8563 by sending its ID on I2c Bus
    2766:	ec 81       	ldd	r30, Y+4	; 0x04
    2768:	fd 81       	ldd	r31, Y+5	; 0x05
    276a:	82 ea       	ldi	r24, 0xA2	; 162
    276c:	09 95       	icall
	i2c.Write(PCF8563YearRegAddress_U8);  // Request DAY RAM address at 08H
    276e:	ec 81       	ldd	r30, Y+4	; 0x04
    2770:	fd 81       	ldd	r31, Y+5	; 0x05
    2772:	88 e0       	ldi	r24, 0x08	; 8
    2774:	09 95       	icall
	i2c.Write(var_year_u8);			      // Write year on RAM address 08h
    2776:	ec 81       	ldd	r30, Y+4	; 0x04
    2778:	fd 81       	ldd	r31, Y+5	; 0x05
    277a:	81 2f       	mov	r24, r17
    277c:	09 95       	icall
	i2c.Stop();				              // Stop I2C communication after Setting the Date
    277e:	ea 81       	ldd	r30, Y+2	; 0x02
    2780:	fb 81       	ldd	r31, Y+3	; 0x03
    2782:	09 95       	icall
}
    2784:	df 91       	pop	r29
    2786:	cf 91       	pop	r28
    2788:	1f 91       	pop	r17
    278a:	08 95       	ret

0000278c <PCF8563RTC_SetMonth>:
/***void PCF8563RTC_SetMonth(uint8_t var_month_u8)***/
void PCF8563RTC_SetMonth(uint8_t var_month_u8)
{
    278c:	1f 93       	push	r17
    278e:	cf 93       	push	r28
    2790:	df 93       	push	r29
    2792:	18 2f       	mov	r17, r24
	i2c.Start();                           // Start I2C communication
    2794:	c8 e5       	ldi	r28, 0x58	; 88
    2796:	d4 e0       	ldi	r29, 0x04	; 4
    2798:	e8 81       	ld	r30, Y
    279a:	f9 81       	ldd	r31, Y+1	; 0x01
    279c:	09 95       	icall
	i2c.Write(PCF8563WriteMode_U8);	       // connect to PCF8563 by sending its ID on I2c Bus
    279e:	ec 81       	ldd	r30, Y+4	; 0x04
    27a0:	fd 81       	ldd	r31, Y+5	; 0x05
    27a2:	82 ea       	ldi	r24, 0xA2	; 162
    27a4:	09 95       	icall
	i2c.Write(PCF8563MonthRegAddress_U8);  // Request DAY RAM address at 07H
    27a6:	ec 81       	ldd	r30, Y+4	; 0x04
    27a8:	fd 81       	ldd	r31, Y+5	; 0x05
    27aa:	87 e0       	ldi	r24, 0x07	; 7
    27ac:	09 95       	icall
	i2c.Write(var_month_u8);			   // Write month on RAM address 07H
    27ae:	ec 81       	ldd	r30, Y+4	; 0x04
    27b0:	fd 81       	ldd	r31, Y+5	; 0x05
    27b2:	81 2f       	mov	r24, r17
    27b4:	09 95       	icall
	i2c.Stop();				               // Stop I2C communication after Setting the Date
    27b6:	ea 81       	ldd	r30, Y+2	; 0x02
    27b8:	fb 81       	ldd	r31, Y+3	; 0x03
    27ba:	09 95       	icall
}
    27bc:	df 91       	pop	r29
    27be:	cf 91       	pop	r28
    27c0:	1f 91       	pop	r17
    27c2:	08 95       	ret

000027c4 <PCF8563RTC_SetWeekday>:
/***void PCF8563RTC_SetWeekday(uint8_t var_weekday_u8)***/
void PCF8563RTC_SetWeekday(uint8_t var_weekday_u8)
{
    27c4:	1f 93       	push	r17
    27c6:	cf 93       	push	r28
    27c8:	df 93       	push	r29
    27ca:	18 2f       	mov	r17, r24
	i2c.Start();                             // Start I2C communication
    27cc:	c8 e5       	ldi	r28, 0x58	; 88
    27ce:	d4 e0       	ldi	r29, 0x04	; 4
    27d0:	e8 81       	ld	r30, Y
    27d2:	f9 81       	ldd	r31, Y+1	; 0x01
    27d4:	09 95       	icall
	i2c.Write(PCF8563WriteMode_U8);	         // connect to PCF8563 by sending its ID on I2c Bus
    27d6:	ec 81       	ldd	r30, Y+4	; 0x04
    27d8:	fd 81       	ldd	r31, Y+5	; 0x05
    27da:	82 ea       	ldi	r24, 0xA2	; 162
    27dc:	09 95       	icall
	i2c.Write(PCF8563WeekdayRegAddress_U8);  // Request DAY RAM address at 06H
    27de:	ec 81       	ldd	r30, Y+4	; 0x04
    27e0:	fd 81       	ldd	r31, Y+5	; 0x05
    27e2:	86 e0       	ldi	r24, 0x06	; 6
    27e4:	09 95       	icall
	i2c.Write(var_weekday_u8);               // Write date on RAM address 06H
    27e6:	ec 81       	ldd	r30, Y+4	; 0x04
    27e8:	fd 81       	ldd	r31, Y+5	; 0x05
    27ea:	81 2f       	mov	r24, r17
    27ec:	09 95       	icall
	i2c.Stop();				                 // Stop I2C communication after Setting the Date
    27ee:	ea 81       	ldd	r30, Y+2	; 0x02
    27f0:	fb 81       	ldd	r31, Y+3	; 0x03
    27f2:	09 95       	icall
}
    27f4:	df 91       	pop	r29
    27f6:	cf 91       	pop	r28
    27f8:	1f 91       	pop	r17
    27fa:	08 95       	ret

000027fc <PCF8563RTC_SetDay>:
/***void PCF8563RTC_SetDay(uint8_t var_day_u8)***/
void PCF8563RTC_SetDay(uint8_t var_day_u8)
{
    27fc:	1f 93       	push	r17
    27fe:	cf 93       	push	r28
    2800:	df 93       	push	r29
    2802:	18 2f       	mov	r17, r24
	i2c.Start();                          // Start I2C communication
    2804:	c8 e5       	ldi	r28, 0x58	; 88
    2806:	d4 e0       	ldi	r29, 0x04	; 4
    2808:	e8 81       	ld	r30, Y
    280a:	f9 81       	ldd	r31, Y+1	; 0x01
    280c:	09 95       	icall
	i2c.Write(PCF8563WriteMode_U8);	      // connect to PCF8563 by sending its ID on I2c Bus
    280e:	ec 81       	ldd	r30, Y+4	; 0x04
    2810:	fd 81       	ldd	r31, Y+5	; 0x05
    2812:	82 ea       	ldi	r24, 0xA2	; 162
    2814:	09 95       	icall
	i2c.Write(PCF8563DayRegAddress_U8);  // Request DAY RAM address at 05H
    2816:	ec 81       	ldd	r30, Y+4	; 0x04
    2818:	fd 81       	ldd	r31, Y+5	; 0x05
    281a:	85 e0       	ldi	r24, 0x05	; 5
    281c:	09 95       	icall
	i2c.Write(var_day_u8);			      // Write date on RAM address 05H
    281e:	ec 81       	ldd	r30, Y+4	; 0x04
    2820:	fd 81       	ldd	r31, Y+5	; 0x05
    2822:	81 2f       	mov	r24, r17
    2824:	09 95       	icall
	i2c.Stop();				              // Stop I2C communication after Setting the Date
    2826:	ea 81       	ldd	r30, Y+2	; 0x02
    2828:	fb 81       	ldd	r31, Y+3	; 0x03
    282a:	09 95       	icall
}
    282c:	df 91       	pop	r29
    282e:	cf 91       	pop	r28
    2830:	1f 91       	pop	r17
    2832:	08 95       	ret

00002834 <PCF8563RTC_GetTime>:
/***struct time PCF8563RTC_GetTime(void)***/
struct time PCF8563RTC_GetTime(void)
{
    2834:	ff 92       	push	r15
    2836:	0f 93       	push	r16
    2838:	1f 93       	push	r17
    283a:	cf 93       	push	r28
    283c:	df 93       	push	r29
	struct time result;
	i2c.Start();							       // Start I2C communication
    283e:	c8 e5       	ldi	r28, 0x58	; 88
    2840:	d4 e0       	ldi	r29, 0x04	; 4
    2842:	e8 81       	ld	r30, Y
    2844:	f9 81       	ldd	r31, Y+1	; 0x01
    2846:	09 95       	icall
	i2c.Write(PCF8563WriteMode_U8);			       // connect to PCF8563 by sending its ID on I2c Bus
    2848:	ec 81       	ldd	r30, Y+4	; 0x04
    284a:	fd 81       	ldd	r31, Y+5	; 0x05
    284c:	82 ea       	ldi	r24, 0xA2	; 162
    284e:	09 95       	icall
	i2c.Write(PCF8563SecondRegAddress_U8);	       // Request Sec RAM address at 00H
    2850:	ec 81       	ldd	r30, Y+4	; 0x04
    2852:	fd 81       	ldd	r31, Y+5	; 0x05
    2854:	82 e0       	ldi	r24, 0x02	; 2
    2856:	09 95       	icall
	i2c.Stop();								       // Stop I2C communication after selecting Sec Register
    2858:	ea 81       	ldd	r30, Y+2	; 0x02
    285a:	fb 81       	ldd	r31, Y+3	; 0x03
    285c:	09 95       	icall
	i2c.Start();							       // Start I2C communication
    285e:	e8 81       	ld	r30, Y
    2860:	f9 81       	ldd	r31, Y+1	; 0x01
    2862:	09 95       	icall
	i2c.Write(PCF8563ReadMode_U8);			       // connect to PCF8563(Read mode) by sending its ID
    2864:	ec 81       	ldd	r30, Y+4	; 0x04
    2866:	fd 81       	ldd	r31, Y+5	; 0x05
    2868:	83 ea       	ldi	r24, 0xA3	; 163
    286a:	09 95       	icall
	result.VL_seconds = i2c.Read(1) & ~0x80;	   // read second and return Positive ACK
    286c:	ee 81       	ldd	r30, Y+6	; 0x06
    286e:	ff 81       	ldd	r31, Y+7	; 0x07
    2870:	81 e0       	ldi	r24, 0x01	; 1
    2872:	09 95       	icall
    2874:	f8 2e       	mov	r15, r24
	result.minutes = i2c.Read(1) & ~0x80;		   // read minute and return Positive ACK
    2876:	ee 81       	ldd	r30, Y+6	; 0x06
    2878:	ff 81       	ldd	r31, Y+7	; 0x07
    287a:	81 e0       	ldi	r24, 0x01	; 1
    287c:	09 95       	icall
    287e:	18 2f       	mov	r17, r24
	result.hours = i2c.Read(0) & ~0xC0;			   // read hour and return Negative/No ACK
    2880:	ee 81       	ldd	r30, Y+6	; 0x06
    2882:	ff 81       	ldd	r31, Y+7	; 0x07
    2884:	80 e0       	ldi	r24, 0x00	; 0
    2886:	09 95       	icall
    2888:	08 2f       	mov	r16, r24
	i2c.Stop();								       // Stop I2C communication after reading the Time
    288a:	ea 81       	ldd	r30, Y+2	; 0x02
    288c:	fb 81       	ldd	r31, Y+3	; 0x03
    288e:	09 95       	icall
	return result;
    2890:	60 2f       	mov	r22, r16
    2892:	6f 73       	andi	r22, 0x3F	; 63
    2894:	71 2f       	mov	r23, r17
    2896:	7f 77       	andi	r23, 0x7F	; 127
}
    2898:	8f 2d       	mov	r24, r15
    289a:	8f 77       	andi	r24, 0x7F	; 127
    289c:	df 91       	pop	r29
    289e:	cf 91       	pop	r28
    28a0:	1f 91       	pop	r17
    28a2:	0f 91       	pop	r16
    28a4:	ff 90       	pop	r15
    28a6:	08 95       	ret

000028a8 <PCF8563RTC_GetDate>:
/***struct date PCF8563RTC_GetDate(void)***/
struct date PCF8563RTC_GetDate(void)
{
    28a8:	ef 92       	push	r14
    28aa:	ff 92       	push	r15
    28ac:	0f 93       	push	r16
    28ae:	1f 93       	push	r17
    28b0:	cf 93       	push	r28
    28b2:	df 93       	push	r29
	struct date result;
	i2c.Start();							        // Start I2C communication
    28b4:	c8 e5       	ldi	r28, 0x58	; 88
    28b6:	d4 e0       	ldi	r29, 0x04	; 4
    28b8:	e8 81       	ld	r30, Y
    28ba:	f9 81       	ldd	r31, Y+1	; 0x01
    28bc:	09 95       	icall
	i2c.Write(PCF8563WriteMode_U8);			        // connect to PCF8563 by sending its ID on I2c Bus
    28be:	ec 81       	ldd	r30, Y+4	; 0x04
    28c0:	fd 81       	ldd	r31, Y+5	; 0x05
    28c2:	82 ea       	ldi	r24, 0xA2	; 162
    28c4:	09 95       	icall
	i2c.Write(PCF8563DayRegAddress_U8);	            // Request DAY RAM address at 04H
    28c6:	ec 81       	ldd	r30, Y+4	; 0x04
    28c8:	fd 81       	ldd	r31, Y+5	; 0x05
    28ca:	85 e0       	ldi	r24, 0x05	; 5
    28cc:	09 95       	icall
	i2c.Stop();								        // Stop I2C communication after selecting DAY Register
    28ce:	ea 81       	ldd	r30, Y+2	; 0x02
    28d0:	fb 81       	ldd	r31, Y+3	; 0x03
    28d2:	09 95       	icall
	i2c.Start();							        // Start I2C communication
    28d4:	e8 81       	ld	r30, Y
    28d6:	f9 81       	ldd	r31, Y+1	; 0x01
    28d8:	09 95       	icall
	i2c.Write(PCF8563ReadMode_U8);			        // connect to PCF8563 (Read mode) by sending its ID
    28da:	ec 81       	ldd	r30, Y+4	; 0x04
    28dc:	fd 81       	ldd	r31, Y+5	; 0x05
    28de:	83 ea       	ldi	r24, 0xA3	; 163
    28e0:	09 95       	icall
	result.days = i2c.Read(1) & ~0xC0;				// read Day and return Positive ACK
    28e2:	ee 81       	ldd	r30, Y+6	; 0x06
    28e4:	ff 81       	ldd	r31, Y+7	; 0x07
    28e6:	81 e0       	ldi	r24, 0x01	; 1
    28e8:	09 95       	icall
    28ea:	08 2f       	mov	r16, r24
	result.weekdays = i2c.Read(1) & ~0xF8;			// read Month and return Positive ACK
    28ec:	ee 81       	ldd	r30, Y+6	; 0x06
    28ee:	ff 81       	ldd	r31, Y+7	; 0x07
    28f0:	81 e0       	ldi	r24, 0x01	; 1
    28f2:	09 95       	icall
    28f4:	f8 2e       	mov	r15, r24
	result.century_months = i2c.Read(1) & ~0xE0;
    28f6:	ee 81       	ldd	r30, Y+6	; 0x06
    28f8:	ff 81       	ldd	r31, Y+7	; 0x07
    28fa:	81 e0       	ldi	r24, 0x01	; 1
    28fc:	09 95       	icall
    28fe:	18 2f       	mov	r17, r24
	result.years = i2c.Read(0);				        // read Year and return Negative/No ACK
    2900:	ee 81       	ldd	r30, Y+6	; 0x06
    2902:	ff 81       	ldd	r31, Y+7	; 0x07
    2904:	80 e0       	ldi	r24, 0x00	; 0
    2906:	09 95       	icall
    2908:	e8 2e       	mov	r14, r24
	i2c.Stop();								        // Stop I2C communication after reading the Date
    290a:	ea 81       	ldd	r30, Y+2	; 0x02
    290c:	fb 81       	ldd	r31, Y+3	; 0x03
    290e:	09 95       	icall
	return result;
    2910:	71 2f       	mov	r23, r17
    2912:	7f 71       	andi	r23, 0x1F	; 31
}
    2914:	6e 2d       	mov	r22, r14
    2916:	8f 2d       	mov	r24, r15
    2918:	87 70       	andi	r24, 0x07	; 7
    291a:	90 2f       	mov	r25, r16
    291c:	9f 73       	andi	r25, 0x3F	; 63
    291e:	df 91       	pop	r29
    2920:	cf 91       	pop	r28
    2922:	1f 91       	pop	r17
    2924:	0f 91       	pop	r16
    2926:	ff 90       	pop	r15
    2928:	ef 90       	pop	r14
    292a:	08 95       	ret

0000292c <PCF8563RTC_bcd2dec>:
/***uint8_t PCF8563RTC_bcd2dec(uint8_t num)***/
uint8_t PCF8563RTC_bcd2dec(uint8_t num)
{
	return ((num/16 * 10) + (num % 16));
    292c:	98 2f       	mov	r25, r24
    292e:	92 95       	swap	r25
    2930:	9f 70       	andi	r25, 0x0F	; 15
    2932:	99 0f       	add	r25, r25
    2934:	29 2f       	mov	r18, r25
    2936:	22 0f       	add	r18, r18
    2938:	22 0f       	add	r18, r18
    293a:	92 0f       	add	r25, r18
    293c:	8f 70       	andi	r24, 0x0F	; 15
}
    293e:	89 0f       	add	r24, r25
    2940:	08 95       	ret

00002942 <PCF8563RTC_bintobcd>:
/***uint8_t PCF8563RTC_bintobcd(uint8_t bin)***/
uint8_t PCF8563RTC_bintobcd(uint8_t bin)
{
	return (((bin) / 10) << 4) + ((bin) % 10);
    2942:	9d ec       	ldi	r25, 0xCD	; 205
    2944:	89 9f       	mul	r24, r25
    2946:	91 2d       	mov	r25, r1
    2948:	11 24       	eor	r1, r1
    294a:	96 95       	lsr	r25
    294c:	96 95       	lsr	r25
    294e:	96 95       	lsr	r25
    2950:	39 2f       	mov	r19, r25
    2952:	33 0f       	add	r19, r19
    2954:	23 2f       	mov	r18, r19
    2956:	22 0f       	add	r18, r18
    2958:	22 0f       	add	r18, r18
    295a:	23 0f       	add	r18, r19
    295c:	82 1b       	sub	r24, r18
}
    295e:	20 e1       	ldi	r18, 0x10	; 16
    2960:	92 9f       	mul	r25, r18
    2962:	80 0d       	add	r24, r0
    2964:	11 24       	eor	r1, r1
    2966:	08 95       	ret

00002968 <PCF8563RTC_Init>:
	SREG=tSREG;
	return pcf;
}
/***void PCF8563RTC_Init(uint8_t prescaler)***/
void PCF8563RTC_Init(void)
{
    2968:	cf 93       	push	r28
    296a:	df 93       	push	r29
	i2c.Start();							// Start I2C communication
    296c:	c8 e5       	ldi	r28, 0x58	; 88
    296e:	d4 e0       	ldi	r29, 0x04	; 4
    2970:	e8 81       	ld	r30, Y
    2972:	f9 81       	ldd	r31, Y+1	; 0x01
    2974:	09 95       	icall
	i2c.Write(PCF8563WriteMode_U8);			// Connect to PCF8563 by sending its ID on I2c Bus
    2976:	ec 81       	ldd	r30, Y+4	; 0x04
    2978:	fd 81       	ldd	r31, Y+5	; 0x05
    297a:	82 ea       	ldi	r24, 0xA2	; 162
    297c:	09 95       	icall
	i2c.Write(PCF8563ControlRegAddress_U8);	// Select the PCF8563 ControlRegister to configure PCF8563
    297e:	ec 81       	ldd	r30, Y+4	; 0x04
    2980:	fd 81       	ldd	r31, Y+5	; 0x05
    2982:	80 e0       	ldi	r24, 0x00	; 0
    2984:	09 95       	icall
	i2c.Write(0x00);						// Write 0x00 to Control register to disable SQW-Out
    2986:	ec 81       	ldd	r30, Y+4	; 0x04
    2988:	fd 81       	ldd	r31, Y+5	; 0x05
    298a:	80 e0       	ldi	r24, 0x00	; 0
    298c:	09 95       	icall
	i2c.Stop();								// Stop I2C communication after initializing PCF8563
    298e:	ea 81       	ldd	r30, Y+2	; 0x02
    2990:	fb 81       	ldd	r31, Y+3	; 0x03
    2992:	09 95       	icall
}
    2994:	df 91       	pop	r29
    2996:	cf 91       	pop	r28
    2998:	08 95       	ret

0000299a <PCF8563RTCenable>:
struct date PCF8563RTC_GetDate(void);
uint8_t PCF8563RTC_bcd2dec(uint8_t num);
uint8_t PCF8563RTC_bintobcd(uint8_t bin);
/***PCF8563RTC PCF8563RTCenable(uint8_t prescaler)***/
PCF8563RTC PCF8563RTCenable(uint8_t prescaler)
{
    299a:	ff 92       	push	r15
    299c:	0f 93       	push	r16
    299e:	1f 93       	push	r17
    29a0:	cf 93       	push	r28
    29a2:	df 93       	push	r29
    29a4:	cd b7       	in	r28, 0x3d	; 61
    29a6:	de b7       	in	r29, 0x3e	; 62
    29a8:	2a 97       	sbiw	r28, 0x0a	; 10
    29aa:	0f b6       	in	r0, 0x3f	; 63
    29ac:	f8 94       	cli
    29ae:	de bf       	out	0x3e, r29	; 62
    29b0:	0f be       	out	0x3f, r0	; 63
    29b2:	cd bf       	out	0x3d, r28	; 61
    29b4:	8c 01       	movw	r16, r24
	uint8_t tSREG;
	tSREG=SREG;
    29b6:	ff b6       	in	r15, 0x3f	; 63
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
    29b8:	8f b7       	in	r24, 0x3f	; 63
    29ba:	8f 77       	andi	r24, 0x7F	; 127
    29bc:	8f bf       	out	0x3f, r24	; 63
	PCF8563RTC pcf;
	i2c = I2Cenable(prescaler);  			// Initialize the I2c module.
    29be:	ce 01       	movw	r24, r28
    29c0:	01 96       	adiw	r24, 0x01	; 1
    29c2:	0e 94 75 03 	call	0x6ea	; 0x6ea <I2Cenable>
    29c6:	8a e0       	ldi	r24, 0x0A	; 10
    29c8:	fe 01       	movw	r30, r28
    29ca:	31 96       	adiw	r30, 0x01	; 1
    29cc:	a8 e5       	ldi	r26, 0x58	; 88
    29ce:	b4 e0       	ldi	r27, 0x04	; 4
    29d0:	01 90       	ld	r0, Z+
    29d2:	0d 92       	st	X+, r0
    29d4:	8a 95       	dec	r24
    29d6:	e1 f7       	brne	.-8      	; 0x29d0 <PCF8563RTCenable+0x36>
	PCF8563RTC_Init();                      //Initialize RTC
    29d8:	c7 df       	rcall	.-114    	; 0x2968 <PCF8563RTC_Init>
	pcf.GetTime=PCF8563RTC_GetTime;
	pcf.GetDate=PCF8563RTC_GetDate;
	pcf.bcd2dec=PCF8563RTC_bcd2dec;
	pcf.bintobcd=PCF8563RTC_bintobcd;
	/******/
	SREG=tSREG;
    29da:	ff be       	out	0x3f, r15	; 63
	return pcf;
    29dc:	89 ed       	ldi	r24, 0xD9	; 217
    29de:	92 e1       	ldi	r25, 0x12	; 18
    29e0:	f8 01       	movw	r30, r16
    29e2:	91 83       	std	Z+1, r25	; 0x01
    29e4:	80 83       	st	Z, r24
    29e6:	83 e0       	ldi	r24, 0x03	; 3
    29e8:	93 e1       	ldi	r25, 0x13	; 19
    29ea:	93 83       	std	Z+3, r25	; 0x03
    29ec:	82 83       	std	Z+2, r24	; 0x02
    29ee:	8f e1       	ldi	r24, 0x1F	; 31
    29f0:	93 e1       	ldi	r25, 0x13	; 19
    29f2:	95 83       	std	Z+5, r25	; 0x05
    29f4:	84 83       	std	Z+4, r24	; 0x04
    29f6:	8b e3       	ldi	r24, 0x3B	; 59
    29f8:	93 e1       	ldi	r25, 0x13	; 19
    29fa:	97 83       	std	Z+7, r25	; 0x07
    29fc:	86 83       	std	Z+6, r24	; 0x06
    29fe:	87 e5       	ldi	r24, 0x57	; 87
    2a00:	93 e1       	ldi	r25, 0x13	; 19
    2a02:	91 87       	std	Z+9, r25	; 0x09
    2a04:	80 87       	std	Z+8, r24	; 0x08
    2a06:	89 e7       	ldi	r24, 0x79	; 121
    2a08:	93 e1       	ldi	r25, 0x13	; 19
    2a0a:	93 87       	std	Z+11, r25	; 0x0b
    2a0c:	82 87       	std	Z+10, r24	; 0x0a
    2a0e:	8e ef       	ldi	r24, 0xFE	; 254
    2a10:	93 e1       	ldi	r25, 0x13	; 19
    2a12:	95 87       	std	Z+13, r25	; 0x0d
    2a14:	84 87       	std	Z+12, r24	; 0x0c
    2a16:	82 ee       	ldi	r24, 0xE2	; 226
    2a18:	93 e1       	ldi	r25, 0x13	; 19
    2a1a:	97 87       	std	Z+15, r25	; 0x0f
    2a1c:	86 87       	std	Z+14, r24	; 0x0e
    2a1e:	86 ec       	ldi	r24, 0xC6	; 198
    2a20:	93 e1       	ldi	r25, 0x13	; 19
    2a22:	91 8b       	std	Z+17, r25	; 0x11
    2a24:	80 8b       	std	Z+16, r24	; 0x10
    2a26:	8a ea       	ldi	r24, 0xAA	; 170
    2a28:	93 e1       	ldi	r25, 0x13	; 19
    2a2a:	93 8b       	std	Z+19, r25	; 0x13
    2a2c:	82 8b       	std	Z+18, r24	; 0x12
    2a2e:	8a e1       	ldi	r24, 0x1A	; 26
    2a30:	94 e1       	ldi	r25, 0x14	; 20
    2a32:	95 8b       	std	Z+21, r25	; 0x15
    2a34:	84 8b       	std	Z+20, r24	; 0x14
    2a36:	84 e5       	ldi	r24, 0x54	; 84
    2a38:	94 e1       	ldi	r25, 0x14	; 20
    2a3a:	97 8b       	std	Z+23, r25	; 0x17
    2a3c:	86 8b       	std	Z+22, r24	; 0x16
    2a3e:	86 e9       	ldi	r24, 0x96	; 150
    2a40:	94 e1       	ldi	r25, 0x14	; 20
    2a42:	91 8f       	std	Z+25, r25	; 0x19
    2a44:	80 8f       	std	Z+24, r24	; 0x18
    2a46:	81 ea       	ldi	r24, 0xA1	; 161
    2a48:	94 e1       	ldi	r25, 0x14	; 20
    2a4a:	93 8f       	std	Z+27, r25	; 0x1b
    2a4c:	82 8f       	std	Z+26, r24	; 0x1a
}
    2a4e:	c8 01       	movw	r24, r16
    2a50:	2a 96       	adiw	r28, 0x0a	; 10
    2a52:	0f b6       	in	r0, 0x3f	; 63
    2a54:	f8 94       	cli
    2a56:	de bf       	out	0x3e, r29	; 62
    2a58:	0f be       	out	0x3f, r0	; 63
    2a5a:	cd bf       	out	0x3d, r28	; 61
    2a5c:	df 91       	pop	r29
    2a5e:	cf 91       	pop	r28
    2a60:	1f 91       	pop	r17
    2a62:	0f 91       	pop	r16
    2a64:	ff 90       	pop	r15
    2a66:	08 95       	ret

00002a68 <PORTINIT>:
** procedure and function
*/
void PORTINIT(void)
{
	//INPUT
	DDRF=0x00;
    2a68:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	PORTF=0x0F;
    2a6c:	8f e0       	ldi	r24, 0x0F	; 15
    2a6e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	//OUTPUT
	DDRB|=(1<<5) | (1<<6) | (1<<7);
    2a72:	87 b3       	in	r24, 0x17	; 23
    2a74:	80 6e       	ori	r24, 0xE0	; 224
    2a76:	87 bb       	out	0x17, r24	; 23
    2a78:	08 95       	ret

00002a7a <main>:
** Header
*/
void PORTINIT();
/****MAIN****/
int main(void)
{
    2a7a:	cf 93       	push	r28
    2a7c:	df 93       	push	r29
    2a7e:	cd b7       	in	r28, 0x3d	; 61
    2a80:	de b7       	in	r29, 0x3e	; 62
    2a82:	ce 57       	subi	r28, 0x7E	; 126
    2a84:	d1 40       	sbci	r29, 0x01	; 1
    2a86:	0f b6       	in	r0, 0x3f	; 63
    2a88:	f8 94       	cli
    2a8a:	de bf       	out	0x3e, r29	; 62
    2a8c:	0f be       	out	0x3f, r0	; 63
    2a8e:	cd bf       	out	0x3d, r28	; 61
	PORTINIT(); // Inic Ports
    2a90:	eb df       	rcall	.-42     	; 0x2a68 <PORTINIT>
	/***INICIALIZE OBJECTS***/
	function= FUNCenable(); // Function Library
    2a92:	ce 01       	movw	r24, r28
    2a94:	8e 5d       	subi	r24, 0xDE	; 222
    2a96:	9e 4f       	sbci	r25, 0xFE	; 254
    2a98:	0e 94 9a 0c 	call	0x1934	; 0x1934 <FUNCenable>
    2a9c:	8c e4       	ldi	r24, 0x4C	; 76
    2a9e:	fe 01       	movw	r30, r28
    2aa0:	ee 5d       	subi	r30, 0xDE	; 222
    2aa2:	fe 4f       	sbci	r31, 0xFE	; 254
    2aa4:	a8 e6       	ldi	r26, 0x68	; 104
    2aa6:	b4 e0       	ldi	r27, 0x04	; 4
    2aa8:	01 90       	ld	r0, Z+
    2aaa:	0d 92       	st	X+, r0
    2aac:	8a 95       	dec	r24
    2aae:	e1 f7       	brne	.-8      	; 0x2aa8 <main+0x2e>
	LCD0 lcd0 = LCD0enable(&DDRA,&PINA,&PORTA); // LCD Display 4X20
    2ab0:	2b e3       	ldi	r18, 0x3B	; 59
    2ab2:	30 e0       	ldi	r19, 0x00	; 0
    2ab4:	49 e3       	ldi	r20, 0x39	; 57
    2ab6:	50 e0       	ldi	r21, 0x00	; 0
    2ab8:	6a e3       	ldi	r22, 0x3A	; 58
    2aba:	70 e0       	ldi	r23, 0x00	; 0
    2abc:	ce 01       	movw	r24, r28
    2abe:	8e 56       	subi	r24, 0x6E	; 110
    2ac0:	9f 4f       	sbci	r25, 0xFF	; 255
    2ac2:	08 dd       	rcall	.-1520   	; 0x24d4 <LCD0enable>
    2ac4:	c8 56       	subi	r28, 0x68	; 104
    2ac6:	df 4f       	sbci	r29, 0xFF	; 255
    2ac8:	28 80       	ld	r2, Y
    2aca:	39 80       	ldd	r3, Y+1	; 0x01
    2acc:	c8 59       	subi	r28, 0x98	; 152
    2ace:	d0 40       	sbci	r29, 0x00	; 0
    2ad0:	c2 56       	subi	r28, 0x62	; 98
    2ad2:	df 4f       	sbci	r29, 0xFF	; 255
    2ad4:	48 80       	ld	r4, Y
    2ad6:	59 80       	ldd	r5, Y+1	; 0x01
    2ad8:	ce 59       	subi	r28, 0x9E	; 158
    2ada:	d0 40       	sbci	r29, 0x00	; 0
    2adc:	ce 55       	subi	r28, 0x5E	; 94
    2ade:	df 4f       	sbci	r29, 0xFF	; 255
    2ae0:	28 81       	ld	r18, Y
    2ae2:	39 81       	ldd	r19, Y+1	; 0x01
    2ae4:	c2 5a       	subi	r28, 0xA2	; 162
    2ae6:	d0 40       	sbci	r29, 0x00	; 0
    2ae8:	ce 58       	subi	r28, 0x8E	; 142
    2aea:	de 4f       	sbci	r29, 0xFE	; 254
    2aec:	39 83       	std	Y+1, r19	; 0x01
    2aee:	28 83       	st	Y, r18
    2af0:	c2 57       	subi	r28, 0x72	; 114
    2af2:	d1 40       	sbci	r29, 0x01	; 1
    2af4:	cc 55       	subi	r28, 0x5C	; 92
    2af6:	df 4f       	sbci	r29, 0xFF	; 255
    2af8:	88 80       	ld	r8, Y
    2afa:	99 80       	ldd	r9, Y+1	; 0x01
    2afc:	c4 5a       	subi	r28, 0xA4	; 164
    2afe:	d0 40       	sbci	r29, 0x00	; 0
	KEYPAD keypad = KEYPADenable(&DDRE,&PINE,&PORTE); // Keyboard
    2b00:	43 e2       	ldi	r20, 0x23	; 35
    2b02:	50 e0       	ldi	r21, 0x00	; 0
    2b04:	61 e2       	ldi	r22, 0x21	; 33
    2b06:	70 e0       	ldi	r23, 0x00	; 0
    2b08:	82 e2       	ldi	r24, 0x22	; 34
    2b0a:	90 e0       	ldi	r25, 0x00	; 0
    2b0c:	64 da       	rcall	.-2872   	; 0x1fd6 <KEYPADenable>
    2b0e:	c8 55       	subi	r28, 0x58	; 88
    2b10:	df 4f       	sbci	r29, 0xFF	; 255
    2b12:	28 83       	st	Y, r18
    2b14:	c8 5a       	subi	r28, 0xA8	; 168
    2b16:	d0 40       	sbci	r29, 0x00	; 0
    2b18:	c7 55       	subi	r28, 0x57	; 87
    2b1a:	df 4f       	sbci	r29, 0xFF	; 255
    2b1c:	38 83       	st	Y, r19
    2b1e:	c9 5a       	subi	r28, 0xA9	; 169
    2b20:	d0 40       	sbci	r29, 0x00	; 0
    2b22:	c6 55       	subi	r28, 0x56	; 86
    2b24:	df 4f       	sbci	r29, 0xFF	; 255
    2b26:	48 83       	st	Y, r20
    2b28:	ca 5a       	subi	r28, 0xAA	; 170
    2b2a:	d0 40       	sbci	r29, 0x00	; 0
    2b2c:	c5 55       	subi	r28, 0x55	; 85
    2b2e:	df 4f       	sbci	r29, 0xFF	; 255
    2b30:	58 83       	st	Y, r21
    2b32:	cb 5a       	subi	r28, 0xAB	; 171
    2b34:	d0 40       	sbci	r29, 0x00	; 0
    2b36:	c4 55       	subi	r28, 0x54	; 84
    2b38:	df 4f       	sbci	r29, 0xFF	; 255
    2b3a:	68 83       	st	Y, r22
    2b3c:	cc 5a       	subi	r28, 0xAC	; 172
    2b3e:	d0 40       	sbci	r29, 0x00	; 0
    2b40:	c3 55       	subi	r28, 0x53	; 83
    2b42:	df 4f       	sbci	r29, 0xFF	; 255
    2b44:	78 83       	st	Y, r23
    2b46:	cd 5a       	subi	r28, 0xAD	; 173
    2b48:	d0 40       	sbci	r29, 0x00	; 0
    2b4a:	c2 55       	subi	r28, 0x52	; 82
    2b4c:	df 4f       	sbci	r29, 0xFF	; 255
    2b4e:	88 83       	st	Y, r24
    2b50:	ce 5a       	subi	r28, 0xAE	; 174
    2b52:	d0 40       	sbci	r29, 0x00	; 0
    2b54:	c1 55       	subi	r28, 0x51	; 81
    2b56:	df 4f       	sbci	r29, 0xFF	; 255
    2b58:	98 83       	st	Y, r25
    2b5a:	cf 5a       	subi	r28, 0xAF	; 175
    2b5c:	d0 40       	sbci	r29, 0x00	; 0
    2b5e:	c4 55       	subi	r28, 0x54	; 84
    2b60:	df 4f       	sbci	r29, 0xFF	; 255
    2b62:	68 80       	ld	r6, Y
    2b64:	79 80       	ldd	r7, Y+1	; 0x01
    2b66:	cc 5a       	subi	r28, 0xAC	; 172
    2b68:	d0 40       	sbci	r29, 0x00	; 0
    2b6a:	c2 55       	subi	r28, 0x52	; 82
    2b6c:	df 4f       	sbci	r29, 0xFF	; 255
    2b6e:	88 81       	ld	r24, Y
    2b70:	99 81       	ldd	r25, Y+1	; 0x01
    2b72:	ce 5a       	subi	r28, 0xAE	; 174
    2b74:	d0 40       	sbci	r29, 0x00	; 0
    2b76:	c0 59       	subi	r28, 0x90	; 144
    2b78:	de 4f       	sbci	r29, 0xFE	; 254
    2b7a:	99 83       	std	Y+1, r25	; 0x01
    2b7c:	88 83       	st	Y, r24
    2b7e:	c0 57       	subi	r28, 0x70	; 112
    2b80:	d1 40       	sbci	r29, 0x01	; 1
	ANALOG analog = ANALOGenable(1, 128, 1, 0); // Channel 0 for Position
    2b82:	1f 92       	push	r1
    2b84:	1f 92       	push	r1
    2b86:	1f 92       	push	r1
    2b88:	81 e0       	ldi	r24, 0x01	; 1
    2b8a:	8f 93       	push	r24
    2b8c:	90 e8       	ldi	r25, 0x80	; 128
    2b8e:	9f 93       	push	r25
    2b90:	8f 93       	push	r24
    2b92:	0e 94 b0 01 	call	0x360	; 0x360 <ANALOGenable>
    2b96:	c5 58       	subi	r28, 0x85	; 133
    2b98:	de 4f       	sbci	r29, 0xFE	; 254
    2b9a:	68 83       	st	Y, r22
    2b9c:	79 83       	std	Y+1, r23	; 0x01
    2b9e:	8a 83       	std	Y+2, r24	; 0x02
    2ba0:	9b 83       	std	Y+3, r25	; 0x03
    2ba2:	cb 57       	subi	r28, 0x7B	; 123
    2ba4:	d1 40       	sbci	r29, 0x01	; 1
	TIMER_COUNTER0 timer0 = TIMER_COUNTER0enable(2,2); // 1Hz to HC595
    2ba6:	42 e0       	ldi	r20, 0x02	; 2
    2ba8:	62 e0       	ldi	r22, 0x02	; 2
    2baa:	ce 01       	movw	r24, r28
    2bac:	80 55       	subi	r24, 0x50	; 80
    2bae:	9f 4f       	sbci	r25, 0xFF	; 255
    2bb0:	0e 94 95 04 	call	0x92a	; 0x92a <TIMER_COUNTER0enable>
	TIMER_COUNTER1 timer1 = TIMER_COUNTER1enable(9,0); // PWM Positioning
    2bb4:	40 e0       	ldi	r20, 0x00	; 0
    2bb6:	69 e0       	ldi	r22, 0x09	; 9
    2bb8:	ce 01       	movw	r24, r28
    2bba:	80 54       	subi	r24, 0x40	; 64
    2bbc:	9f 4f       	sbci	r25, 0xFF	; 255
    2bbe:	0e 94 d7 04 	call	0x9ae	; 0x9ae <TIMER_COUNTER1enable>
    2bc2:	c8 53       	subi	r28, 0x38	; 56
    2bc4:	df 4f       	sbci	r29, 0xFF	; 255
    2bc6:	a8 81       	ld	r26, Y
    2bc8:	b9 81       	ldd	r27, Y+1	; 0x01
    2bca:	c8 5c       	subi	r28, 0xC8	; 200
    2bcc:	d0 40       	sbci	r29, 0x00	; 0
    2bce:	c7 58       	subi	r28, 0x87	; 135
    2bd0:	de 4f       	sbci	r29, 0xFE	; 254
    2bd2:	b9 83       	std	Y+1, r27	; 0x01
    2bd4:	a8 83       	st	Y, r26
    2bd6:	c9 57       	subi	r28, 0x79	; 121
    2bd8:	d1 40       	sbci	r29, 0x01	; 1
	rtc = PCF8563RTCenable(16); // RTC with I2C
    2bda:	60 e1       	ldi	r22, 0x10	; 16
    2bdc:	ce 01       	movw	r24, r28
    2bde:	8e 5d       	subi	r24, 0xDE	; 222
    2be0:	9e 4f       	sbci	r25, 0xFE	; 254
    2be2:	db de       	rcall	.-586    	; 0x299a <PCF8563RTCenable>
    2be4:	8c e1       	ldi	r24, 0x1C	; 28
    2be6:	fe 01       	movw	r30, r28
    2be8:	ee 5d       	subi	r30, 0xDE	; 222
    2bea:	fe 4f       	sbci	r31, 0xFE	; 254
    2bec:	a7 eb       	ldi	r26, 0xB7	; 183
    2bee:	b4 e0       	ldi	r27, 0x04	; 4
    2bf0:	01 90       	ld	r0, Z+
    2bf2:	0d 92       	st	X+, r0
    2bf4:	8a 95       	dec	r24
    2bf6:	e1 f7       	brne	.-8      	; 0x2bf0 <main+0x176>
	shift = HC595enable(&DDRG,&PORTG,2,0,1);
    2bf8:	01 e0       	ldi	r16, 0x01	; 1
    2bfa:	20 e0       	ldi	r18, 0x00	; 0
    2bfc:	42 e0       	ldi	r20, 0x02	; 2
    2bfe:	65 e6       	ldi	r22, 0x65	; 101
    2c00:	70 e0       	ldi	r23, 0x00	; 0
    2c02:	84 e6       	ldi	r24, 0x64	; 100
    2c04:	90 e0       	ldi	r25, 0x00	; 0
    2c06:	0e 94 4d 01 	call	0x29a	; 0x29a <HC595enable>
    2c0a:	20 93 62 04 	sts	0x0462, r18	; 0x800462 <shift>
    2c0e:	30 93 63 04 	sts	0x0463, r19	; 0x800463 <shift+0x1>
    2c12:	40 93 64 04 	sts	0x0464, r20	; 0x800464 <shift+0x2>
    2c16:	50 93 65 04 	sts	0x0465, r21	; 0x800465 <shift+0x3>
    2c1a:	60 93 66 04 	sts	0x0466, r22	; 0x800466 <shift+0x4>
    2c1e:	70 93 67 04 	sts	0x0467, r23	; 0x800467 <shift+0x5>
	uart = UART1enable(103,8,1,NONE);//UART 103 para 9600, 68 para 14400
    2c22:	00 e0       	ldi	r16, 0x00	; 0
    2c24:	10 e0       	ldi	r17, 0x00	; 0
    2c26:	21 e0       	ldi	r18, 0x01	; 1
    2c28:	30 e0       	ldi	r19, 0x00	; 0
    2c2a:	48 e0       	ldi	r20, 0x08	; 8
    2c2c:	50 e0       	ldi	r21, 0x00	; 0
    2c2e:	67 e6       	ldi	r22, 0x67	; 103
    2c30:	70 e0       	ldi	r23, 0x00	; 0
    2c32:	ce 01       	movw	r24, r28
    2c34:	8e 5d       	subi	r24, 0xDE	; 222
    2c36:	9e 4f       	sbci	r25, 0xFE	; 254
    2c38:	0e 94 02 07 	call	0xe04	; 0xe04 <UART1enable>
    2c3c:	82 e1       	ldi	r24, 0x12	; 18
    2c3e:	fe 01       	movw	r30, r28
    2c40:	ee 5d       	subi	r30, 0xDE	; 222
    2c42:	fe 4f       	sbci	r31, 0xFE	; 254
    2c44:	a7 ed       	ldi	r26, 0xD7	; 215
    2c46:	b4 e0       	ldi	r27, 0x04	; 4
    2c48:	01 90       	ld	r0, Z+
    2c4a:	0d 92       	st	X+, r0
    2c4c:	8a 95       	dec	r24
    2c4e:	e1 f7       	brne	.-8      	; 0x2c48 <main+0x1ce>
	/******/
	char Menu='1'; // Main menu selector
	uint16_t adcvalue; // analog reading
	char str[6]="0"; // analog vector
    2c50:	ce 01       	movw	r24, r28
    2c52:	80 53       	subi	r24, 0x30	; 48
    2c54:	9f 4f       	sbci	r25, 0xFF	; 255
    2c56:	fc 01       	movw	r30, r24
    2c58:	20 e3       	ldi	r18, 0x30	; 48
    2c5a:	30 e0       	ldi	r19, 0x00	; 0
    2c5c:	21 93       	st	Z+, r18
    2c5e:	31 93       	st	Z+, r19
    2c60:	24 e0       	ldi	r18, 0x04	; 4
    2c62:	df 01       	movw	r26, r30
    2c64:	1d 92       	st	X+, r1
    2c66:	2a 95       	dec	r18
    2c68:	e9 f7       	brne	.-6      	; 0x2c64 <main+0x1ea>
	int16_t mvalue=90; // manual position reading
	int16_t m_value; // manual positioning
	char mstr[6]="90"; // manual position vector
    2c6a:	29 e3       	ldi	r18, 0x39	; 57
    2c6c:	30 e3       	ldi	r19, 0x30	; 48
    2c6e:	ca 52       	subi	r28, 0x2A	; 42
    2c70:	df 4f       	sbci	r29, 0xFF	; 255
    2c72:	39 83       	std	Y+1, r19	; 0x01
    2c74:	28 83       	st	Y, r18
    2c76:	c6 5d       	subi	r28, 0xD6	; 214
    2c78:	d0 40       	sbci	r29, 0x00	; 0
    2c7a:	c8 52       	subi	r28, 0x28	; 40
    2c7c:	df 4f       	sbci	r29, 0xFF	; 255
    2c7e:	19 82       	std	Y+1, r1	; 0x01
    2c80:	18 82       	st	Y, r1
    2c82:	c8 5d       	subi	r28, 0xD8	; 216
    2c84:	d0 40       	sbci	r29, 0x00	; 0
    2c86:	c6 52       	subi	r28, 0x26	; 38
    2c88:	df 4f       	sbci	r29, 0xFF	; 255
    2c8a:	19 82       	std	Y+1, r1	; 0x01
    2c8c:	18 82       	st	Y, r1
    2c8e:	ca 5d       	subi	r28, 0xDA	; 218
    2c90:	d0 40       	sbci	r29, 0x00	; 0
	char tstr[6]; // time vector
	char cal='0'; // Sub Menu for setting up date and time
	uint16_t set;
	char uartmessage[64];
	ptr=str;
    2c92:	90 93 46 02 	sts	0x0246, r25	; 0x800246 <ptr+0x1>
    2c96:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <ptr>
	uint16_t positionhour=12;
	/***Parameters timers***/
	timer0.compare(249);
    2c9a:	ca 54       	subi	r28, 0x4A	; 74
    2c9c:	df 4f       	sbci	r29, 0xFF	; 255
    2c9e:	e8 81       	ld	r30, Y
    2ca0:	f9 81       	ldd	r31, Y+1	; 0x01
    2ca2:	c6 5b       	subi	r28, 0xB6	; 182
    2ca4:	d0 40       	sbci	r29, 0x00	; 0
    2ca6:	89 ef       	ldi	r24, 0xF9	; 249
    2ca8:	09 95       	icall
	timer0.start(64);
    2caa:	c4 54       	subi	r28, 0x44	; 68
    2cac:	df 4f       	sbci	r29, 0xFF	; 255
    2cae:	e8 81       	ld	r30, Y
    2cb0:	f9 81       	ldd	r31, Y+1	; 0x01
    2cb2:	cc 5b       	subi	r28, 0xBC	; 188
    2cb4:	d0 40       	sbci	r29, 0x00	; 0
    2cb6:	80 e4       	ldi	r24, 0x40	; 64
    2cb8:	90 e0       	ldi	r25, 0x00	; 0
    2cba:	09 95       	icall
	timer1.compoutmodeB(2);
    2cbc:	ce 53       	subi	r28, 0x3E	; 62
    2cbe:	df 4f       	sbci	r29, 0xFF	; 255
    2cc0:	e8 81       	ld	r30, Y
    2cc2:	f9 81       	ldd	r31, Y+1	; 0x01
    2cc4:	c2 5c       	subi	r28, 0xC2	; 194
    2cc6:	d0 40       	sbci	r29, 0x00	; 0
    2cc8:	82 e0       	ldi	r24, 0x02	; 2
    2cca:	09 95       	icall
	timer1.compareA(20000);
    2ccc:	ca 53       	subi	r28, 0x3A	; 58
    2cce:	df 4f       	sbci	r29, 0xFF	; 255
    2cd0:	e8 81       	ld	r30, Y
    2cd2:	f9 81       	ldd	r31, Y+1	; 0x01
    2cd4:	c6 5c       	subi	r28, 0xC6	; 198
    2cd6:	d0 40       	sbci	r29, 0x00	; 0
    2cd8:	80 e2       	ldi	r24, 0x20	; 32
    2cda:	9e e4       	ldi	r25, 0x4E	; 78
    2cdc:	09 95       	icall
	timer1.start(8);
    2cde:	c4 53       	subi	r28, 0x34	; 52
    2ce0:	df 4f       	sbci	r29, 0xFF	; 255
    2ce2:	e8 81       	ld	r30, Y
    2ce4:	f9 81       	ldd	r31, Y+1	; 0x01
    2ce6:	cc 5c       	subi	r28, 0xCC	; 204
    2ce8:	d0 40       	sbci	r29, 0x00	; 0
    2cea:	88 e0       	ldi	r24, 0x08	; 8
    2cec:	90 e0       	ldi	r25, 0x00	; 0
    2cee:	09 95       	icall
	rtc.SetClkOut(1, 2); // oscillate pin at 1 sec
    2cf0:	e0 91 bf 04 	lds	r30, 0x04BF	; 0x8004bf <rtc+0x8>
    2cf4:	f0 91 c0 04 	lds	r31, 0x04C0	; 0x8004c0 <rtc+0x9>
    2cf8:	62 e0       	ldi	r22, 0x02	; 2
    2cfa:	81 e0       	ldi	r24, 0x01	; 1
    2cfc:	09 95       	icall
    2cfe:	0f 90       	pop	r0
    2d00:	0f 90       	pop	r0
    2d02:	0f 90       	pop	r0
    2d04:	0f 90       	pop	r0
    2d06:	0f 90       	pop	r0
    2d08:	0f 90       	pop	r0
	char tstr[6]; // time vector
	char cal='0'; // Sub Menu for setting up date and time
	uint16_t set;
	char uartmessage[64];
	ptr=str;
	uint16_t positionhour=12;
    2d0a:	ec e0       	ldi	r30, 0x0C	; 12
    2d0c:	f0 e0       	ldi	r31, 0x00	; 0
    2d0e:	cc 58       	subi	r28, 0x8C	; 140
    2d10:	de 4f       	sbci	r29, 0xFE	; 254
    2d12:	f9 83       	std	Y+1, r31	; 0x01
    2d14:	e8 83       	st	Y, r30
    2d16:	c4 57       	subi	r28, 0x74	; 116
    2d18:	d1 40       	sbci	r29, 0x01	; 1
	char str[6]="0"; // analog vector
	int16_t mvalue=90; // manual position reading
	int16_t m_value; // manual positioning
	char mstr[6]="90"; // manual position vector
	char tstr[6]; // time vector
	char cal='0'; // Sub Menu for setting up date and time
    2d1a:	f0 e3       	ldi	r31, 0x30	; 48
    2d1c:	c8 58       	subi	r28, 0x88	; 136
    2d1e:	de 4f       	sbci	r29, 0xFE	; 254
    2d20:	f8 83       	st	Y, r31
    2d22:	c8 57       	subi	r28, 0x78	; 120
    2d24:	d1 40       	sbci	r29, 0x01	; 1
	TIMER_COUNTER1 timer1 = TIMER_COUNTER1enable(9,0); // PWM Positioning
	rtc = PCF8563RTCenable(16); // RTC with I2C
	shift = HC595enable(&DDRG,&PORTG,2,0,1);
	uart = UART1enable(103,8,1,NONE);//UART 103 para 9600, 68 para 14400
	/******/
	char Menu='1'; // Main menu selector
    2d26:	21 e3       	ldi	r18, 0x31	; 49
    2d28:	c2 59       	subi	r28, 0x92	; 146
    2d2a:	de 4f       	sbci	r29, 0xFE	; 254
    2d2c:	28 83       	st	Y, r18
    2d2e:	ce 56       	subi	r28, 0x6E	; 110
    2d30:	d1 40       	sbci	r29, 0x01	; 1
    2d32:	0d c0       	rjmp	.+26     	; 0x2d4e <main+0x2d4>
    2d34:	31 e3       	ldi	r19, 0x31	; 49
    2d36:	c2 59       	subi	r28, 0x92	; 146
    2d38:	de 4f       	sbci	r29, 0xFE	; 254
    2d3a:	38 83       	st	Y, r19
    2d3c:	ce 56       	subi	r28, 0x6E	; 110
    2d3e:	d1 40       	sbci	r29, 0x01	; 1
    2d40:	06 c0       	rjmp	.+12     	; 0x2d4e <main+0x2d4>
								}
								keypad.flush();
							}
						break;
						default:
							cal='0';
    2d42:	80 e3       	ldi	r24, 0x30	; 48
    2d44:	c8 58       	subi	r28, 0x88	; 136
    2d46:	de 4f       	sbci	r29, 0xFE	; 254
    2d48:	88 83       	st	Y, r24
    2d4a:	c8 57       	subi	r28, 0x78	; 120
    2d4c:	d1 40       	sbci	r29, 0x01	; 1
	rtc.SetClkOut(1, 2); // oscillate pin at 1 sec
	/**********/
	//TODO:: Please write your application code
	while(TRUE){
		/***PREAMBLE***/
		lcd0.reboot();
    2d4e:	ca 55       	subi	r28, 0x5A	; 90
    2d50:	df 4f       	sbci	r29, 0xFF	; 255
    2d52:	e8 81       	ld	r30, Y
    2d54:	f9 81       	ldd	r31, Y+1	; 0x01
    2d56:	c6 5a       	subi	r28, 0xA6	; 166
    2d58:	d0 40       	sbci	r29, 0x00	; 0
    2d5a:	09 95       	icall
		keypad.read();
    2d5c:	c6 55       	subi	r28, 0x56	; 86
    2d5e:	df 4f       	sbci	r29, 0xFF	; 255
    2d60:	e8 81       	ld	r30, Y
    2d62:	f9 81       	ldd	r31, Y+1	; 0x01
    2d64:	ca 5a       	subi	r28, 0xAA	; 170
    2d66:	d0 40       	sbci	r29, 0x00	; 0
    2d68:	09 95       	icall
		uartreceive=uart.read();
    2d6a:	e0 91 db 04 	lds	r30, 0x04DB	; 0x8004db <uart+0x4>
    2d6e:	f0 91 dc 04 	lds	r31, 0x04DC	; 0x8004dc <uart+0x5>
    2d72:	09 95       	icall
    2d74:	90 93 44 02 	sts	0x0244, r25	; 0x800244 <uartreceive+0x1>
    2d78:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <uartreceive>
		/***Reading input***/
		lcd0.gotoxy(3,13);
    2d7c:	6d e0       	ldi	r22, 0x0D	; 13
    2d7e:	70 e0       	ldi	r23, 0x00	; 0
    2d80:	83 e0       	ldi	r24, 0x03	; 3
    2d82:	90 e0       	ldi	r25, 0x00	; 0
    2d84:	f4 01       	movw	r30, r8
    2d86:	09 95       	icall
		lcd0.putch(':');
    2d88:	8a e3       	ldi	r24, 0x3A	; 58
    2d8a:	f1 01       	movw	r30, r2
    2d8c:	09 95       	icall
		lcd0.string_size(keypad.get().printstring,6);
    2d8e:	f3 01       	movw	r30, r6
    2d90:	09 95       	icall
    2d92:	c3 57       	subi	r28, 0x73	; 115
    2d94:	df 4f       	sbci	r29, 0xFF	; 255
    2d96:	28 83       	st	Y, r18
    2d98:	cd 58       	subi	r28, 0x8D	; 141
    2d9a:	d0 40       	sbci	r29, 0x00	; 0
    2d9c:	c2 57       	subi	r28, 0x72	; 114
    2d9e:	df 4f       	sbci	r29, 0xFF	; 255
    2da0:	38 83       	st	Y, r19
    2da2:	ce 58       	subi	r28, 0x8E	; 142
    2da4:	d0 40       	sbci	r29, 0x00	; 0
    2da6:	c1 57       	subi	r28, 0x71	; 113
    2da8:	df 4f       	sbci	r29, 0xFF	; 255
    2daa:	48 83       	st	Y, r20
    2dac:	cf 58       	subi	r28, 0x8F	; 143
    2dae:	d0 40       	sbci	r29, 0x00	; 0
    2db0:	c0 57       	subi	r28, 0x70	; 112
    2db2:	df 4f       	sbci	r29, 0xFF	; 255
    2db4:	58 83       	st	Y, r21
    2db6:	c0 59       	subi	r28, 0x90	; 144
    2db8:	d0 40       	sbci	r29, 0x00	; 0
    2dba:	cf 56       	subi	r28, 0x6F	; 111
    2dbc:	df 4f       	sbci	r29, 0xFF	; 255
    2dbe:	68 83       	st	Y, r22
    2dc0:	c1 59       	subi	r28, 0x91	; 145
    2dc2:	d0 40       	sbci	r29, 0x00	; 0
    2dc4:	66 e0       	ldi	r22, 0x06	; 6
    2dc6:	c2 57       	subi	r28, 0x72	; 114
    2dc8:	df 4f       	sbci	r29, 0xFF	; 255
    2dca:	88 81       	ld	r24, Y
    2dcc:	99 81       	ldd	r25, Y+1	; 0x01
    2dce:	ce 58       	subi	r28, 0x8E	; 142
    2dd0:	d0 40       	sbci	r29, 0x00	; 0
    2dd2:	f2 01       	movw	r30, r4
    2dd4:	09 95       	icall
		/***ENTRY END***/
		switch(Menu){
    2dd6:	c2 59       	subi	r28, 0x92	; 146
    2dd8:	de 4f       	sbci	r29, 0xFE	; 254
    2dda:	f8 81       	ld	r31, Y
    2ddc:	ce 56       	subi	r28, 0x6E	; 110
    2dde:	d1 40       	sbci	r29, 0x01	; 1
    2de0:	f2 33       	cpi	r31, 0x32	; 50
    2de2:	09 f4       	brne	.+2      	; 0x2de6 <main+0x36c>
    2de4:	04 c3       	rjmp	.+1544   	; 0x33ee <main+0x974>
    2de6:	f3 33       	cpi	r31, 0x33	; 51
    2de8:	09 f4       	brne	.+2      	; 0x2dec <main+0x372>
    2dea:	45 c4       	rjmp	.+2186   	; 0x3676 <main+0xbfc>
    2dec:	f1 33       	cpi	r31, 0x31	; 49
    2dee:	11 f0       	breq	.+4      	; 0x2df4 <main+0x37a>
    2df0:	0c 94 84 1f 	jmp	0x3f08	; 0x3f08 <main+0x148e>
			/***MENU 1***/
			case '1': // Main Program Menu
				if(!strcmp(keypad.get().string,"A")){Menu='2';keypad.flush();lcd0.clear();break;}
    2df4:	f3 01       	movw	r30, r6
    2df6:	09 95       	icall
    2df8:	c8 57       	subi	r28, 0x78	; 120
    2dfa:	df 4f       	sbci	r29, 0xFF	; 255
    2dfc:	28 83       	st	Y, r18
    2dfe:	c8 58       	subi	r28, 0x88	; 136
    2e00:	d0 40       	sbci	r29, 0x00	; 0
    2e02:	c7 57       	subi	r28, 0x77	; 119
    2e04:	df 4f       	sbci	r29, 0xFF	; 255
    2e06:	38 83       	st	Y, r19
    2e08:	c9 58       	subi	r28, 0x89	; 137
    2e0a:	d0 40       	sbci	r29, 0x00	; 0
    2e0c:	c6 57       	subi	r28, 0x76	; 118
    2e0e:	df 4f       	sbci	r29, 0xFF	; 255
    2e10:	48 83       	st	Y, r20
    2e12:	ca 58       	subi	r28, 0x8A	; 138
    2e14:	d0 40       	sbci	r29, 0x00	; 0
    2e16:	c5 57       	subi	r28, 0x75	; 117
    2e18:	df 4f       	sbci	r29, 0xFF	; 255
    2e1a:	58 83       	st	Y, r21
    2e1c:	cb 58       	subi	r28, 0x8B	; 139
    2e1e:	d0 40       	sbci	r29, 0x00	; 0
    2e20:	c4 57       	subi	r28, 0x74	; 116
    2e22:	df 4f       	sbci	r29, 0xFF	; 255
    2e24:	68 83       	st	Y, r22
    2e26:	cc 58       	subi	r28, 0x8C	; 140
    2e28:	d0 40       	sbci	r29, 0x00	; 0
    2e2a:	64 e1       	ldi	r22, 0x14	; 20
    2e2c:	71 e0       	ldi	r23, 0x01	; 1
    2e2e:	c5 57       	subi	r28, 0x75	; 117
    2e30:	df 4f       	sbci	r29, 0xFF	; 255
    2e32:	88 81       	ld	r24, Y
    2e34:	99 81       	ldd	r25, Y+1	; 0x01
    2e36:	cb 58       	subi	r28, 0x8B	; 139
    2e38:	d0 40       	sbci	r29, 0x00	; 0
    2e3a:	0e 94 3b 24 	call	0x4876	; 0x4876 <strcmp>
    2e3e:	89 2b       	or	r24, r25
    2e40:	a9 f4       	brne	.+42     	; 0x2e6c <main+0x3f2>
    2e42:	c0 59       	subi	r28, 0x90	; 144
    2e44:	de 4f       	sbci	r29, 0xFE	; 254
    2e46:	e8 81       	ld	r30, Y
    2e48:	f9 81       	ldd	r31, Y+1	; 0x01
    2e4a:	c0 57       	subi	r28, 0x70	; 112
    2e4c:	d1 40       	sbci	r29, 0x01	; 1
    2e4e:	09 95       	icall
    2e50:	ce 58       	subi	r28, 0x8E	; 142
    2e52:	de 4f       	sbci	r29, 0xFE	; 254
    2e54:	e8 81       	ld	r30, Y
    2e56:	f9 81       	ldd	r31, Y+1	; 0x01
    2e58:	c2 57       	subi	r28, 0x72	; 114
    2e5a:	d1 40       	sbci	r29, 0x01	; 1
    2e5c:	09 95       	icall
    2e5e:	f2 e3       	ldi	r31, 0x32	; 50
    2e60:	c2 59       	subi	r28, 0x92	; 146
    2e62:	de 4f       	sbci	r29, 0xFE	; 254
    2e64:	f8 83       	st	Y, r31
    2e66:	ce 56       	subi	r28, 0x6E	; 110
    2e68:	d1 40       	sbci	r29, 0x01	; 1
    2e6a:	71 cf       	rjmp	.-286    	; 0x2d4e <main+0x2d4>
				if(!strcmp(keypad.get().string,"B")){Menu='3';keypad.flush();lcd0.clear();break;}
    2e6c:	f3 01       	movw	r30, r6
    2e6e:	09 95       	icall
    2e70:	cd 57       	subi	r28, 0x7D	; 125
    2e72:	df 4f       	sbci	r29, 0xFF	; 255
    2e74:	28 83       	st	Y, r18
    2e76:	c3 58       	subi	r28, 0x83	; 131
    2e78:	d0 40       	sbci	r29, 0x00	; 0
    2e7a:	cc 57       	subi	r28, 0x7C	; 124
    2e7c:	df 4f       	sbci	r29, 0xFF	; 255
    2e7e:	38 83       	st	Y, r19
    2e80:	c4 58       	subi	r28, 0x84	; 132
    2e82:	d0 40       	sbci	r29, 0x00	; 0
    2e84:	cb 57       	subi	r28, 0x7B	; 123
    2e86:	df 4f       	sbci	r29, 0xFF	; 255
    2e88:	48 83       	st	Y, r20
    2e8a:	c5 58       	subi	r28, 0x85	; 133
    2e8c:	d0 40       	sbci	r29, 0x00	; 0
    2e8e:	ca 57       	subi	r28, 0x7A	; 122
    2e90:	df 4f       	sbci	r29, 0xFF	; 255
    2e92:	58 83       	st	Y, r21
    2e94:	c6 58       	subi	r28, 0x86	; 134
    2e96:	d0 40       	sbci	r29, 0x00	; 0
    2e98:	c9 57       	subi	r28, 0x79	; 121
    2e9a:	df 4f       	sbci	r29, 0xFF	; 255
    2e9c:	68 83       	st	Y, r22
    2e9e:	c7 58       	subi	r28, 0x87	; 135
    2ea0:	d0 40       	sbci	r29, 0x00	; 0
    2ea2:	66 e1       	ldi	r22, 0x16	; 22
    2ea4:	71 e0       	ldi	r23, 0x01	; 1
    2ea6:	ca 57       	subi	r28, 0x7A	; 122
    2ea8:	df 4f       	sbci	r29, 0xFF	; 255
    2eaa:	88 81       	ld	r24, Y
    2eac:	99 81       	ldd	r25, Y+1	; 0x01
    2eae:	c6 58       	subi	r28, 0x86	; 134
    2eb0:	d0 40       	sbci	r29, 0x00	; 0
    2eb2:	0e 94 3b 24 	call	0x4876	; 0x4876 <strcmp>
    2eb6:	89 2b       	or	r24, r25
    2eb8:	a9 f4       	brne	.+42     	; 0x2ee4 <main+0x46a>
    2eba:	c0 59       	subi	r28, 0x90	; 144
    2ebc:	de 4f       	sbci	r29, 0xFE	; 254
    2ebe:	e8 81       	ld	r30, Y
    2ec0:	f9 81       	ldd	r31, Y+1	; 0x01
    2ec2:	c0 57       	subi	r28, 0x70	; 112
    2ec4:	d1 40       	sbci	r29, 0x01	; 1
    2ec6:	09 95       	icall
    2ec8:	ce 58       	subi	r28, 0x8E	; 142
    2eca:	de 4f       	sbci	r29, 0xFE	; 254
    2ecc:	e8 81       	ld	r30, Y
    2ece:	f9 81       	ldd	r31, Y+1	; 0x01
    2ed0:	c2 57       	subi	r28, 0x72	; 114
    2ed2:	d1 40       	sbci	r29, 0x01	; 1
    2ed4:	09 95       	icall
    2ed6:	f3 e3       	ldi	r31, 0x33	; 51
    2ed8:	c2 59       	subi	r28, 0x92	; 146
    2eda:	de 4f       	sbci	r29, 0xFE	; 254
    2edc:	f8 83       	st	Y, r31
    2ede:	ce 56       	subi	r28, 0x6E	; 110
    2ee0:	d1 40       	sbci	r29, 0x01	; 1
    2ee2:	35 cf       	rjmp	.-406    	; 0x2d4e <main+0x2d4>
					/***RTC***/
					tm=rtc.GetTime();
    2ee4:	07 eb       	ldi	r16, 0xB7	; 183
    2ee6:	14 e0       	ldi	r17, 0x04	; 4
    2ee8:	d8 01       	movw	r26, r16
    2eea:	54 96       	adiw	r26, 0x14	; 20
    2eec:	ed 91       	ld	r30, X+
    2eee:	fc 91       	ld	r31, X
    2ef0:	55 97       	sbiw	r26, 0x15	; 21
    2ef2:	09 95       	icall
    2ef4:	60 93 b4 04 	sts	0x04B4, r22	; 0x8004b4 <tm>
    2ef8:	70 93 b5 04 	sts	0x04B5, r23	; 0x8004b5 <tm+0x1>
    2efc:	80 93 b6 04 	sts	0x04B6, r24	; 0x8004b6 <tm+0x2>
					dt=rtc.GetDate();
    2f00:	d8 01       	movw	r26, r16
    2f02:	56 96       	adiw	r26, 0x16	; 22
    2f04:	ed 91       	ld	r30, X+
    2f06:	fc 91       	ld	r31, X
    2f08:	57 97       	sbiw	r26, 0x17	; 23
    2f0a:	09 95       	icall
    2f0c:	60 93 d3 04 	sts	0x04D3, r22	; 0x8004d3 <dt>
    2f10:	70 93 d4 04 	sts	0x04D4, r23	; 0x8004d4 <dt+0x1>
    2f14:	80 93 d5 04 	sts	0x04D5, r24	; 0x8004d5 <dt+0x2>
    2f18:	90 93 d6 04 	sts	0x04D6, r25	; 0x8004d6 <dt+0x3>
					/***Reading analog***/
					adcvalue=analog.read(0);
    2f1c:	80 e0       	ldi	r24, 0x00	; 0
    2f1e:	90 e0       	ldi	r25, 0x00	; 0
    2f20:	c3 58       	subi	r28, 0x83	; 131
    2f22:	de 4f       	sbci	r29, 0xFE	; 254
    2f24:	e8 81       	ld	r30, Y
    2f26:	f9 81       	ldd	r31, Y+1	; 0x01
    2f28:	cd 57       	subi	r28, 0x7D	; 125
    2f2a:	d1 40       	sbci	r29, 0x01	; 1
    2f2c:	09 95       	icall
    2f2e:	c2 59       	subi	r28, 0x92	; 146
    2f30:	de 4f       	sbci	r29, 0xFE	; 254
    2f32:	99 83       	std	Y+1, r25	; 0x01
    2f34:	88 83       	st	Y, r24
    2f36:	ce 56       	subi	r28, 0x6E	; 110
    2f38:	d1 40       	sbci	r29, 0x01	; 1
					/***Set Position***/
					if(positionhour>5 && positionhour<21)
    2f3a:	cc 58       	subi	r28, 0x8C	; 140
    2f3c:	de 4f       	sbci	r29, 0xFE	; 254
    2f3e:	88 81       	ld	r24, Y
    2f40:	99 81       	ldd	r25, Y+1	; 0x01
    2f42:	c4 57       	subi	r28, 0x74	; 116
    2f44:	d1 40       	sbci	r29, 0x01	; 1
    2f46:	06 97       	sbiw	r24, 0x06	; 6
    2f48:	0f 97       	sbiw	r24, 0x0f	; 15
    2f4a:	08 f0       	brcs	.+2      	; 0x2f4e <main+0x4d4>
    2f4c:	68 c0       	rjmp	.+208    	; 0x301e <main+0x5a4>
						timer1.compareB(function.trimmer(positionhour,2,23,Min,Max)+function.trimmer(adcvalue,0,1023,SMIN,SMAX));
    2f4e:	cc 58       	subi	r28, 0x8C	; 140
    2f50:	de 4f       	sbci	r29, 0xFE	; 254
    2f52:	28 81       	ld	r18, Y
    2f54:	39 81       	ldd	r19, Y+1	; 0x01
    2f56:	c4 57       	subi	r28, 0x74	; 116
    2f58:	d1 40       	sbci	r29, 0x01	; 1
    2f5a:	b9 01       	movw	r22, r18
    2f5c:	80 e0       	ldi	r24, 0x00	; 0
    2f5e:	90 e0       	ldi	r25, 0x00	; 0
    2f60:	1f 92       	push	r1
    2f62:	1f 92       	push	r1
    2f64:	29 e0       	ldi	r18, 0x09	; 9
    2f66:	2f 93       	push	r18
    2f68:	2e e2       	ldi	r18, 0x2E	; 46
    2f6a:	2f 93       	push	r18
    2f6c:	e0 91 a6 04 	lds	r30, 0x04A6	; 0x8004a6 <function+0x3e>
    2f70:	f0 91 a7 04 	lds	r31, 0x04A7	; 0x8004a7 <function+0x3f>
    2f74:	0f 2e       	mov	r0, r31
    2f76:	f4 ef       	ldi	r31, 0xF4	; 244
    2f78:	af 2e       	mov	r10, r31
    2f7a:	bb 24       	eor	r11, r11
    2f7c:	b3 94       	inc	r11
    2f7e:	c1 2c       	mov	r12, r1
    2f80:	d1 2c       	mov	r13, r1
    2f82:	f0 2d       	mov	r31, r0
    2f84:	17 e1       	ldi	r17, 0x17	; 23
    2f86:	e1 2e       	mov	r14, r17
    2f88:	f1 2c       	mov	r15, r1
    2f8a:	00 e0       	ldi	r16, 0x00	; 0
    2f8c:	10 e0       	ldi	r17, 0x00	; 0
    2f8e:	22 e0       	ldi	r18, 0x02	; 2
    2f90:	30 e0       	ldi	r19, 0x00	; 0
    2f92:	40 e0       	ldi	r20, 0x00	; 0
    2f94:	50 e0       	ldi	r21, 0x00	; 0
    2f96:	09 95       	icall
    2f98:	cc 58       	subi	r28, 0x8C	; 140
    2f9a:	de 4f       	sbci	r29, 0xFE	; 254
    2f9c:	68 83       	st	Y, r22
    2f9e:	79 83       	std	Y+1, r23	; 0x01
    2fa0:	8a 83       	std	Y+2, r24	; 0x02
    2fa2:	9b 83       	std	Y+3, r25	; 0x03
    2fa4:	c4 57       	subi	r28, 0x74	; 116
    2fa6:	d1 40       	sbci	r29, 0x01	; 1
    2fa8:	c2 59       	subi	r28, 0x92	; 146
    2faa:	de 4f       	sbci	r29, 0xFE	; 254
    2fac:	e8 81       	ld	r30, Y
    2fae:	f9 81       	ldd	r31, Y+1	; 0x01
    2fb0:	ce 56       	subi	r28, 0x6E	; 110
    2fb2:	d1 40       	sbci	r29, 0x01	; 1
    2fb4:	cf 01       	movw	r24, r30
    2fb6:	a0 e0       	ldi	r26, 0x00	; 0
    2fb8:	b0 e0       	ldi	r27, 0x00	; 0
    2fba:	1f 92       	push	r1
    2fbc:	1f 92       	push	r1
    2fbe:	1f 92       	push	r1
    2fc0:	28 ec       	ldi	r18, 0xC8	; 200
    2fc2:	2f 93       	push	r18
    2fc4:	e0 91 a6 04 	lds	r30, 0x04A6	; 0x8004a6 <function+0x3e>
    2fc8:	f0 91 a7 04 	lds	r31, 0x04A7	; 0x8004a7 <function+0x3f>
    2fcc:	0f 2e       	mov	r0, r31
    2fce:	f8 e3       	ldi	r31, 0x38	; 56
    2fd0:	af 2e       	mov	r10, r31
    2fd2:	bb 24       	eor	r11, r11
    2fd4:	ba 94       	dec	r11
    2fd6:	cb 2c       	mov	r12, r11
    2fd8:	db 2c       	mov	r13, r11
    2fda:	f0 2d       	mov	r31, r0
    2fdc:	ee 24       	eor	r14, r14
    2fde:	ea 94       	dec	r14
    2fe0:	13 e0       	ldi	r17, 0x03	; 3
    2fe2:	f1 2e       	mov	r15, r17
    2fe4:	00 e0       	ldi	r16, 0x00	; 0
    2fe6:	10 e0       	ldi	r17, 0x00	; 0
    2fe8:	20 e0       	ldi	r18, 0x00	; 0
    2fea:	30 e0       	ldi	r19, 0x00	; 0
    2fec:	a9 01       	movw	r20, r18
    2fee:	bc 01       	movw	r22, r24
    2ff0:	cd 01       	movw	r24, r26
    2ff2:	09 95       	icall
    2ff4:	cc 58       	subi	r28, 0x8C	; 140
    2ff6:	de 4f       	sbci	r29, 0xFE	; 254
    2ff8:	88 81       	ld	r24, Y
    2ffa:	99 81       	ldd	r25, Y+1	; 0x01
    2ffc:	c4 57       	subi	r28, 0x74	; 116
    2ffe:	d1 40       	sbci	r29, 0x01	; 1
    3000:	86 0f       	add	r24, r22
    3002:	97 1f       	adc	r25, r23
    3004:	c7 58       	subi	r28, 0x87	; 135
    3006:	de 4f       	sbci	r29, 0xFE	; 254
    3008:	e8 81       	ld	r30, Y
    300a:	f9 81       	ldd	r31, Y+1	; 0x01
    300c:	c9 57       	subi	r28, 0x79	; 121
    300e:	d1 40       	sbci	r29, 0x01	; 1
    3010:	09 95       	icall
    3012:	0f b6       	in	r0, 0x3f	; 63
    3014:	f8 94       	cli
    3016:	de bf       	out	0x3e, r29	; 62
    3018:	0f be       	out	0x3f, r0	; 63
    301a:	cd bf       	out	0x3d, r28	; 61
    301c:	2c c0       	rjmp	.+88     	; 0x3076 <main+0x5fc>
					else
						timer1.compareB(function.trimmer(6,2,23,Min,Max));
    301e:	1f 92       	push	r1
    3020:	1f 92       	push	r1
    3022:	89 e0       	ldi	r24, 0x09	; 9
    3024:	8f 93       	push	r24
    3026:	8e e2       	ldi	r24, 0x2E	; 46
    3028:	8f 93       	push	r24
    302a:	e0 91 a6 04 	lds	r30, 0x04A6	; 0x8004a6 <function+0x3e>
    302e:	f0 91 a7 04 	lds	r31, 0x04A7	; 0x8004a7 <function+0x3f>
    3032:	0f 2e       	mov	r0, r31
    3034:	f4 ef       	ldi	r31, 0xF4	; 244
    3036:	af 2e       	mov	r10, r31
    3038:	bb 24       	eor	r11, r11
    303a:	b3 94       	inc	r11
    303c:	c1 2c       	mov	r12, r1
    303e:	d1 2c       	mov	r13, r1
    3040:	f0 2d       	mov	r31, r0
    3042:	17 e1       	ldi	r17, 0x17	; 23
    3044:	e1 2e       	mov	r14, r17
    3046:	f1 2c       	mov	r15, r1
    3048:	00 e0       	ldi	r16, 0x00	; 0
    304a:	10 e0       	ldi	r17, 0x00	; 0
    304c:	22 e0       	ldi	r18, 0x02	; 2
    304e:	30 e0       	ldi	r19, 0x00	; 0
    3050:	40 e0       	ldi	r20, 0x00	; 0
    3052:	50 e0       	ldi	r21, 0x00	; 0
    3054:	66 e0       	ldi	r22, 0x06	; 6
    3056:	70 e0       	ldi	r23, 0x00	; 0
    3058:	80 e0       	ldi	r24, 0x00	; 0
    305a:	90 e0       	ldi	r25, 0x00	; 0
    305c:	09 95       	icall
    305e:	cb 01       	movw	r24, r22
    3060:	c7 58       	subi	r28, 0x87	; 135
    3062:	de 4f       	sbci	r29, 0xFE	; 254
    3064:	e8 81       	ld	r30, Y
    3066:	f9 81       	ldd	r31, Y+1	; 0x01
    3068:	c9 57       	subi	r28, 0x79	; 121
    306a:	d1 40       	sbci	r29, 0x01	; 1
    306c:	09 95       	icall
    306e:	0f 90       	pop	r0
    3070:	0f 90       	pop	r0
    3072:	0f 90       	pop	r0
    3074:	0f 90       	pop	r0
					lcd0.gotoxy(0,0);
    3076:	60 e0       	ldi	r22, 0x00	; 0
    3078:	70 e0       	ldi	r23, 0x00	; 0
    307a:	80 e0       	ldi	r24, 0x00	; 0
    307c:	90 e0       	ldi	r25, 0x00	; 0
    307e:	f4 01       	movw	r30, r8
    3080:	09 95       	icall
					lcd0.string_size("Sense: ",7);
    3082:	67 e0       	ldi	r22, 0x07	; 7
    3084:	88 e1       	ldi	r24, 0x18	; 24
    3086:	91 e0       	ldi	r25, 0x01	; 1
    3088:	f2 01       	movw	r30, r4
    308a:	09 95       	icall
					//lcd0.hspace(1);
					strcpy(str,function.i16toa(adcvalue));
    308c:	0f 2e       	mov	r0, r31
    308e:	f8 e6       	ldi	r31, 0x68	; 104
    3090:	cf 2e       	mov	r12, r31
    3092:	f4 e0       	ldi	r31, 0x04	; 4
    3094:	df 2e       	mov	r13, r31
    3096:	f0 2d       	mov	r31, r0
    3098:	d6 01       	movw	r26, r12
    309a:	90 96       	adiw	r26, 0x20	; 32
    309c:	ed 91       	ld	r30, X+
    309e:	fc 91       	ld	r31, X
    30a0:	91 97       	sbiw	r26, 0x21	; 33
    30a2:	c2 59       	subi	r28, 0x92	; 146
    30a4:	de 4f       	sbci	r29, 0xFE	; 254
    30a6:	88 81       	ld	r24, Y
    30a8:	99 81       	ldd	r25, Y+1	; 0x01
    30aa:	ce 56       	subi	r28, 0x6E	; 110
    30ac:	d1 40       	sbci	r29, 0x01	; 1
    30ae:	09 95       	icall
    30b0:	bc 01       	movw	r22, r24
    30b2:	ce 01       	movw	r24, r28
    30b4:	80 53       	subi	r24, 0x30	; 48
    30b6:	9f 4f       	sbci	r25, 0xFF	; 255
    30b8:	0e 94 44 24 	call	0x4888	; 0x4888 <strcpy>
					lcd0.string_size(str,4);
    30bc:	64 e0       	ldi	r22, 0x04	; 4
    30be:	ce 01       	movw	r24, r28
    30c0:	80 53       	subi	r24, 0x30	; 48
    30c2:	9f 4f       	sbci	r25, 0xFF	; 255
    30c4:	f2 01       	movw	r30, r4
    30c6:	09 95       	icall
					lcd0.gotoxy(0,12);
    30c8:	6c e0       	ldi	r22, 0x0C	; 12
    30ca:	70 e0       	ldi	r23, 0x00	; 0
    30cc:	80 e0       	ldi	r24, 0x00	; 0
    30ce:	90 e0       	ldi	r25, 0x00	; 0
    30d0:	f4 01       	movw	r30, r8
    30d2:	09 95       	icall
					lcd0.string_size(function.ui16toa(rtc.bcd2dec(dt.days)),2);
    30d4:	d6 01       	movw	r26, r12
    30d6:	92 96       	adiw	r26, 0x22	; 34
    30d8:	ed 90       	ld	r14, X+
    30da:	fc 90       	ld	r15, X
    30dc:	93 97       	sbiw	r26, 0x23	; 35
    30de:	03 ed       	ldi	r16, 0xD3	; 211
    30e0:	14 e0       	ldi	r17, 0x04	; 4
    30e2:	0f 2e       	mov	r0, r31
    30e4:	f7 eb       	ldi	r31, 0xB7	; 183
    30e6:	af 2e       	mov	r10, r31
    30e8:	f4 e0       	ldi	r31, 0x04	; 4
    30ea:	bf 2e       	mov	r11, r31
    30ec:	f0 2d       	mov	r31, r0
    30ee:	d5 01       	movw	r26, r10
    30f0:	58 96       	adiw	r26, 0x18	; 24
    30f2:	ed 91       	ld	r30, X+
    30f4:	fc 91       	ld	r31, X
    30f6:	59 97       	sbiw	r26, 0x19	; 25
    30f8:	d8 01       	movw	r26, r16
    30fa:	13 96       	adiw	r26, 0x03	; 3
    30fc:	8c 91       	ld	r24, X
    30fe:	09 95       	icall
    3100:	90 e0       	ldi	r25, 0x00	; 0
    3102:	f7 01       	movw	r30, r14
    3104:	09 95       	icall
    3106:	62 e0       	ldi	r22, 0x02	; 2
    3108:	f2 01       	movw	r30, r4
    310a:	09 95       	icall
					lcd0.putch(':');
    310c:	8a e3       	ldi	r24, 0x3A	; 58
    310e:	f1 01       	movw	r30, r2
    3110:	09 95       	icall
					lcd0.string_size(function.ui16toa(rtc.bcd2dec(dt.century_months)),2);
    3112:	d6 01       	movw	r26, r12
    3114:	92 96       	adiw	r26, 0x22	; 34
    3116:	ed 90       	ld	r14, X+
    3118:	fc 90       	ld	r15, X
    311a:	93 97       	sbiw	r26, 0x23	; 35
    311c:	d5 01       	movw	r26, r10
    311e:	58 96       	adiw	r26, 0x18	; 24
    3120:	ed 91       	ld	r30, X+
    3122:	fc 91       	ld	r31, X
    3124:	59 97       	sbiw	r26, 0x19	; 25
    3126:	d8 01       	movw	r26, r16
    3128:	11 96       	adiw	r26, 0x01	; 1
    312a:	8c 91       	ld	r24, X
    312c:	09 95       	icall
    312e:	90 e0       	ldi	r25, 0x00	; 0
    3130:	f7 01       	movw	r30, r14
    3132:	09 95       	icall
    3134:	62 e0       	ldi	r22, 0x02	; 2
    3136:	f2 01       	movw	r30, r4
    3138:	09 95       	icall
					lcd0.putch(':');
    313a:	8a e3       	ldi	r24, 0x3A	; 58
    313c:	f1 01       	movw	r30, r2
    313e:	09 95       	icall
					lcd0.string_size(function.ui16toa(rtc.bcd2dec(dt.years)),2);
    3140:	d6 01       	movw	r26, r12
    3142:	92 96       	adiw	r26, 0x22	; 34
    3144:	ed 90       	ld	r14, X+
    3146:	fc 90       	ld	r15, X
    3148:	93 97       	sbiw	r26, 0x23	; 35
    314a:	d5 01       	movw	r26, r10
    314c:	58 96       	adiw	r26, 0x18	; 24
    314e:	ed 91       	ld	r30, X+
    3150:	fc 91       	ld	r31, X
    3152:	59 97       	sbiw	r26, 0x19	; 25
    3154:	d8 01       	movw	r26, r16
    3156:	8c 91       	ld	r24, X
    3158:	09 95       	icall
    315a:	90 e0       	ldi	r25, 0x00	; 0
    315c:	f7 01       	movw	r30, r14
    315e:	09 95       	icall
    3160:	62 e0       	ldi	r22, 0x02	; 2
    3162:	f2 01       	movw	r30, r4
    3164:	09 95       	icall
					lcd0.gotoxy(1,12);
    3166:	6c e0       	ldi	r22, 0x0C	; 12
    3168:	70 e0       	ldi	r23, 0x00	; 0
    316a:	81 e0       	ldi	r24, 0x01	; 1
    316c:	90 e0       	ldi	r25, 0x00	; 0
    316e:	f4 01       	movw	r30, r8
    3170:	09 95       	icall
					/***set hour for positioning***/
					positionhour=rtc.bcd2dec(tm.hours);
    3172:	0f 2e       	mov	r0, r31
    3174:	f4 eb       	ldi	r31, 0xB4	; 180
    3176:	ef 2e       	mov	r14, r31
    3178:	f4 e0       	ldi	r31, 0x04	; 4
    317a:	ff 2e       	mov	r15, r31
    317c:	f0 2d       	mov	r31, r0
    317e:	d5 01       	movw	r26, r10
    3180:	58 96       	adiw	r26, 0x18	; 24
    3182:	ed 91       	ld	r30, X+
    3184:	fc 91       	ld	r31, X
    3186:	59 97       	sbiw	r26, 0x19	; 25
    3188:	d7 01       	movw	r26, r14
    318a:	8c 91       	ld	r24, X
    318c:	09 95       	icall
    318e:	e8 2f       	mov	r30, r24
    3190:	f0 e0       	ldi	r31, 0x00	; 0
    3192:	cc 58       	subi	r28, 0x8C	; 140
    3194:	de 4f       	sbci	r29, 0xFE	; 254
    3196:	f9 83       	std	Y+1, r31	; 0x01
    3198:	e8 83       	st	Y, r30
    319a:	c4 57       	subi	r28, 0x74	; 116
    319c:	d1 40       	sbci	r29, 0x01	; 1
					lcd0.string_size(function.ui16toa(positionhour),2);
    319e:	d6 01       	movw	r26, r12
    31a0:	92 96       	adiw	r26, 0x22	; 34
    31a2:	ed 91       	ld	r30, X+
    31a4:	fc 91       	ld	r31, X
    31a6:	93 97       	sbiw	r26, 0x23	; 35
    31a8:	cc 58       	subi	r28, 0x8C	; 140
    31aa:	de 4f       	sbci	r29, 0xFE	; 254
    31ac:	88 81       	ld	r24, Y
    31ae:	99 81       	ldd	r25, Y+1	; 0x01
    31b0:	c4 57       	subi	r28, 0x74	; 116
    31b2:	d1 40       	sbci	r29, 0x01	; 1
    31b4:	09 95       	icall
    31b6:	62 e0       	ldi	r22, 0x02	; 2
    31b8:	f2 01       	movw	r30, r4
    31ba:	09 95       	icall
					lcd0.putch(':');
    31bc:	8a e3       	ldi	r24, 0x3A	; 58
    31be:	f1 01       	movw	r30, r2
    31c0:	09 95       	icall
					lcd0.string_size(function.ui16toa(rtc.bcd2dec(tm.minutes)),2);
    31c2:	d6 01       	movw	r26, r12
    31c4:	92 96       	adiw	r26, 0x22	; 34
    31c6:	0d 91       	ld	r16, X+
    31c8:	1c 91       	ld	r17, X
    31ca:	93 97       	sbiw	r26, 0x23	; 35
    31cc:	d5 01       	movw	r26, r10
    31ce:	58 96       	adiw	r26, 0x18	; 24
    31d0:	ed 91       	ld	r30, X+
    31d2:	fc 91       	ld	r31, X
    31d4:	59 97       	sbiw	r26, 0x19	; 25
    31d6:	d7 01       	movw	r26, r14
    31d8:	11 96       	adiw	r26, 0x01	; 1
    31da:	8c 91       	ld	r24, X
    31dc:	09 95       	icall
    31de:	90 e0       	ldi	r25, 0x00	; 0
    31e0:	f8 01       	movw	r30, r16
    31e2:	09 95       	icall
    31e4:	62 e0       	ldi	r22, 0x02	; 2
    31e6:	f2 01       	movw	r30, r4
    31e8:	09 95       	icall
					lcd0.putch(':');
    31ea:	8a e3       	ldi	r24, 0x3A	; 58
    31ec:	f1 01       	movw	r30, r2
    31ee:	09 95       	icall
					lcd0.string_size(function.ui16toa(rtc.bcd2dec(tm.VL_seconds)),2);
    31f0:	d6 01       	movw	r26, r12
    31f2:	92 96       	adiw	r26, 0x22	; 34
    31f4:	0d 91       	ld	r16, X+
    31f6:	1c 91       	ld	r17, X
    31f8:	93 97       	sbiw	r26, 0x23	; 35
    31fa:	d5 01       	movw	r26, r10
    31fc:	58 96       	adiw	r26, 0x18	; 24
    31fe:	ed 91       	ld	r30, X+
    3200:	fc 91       	ld	r31, X
    3202:	59 97       	sbiw	r26, 0x19	; 25
    3204:	d7 01       	movw	r26, r14
    3206:	12 96       	adiw	r26, 0x02	; 2
    3208:	8c 91       	ld	r24, X
    320a:	09 95       	icall
    320c:	90 e0       	ldi	r25, 0x00	; 0
    320e:	f8 01       	movw	r30, r16
    3210:	09 95       	icall
    3212:	62 e0       	ldi	r22, 0x02	; 2
    3214:	f2 01       	movw	r30, r4
    3216:	09 95       	icall
					/***Message from uart***/
					lcd0.gotoxy(2,0);
    3218:	60 e0       	ldi	r22, 0x00	; 0
    321a:	70 e0       	ldi	r23, 0x00	; 0
    321c:	82 e0       	ldi	r24, 0x02	; 2
    321e:	90 e0       	ldi	r25, 0x00	; 0
    3220:	f4 01       	movw	r30, r8
    3222:	09 95       	icall
					strcpy(uartmessage,uartreceive);
    3224:	00 91 43 02 	lds	r16, 0x0243	; 0x800243 <uartreceive>
    3228:	10 91 44 02 	lds	r17, 0x0244	; 0x800244 <uartreceive+0x1>
    322c:	b8 01       	movw	r22, r16
    322e:	ce 01       	movw	r24, r28
    3230:	8e 51       	subi	r24, 0x1E	; 30
    3232:	9f 4f       	sbci	r25, 0xFF	; 255
    3234:	0e 94 44 24 	call	0x4888	; 0x4888 <strcpy>
					if(uartreceive[0]!='\0'){lcd0.string_size("u> ",3);lcd0.string_size(uartmessage,17);}
    3238:	d8 01       	movw	r26, r16
    323a:	8c 91       	ld	r24, X
    323c:	88 23       	and	r24, r24
    323e:	59 f0       	breq	.+22     	; 0x3256 <main+0x7dc>
    3240:	63 e0       	ldi	r22, 0x03	; 3
    3242:	80 e2       	ldi	r24, 0x20	; 32
    3244:	91 e0       	ldi	r25, 0x01	; 1
    3246:	f2 01       	movw	r30, r4
    3248:	09 95       	icall
    324a:	61 e1       	ldi	r22, 0x11	; 17
    324c:	ce 01       	movw	r24, r28
    324e:	8e 51       	subi	r24, 0x1E	; 30
    3250:	9f 4f       	sbci	r25, 0xFF	; 255
    3252:	f2 01       	movw	r30, r4
    3254:	09 95       	icall
					//if(!strcmp(uartreceive,"position\r")){
					if(!strcmp(uartreceive,"position")){
    3256:	64 e2       	ldi	r22, 0x24	; 36
    3258:	71 e0       	ldi	r23, 0x01	; 1
    325a:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <uartreceive>
    325e:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <uartreceive+0x1>
    3262:	0e 94 3b 24 	call	0x4876	; 0x4876 <strcmp>
    3266:	89 2b       	or	r24, r25
    3268:	51 f5       	brne	.+84     	; 0x32be <main+0x844>
						uart.puts("> ");
    326a:	07 ed       	ldi	r16, 0xD7	; 215
    326c:	14 e0       	ldi	r17, 0x04	; 4
    326e:	d8 01       	movw	r26, r16
    3270:	1a 96       	adiw	r26, 0x0a	; 10
    3272:	ed 91       	ld	r30, X+
    3274:	fc 91       	ld	r31, X
    3276:	1b 97       	sbiw	r26, 0x0b	; 11
    3278:	81 e2       	ldi	r24, 0x21	; 33
    327a:	91 e0       	ldi	r25, 0x01	; 1
    327c:	09 95       	icall
						uart.puts("analog Reading: ");
    327e:	d8 01       	movw	r26, r16
    3280:	1a 96       	adiw	r26, 0x0a	; 10
    3282:	ed 91       	ld	r30, X+
    3284:	fc 91       	ld	r31, X
    3286:	1b 97       	sbiw	r26, 0x0b	; 11
    3288:	8d e2       	ldi	r24, 0x2D	; 45
    328a:	91 e0       	ldi	r25, 0x01	; 1
    328c:	09 95       	icall
						uart.puts(ptr);
    328e:	d8 01       	movw	r26, r16
    3290:	1a 96       	adiw	r26, 0x0a	; 10
    3292:	ed 91       	ld	r30, X+
    3294:	fc 91       	ld	r31, X
    3296:	1b 97       	sbiw	r26, 0x0b	; 11
    3298:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <ptr>
    329c:	90 91 46 02 	lds	r25, 0x0246	; 0x800246 <ptr+0x1>
    32a0:	09 95       	icall
						uart.puts("\r\n");
    32a2:	d8 01       	movw	r26, r16
    32a4:	1a 96       	adiw	r26, 0x0a	; 10
    32a6:	ed 91       	ld	r30, X+
    32a8:	fc 91       	ld	r31, X
    32aa:	1b 97       	sbiw	r26, 0x0b	; 11
    32ac:	81 e8       	ldi	r24, 0x81	; 129
    32ae:	91 e0       	ldi	r25, 0x01	; 1
    32b0:	09 95       	icall
						uart.Rxflush();
    32b2:	d8 01       	movw	r26, r16
    32b4:	1e 96       	adiw	r26, 0x0e	; 14
    32b6:	ed 91       	ld	r30, X+
    32b8:	fc 91       	ld	r31, X
    32ba:	1f 97       	sbiw	r26, 0x0f	; 15
    32bc:	09 95       	icall
					}
					//if(!strcmp(uartreceive,"time\r")){
					if(!strcmp(uartreceive,"time")){
    32be:	6e e3       	ldi	r22, 0x3E	; 62
    32c0:	71 e0       	ldi	r23, 0x01	; 1
    32c2:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <uartreceive>
    32c6:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <uartreceive+0x1>
    32ca:	0e 94 3b 24 	call	0x4876	; 0x4876 <strcmp>
    32ce:	89 2b       	or	r24, r25
    32d0:	09 f0       	breq	.+2      	; 0x32d4 <main+0x85a>
    32d2:	30 cd       	rjmp	.-1440   	; 0x2d34 <main+0x2ba>
						//uart.putc('>');uart.puts("analog Reading: ");uart.puts(ptr);uart.puts("\r\n");
						uart.puts(function.ui16toa(rtc.bcd2dec(tm.hours)));
    32d4:	0f 2e       	mov	r0, r31
    32d6:	f7 ed       	ldi	r31, 0xD7	; 215
    32d8:	cf 2e       	mov	r12, r31
    32da:	f4 e0       	ldi	r31, 0x04	; 4
    32dc:	df 2e       	mov	r13, r31
    32de:	f0 2d       	mov	r31, r0
    32e0:	f6 01       	movw	r30, r12
    32e2:	02 84       	ldd	r0, Z+10	; 0x0a
    32e4:	f3 85       	ldd	r31, Z+11	; 0x0b
    32e6:	e0 2d       	mov	r30, r0
    32e8:	c2 59       	subi	r28, 0x92	; 146
    32ea:	de 4f       	sbci	r29, 0xFE	; 254
    32ec:	f9 83       	std	Y+1, r31	; 0x01
    32ee:	e8 83       	st	Y, r30
    32f0:	ce 56       	subi	r28, 0x6E	; 110
    32f2:	d1 40       	sbci	r29, 0x01	; 1
    32f4:	0f 2e       	mov	r0, r31
    32f6:	f8 e6       	ldi	r31, 0x68	; 104
    32f8:	ef 2e       	mov	r14, r31
    32fa:	f4 e0       	ldi	r31, 0x04	; 4
    32fc:	ff 2e       	mov	r15, r31
    32fe:	f0 2d       	mov	r31, r0
    3300:	d7 01       	movw	r26, r14
    3302:	92 96       	adiw	r26, 0x22	; 34
    3304:	0d 91       	ld	r16, X+
    3306:	1c 91       	ld	r17, X
    3308:	93 97       	sbiw	r26, 0x23	; 35
    330a:	0f 2e       	mov	r0, r31
    330c:	f7 eb       	ldi	r31, 0xB7	; 183
    330e:	af 2e       	mov	r10, r31
    3310:	f4 e0       	ldi	r31, 0x04	; 4
    3312:	bf 2e       	mov	r11, r31
    3314:	f0 2d       	mov	r31, r0
    3316:	d5 01       	movw	r26, r10
    3318:	58 96       	adiw	r26, 0x18	; 24
    331a:	ed 91       	ld	r30, X+
    331c:	fc 91       	ld	r31, X
    331e:	59 97       	sbiw	r26, 0x19	; 25
    3320:	a4 eb       	ldi	r26, 0xB4	; 180
    3322:	b4 e0       	ldi	r27, 0x04	; 4
    3324:	8c 91       	ld	r24, X
    3326:	09 95       	icall
    3328:	90 e0       	ldi	r25, 0x00	; 0
    332a:	f8 01       	movw	r30, r16
    332c:	09 95       	icall
    332e:	c2 59       	subi	r28, 0x92	; 146
    3330:	de 4f       	sbci	r29, 0xFE	; 254
    3332:	e8 81       	ld	r30, Y
    3334:	f9 81       	ldd	r31, Y+1	; 0x01
    3336:	ce 56       	subi	r28, 0x6E	; 110
    3338:	d1 40       	sbci	r29, 0x01	; 1
    333a:	09 95       	icall
						uart.putc(':');
    333c:	d6 01       	movw	r26, r12
    333e:	18 96       	adiw	r26, 0x08	; 8
    3340:	ed 91       	ld	r30, X+
    3342:	fc 91       	ld	r31, X
    3344:	19 97       	sbiw	r26, 0x09	; 9
    3346:	8a e3       	ldi	r24, 0x3A	; 58
    3348:	09 95       	icall
						uart.puts(function.ui16toa(rtc.bcd2dec(tm.minutes)));
    334a:	f6 01       	movw	r30, r12
    334c:	02 84       	ldd	r0, Z+10	; 0x0a
    334e:	f3 85       	ldd	r31, Z+11	; 0x0b
    3350:	e0 2d       	mov	r30, r0
    3352:	c2 59       	subi	r28, 0x92	; 146
    3354:	de 4f       	sbci	r29, 0xFE	; 254
    3356:	f9 83       	std	Y+1, r31	; 0x01
    3358:	e8 83       	st	Y, r30
    335a:	ce 56       	subi	r28, 0x6E	; 110
    335c:	d1 40       	sbci	r29, 0x01	; 1
    335e:	d7 01       	movw	r26, r14
    3360:	92 96       	adiw	r26, 0x22	; 34
    3362:	0d 91       	ld	r16, X+
    3364:	1c 91       	ld	r17, X
    3366:	93 97       	sbiw	r26, 0x23	; 35
    3368:	d5 01       	movw	r26, r10
    336a:	58 96       	adiw	r26, 0x18	; 24
    336c:	ed 91       	ld	r30, X+
    336e:	fc 91       	ld	r31, X
    3370:	59 97       	sbiw	r26, 0x19	; 25
    3372:	80 91 b5 04 	lds	r24, 0x04B5	; 0x8004b5 <tm+0x1>
    3376:	09 95       	icall
    3378:	90 e0       	ldi	r25, 0x00	; 0
    337a:	f8 01       	movw	r30, r16
    337c:	09 95       	icall
    337e:	c2 59       	subi	r28, 0x92	; 146
    3380:	de 4f       	sbci	r29, 0xFE	; 254
    3382:	e8 81       	ld	r30, Y
    3384:	f9 81       	ldd	r31, Y+1	; 0x01
    3386:	ce 56       	subi	r28, 0x6E	; 110
    3388:	d1 40       	sbci	r29, 0x01	; 1
    338a:	09 95       	icall
						uart.putc(':');
    338c:	d6 01       	movw	r26, r12
    338e:	18 96       	adiw	r26, 0x08	; 8
    3390:	ed 91       	ld	r30, X+
    3392:	fc 91       	ld	r31, X
    3394:	19 97       	sbiw	r26, 0x09	; 9
    3396:	8a e3       	ldi	r24, 0x3A	; 58
    3398:	09 95       	icall
						uart.puts(function.ui16toa(rtc.bcd2dec(tm.VL_seconds)));
    339a:	f6 01       	movw	r30, r12
    339c:	02 85       	ldd	r16, Z+10	; 0x0a
    339e:	13 85       	ldd	r17, Z+11	; 0x0b
    33a0:	d7 01       	movw	r26, r14
    33a2:	92 96       	adiw	r26, 0x22	; 34
    33a4:	ed 90       	ld	r14, X+
    33a6:	fc 90       	ld	r15, X
    33a8:	93 97       	sbiw	r26, 0x23	; 35
    33aa:	d5 01       	movw	r26, r10
    33ac:	58 96       	adiw	r26, 0x18	; 24
    33ae:	ed 91       	ld	r30, X+
    33b0:	fc 91       	ld	r31, X
    33b2:	59 97       	sbiw	r26, 0x19	; 25
    33b4:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <tm+0x2>
    33b8:	09 95       	icall
    33ba:	90 e0       	ldi	r25, 0x00	; 0
    33bc:	f7 01       	movw	r30, r14
    33be:	09 95       	icall
    33c0:	f8 01       	movw	r30, r16
    33c2:	09 95       	icall
						uart.puts("\r\n");
    33c4:	d6 01       	movw	r26, r12
    33c6:	1a 96       	adiw	r26, 0x0a	; 10
    33c8:	ed 91       	ld	r30, X+
    33ca:	fc 91       	ld	r31, X
    33cc:	1b 97       	sbiw	r26, 0x0b	; 11
    33ce:	81 e8       	ldi	r24, 0x81	; 129
    33d0:	91 e0       	ldi	r25, 0x01	; 1
    33d2:	09 95       	icall
						uart.Rxflush();
    33d4:	d6 01       	movw	r26, r12
    33d6:	1e 96       	adiw	r26, 0x0e	; 14
    33d8:	ed 91       	ld	r30, X+
    33da:	fc 91       	ld	r31, X
    33dc:	1f 97       	sbiw	r26, 0x0f	; 15
    33de:	09 95       	icall
    33e0:	b1 e3       	ldi	r27, 0x31	; 49
    33e2:	c2 59       	subi	r28, 0x92	; 146
    33e4:	de 4f       	sbci	r29, 0xFE	; 254
    33e6:	b8 83       	st	Y, r27
    33e8:	ce 56       	subi	r28, 0x6E	; 110
    33ea:	d1 40       	sbci	r29, 0x01	; 1
    33ec:	b0 cc       	rjmp	.-1696   	; 0x2d4e <main+0x2d4>
					}
				break;
			/***MENU 2***/
			case '2': // Manual position override 
				if(!strcmp(keypad.get().string,"A")){Menu='3';keypad.flush();lcd0.clear();break;}
    33ee:	f3 01       	movw	r30, r6
    33f0:	09 95       	icall
    33f2:	ef 96       	adiw	r28, 0x3f	; 63
    33f4:	2f af       	std	Y+63, r18	; 0x3f
    33f6:	ef 97       	sbiw	r28, 0x3f	; 63
    33f8:	c1 58       	subi	r28, 0x81	; 129
    33fa:	df 4f       	sbci	r29, 0xFF	; 255
    33fc:	38 83       	st	Y, r19
    33fe:	cf 57       	subi	r28, 0x7F	; 127
    3400:	d0 40       	sbci	r29, 0x00	; 0
    3402:	c0 58       	subi	r28, 0x80	; 128
    3404:	df 4f       	sbci	r29, 0xFF	; 255
    3406:	48 83       	st	Y, r20
    3408:	c0 58       	subi	r28, 0x80	; 128
    340a:	d0 40       	sbci	r29, 0x00	; 0
    340c:	cf 57       	subi	r28, 0x7F	; 127
    340e:	df 4f       	sbci	r29, 0xFF	; 255
    3410:	58 83       	st	Y, r21
    3412:	c1 58       	subi	r28, 0x81	; 129
    3414:	d0 40       	sbci	r29, 0x00	; 0
    3416:	ce 57       	subi	r28, 0x7E	; 126
    3418:	df 4f       	sbci	r29, 0xFF	; 255
    341a:	68 83       	st	Y, r22
    341c:	c2 58       	subi	r28, 0x82	; 130
    341e:	d0 40       	sbci	r29, 0x00	; 0
    3420:	64 e1       	ldi	r22, 0x14	; 20
    3422:	71 e0       	ldi	r23, 0x01	; 1
    3424:	cf 57       	subi	r28, 0x7F	; 127
    3426:	df 4f       	sbci	r29, 0xFF	; 255
    3428:	88 81       	ld	r24, Y
    342a:	99 81       	ldd	r25, Y+1	; 0x01
    342c:	c1 58       	subi	r28, 0x81	; 129
    342e:	d0 40       	sbci	r29, 0x00	; 0
    3430:	0e 94 3b 24 	call	0x4876	; 0x4876 <strcmp>
    3434:	89 2b       	or	r24, r25
    3436:	a9 f4       	brne	.+42     	; 0x3462 <main+0x9e8>
    3438:	c0 59       	subi	r28, 0x90	; 144
    343a:	de 4f       	sbci	r29, 0xFE	; 254
    343c:	e8 81       	ld	r30, Y
    343e:	f9 81       	ldd	r31, Y+1	; 0x01
    3440:	c0 57       	subi	r28, 0x70	; 112
    3442:	d1 40       	sbci	r29, 0x01	; 1
    3444:	09 95       	icall
    3446:	ce 58       	subi	r28, 0x8E	; 142
    3448:	de 4f       	sbci	r29, 0xFE	; 254
    344a:	e8 81       	ld	r30, Y
    344c:	f9 81       	ldd	r31, Y+1	; 0x01
    344e:	c2 57       	subi	r28, 0x72	; 114
    3450:	d1 40       	sbci	r29, 0x01	; 1
    3452:	09 95       	icall
    3454:	f3 e3       	ldi	r31, 0x33	; 51
    3456:	c2 59       	subi	r28, 0x92	; 146
    3458:	de 4f       	sbci	r29, 0xFE	; 254
    345a:	f8 83       	st	Y, r31
    345c:	ce 56       	subi	r28, 0x6E	; 110
    345e:	d1 40       	sbci	r29, 0x01	; 1
    3460:	76 cc       	rjmp	.-1812   	; 0x2d4e <main+0x2d4>
				if(!strcmp(keypad.get().string,"B")){Menu='1';keypad.flush();lcd0.clear();break;}
    3462:	f3 01       	movw	r30, r6
    3464:	09 95       	icall
    3466:	ea 96       	adiw	r28, 0x3a	; 58
    3468:	2f af       	std	Y+63, r18	; 0x3f
    346a:	ea 97       	sbiw	r28, 0x3a	; 58
    346c:	eb 96       	adiw	r28, 0x3b	; 59
    346e:	3f af       	std	Y+63, r19	; 0x3f
    3470:	eb 97       	sbiw	r28, 0x3b	; 59
    3472:	ec 96       	adiw	r28, 0x3c	; 60
    3474:	4f af       	std	Y+63, r20	; 0x3f
    3476:	ec 97       	sbiw	r28, 0x3c	; 60
    3478:	ed 96       	adiw	r28, 0x3d	; 61
    347a:	5f af       	std	Y+63, r21	; 0x3f
    347c:	ed 97       	sbiw	r28, 0x3d	; 61
    347e:	ee 96       	adiw	r28, 0x3e	; 62
    3480:	6f af       	std	Y+63, r22	; 0x3f
    3482:	ee 97       	sbiw	r28, 0x3e	; 62
    3484:	66 e1       	ldi	r22, 0x16	; 22
    3486:	71 e0       	ldi	r23, 0x01	; 1
    3488:	ee 96       	adiw	r28, 0x3e	; 62
    348a:	8e ad       	ldd	r24, Y+62	; 0x3e
    348c:	9f ad       	ldd	r25, Y+63	; 0x3f
    348e:	ee 97       	sbiw	r28, 0x3e	; 62
    3490:	0e 94 3b 24 	call	0x4876	; 0x4876 <strcmp>
    3494:	89 2b       	or	r24, r25
    3496:	a9 f4       	brne	.+42     	; 0x34c2 <main+0xa48>
    3498:	c0 59       	subi	r28, 0x90	; 144
    349a:	de 4f       	sbci	r29, 0xFE	; 254
    349c:	e8 81       	ld	r30, Y
    349e:	f9 81       	ldd	r31, Y+1	; 0x01
    34a0:	c0 57       	subi	r28, 0x70	; 112
    34a2:	d1 40       	sbci	r29, 0x01	; 1
    34a4:	09 95       	icall
    34a6:	ce 58       	subi	r28, 0x8E	; 142
    34a8:	de 4f       	sbci	r29, 0xFE	; 254
    34aa:	e8 81       	ld	r30, Y
    34ac:	f9 81       	ldd	r31, Y+1	; 0x01
    34ae:	c2 57       	subi	r28, 0x72	; 114
    34b0:	d1 40       	sbci	r29, 0x01	; 1
    34b2:	09 95       	icall
    34b4:	f1 e3       	ldi	r31, 0x31	; 49
    34b6:	c2 59       	subi	r28, 0x92	; 146
    34b8:	de 4f       	sbci	r29, 0xFE	; 254
    34ba:	f8 83       	st	Y, r31
    34bc:	ce 56       	subi	r28, 0x6E	; 110
    34be:	d1 40       	sbci	r29, 0x01	; 1
    34c0:	46 cc       	rjmp	.-1908   	; 0x2d4e <main+0x2d4>
				if(!strcmp(keypad.get().string,"C")){Menu='1';keypad.flush();lcd0.clear();uart.puts("Manual exit\r\n");break;}
    34c2:	f3 01       	movw	r30, r6
    34c4:	09 95       	icall
    34c6:	e5 96       	adiw	r28, 0x35	; 53
    34c8:	2f af       	std	Y+63, r18	; 0x3f
    34ca:	e5 97       	sbiw	r28, 0x35	; 53
    34cc:	e6 96       	adiw	r28, 0x36	; 54
    34ce:	3f af       	std	Y+63, r19	; 0x3f
    34d0:	e6 97       	sbiw	r28, 0x36	; 54
    34d2:	e7 96       	adiw	r28, 0x37	; 55
    34d4:	4f af       	std	Y+63, r20	; 0x3f
    34d6:	e7 97       	sbiw	r28, 0x37	; 55
    34d8:	e8 96       	adiw	r28, 0x38	; 56
    34da:	5f af       	std	Y+63, r21	; 0x3f
    34dc:	e8 97       	sbiw	r28, 0x38	; 56
    34de:	e9 96       	adiw	r28, 0x39	; 57
    34e0:	6f af       	std	Y+63, r22	; 0x3f
    34e2:	e9 97       	sbiw	r28, 0x39	; 57
    34e4:	63 e4       	ldi	r22, 0x43	; 67
    34e6:	71 e0       	ldi	r23, 0x01	; 1
    34e8:	e9 96       	adiw	r28, 0x39	; 57
    34ea:	8e ad       	ldd	r24, Y+62	; 0x3e
    34ec:	9f ad       	ldd	r25, Y+63	; 0x3f
    34ee:	e9 97       	sbiw	r28, 0x39	; 57
    34f0:	0e 94 3b 24 	call	0x4876	; 0x4876 <strcmp>
    34f4:	89 2b       	or	r24, r25
    34f6:	e1 f4       	brne	.+56     	; 0x3530 <main+0xab6>
    34f8:	c0 59       	subi	r28, 0x90	; 144
    34fa:	de 4f       	sbci	r29, 0xFE	; 254
    34fc:	e8 81       	ld	r30, Y
    34fe:	f9 81       	ldd	r31, Y+1	; 0x01
    3500:	c0 57       	subi	r28, 0x70	; 112
    3502:	d1 40       	sbci	r29, 0x01	; 1
    3504:	09 95       	icall
    3506:	ce 58       	subi	r28, 0x8E	; 142
    3508:	de 4f       	sbci	r29, 0xFE	; 254
    350a:	e8 81       	ld	r30, Y
    350c:	f9 81       	ldd	r31, Y+1	; 0x01
    350e:	c2 57       	subi	r28, 0x72	; 114
    3510:	d1 40       	sbci	r29, 0x01	; 1
    3512:	09 95       	icall
    3514:	e0 91 e1 04 	lds	r30, 0x04E1	; 0x8004e1 <uart+0xa>
    3518:	f0 91 e2 04 	lds	r31, 0x04E2	; 0x8004e2 <uart+0xb>
    351c:	85 e4       	ldi	r24, 0x45	; 69
    351e:	91 e0       	ldi	r25, 0x01	; 1
    3520:	09 95       	icall
    3522:	f1 e3       	ldi	r31, 0x31	; 49
    3524:	c2 59       	subi	r28, 0x92	; 146
    3526:	de 4f       	sbci	r29, 0xFE	; 254
    3528:	f8 83       	st	Y, r31
    352a:	ce 56       	subi	r28, 0x6E	; 110
    352c:	d1 40       	sbci	r29, 0x01	; 1
    352e:	0f cc       	rjmp	.-2018   	; 0x2d4e <main+0x2d4>
					lcd0.gotoxy(0,0);
    3530:	60 e0       	ldi	r22, 0x00	; 0
    3532:	70 e0       	ldi	r23, 0x00	; 0
    3534:	80 e0       	ldi	r24, 0x00	; 0
    3536:	90 e0       	ldi	r25, 0x00	; 0
    3538:	f4 01       	movw	r30, r8
    353a:	09 95       	icall
					lcd0.string_size("Manual: ",8);
    353c:	68 e0       	ldi	r22, 0x08	; 8
    353e:	83 e5       	ldi	r24, 0x53	; 83
    3540:	91 e0       	ldi	r25, 0x01	; 1
    3542:	f2 01       	movw	r30, r4
    3544:	09 95       	icall
					lcd0.string_size(mstr,3);
    3546:	63 e0       	ldi	r22, 0x03	; 3
    3548:	ce 01       	movw	r24, r28
    354a:	8a 52       	subi	r24, 0x2A	; 42
    354c:	9f 4f       	sbci	r25, 0xFF	; 255
    354e:	f2 01       	movw	r30, r4
    3550:	09 95       	icall
					lcd0.gotoxy(1,0);
    3552:	60 e0       	ldi	r22, 0x00	; 0
    3554:	70 e0       	ldi	r23, 0x00	; 0
    3556:	81 e0       	ldi	r24, 0x01	; 1
    3558:	90 e0       	ldi	r25, 0x00	; 0
    355a:	f4 01       	movw	r30, r8
    355c:	09 95       	icall
					lcd0.string_size("Enter Angle",11);
    355e:	6b e0       	ldi	r22, 0x0B	; 11
    3560:	8c e5       	ldi	r24, 0x5C	; 92
    3562:	91 e0       	ldi	r25, 0x01	; 1
    3564:	f2 01       	movw	r30, r4
    3566:	09 95       	icall
					if(keypad.get().character==KEYPADENTERKEY){
    3568:	f3 01       	movw	r30, r6
    356a:	09 95       	icall
    356c:	e0 96       	adiw	r28, 0x30	; 48
    356e:	2f af       	std	Y+63, r18	; 0x3f
    3570:	e0 97       	sbiw	r28, 0x30	; 48
    3572:	e1 96       	adiw	r28, 0x31	; 49
    3574:	3f af       	std	Y+63, r19	; 0x3f
    3576:	e1 97       	sbiw	r28, 0x31	; 49
    3578:	e2 96       	adiw	r28, 0x32	; 50
    357a:	4f af       	std	Y+63, r20	; 0x3f
    357c:	e2 97       	sbiw	r28, 0x32	; 50
    357e:	e3 96       	adiw	r28, 0x33	; 51
    3580:	5f af       	std	Y+63, r21	; 0x3f
    3582:	e3 97       	sbiw	r28, 0x33	; 51
    3584:	e4 96       	adiw	r28, 0x34	; 52
    3586:	6f af       	std	Y+63, r22	; 0x3f
    3588:	e4 97       	sbiw	r28, 0x34	; 52
    358a:	24 34       	cpi	r18, 0x44	; 68
    358c:	09 f0       	breq	.+2      	; 0x3590 <main+0xb16>
    358e:	67 c0       	rjmp	.+206    	; 0x365e <main+0xbe4>
						strncpy(mstr,keypad.get().string,6);
    3590:	f3 01       	movw	r30, r6
    3592:	09 95       	icall
    3594:	ab 96       	adiw	r28, 0x2b	; 43
    3596:	2f af       	std	Y+63, r18	; 0x3f
    3598:	ab 97       	sbiw	r28, 0x2b	; 43
    359a:	ac 96       	adiw	r28, 0x2c	; 44
    359c:	3f af       	std	Y+63, r19	; 0x3f
    359e:	ac 97       	sbiw	r28, 0x2c	; 44
    35a0:	ad 96       	adiw	r28, 0x2d	; 45
    35a2:	4f af       	std	Y+63, r20	; 0x3f
    35a4:	ad 97       	sbiw	r28, 0x2d	; 45
    35a6:	ae 96       	adiw	r28, 0x2e	; 46
    35a8:	5f af       	std	Y+63, r21	; 0x3f
    35aa:	ae 97       	sbiw	r28, 0x2e	; 46
    35ac:	af 96       	adiw	r28, 0x2f	; 47
    35ae:	6f af       	std	Y+63, r22	; 0x3f
    35b0:	af 97       	sbiw	r28, 0x2f	; 47
    35b2:	af 96       	adiw	r28, 0x2f	; 47
    35b4:	6e ad       	ldd	r22, Y+62	; 0x3e
    35b6:	7f ad       	ldd	r23, Y+63	; 0x3f
    35b8:	af 97       	sbiw	r28, 0x2f	; 47
    35ba:	46 e0       	ldi	r20, 0x06	; 6
    35bc:	50 e0       	ldi	r21, 0x00	; 0
    35be:	ce 01       	movw	r24, r28
    35c0:	8a 52       	subi	r24, 0x2A	; 42
    35c2:	9f 4f       	sbci	r25, 0xFF	; 255
    35c4:	0e 94 4b 24 	call	0x4896	; 0x4896 <strncpy>
						mvalue=function.strToInt(mstr);
    35c8:	e0 91 94 04 	lds	r30, 0x0494	; 0x800494 <function+0x2c>
    35cc:	f0 91 95 04 	lds	r31, 0x0495	; 0x800495 <function+0x2d>
    35d0:	ce 01       	movw	r24, r28
    35d2:	8a 52       	subi	r24, 0x2A	; 42
    35d4:	9f 4f       	sbci	r25, 0xFF	; 255
    35d6:	09 95       	icall
						if(mvalue >=0 && mvalue <181){
    35d8:	85 3b       	cpi	r24, 0xB5	; 181
    35da:	91 05       	cpc	r25, r1
    35dc:	a0 f5       	brcc	.+104    	; 0x3646 <main+0xbcc>
							m_value=mvalue;
							timer1.compareB(function.trimmer(m_value,0,180,Min,Max));
    35de:	bc 01       	movw	r22, r24
    35e0:	99 0f       	add	r25, r25
    35e2:	88 0b       	sbc	r24, r24
    35e4:	99 0b       	sbc	r25, r25
    35e6:	1f 92       	push	r1
    35e8:	1f 92       	push	r1
    35ea:	29 e0       	ldi	r18, 0x09	; 9
    35ec:	2f 93       	push	r18
    35ee:	2e e2       	ldi	r18, 0x2E	; 46
    35f0:	2f 93       	push	r18
    35f2:	e0 91 a6 04 	lds	r30, 0x04A6	; 0x8004a6 <function+0x3e>
    35f6:	f0 91 a7 04 	lds	r31, 0x04A7	; 0x8004a7 <function+0x3f>
    35fa:	0f 2e       	mov	r0, r31
    35fc:	f4 ef       	ldi	r31, 0xF4	; 244
    35fe:	af 2e       	mov	r10, r31
    3600:	bb 24       	eor	r11, r11
    3602:	b3 94       	inc	r11
    3604:	c1 2c       	mov	r12, r1
    3606:	d1 2c       	mov	r13, r1
    3608:	f0 2d       	mov	r31, r0
    360a:	14 eb       	ldi	r17, 0xB4	; 180
    360c:	e1 2e       	mov	r14, r17
    360e:	f1 2c       	mov	r15, r1
    3610:	00 e0       	ldi	r16, 0x00	; 0
    3612:	10 e0       	ldi	r17, 0x00	; 0
    3614:	20 e0       	ldi	r18, 0x00	; 0
    3616:	30 e0       	ldi	r19, 0x00	; 0
    3618:	a9 01       	movw	r20, r18
    361a:	09 95       	icall
    361c:	cb 01       	movw	r24, r22
    361e:	c7 58       	subi	r28, 0x87	; 135
    3620:	de 4f       	sbci	r29, 0xFE	; 254
    3622:	e8 81       	ld	r30, Y
    3624:	f9 81       	ldd	r31, Y+1	; 0x01
    3626:	c9 57       	subi	r28, 0x79	; 121
    3628:	d1 40       	sbci	r29, 0x01	; 1
    362a:	09 95       	icall
							lcd0.hspace(5);
    362c:	c0 56       	subi	r28, 0x60	; 96
    362e:	df 4f       	sbci	r29, 0xFF	; 255
    3630:	e8 81       	ld	r30, Y
    3632:	f9 81       	ldd	r31, Y+1	; 0x01
    3634:	c0 5a       	subi	r28, 0xA0	; 160
    3636:	d0 40       	sbci	r29, 0x00	; 0
    3638:	85 e0       	ldi	r24, 0x05	; 5
    363a:	09 95       	icall
    363c:	0f 90       	pop	r0
    363e:	0f 90       	pop	r0
    3640:	0f 90       	pop	r0
    3642:	0f 90       	pop	r0
    3644:	05 c0       	rjmp	.+10     	; 0x3650 <main+0xbd6>
						}else{
							lcd0.string_size("  err",5);
    3646:	65 e0       	ldi	r22, 0x05	; 5
    3648:	88 e6       	ldi	r24, 0x68	; 104
    364a:	91 e0       	ldi	r25, 0x01	; 1
    364c:	f2 01       	movw	r30, r4
    364e:	09 95       	icall
						}
						keypad.flush();
    3650:	c0 59       	subi	r28, 0x90	; 144
    3652:	de 4f       	sbci	r29, 0xFE	; 254
    3654:	e8 81       	ld	r30, Y
    3656:	f9 81       	ldd	r31, Y+1	; 0x01
    3658:	c0 57       	subi	r28, 0x70	; 112
    365a:	d1 40       	sbci	r29, 0x01	; 1
    365c:	09 95       	icall
					}
					//else
					//	timer1.compareB(function.trimmer(m_value,0,180,Min,Max));
					lcd0.gotoxy(3,0);
    365e:	60 e0       	ldi	r22, 0x00	; 0
    3660:	70 e0       	ldi	r23, 0x00	; 0
    3662:	83 e0       	ldi	r24, 0x03	; 3
    3664:	90 e0       	ldi	r25, 0x00	; 0
    3666:	f4 01       	movw	r30, r8
    3668:	09 95       	icall
					lcd0.string_size("C - exit",8);
    366a:	68 e0       	ldi	r22, 0x08	; 8
    366c:	8e e6       	ldi	r24, 0x6E	; 110
    366e:	91 e0       	ldi	r25, 0x01	; 1
    3670:	f2 01       	movw	r30, r4
    3672:	09 95       	icall
				break;
    3674:	6c cb       	rjmp	.-2344   	; 0x2d4e <main+0x2d4>
			/***MENU 3***/
			case '3': //Set Time and Date
				if(!strcmp(keypad.get().string,"A")){Menu='1';keypad.flush();lcd0.clear();break;}
    3676:	f3 01       	movw	r30, r6
    3678:	09 95       	icall
    367a:	a6 96       	adiw	r28, 0x26	; 38
    367c:	2f af       	std	Y+63, r18	; 0x3f
    367e:	a6 97       	sbiw	r28, 0x26	; 38
    3680:	a7 96       	adiw	r28, 0x27	; 39
    3682:	3f af       	std	Y+63, r19	; 0x3f
    3684:	a7 97       	sbiw	r28, 0x27	; 39
    3686:	a8 96       	adiw	r28, 0x28	; 40
    3688:	4f af       	std	Y+63, r20	; 0x3f
    368a:	a8 97       	sbiw	r28, 0x28	; 40
    368c:	a9 96       	adiw	r28, 0x29	; 41
    368e:	5f af       	std	Y+63, r21	; 0x3f
    3690:	a9 97       	sbiw	r28, 0x29	; 41
    3692:	aa 96       	adiw	r28, 0x2a	; 42
    3694:	6f af       	std	Y+63, r22	; 0x3f
    3696:	aa 97       	sbiw	r28, 0x2a	; 42
    3698:	64 e1       	ldi	r22, 0x14	; 20
    369a:	71 e0       	ldi	r23, 0x01	; 1
    369c:	aa 96       	adiw	r28, 0x2a	; 42
    369e:	8e ad       	ldd	r24, Y+62	; 0x3e
    36a0:	9f ad       	ldd	r25, Y+63	; 0x3f
    36a2:	aa 97       	sbiw	r28, 0x2a	; 42
    36a4:	0e 94 3b 24 	call	0x4876	; 0x4876 <strcmp>
    36a8:	89 2b       	or	r24, r25
    36aa:	a9 f4       	brne	.+42     	; 0x36d6 <main+0xc5c>
    36ac:	c0 59       	subi	r28, 0x90	; 144
    36ae:	de 4f       	sbci	r29, 0xFE	; 254
    36b0:	e8 81       	ld	r30, Y
    36b2:	f9 81       	ldd	r31, Y+1	; 0x01
    36b4:	c0 57       	subi	r28, 0x70	; 112
    36b6:	d1 40       	sbci	r29, 0x01	; 1
    36b8:	09 95       	icall
    36ba:	ce 58       	subi	r28, 0x8E	; 142
    36bc:	de 4f       	sbci	r29, 0xFE	; 254
    36be:	e8 81       	ld	r30, Y
    36c0:	f9 81       	ldd	r31, Y+1	; 0x01
    36c2:	c2 57       	subi	r28, 0x72	; 114
    36c4:	d1 40       	sbci	r29, 0x01	; 1
    36c6:	09 95       	icall
    36c8:	f1 e3       	ldi	r31, 0x31	; 49
    36ca:	c2 59       	subi	r28, 0x92	; 146
    36cc:	de 4f       	sbci	r29, 0xFE	; 254
    36ce:	f8 83       	st	Y, r31
    36d0:	ce 56       	subi	r28, 0x6E	; 110
    36d2:	d1 40       	sbci	r29, 0x01	; 1
    36d4:	3c cb       	rjmp	.-2440   	; 0x2d4e <main+0x2d4>
				if(!strcmp(keypad.get().string,"B")){Menu='2';keypad.flush();lcd0.clear();break;}
    36d6:	f3 01       	movw	r30, r6
    36d8:	09 95       	icall
    36da:	a1 96       	adiw	r28, 0x21	; 33
    36dc:	2f af       	std	Y+63, r18	; 0x3f
    36de:	a1 97       	sbiw	r28, 0x21	; 33
    36e0:	a2 96       	adiw	r28, 0x22	; 34
    36e2:	3f af       	std	Y+63, r19	; 0x3f
    36e4:	a2 97       	sbiw	r28, 0x22	; 34
    36e6:	a3 96       	adiw	r28, 0x23	; 35
    36e8:	4f af       	std	Y+63, r20	; 0x3f
    36ea:	a3 97       	sbiw	r28, 0x23	; 35
    36ec:	a4 96       	adiw	r28, 0x24	; 36
    36ee:	5f af       	std	Y+63, r21	; 0x3f
    36f0:	a4 97       	sbiw	r28, 0x24	; 36
    36f2:	a5 96       	adiw	r28, 0x25	; 37
    36f4:	6f af       	std	Y+63, r22	; 0x3f
    36f6:	a5 97       	sbiw	r28, 0x25	; 37
    36f8:	66 e1       	ldi	r22, 0x16	; 22
    36fa:	71 e0       	ldi	r23, 0x01	; 1
    36fc:	a5 96       	adiw	r28, 0x25	; 37
    36fe:	8e ad       	ldd	r24, Y+62	; 0x3e
    3700:	9f ad       	ldd	r25, Y+63	; 0x3f
    3702:	a5 97       	sbiw	r28, 0x25	; 37
    3704:	0e 94 3b 24 	call	0x4876	; 0x4876 <strcmp>
    3708:	89 2b       	or	r24, r25
    370a:	a9 f4       	brne	.+42     	; 0x3736 <main+0xcbc>
    370c:	c0 59       	subi	r28, 0x90	; 144
    370e:	de 4f       	sbci	r29, 0xFE	; 254
    3710:	e8 81       	ld	r30, Y
    3712:	f9 81       	ldd	r31, Y+1	; 0x01
    3714:	c0 57       	subi	r28, 0x70	; 112
    3716:	d1 40       	sbci	r29, 0x01	; 1
    3718:	09 95       	icall
    371a:	ce 58       	subi	r28, 0x8E	; 142
    371c:	de 4f       	sbci	r29, 0xFE	; 254
    371e:	e8 81       	ld	r30, Y
    3720:	f9 81       	ldd	r31, Y+1	; 0x01
    3722:	c2 57       	subi	r28, 0x72	; 114
    3724:	d1 40       	sbci	r29, 0x01	; 1
    3726:	09 95       	icall
    3728:	f2 e3       	ldi	r31, 0x32	; 50
    372a:	c2 59       	subi	r28, 0x92	; 146
    372c:	de 4f       	sbci	r29, 0xFE	; 254
    372e:	f8 83       	st	Y, r31
    3730:	ce 56       	subi	r28, 0x6E	; 110
    3732:	d1 40       	sbci	r29, 0x01	; 1
    3734:	0c cb       	rjmp	.-2536   	; 0x2d4e <main+0x2d4>
				if(!strcmp(keypad.get().string,"C")){Menu='1';cal='0';keypad.flush();lcd0.clear();uart.puts("Clock exit\r\n");break;}
    3736:	f3 01       	movw	r30, r6
    3738:	09 95       	icall
    373a:	6c 96       	adiw	r28, 0x1c	; 28
    373c:	2f af       	std	Y+63, r18	; 0x3f
    373e:	6c 97       	sbiw	r28, 0x1c	; 28
    3740:	6d 96       	adiw	r28, 0x1d	; 29
    3742:	3f af       	std	Y+63, r19	; 0x3f
    3744:	6d 97       	sbiw	r28, 0x1d	; 29
    3746:	6e 96       	adiw	r28, 0x1e	; 30
    3748:	4f af       	std	Y+63, r20	; 0x3f
    374a:	6e 97       	sbiw	r28, 0x1e	; 30
    374c:	6f 96       	adiw	r28, 0x1f	; 31
    374e:	5f af       	std	Y+63, r21	; 0x3f
    3750:	6f 97       	sbiw	r28, 0x1f	; 31
    3752:	a0 96       	adiw	r28, 0x20	; 32
    3754:	6f af       	std	Y+63, r22	; 0x3f
    3756:	a0 97       	sbiw	r28, 0x20	; 32
    3758:	63 e4       	ldi	r22, 0x43	; 67
    375a:	71 e0       	ldi	r23, 0x01	; 1
    375c:	a0 96       	adiw	r28, 0x20	; 32
    375e:	8e ad       	ldd	r24, Y+62	; 0x3e
    3760:	9f ad       	ldd	r25, Y+63	; 0x3f
    3762:	a0 97       	sbiw	r28, 0x20	; 32
    3764:	0e 94 3b 24 	call	0x4876	; 0x4876 <strcmp>
    3768:	89 2b       	or	r24, r25
    376a:	11 f5       	brne	.+68     	; 0x37b0 <main+0xd36>
    376c:	c0 59       	subi	r28, 0x90	; 144
    376e:	de 4f       	sbci	r29, 0xFE	; 254
    3770:	e8 81       	ld	r30, Y
    3772:	f9 81       	ldd	r31, Y+1	; 0x01
    3774:	c0 57       	subi	r28, 0x70	; 112
    3776:	d1 40       	sbci	r29, 0x01	; 1
    3778:	09 95       	icall
    377a:	ce 58       	subi	r28, 0x8E	; 142
    377c:	de 4f       	sbci	r29, 0xFE	; 254
    377e:	e8 81       	ld	r30, Y
    3780:	f9 81       	ldd	r31, Y+1	; 0x01
    3782:	c2 57       	subi	r28, 0x72	; 114
    3784:	d1 40       	sbci	r29, 0x01	; 1
    3786:	09 95       	icall
    3788:	e0 91 e1 04 	lds	r30, 0x04E1	; 0x8004e1 <uart+0xa>
    378c:	f0 91 e2 04 	lds	r31, 0x04E2	; 0x8004e2 <uart+0xb>
    3790:	87 e7       	ldi	r24, 0x77	; 119
    3792:	91 e0       	ldi	r25, 0x01	; 1
    3794:	09 95       	icall
    3796:	f0 e3       	ldi	r31, 0x30	; 48
    3798:	c8 58       	subi	r28, 0x88	; 136
    379a:	de 4f       	sbci	r29, 0xFE	; 254
    379c:	f8 83       	st	Y, r31
    379e:	c8 57       	subi	r28, 0x78	; 120
    37a0:	d1 40       	sbci	r29, 0x01	; 1
    37a2:	21 e3       	ldi	r18, 0x31	; 49
    37a4:	c2 59       	subi	r28, 0x92	; 146
    37a6:	de 4f       	sbci	r29, 0xFE	; 254
    37a8:	28 83       	st	Y, r18
    37aa:	ce 56       	subi	r28, 0x6E	; 110
    37ac:	d1 40       	sbci	r29, 0x01	; 1
    37ae:	cf ca       	rjmp	.-2658   	; 0x2d4e <main+0x2d4>
					/*** Menu to set RTC Time and Date ***/
					lcd0.gotoxy(0,0);
    37b0:	60 e0       	ldi	r22, 0x00	; 0
    37b2:	70 e0       	ldi	r23, 0x00	; 0
    37b4:	80 e0       	ldi	r24, 0x00	; 0
    37b6:	90 e0       	ldi	r25, 0x00	; 0
    37b8:	f4 01       	movw	r30, r8
    37ba:	09 95       	icall
					lcd0.string_size("Date and Time Setup",19);
    37bc:	63 e1       	ldi	r22, 0x13	; 19
    37be:	84 e8       	ldi	r24, 0x84	; 132
    37c0:	91 e0       	ldi	r25, 0x01	; 1
    37c2:	f2 01       	movw	r30, r4
    37c4:	09 95       	icall
					/***Calibrate Menu***/
					switch(cal){
    37c6:	c8 58       	subi	r28, 0x88	; 136
    37c8:	de 4f       	sbci	r29, 0xFE	; 254
    37ca:	f8 81       	ld	r31, Y
    37cc:	c8 57       	subi	r28, 0x78	; 120
    37ce:	d1 40       	sbci	r29, 0x01	; 1
    37d0:	8f 2f       	mov	r24, r31
    37d2:	90 e0       	ldi	r25, 0x00	; 0
    37d4:	fc 01       	movw	r30, r24
    37d6:	f0 97       	sbiw	r30, 0x30	; 48
    37d8:	e7 30       	cpi	r30, 0x07	; 7
    37da:	f1 05       	cpc	r31, r1
    37dc:	08 f0       	brcs	.+2      	; 0x37e0 <main+0xd66>
    37de:	b1 ca       	rjmp	.-2718   	; 0x2d42 <main+0x2c8>
    37e0:	ef 59       	subi	r30, 0x9F	; 159
    37e2:	ff 4f       	sbci	r31, 0xFF	; 255
    37e4:	0c 94 19 24 	jmp	0x4832	; 0x4832 <__tablejump2__>
						case '0': // choice
							lcd0.gotoxy(1,0);
    37e8:	60 e0       	ldi	r22, 0x00	; 0
    37ea:	70 e0       	ldi	r23, 0x00	; 0
    37ec:	81 e0       	ldi	r24, 0x01	; 1
    37ee:	90 e0       	ldi	r25, 0x00	; 0
    37f0:	f4 01       	movw	r30, r8
    37f2:	09 95       	icall
							lcd0.string_size("1-Year",7);
    37f4:	67 e0       	ldi	r22, 0x07	; 7
    37f6:	88 e9       	ldi	r24, 0x98	; 152
    37f8:	91 e0       	ldi	r25, 0x01	; 1
    37fa:	f2 01       	movw	r30, r4
    37fc:	09 95       	icall
							lcd0.string_size("2-Month",8);
    37fe:	68 e0       	ldi	r22, 0x08	; 8
    3800:	8f e9       	ldi	r24, 0x9F	; 159
    3802:	91 e0       	ldi	r25, 0x01	; 1
    3804:	f2 01       	movw	r30, r4
    3806:	09 95       	icall
							lcd0.string_size("3-Day",5);
    3808:	65 e0       	ldi	r22, 0x05	; 5
    380a:	87 ea       	ldi	r24, 0xA7	; 167
    380c:	91 e0       	ldi	r25, 0x01	; 1
    380e:	f2 01       	movw	r30, r4
    3810:	09 95       	icall
							lcd0.gotoxy(2,0);
    3812:	60 e0       	ldi	r22, 0x00	; 0
    3814:	70 e0       	ldi	r23, 0x00	; 0
    3816:	82 e0       	ldi	r24, 0x02	; 2
    3818:	90 e0       	ldi	r25, 0x00	; 0
    381a:	f4 01       	movw	r30, r8
    381c:	09 95       	icall
							lcd0.string_size("4-Hour",7);
    381e:	67 e0       	ldi	r22, 0x07	; 7
    3820:	8d ea       	ldi	r24, 0xAD	; 173
    3822:	91 e0       	ldi	r25, 0x01	; 1
    3824:	f2 01       	movw	r30, r4
    3826:	09 95       	icall
							lcd0.string_size("5-Min",8);
    3828:	68 e0       	ldi	r22, 0x08	; 8
    382a:	84 eb       	ldi	r24, 0xB4	; 180
    382c:	91 e0       	ldi	r25, 0x01	; 1
    382e:	f2 01       	movw	r30, r4
    3830:	09 95       	icall
							lcd0.string_size("6-Sec",5);
    3832:	65 e0       	ldi	r22, 0x05	; 5
    3834:	8a eb       	ldi	r24, 0xBA	; 186
    3836:	91 e0       	ldi	r25, 0x01	; 1
    3838:	f2 01       	movw	r30, r4
    383a:	09 95       	icall
							lcd0.gotoxy(3,0);
    383c:	60 e0       	ldi	r22, 0x00	; 0
    383e:	70 e0       	ldi	r23, 0x00	; 0
    3840:	83 e0       	ldi	r24, 0x03	; 3
    3842:	90 e0       	ldi	r25, 0x00	; 0
    3844:	f4 01       	movw	r30, r8
    3846:	09 95       	icall
							lcd0.string_size("C - exit",8);
    3848:	68 e0       	ldi	r22, 0x08	; 8
    384a:	8e e6       	ldi	r24, 0x6E	; 110
    384c:	91 e0       	ldi	r25, 0x01	; 1
    384e:	f2 01       	movw	r30, r4
    3850:	09 95       	icall
							if(!strcmp(keypad.get().string,"1")){cal='1';keypad.flush();lcd0.clear();}
    3852:	f3 01       	movw	r30, r6
    3854:	09 95       	icall
    3856:	67 96       	adiw	r28, 0x17	; 23
    3858:	2f af       	std	Y+63, r18	; 0x3f
    385a:	67 97       	sbiw	r28, 0x17	; 23
    385c:	68 96       	adiw	r28, 0x18	; 24
    385e:	3f af       	std	Y+63, r19	; 0x3f
    3860:	68 97       	sbiw	r28, 0x18	; 24
    3862:	69 96       	adiw	r28, 0x19	; 25
    3864:	4f af       	std	Y+63, r20	; 0x3f
    3866:	69 97       	sbiw	r28, 0x19	; 25
    3868:	6a 96       	adiw	r28, 0x1a	; 26
    386a:	5f af       	std	Y+63, r21	; 0x3f
    386c:	6a 97       	sbiw	r28, 0x1a	; 26
    386e:	6b 96       	adiw	r28, 0x1b	; 27
    3870:	6f af       	std	Y+63, r22	; 0x3f
    3872:	6b 97       	sbiw	r28, 0x1b	; 27
    3874:	60 ec       	ldi	r22, 0xC0	; 192
    3876:	71 e0       	ldi	r23, 0x01	; 1
    3878:	6b 96       	adiw	r28, 0x1b	; 27
    387a:	8e ad       	ldd	r24, Y+62	; 0x3e
    387c:	9f ad       	ldd	r25, Y+63	; 0x3f
    387e:	6b 97       	sbiw	r28, 0x1b	; 27
    3880:	fa d7       	rcall	.+4084   	; 0x4876 <strcmp>
    3882:	89 2b       	or	r24, r25
    3884:	a1 f4       	brne	.+40     	; 0x38ae <main+0xe34>
    3886:	c0 59       	subi	r28, 0x90	; 144
    3888:	de 4f       	sbci	r29, 0xFE	; 254
    388a:	e8 81       	ld	r30, Y
    388c:	f9 81       	ldd	r31, Y+1	; 0x01
    388e:	c0 57       	subi	r28, 0x70	; 112
    3890:	d1 40       	sbci	r29, 0x01	; 1
    3892:	09 95       	icall
    3894:	ce 58       	subi	r28, 0x8E	; 142
    3896:	de 4f       	sbci	r29, 0xFE	; 254
    3898:	e8 81       	ld	r30, Y
    389a:	f9 81       	ldd	r31, Y+1	; 0x01
    389c:	c2 57       	subi	r28, 0x72	; 114
    389e:	d1 40       	sbci	r29, 0x01	; 1
    38a0:	09 95       	icall
    38a2:	f1 e3       	ldi	r31, 0x31	; 49
    38a4:	c8 58       	subi	r28, 0x88	; 136
    38a6:	de 4f       	sbci	r29, 0xFE	; 254
    38a8:	f8 83       	st	Y, r31
    38aa:	c8 57       	subi	r28, 0x78	; 120
    38ac:	d1 40       	sbci	r29, 0x01	; 1
							if(!strcmp(keypad.get().string,"2")){cal='2';keypad.flush();lcd0.clear();}
    38ae:	f3 01       	movw	r30, r6
    38b0:	09 95       	icall
    38b2:	62 96       	adiw	r28, 0x12	; 18
    38b4:	2f af       	std	Y+63, r18	; 0x3f
    38b6:	62 97       	sbiw	r28, 0x12	; 18
    38b8:	63 96       	adiw	r28, 0x13	; 19
    38ba:	3f af       	std	Y+63, r19	; 0x3f
    38bc:	63 97       	sbiw	r28, 0x13	; 19
    38be:	64 96       	adiw	r28, 0x14	; 20
    38c0:	4f af       	std	Y+63, r20	; 0x3f
    38c2:	64 97       	sbiw	r28, 0x14	; 20
    38c4:	65 96       	adiw	r28, 0x15	; 21
    38c6:	5f af       	std	Y+63, r21	; 0x3f
    38c8:	65 97       	sbiw	r28, 0x15	; 21
    38ca:	66 96       	adiw	r28, 0x16	; 22
    38cc:	6f af       	std	Y+63, r22	; 0x3f
    38ce:	66 97       	sbiw	r28, 0x16	; 22
    38d0:	62 ec       	ldi	r22, 0xC2	; 194
    38d2:	71 e0       	ldi	r23, 0x01	; 1
    38d4:	66 96       	adiw	r28, 0x16	; 22
    38d6:	8e ad       	ldd	r24, Y+62	; 0x3e
    38d8:	9f ad       	ldd	r25, Y+63	; 0x3f
    38da:	66 97       	sbiw	r28, 0x16	; 22
    38dc:	cc d7       	rcall	.+3992   	; 0x4876 <strcmp>
    38de:	89 2b       	or	r24, r25
    38e0:	a1 f4       	brne	.+40     	; 0x390a <main+0xe90>
    38e2:	c0 59       	subi	r28, 0x90	; 144
    38e4:	de 4f       	sbci	r29, 0xFE	; 254
    38e6:	e8 81       	ld	r30, Y
    38e8:	f9 81       	ldd	r31, Y+1	; 0x01
    38ea:	c0 57       	subi	r28, 0x70	; 112
    38ec:	d1 40       	sbci	r29, 0x01	; 1
    38ee:	09 95       	icall
    38f0:	ce 58       	subi	r28, 0x8E	; 142
    38f2:	de 4f       	sbci	r29, 0xFE	; 254
    38f4:	e8 81       	ld	r30, Y
    38f6:	f9 81       	ldd	r31, Y+1	; 0x01
    38f8:	c2 57       	subi	r28, 0x72	; 114
    38fa:	d1 40       	sbci	r29, 0x01	; 1
    38fc:	09 95       	icall
    38fe:	f2 e3       	ldi	r31, 0x32	; 50
    3900:	c8 58       	subi	r28, 0x88	; 136
    3902:	de 4f       	sbci	r29, 0xFE	; 254
    3904:	f8 83       	st	Y, r31
    3906:	c8 57       	subi	r28, 0x78	; 120
    3908:	d1 40       	sbci	r29, 0x01	; 1
							if(!strcmp(keypad.get().string,"3")){cal='3';keypad.flush();lcd0.clear();}
    390a:	f3 01       	movw	r30, r6
    390c:	09 95       	icall
    390e:	2d 96       	adiw	r28, 0x0d	; 13
    3910:	2f af       	std	Y+63, r18	; 0x3f
    3912:	2d 97       	sbiw	r28, 0x0d	; 13
    3914:	2e 96       	adiw	r28, 0x0e	; 14
    3916:	3f af       	std	Y+63, r19	; 0x3f
    3918:	2e 97       	sbiw	r28, 0x0e	; 14
    391a:	2f 96       	adiw	r28, 0x0f	; 15
    391c:	4f af       	std	Y+63, r20	; 0x3f
    391e:	2f 97       	sbiw	r28, 0x0f	; 15
    3920:	60 96       	adiw	r28, 0x10	; 16
    3922:	5f af       	std	Y+63, r21	; 0x3f
    3924:	60 97       	sbiw	r28, 0x10	; 16
    3926:	61 96       	adiw	r28, 0x11	; 17
    3928:	6f af       	std	Y+63, r22	; 0x3f
    392a:	61 97       	sbiw	r28, 0x11	; 17
    392c:	64 ec       	ldi	r22, 0xC4	; 196
    392e:	71 e0       	ldi	r23, 0x01	; 1
    3930:	61 96       	adiw	r28, 0x11	; 17
    3932:	8e ad       	ldd	r24, Y+62	; 0x3e
    3934:	9f ad       	ldd	r25, Y+63	; 0x3f
    3936:	61 97       	sbiw	r28, 0x11	; 17
    3938:	9e d7       	rcall	.+3900   	; 0x4876 <strcmp>
    393a:	89 2b       	or	r24, r25
    393c:	a1 f4       	brne	.+40     	; 0x3966 <main+0xeec>
    393e:	c0 59       	subi	r28, 0x90	; 144
    3940:	de 4f       	sbci	r29, 0xFE	; 254
    3942:	e8 81       	ld	r30, Y
    3944:	f9 81       	ldd	r31, Y+1	; 0x01
    3946:	c0 57       	subi	r28, 0x70	; 112
    3948:	d1 40       	sbci	r29, 0x01	; 1
    394a:	09 95       	icall
    394c:	ce 58       	subi	r28, 0x8E	; 142
    394e:	de 4f       	sbci	r29, 0xFE	; 254
    3950:	e8 81       	ld	r30, Y
    3952:	f9 81       	ldd	r31, Y+1	; 0x01
    3954:	c2 57       	subi	r28, 0x72	; 114
    3956:	d1 40       	sbci	r29, 0x01	; 1
    3958:	09 95       	icall
    395a:	f3 e3       	ldi	r31, 0x33	; 51
    395c:	c8 58       	subi	r28, 0x88	; 136
    395e:	de 4f       	sbci	r29, 0xFE	; 254
    3960:	f8 83       	st	Y, r31
    3962:	c8 57       	subi	r28, 0x78	; 120
    3964:	d1 40       	sbci	r29, 0x01	; 1
							if(!strcmp(keypad.get().string,"4")){cal='4';keypad.flush();lcd0.clear();}
    3966:	f3 01       	movw	r30, r6
    3968:	09 95       	icall
    396a:	28 96       	adiw	r28, 0x08	; 8
    396c:	2f af       	std	Y+63, r18	; 0x3f
    396e:	28 97       	sbiw	r28, 0x08	; 8
    3970:	29 96       	adiw	r28, 0x09	; 9
    3972:	3f af       	std	Y+63, r19	; 0x3f
    3974:	29 97       	sbiw	r28, 0x09	; 9
    3976:	2a 96       	adiw	r28, 0x0a	; 10
    3978:	4f af       	std	Y+63, r20	; 0x3f
    397a:	2a 97       	sbiw	r28, 0x0a	; 10
    397c:	2b 96       	adiw	r28, 0x0b	; 11
    397e:	5f af       	std	Y+63, r21	; 0x3f
    3980:	2b 97       	sbiw	r28, 0x0b	; 11
    3982:	2c 96       	adiw	r28, 0x0c	; 12
    3984:	6f af       	std	Y+63, r22	; 0x3f
    3986:	2c 97       	sbiw	r28, 0x0c	; 12
    3988:	66 ec       	ldi	r22, 0xC6	; 198
    398a:	71 e0       	ldi	r23, 0x01	; 1
    398c:	2c 96       	adiw	r28, 0x0c	; 12
    398e:	8e ad       	ldd	r24, Y+62	; 0x3e
    3990:	9f ad       	ldd	r25, Y+63	; 0x3f
    3992:	2c 97       	sbiw	r28, 0x0c	; 12
    3994:	70 d7       	rcall	.+3808   	; 0x4876 <strcmp>
    3996:	89 2b       	or	r24, r25
    3998:	a1 f4       	brne	.+40     	; 0x39c2 <main+0xf48>
    399a:	c0 59       	subi	r28, 0x90	; 144
    399c:	de 4f       	sbci	r29, 0xFE	; 254
    399e:	e8 81       	ld	r30, Y
    39a0:	f9 81       	ldd	r31, Y+1	; 0x01
    39a2:	c0 57       	subi	r28, 0x70	; 112
    39a4:	d1 40       	sbci	r29, 0x01	; 1
    39a6:	09 95       	icall
    39a8:	ce 58       	subi	r28, 0x8E	; 142
    39aa:	de 4f       	sbci	r29, 0xFE	; 254
    39ac:	e8 81       	ld	r30, Y
    39ae:	f9 81       	ldd	r31, Y+1	; 0x01
    39b0:	c2 57       	subi	r28, 0x72	; 114
    39b2:	d1 40       	sbci	r29, 0x01	; 1
    39b4:	09 95       	icall
    39b6:	f4 e3       	ldi	r31, 0x34	; 52
    39b8:	c8 58       	subi	r28, 0x88	; 136
    39ba:	de 4f       	sbci	r29, 0xFE	; 254
    39bc:	f8 83       	st	Y, r31
    39be:	c8 57       	subi	r28, 0x78	; 120
    39c0:	d1 40       	sbci	r29, 0x01	; 1
							if(!strcmp(keypad.get().string,"5")){cal='5';keypad.flush();lcd0.clear();}
    39c2:	f3 01       	movw	r30, r6
    39c4:	09 95       	icall
    39c6:	23 96       	adiw	r28, 0x03	; 3
    39c8:	2f af       	std	Y+63, r18	; 0x3f
    39ca:	23 97       	sbiw	r28, 0x03	; 3
    39cc:	24 96       	adiw	r28, 0x04	; 4
    39ce:	3f af       	std	Y+63, r19	; 0x3f
    39d0:	24 97       	sbiw	r28, 0x04	; 4
    39d2:	25 96       	adiw	r28, 0x05	; 5
    39d4:	4f af       	std	Y+63, r20	; 0x3f
    39d6:	25 97       	sbiw	r28, 0x05	; 5
    39d8:	26 96       	adiw	r28, 0x06	; 6
    39da:	5f af       	std	Y+63, r21	; 0x3f
    39dc:	26 97       	sbiw	r28, 0x06	; 6
    39de:	27 96       	adiw	r28, 0x07	; 7
    39e0:	6f af       	std	Y+63, r22	; 0x3f
    39e2:	27 97       	sbiw	r28, 0x07	; 7
    39e4:	68 ec       	ldi	r22, 0xC8	; 200
    39e6:	71 e0       	ldi	r23, 0x01	; 1
    39e8:	27 96       	adiw	r28, 0x07	; 7
    39ea:	8e ad       	ldd	r24, Y+62	; 0x3e
    39ec:	9f ad       	ldd	r25, Y+63	; 0x3f
    39ee:	27 97       	sbiw	r28, 0x07	; 7
    39f0:	42 d7       	rcall	.+3716   	; 0x4876 <strcmp>
    39f2:	89 2b       	or	r24, r25
    39f4:	a1 f4       	brne	.+40     	; 0x3a1e <main+0xfa4>
    39f6:	c0 59       	subi	r28, 0x90	; 144
    39f8:	de 4f       	sbci	r29, 0xFE	; 254
    39fa:	e8 81       	ld	r30, Y
    39fc:	f9 81       	ldd	r31, Y+1	; 0x01
    39fe:	c0 57       	subi	r28, 0x70	; 112
    3a00:	d1 40       	sbci	r29, 0x01	; 1
    3a02:	09 95       	icall
    3a04:	ce 58       	subi	r28, 0x8E	; 142
    3a06:	de 4f       	sbci	r29, 0xFE	; 254
    3a08:	e8 81       	ld	r30, Y
    3a0a:	f9 81       	ldd	r31, Y+1	; 0x01
    3a0c:	c2 57       	subi	r28, 0x72	; 114
    3a0e:	d1 40       	sbci	r29, 0x01	; 1
    3a10:	09 95       	icall
    3a12:	f5 e3       	ldi	r31, 0x35	; 53
    3a14:	c8 58       	subi	r28, 0x88	; 136
    3a16:	de 4f       	sbci	r29, 0xFE	; 254
    3a18:	f8 83       	st	Y, r31
    3a1a:	c8 57       	subi	r28, 0x78	; 120
    3a1c:	d1 40       	sbci	r29, 0x01	; 1
							if(!strcmp(keypad.get().string,"6")){cal='6';keypad.flush();lcd0.clear();}
    3a1e:	f3 01       	movw	r30, r6
    3a20:	09 95       	icall
    3a22:	2d af       	std	Y+61, r18	; 0x3d
    3a24:	3e af       	std	Y+62, r19	; 0x3e
    3a26:	4f af       	std	Y+63, r20	; 0x3f
    3a28:	21 96       	adiw	r28, 0x01	; 1
    3a2a:	5f af       	std	Y+63, r21	; 0x3f
    3a2c:	21 97       	sbiw	r28, 0x01	; 1
    3a2e:	22 96       	adiw	r28, 0x02	; 2
    3a30:	6f af       	std	Y+63, r22	; 0x3f
    3a32:	22 97       	sbiw	r28, 0x02	; 2
    3a34:	6a ec       	ldi	r22, 0xCA	; 202
    3a36:	71 e0       	ldi	r23, 0x01	; 1
    3a38:	22 96       	adiw	r28, 0x02	; 2
    3a3a:	8e ad       	ldd	r24, Y+62	; 0x3e
    3a3c:	9f ad       	ldd	r25, Y+63	; 0x3f
    3a3e:	22 97       	sbiw	r28, 0x02	; 2
    3a40:	1a d7       	rcall	.+3636   	; 0x4876 <strcmp>
    3a42:	89 2b       	or	r24, r25
    3a44:	09 f0       	breq	.+2      	; 0x3a48 <main+0xfce>
    3a46:	83 c9       	rjmp	.-3322   	; 0x2d4e <main+0x2d4>
    3a48:	c0 59       	subi	r28, 0x90	; 144
    3a4a:	de 4f       	sbci	r29, 0xFE	; 254
    3a4c:	e8 81       	ld	r30, Y
    3a4e:	f9 81       	ldd	r31, Y+1	; 0x01
    3a50:	c0 57       	subi	r28, 0x70	; 112
    3a52:	d1 40       	sbci	r29, 0x01	; 1
    3a54:	09 95       	icall
    3a56:	ce 58       	subi	r28, 0x8E	; 142
    3a58:	de 4f       	sbci	r29, 0xFE	; 254
    3a5a:	e8 81       	ld	r30, Y
    3a5c:	f9 81       	ldd	r31, Y+1	; 0x01
    3a5e:	c2 57       	subi	r28, 0x72	; 114
    3a60:	d1 40       	sbci	r29, 0x01	; 1
    3a62:	09 95       	icall
    3a64:	f6 e3       	ldi	r31, 0x36	; 54
    3a66:	c8 58       	subi	r28, 0x88	; 136
    3a68:	de 4f       	sbci	r29, 0xFE	; 254
    3a6a:	f8 83       	st	Y, r31
    3a6c:	c8 57       	subi	r28, 0x78	; 120
    3a6e:	d1 40       	sbci	r29, 0x01	; 1
    3a70:	6e c9       	rjmp	.-3364   	; 0x2d4e <main+0x2d4>
							//if(keypad.get().character=='1'){cal='1';keypad.flush();lcd0.clear();}
							break;
						/********************************************************************/
						case '1': // YEAR
							lcd0.gotoxy(1,0);
    3a72:	60 e0       	ldi	r22, 0x00	; 0
    3a74:	70 e0       	ldi	r23, 0x00	; 0
    3a76:	81 e0       	ldi	r24, 0x01	; 1
    3a78:	90 e0       	ldi	r25, 0x00	; 0
    3a7a:	f4 01       	movw	r30, r8
    3a7c:	09 95       	icall
							lcd0.string_size("Enter Year:",11);
    3a7e:	6b e0       	ldi	r22, 0x0B	; 11
    3a80:	8c ec       	ldi	r24, 0xCC	; 204
    3a82:	91 e0       	ldi	r25, 0x01	; 1
    3a84:	f2 01       	movw	r30, r4
    3a86:	09 95       	icall
							lcd0.gotoxy(3,0);
    3a88:	60 e0       	ldi	r22, 0x00	; 0
    3a8a:	70 e0       	ldi	r23, 0x00	; 0
    3a8c:	83 e0       	ldi	r24, 0x03	; 3
    3a8e:	90 e0       	ldi	r25, 0x00	; 0
    3a90:	f4 01       	movw	r30, r8
    3a92:	09 95       	icall
							lcd0.string_size("C - exit",8);	
    3a94:	68 e0       	ldi	r22, 0x08	; 8
    3a96:	8e e6       	ldi	r24, 0x6E	; 110
    3a98:	91 e0       	ldi	r25, 0x01	; 1
    3a9a:	f2 01       	movw	r30, r4
    3a9c:	09 95       	icall
							/***YEAR***/
							if(keypad.get().character==KEYPADENTERKEY){
    3a9e:	f3 01       	movw	r30, r6
    3aa0:	09 95       	icall
    3aa2:	28 af       	std	Y+56, r18	; 0x38
    3aa4:	39 af       	std	Y+57, r19	; 0x39
    3aa6:	4a af       	std	Y+58, r20	; 0x3a
    3aa8:	5b af       	std	Y+59, r21	; 0x3b
    3aaa:	6c af       	std	Y+60, r22	; 0x3c
    3aac:	24 34       	cpi	r18, 0x44	; 68
    3aae:	09 f0       	breq	.+2      	; 0x3ab2 <main+0x1038>
    3ab0:	4e c9       	rjmp	.-3428   	; 0x2d4e <main+0x2d4>
								strcpy(tstr,keypad.get().string);
    3ab2:	f3 01       	movw	r30, r6
    3ab4:	09 95       	icall
    3ab6:	2b ab       	std	Y+51, r18	; 0x33
    3ab8:	3c ab       	std	Y+52, r19	; 0x34
    3aba:	4d ab       	std	Y+53, r20	; 0x35
    3abc:	5e ab       	std	Y+54, r21	; 0x36
    3abe:	6f ab       	std	Y+55, r22	; 0x37
    3ac0:	6e a9       	ldd	r22, Y+54	; 0x36
    3ac2:	7f a9       	ldd	r23, Y+55	; 0x37
    3ac4:	ce 01       	movw	r24, r28
    3ac6:	84 52       	subi	r24, 0x24	; 36
    3ac8:	9f 4f       	sbci	r25, 0xFF	; 255
    3aca:	de d6       	rcall	.+3516   	; 0x4888 <strcpy>
								set=function.strToInt(tstr);
    3acc:	e0 91 94 04 	lds	r30, 0x0494	; 0x800494 <function+0x2c>
    3ad0:	f0 91 95 04 	lds	r31, 0x0495	; 0x800495 <function+0x2d>
    3ad4:	ce 01       	movw	r24, r28
    3ad6:	84 52       	subi	r24, 0x24	; 36
    3ad8:	9f 4f       	sbci	r25, 0xFF	; 255
    3ada:	09 95       	icall
								if(set >=0 && set <100){
    3adc:	84 36       	cpi	r24, 0x64	; 100
    3ade:	91 05       	cpc	r25, r1
    3ae0:	88 f4       	brcc	.+34     	; 0x3b04 <main+0x108a>
									rtc.SetYear(rtc.bintobcd(set));
    3ae2:	e7 eb       	ldi	r30, 0xB7	; 183
    3ae4:	f4 e0       	ldi	r31, 0x04	; 4
    3ae6:	02 89       	ldd	r16, Z+18	; 0x12
    3ae8:	13 89       	ldd	r17, Z+19	; 0x13
    3aea:	02 8c       	ldd	r0, Z+26	; 0x1a
    3aec:	f3 8d       	ldd	r31, Z+27	; 0x1b
    3aee:	e0 2d       	mov	r30, r0
    3af0:	09 95       	icall
    3af2:	f8 01       	movw	r30, r16
    3af4:	09 95       	icall
									cal='0';
    3af6:	f0 e3       	ldi	r31, 0x30	; 48
    3af8:	c8 58       	subi	r28, 0x88	; 136
    3afa:	de 4f       	sbci	r29, 0xFE	; 254
    3afc:	f8 83       	st	Y, r31
    3afe:	c8 57       	subi	r28, 0x78	; 120
    3b00:	d1 40       	sbci	r29, 0x01	; 1
    3b02:	10 c0       	rjmp	.+32     	; 0x3b24 <main+0x10aa>
									}else{
									strcpy(tstr,"err");
    3b04:	85 e6       	ldi	r24, 0x65	; 101
    3b06:	92 e7       	ldi	r25, 0x72	; 114
    3b08:	c4 52       	subi	r28, 0x24	; 36
    3b0a:	df 4f       	sbci	r29, 0xFF	; 255
    3b0c:	99 83       	std	Y+1, r25	; 0x01
    3b0e:	88 83       	st	Y, r24
    3b10:	cc 5d       	subi	r28, 0xDC	; 220
    3b12:	d0 40       	sbci	r29, 0x00	; 0
    3b14:	82 e7       	ldi	r24, 0x72	; 114
    3b16:	90 e0       	ldi	r25, 0x00	; 0
    3b18:	c2 52       	subi	r28, 0x22	; 34
    3b1a:	df 4f       	sbci	r29, 0xFF	; 255
    3b1c:	99 83       	std	Y+1, r25	; 0x01
    3b1e:	88 83       	st	Y, r24
    3b20:	ce 5d       	subi	r28, 0xDE	; 222
    3b22:	d0 40       	sbci	r29, 0x00	; 0
								}
								keypad.flush();
    3b24:	c0 59       	subi	r28, 0x90	; 144
    3b26:	de 4f       	sbci	r29, 0xFE	; 254
    3b28:	e8 81       	ld	r30, Y
    3b2a:	f9 81       	ldd	r31, Y+1	; 0x01
    3b2c:	c0 57       	subi	r28, 0x70	; 112
    3b2e:	d1 40       	sbci	r29, 0x01	; 1
    3b30:	09 95       	icall
    3b32:	0d c9       	rjmp	.-3558   	; 0x2d4e <main+0x2d4>
							}
						break;
						/********************************************************************/
						case '2': // MONTH
							lcd0.gotoxy(1,0);
    3b34:	60 e0       	ldi	r22, 0x00	; 0
    3b36:	70 e0       	ldi	r23, 0x00	; 0
    3b38:	81 e0       	ldi	r24, 0x01	; 1
    3b3a:	90 e0       	ldi	r25, 0x00	; 0
    3b3c:	f4 01       	movw	r30, r8
    3b3e:	09 95       	icall
							lcd0.string_size("Enter Month:",12);
    3b40:	6c e0       	ldi	r22, 0x0C	; 12
    3b42:	88 ed       	ldi	r24, 0xD8	; 216
    3b44:	91 e0       	ldi	r25, 0x01	; 1
    3b46:	f2 01       	movw	r30, r4
    3b48:	09 95       	icall
							lcd0.gotoxy(3,0);
    3b4a:	60 e0       	ldi	r22, 0x00	; 0
    3b4c:	70 e0       	ldi	r23, 0x00	; 0
    3b4e:	83 e0       	ldi	r24, 0x03	; 3
    3b50:	90 e0       	ldi	r25, 0x00	; 0
    3b52:	f4 01       	movw	r30, r8
    3b54:	09 95       	icall
							lcd0.string_size("C - exit",8);
    3b56:	68 e0       	ldi	r22, 0x08	; 8
    3b58:	8e e6       	ldi	r24, 0x6E	; 110
    3b5a:	91 e0       	ldi	r25, 0x01	; 1
    3b5c:	f2 01       	movw	r30, r4
    3b5e:	09 95       	icall
							/***MONTH***/
							if(keypad.get().character==KEYPADENTERKEY){
    3b60:	f3 01       	movw	r30, r6
    3b62:	09 95       	icall
    3b64:	2e a7       	std	Y+46, r18	; 0x2e
    3b66:	3f a7       	std	Y+47, r19	; 0x2f
    3b68:	48 ab       	std	Y+48, r20	; 0x30
    3b6a:	59 ab       	std	Y+49, r21	; 0x31
    3b6c:	6a ab       	std	Y+50, r22	; 0x32
    3b6e:	24 34       	cpi	r18, 0x44	; 68
    3b70:	09 f0       	breq	.+2      	; 0x3b74 <main+0x10fa>
    3b72:	ed c8       	rjmp	.-3622   	; 0x2d4e <main+0x2d4>
								strcpy(tstr,keypad.get().string);
    3b74:	f3 01       	movw	r30, r6
    3b76:	09 95       	icall
    3b78:	29 a7       	std	Y+41, r18	; 0x29
    3b7a:	3a a7       	std	Y+42, r19	; 0x2a
    3b7c:	4b a7       	std	Y+43, r20	; 0x2b
    3b7e:	5c a7       	std	Y+44, r21	; 0x2c
    3b80:	6d a7       	std	Y+45, r22	; 0x2d
    3b82:	6c a5       	ldd	r22, Y+44	; 0x2c
    3b84:	7d a5       	ldd	r23, Y+45	; 0x2d
    3b86:	ce 01       	movw	r24, r28
    3b88:	84 52       	subi	r24, 0x24	; 36
    3b8a:	9f 4f       	sbci	r25, 0xFF	; 255
    3b8c:	7d d6       	rcall	.+3322   	; 0x4888 <strcpy>
								set=function.strToInt(tstr);
    3b8e:	e0 91 94 04 	lds	r30, 0x0494	; 0x800494 <function+0x2c>
    3b92:	f0 91 95 04 	lds	r31, 0x0495	; 0x800495 <function+0x2d>
    3b96:	ce 01       	movw	r24, r28
    3b98:	84 52       	subi	r24, 0x24	; 36
    3b9a:	9f 4f       	sbci	r25, 0xFF	; 255
    3b9c:	09 95       	icall
								if(set >=0 && set <13){
    3b9e:	8d 30       	cpi	r24, 0x0D	; 13
    3ba0:	91 05       	cpc	r25, r1
    3ba2:	88 f4       	brcc	.+34     	; 0x3bc6 <main+0x114c>
									rtc.SetMonth(rtc.bintobcd(set));
    3ba4:	e7 eb       	ldi	r30, 0xB7	; 183
    3ba6:	f4 e0       	ldi	r31, 0x04	; 4
    3ba8:	00 89       	ldd	r16, Z+16	; 0x10
    3baa:	11 89       	ldd	r17, Z+17	; 0x11
    3bac:	02 8c       	ldd	r0, Z+26	; 0x1a
    3bae:	f3 8d       	ldd	r31, Z+27	; 0x1b
    3bb0:	e0 2d       	mov	r30, r0
    3bb2:	09 95       	icall
    3bb4:	f8 01       	movw	r30, r16
    3bb6:	09 95       	icall
									cal='0';
    3bb8:	f0 e3       	ldi	r31, 0x30	; 48
    3bba:	c8 58       	subi	r28, 0x88	; 136
    3bbc:	de 4f       	sbci	r29, 0xFE	; 254
    3bbe:	f8 83       	st	Y, r31
    3bc0:	c8 57       	subi	r28, 0x78	; 120
    3bc2:	d1 40       	sbci	r29, 0x01	; 1
    3bc4:	10 c0       	rjmp	.+32     	; 0x3be6 <main+0x116c>
								}else{
									strcpy(tstr,"err");
    3bc6:	85 e6       	ldi	r24, 0x65	; 101
    3bc8:	92 e7       	ldi	r25, 0x72	; 114
    3bca:	c4 52       	subi	r28, 0x24	; 36
    3bcc:	df 4f       	sbci	r29, 0xFF	; 255
    3bce:	99 83       	std	Y+1, r25	; 0x01
    3bd0:	88 83       	st	Y, r24
    3bd2:	cc 5d       	subi	r28, 0xDC	; 220
    3bd4:	d0 40       	sbci	r29, 0x00	; 0
    3bd6:	82 e7       	ldi	r24, 0x72	; 114
    3bd8:	90 e0       	ldi	r25, 0x00	; 0
    3bda:	c2 52       	subi	r28, 0x22	; 34
    3bdc:	df 4f       	sbci	r29, 0xFF	; 255
    3bde:	99 83       	std	Y+1, r25	; 0x01
    3be0:	88 83       	st	Y, r24
    3be2:	ce 5d       	subi	r28, 0xDE	; 222
    3be4:	d0 40       	sbci	r29, 0x00	; 0
								}
								keypad.flush();
    3be6:	c0 59       	subi	r28, 0x90	; 144
    3be8:	de 4f       	sbci	r29, 0xFE	; 254
    3bea:	e8 81       	ld	r30, Y
    3bec:	f9 81       	ldd	r31, Y+1	; 0x01
    3bee:	c0 57       	subi	r28, 0x70	; 112
    3bf0:	d1 40       	sbci	r29, 0x01	; 1
    3bf2:	09 95       	icall
    3bf4:	ac c8       	rjmp	.-3752   	; 0x2d4e <main+0x2d4>
							}
							break;
						/********************************************************************/
						case '3': // DAY
							lcd0.gotoxy(1,0);
    3bf6:	60 e0       	ldi	r22, 0x00	; 0
    3bf8:	70 e0       	ldi	r23, 0x00	; 0
    3bfa:	81 e0       	ldi	r24, 0x01	; 1
    3bfc:	90 e0       	ldi	r25, 0x00	; 0
    3bfe:	f4 01       	movw	r30, r8
    3c00:	09 95       	icall
							lcd0.string_size("Enter Day:",10);
    3c02:	6a e0       	ldi	r22, 0x0A	; 10
    3c04:	85 ee       	ldi	r24, 0xE5	; 229
    3c06:	91 e0       	ldi	r25, 0x01	; 1
    3c08:	f2 01       	movw	r30, r4
    3c0a:	09 95       	icall
							lcd0.gotoxy(3,0);
    3c0c:	60 e0       	ldi	r22, 0x00	; 0
    3c0e:	70 e0       	ldi	r23, 0x00	; 0
    3c10:	83 e0       	ldi	r24, 0x03	; 3
    3c12:	90 e0       	ldi	r25, 0x00	; 0
    3c14:	f4 01       	movw	r30, r8
    3c16:	09 95       	icall
							lcd0.string_size("C - exit",8);
    3c18:	68 e0       	ldi	r22, 0x08	; 8
    3c1a:	8e e6       	ldi	r24, 0x6E	; 110
    3c1c:	91 e0       	ldi	r25, 0x01	; 1
    3c1e:	f2 01       	movw	r30, r4
    3c20:	09 95       	icall
							/***DAY***/
							if(keypad.get().character==KEYPADENTERKEY){
    3c22:	f3 01       	movw	r30, r6
    3c24:	09 95       	icall
    3c26:	2c a3       	std	Y+36, r18	; 0x24
    3c28:	3d a3       	std	Y+37, r19	; 0x25
    3c2a:	4e a3       	std	Y+38, r20	; 0x26
    3c2c:	5f a3       	std	Y+39, r21	; 0x27
    3c2e:	68 a7       	std	Y+40, r22	; 0x28
    3c30:	24 34       	cpi	r18, 0x44	; 68
    3c32:	09 f0       	breq	.+2      	; 0x3c36 <main+0x11bc>
    3c34:	8c c8       	rjmp	.-3816   	; 0x2d4e <main+0x2d4>
								strcpy(tstr,keypad.get().string);
    3c36:	f3 01       	movw	r30, r6
    3c38:	09 95       	icall
    3c3a:	2f 8f       	std	Y+31, r18	; 0x1f
    3c3c:	38 a3       	std	Y+32, r19	; 0x20
    3c3e:	49 a3       	std	Y+33, r20	; 0x21
    3c40:	5a a3       	std	Y+34, r21	; 0x22
    3c42:	6b a3       	std	Y+35, r22	; 0x23
    3c44:	6a a1       	ldd	r22, Y+34	; 0x22
    3c46:	7b a1       	ldd	r23, Y+35	; 0x23
    3c48:	ce 01       	movw	r24, r28
    3c4a:	84 52       	subi	r24, 0x24	; 36
    3c4c:	9f 4f       	sbci	r25, 0xFF	; 255
    3c4e:	1c d6       	rcall	.+3128   	; 0x4888 <strcpy>
								set=function.strToInt(tstr);
    3c50:	e0 91 94 04 	lds	r30, 0x0494	; 0x800494 <function+0x2c>
    3c54:	f0 91 95 04 	lds	r31, 0x0495	; 0x800495 <function+0x2d>
    3c58:	ce 01       	movw	r24, r28
    3c5a:	84 52       	subi	r24, 0x24	; 36
    3c5c:	9f 4f       	sbci	r25, 0xFF	; 255
    3c5e:	09 95       	icall
								if(set >=0 && set <32){
    3c60:	80 32       	cpi	r24, 0x20	; 32
    3c62:	91 05       	cpc	r25, r1
    3c64:	88 f4       	brcc	.+34     	; 0x3c88 <main+0x120e>
									rtc.SetDay(rtc.bintobcd(set));
    3c66:	e7 eb       	ldi	r30, 0xB7	; 183
    3c68:	f4 e0       	ldi	r31, 0x04	; 4
    3c6a:	04 85       	ldd	r16, Z+12	; 0x0c
    3c6c:	15 85       	ldd	r17, Z+13	; 0x0d
    3c6e:	02 8c       	ldd	r0, Z+26	; 0x1a
    3c70:	f3 8d       	ldd	r31, Z+27	; 0x1b
    3c72:	e0 2d       	mov	r30, r0
    3c74:	09 95       	icall
    3c76:	f8 01       	movw	r30, r16
    3c78:	09 95       	icall
									cal='0';
    3c7a:	f0 e3       	ldi	r31, 0x30	; 48
    3c7c:	c8 58       	subi	r28, 0x88	; 136
    3c7e:	de 4f       	sbci	r29, 0xFE	; 254
    3c80:	f8 83       	st	Y, r31
    3c82:	c8 57       	subi	r28, 0x78	; 120
    3c84:	d1 40       	sbci	r29, 0x01	; 1
    3c86:	10 c0       	rjmp	.+32     	; 0x3ca8 <main+0x122e>
								}else{
									strcpy(tstr,"err");
    3c88:	85 e6       	ldi	r24, 0x65	; 101
    3c8a:	92 e7       	ldi	r25, 0x72	; 114
    3c8c:	c4 52       	subi	r28, 0x24	; 36
    3c8e:	df 4f       	sbci	r29, 0xFF	; 255
    3c90:	99 83       	std	Y+1, r25	; 0x01
    3c92:	88 83       	st	Y, r24
    3c94:	cc 5d       	subi	r28, 0xDC	; 220
    3c96:	d0 40       	sbci	r29, 0x00	; 0
    3c98:	82 e7       	ldi	r24, 0x72	; 114
    3c9a:	90 e0       	ldi	r25, 0x00	; 0
    3c9c:	c2 52       	subi	r28, 0x22	; 34
    3c9e:	df 4f       	sbci	r29, 0xFF	; 255
    3ca0:	99 83       	std	Y+1, r25	; 0x01
    3ca2:	88 83       	st	Y, r24
    3ca4:	ce 5d       	subi	r28, 0xDE	; 222
    3ca6:	d0 40       	sbci	r29, 0x00	; 0
								}
								keypad.flush();
    3ca8:	c0 59       	subi	r28, 0x90	; 144
    3caa:	de 4f       	sbci	r29, 0xFE	; 254
    3cac:	e8 81       	ld	r30, Y
    3cae:	f9 81       	ldd	r31, Y+1	; 0x01
    3cb0:	c0 57       	subi	r28, 0x70	; 112
    3cb2:	d1 40       	sbci	r29, 0x01	; 1
    3cb4:	09 95       	icall
    3cb6:	4b c8       	rjmp	.-3946   	; 0x2d4e <main+0x2d4>
							}
						break;
						/********************************************************************/
						case '4': // HOUR
							lcd0.gotoxy(1,0);
    3cb8:	60 e0       	ldi	r22, 0x00	; 0
    3cba:	70 e0       	ldi	r23, 0x00	; 0
    3cbc:	81 e0       	ldi	r24, 0x01	; 1
    3cbe:	90 e0       	ldi	r25, 0x00	; 0
    3cc0:	f4 01       	movw	r30, r8
    3cc2:	09 95       	icall
							lcd0.string_size("Enter Hour:",11);
    3cc4:	6b e0       	ldi	r22, 0x0B	; 11
    3cc6:	80 ef       	ldi	r24, 0xF0	; 240
    3cc8:	91 e0       	ldi	r25, 0x01	; 1
    3cca:	f2 01       	movw	r30, r4
    3ccc:	09 95       	icall
							lcd0.gotoxy(3,0);
    3cce:	60 e0       	ldi	r22, 0x00	; 0
    3cd0:	70 e0       	ldi	r23, 0x00	; 0
    3cd2:	83 e0       	ldi	r24, 0x03	; 3
    3cd4:	90 e0       	ldi	r25, 0x00	; 0
    3cd6:	f4 01       	movw	r30, r8
    3cd8:	09 95       	icall
							lcd0.string_size("C - exit",8);
    3cda:	68 e0       	ldi	r22, 0x08	; 8
    3cdc:	8e e6       	ldi	r24, 0x6E	; 110
    3cde:	91 e0       	ldi	r25, 0x01	; 1
    3ce0:	f2 01       	movw	r30, r4
    3ce2:	09 95       	icall
							/***HOUR***/
							if(keypad.get().character==KEYPADENTERKEY){
    3ce4:	f3 01       	movw	r30, r6
    3ce6:	09 95       	icall
    3ce8:	2a 8f       	std	Y+26, r18	; 0x1a
    3cea:	3b 8f       	std	Y+27, r19	; 0x1b
    3cec:	4c 8f       	std	Y+28, r20	; 0x1c
    3cee:	5d 8f       	std	Y+29, r21	; 0x1d
    3cf0:	6e 8f       	std	Y+30, r22	; 0x1e
    3cf2:	24 34       	cpi	r18, 0x44	; 68
    3cf4:	09 f0       	breq	.+2      	; 0x3cf8 <main+0x127e>
    3cf6:	2b c8       	rjmp	.-4010   	; 0x2d4e <main+0x2d4>
								strcpy(tstr,keypad.get().string);
    3cf8:	f3 01       	movw	r30, r6
    3cfa:	09 95       	icall
    3cfc:	2d 8b       	std	Y+21, r18	; 0x15
    3cfe:	3e 8b       	std	Y+22, r19	; 0x16
    3d00:	4f 8b       	std	Y+23, r20	; 0x17
    3d02:	58 8f       	std	Y+24, r21	; 0x18
    3d04:	69 8f       	std	Y+25, r22	; 0x19
    3d06:	68 8d       	ldd	r22, Y+24	; 0x18
    3d08:	79 8d       	ldd	r23, Y+25	; 0x19
    3d0a:	ce 01       	movw	r24, r28
    3d0c:	84 52       	subi	r24, 0x24	; 36
    3d0e:	9f 4f       	sbci	r25, 0xFF	; 255
    3d10:	bb d5       	rcall	.+2934   	; 0x4888 <strcpy>
								set=function.strToInt(tstr);
    3d12:	e0 91 94 04 	lds	r30, 0x0494	; 0x800494 <function+0x2c>
    3d16:	f0 91 95 04 	lds	r31, 0x0495	; 0x800495 <function+0x2d>
    3d1a:	ce 01       	movw	r24, r28
    3d1c:	84 52       	subi	r24, 0x24	; 36
    3d1e:	9f 4f       	sbci	r25, 0xFF	; 255
    3d20:	09 95       	icall
								if(set >=0 && set <24){
    3d22:	88 31       	cpi	r24, 0x18	; 24
    3d24:	91 05       	cpc	r25, r1
    3d26:	88 f4       	brcc	.+34     	; 0x3d4a <main+0x12d0>
									rtc.SetHour(rtc.bintobcd(set));
    3d28:	e7 eb       	ldi	r30, 0xB7	; 183
    3d2a:	f4 e0       	ldi	r31, 0x04	; 4
    3d2c:	02 81       	ldd	r16, Z+2	; 0x02
    3d2e:	13 81       	ldd	r17, Z+3	; 0x03
    3d30:	02 8c       	ldd	r0, Z+26	; 0x1a
    3d32:	f3 8d       	ldd	r31, Z+27	; 0x1b
    3d34:	e0 2d       	mov	r30, r0
    3d36:	09 95       	icall
    3d38:	f8 01       	movw	r30, r16
    3d3a:	09 95       	icall
									cal='0';
    3d3c:	f0 e3       	ldi	r31, 0x30	; 48
    3d3e:	c8 58       	subi	r28, 0x88	; 136
    3d40:	de 4f       	sbci	r29, 0xFE	; 254
    3d42:	f8 83       	st	Y, r31
    3d44:	c8 57       	subi	r28, 0x78	; 120
    3d46:	d1 40       	sbci	r29, 0x01	; 1
    3d48:	10 c0       	rjmp	.+32     	; 0x3d6a <main+0x12f0>
								}else{
									strcpy(tstr,"err");
    3d4a:	85 e6       	ldi	r24, 0x65	; 101
    3d4c:	92 e7       	ldi	r25, 0x72	; 114
    3d4e:	c4 52       	subi	r28, 0x24	; 36
    3d50:	df 4f       	sbci	r29, 0xFF	; 255
    3d52:	99 83       	std	Y+1, r25	; 0x01
    3d54:	88 83       	st	Y, r24
    3d56:	cc 5d       	subi	r28, 0xDC	; 220
    3d58:	d0 40       	sbci	r29, 0x00	; 0
    3d5a:	82 e7       	ldi	r24, 0x72	; 114
    3d5c:	90 e0       	ldi	r25, 0x00	; 0
    3d5e:	c2 52       	subi	r28, 0x22	; 34
    3d60:	df 4f       	sbci	r29, 0xFF	; 255
    3d62:	99 83       	std	Y+1, r25	; 0x01
    3d64:	88 83       	st	Y, r24
    3d66:	ce 5d       	subi	r28, 0xDE	; 222
    3d68:	d0 40       	sbci	r29, 0x00	; 0
								}
								keypad.flush();
    3d6a:	c0 59       	subi	r28, 0x90	; 144
    3d6c:	de 4f       	sbci	r29, 0xFE	; 254
    3d6e:	e8 81       	ld	r30, Y
    3d70:	f9 81       	ldd	r31, Y+1	; 0x01
    3d72:	c0 57       	subi	r28, 0x70	; 112
    3d74:	d1 40       	sbci	r29, 0x01	; 1
    3d76:	09 95       	icall
    3d78:	0c 94 a7 16 	jmp	0x2d4e	; 0x2d4e <main+0x2d4>
							}
						break;
						/********************************************************************/
						case '5': // MINUTE
							lcd0.gotoxy(1,0);
    3d7c:	60 e0       	ldi	r22, 0x00	; 0
    3d7e:	70 e0       	ldi	r23, 0x00	; 0
    3d80:	81 e0       	ldi	r24, 0x01	; 1
    3d82:	90 e0       	ldi	r25, 0x00	; 0
    3d84:	f4 01       	movw	r30, r8
    3d86:	09 95       	icall
							lcd0.string_size("Enter Minutes:",13);
    3d88:	6d e0       	ldi	r22, 0x0D	; 13
    3d8a:	8c ef       	ldi	r24, 0xFC	; 252
    3d8c:	91 e0       	ldi	r25, 0x01	; 1
    3d8e:	f2 01       	movw	r30, r4
    3d90:	09 95       	icall
							lcd0.gotoxy(3,0);
    3d92:	60 e0       	ldi	r22, 0x00	; 0
    3d94:	70 e0       	ldi	r23, 0x00	; 0
    3d96:	83 e0       	ldi	r24, 0x03	; 3
    3d98:	90 e0       	ldi	r25, 0x00	; 0
    3d9a:	f4 01       	movw	r30, r8
    3d9c:	09 95       	icall
							lcd0.string_size("C - exit",8);
    3d9e:	68 e0       	ldi	r22, 0x08	; 8
    3da0:	8e e6       	ldi	r24, 0x6E	; 110
    3da2:	91 e0       	ldi	r25, 0x01	; 1
    3da4:	f2 01       	movw	r30, r4
    3da6:	09 95       	icall
							/***MINUTE***/
							if(keypad.get().character==KEYPADENTERKEY){
    3da8:	f3 01       	movw	r30, r6
    3daa:	09 95       	icall
    3dac:	28 8b       	std	Y+16, r18	; 0x10
    3dae:	39 8b       	std	Y+17, r19	; 0x11
    3db0:	4a 8b       	std	Y+18, r20	; 0x12
    3db2:	5b 8b       	std	Y+19, r21	; 0x13
    3db4:	6c 8b       	std	Y+20, r22	; 0x14
    3db6:	24 34       	cpi	r18, 0x44	; 68
    3db8:	11 f0       	breq	.+4      	; 0x3dbe <main+0x1344>
    3dba:	0c 94 a7 16 	jmp	0x2d4e	; 0x2d4e <main+0x2d4>
								strcpy(tstr,keypad.get().string);
    3dbe:	f3 01       	movw	r30, r6
    3dc0:	09 95       	icall
    3dc2:	2b 87       	std	Y+11, r18	; 0x0b
    3dc4:	3c 87       	std	Y+12, r19	; 0x0c
    3dc6:	4d 87       	std	Y+13, r20	; 0x0d
    3dc8:	5e 87       	std	Y+14, r21	; 0x0e
    3dca:	6f 87       	std	Y+15, r22	; 0x0f
    3dcc:	6e 85       	ldd	r22, Y+14	; 0x0e
    3dce:	7f 85       	ldd	r23, Y+15	; 0x0f
    3dd0:	ce 01       	movw	r24, r28
    3dd2:	84 52       	subi	r24, 0x24	; 36
    3dd4:	9f 4f       	sbci	r25, 0xFF	; 255
    3dd6:	58 d5       	rcall	.+2736   	; 0x4888 <strcpy>
								set=function.strToInt(tstr);
    3dd8:	e0 91 94 04 	lds	r30, 0x0494	; 0x800494 <function+0x2c>
    3ddc:	f0 91 95 04 	lds	r31, 0x0495	; 0x800495 <function+0x2d>
    3de0:	ce 01       	movw	r24, r28
    3de2:	84 52       	subi	r24, 0x24	; 36
    3de4:	9f 4f       	sbci	r25, 0xFF	; 255
    3de6:	09 95       	icall
								if(set >=0 && set <60){
    3de8:	8c 33       	cpi	r24, 0x3C	; 60
    3dea:	91 05       	cpc	r25, r1
    3dec:	88 f4       	brcc	.+34     	; 0x3e10 <main+0x1396>
									rtc.SetMinute(rtc.bintobcd(set));
    3dee:	e7 eb       	ldi	r30, 0xB7	; 183
    3df0:	f4 e0       	ldi	r31, 0x04	; 4
    3df2:	04 81       	ldd	r16, Z+4	; 0x04
    3df4:	15 81       	ldd	r17, Z+5	; 0x05
    3df6:	02 8c       	ldd	r0, Z+26	; 0x1a
    3df8:	f3 8d       	ldd	r31, Z+27	; 0x1b
    3dfa:	e0 2d       	mov	r30, r0
    3dfc:	09 95       	icall
    3dfe:	f8 01       	movw	r30, r16
    3e00:	09 95       	icall
									cal='0';
    3e02:	f0 e3       	ldi	r31, 0x30	; 48
    3e04:	c8 58       	subi	r28, 0x88	; 136
    3e06:	de 4f       	sbci	r29, 0xFE	; 254
    3e08:	f8 83       	st	Y, r31
    3e0a:	c8 57       	subi	r28, 0x78	; 120
    3e0c:	d1 40       	sbci	r29, 0x01	; 1
    3e0e:	10 c0       	rjmp	.+32     	; 0x3e30 <main+0x13b6>
								}else{
									strcpy(tstr,"err");
    3e10:	85 e6       	ldi	r24, 0x65	; 101
    3e12:	92 e7       	ldi	r25, 0x72	; 114
    3e14:	c4 52       	subi	r28, 0x24	; 36
    3e16:	df 4f       	sbci	r29, 0xFF	; 255
    3e18:	99 83       	std	Y+1, r25	; 0x01
    3e1a:	88 83       	st	Y, r24
    3e1c:	cc 5d       	subi	r28, 0xDC	; 220
    3e1e:	d0 40       	sbci	r29, 0x00	; 0
    3e20:	82 e7       	ldi	r24, 0x72	; 114
    3e22:	90 e0       	ldi	r25, 0x00	; 0
    3e24:	c2 52       	subi	r28, 0x22	; 34
    3e26:	df 4f       	sbci	r29, 0xFF	; 255
    3e28:	99 83       	std	Y+1, r25	; 0x01
    3e2a:	88 83       	st	Y, r24
    3e2c:	ce 5d       	subi	r28, 0xDE	; 222
    3e2e:	d0 40       	sbci	r29, 0x00	; 0
								}
								keypad.flush();
    3e30:	c0 59       	subi	r28, 0x90	; 144
    3e32:	de 4f       	sbci	r29, 0xFE	; 254
    3e34:	e8 81       	ld	r30, Y
    3e36:	f9 81       	ldd	r31, Y+1	; 0x01
    3e38:	c0 57       	subi	r28, 0x70	; 112
    3e3a:	d1 40       	sbci	r29, 0x01	; 1
    3e3c:	09 95       	icall
    3e3e:	0c 94 a7 16 	jmp	0x2d4e	; 0x2d4e <main+0x2d4>
							}
						break;
						/********************************************************************/
						case '6': // SECOND
							lcd0.gotoxy(1,0);
    3e42:	60 e0       	ldi	r22, 0x00	; 0
    3e44:	70 e0       	ldi	r23, 0x00	; 0
    3e46:	81 e0       	ldi	r24, 0x01	; 1
    3e48:	90 e0       	ldi	r25, 0x00	; 0
    3e4a:	f4 01       	movw	r30, r8
    3e4c:	09 95       	icall
							lcd0.string_size("Enter Seconds:",13);
    3e4e:	6d e0       	ldi	r22, 0x0D	; 13
    3e50:	8b e0       	ldi	r24, 0x0B	; 11
    3e52:	92 e0       	ldi	r25, 0x02	; 2
    3e54:	f2 01       	movw	r30, r4
    3e56:	09 95       	icall
							lcd0.gotoxy(3,0);
    3e58:	60 e0       	ldi	r22, 0x00	; 0
    3e5a:	70 e0       	ldi	r23, 0x00	; 0
    3e5c:	83 e0       	ldi	r24, 0x03	; 3
    3e5e:	90 e0       	ldi	r25, 0x00	; 0
    3e60:	f4 01       	movw	r30, r8
    3e62:	09 95       	icall
							lcd0.string_size("C - exit",8);
    3e64:	68 e0       	ldi	r22, 0x08	; 8
    3e66:	8e e6       	ldi	r24, 0x6E	; 110
    3e68:	91 e0       	ldi	r25, 0x01	; 1
    3e6a:	f2 01       	movw	r30, r4
    3e6c:	09 95       	icall
							/***SECOND***/
							if(keypad.get().character==KEYPADENTERKEY){
    3e6e:	f3 01       	movw	r30, r6
    3e70:	09 95       	icall
    3e72:	2e 83       	std	Y+6, r18	; 0x06
    3e74:	3f 83       	std	Y+7, r19	; 0x07
    3e76:	48 87       	std	Y+8, r20	; 0x08
    3e78:	59 87       	std	Y+9, r21	; 0x09
    3e7a:	6a 87       	std	Y+10, r22	; 0x0a
    3e7c:	24 34       	cpi	r18, 0x44	; 68
    3e7e:	11 f0       	breq	.+4      	; 0x3e84 <main+0x140a>
    3e80:	0c 94 a7 16 	jmp	0x2d4e	; 0x2d4e <main+0x2d4>
								strcpy(tstr,keypad.get().string);
    3e84:	f3 01       	movw	r30, r6
    3e86:	09 95       	icall
    3e88:	29 83       	std	Y+1, r18	; 0x01
    3e8a:	3a 83       	std	Y+2, r19	; 0x02
    3e8c:	4b 83       	std	Y+3, r20	; 0x03
    3e8e:	5c 83       	std	Y+4, r21	; 0x04
    3e90:	6d 83       	std	Y+5, r22	; 0x05
    3e92:	6c 81       	ldd	r22, Y+4	; 0x04
    3e94:	7d 81       	ldd	r23, Y+5	; 0x05
    3e96:	ce 01       	movw	r24, r28
    3e98:	84 52       	subi	r24, 0x24	; 36
    3e9a:	9f 4f       	sbci	r25, 0xFF	; 255
    3e9c:	f5 d4       	rcall	.+2538   	; 0x4888 <strcpy>
								set=function.strToInt(tstr);
    3e9e:	e0 91 94 04 	lds	r30, 0x0494	; 0x800494 <function+0x2c>
    3ea2:	f0 91 95 04 	lds	r31, 0x0495	; 0x800495 <function+0x2d>
    3ea6:	ce 01       	movw	r24, r28
    3ea8:	84 52       	subi	r24, 0x24	; 36
    3eaa:	9f 4f       	sbci	r25, 0xFF	; 255
    3eac:	09 95       	icall
								if(set >=0 && set <60){
    3eae:	8c 33       	cpi	r24, 0x3C	; 60
    3eb0:	91 05       	cpc	r25, r1
    3eb2:	88 f4       	brcc	.+34     	; 0x3ed6 <main+0x145c>
									rtc.SetSecond(rtc.bintobcd(set));
    3eb4:	e7 eb       	ldi	r30, 0xB7	; 183
    3eb6:	f4 e0       	ldi	r31, 0x04	; 4
    3eb8:	06 81       	ldd	r16, Z+6	; 0x06
    3eba:	17 81       	ldd	r17, Z+7	; 0x07
    3ebc:	02 8c       	ldd	r0, Z+26	; 0x1a
    3ebe:	f3 8d       	ldd	r31, Z+27	; 0x1b
    3ec0:	e0 2d       	mov	r30, r0
    3ec2:	09 95       	icall
    3ec4:	f8 01       	movw	r30, r16
    3ec6:	09 95       	icall
									cal='0';
    3ec8:	f0 e3       	ldi	r31, 0x30	; 48
    3eca:	c8 58       	subi	r28, 0x88	; 136
    3ecc:	de 4f       	sbci	r29, 0xFE	; 254
    3ece:	f8 83       	st	Y, r31
    3ed0:	c8 57       	subi	r28, 0x78	; 120
    3ed2:	d1 40       	sbci	r29, 0x01	; 1
    3ed4:	10 c0       	rjmp	.+32     	; 0x3ef6 <main+0x147c>
								}else{
									strcpy(tstr,"err");
    3ed6:	85 e6       	ldi	r24, 0x65	; 101
    3ed8:	92 e7       	ldi	r25, 0x72	; 114
    3eda:	c4 52       	subi	r28, 0x24	; 36
    3edc:	df 4f       	sbci	r29, 0xFF	; 255
    3ede:	99 83       	std	Y+1, r25	; 0x01
    3ee0:	88 83       	st	Y, r24
    3ee2:	cc 5d       	subi	r28, 0xDC	; 220
    3ee4:	d0 40       	sbci	r29, 0x00	; 0
    3ee6:	82 e7       	ldi	r24, 0x72	; 114
    3ee8:	90 e0       	ldi	r25, 0x00	; 0
    3eea:	c2 52       	subi	r28, 0x22	; 34
    3eec:	df 4f       	sbci	r29, 0xFF	; 255
    3eee:	99 83       	std	Y+1, r25	; 0x01
    3ef0:	88 83       	st	Y, r24
    3ef2:	ce 5d       	subi	r28, 0xDE	; 222
    3ef4:	d0 40       	sbci	r29, 0x00	; 0
								}
								keypad.flush();
    3ef6:	c0 59       	subi	r28, 0x90	; 144
    3ef8:	de 4f       	sbci	r29, 0xFE	; 254
    3efa:	e8 81       	ld	r30, Y
    3efc:	f9 81       	ldd	r31, Y+1	; 0x01
    3efe:	c0 57       	subi	r28, 0x70	; 112
    3f00:	d1 40       	sbci	r29, 0x01	; 1
    3f02:	09 95       	icall
    3f04:	0c 94 a7 16 	jmp	0x2d4e	; 0x2d4e <main+0x2d4>
	rtc.SetClkOut(1, 2); // oscillate pin at 1 sec
	/**********/
	//TODO:: Please write your application code
	while(TRUE){
		/***PREAMBLE***/
		lcd0.reboot();
    3f08:	ca 55       	subi	r28, 0x5A	; 90
    3f0a:	df 4f       	sbci	r29, 0xFF	; 255
    3f0c:	e8 81       	ld	r30, Y
    3f0e:	f9 81       	ldd	r31, Y+1	; 0x01
    3f10:	c6 5a       	subi	r28, 0xA6	; 166
    3f12:	d0 40       	sbci	r29, 0x00	; 0
    3f14:	09 95       	icall
		keypad.read();
    3f16:	c6 55       	subi	r28, 0x56	; 86
    3f18:	df 4f       	sbci	r29, 0xFF	; 255
    3f1a:	e8 81       	ld	r30, Y
    3f1c:	f9 81       	ldd	r31, Y+1	; 0x01
    3f1e:	ca 5a       	subi	r28, 0xAA	; 170
    3f20:	d0 40       	sbci	r29, 0x00	; 0
    3f22:	09 95       	icall
		uartreceive=uart.read();
    3f24:	e0 91 db 04 	lds	r30, 0x04DB	; 0x8004db <uart+0x4>
    3f28:	f0 91 dc 04 	lds	r31, 0x04DC	; 0x8004dc <uart+0x5>
    3f2c:	09 95       	icall
    3f2e:	90 93 44 02 	sts	0x0244, r25	; 0x800244 <uartreceive+0x1>
    3f32:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <uartreceive>
		/***Reading input***/
		lcd0.gotoxy(3,13);
    3f36:	6d e0       	ldi	r22, 0x0D	; 13
    3f38:	70 e0       	ldi	r23, 0x00	; 0
    3f3a:	83 e0       	ldi	r24, 0x03	; 3
    3f3c:	90 e0       	ldi	r25, 0x00	; 0
    3f3e:	f4 01       	movw	r30, r8
    3f40:	09 95       	icall
		lcd0.putch(':');
    3f42:	8a e3       	ldi	r24, 0x3A	; 58
    3f44:	f1 01       	movw	r30, r2
    3f46:	09 95       	icall
		lcd0.string_size(keypad.get().printstring,6);
    3f48:	f3 01       	movw	r30, r6
    3f4a:	09 95       	icall
    3f4c:	c3 57       	subi	r28, 0x73	; 115
    3f4e:	df 4f       	sbci	r29, 0xFF	; 255
    3f50:	28 83       	st	Y, r18
    3f52:	cd 58       	subi	r28, 0x8D	; 141
    3f54:	d0 40       	sbci	r29, 0x00	; 0
    3f56:	c2 57       	subi	r28, 0x72	; 114
    3f58:	df 4f       	sbci	r29, 0xFF	; 255
    3f5a:	38 83       	st	Y, r19
    3f5c:	ce 58       	subi	r28, 0x8E	; 142
    3f5e:	d0 40       	sbci	r29, 0x00	; 0
    3f60:	c1 57       	subi	r28, 0x71	; 113
    3f62:	df 4f       	sbci	r29, 0xFF	; 255
    3f64:	48 83       	st	Y, r20
    3f66:	cf 58       	subi	r28, 0x8F	; 143
    3f68:	d0 40       	sbci	r29, 0x00	; 0
    3f6a:	c0 57       	subi	r28, 0x70	; 112
    3f6c:	df 4f       	sbci	r29, 0xFF	; 255
    3f6e:	58 83       	st	Y, r21
    3f70:	c0 59       	subi	r28, 0x90	; 144
    3f72:	d0 40       	sbci	r29, 0x00	; 0
    3f74:	cf 56       	subi	r28, 0x6F	; 111
    3f76:	df 4f       	sbci	r29, 0xFF	; 255
    3f78:	68 83       	st	Y, r22
    3f7a:	c1 59       	subi	r28, 0x91	; 145
    3f7c:	d0 40       	sbci	r29, 0x00	; 0
    3f7e:	66 e0       	ldi	r22, 0x06	; 6
    3f80:	c2 57       	subi	r28, 0x72	; 114
    3f82:	df 4f       	sbci	r29, 0xFF	; 255
    3f84:	88 81       	ld	r24, Y
    3f86:	99 81       	ldd	r25, Y+1	; 0x01
    3f88:	ce 58       	subi	r28, 0x8E	; 142
    3f8a:	d0 40       	sbci	r29, 0x00	; 0
    3f8c:	f2 01       	movw	r30, r4
    3f8e:	09 95       	icall
    3f90:	0c 94 fa 16 	jmp	0x2df4	; 0x2df4 <main+0x37a>

00003f94 <__vector_15>:
}
/*
** interrupt
*/
ISR(TIMER0_COMP_vect) // 1Hz and usart Tx
{
    3f94:	1f 92       	push	r1
    3f96:	0f 92       	push	r0
    3f98:	0f b6       	in	r0, 0x3f	; 63
    3f9a:	0f 92       	push	r0
    3f9c:	11 24       	eor	r1, r1
    3f9e:	0b b6       	in	r0, 0x3b	; 59
    3fa0:	0f 92       	push	r0
    3fa2:	0f 93       	push	r16
    3fa4:	1f 93       	push	r17
    3fa6:	2f 93       	push	r18
    3fa8:	3f 93       	push	r19
    3faa:	4f 93       	push	r20
    3fac:	5f 93       	push	r21
    3fae:	6f 93       	push	r22
    3fb0:	7f 93       	push	r23
    3fb2:	8f 93       	push	r24
    3fb4:	9f 93       	push	r25
    3fb6:	af 93       	push	r26
    3fb8:	bf 93       	push	r27
    3fba:	cf 93       	push	r28
    3fbc:	ef 93       	push	r30
    3fbe:	ff 93       	push	r31
	uint8_t Sreg;
	Sreg=SREG;
    3fc0:	cf b7       	in	r28, 0x3f	; 63
	SREG&=~(1<<7);
    3fc2:	8f b7       	in	r24, 0x3f	; 63
    3fc4:	8f 77       	andi	r24, 0x7F	; 127
    3fc6:	8f bf       	out	0x3f, r24	; 63
	if(count>59){ //59 -> 1Hz
    3fc8:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <count>
    3fcc:	8c 33       	cpi	r24, 0x3C	; 60
    3fce:	38 f1       	brcs	.+78     	; 0x401e <__vector_15+0x8a>
		increment++;
    3fd0:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <increment>
    3fd4:	8f 5f       	subi	r24, 0xFF	; 255
    3fd6:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <increment>
		if((increment & 0x0F) < 8){
    3fda:	8f 70       	andi	r24, 0x0F	; 15
    3fdc:	90 e0       	ldi	r25, 0x00	; 0
    3fde:	08 97       	sbiw	r24, 0x08	; 8
    3fe0:	74 f4       	brge	.+28     	; 0x3ffe <__vector_15+0x6a>
			shift.bit(0);
    3fe2:	02 e6       	ldi	r16, 0x62	; 98
    3fe4:	14 e0       	ldi	r17, 0x04	; 4
    3fe6:	d8 01       	movw	r26, r16
    3fe8:	ed 91       	ld	r30, X+
    3fea:	fc 91       	ld	r31, X
    3fec:	80 e0       	ldi	r24, 0x00	; 0
    3fee:	09 95       	icall
			shift.out();
    3ff0:	d8 01       	movw	r26, r16
    3ff2:	14 96       	adiw	r26, 0x04	; 4
    3ff4:	ed 91       	ld	r30, X+
    3ff6:	fc 91       	ld	r31, X
    3ff8:	15 97       	sbiw	r26, 0x05	; 5
    3ffa:	09 95       	icall
    3ffc:	0d c0       	rjmp	.+26     	; 0x4018 <__vector_15+0x84>
		}else{
			shift.bit(1);
    3ffe:	02 e6       	ldi	r16, 0x62	; 98
    4000:	14 e0       	ldi	r17, 0x04	; 4
    4002:	d8 01       	movw	r26, r16
    4004:	ed 91       	ld	r30, X+
    4006:	fc 91       	ld	r31, X
    4008:	81 e0       	ldi	r24, 0x01	; 1
    400a:	09 95       	icall
			shift.out();
    400c:	d8 01       	movw	r26, r16
    400e:	14 96       	adiw	r26, 0x04	; 4
    4010:	ed 91       	ld	r30, X+
    4012:	fc 91       	ld	r31, X
    4014:	15 97       	sbiw	r26, 0x05	; 5
    4016:	09 95       	icall
		}
		count=0;
    4018:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <count>
    401c:	03 c0       	rjmp	.+6      	; 0x4024 <__vector_15+0x90>
	}else
		count++;
    401e:	8f 5f       	subi	r24, 0xFF	; 255
    4020:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <count>
	SREG=Sreg;
    4024:	cf bf       	out	0x3f, r28	; 63
}
    4026:	ff 91       	pop	r31
    4028:	ef 91       	pop	r30
    402a:	cf 91       	pop	r28
    402c:	bf 91       	pop	r27
    402e:	af 91       	pop	r26
    4030:	9f 91       	pop	r25
    4032:	8f 91       	pop	r24
    4034:	7f 91       	pop	r23
    4036:	6f 91       	pop	r22
    4038:	5f 91       	pop	r21
    403a:	4f 91       	pop	r20
    403c:	3f 91       	pop	r19
    403e:	2f 91       	pop	r18
    4040:	1f 91       	pop	r17
    4042:	0f 91       	pop	r16
    4044:	0f 90       	pop	r0
    4046:	0b be       	out	0x3b, r0	; 59
    4048:	0f 90       	pop	r0
    404a:	0f be       	out	0x3f, r0	; 63
    404c:	0f 90       	pop	r0
    404e:	1f 90       	pop	r1
    4050:	18 95       	reti

00004052 <__subsf3>:
    4052:	50 58       	subi	r21, 0x80	; 128

00004054 <__addsf3>:
    4054:	bb 27       	eor	r27, r27
    4056:	aa 27       	eor	r26, r26
    4058:	0e d0       	rcall	.+28     	; 0x4076 <__addsf3x>
    405a:	0d c1       	rjmp	.+538    	; 0x4276 <__fp_round>
    405c:	fe d0       	rcall	.+508    	; 0x425a <__fp_pscA>
    405e:	30 f0       	brcs	.+12     	; 0x406c <__addsf3+0x18>
    4060:	03 d1       	rcall	.+518    	; 0x4268 <__fp_pscB>
    4062:	20 f0       	brcs	.+8      	; 0x406c <__addsf3+0x18>
    4064:	31 f4       	brne	.+12     	; 0x4072 <__addsf3+0x1e>
    4066:	9f 3f       	cpi	r25, 0xFF	; 255
    4068:	11 f4       	brne	.+4      	; 0x406e <__addsf3+0x1a>
    406a:	1e f4       	brtc	.+6      	; 0x4072 <__addsf3+0x1e>
    406c:	f3 c0       	rjmp	.+486    	; 0x4254 <__fp_nan>
    406e:	0e f4       	brtc	.+2      	; 0x4072 <__addsf3+0x1e>
    4070:	e0 95       	com	r30
    4072:	e7 fb       	bst	r30, 7
    4074:	e9 c0       	rjmp	.+466    	; 0x4248 <__fp_inf>

00004076 <__addsf3x>:
    4076:	e9 2f       	mov	r30, r25
    4078:	0f d1       	rcall	.+542    	; 0x4298 <__fp_split3>
    407a:	80 f3       	brcs	.-32     	; 0x405c <__addsf3+0x8>
    407c:	ba 17       	cp	r27, r26
    407e:	62 07       	cpc	r22, r18
    4080:	73 07       	cpc	r23, r19
    4082:	84 07       	cpc	r24, r20
    4084:	95 07       	cpc	r25, r21
    4086:	18 f0       	brcs	.+6      	; 0x408e <__addsf3x+0x18>
    4088:	71 f4       	brne	.+28     	; 0x40a6 <__addsf3x+0x30>
    408a:	9e f5       	brtc	.+102    	; 0x40f2 <__addsf3x+0x7c>
    408c:	27 c1       	rjmp	.+590    	; 0x42dc <__fp_zero>
    408e:	0e f4       	brtc	.+2      	; 0x4092 <__addsf3x+0x1c>
    4090:	e0 95       	com	r30
    4092:	0b 2e       	mov	r0, r27
    4094:	ba 2f       	mov	r27, r26
    4096:	a0 2d       	mov	r26, r0
    4098:	0b 01       	movw	r0, r22
    409a:	b9 01       	movw	r22, r18
    409c:	90 01       	movw	r18, r0
    409e:	0c 01       	movw	r0, r24
    40a0:	ca 01       	movw	r24, r20
    40a2:	a0 01       	movw	r20, r0
    40a4:	11 24       	eor	r1, r1
    40a6:	ff 27       	eor	r31, r31
    40a8:	59 1b       	sub	r21, r25
    40aa:	99 f0       	breq	.+38     	; 0x40d2 <__addsf3x+0x5c>
    40ac:	59 3f       	cpi	r21, 0xF9	; 249
    40ae:	50 f4       	brcc	.+20     	; 0x40c4 <__addsf3x+0x4e>
    40b0:	50 3e       	cpi	r21, 0xE0	; 224
    40b2:	68 f1       	brcs	.+90     	; 0x410e <__addsf3x+0x98>
    40b4:	1a 16       	cp	r1, r26
    40b6:	f0 40       	sbci	r31, 0x00	; 0
    40b8:	a2 2f       	mov	r26, r18
    40ba:	23 2f       	mov	r18, r19
    40bc:	34 2f       	mov	r19, r20
    40be:	44 27       	eor	r20, r20
    40c0:	58 5f       	subi	r21, 0xF8	; 248
    40c2:	f3 cf       	rjmp	.-26     	; 0x40aa <__addsf3x+0x34>
    40c4:	46 95       	lsr	r20
    40c6:	37 95       	ror	r19
    40c8:	27 95       	ror	r18
    40ca:	a7 95       	ror	r26
    40cc:	f0 40       	sbci	r31, 0x00	; 0
    40ce:	53 95       	inc	r21
    40d0:	c9 f7       	brne	.-14     	; 0x40c4 <__addsf3x+0x4e>
    40d2:	7e f4       	brtc	.+30     	; 0x40f2 <__addsf3x+0x7c>
    40d4:	1f 16       	cp	r1, r31
    40d6:	ba 0b       	sbc	r27, r26
    40d8:	62 0b       	sbc	r22, r18
    40da:	73 0b       	sbc	r23, r19
    40dc:	84 0b       	sbc	r24, r20
    40de:	ba f0       	brmi	.+46     	; 0x410e <__addsf3x+0x98>
    40e0:	91 50       	subi	r25, 0x01	; 1
    40e2:	a1 f0       	breq	.+40     	; 0x410c <__addsf3x+0x96>
    40e4:	ff 0f       	add	r31, r31
    40e6:	bb 1f       	adc	r27, r27
    40e8:	66 1f       	adc	r22, r22
    40ea:	77 1f       	adc	r23, r23
    40ec:	88 1f       	adc	r24, r24
    40ee:	c2 f7       	brpl	.-16     	; 0x40e0 <__addsf3x+0x6a>
    40f0:	0e c0       	rjmp	.+28     	; 0x410e <__addsf3x+0x98>
    40f2:	ba 0f       	add	r27, r26
    40f4:	62 1f       	adc	r22, r18
    40f6:	73 1f       	adc	r23, r19
    40f8:	84 1f       	adc	r24, r20
    40fa:	48 f4       	brcc	.+18     	; 0x410e <__addsf3x+0x98>
    40fc:	87 95       	ror	r24
    40fe:	77 95       	ror	r23
    4100:	67 95       	ror	r22
    4102:	b7 95       	ror	r27
    4104:	f7 95       	ror	r31
    4106:	9e 3f       	cpi	r25, 0xFE	; 254
    4108:	08 f0       	brcs	.+2      	; 0x410c <__addsf3x+0x96>
    410a:	b3 cf       	rjmp	.-154    	; 0x4072 <__addsf3+0x1e>
    410c:	93 95       	inc	r25
    410e:	88 0f       	add	r24, r24
    4110:	08 f0       	brcs	.+2      	; 0x4114 <__addsf3x+0x9e>
    4112:	99 27       	eor	r25, r25
    4114:	ee 0f       	add	r30, r30
    4116:	97 95       	ror	r25
    4118:	87 95       	ror	r24
    411a:	08 95       	ret

0000411c <__cmpsf2>:
    411c:	71 d0       	rcall	.+226    	; 0x4200 <__fp_cmp>
    411e:	08 f4       	brcc	.+2      	; 0x4122 <__cmpsf2+0x6>
    4120:	81 e0       	ldi	r24, 0x01	; 1
    4122:	08 95       	ret

00004124 <__fixsfsi>:
    4124:	04 d0       	rcall	.+8      	; 0x412e <__fixunssfsi>
    4126:	68 94       	set
    4128:	b1 11       	cpse	r27, r1
    412a:	d9 c0       	rjmp	.+434    	; 0x42de <__fp_szero>
    412c:	08 95       	ret

0000412e <__fixunssfsi>:
    412e:	bc d0       	rcall	.+376    	; 0x42a8 <__fp_splitA>
    4130:	88 f0       	brcs	.+34     	; 0x4154 <__fixunssfsi+0x26>
    4132:	9f 57       	subi	r25, 0x7F	; 127
    4134:	90 f0       	brcs	.+36     	; 0x415a <__fixunssfsi+0x2c>
    4136:	b9 2f       	mov	r27, r25
    4138:	99 27       	eor	r25, r25
    413a:	b7 51       	subi	r27, 0x17	; 23
    413c:	a0 f0       	brcs	.+40     	; 0x4166 <__fixunssfsi+0x38>
    413e:	d1 f0       	breq	.+52     	; 0x4174 <__fixunssfsi+0x46>
    4140:	66 0f       	add	r22, r22
    4142:	77 1f       	adc	r23, r23
    4144:	88 1f       	adc	r24, r24
    4146:	99 1f       	adc	r25, r25
    4148:	1a f0       	brmi	.+6      	; 0x4150 <__fixunssfsi+0x22>
    414a:	ba 95       	dec	r27
    414c:	c9 f7       	brne	.-14     	; 0x4140 <__fixunssfsi+0x12>
    414e:	12 c0       	rjmp	.+36     	; 0x4174 <__fixunssfsi+0x46>
    4150:	b1 30       	cpi	r27, 0x01	; 1
    4152:	81 f0       	breq	.+32     	; 0x4174 <__fixunssfsi+0x46>
    4154:	c3 d0       	rcall	.+390    	; 0x42dc <__fp_zero>
    4156:	b1 e0       	ldi	r27, 0x01	; 1
    4158:	08 95       	ret
    415a:	c0 c0       	rjmp	.+384    	; 0x42dc <__fp_zero>
    415c:	67 2f       	mov	r22, r23
    415e:	78 2f       	mov	r23, r24
    4160:	88 27       	eor	r24, r24
    4162:	b8 5f       	subi	r27, 0xF8	; 248
    4164:	39 f0       	breq	.+14     	; 0x4174 <__fixunssfsi+0x46>
    4166:	b9 3f       	cpi	r27, 0xF9	; 249
    4168:	cc f3       	brlt	.-14     	; 0x415c <__fixunssfsi+0x2e>
    416a:	86 95       	lsr	r24
    416c:	77 95       	ror	r23
    416e:	67 95       	ror	r22
    4170:	b3 95       	inc	r27
    4172:	d9 f7       	brne	.-10     	; 0x416a <__fixunssfsi+0x3c>
    4174:	3e f4       	brtc	.+14     	; 0x4184 <__fixunssfsi+0x56>
    4176:	90 95       	com	r25
    4178:	80 95       	com	r24
    417a:	70 95       	com	r23
    417c:	61 95       	neg	r22
    417e:	7f 4f       	sbci	r23, 0xFF	; 255
    4180:	8f 4f       	sbci	r24, 0xFF	; 255
    4182:	9f 4f       	sbci	r25, 0xFF	; 255
    4184:	08 95       	ret

00004186 <__floatunsisf>:
    4186:	e8 94       	clt
    4188:	09 c0       	rjmp	.+18     	; 0x419c <__floatsisf+0x12>

0000418a <__floatsisf>:
    418a:	97 fb       	bst	r25, 7
    418c:	3e f4       	brtc	.+14     	; 0x419c <__floatsisf+0x12>
    418e:	90 95       	com	r25
    4190:	80 95       	com	r24
    4192:	70 95       	com	r23
    4194:	61 95       	neg	r22
    4196:	7f 4f       	sbci	r23, 0xFF	; 255
    4198:	8f 4f       	sbci	r24, 0xFF	; 255
    419a:	9f 4f       	sbci	r25, 0xFF	; 255
    419c:	99 23       	and	r25, r25
    419e:	a9 f0       	breq	.+42     	; 0x41ca <__floatsisf+0x40>
    41a0:	f9 2f       	mov	r31, r25
    41a2:	96 e9       	ldi	r25, 0x96	; 150
    41a4:	bb 27       	eor	r27, r27
    41a6:	93 95       	inc	r25
    41a8:	f6 95       	lsr	r31
    41aa:	87 95       	ror	r24
    41ac:	77 95       	ror	r23
    41ae:	67 95       	ror	r22
    41b0:	b7 95       	ror	r27
    41b2:	f1 11       	cpse	r31, r1
    41b4:	f8 cf       	rjmp	.-16     	; 0x41a6 <__floatsisf+0x1c>
    41b6:	fa f4       	brpl	.+62     	; 0x41f6 <__floatsisf+0x6c>
    41b8:	bb 0f       	add	r27, r27
    41ba:	11 f4       	brne	.+4      	; 0x41c0 <__floatsisf+0x36>
    41bc:	60 ff       	sbrs	r22, 0
    41be:	1b c0       	rjmp	.+54     	; 0x41f6 <__floatsisf+0x6c>
    41c0:	6f 5f       	subi	r22, 0xFF	; 255
    41c2:	7f 4f       	sbci	r23, 0xFF	; 255
    41c4:	8f 4f       	sbci	r24, 0xFF	; 255
    41c6:	9f 4f       	sbci	r25, 0xFF	; 255
    41c8:	16 c0       	rjmp	.+44     	; 0x41f6 <__floatsisf+0x6c>
    41ca:	88 23       	and	r24, r24
    41cc:	11 f0       	breq	.+4      	; 0x41d2 <__floatsisf+0x48>
    41ce:	96 e9       	ldi	r25, 0x96	; 150
    41d0:	11 c0       	rjmp	.+34     	; 0x41f4 <__floatsisf+0x6a>
    41d2:	77 23       	and	r23, r23
    41d4:	21 f0       	breq	.+8      	; 0x41de <__floatsisf+0x54>
    41d6:	9e e8       	ldi	r25, 0x8E	; 142
    41d8:	87 2f       	mov	r24, r23
    41da:	76 2f       	mov	r23, r22
    41dc:	05 c0       	rjmp	.+10     	; 0x41e8 <__floatsisf+0x5e>
    41de:	66 23       	and	r22, r22
    41e0:	71 f0       	breq	.+28     	; 0x41fe <__floatsisf+0x74>
    41e2:	96 e8       	ldi	r25, 0x86	; 134
    41e4:	86 2f       	mov	r24, r22
    41e6:	70 e0       	ldi	r23, 0x00	; 0
    41e8:	60 e0       	ldi	r22, 0x00	; 0
    41ea:	2a f0       	brmi	.+10     	; 0x41f6 <__floatsisf+0x6c>
    41ec:	9a 95       	dec	r25
    41ee:	66 0f       	add	r22, r22
    41f0:	77 1f       	adc	r23, r23
    41f2:	88 1f       	adc	r24, r24
    41f4:	da f7       	brpl	.-10     	; 0x41ec <__floatsisf+0x62>
    41f6:	88 0f       	add	r24, r24
    41f8:	96 95       	lsr	r25
    41fa:	87 95       	ror	r24
    41fc:	97 f9       	bld	r25, 7
    41fe:	08 95       	ret

00004200 <__fp_cmp>:
    4200:	99 0f       	add	r25, r25
    4202:	00 08       	sbc	r0, r0
    4204:	55 0f       	add	r21, r21
    4206:	aa 0b       	sbc	r26, r26
    4208:	e0 e8       	ldi	r30, 0x80	; 128
    420a:	fe ef       	ldi	r31, 0xFE	; 254
    420c:	16 16       	cp	r1, r22
    420e:	17 06       	cpc	r1, r23
    4210:	e8 07       	cpc	r30, r24
    4212:	f9 07       	cpc	r31, r25
    4214:	c0 f0       	brcs	.+48     	; 0x4246 <__fp_cmp+0x46>
    4216:	12 16       	cp	r1, r18
    4218:	13 06       	cpc	r1, r19
    421a:	e4 07       	cpc	r30, r20
    421c:	f5 07       	cpc	r31, r21
    421e:	98 f0       	brcs	.+38     	; 0x4246 <__fp_cmp+0x46>
    4220:	62 1b       	sub	r22, r18
    4222:	73 0b       	sbc	r23, r19
    4224:	84 0b       	sbc	r24, r20
    4226:	95 0b       	sbc	r25, r21
    4228:	39 f4       	brne	.+14     	; 0x4238 <__fp_cmp+0x38>
    422a:	0a 26       	eor	r0, r26
    422c:	61 f0       	breq	.+24     	; 0x4246 <__fp_cmp+0x46>
    422e:	23 2b       	or	r18, r19
    4230:	24 2b       	or	r18, r20
    4232:	25 2b       	or	r18, r21
    4234:	21 f4       	brne	.+8      	; 0x423e <__fp_cmp+0x3e>
    4236:	08 95       	ret
    4238:	0a 26       	eor	r0, r26
    423a:	09 f4       	brne	.+2      	; 0x423e <__fp_cmp+0x3e>
    423c:	a1 40       	sbci	r26, 0x01	; 1
    423e:	a6 95       	lsr	r26
    4240:	8f ef       	ldi	r24, 0xFF	; 255
    4242:	81 1d       	adc	r24, r1
    4244:	81 1d       	adc	r24, r1
    4246:	08 95       	ret

00004248 <__fp_inf>:
    4248:	97 f9       	bld	r25, 7
    424a:	9f 67       	ori	r25, 0x7F	; 127
    424c:	80 e8       	ldi	r24, 0x80	; 128
    424e:	70 e0       	ldi	r23, 0x00	; 0
    4250:	60 e0       	ldi	r22, 0x00	; 0
    4252:	08 95       	ret

00004254 <__fp_nan>:
    4254:	9f ef       	ldi	r25, 0xFF	; 255
    4256:	80 ec       	ldi	r24, 0xC0	; 192
    4258:	08 95       	ret

0000425a <__fp_pscA>:
    425a:	00 24       	eor	r0, r0
    425c:	0a 94       	dec	r0
    425e:	16 16       	cp	r1, r22
    4260:	17 06       	cpc	r1, r23
    4262:	18 06       	cpc	r1, r24
    4264:	09 06       	cpc	r0, r25
    4266:	08 95       	ret

00004268 <__fp_pscB>:
    4268:	00 24       	eor	r0, r0
    426a:	0a 94       	dec	r0
    426c:	12 16       	cp	r1, r18
    426e:	13 06       	cpc	r1, r19
    4270:	14 06       	cpc	r1, r20
    4272:	05 06       	cpc	r0, r21
    4274:	08 95       	ret

00004276 <__fp_round>:
    4276:	09 2e       	mov	r0, r25
    4278:	03 94       	inc	r0
    427a:	00 0c       	add	r0, r0
    427c:	11 f4       	brne	.+4      	; 0x4282 <__fp_round+0xc>
    427e:	88 23       	and	r24, r24
    4280:	52 f0       	brmi	.+20     	; 0x4296 <__fp_round+0x20>
    4282:	bb 0f       	add	r27, r27
    4284:	40 f4       	brcc	.+16     	; 0x4296 <__fp_round+0x20>
    4286:	bf 2b       	or	r27, r31
    4288:	11 f4       	brne	.+4      	; 0x428e <__fp_round+0x18>
    428a:	60 ff       	sbrs	r22, 0
    428c:	04 c0       	rjmp	.+8      	; 0x4296 <__fp_round+0x20>
    428e:	6f 5f       	subi	r22, 0xFF	; 255
    4290:	7f 4f       	sbci	r23, 0xFF	; 255
    4292:	8f 4f       	sbci	r24, 0xFF	; 255
    4294:	9f 4f       	sbci	r25, 0xFF	; 255
    4296:	08 95       	ret

00004298 <__fp_split3>:
    4298:	57 fd       	sbrc	r21, 7
    429a:	90 58       	subi	r25, 0x80	; 128
    429c:	44 0f       	add	r20, r20
    429e:	55 1f       	adc	r21, r21
    42a0:	59 f0       	breq	.+22     	; 0x42b8 <__fp_splitA+0x10>
    42a2:	5f 3f       	cpi	r21, 0xFF	; 255
    42a4:	71 f0       	breq	.+28     	; 0x42c2 <__fp_splitA+0x1a>
    42a6:	47 95       	ror	r20

000042a8 <__fp_splitA>:
    42a8:	88 0f       	add	r24, r24
    42aa:	97 fb       	bst	r25, 7
    42ac:	99 1f       	adc	r25, r25
    42ae:	61 f0       	breq	.+24     	; 0x42c8 <__fp_splitA+0x20>
    42b0:	9f 3f       	cpi	r25, 0xFF	; 255
    42b2:	79 f0       	breq	.+30     	; 0x42d2 <__fp_splitA+0x2a>
    42b4:	87 95       	ror	r24
    42b6:	08 95       	ret
    42b8:	12 16       	cp	r1, r18
    42ba:	13 06       	cpc	r1, r19
    42bc:	14 06       	cpc	r1, r20
    42be:	55 1f       	adc	r21, r21
    42c0:	f2 cf       	rjmp	.-28     	; 0x42a6 <__fp_split3+0xe>
    42c2:	46 95       	lsr	r20
    42c4:	f1 df       	rcall	.-30     	; 0x42a8 <__fp_splitA>
    42c6:	08 c0       	rjmp	.+16     	; 0x42d8 <__fp_splitA+0x30>
    42c8:	16 16       	cp	r1, r22
    42ca:	17 06       	cpc	r1, r23
    42cc:	18 06       	cpc	r1, r24
    42ce:	99 1f       	adc	r25, r25
    42d0:	f1 cf       	rjmp	.-30     	; 0x42b4 <__fp_splitA+0xc>
    42d2:	86 95       	lsr	r24
    42d4:	71 05       	cpc	r23, r1
    42d6:	61 05       	cpc	r22, r1
    42d8:	08 94       	sec
    42da:	08 95       	ret

000042dc <__fp_zero>:
    42dc:	e8 94       	clt

000042de <__fp_szero>:
    42de:	bb 27       	eor	r27, r27
    42e0:	66 27       	eor	r22, r22
    42e2:	77 27       	eor	r23, r23
    42e4:	cb 01       	movw	r24, r22
    42e6:	97 f9       	bld	r25, 7
    42e8:	08 95       	ret

000042ea <__mulsf3>:
    42ea:	0b d0       	rcall	.+22     	; 0x4302 <__mulsf3x>
    42ec:	c4 cf       	rjmp	.-120    	; 0x4276 <__fp_round>
    42ee:	b5 df       	rcall	.-150    	; 0x425a <__fp_pscA>
    42f0:	28 f0       	brcs	.+10     	; 0x42fc <__mulsf3+0x12>
    42f2:	ba df       	rcall	.-140    	; 0x4268 <__fp_pscB>
    42f4:	18 f0       	brcs	.+6      	; 0x42fc <__mulsf3+0x12>
    42f6:	95 23       	and	r25, r21
    42f8:	09 f0       	breq	.+2      	; 0x42fc <__mulsf3+0x12>
    42fa:	a6 cf       	rjmp	.-180    	; 0x4248 <__fp_inf>
    42fc:	ab cf       	rjmp	.-170    	; 0x4254 <__fp_nan>
    42fe:	11 24       	eor	r1, r1
    4300:	ee cf       	rjmp	.-36     	; 0x42de <__fp_szero>

00004302 <__mulsf3x>:
    4302:	ca df       	rcall	.-108    	; 0x4298 <__fp_split3>
    4304:	a0 f3       	brcs	.-24     	; 0x42ee <__mulsf3+0x4>

00004306 <__mulsf3_pse>:
    4306:	95 9f       	mul	r25, r21
    4308:	d1 f3       	breq	.-12     	; 0x42fe <__mulsf3+0x14>
    430a:	95 0f       	add	r25, r21
    430c:	50 e0       	ldi	r21, 0x00	; 0
    430e:	55 1f       	adc	r21, r21
    4310:	62 9f       	mul	r22, r18
    4312:	f0 01       	movw	r30, r0
    4314:	72 9f       	mul	r23, r18
    4316:	bb 27       	eor	r27, r27
    4318:	f0 0d       	add	r31, r0
    431a:	b1 1d       	adc	r27, r1
    431c:	63 9f       	mul	r22, r19
    431e:	aa 27       	eor	r26, r26
    4320:	f0 0d       	add	r31, r0
    4322:	b1 1d       	adc	r27, r1
    4324:	aa 1f       	adc	r26, r26
    4326:	64 9f       	mul	r22, r20
    4328:	66 27       	eor	r22, r22
    432a:	b0 0d       	add	r27, r0
    432c:	a1 1d       	adc	r26, r1
    432e:	66 1f       	adc	r22, r22
    4330:	82 9f       	mul	r24, r18
    4332:	22 27       	eor	r18, r18
    4334:	b0 0d       	add	r27, r0
    4336:	a1 1d       	adc	r26, r1
    4338:	62 1f       	adc	r22, r18
    433a:	73 9f       	mul	r23, r19
    433c:	b0 0d       	add	r27, r0
    433e:	a1 1d       	adc	r26, r1
    4340:	62 1f       	adc	r22, r18
    4342:	83 9f       	mul	r24, r19
    4344:	a0 0d       	add	r26, r0
    4346:	61 1d       	adc	r22, r1
    4348:	22 1f       	adc	r18, r18
    434a:	74 9f       	mul	r23, r20
    434c:	33 27       	eor	r19, r19
    434e:	a0 0d       	add	r26, r0
    4350:	61 1d       	adc	r22, r1
    4352:	23 1f       	adc	r18, r19
    4354:	84 9f       	mul	r24, r20
    4356:	60 0d       	add	r22, r0
    4358:	21 1d       	adc	r18, r1
    435a:	82 2f       	mov	r24, r18
    435c:	76 2f       	mov	r23, r22
    435e:	6a 2f       	mov	r22, r26
    4360:	11 24       	eor	r1, r1
    4362:	9f 57       	subi	r25, 0x7F	; 127
    4364:	50 40       	sbci	r21, 0x00	; 0
    4366:	8a f0       	brmi	.+34     	; 0x438a <__mulsf3_pse+0x84>
    4368:	e1 f0       	breq	.+56     	; 0x43a2 <__mulsf3_pse+0x9c>
    436a:	88 23       	and	r24, r24
    436c:	4a f0       	brmi	.+18     	; 0x4380 <__mulsf3_pse+0x7a>
    436e:	ee 0f       	add	r30, r30
    4370:	ff 1f       	adc	r31, r31
    4372:	bb 1f       	adc	r27, r27
    4374:	66 1f       	adc	r22, r22
    4376:	77 1f       	adc	r23, r23
    4378:	88 1f       	adc	r24, r24
    437a:	91 50       	subi	r25, 0x01	; 1
    437c:	50 40       	sbci	r21, 0x00	; 0
    437e:	a9 f7       	brne	.-22     	; 0x436a <__mulsf3_pse+0x64>
    4380:	9e 3f       	cpi	r25, 0xFE	; 254
    4382:	51 05       	cpc	r21, r1
    4384:	70 f0       	brcs	.+28     	; 0x43a2 <__mulsf3_pse+0x9c>
    4386:	60 cf       	rjmp	.-320    	; 0x4248 <__fp_inf>
    4388:	aa cf       	rjmp	.-172    	; 0x42de <__fp_szero>
    438a:	5f 3f       	cpi	r21, 0xFF	; 255
    438c:	ec f3       	brlt	.-6      	; 0x4388 <__mulsf3_pse+0x82>
    438e:	98 3e       	cpi	r25, 0xE8	; 232
    4390:	dc f3       	brlt	.-10     	; 0x4388 <__mulsf3_pse+0x82>
    4392:	86 95       	lsr	r24
    4394:	77 95       	ror	r23
    4396:	67 95       	ror	r22
    4398:	b7 95       	ror	r27
    439a:	f7 95       	ror	r31
    439c:	e7 95       	ror	r30
    439e:	9f 5f       	subi	r25, 0xFF	; 255
    43a0:	c1 f7       	brne	.-16     	; 0x4392 <__mulsf3_pse+0x8c>
    43a2:	fe 2b       	or	r31, r30
    43a4:	88 0f       	add	r24, r24
    43a6:	91 1d       	adc	r25, r1
    43a8:	96 95       	lsr	r25
    43aa:	87 95       	ror	r24
    43ac:	97 f9       	bld	r25, 7
    43ae:	08 95       	ret

000043b0 <pow>:
    43b0:	fa 01       	movw	r30, r20
    43b2:	ee 0f       	add	r30, r30
    43b4:	ff 1f       	adc	r31, r31
    43b6:	30 96       	adiw	r30, 0x00	; 0
    43b8:	21 05       	cpc	r18, r1
    43ba:	31 05       	cpc	r19, r1
    43bc:	99 f1       	breq	.+102    	; 0x4424 <pow+0x74>
    43be:	61 15       	cp	r22, r1
    43c0:	71 05       	cpc	r23, r1
    43c2:	61 f4       	brne	.+24     	; 0x43dc <pow+0x2c>
    43c4:	80 38       	cpi	r24, 0x80	; 128
    43c6:	bf e3       	ldi	r27, 0x3F	; 63
    43c8:	9b 07       	cpc	r25, r27
    43ca:	49 f1       	breq	.+82     	; 0x441e <pow+0x6e>
    43cc:	68 94       	set
    43ce:	90 38       	cpi	r25, 0x80	; 128
    43d0:	81 05       	cpc	r24, r1
    43d2:	61 f0       	breq	.+24     	; 0x43ec <pow+0x3c>
    43d4:	80 38       	cpi	r24, 0x80	; 128
    43d6:	bf ef       	ldi	r27, 0xFF	; 255
    43d8:	9b 07       	cpc	r25, r27
    43da:	41 f0       	breq	.+16     	; 0x43ec <pow+0x3c>
    43dc:	99 23       	and	r25, r25
    43de:	42 f5       	brpl	.+80     	; 0x4430 <pow+0x80>
    43e0:	ff 3f       	cpi	r31, 0xFF	; 255
    43e2:	e1 05       	cpc	r30, r1
    43e4:	31 05       	cpc	r19, r1
    43e6:	21 05       	cpc	r18, r1
    43e8:	11 f1       	breq	.+68     	; 0x442e <pow+0x7e>
    43ea:	e8 94       	clt
    43ec:	08 94       	sec
    43ee:	e7 95       	ror	r30
    43f0:	d9 01       	movw	r26, r18
    43f2:	aa 23       	and	r26, r26
    43f4:	29 f4       	brne	.+10     	; 0x4400 <pow+0x50>
    43f6:	ab 2f       	mov	r26, r27
    43f8:	be 2f       	mov	r27, r30
    43fa:	f8 5f       	subi	r31, 0xF8	; 248
    43fc:	d0 f3       	brcs	.-12     	; 0x43f2 <pow+0x42>
    43fe:	10 c0       	rjmp	.+32     	; 0x4420 <pow+0x70>
    4400:	ff 5f       	subi	r31, 0xFF	; 255
    4402:	70 f4       	brcc	.+28     	; 0x4420 <pow+0x70>
    4404:	a6 95       	lsr	r26
    4406:	e0 f7       	brcc	.-8      	; 0x4400 <pow+0x50>
    4408:	f7 39       	cpi	r31, 0x97	; 151
    440a:	50 f0       	brcs	.+20     	; 0x4420 <pow+0x70>
    440c:	19 f0       	breq	.+6      	; 0x4414 <pow+0x64>
    440e:	ff 3a       	cpi	r31, 0xAF	; 175
    4410:	38 f4       	brcc	.+14     	; 0x4420 <pow+0x70>
    4412:	9f 77       	andi	r25, 0x7F	; 127
    4414:	9f 93       	push	r25
    4416:	0c d0       	rcall	.+24     	; 0x4430 <pow+0x80>
    4418:	0f 90       	pop	r0
    441a:	07 fc       	sbrc	r0, 7
    441c:	90 58       	subi	r25, 0x80	; 128
    441e:	08 95       	ret
    4420:	3e f0       	brts	.+14     	; 0x4430 <pow+0x80>
    4422:	18 cf       	rjmp	.-464    	; 0x4254 <__fp_nan>
    4424:	60 e0       	ldi	r22, 0x00	; 0
    4426:	70 e0       	ldi	r23, 0x00	; 0
    4428:	80 e8       	ldi	r24, 0x80	; 128
    442a:	9f e3       	ldi	r25, 0x3F	; 63
    442c:	08 95       	ret
    442e:	4f e7       	ldi	r20, 0x7F	; 127
    4430:	9f 77       	andi	r25, 0x7F	; 127
    4432:	5f 93       	push	r21
    4434:	4f 93       	push	r20
    4436:	3f 93       	push	r19
    4438:	2f 93       	push	r18
    443a:	9e d0       	rcall	.+316    	; 0x4578 <log>
    443c:	2f 91       	pop	r18
    443e:	3f 91       	pop	r19
    4440:	4f 91       	pop	r20
    4442:	5f 91       	pop	r21
    4444:	52 df       	rcall	.-348    	; 0x42ea <__mulsf3>
    4446:	05 c0       	rjmp	.+10     	; 0x4452 <exp>
    4448:	19 f4       	brne	.+6      	; 0x4450 <pow+0xa0>
    444a:	0e f0       	brts	.+2      	; 0x444e <pow+0x9e>
    444c:	fd ce       	rjmp	.-518    	; 0x4248 <__fp_inf>
    444e:	46 cf       	rjmp	.-372    	; 0x42dc <__fp_zero>
    4450:	01 cf       	rjmp	.-510    	; 0x4254 <__fp_nan>

00004452 <exp>:
    4452:	2a df       	rcall	.-428    	; 0x42a8 <__fp_splitA>
    4454:	c8 f3       	brcs	.-14     	; 0x4448 <pow+0x98>
    4456:	96 38       	cpi	r25, 0x86	; 134
    4458:	c0 f7       	brcc	.-16     	; 0x444a <pow+0x9a>
    445a:	07 f8       	bld	r0, 7
    445c:	0f 92       	push	r0
    445e:	e8 94       	clt
    4460:	2b e3       	ldi	r18, 0x3B	; 59
    4462:	3a ea       	ldi	r19, 0xAA	; 170
    4464:	48 eb       	ldi	r20, 0xB8	; 184
    4466:	5f e7       	ldi	r21, 0x7F	; 127
    4468:	4e df       	rcall	.-356    	; 0x4306 <__mulsf3_pse>
    446a:	0f 92       	push	r0
    446c:	0f 92       	push	r0
    446e:	0f 92       	push	r0
    4470:	4d b7       	in	r20, 0x3d	; 61
    4472:	5e b7       	in	r21, 0x3e	; 62
    4474:	0f 92       	push	r0
    4476:	c0 d0       	rcall	.+384    	; 0x45f8 <modf>
    4478:	e0 ed       	ldi	r30, 0xD0	; 208
    447a:	f0 e0       	ldi	r31, 0x00	; 0
    447c:	16 d0       	rcall	.+44     	; 0x44aa <__fp_powser>
    447e:	4f 91       	pop	r20
    4480:	5f 91       	pop	r21
    4482:	ef 91       	pop	r30
    4484:	ff 91       	pop	r31
    4486:	e5 95       	asr	r30
    4488:	ee 1f       	adc	r30, r30
    448a:	ff 1f       	adc	r31, r31
    448c:	49 f0       	breq	.+18     	; 0x44a0 <exp+0x4e>
    448e:	fe 57       	subi	r31, 0x7E	; 126
    4490:	e0 68       	ori	r30, 0x80	; 128
    4492:	44 27       	eor	r20, r20
    4494:	ee 0f       	add	r30, r30
    4496:	44 1f       	adc	r20, r20
    4498:	fa 95       	dec	r31
    449a:	e1 f7       	brne	.-8      	; 0x4494 <exp+0x42>
    449c:	41 95       	neg	r20
    449e:	55 0b       	sbc	r21, r21
    44a0:	32 d0       	rcall	.+100    	; 0x4506 <ldexp>
    44a2:	0f 90       	pop	r0
    44a4:	07 fe       	sbrs	r0, 7
    44a6:	26 c0       	rjmp	.+76     	; 0x44f4 <inverse>
    44a8:	08 95       	ret

000044aa <__fp_powser>:
    44aa:	df 93       	push	r29
    44ac:	cf 93       	push	r28
    44ae:	1f 93       	push	r17
    44b0:	0f 93       	push	r16
    44b2:	ff 92       	push	r15
    44b4:	ef 92       	push	r14
    44b6:	df 92       	push	r13
    44b8:	7b 01       	movw	r14, r22
    44ba:	8c 01       	movw	r16, r24
    44bc:	68 94       	set
    44be:	05 c0       	rjmp	.+10     	; 0x44ca <__fp_powser+0x20>
    44c0:	da 2e       	mov	r13, r26
    44c2:	ef 01       	movw	r28, r30
    44c4:	1e df       	rcall	.-452    	; 0x4302 <__mulsf3x>
    44c6:	fe 01       	movw	r30, r28
    44c8:	e8 94       	clt
    44ca:	a5 91       	lpm	r26, Z+
    44cc:	25 91       	lpm	r18, Z+
    44ce:	35 91       	lpm	r19, Z+
    44d0:	45 91       	lpm	r20, Z+
    44d2:	55 91       	lpm	r21, Z+
    44d4:	ae f3       	brts	.-22     	; 0x44c0 <__fp_powser+0x16>
    44d6:	ef 01       	movw	r28, r30
    44d8:	ce dd       	rcall	.-1124   	; 0x4076 <__addsf3x>
    44da:	fe 01       	movw	r30, r28
    44dc:	97 01       	movw	r18, r14
    44de:	a8 01       	movw	r20, r16
    44e0:	da 94       	dec	r13
    44e2:	79 f7       	brne	.-34     	; 0x44c2 <__fp_powser+0x18>
    44e4:	df 90       	pop	r13
    44e6:	ef 90       	pop	r14
    44e8:	ff 90       	pop	r15
    44ea:	0f 91       	pop	r16
    44ec:	1f 91       	pop	r17
    44ee:	cf 91       	pop	r28
    44f0:	df 91       	pop	r29
    44f2:	08 95       	ret

000044f4 <inverse>:
    44f4:	9b 01       	movw	r18, r22
    44f6:	ac 01       	movw	r20, r24
    44f8:	60 e0       	ldi	r22, 0x00	; 0
    44fa:	70 e0       	ldi	r23, 0x00	; 0
    44fc:	80 e8       	ldi	r24, 0x80	; 128
    44fe:	9f e3       	ldi	r25, 0x3F	; 63
    4500:	ae c0       	rjmp	.+348    	; 0x465e <__divsf3>
    4502:	a2 ce       	rjmp	.-700    	; 0x4248 <__fp_inf>
    4504:	14 c1       	rjmp	.+552    	; 0x472e <__fp_mpack>

00004506 <ldexp>:
    4506:	d0 de       	rcall	.-608    	; 0x42a8 <__fp_splitA>
    4508:	e8 f3       	brcs	.-6      	; 0x4504 <inverse+0x10>
    450a:	99 23       	and	r25, r25
    450c:	d9 f3       	breq	.-10     	; 0x4504 <inverse+0x10>
    450e:	94 0f       	add	r25, r20
    4510:	51 1d       	adc	r21, r1
    4512:	bb f3       	brvs	.-18     	; 0x4502 <inverse+0xe>
    4514:	91 50       	subi	r25, 0x01	; 1
    4516:	50 40       	sbci	r21, 0x00	; 0
    4518:	94 f0       	brlt	.+36     	; 0x453e <ldexp+0x38>
    451a:	59 f0       	breq	.+22     	; 0x4532 <ldexp+0x2c>
    451c:	88 23       	and	r24, r24
    451e:	32 f0       	brmi	.+12     	; 0x452c <ldexp+0x26>
    4520:	66 0f       	add	r22, r22
    4522:	77 1f       	adc	r23, r23
    4524:	88 1f       	adc	r24, r24
    4526:	91 50       	subi	r25, 0x01	; 1
    4528:	50 40       	sbci	r21, 0x00	; 0
    452a:	c1 f7       	brne	.-16     	; 0x451c <ldexp+0x16>
    452c:	9e 3f       	cpi	r25, 0xFE	; 254
    452e:	51 05       	cpc	r21, r1
    4530:	44 f7       	brge	.-48     	; 0x4502 <inverse+0xe>
    4532:	88 0f       	add	r24, r24
    4534:	91 1d       	adc	r25, r1
    4536:	96 95       	lsr	r25
    4538:	87 95       	ror	r24
    453a:	97 f9       	bld	r25, 7
    453c:	08 95       	ret
    453e:	5f 3f       	cpi	r21, 0xFF	; 255
    4540:	ac f0       	brlt	.+42     	; 0x456c <ldexp+0x66>
    4542:	98 3e       	cpi	r25, 0xE8	; 232
    4544:	9c f0       	brlt	.+38     	; 0x456c <ldexp+0x66>
    4546:	bb 27       	eor	r27, r27
    4548:	86 95       	lsr	r24
    454a:	77 95       	ror	r23
    454c:	67 95       	ror	r22
    454e:	b7 95       	ror	r27
    4550:	08 f4       	brcc	.+2      	; 0x4554 <ldexp+0x4e>
    4552:	b1 60       	ori	r27, 0x01	; 1
    4554:	93 95       	inc	r25
    4556:	c1 f7       	brne	.-16     	; 0x4548 <ldexp+0x42>
    4558:	bb 0f       	add	r27, r27
    455a:	58 f7       	brcc	.-42     	; 0x4532 <ldexp+0x2c>
    455c:	11 f4       	brne	.+4      	; 0x4562 <ldexp+0x5c>
    455e:	60 ff       	sbrs	r22, 0
    4560:	e8 cf       	rjmp	.-48     	; 0x4532 <ldexp+0x2c>
    4562:	6f 5f       	subi	r22, 0xFF	; 255
    4564:	7f 4f       	sbci	r23, 0xFF	; 255
    4566:	8f 4f       	sbci	r24, 0xFF	; 255
    4568:	9f 4f       	sbci	r25, 0xFF	; 255
    456a:	e3 cf       	rjmp	.-58     	; 0x4532 <ldexp+0x2c>
    456c:	b8 ce       	rjmp	.-656    	; 0x42de <__fp_szero>
    456e:	0e f0       	brts	.+2      	; 0x4572 <ldexp+0x6c>
    4570:	de c0       	rjmp	.+444    	; 0x472e <__fp_mpack>
    4572:	70 ce       	rjmp	.-800    	; 0x4254 <__fp_nan>
    4574:	68 94       	set
    4576:	68 ce       	rjmp	.-816    	; 0x4248 <__fp_inf>

00004578 <log>:
    4578:	97 de       	rcall	.-722    	; 0x42a8 <__fp_splitA>
    457a:	c8 f3       	brcs	.-14     	; 0x456e <ldexp+0x68>
    457c:	99 23       	and	r25, r25
    457e:	d1 f3       	breq	.-12     	; 0x4574 <ldexp+0x6e>
    4580:	c6 f3       	brts	.-16     	; 0x4572 <ldexp+0x6c>
    4582:	df 93       	push	r29
    4584:	cf 93       	push	r28
    4586:	1f 93       	push	r17
    4588:	0f 93       	push	r16
    458a:	ff 92       	push	r15
    458c:	c9 2f       	mov	r28, r25
    458e:	dd 27       	eor	r29, r29
    4590:	88 23       	and	r24, r24
    4592:	2a f0       	brmi	.+10     	; 0x459e <log+0x26>
    4594:	21 97       	sbiw	r28, 0x01	; 1
    4596:	66 0f       	add	r22, r22
    4598:	77 1f       	adc	r23, r23
    459a:	88 1f       	adc	r24, r24
    459c:	da f7       	brpl	.-10     	; 0x4594 <log+0x1c>
    459e:	20 e0       	ldi	r18, 0x00	; 0
    45a0:	30 e0       	ldi	r19, 0x00	; 0
    45a2:	40 e8       	ldi	r20, 0x80	; 128
    45a4:	5f eb       	ldi	r21, 0xBF	; 191
    45a6:	9f e3       	ldi	r25, 0x3F	; 63
    45a8:	88 39       	cpi	r24, 0x98	; 152
    45aa:	20 f0       	brcs	.+8      	; 0x45b4 <log+0x3c>
    45ac:	80 3e       	cpi	r24, 0xE0	; 224
    45ae:	30 f0       	brcs	.+12     	; 0x45bc <log+0x44>
    45b0:	21 96       	adiw	r28, 0x01	; 1
    45b2:	8f 77       	andi	r24, 0x7F	; 127
    45b4:	4f dd       	rcall	.-1378   	; 0x4054 <__addsf3>
    45b6:	e8 ef       	ldi	r30, 0xF8	; 248
    45b8:	f0 e0       	ldi	r31, 0x00	; 0
    45ba:	03 c0       	rjmp	.+6      	; 0x45c2 <log+0x4a>
    45bc:	4b dd       	rcall	.-1386   	; 0x4054 <__addsf3>
    45be:	e5 e2       	ldi	r30, 0x25	; 37
    45c0:	f1 e0       	ldi	r31, 0x01	; 1
    45c2:	73 df       	rcall	.-282    	; 0x44aa <__fp_powser>
    45c4:	8b 01       	movw	r16, r22
    45c6:	be 01       	movw	r22, r28
    45c8:	ec 01       	movw	r28, r24
    45ca:	fb 2e       	mov	r15, r27
    45cc:	6f 57       	subi	r22, 0x7F	; 127
    45ce:	71 09       	sbc	r23, r1
    45d0:	75 95       	asr	r23
    45d2:	77 1f       	adc	r23, r23
    45d4:	88 0b       	sbc	r24, r24
    45d6:	99 0b       	sbc	r25, r25
    45d8:	d8 dd       	rcall	.-1104   	; 0x418a <__floatsisf>
    45da:	28 e1       	ldi	r18, 0x18	; 24
    45dc:	32 e7       	ldi	r19, 0x72	; 114
    45de:	41 e3       	ldi	r20, 0x31	; 49
    45e0:	5f e3       	ldi	r21, 0x3F	; 63
    45e2:	8f de       	rcall	.-738    	; 0x4302 <__mulsf3x>
    45e4:	af 2d       	mov	r26, r15
    45e6:	98 01       	movw	r18, r16
    45e8:	ae 01       	movw	r20, r28
    45ea:	ff 90       	pop	r15
    45ec:	0f 91       	pop	r16
    45ee:	1f 91       	pop	r17
    45f0:	cf 91       	pop	r28
    45f2:	df 91       	pop	r29
    45f4:	40 dd       	rcall	.-1408   	; 0x4076 <__addsf3x>
    45f6:	3f ce       	rjmp	.-898    	; 0x4276 <__fp_round>

000045f8 <modf>:
    45f8:	fa 01       	movw	r30, r20
    45fa:	dc 01       	movw	r26, r24
    45fc:	aa 0f       	add	r26, r26
    45fe:	bb 1f       	adc	r27, r27
    4600:	9b 01       	movw	r18, r22
    4602:	ac 01       	movw	r20, r24
    4604:	bf 57       	subi	r27, 0x7F	; 127
    4606:	28 f4       	brcc	.+10     	; 0x4612 <modf+0x1a>
    4608:	22 27       	eor	r18, r18
    460a:	33 27       	eor	r19, r19
    460c:	44 27       	eor	r20, r20
    460e:	50 78       	andi	r21, 0x80	; 128
    4610:	1f c0       	rjmp	.+62     	; 0x4650 <modf+0x58>
    4612:	b7 51       	subi	r27, 0x17	; 23
    4614:	88 f4       	brcc	.+34     	; 0x4638 <modf+0x40>
    4616:	ab 2f       	mov	r26, r27
    4618:	00 24       	eor	r0, r0
    461a:	46 95       	lsr	r20
    461c:	37 95       	ror	r19
    461e:	27 95       	ror	r18
    4620:	01 1c       	adc	r0, r1
    4622:	a3 95       	inc	r26
    4624:	d2 f3       	brmi	.-12     	; 0x461a <modf+0x22>
    4626:	00 20       	and	r0, r0
    4628:	69 f0       	breq	.+26     	; 0x4644 <modf+0x4c>
    462a:	22 0f       	add	r18, r18
    462c:	33 1f       	adc	r19, r19
    462e:	44 1f       	adc	r20, r20
    4630:	b3 95       	inc	r27
    4632:	da f3       	brmi	.-10     	; 0x462a <modf+0x32>
    4634:	0d d0       	rcall	.+26     	; 0x4650 <modf+0x58>
    4636:	0d cd       	rjmp	.-1510   	; 0x4052 <__subsf3>
    4638:	61 30       	cpi	r22, 0x01	; 1
    463a:	71 05       	cpc	r23, r1
    463c:	a0 e8       	ldi	r26, 0x80	; 128
    463e:	8a 07       	cpc	r24, r26
    4640:	b9 46       	sbci	r27, 0x69	; 105
    4642:	30 f4       	brcc	.+12     	; 0x4650 <modf+0x58>
    4644:	9b 01       	movw	r18, r22
    4646:	ac 01       	movw	r20, r24
    4648:	66 27       	eor	r22, r22
    464a:	77 27       	eor	r23, r23
    464c:	88 27       	eor	r24, r24
    464e:	90 78       	andi	r25, 0x80	; 128
    4650:	30 96       	adiw	r30, 0x00	; 0
    4652:	21 f0       	breq	.+8      	; 0x465c <modf+0x64>
    4654:	20 83       	st	Z, r18
    4656:	31 83       	std	Z+1, r19	; 0x01
    4658:	42 83       	std	Z+2, r20	; 0x02
    465a:	53 83       	std	Z+3, r21	; 0x03
    465c:	08 95       	ret

0000465e <__divsf3>:
    465e:	0c d0       	rcall	.+24     	; 0x4678 <__divsf3x>
    4660:	0a ce       	rjmp	.-1004   	; 0x4276 <__fp_round>
    4662:	02 de       	rcall	.-1020   	; 0x4268 <__fp_pscB>
    4664:	40 f0       	brcs	.+16     	; 0x4676 <__divsf3+0x18>
    4666:	f9 dd       	rcall	.-1038   	; 0x425a <__fp_pscA>
    4668:	30 f0       	brcs	.+12     	; 0x4676 <__divsf3+0x18>
    466a:	21 f4       	brne	.+8      	; 0x4674 <__divsf3+0x16>
    466c:	5f 3f       	cpi	r21, 0xFF	; 255
    466e:	19 f0       	breq	.+6      	; 0x4676 <__divsf3+0x18>
    4670:	eb cd       	rjmp	.-1066   	; 0x4248 <__fp_inf>
    4672:	51 11       	cpse	r21, r1
    4674:	34 ce       	rjmp	.-920    	; 0x42de <__fp_szero>
    4676:	ee cd       	rjmp	.-1060   	; 0x4254 <__fp_nan>

00004678 <__divsf3x>:
    4678:	0f de       	rcall	.-994    	; 0x4298 <__fp_split3>
    467a:	98 f3       	brcs	.-26     	; 0x4662 <__divsf3+0x4>

0000467c <__divsf3_pse>:
    467c:	99 23       	and	r25, r25
    467e:	c9 f3       	breq	.-14     	; 0x4672 <__divsf3+0x14>
    4680:	55 23       	and	r21, r21
    4682:	b1 f3       	breq	.-20     	; 0x4670 <__divsf3+0x12>
    4684:	95 1b       	sub	r25, r21
    4686:	55 0b       	sbc	r21, r21
    4688:	bb 27       	eor	r27, r27
    468a:	aa 27       	eor	r26, r26
    468c:	62 17       	cp	r22, r18
    468e:	73 07       	cpc	r23, r19
    4690:	84 07       	cpc	r24, r20
    4692:	38 f0       	brcs	.+14     	; 0x46a2 <__divsf3_pse+0x26>
    4694:	9f 5f       	subi	r25, 0xFF	; 255
    4696:	5f 4f       	sbci	r21, 0xFF	; 255
    4698:	22 0f       	add	r18, r18
    469a:	33 1f       	adc	r19, r19
    469c:	44 1f       	adc	r20, r20
    469e:	aa 1f       	adc	r26, r26
    46a0:	a9 f3       	breq	.-22     	; 0x468c <__divsf3_pse+0x10>
    46a2:	33 d0       	rcall	.+102    	; 0x470a <__divsf3_pse+0x8e>
    46a4:	0e 2e       	mov	r0, r30
    46a6:	3a f0       	brmi	.+14     	; 0x46b6 <__divsf3_pse+0x3a>
    46a8:	e0 e8       	ldi	r30, 0x80	; 128
    46aa:	30 d0       	rcall	.+96     	; 0x470c <__divsf3_pse+0x90>
    46ac:	91 50       	subi	r25, 0x01	; 1
    46ae:	50 40       	sbci	r21, 0x00	; 0
    46b0:	e6 95       	lsr	r30
    46b2:	00 1c       	adc	r0, r0
    46b4:	ca f7       	brpl	.-14     	; 0x46a8 <__divsf3_pse+0x2c>
    46b6:	29 d0       	rcall	.+82     	; 0x470a <__divsf3_pse+0x8e>
    46b8:	fe 2f       	mov	r31, r30
    46ba:	27 d0       	rcall	.+78     	; 0x470a <__divsf3_pse+0x8e>
    46bc:	66 0f       	add	r22, r22
    46be:	77 1f       	adc	r23, r23
    46c0:	88 1f       	adc	r24, r24
    46c2:	bb 1f       	adc	r27, r27
    46c4:	26 17       	cp	r18, r22
    46c6:	37 07       	cpc	r19, r23
    46c8:	48 07       	cpc	r20, r24
    46ca:	ab 07       	cpc	r26, r27
    46cc:	b0 e8       	ldi	r27, 0x80	; 128
    46ce:	09 f0       	breq	.+2      	; 0x46d2 <__divsf3_pse+0x56>
    46d0:	bb 0b       	sbc	r27, r27
    46d2:	80 2d       	mov	r24, r0
    46d4:	bf 01       	movw	r22, r30
    46d6:	ff 27       	eor	r31, r31
    46d8:	93 58       	subi	r25, 0x83	; 131
    46da:	5f 4f       	sbci	r21, 0xFF	; 255
    46dc:	2a f0       	brmi	.+10     	; 0x46e8 <__divsf3_pse+0x6c>
    46de:	9e 3f       	cpi	r25, 0xFE	; 254
    46e0:	51 05       	cpc	r21, r1
    46e2:	68 f0       	brcs	.+26     	; 0x46fe <__divsf3_pse+0x82>
    46e4:	b1 cd       	rjmp	.-1182   	; 0x4248 <__fp_inf>
    46e6:	fb cd       	rjmp	.-1034   	; 0x42de <__fp_szero>
    46e8:	5f 3f       	cpi	r21, 0xFF	; 255
    46ea:	ec f3       	brlt	.-6      	; 0x46e6 <__divsf3_pse+0x6a>
    46ec:	98 3e       	cpi	r25, 0xE8	; 232
    46ee:	dc f3       	brlt	.-10     	; 0x46e6 <__divsf3_pse+0x6a>
    46f0:	86 95       	lsr	r24
    46f2:	77 95       	ror	r23
    46f4:	67 95       	ror	r22
    46f6:	b7 95       	ror	r27
    46f8:	f7 95       	ror	r31
    46fa:	9f 5f       	subi	r25, 0xFF	; 255
    46fc:	c9 f7       	brne	.-14     	; 0x46f0 <__divsf3_pse+0x74>
    46fe:	88 0f       	add	r24, r24
    4700:	91 1d       	adc	r25, r1
    4702:	96 95       	lsr	r25
    4704:	87 95       	ror	r24
    4706:	97 f9       	bld	r25, 7
    4708:	08 95       	ret
    470a:	e1 e0       	ldi	r30, 0x01	; 1
    470c:	66 0f       	add	r22, r22
    470e:	77 1f       	adc	r23, r23
    4710:	88 1f       	adc	r24, r24
    4712:	bb 1f       	adc	r27, r27
    4714:	62 17       	cp	r22, r18
    4716:	73 07       	cpc	r23, r19
    4718:	84 07       	cpc	r24, r20
    471a:	ba 07       	cpc	r27, r26
    471c:	20 f0       	brcs	.+8      	; 0x4726 <__divsf3_pse+0xaa>
    471e:	62 1b       	sub	r22, r18
    4720:	73 0b       	sbc	r23, r19
    4722:	84 0b       	sbc	r24, r20
    4724:	ba 0b       	sbc	r27, r26
    4726:	ee 1f       	adc	r30, r30
    4728:	88 f7       	brcc	.-30     	; 0x470c <__divsf3_pse+0x90>
    472a:	e0 95       	com	r30
    472c:	08 95       	ret

0000472e <__fp_mpack>:
    472e:	9f 3f       	cpi	r25, 0xFF	; 255
    4730:	31 f0       	breq	.+12     	; 0x473e <__fp_mpack_finite+0xc>

00004732 <__fp_mpack_finite>:
    4732:	91 50       	subi	r25, 0x01	; 1
    4734:	20 f4       	brcc	.+8      	; 0x473e <__fp_mpack_finite+0xc>
    4736:	87 95       	ror	r24
    4738:	77 95       	ror	r23
    473a:	67 95       	ror	r22
    473c:	b7 95       	ror	r27
    473e:	88 0f       	add	r24, r24
    4740:	91 1d       	adc	r25, r1
    4742:	96 95       	lsr	r25
    4744:	87 95       	ror	r24
    4746:	97 f9       	bld	r25, 7
    4748:	08 95       	ret

0000474a <__mulsi3>:
    474a:	db 01       	movw	r26, r22
    474c:	8f 93       	push	r24
    474e:	9f 93       	push	r25
    4750:	88 d0       	rcall	.+272    	; 0x4862 <__muluhisi3>
    4752:	bf 91       	pop	r27
    4754:	af 91       	pop	r26
    4756:	a2 9f       	mul	r26, r18
    4758:	80 0d       	add	r24, r0
    475a:	91 1d       	adc	r25, r1
    475c:	a3 9f       	mul	r26, r19
    475e:	90 0d       	add	r25, r0
    4760:	b2 9f       	mul	r27, r18
    4762:	90 0d       	add	r25, r0
    4764:	11 24       	eor	r1, r1
    4766:	08 95       	ret

00004768 <__udivmodhi4>:
    4768:	aa 1b       	sub	r26, r26
    476a:	bb 1b       	sub	r27, r27
    476c:	51 e1       	ldi	r21, 0x11	; 17
    476e:	07 c0       	rjmp	.+14     	; 0x477e <__udivmodhi4_ep>

00004770 <__udivmodhi4_loop>:
    4770:	aa 1f       	adc	r26, r26
    4772:	bb 1f       	adc	r27, r27
    4774:	a6 17       	cp	r26, r22
    4776:	b7 07       	cpc	r27, r23
    4778:	10 f0       	brcs	.+4      	; 0x477e <__udivmodhi4_ep>
    477a:	a6 1b       	sub	r26, r22
    477c:	b7 0b       	sbc	r27, r23

0000477e <__udivmodhi4_ep>:
    477e:	88 1f       	adc	r24, r24
    4780:	99 1f       	adc	r25, r25
    4782:	5a 95       	dec	r21
    4784:	a9 f7       	brne	.-22     	; 0x4770 <__udivmodhi4_loop>
    4786:	80 95       	com	r24
    4788:	90 95       	com	r25
    478a:	bc 01       	movw	r22, r24
    478c:	cd 01       	movw	r24, r26
    478e:	08 95       	ret

00004790 <__divmodhi4>:
    4790:	97 fb       	bst	r25, 7
    4792:	07 2e       	mov	r0, r23
    4794:	16 f4       	brtc	.+4      	; 0x479a <__divmodhi4+0xa>
    4796:	00 94       	com	r0
    4798:	06 d0       	rcall	.+12     	; 0x47a6 <__divmodhi4_neg1>
    479a:	77 fd       	sbrc	r23, 7
    479c:	08 d0       	rcall	.+16     	; 0x47ae <__divmodhi4_neg2>
    479e:	e4 df       	rcall	.-56     	; 0x4768 <__udivmodhi4>
    47a0:	07 fc       	sbrc	r0, 7
    47a2:	05 d0       	rcall	.+10     	; 0x47ae <__divmodhi4_neg2>
    47a4:	3e f4       	brtc	.+14     	; 0x47b4 <__divmodhi4_exit>

000047a6 <__divmodhi4_neg1>:
    47a6:	90 95       	com	r25
    47a8:	81 95       	neg	r24
    47aa:	9f 4f       	sbci	r25, 0xFF	; 255
    47ac:	08 95       	ret

000047ae <__divmodhi4_neg2>:
    47ae:	70 95       	com	r23
    47b0:	61 95       	neg	r22
    47b2:	7f 4f       	sbci	r23, 0xFF	; 255

000047b4 <__divmodhi4_exit>:
    47b4:	08 95       	ret

000047b6 <__udivmodsi4>:
    47b6:	a1 e2       	ldi	r26, 0x21	; 33
    47b8:	1a 2e       	mov	r1, r26
    47ba:	aa 1b       	sub	r26, r26
    47bc:	bb 1b       	sub	r27, r27
    47be:	fd 01       	movw	r30, r26
    47c0:	0d c0       	rjmp	.+26     	; 0x47dc <__udivmodsi4_ep>

000047c2 <__udivmodsi4_loop>:
    47c2:	aa 1f       	adc	r26, r26
    47c4:	bb 1f       	adc	r27, r27
    47c6:	ee 1f       	adc	r30, r30
    47c8:	ff 1f       	adc	r31, r31
    47ca:	a2 17       	cp	r26, r18
    47cc:	b3 07       	cpc	r27, r19
    47ce:	e4 07       	cpc	r30, r20
    47d0:	f5 07       	cpc	r31, r21
    47d2:	20 f0       	brcs	.+8      	; 0x47dc <__udivmodsi4_ep>
    47d4:	a2 1b       	sub	r26, r18
    47d6:	b3 0b       	sbc	r27, r19
    47d8:	e4 0b       	sbc	r30, r20
    47da:	f5 0b       	sbc	r31, r21

000047dc <__udivmodsi4_ep>:
    47dc:	66 1f       	adc	r22, r22
    47de:	77 1f       	adc	r23, r23
    47e0:	88 1f       	adc	r24, r24
    47e2:	99 1f       	adc	r25, r25
    47e4:	1a 94       	dec	r1
    47e6:	69 f7       	brne	.-38     	; 0x47c2 <__udivmodsi4_loop>
    47e8:	60 95       	com	r22
    47ea:	70 95       	com	r23
    47ec:	80 95       	com	r24
    47ee:	90 95       	com	r25
    47f0:	9b 01       	movw	r18, r22
    47f2:	ac 01       	movw	r20, r24
    47f4:	bd 01       	movw	r22, r26
    47f6:	cf 01       	movw	r24, r30
    47f8:	08 95       	ret

000047fa <__divmodsi4>:
    47fa:	05 2e       	mov	r0, r21
    47fc:	97 fb       	bst	r25, 7
    47fe:	16 f4       	brtc	.+4      	; 0x4804 <__divmodsi4+0xa>
    4800:	00 94       	com	r0
    4802:	0f d0       	rcall	.+30     	; 0x4822 <__negsi2>
    4804:	57 fd       	sbrc	r21, 7
    4806:	05 d0       	rcall	.+10     	; 0x4812 <__divmodsi4_neg2>
    4808:	d6 df       	rcall	.-84     	; 0x47b6 <__udivmodsi4>
    480a:	07 fc       	sbrc	r0, 7
    480c:	02 d0       	rcall	.+4      	; 0x4812 <__divmodsi4_neg2>
    480e:	46 f4       	brtc	.+16     	; 0x4820 <__divmodsi4_exit>
    4810:	08 c0       	rjmp	.+16     	; 0x4822 <__negsi2>

00004812 <__divmodsi4_neg2>:
    4812:	50 95       	com	r21
    4814:	40 95       	com	r20
    4816:	30 95       	com	r19
    4818:	21 95       	neg	r18
    481a:	3f 4f       	sbci	r19, 0xFF	; 255
    481c:	4f 4f       	sbci	r20, 0xFF	; 255
    481e:	5f 4f       	sbci	r21, 0xFF	; 255

00004820 <__divmodsi4_exit>:
    4820:	08 95       	ret

00004822 <__negsi2>:
    4822:	90 95       	com	r25
    4824:	80 95       	com	r24
    4826:	70 95       	com	r23
    4828:	61 95       	neg	r22
    482a:	7f 4f       	sbci	r23, 0xFF	; 255
    482c:	8f 4f       	sbci	r24, 0xFF	; 255
    482e:	9f 4f       	sbci	r25, 0xFF	; 255
    4830:	08 95       	ret

00004832 <__tablejump2__>:
    4832:	ee 0f       	add	r30, r30
    4834:	ff 1f       	adc	r31, r31
    4836:	00 24       	eor	r0, r0
    4838:	00 1c       	adc	r0, r0
    483a:	0b be       	out	0x3b, r0	; 59
    483c:	07 90       	elpm	r0, Z+
    483e:	f6 91       	elpm	r31, Z
    4840:	e0 2d       	mov	r30, r0
    4842:	09 94       	ijmp

00004844 <__umulhisi3>:
    4844:	a2 9f       	mul	r26, r18
    4846:	b0 01       	movw	r22, r0
    4848:	b3 9f       	mul	r27, r19
    484a:	c0 01       	movw	r24, r0
    484c:	a3 9f       	mul	r26, r19
    484e:	70 0d       	add	r23, r0
    4850:	81 1d       	adc	r24, r1
    4852:	11 24       	eor	r1, r1
    4854:	91 1d       	adc	r25, r1
    4856:	b2 9f       	mul	r27, r18
    4858:	70 0d       	add	r23, r0
    485a:	81 1d       	adc	r24, r1
    485c:	11 24       	eor	r1, r1
    485e:	91 1d       	adc	r25, r1
    4860:	08 95       	ret

00004862 <__muluhisi3>:
    4862:	f0 df       	rcall	.-32     	; 0x4844 <__umulhisi3>
    4864:	a5 9f       	mul	r26, r21
    4866:	90 0d       	add	r25, r0
    4868:	b4 9f       	mul	r27, r20
    486a:	90 0d       	add	r25, r0
    486c:	a4 9f       	mul	r26, r20
    486e:	80 0d       	add	r24, r0
    4870:	91 1d       	adc	r25, r1
    4872:	11 24       	eor	r1, r1
    4874:	08 95       	ret

00004876 <strcmp>:
    4876:	fb 01       	movw	r30, r22
    4878:	dc 01       	movw	r26, r24
    487a:	8d 91       	ld	r24, X+
    487c:	01 90       	ld	r0, Z+
    487e:	80 19       	sub	r24, r0
    4880:	01 10       	cpse	r0, r1
    4882:	d9 f3       	breq	.-10     	; 0x487a <strcmp+0x4>
    4884:	99 0b       	sbc	r25, r25
    4886:	08 95       	ret

00004888 <strcpy>:
    4888:	fb 01       	movw	r30, r22
    488a:	dc 01       	movw	r26, r24
    488c:	01 90       	ld	r0, Z+
    488e:	0d 92       	st	X+, r0
    4890:	00 20       	and	r0, r0
    4892:	e1 f7       	brne	.-8      	; 0x488c <strcpy+0x4>
    4894:	08 95       	ret

00004896 <strncpy>:
    4896:	fb 01       	movw	r30, r22
    4898:	dc 01       	movw	r26, r24
    489a:	41 50       	subi	r20, 0x01	; 1
    489c:	50 40       	sbci	r21, 0x00	; 0
    489e:	48 f0       	brcs	.+18     	; 0x48b2 <strncpy+0x1c>
    48a0:	01 90       	ld	r0, Z+
    48a2:	0d 92       	st	X+, r0
    48a4:	00 20       	and	r0, r0
    48a6:	c9 f7       	brne	.-14     	; 0x489a <strncpy+0x4>
    48a8:	01 c0       	rjmp	.+2      	; 0x48ac <strncpy+0x16>
    48aa:	1d 92       	st	X+, r1
    48ac:	41 50       	subi	r20, 0x01	; 1
    48ae:	50 40       	sbci	r21, 0x00	; 0
    48b0:	e0 f7       	brcc	.-8      	; 0x48aa <strncpy+0x14>
    48b2:	08 95       	ret

000048b4 <_exit>:
    48b4:	f8 94       	cli

000048b6 <__stop_program>:
    48b6:	ff cf       	rjmp	.-2      	; 0x48b6 <__stop_program>
