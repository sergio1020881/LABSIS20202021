
Atmega128.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000052  00800100  000022b6  0000234a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000022b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d4  00800152  00800152  0000239c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000239c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000023cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000440  00000000  00000000  00002408  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004f04  00000000  00000000  00002848  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001435  00000000  00000000  0000774c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002b43  00000000  00000000  00008b81  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ae4  00000000  00000000  0000b6c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ff1  00000000  00000000  0000c1a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000034f2  00000000  00000000  0000d199  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003d0  00000000  00000000  0001068b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	60 c0       	rjmp	.+192    	; 0xc2 <__ctors_end>
       2:	00 00       	nop
       4:	7d c0       	rjmp	.+250    	; 0x100 <__bad_interrupt>
       6:	00 00       	nop
       8:	7b c0       	rjmp	.+246    	; 0x100 <__bad_interrupt>
       a:	00 00       	nop
       c:	79 c0       	rjmp	.+242    	; 0x100 <__bad_interrupt>
       e:	00 00       	nop
      10:	77 c0       	rjmp	.+238    	; 0x100 <__bad_interrupt>
      12:	00 00       	nop
      14:	75 c0       	rjmp	.+234    	; 0x100 <__bad_interrupt>
      16:	00 00       	nop
      18:	73 c0       	rjmp	.+230    	; 0x100 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	71 c0       	rjmp	.+226    	; 0x100 <__bad_interrupt>
      1e:	00 00       	nop
      20:	6f c0       	rjmp	.+222    	; 0x100 <__bad_interrupt>
      22:	00 00       	nop
      24:	6d c0       	rjmp	.+218    	; 0x100 <__bad_interrupt>
      26:	00 00       	nop
      28:	6b c0       	rjmp	.+214    	; 0x100 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	69 c0       	rjmp	.+210    	; 0x100 <__bad_interrupt>
      2e:	00 00       	nop
      30:	67 c0       	rjmp	.+206    	; 0x100 <__bad_interrupt>
      32:	00 00       	nop
      34:	65 c0       	rjmp	.+202    	; 0x100 <__bad_interrupt>
      36:	00 00       	nop
      38:	63 c0       	rjmp	.+198    	; 0x100 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	0c 94 7f 10 	jmp	0x20fe	; 0x20fe <__vector_15>
      40:	5f c0       	rjmp	.+190    	; 0x100 <__bad_interrupt>
      42:	00 00       	nop
      44:	5d c0       	rjmp	.+186    	; 0x100 <__bad_interrupt>
      46:	00 00       	nop
      48:	5b c0       	rjmp	.+182    	; 0x100 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	59 c0       	rjmp	.+178    	; 0x100 <__bad_interrupt>
      4e:	00 00       	nop
      50:	57 c0       	rjmp	.+174    	; 0x100 <__bad_interrupt>
      52:	00 00       	nop
      54:	f6 c0       	rjmp	.+492    	; 0x242 <__vector_21>
      56:	00 00       	nop
      58:	53 c0       	rjmp	.+166    	; 0x100 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	51 c0       	rjmp	.+162    	; 0x100 <__bad_interrupt>
      5e:	00 00       	nop
      60:	4f c0       	rjmp	.+158    	; 0x100 <__bad_interrupt>
      62:	00 00       	nop
      64:	4d c0       	rjmp	.+154    	; 0x100 <__bad_interrupt>
      66:	00 00       	nop
      68:	4b c0       	rjmp	.+150    	; 0x100 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	49 c0       	rjmp	.+146    	; 0x100 <__bad_interrupt>
      6e:	00 00       	nop
      70:	47 c0       	rjmp	.+142    	; 0x100 <__bad_interrupt>
      72:	00 00       	nop
      74:	45 c0       	rjmp	.+138    	; 0x100 <__bad_interrupt>
      76:	00 00       	nop
      78:	43 c0       	rjmp	.+134    	; 0x100 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	41 c0       	rjmp	.+130    	; 0x100 <__bad_interrupt>
      7e:	00 00       	nop
      80:	3f c0       	rjmp	.+126    	; 0x100 <__bad_interrupt>
      82:	00 00       	nop
      84:	3d c0       	rjmp	.+122    	; 0x100 <__bad_interrupt>
      86:	00 00       	nop
      88:	3b c0       	rjmp	.+118    	; 0x100 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e3 0c       	add	r14, r3
      8e:	e7 0c       	add	r14, r7
      90:	eb 0c       	add	r14, r11
      92:	ef 0c       	add	r14, r15
      94:	f3 0c       	add	r15, r3
      96:	fa 0c       	add	r15, r10
      98:	01 0d       	add	r16, r1
      9a:	08 0d       	add	r16, r8
      9c:	0c 0d       	add	r16, r12
      9e:	13 0d       	add	r17, r3
      a0:	1a 0d       	add	r17, r10
      a2:	21 0d       	add	r18, r1
      a4:	25 0d       	add	r18, r5
      a6:	2c 0d       	add	r18, r12
      a8:	33 0d       	add	r19, r3
      aa:	4e 0d       	add	r20, r14
      ac:	52 0d       	add	r21, r2
      ae:	56 0d       	add	r21, r6
      b0:	5a 0d       	add	r21, r10
      b2:	60 0d       	add	r22, r0
      b4:	64 0d       	add	r22, r4
      b6:	68 0d       	add	r22, r8
      b8:	6c 0d       	add	r22, r12
      ba:	75 0d       	add	r23, r5
      bc:	79 0d       	add	r23, r9
      be:	7d 0d       	add	r23, r13
      c0:	86 0d       	add	r24, r6

000000c2 <__ctors_end>:
      c2:	11 24       	eor	r1, r1
      c4:	1f be       	out	0x3f, r1	; 63
      c6:	cf ef       	ldi	r28, 0xFF	; 255
      c8:	d0 e1       	ldi	r29, 0x10	; 16
      ca:	de bf       	out	0x3e, r29	; 62
      cc:	cd bf       	out	0x3d, r28	; 61

000000ce <__do_copy_data>:
      ce:	11 e0       	ldi	r17, 0x01	; 1
      d0:	a0 e0       	ldi	r26, 0x00	; 0
      d2:	b1 e0       	ldi	r27, 0x01	; 1
      d4:	e6 eb       	ldi	r30, 0xB6	; 182
      d6:	f2 e2       	ldi	r31, 0x22	; 34
      d8:	00 e0       	ldi	r16, 0x00	; 0
      da:	0b bf       	out	0x3b, r16	; 59
      dc:	02 c0       	rjmp	.+4      	; 0xe2 <__do_copy_data+0x14>
      de:	07 90       	elpm	r0, Z+
      e0:	0d 92       	st	X+, r0
      e2:	a2 35       	cpi	r26, 0x52	; 82
      e4:	b1 07       	cpc	r27, r17
      e6:	d9 f7       	brne	.-10     	; 0xde <__do_copy_data+0x10>

000000e8 <__do_clear_bss>:
      e8:	22 e0       	ldi	r18, 0x02	; 2
      ea:	a2 e5       	ldi	r26, 0x52	; 82
      ec:	b1 e0       	ldi	r27, 0x01	; 1
      ee:	01 c0       	rjmp	.+2      	; 0xf2 <.do_clear_bss_start>

000000f0 <.do_clear_bss_loop>:
      f0:	1d 92       	st	X+, r1

000000f2 <.do_clear_bss_start>:
      f2:	a6 32       	cpi	r26, 0x26	; 38
      f4:	b2 07       	cpc	r27, r18
      f6:	e1 f7       	brne	.-8      	; 0xf0 <.do_clear_bss_loop>
      f8:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <main>
      fc:	0c 94 59 11 	jmp	0x22b2	; 0x22b2 <_exit>

00000100 <__bad_interrupt>:
     100:	7f cf       	rjmp	.-258    	; 0x0 <__vectors>

00000102 <ANALOG_read>:
* Returns selected Channel ADC_VALUE
*/
{
	uint8_t ADSC_FLAG;
	ADSC_FLAG=(1<<ADSC);
	if( !(ADC_CONTROL & ADSC_FLAG) ){
     102:	36 9b       	sbis	0x06, 6	; 6
		//ADC_SELECT
		/***/
		ADC_CONTROL|=(1<<ADSC);
     104:	36 9a       	sbi	0x06, 6	; 6
	}	
	return ADC_VALUE[selection];
     106:	fc 01       	movw	r30, r24
     108:	ee 0f       	add	r30, r30
     10a:	ff 1f       	adc	r31, r31
     10c:	e5 59       	subi	r30, 0x95	; 149
     10e:	fe 4f       	sbci	r31, 0xFE	; 254
     110:	80 81       	ld	r24, Z
     112:	91 81       	ldd	r25, Z+1	; 0x01
}
     114:	08 95       	ret

00000116 <ANALOGenable>:
ANALOG ANALOGenable( uint8_t Vreff, uint8_t Divfactor, int n_channel, ... )
/*
* Interrupt running mode setup
* setup, and list of channels to be probed
*/
{
     116:	0f 93       	push	r16
     118:	1f 93       	push	r17
     11a:	cf 93       	push	r28
     11c:	df 93       	push	r29
     11e:	cd b7       	in	r28, 0x3d	; 61
     120:	de b7       	in	r29, 0x3e	; 62
     122:	9f 81       	ldd	r25, Y+7	; 0x07
     124:	68 85       	ldd	r22, Y+8	; 0x08
     126:	49 85       	ldd	r20, Y+9	; 0x09
     128:	5a 85       	ldd	r21, Y+10	; 0x0a
	/***LOCAL VARIABLES***/
	uint8_t tSREG;
	va_list list;
	int i;
	//inic variables
	tSREG=SREG;
     12a:	1f b7       	in	r17, 0x3f	; 63
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
     12c:	8f b7       	in	r24, 0x3f	; 63
     12e:	8f 77       	andi	r24, 0x7F	; 127
     130:	8f bf       	out	0x3f, r24	; 63
	/***GLOBAL VARIABLES INICIALIZE***/
	ADC_N_CHANNEL=n_channel;
     132:	50 93 5a 01 	sts	0x015A, r21	; 0x80015a <ADC_N_CHANNEL+0x1>
     136:	40 93 59 01 	sts	0x0159, r20	; 0x800159 <ADC_N_CHANNEL>
	ADC_SELECTOR=0;
     13a:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <ADC_SELECTOR+0x1>
     13e:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <ADC_SELECTOR>
	adc_n_sample=0;
     142:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <__data_end>
	//Direccionar apontadores para PROTOTIPOS
	analog.read=ANALOG_read;
	/***Pre-Processor Case 1***/
	#if defined( ATMEGA_ANALOG )
		/******/
		ADC_SELECT&=~(3<<REFS0);
     146:	87 b1       	in	r24, 0x07	; 7
     148:	8f 73       	andi	r24, 0x3F	; 63
     14a:	87 b9       	out	0x07, r24	; 7
		switch( Vreff ){
     14c:	91 30       	cpi	r25, 0x01	; 1
     14e:	19 f0       	breq	.+6      	; 0x156 <ANALOGenable+0x40>
     150:	93 30       	cpi	r25, 0x03	; 3
     152:	21 f0       	breq	.+8      	; 0x15c <ANALOGenable+0x46>
     154:	08 c0       	rjmp	.+16     	; 0x166 <ANALOGenable+0x50>
			case 0:
				analog.VREFF=0;
				break;
			case 1:
				ADC_SELECT|=(1<<REFS0);
     156:	3e 9a       	sbi	0x07, 6	; 7
				analog.VREFF=1;
     158:	01 e0       	ldi	r16, 0x01	; 1
				break;
     15a:	06 c0       	rjmp	.+12     	; 0x168 <ANALOGenable+0x52>
			case 3:
				ADC_SELECT|=(3<<REFS0);
     15c:	87 b1       	in	r24, 0x07	; 7
     15e:	80 6c       	ori	r24, 0xC0	; 192
     160:	87 b9       	out	0x07, r24	; 7
				analog.VREFF=3;
     162:	03 e0       	ldi	r16, 0x03	; 3
				break;
     164:	01 c0       	rjmp	.+2      	; 0x168 <ANALOGenable+0x52>
	#if defined( ATMEGA_ANALOG )
		/******/
		ADC_SELECT&=~(3<<REFS0);
		switch( Vreff ){
			case 0:
				analog.VREFF=0;
     166:	00 e0       	ldi	r16, 0x00	; 0
			default:
				analog.VREFF=0;
				break;
		}
		//
		ADC_SELECT&=~(1<<ADLAR);
     168:	3d 98       	cbi	0x07, 5	; 7
		/******/
		va_start(list, n_channel);
		for(i=0;i<n_channel;i++){
     16a:	14 16       	cp	r1, r20
     16c:	15 06       	cpc	r1, r21
     16e:	8c f4       	brge	.+34     	; 0x192 <ANALOGenable+0x7c>
     170:	de 01       	movw	r26, r28
     172:	1b 96       	adiw	r26, 0x0b	; 11
     174:	80 e0       	ldi	r24, 0x00	; 0
     176:	90 e0       	ldi	r25, 0x00	; 0
			ADC_CHANNEL_GAIN[i] = va_arg(list, int);
     178:	2d 91       	ld	r18, X+
     17a:	3d 91       	ld	r19, X+
     17c:	fc 01       	movw	r30, r24
     17e:	ee 0f       	add	r30, r30
     180:	ff 1f       	adc	r31, r31
     182:	e5 5a       	subi	r30, 0xA5	; 165
     184:	fe 4f       	sbci	r31, 0xFE	; 254
     186:	31 83       	std	Z+1, r19	; 0x01
     188:	20 83       	st	Z, r18
		}
		//
		ADC_SELECT&=~(1<<ADLAR);
		/******/
		va_start(list, n_channel);
		for(i=0;i<n_channel;i++){
     18a:	01 96       	adiw	r24, 0x01	; 1
     18c:	48 17       	cp	r20, r24
     18e:	59 07       	cpc	r21, r25
     190:	99 f7       	brne	.-26     	; 0x178 <ANALOGenable+0x62>
			ADC_CHANNEL_GAIN[i] = va_arg(list, int);
		}
		va_end(list);
		ADC_SELECT&=~MUX_MASK;
     192:	87 b1       	in	r24, 0x07	; 7
     194:	80 7e       	andi	r24, 0xE0	; 224
     196:	87 b9       	out	0x07, r24	; 7
		ADC_SELECT|=(MUX_MASK & ADC_CHANNEL_GAIN[ADC_SELECTOR]);
     198:	e0 91 57 01 	lds	r30, 0x0157	; 0x800157 <ADC_SELECTOR>
     19c:	f0 91 58 01 	lds	r31, 0x0158	; 0x800158 <ADC_SELECTOR+0x1>
     1a0:	ee 0f       	add	r30, r30
     1a2:	ff 1f       	adc	r31, r31
     1a4:	e5 5a       	subi	r30, 0xA5	; 165
     1a6:	fe 4f       	sbci	r31, 0xFE	; 254
     1a8:	80 81       	ld	r24, Z
     1aa:	91 81       	ldd	r25, Z+1	; 0x01
     1ac:	27 b1       	in	r18, 0x07	; 7
     1ae:	8f 71       	andi	r24, 0x1F	; 31
     1b0:	99 27       	eor	r25, r25
     1b2:	82 2b       	or	r24, r18
     1b4:	87 b9       	out	0x07, r24	; 7
		/******/
		ADC_CONTROL|=(1<<ADEN);
     1b6:	37 9a       	sbi	0x06, 7	; 6
		ADC_CONTROL|=(1<<ADSC);
     1b8:	36 9a       	sbi	0x06, 6	; 6
		ADC_CONTROL&=~(1<<ADFR);
     1ba:	35 98       	cbi	0x06, 5	; 6
		ADC_CONTROL|=(1<<ADIE);
     1bc:	33 9a       	sbi	0x06, 3	; 6
		/******/
		ADC_CONTROL&=~(7<<ADPS0);
     1be:	86 b1       	in	r24, 0x06	; 6
     1c0:	88 7f       	andi	r24, 0xF8	; 248
     1c2:	86 b9       	out	0x06, r24	; 6
		switch( Divfactor ){
     1c4:	60 31       	cpi	r22, 0x10	; 16
     1c6:	d1 f0       	breq	.+52     	; 0x1fc <ANALOGenable+0xe6>
     1c8:	38 f4       	brcc	.+14     	; 0x1d8 <ANALOGenable+0xc2>
     1ca:	64 30       	cpi	r22, 0x04	; 4
     1cc:	79 f0       	breq	.+30     	; 0x1ec <ANALOGenable+0xd6>
     1ce:	68 30       	cpi	r22, 0x08	; 8
     1d0:	81 f0       	breq	.+32     	; 0x1f2 <ANALOGenable+0xdc>
     1d2:	62 30       	cpi	r22, 0x02	; 2
     1d4:	29 f5       	brne	.+74     	; 0x220 <ANALOGenable+0x10a>
     1d6:	07 c0       	rjmp	.+14     	; 0x1e6 <ANALOGenable+0xd0>
     1d8:	60 34       	cpi	r22, 0x40	; 64
     1da:	c1 f0       	breq	.+48     	; 0x20c <ANALOGenable+0xf6>
     1dc:	60 38       	cpi	r22, 0x80	; 128
     1de:	d9 f0       	breq	.+54     	; 0x216 <ANALOGenable+0x100>
     1e0:	60 32       	cpi	r22, 0x20	; 32
     1e2:	f1 f4       	brne	.+60     	; 0x220 <ANALOGenable+0x10a>
     1e4:	0e c0       	rjmp	.+28     	; 0x202 <ANALOGenable+0xec>
			case 2://1
				ADC_CONTROL|=(1<<ADPS0);
     1e6:	30 9a       	sbi	0x06, 0	; 6
				analog.DIVISION_FACTOR=2;
     1e8:	22 e0       	ldi	r18, 0x02	; 2
				break;
     1ea:	1e c0       	rjmp	.+60     	; 0x228 <ANALOGenable+0x112>
			case 4://2
				ADC_CONTROL|=(1<<ADPS1);
     1ec:	31 9a       	sbi	0x06, 1	; 6
				analog.DIVISION_FACTOR=4;
     1ee:	24 e0       	ldi	r18, 0x04	; 4
				break;
     1f0:	1b c0       	rjmp	.+54     	; 0x228 <ANALOGenable+0x112>
			case 8://3
				ADC_CONTROL|=(3<<ADPS0);
     1f2:	86 b1       	in	r24, 0x06	; 6
     1f4:	83 60       	ori	r24, 0x03	; 3
     1f6:	86 b9       	out	0x06, r24	; 6
				analog.DIVISION_FACTOR=8;
     1f8:	28 e0       	ldi	r18, 0x08	; 8
				break;
     1fa:	16 c0       	rjmp	.+44     	; 0x228 <ANALOGenable+0x112>
			case 16://4
				ADC_CONTROL|=(1<<ADPS2);
     1fc:	32 9a       	sbi	0x06, 2	; 6
				analog.DIVISION_FACTOR=16;
     1fe:	20 e1       	ldi	r18, 0x10	; 16
				break;
     200:	13 c0       	rjmp	.+38     	; 0x228 <ANALOGenable+0x112>
			case 32://5
				ADC_CONTROL|=(5<<ADPS0);
     202:	86 b1       	in	r24, 0x06	; 6
     204:	85 60       	ori	r24, 0x05	; 5
     206:	86 b9       	out	0x06, r24	; 6
				analog.DIVISION_FACTOR=32;
     208:	20 e2       	ldi	r18, 0x20	; 32
				break;
     20a:	0e c0       	rjmp	.+28     	; 0x228 <ANALOGenable+0x112>
			case 64://6
				ADC_CONTROL|=(6<<ADPS0);
     20c:	86 b1       	in	r24, 0x06	; 6
     20e:	86 60       	ori	r24, 0x06	; 6
     210:	86 b9       	out	0x06, r24	; 6
				analog.DIVISION_FACTOR=64;
     212:	20 e4       	ldi	r18, 0x40	; 64
				break;
     214:	09 c0       	rjmp	.+18     	; 0x228 <ANALOGenable+0x112>
			case 128://7
				ADC_CONTROL|=(7<<ADPS0);
     216:	86 b1       	in	r24, 0x06	; 6
     218:	87 60       	ori	r24, 0x07	; 7
     21a:	86 b9       	out	0x06, r24	; 6
				analog.DIVISION_FACTOR=128;
     21c:	20 e8       	ldi	r18, 0x80	; 128
				break;
     21e:	04 c0       	rjmp	.+8      	; 0x228 <ANALOGenable+0x112>
			default:
				ADC_CONTROL|=(7<<ADPS0);
     220:	86 b1       	in	r24, 0x06	; 6
     222:	87 60       	ori	r24, 0x07	; 7
     224:	86 b9       	out	0x06, r24	; 6
				analog.DIVISION_FACTOR=128;
     226:	20 e8       	ldi	r18, 0x80	; 128
				ADC_CONTROL|=(7<<ADPS0);
				analog.DIVISION_FACTOR=128;
				break;
		}
	#endif
	SREG=tSREG;
     228:	1f bf       	out	0x3f, r17	; 63
	SREG|=(1<<GLOBAL_INTERRUPT_ENABLE);
     22a:	8f b7       	in	r24, 0x3f	; 63
     22c:	80 68       	ori	r24, 0x80	; 128
     22e:	8f bf       	out	0x3f, r24	; 63
	/******/
	return analog;
     230:	60 2f       	mov	r22, r16
     232:	72 2f       	mov	r23, r18
     234:	81 e8       	ldi	r24, 0x81	; 129
     236:	90 e0       	ldi	r25, 0x00	; 0
}
     238:	df 91       	pop	r29
     23a:	cf 91       	pop	r28
     23c:	1f 91       	pop	r17
     23e:	0f 91       	pop	r16
     240:	08 95       	ret

00000242 <__vector_21>:
ISR(ANALOG_INTERRUPT)
/*************************************************************************
Function: ANALOG interrupt
Purpose:  Read Analog Input
**************************************************************************/
{
     242:	1f 92       	push	r1
     244:	0f 92       	push	r0
     246:	0f b6       	in	r0, 0x3f	; 63
     248:	0f 92       	push	r0
     24a:	11 24       	eor	r1, r1
     24c:	0b b6       	in	r0, 0x3b	; 59
     24e:	0f 92       	push	r0
     250:	2f 93       	push	r18
     252:	3f 93       	push	r19
     254:	8f 93       	push	r24
     256:	9f 93       	push	r25
     258:	ef 93       	push	r30
     25a:	ff 93       	push	r31
	/******/
	adc_tmp=ADCL;
     25c:	84 b1       	in	r24, 0x04	; 4
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	90 93 54 01 	sts	0x0154, r25	; 0x800154 <adc_tmp+0x1>
     264:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <adc_tmp>
	adc_tmp|=(ADCH<<8);
     268:	25 b1       	in	r18, 0x05	; 5
     26a:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <adc_tmp>
     26e:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <adc_tmp+0x1>
     272:	92 2b       	or	r25, r18
     274:	90 93 54 01 	sts	0x0154, r25	; 0x800154 <adc_tmp+0x1>
     278:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <adc_tmp>
	if(adc_n_sample < (1<<ADC_NUMBER_SAMPLE)){
     27c:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <__data_end>
     280:	84 30       	cpi	r24, 0x04	; 4
     282:	a0 f4       	brcc	.+40     	; 0x2ac <__vector_21+0x6a>
		adc_n_sample++;
     284:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <__data_end>
     288:	8f 5f       	subi	r24, 0xFF	; 255
     28a:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <__data_end>
		adc_sample+=adc_tmp;
     28e:	20 91 53 01 	lds	r18, 0x0153	; 0x800153 <adc_tmp>
     292:	30 91 54 01 	lds	r19, 0x0154	; 0x800154 <adc_tmp+0x1>
     296:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <adc_sample>
     29a:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <adc_sample+0x1>
     29e:	82 0f       	add	r24, r18
     2a0:	93 1f       	adc	r25, r19
     2a2:	90 93 56 01 	sts	0x0156, r25	; 0x800156 <adc_sample+0x1>
     2a6:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <adc_sample>
     2aa:	43 c0       	rjmp	.+134    	; 0x332 <__vector_21+0xf0>
	}else{
		ADC_VALUE[ADC_SELECTOR]=adc_sample>>ADC_NUMBER_SAMPLE;
     2ac:	e0 91 57 01 	lds	r30, 0x0157	; 0x800157 <ADC_SELECTOR>
     2b0:	f0 91 58 01 	lds	r31, 0x0158	; 0x800158 <ADC_SELECTOR+0x1>
     2b4:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <adc_sample>
     2b8:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <adc_sample+0x1>
     2bc:	95 95       	asr	r25
     2be:	87 95       	ror	r24
     2c0:	95 95       	asr	r25
     2c2:	87 95       	ror	r24
     2c4:	ee 0f       	add	r30, r30
     2c6:	ff 1f       	adc	r31, r31
     2c8:	e5 59       	subi	r30, 0x95	; 149
     2ca:	fe 4f       	sbci	r31, 0xFE	; 254
     2cc:	91 83       	std	Z+1, r25	; 0x01
     2ce:	80 83       	st	Z, r24
		adc_n_sample=adc_sample=0;
     2d0:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <adc_sample+0x1>
     2d4:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <adc_sample>
     2d8:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <__data_end>
		/******/
		if(ADC_SELECTOR < ADC_N_CHANNEL)
     2dc:	20 91 57 01 	lds	r18, 0x0157	; 0x800157 <ADC_SELECTOR>
     2e0:	30 91 58 01 	lds	r19, 0x0158	; 0x800158 <ADC_SELECTOR+0x1>
     2e4:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <ADC_N_CHANNEL>
     2e8:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <ADC_N_CHANNEL+0x1>
     2ec:	28 17       	cp	r18, r24
     2ee:	39 07       	cpc	r19, r25
     2f0:	54 f4       	brge	.+20     	; 0x306 <__vector_21+0xc4>
			ADC_SELECTOR++;
     2f2:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <ADC_SELECTOR>
     2f6:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <ADC_SELECTOR+0x1>
     2fa:	01 96       	adiw	r24, 0x01	; 1
     2fc:	90 93 58 01 	sts	0x0158, r25	; 0x800158 <ADC_SELECTOR+0x1>
     300:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <ADC_SELECTOR>
     304:	04 c0       	rjmp	.+8      	; 0x30e <__vector_21+0xcc>
		else
			ADC_SELECTOR=0;
     306:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <ADC_SELECTOR+0x1>
     30a:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <ADC_SELECTOR>
		ADC_SELECT &= ~MUX_MASK;
     30e:	87 b1       	in	r24, 0x07	; 7
     310:	80 7e       	andi	r24, 0xE0	; 224
     312:	87 b9       	out	0x07, r24	; 7
		ADC_SELECT |= (ADC_CHANNEL_GAIN[ADC_SELECTOR] & MUX_MASK);
     314:	e0 91 57 01 	lds	r30, 0x0157	; 0x800157 <ADC_SELECTOR>
     318:	f0 91 58 01 	lds	r31, 0x0158	; 0x800158 <ADC_SELECTOR+0x1>
     31c:	ee 0f       	add	r30, r30
     31e:	ff 1f       	adc	r31, r31
     320:	e5 5a       	subi	r30, 0xA5	; 165
     322:	fe 4f       	sbci	r31, 0xFE	; 254
     324:	80 81       	ld	r24, Z
     326:	91 81       	ldd	r25, Z+1	; 0x01
     328:	27 b1       	in	r18, 0x07	; 7
     32a:	8f 71       	andi	r24, 0x1F	; 31
     32c:	99 27       	eor	r25, r25
     32e:	82 2b       	or	r24, r18
     330:	87 b9       	out	0x07, r24	; 7
	}		
}
     332:	ff 91       	pop	r31
     334:	ef 91       	pop	r30
     336:	9f 91       	pop	r25
     338:	8f 91       	pop	r24
     33a:	3f 91       	pop	r19
     33c:	2f 91       	pop	r18
     33e:	0f 90       	pop	r0
     340:	0b be       	out	0x3b, r0	; 59
     342:	0f 90       	pop	r0
     344:	0f be       	out	0x3f, r0	; 63
     346:	0f 90       	pop	r0
     348:	1f 90       	pop	r1
     34a:	18 95       	reti

0000034c <CLOCK_set>:
	clock.show=CLOCK_show;
	return clock;
}
void CLOCK_set(uint8_t hour, uint8_t minute, uint8_t second)
{
	time.hour=hour;
     34c:	e9 e8       	ldi	r30, 0x89	; 137
     34e:	f1 e0       	ldi	r31, 0x01	; 1
     350:	80 83       	st	Z, r24
	time.minute=minute;
     352:	61 83       	std	Z+1, r22	; 0x01
	time.second=second;
     354:	42 83       	std	Z+2, r20	; 0x02
     356:	08 95       	ret

00000358 <CLOCK_increment>:
}
void CLOCK_increment(void)
{
	time.second++;
     358:	e9 e8       	ldi	r30, 0x89	; 137
     35a:	f1 e0       	ldi	r31, 0x01	; 1
     35c:	82 81       	ldd	r24, Z+2	; 0x02
     35e:	8f 5f       	subi	r24, 0xFF	; 255
     360:	82 83       	std	Z+2, r24	; 0x02
	if(time.second>59){
     362:	8c 33       	cpi	r24, 0x3C	; 60
     364:	0c f4       	brge	.+2      	; 0x368 <CLOCK_increment+0x10>
     366:	7a c0       	rjmp	.+244    	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
		time.minute++;
     368:	81 81       	ldd	r24, Z+1	; 0x01
     36a:	8f 5f       	subi	r24, 0xFF	; 255
     36c:	81 83       	std	Z+1, r24	; 0x01
		time.second=0;
     36e:	12 82       	std	Z+2, r1	; 0x02
		if(time.minute>59){
     370:	8c 33       	cpi	r24, 0x3C	; 60
     372:	44 f0       	brlt	.+16     	; 0x384 <CLOCK_increment+0x2c>
			time.hour++;
     374:	80 81       	ld	r24, Z
     376:	8f 5f       	subi	r24, 0xFF	; 255
     378:	80 83       	st	Z, r24
			time.minute=0;
     37a:	11 82       	std	Z+1, r1	; 0x01
			switch (HORA){
				case 24:
					if(time.hour>23)
     37c:	88 31       	cpi	r24, 0x18	; 24
     37e:	14 f0       	brlt	.+4      	; 0x384 <CLOCK_increment+0x2c>
						time.hour=0;
     380:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <time>
					break;
			}
		}
	}
	/******************************************************************************************************************/
	if(time.hour==laptime.hour && CLOCK_compare_active==4)
     384:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <time>
     388:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <laptime>
     38c:	89 13       	cpse	r24, r25
     38e:	2a c0       	rjmp	.+84     	; 0x3e4 <CLOCK_increment+0x8c>
     390:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <CLOCK_compare_active>
     394:	94 30       	cpi	r25, 0x04	; 4
     396:	09 f0       	breq	.+2      	; 0x39a <CLOCK_increment+0x42>
     398:	53 c0       	rjmp	.+166    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
		CLOCK_compare_active=3;
     39a:	93 e0       	ldi	r25, 0x03	; 3
     39c:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <CLOCK_compare_active>
	if(time.hour==laptime.hour && time.minute==laptime.minute && CLOCK_compare_active==3)
     3a0:	20 91 8d 01 	lds	r18, 0x018D	; 0x80018d <laptime+0x1>
     3a4:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <time+0x1>
     3a8:	29 13       	cpse	r18, r25
     3aa:	09 c0       	rjmp	.+18     	; 0x3be <CLOCK_increment+0x66>
     3ac:	04 c0       	rjmp	.+8      	; 0x3b6 <CLOCK_increment+0x5e>
     3ae:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <CLOCK_compare_active>
     3b2:	93 30       	cpi	r25, 0x03	; 3
     3b4:	51 f4       	brne	.+20     	; 0x3ca <CLOCK_increment+0x72>
		CLOCK_compare_active=2;
     3b6:	92 e0       	ldi	r25, 0x02	; 2
     3b8:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <CLOCK_compare_active>
     3bc:	06 c0       	rjmp	.+12     	; 0x3ca <CLOCK_increment+0x72>
	if(time.hour==laptime.hour && time.minute==laptime.minute && time.second==laptime.second && CLOCK_compare_active==2)
     3be:	20 91 8a 01 	lds	r18, 0x018A	; 0x80018a <time+0x1>
     3c2:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <laptime+0x1>
     3c6:	29 13       	cpse	r18, r25
     3c8:	0d c0       	rjmp	.+26     	; 0x3e4 <CLOCK_increment+0x8c>
     3ca:	20 91 8b 01 	lds	r18, 0x018B	; 0x80018b <time+0x2>
     3ce:	90 91 8e 01 	lds	r25, 0x018E	; 0x80018e <laptime+0x2>
     3d2:	29 13       	cpse	r18, r25
     3d4:	07 c0       	rjmp	.+14     	; 0x3e4 <CLOCK_increment+0x8c>
     3d6:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <CLOCK_compare_active>
     3da:	92 30       	cpi	r25, 0x02	; 2
     3dc:	19 f4       	brne	.+6      	; 0x3e4 <CLOCK_increment+0x8c>
		CLOCK_compare_active=1;
     3de:	91 e0       	ldi	r25, 0x01	; 1
     3e0:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <CLOCK_compare_active>
	/******************************************************************************************************************/
	if(time.hour==alarmtime.hour && CLOCK_alarm_flag==4)
     3e4:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <alarmtime>
     3e8:	98 13       	cpse	r25, r24
     3ea:	3f c0       	rjmp	.+126    	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
     3ec:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <CLOCK_alarm_flag>
     3f0:	84 30       	cpi	r24, 0x04	; 4
     3f2:	69 f5       	brne	.+90     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
		CLOCK_alarm_flag=3;
     3f4:	83 e0       	ldi	r24, 0x03	; 3
     3f6:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <CLOCK_alarm_flag>
	if(time.hour==alarmtime.hour && time.minute==alarmtime.minute && CLOCK_alarm_flag==3)
     3fa:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <time+0x1>
     3fe:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <alarmtime+0x1>
     402:	98 13       	cpse	r25, r24
     404:	09 c0       	rjmp	.+18     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     406:	04 c0       	rjmp	.+8      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     408:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <CLOCK_alarm_flag>
     40c:	83 30       	cpi	r24, 0x03	; 3
     40e:	51 f4       	brne	.+20     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
		CLOCK_alarm_flag=2;
     410:	82 e0       	ldi	r24, 0x02	; 2
     412:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <CLOCK_alarm_flag>
     416:	06 c0       	rjmp	.+12     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
	if(time.hour==alarmtime.hour && time.minute==alarmtime.minute && time.second==alarmtime.second && CLOCK_alarm_flag==2)
     418:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <time+0x1>
     41c:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <alarmtime+0x1>
     420:	98 13       	cpse	r25, r24
     422:	23 c0       	rjmp	.+70     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
     424:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <time+0x2>
     428:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <alarmtime+0x2>
     42c:	98 13       	cpse	r25, r24
     42e:	1d c0       	rjmp	.+58     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
     430:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <CLOCK_alarm_flag>
     434:	82 30       	cpi	r24, 0x02	; 2
     436:	c9 f4       	brne	.+50     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
		CLOCK_alarm_flag=1;
     438:	81 e0       	ldi	r24, 0x01	; 1
     43a:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <CLOCK_alarm_flag>
}
     43e:	08 95       	ret
		}
	}
	/******************************************************************************************************************/
	if(time.hour==laptime.hour && CLOCK_compare_active==4)
		CLOCK_compare_active=3;
	if(time.hour==laptime.hour && time.minute==laptime.minute && CLOCK_compare_active==3)
     440:	20 91 8a 01 	lds	r18, 0x018A	; 0x80018a <time+0x1>
     444:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <laptime+0x1>
     448:	29 13       	cpse	r18, r25
     44a:	cc cf       	rjmp	.-104    	; 0x3e4 <CLOCK_increment+0x8c>
     44c:	b0 cf       	rjmp	.-160    	; 0x3ae <CLOCK_increment+0x56>
	if(time.hour==laptime.hour && time.minute==laptime.minute && time.second==laptime.second && CLOCK_compare_active==2)
		CLOCK_compare_active=1;
	/******************************************************************************************************************/
	if(time.hour==alarmtime.hour && CLOCK_alarm_flag==4)
		CLOCK_alarm_flag=3;
	if(time.hour==alarmtime.hour && time.minute==alarmtime.minute && CLOCK_alarm_flag==3)
     44e:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <time+0x1>
     452:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <alarmtime+0x1>
     456:	98 13       	cpse	r25, r24
     458:	08 c0       	rjmp	.+16     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
     45a:	d6 cf       	rjmp	.-84     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
					break;
			}
		}
	}
	/******************************************************************************************************************/
	if(time.hour==laptime.hour && CLOCK_compare_active==4)
     45c:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <time>
     460:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <laptime>
     464:	98 13       	cpse	r25, r24
     466:	be cf       	rjmp	.-132    	; 0x3e4 <CLOCK_increment+0x8c>
     468:	93 cf       	rjmp	.-218    	; 0x390 <CLOCK_increment+0x38>
     46a:	08 95       	ret

0000046c <CLOCK_decrement>:
	if(time.hour==alarmtime.hour && time.minute==alarmtime.minute && time.second==alarmtime.second && CLOCK_alarm_flag==2)
		CLOCK_alarm_flag=1;
}
void CLOCK_decrement(void)
{
	time.second--;
     46c:	e9 e8       	ldi	r30, 0x89	; 137
     46e:	f1 e0       	ldi	r31, 0x01	; 1
     470:	82 81       	ldd	r24, Z+2	; 0x02
     472:	81 50       	subi	r24, 0x01	; 1
     474:	82 83       	std	Z+2, r24	; 0x02
	if(time.second<0){
     476:	88 23       	and	r24, r24
     478:	0c f0       	brlt	.+2      	; 0x47c <CLOCK_decrement+0x10>
     47a:	47 c0       	rjmp	.+142    	; 0x50a <CLOCK_decrement+0x9e>
		time.minute--;
     47c:	81 81       	ldd	r24, Z+1	; 0x01
     47e:	81 50       	subi	r24, 0x01	; 1
     480:	81 83       	std	Z+1, r24	; 0x01
		time.second=59;
     482:	9b e3       	ldi	r25, 0x3B	; 59
     484:	92 83       	std	Z+2, r25	; 0x02
		if(time.minute<0){
     486:	88 23       	and	r24, r24
     488:	4c f4       	brge	.+18     	; 0x49c <CLOCK_decrement+0x30>
			time.hour--;
     48a:	80 81       	ld	r24, Z
     48c:	81 50       	subi	r24, 0x01	; 1
     48e:	80 83       	st	Z, r24
			time.minute=59;
     490:	91 83       	std	Z+1, r25	; 0x01
			switch (HORA){
				case 24:
					if(time.hour<0)
     492:	88 23       	and	r24, r24
     494:	1c f4       	brge	.+6      	; 0x49c <CLOCK_decrement+0x30>
						time.hour=23;
     496:	87 e1       	ldi	r24, 0x17	; 23
     498:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <time>
					break;
			}
		}
	}
	/******************************************************************************************************************/
	if(time.hour==alarmtime.hour && CLOCK_alarm_flag==4)
     49c:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <time>
     4a0:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <alarmtime>
     4a4:	98 13       	cpse	r25, r24
     4a6:	37 c0       	rjmp	.+110    	; 0x516 <CLOCK_decrement+0xaa>
     4a8:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <CLOCK_alarm_flag>
     4ac:	84 30       	cpi	r24, 0x04	; 4
     4ae:	31 f5       	brne	.+76     	; 0x4fc <CLOCK_decrement+0x90>
		CLOCK_alarm_flag=3;
     4b0:	83 e0       	ldi	r24, 0x03	; 3
     4b2:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <CLOCK_alarm_flag>
	if(time.hour==alarmtime.hour && time.minute==alarmtime.minute && CLOCK_alarm_flag==3)
     4b6:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <time+0x1>
     4ba:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <alarmtime+0x1>
     4be:	98 13       	cpse	r25, r24
     4c0:	09 c0       	rjmp	.+18     	; 0x4d4 <CLOCK_decrement+0x68>
     4c2:	04 c0       	rjmp	.+8      	; 0x4cc <CLOCK_decrement+0x60>
     4c4:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <CLOCK_alarm_flag>
     4c8:	83 30       	cpi	r24, 0x03	; 3
     4ca:	51 f4       	brne	.+20     	; 0x4e0 <CLOCK_decrement+0x74>
		CLOCK_alarm_flag=2;
     4cc:	82 e0       	ldi	r24, 0x02	; 2
     4ce:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <CLOCK_alarm_flag>
     4d2:	06 c0       	rjmp	.+12     	; 0x4e0 <CLOCK_decrement+0x74>
	if(time.hour==alarmtime.hour && time.minute==alarmtime.minute && time.second==alarmtime.second && CLOCK_alarm_flag==2)
     4d4:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <time+0x1>
     4d8:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <alarmtime+0x1>
     4dc:	98 13       	cpse	r25, r24
     4de:	1b c0       	rjmp	.+54     	; 0x516 <CLOCK_decrement+0xaa>
     4e0:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <time+0x2>
     4e4:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <alarmtime+0x2>
     4e8:	98 13       	cpse	r25, r24
     4ea:	15 c0       	rjmp	.+42     	; 0x516 <CLOCK_decrement+0xaa>
     4ec:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <CLOCK_alarm_flag>
     4f0:	82 30       	cpi	r24, 0x02	; 2
     4f2:	89 f4       	brne	.+34     	; 0x516 <CLOCK_decrement+0xaa>
		CLOCK_alarm_flag=1;		
     4f4:	81 e0       	ldi	r24, 0x01	; 1
     4f6:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <CLOCK_alarm_flag>
}
     4fa:	08 95       	ret
		}
	}
	/******************************************************************************************************************/
	if(time.hour==alarmtime.hour && CLOCK_alarm_flag==4)
		CLOCK_alarm_flag=3;
	if(time.hour==alarmtime.hour && time.minute==alarmtime.minute && CLOCK_alarm_flag==3)
     4fc:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <time+0x1>
     500:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <alarmtime+0x1>
     504:	98 13       	cpse	r25, r24
     506:	07 c0       	rjmp	.+14     	; 0x516 <CLOCK_decrement+0xaa>
     508:	dd cf       	rjmp	.-70     	; 0x4c4 <CLOCK_decrement+0x58>
					break;
			}
		}
	}
	/******************************************************************************************************************/
	if(time.hour==alarmtime.hour && CLOCK_alarm_flag==4)
     50a:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <time>
     50e:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <alarmtime>
     512:	98 17       	cp	r25, r24
     514:	49 f2       	breq	.-110    	; 0x4a8 <CLOCK_decrement+0x3c>
     516:	08 95       	ret

00000518 <CLOCK_alarm>:
	if(time.hour==alarmtime.hour && time.minute==alarmtime.minute && time.second==alarmtime.second && CLOCK_alarm_flag==2)
		CLOCK_alarm_flag=1;		
}
uint8_t CLOCK_alarm(uint8_t hour, uint8_t minute, uint8_t second)
{
	if(!CLOCK_alarm_flag){
     518:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <CLOCK_alarm_flag>
     51c:	91 11       	cpse	r25, r1
     51e:	08 c0       	rjmp	.+16     	; 0x530 <CLOCK_alarm+0x18>
		alarmtime.hour=hour;
     520:	e6 e8       	ldi	r30, 0x86	; 134
     522:	f1 e0       	ldi	r31, 0x01	; 1
     524:	80 83       	st	Z, r24
		alarmtime.minute=minute;
     526:	61 83       	std	Z+1, r22	; 0x01
		alarmtime.second=second;
     528:	42 83       	std	Z+2, r20	; 0x02
		CLOCK_alarm_flag=4;
     52a:	84 e0       	ldi	r24, 0x04	; 4
     52c:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <CLOCK_alarm_flag>
	}	
	return CLOCK_alarm_flag;
}
     530:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <CLOCK_alarm_flag>
     534:	08 95       	ret

00000536 <CLOCK_second_count>:
uint8_t CLOCK_second_count(uint16_t second)
{
     536:	cf 92       	push	r12
     538:	df 92       	push	r13
     53a:	ef 92       	push	r14
     53c:	ff 92       	push	r15
     53e:	0f 93       	push	r16
     540:	1f 93       	push	r17
     542:	cf 93       	push	r28
     544:	df 93       	push	r29
     546:	fc 01       	movw	r30, r24
	uint16_t tmp;
	uint8_t tmp_1;
	uint8_t tmp_2;
	uint8_t tmp_3;
	if(!CLOCK_compare_active){
     548:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <CLOCK_compare_active>
     54c:	81 11       	cpse	r24, r1
     54e:	65 c0       	rjmp	.+202    	; 0x61a <CLOCK_second_count+0xe4>
		tmp_3=(int8_t)(second % 60);
		tmp=second/60;
		tmp_2=(int8_t)(tmp % 60);
		tmp=tmp/60;
		tmp_1=(int8_t)tmp;
		laptime.second=(time.second + tmp_3) % 60;
     550:	9f 01       	movw	r18, r30
     552:	a9 e8       	ldi	r26, 0x89	; 137
     554:	b8 e8       	ldi	r27, 0x88	; 136
     556:	0e 94 39 11 	call	0x2272	; 0x2272 <__umulhisi3>
     55a:	6c 01       	movw	r12, r24
     55c:	d6 94       	lsr	r13
     55e:	c7 94       	ror	r12
     560:	d6 94       	lsr	r13
     562:	c7 94       	ror	r12
     564:	d6 94       	lsr	r13
     566:	c7 94       	ror	r12
     568:	d6 94       	lsr	r13
     56a:	c7 94       	ror	r12
     56c:	d6 94       	lsr	r13
     56e:	c7 94       	ror	r12
     570:	4c e3       	ldi	r20, 0x3C	; 60
     572:	4c 9d       	mul	r20, r12
     574:	c0 01       	movw	r24, r0
     576:	4d 9d       	mul	r20, r13
     578:	90 0d       	add	r25, r0
     57a:	11 24       	eor	r1, r1
     57c:	28 1b       	sub	r18, r24
     57e:	39 0b       	sbc	r19, r25
     580:	c9 e8       	ldi	r28, 0x89	; 137
     582:	d1 e0       	ldi	r29, 0x01	; 1
     584:	8a 81       	ldd	r24, Y+2	; 0x02
     586:	08 2e       	mov	r0, r24
     588:	00 0c       	add	r0, r0
     58a:	99 0b       	sbc	r25, r25
     58c:	82 0f       	add	r24, r18
     58e:	91 1d       	adc	r25, r1
     590:	0c e8       	ldi	r16, 0x8C	; 140
     592:	11 e0       	ldi	r17, 0x01	; 1
     594:	0f 2e       	mov	r0, r31
     596:	fc e3       	ldi	r31, 0x3C	; 60
     598:	ef 2e       	mov	r14, r31
     59a:	f1 2c       	mov	r15, r1
     59c:	f0 2d       	mov	r31, r0
     59e:	b7 01       	movw	r22, r14
     5a0:	0e 94 df 10 	call	0x21be	; 0x21be <__divmodhi4>
     5a4:	56 2f       	mov	r21, r22
     5a6:	d8 01       	movw	r26, r16
     5a8:	12 96       	adiw	r26, 0x02	; 2
     5aa:	8c 93       	st	X, r24
		tmp_3=(time.second + tmp_3)/60;
		laptime.minute=(time.minute + tmp_2 + tmp_3) % 60;
     5ac:	96 01       	movw	r18, r12
     5ae:	a9 e8       	ldi	r26, 0x89	; 137
     5b0:	b8 e8       	ldi	r27, 0x88	; 136
     5b2:	0e 94 39 11 	call	0x2272	; 0x2272 <__umulhisi3>
     5b6:	96 95       	lsr	r25
     5b8:	87 95       	ror	r24
     5ba:	92 95       	swap	r25
     5bc:	82 95       	swap	r24
     5be:	8f 70       	andi	r24, 0x0F	; 15
     5c0:	89 27       	eor	r24, r25
     5c2:	9f 70       	andi	r25, 0x0F	; 15
     5c4:	89 27       	eor	r24, r25
     5c6:	48 9f       	mul	r20, r24
     5c8:	90 01       	movw	r18, r0
     5ca:	49 9f       	mul	r20, r25
     5cc:	30 0d       	add	r19, r0
     5ce:	11 24       	eor	r1, r1
     5d0:	c2 1a       	sub	r12, r18
     5d2:	d3 0a       	sbc	r13, r19
     5d4:	89 81       	ldd	r24, Y+1	; 0x01
     5d6:	08 2e       	mov	r0, r24
     5d8:	00 0c       	add	r0, r0
     5da:	99 0b       	sbc	r25, r25
     5dc:	8c 0d       	add	r24, r12
     5de:	91 1d       	adc	r25, r1
     5e0:	85 0f       	add	r24, r21
     5e2:	91 1d       	adc	r25, r1
     5e4:	b7 01       	movw	r22, r14
     5e6:	0e 94 df 10 	call	0x21be	; 0x21be <__divmodhi4>
     5ea:	26 2f       	mov	r18, r22
     5ec:	d8 01       	movw	r26, r16
     5ee:	11 96       	adiw	r26, 0x01	; 1
     5f0:	8c 93       	st	X, r24
		tmp_2=(time.minute + tmp_2 + tmp_3)/60;
		tmp_1=time.hour+ tmp_1 + tmp_2;
     5f2:	cf 01       	movw	r24, r30
     5f4:	60 e1       	ldi	r22, 0x10	; 16
     5f6:	7e e0       	ldi	r23, 0x0E	; 14
     5f8:	0e 94 cb 10 	call	0x2196	; 0x2196 <__udivmodhi4>
     5fc:	88 81       	ld	r24, Y
     5fe:	68 0f       	add	r22, r24
     600:	62 0f       	add	r22, r18
		if(tmp_1 > HORA)
     602:	69 31       	cpi	r22, 0x19	; 25
     604:	28 f0       	brcs	.+10     	; 0x610 <CLOCK_second_count+0xda>
			laptime.hour=HORA-tmp_1;
     606:	88 e1       	ldi	r24, 0x18	; 24
     608:	86 1b       	sub	r24, r22
     60a:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <laptime>
     60e:	02 c0       	rjmp	.+4      	; 0x614 <CLOCK_second_count+0xde>
		else
			laptime.hour=tmp_1;
     610:	60 93 8c 01 	sts	0x018C, r22	; 0x80018c <laptime>
		CLOCK_compare_active=4;
     614:	84 e0       	ldi	r24, 0x04	; 4
     616:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <CLOCK_compare_active>
	}
	return CLOCK_compare_active;
}
     61a:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <CLOCK_compare_active>
     61e:	df 91       	pop	r29
     620:	cf 91       	pop	r28
     622:	1f 91       	pop	r17
     624:	0f 91       	pop	r16
     626:	ff 90       	pop	r15
     628:	ef 90       	pop	r14
     62a:	df 90       	pop	r13
     62c:	cf 90       	pop	r12
     62e:	08 95       	ret

00000630 <CLOCK_alarm_reset>:
void CLOCK_alarm_reset(void)
{
	CLOCK_alarm_flag=0;
     630:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <CLOCK_alarm_flag>
     634:	08 95       	ret

00000636 <CLOCK_alarm_stop>:
}
void CLOCK_alarm_stop(void)
{
	CLOCK_alarm_flag=0X0F;
     636:	8f e0       	ldi	r24, 0x0F	; 15
     638:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <CLOCK_alarm_flag>
     63c:	08 95       	ret

0000063e <CLOCK_second_count_reset>:
}
void CLOCK_second_count_reset(void)
{
	CLOCK_compare_active=0;
     63e:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <CLOCK_compare_active>
     642:	08 95       	ret

00000644 <CLOCK_second_count_stop>:
}
void CLOCK_second_count_stop(void)
{
	CLOCK_compare_active=0X0F;
     644:	8f e0       	ldi	r24, 0x0F	; 15
     646:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <CLOCK_compare_active>
     64a:	08 95       	ret

0000064c <CLOCK_show>:
}
char* CLOCK_show(void)
{
	uint8_t tmp;
	CLOCK_timp[8]='\0';
     64c:	ec e7       	ldi	r30, 0x7C	; 124
     64e:	f1 e0       	ldi	r31, 0x01	; 1
     650:	10 86       	std	Z+8, r1	; 0x08
	CLOCK_timp[7]=time.second % 10 + '0';
     652:	a9 e8       	ldi	r26, 0x89	; 137
     654:	b1 e0       	ldi	r27, 0x01	; 1
     656:	12 96       	adiw	r26, 0x02	; 2
     658:	2c 91       	ld	r18, X
     65a:	12 97       	sbiw	r26, 0x02	; 2
     65c:	87 e6       	ldi	r24, 0x67	; 103
     65e:	28 02       	muls	r18, r24
     660:	91 2d       	mov	r25, r1
     662:	11 24       	eor	r1, r1
     664:	95 95       	asr	r25
     666:	95 95       	asr	r25
     668:	27 fd       	sbrc	r18, 7
     66a:	93 95       	inc	r25
     66c:	49 2f       	mov	r20, r25
     66e:	44 0f       	add	r20, r20
     670:	34 2f       	mov	r19, r20
     672:	33 0f       	add	r19, r19
     674:	33 0f       	add	r19, r19
     676:	34 0f       	add	r19, r20
     678:	23 1b       	sub	r18, r19
     67a:	20 5d       	subi	r18, 0xD0	; 208
     67c:	27 83       	std	Z+7, r18	; 0x07
	tmp = time.second / 10;
	CLOCK_timp[6]=tmp % 10 + '0';
     67e:	2d ec       	ldi	r18, 0xCD	; 205
     680:	92 9f       	mul	r25, r18
     682:	31 2d       	mov	r19, r1
     684:	11 24       	eor	r1, r1
     686:	36 95       	lsr	r19
     688:	36 95       	lsr	r19
     68a:	36 95       	lsr	r19
     68c:	33 0f       	add	r19, r19
     68e:	43 2f       	mov	r20, r19
     690:	44 0f       	add	r20, r20
     692:	44 0f       	add	r20, r20
     694:	34 0f       	add	r19, r20
     696:	93 1b       	sub	r25, r19
     698:	90 5d       	subi	r25, 0xD0	; 208
     69a:	96 83       	std	Z+6, r25	; 0x06
	CLOCK_timp[5]=':';
     69c:	5a e3       	ldi	r21, 0x3A	; 58
     69e:	55 83       	std	Z+5, r21	; 0x05
	CLOCK_timp[4]=time.minute % 10 + '0';
     6a0:	11 96       	adiw	r26, 0x01	; 1
     6a2:	3c 91       	ld	r19, X
     6a4:	11 97       	sbiw	r26, 0x01	; 1
     6a6:	38 02       	muls	r19, r24
     6a8:	91 2d       	mov	r25, r1
     6aa:	11 24       	eor	r1, r1
     6ac:	95 95       	asr	r25
     6ae:	95 95       	asr	r25
     6b0:	37 fd       	sbrc	r19, 7
     6b2:	93 95       	inc	r25
     6b4:	69 2f       	mov	r22, r25
     6b6:	66 0f       	add	r22, r22
     6b8:	46 2f       	mov	r20, r22
     6ba:	44 0f       	add	r20, r20
     6bc:	44 0f       	add	r20, r20
     6be:	46 0f       	add	r20, r22
     6c0:	34 1b       	sub	r19, r20
     6c2:	30 5d       	subi	r19, 0xD0	; 208
     6c4:	34 83       	std	Z+4, r19	; 0x04
	tmp = time.minute / 10;
	CLOCK_timp[3]=tmp % 10 + '0';
     6c6:	92 9f       	mul	r25, r18
     6c8:	31 2d       	mov	r19, r1
     6ca:	11 24       	eor	r1, r1
     6cc:	36 95       	lsr	r19
     6ce:	36 95       	lsr	r19
     6d0:	36 95       	lsr	r19
     6d2:	33 0f       	add	r19, r19
     6d4:	43 2f       	mov	r20, r19
     6d6:	44 0f       	add	r20, r20
     6d8:	44 0f       	add	r20, r20
     6da:	34 0f       	add	r19, r20
     6dc:	93 1b       	sub	r25, r19
     6de:	90 5d       	subi	r25, 0xD0	; 208
     6e0:	93 83       	std	Z+3, r25	; 0x03
	CLOCK_timp[2]=':';
     6e2:	52 83       	std	Z+2, r21	; 0x02
	CLOCK_timp[1]=time.hour % 10 + '0';
     6e4:	9c 91       	ld	r25, X
     6e6:	98 02       	muls	r25, r24
     6e8:	81 2d       	mov	r24, r1
     6ea:	11 24       	eor	r1, r1
     6ec:	85 95       	asr	r24
     6ee:	85 95       	asr	r24
     6f0:	97 fd       	sbrc	r25, 7
     6f2:	83 95       	inc	r24
     6f4:	48 2f       	mov	r20, r24
     6f6:	44 0f       	add	r20, r20
     6f8:	34 2f       	mov	r19, r20
     6fa:	33 0f       	add	r19, r19
     6fc:	33 0f       	add	r19, r19
     6fe:	34 0f       	add	r19, r20
     700:	93 1b       	sub	r25, r19
     702:	90 5d       	subi	r25, 0xD0	; 208
     704:	91 83       	std	Z+1, r25	; 0x01
	tmp = time.hour / 10;
	CLOCK_timp[0]=tmp % 10 + '0';
     706:	82 9f       	mul	r24, r18
     708:	21 2d       	mov	r18, r1
     70a:	11 24       	eor	r1, r1
     70c:	26 95       	lsr	r18
     70e:	26 95       	lsr	r18
     710:	26 95       	lsr	r18
     712:	22 0f       	add	r18, r18
     714:	92 2f       	mov	r25, r18
     716:	99 0f       	add	r25, r25
     718:	99 0f       	add	r25, r25
     71a:	29 0f       	add	r18, r25
     71c:	82 1b       	sub	r24, r18
     71e:	80 5d       	subi	r24, 0xD0	; 208
     720:	80 83       	st	Z, r24
	return CLOCK_timp;
}
     722:	cf 01       	movw	r24, r30
     724:	08 95       	ret

00000726 <CLOCKenable>:
char* CLOCK_show(void);
/*
** procedure and function
*/
CLOCK CLOCKenable(uint8_t hour, uint8_t minute, uint8_t second)
{
     726:	fc 01       	movw	r30, r24
	CLOCK clock;
	time.hour=hour;
     728:	a9 e8       	ldi	r26, 0x89	; 137
     72a:	b1 e0       	ldi	r27, 0x01	; 1
     72c:	6c 93       	st	X, r22
	time.minute=minute;
     72e:	11 96       	adiw	r26, 0x01	; 1
     730:	4c 93       	st	X, r20
     732:	11 97       	sbiw	r26, 0x01	; 1
	time.second=second;
     734:	12 96       	adiw	r26, 0x02	; 2
     736:	2c 93       	st	X, r18
	CLOCK_alarm_flag=0X0F;
     738:	8f e0       	ldi	r24, 0x0F	; 15
     73a:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <CLOCK_alarm_flag>
	CLOCK_compare_active=0X0F;
     73e:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <CLOCK_compare_active>
	clock.second_count_reset=CLOCK_second_count_reset;
	clock.second_count_stop=CLOCK_second_count_stop;
	clock.alarm_reset=CLOCK_alarm_reset;
	clock.alarm_stop=CLOCK_alarm_stop;
	clock.show=CLOCK_show;
	return clock;
     742:	86 ea       	ldi	r24, 0xA6	; 166
     744:	91 e0       	ldi	r25, 0x01	; 1
     746:	91 83       	std	Z+1, r25	; 0x01
     748:	80 83       	st	Z, r24
     74a:	8c ea       	ldi	r24, 0xAC	; 172
     74c:	91 e0       	ldi	r25, 0x01	; 1
     74e:	93 83       	std	Z+3, r25	; 0x03
     750:	82 83       	std	Z+2, r24	; 0x02
     752:	86 e3       	ldi	r24, 0x36	; 54
     754:	92 e0       	ldi	r25, 0x02	; 2
     756:	95 83       	std	Z+5, r25	; 0x05
     758:	84 83       	std	Z+4, r24	; 0x04
     75a:	8c e8       	ldi	r24, 0x8C	; 140
     75c:	92 e0       	ldi	r25, 0x02	; 2
     75e:	97 83       	std	Z+7, r25	; 0x07
     760:	86 83       	std	Z+6, r24	; 0x06
     762:	8b e9       	ldi	r24, 0x9B	; 155
     764:	92 e0       	ldi	r25, 0x02	; 2
     766:	91 87       	std	Z+9, r25	; 0x09
     768:	80 87       	std	Z+8, r24	; 0x08
     76a:	8f e1       	ldi	r24, 0x1F	; 31
     76c:	93 e0       	ldi	r25, 0x03	; 3
     76e:	93 87       	std	Z+11, r25	; 0x0b
     770:	82 87       	std	Z+10, r24	; 0x0a
     772:	82 e2       	ldi	r24, 0x22	; 34
     774:	93 e0       	ldi	r25, 0x03	; 3
     776:	95 87       	std	Z+13, r25	; 0x0d
     778:	84 87       	std	Z+12, r24	; 0x0c
     77a:	88 e1       	ldi	r24, 0x18	; 24
     77c:	93 e0       	ldi	r25, 0x03	; 3
     77e:	97 87       	std	Z+15, r25	; 0x0f
     780:	86 87       	std	Z+14, r24	; 0x0e
     782:	8b e1       	ldi	r24, 0x1B	; 27
     784:	93 e0       	ldi	r25, 0x03	; 3
     786:	91 8b       	std	Z+17, r25	; 0x11
     788:	80 8b       	std	Z+16, r24	; 0x10
     78a:	86 e2       	ldi	r24, 0x26	; 38
     78c:	93 e0       	ldi	r25, 0x03	; 3
     78e:	93 8b       	std	Z+19, r25	; 0x13
     790:	82 8b       	std	Z+18, r24	; 0x12
}
     792:	cf 01       	movw	r24, r30
     794:	08 95       	ret

00000796 <FUNCpinmatch>:
}
//pinmatch
uint8_t FUNCpinmatch(uint8_t match, uint8_t pin, uint8_t HL)
{
	uint8_t result;
	result=match&pin;
     796:	68 23       	and	r22, r24
	if(HL){
     798:	44 23       	and	r20, r20
     79a:	21 f0       	breq	.+8      	; 0x7a4 <FUNCpinmatch+0xe>
		if(result==match);
     79c:	86 17       	cp	r24, r22
     79e:	21 f0       	breq	.+8      	; 0x7a8 <FUNCpinmatch+0x12>
		else
			result=0;
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	08 95       	ret
	}else{
		if(result)
     7a4:	61 11       	cpse	r22, r1
			result=0;
     7a6:	80 e0       	ldi	r24, 0x00	; 0
		else
			result=match;
	}
	return result;
}
     7a8:	08 95       	ret

000007aa <FUNChmerge>:
// hmerge
uint8_t FUNChmerge(uint8_t X, uint8_t Y)
{
	return (X | Y);
}
     7aa:	86 2b       	or	r24, r22
     7ac:	08 95       	ret

000007ae <FUNClmerge>:
// lmerge
uint8_t FUNClmerge(uint8_t X, uint8_t Y)
{
	return (X & Y);
}
     7ae:	86 23       	and	r24, r22
     7b0:	08 95       	ret

000007b2 <FUNClh>:
// lh
uint8_t FUNClh(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xi^xf;
     7b2:	86 27       	eor	r24, r22
	i&=xf;
	return i;
}
     7b4:	86 23       	and	r24, r22
     7b6:	08 95       	ret

000007b8 <FUNChl>:
// hl
uint8_t FUNChl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xf^xi;
     7b8:	60 95       	com	r22
	i&=xi;
	return i;
}
     7ba:	86 23       	and	r24, r22
     7bc:	08 95       	ret

000007be <FUNCdiff>:
// diff
uint8_t FUNCdiff(uint8_t xi, uint8_t xf)
{
	return xf^xi;
}
     7be:	86 27       	eor	r24, r22
     7c0:	08 95       	ret

000007c2 <FUNCswap>:
// interchange *px and *py
void FUNCswap(long *px, long *py)
{
     7c2:	cf 92       	push	r12
     7c4:	df 92       	push	r13
     7c6:	ef 92       	push	r14
     7c8:	ff 92       	push	r15
     7ca:	0f 93       	push	r16
     7cc:	1f 93       	push	r17
	long temp;
	temp = *px;
     7ce:	fc 01       	movw	r30, r24
     7d0:	00 81       	ld	r16, Z
     7d2:	11 81       	ldd	r17, Z+1	; 0x01
     7d4:	22 81       	ldd	r18, Z+2	; 0x02
     7d6:	33 81       	ldd	r19, Z+3	; 0x03
	*px = *py;
     7d8:	fb 01       	movw	r30, r22
     7da:	c0 80       	ld	r12, Z
     7dc:	d1 80       	ldd	r13, Z+1	; 0x01
     7de:	e2 80       	ldd	r14, Z+2	; 0x02
     7e0:	f3 80       	ldd	r15, Z+3	; 0x03
     7e2:	fc 01       	movw	r30, r24
     7e4:	c0 82       	st	Z, r12
     7e6:	d1 82       	std	Z+1, r13	; 0x01
     7e8:	e2 82       	std	Z+2, r14	; 0x02
     7ea:	f3 82       	std	Z+3, r15	; 0x03
	*py = temp;
     7ec:	fb 01       	movw	r30, r22
     7ee:	00 83       	st	Z, r16
     7f0:	11 83       	std	Z+1, r17	; 0x01
     7f2:	22 83       	std	Z+2, r18	; 0x02
     7f4:	33 83       	std	Z+3, r19	; 0x03
}
     7f6:	1f 91       	pop	r17
     7f8:	0f 91       	pop	r16
     7fa:	ff 90       	pop	r15
     7fc:	ef 90       	pop	r14
     7fe:	df 90       	pop	r13
     800:	cf 90       	pop	r12
     802:	08 95       	ret

00000804 <FUNCcopy>:
// copy: copy 'from' into 'to'; assume to is big enough
void FUNCcopy(char to[], char from[])
{
	int i;
	i = 0;
	while ((to[i] = from[i]) != '\0')
     804:	fb 01       	movw	r30, r22
     806:	20 81       	ld	r18, Z
     808:	fc 01       	movw	r30, r24
     80a:	20 83       	st	Z, r18
     80c:	22 23       	and	r18, r18
     80e:	39 f0       	breq	.+14     	; 0x81e <FUNCcopy+0x1a>
     810:	db 01       	movw	r26, r22
     812:	11 96       	adiw	r26, 0x01	; 1
     814:	31 96       	adiw	r30, 0x01	; 1
     816:	9d 91       	ld	r25, X+
     818:	91 93       	st	Z+, r25
     81a:	91 11       	cpse	r25, r1
     81c:	fc cf       	rjmp	.-8      	; 0x816 <FUNCcopy+0x12>
     81e:	08 95       	ret

00000820 <FUNCsqueeze>:
		++i;
}
// squeeze: delete all c from s
void FUNCsqueeze(char s[], int c)
{
     820:	cf 93       	push	r28
     822:	df 93       	push	r29
     824:	ec 01       	movw	r28, r24
	int i, j;
	for (i = j = 0; s[i] != '\0'; i++)
     826:	98 81       	ld	r25, Y
     828:	99 23       	and	r25, r25
     82a:	99 f0       	breq	.+38     	; 0x852 <FUNCsqueeze+0x32>
     82c:	fe 01       	movw	r30, r28
     82e:	31 96       	adiw	r30, 0x01	; 1
     830:	20 e0       	ldi	r18, 0x00	; 0
     832:	30 e0       	ldi	r19, 0x00	; 0
		if (s[i] != c)
     834:	49 2f       	mov	r20, r25
     836:	50 e0       	ldi	r21, 0x00	; 0
     838:	46 17       	cp	r20, r22
     83a:	57 07       	cpc	r21, r23
     83c:	31 f0       	breq	.+12     	; 0x84a <FUNCsqueeze+0x2a>
			s[j++] = s[i];
     83e:	de 01       	movw	r26, r28
     840:	a2 0f       	add	r26, r18
     842:	b3 1f       	adc	r27, r19
     844:	9c 93       	st	X, r25
     846:	2f 5f       	subi	r18, 0xFF	; 255
     848:	3f 4f       	sbci	r19, 0xFF	; 255
}
// squeeze: delete all c from s
void FUNCsqueeze(char s[], int c)
{
	int i, j;
	for (i = j = 0; s[i] != '\0'; i++)
     84a:	91 91       	ld	r25, Z+
     84c:	91 11       	cpse	r25, r1
     84e:	f2 cf       	rjmp	.-28     	; 0x834 <FUNCsqueeze+0x14>
     850:	02 c0       	rjmp	.+4      	; 0x856 <FUNCsqueeze+0x36>
     852:	20 e0       	ldi	r18, 0x00	; 0
     854:	30 e0       	ldi	r19, 0x00	; 0
		if (s[i] != c)
			s[j++] = s[i];
		s[j] = '\0';
     856:	fe 01       	movw	r30, r28
     858:	e2 0f       	add	r30, r18
     85a:	f3 1f       	adc	r31, r19
     85c:	10 82       	st	Z, r1
}
     85e:	df 91       	pop	r29
     860:	cf 91       	pop	r28
     862:	08 95       	ret

00000864 <FUNCshellsort>:
// shellsort: sort v[0]...v[n-1] into increasing order
void FUNCshellsort(int v[], int n)
{
     864:	2f 92       	push	r2
     866:	3f 92       	push	r3
     868:	4f 92       	push	r4
     86a:	5f 92       	push	r5
     86c:	6f 92       	push	r6
     86e:	7f 92       	push	r7
     870:	8f 92       	push	r8
     872:	9f 92       	push	r9
     874:	af 92       	push	r10
     876:	bf 92       	push	r11
     878:	cf 92       	push	r12
     87a:	df 92       	push	r13
     87c:	ef 92       	push	r14
     87e:	ff 92       	push	r15
     880:	0f 93       	push	r16
     882:	1f 93       	push	r17
     884:	cf 93       	push	r28
     886:	df 93       	push	r29
     888:	00 d0       	rcall	.+0      	; 0x88a <FUNCshellsort+0x26>
     88a:	00 d0       	rcall	.+0      	; 0x88c <FUNCshellsort+0x28>
     88c:	cd b7       	in	r28, 0x3d	; 61
     88e:	de b7       	in	r29, 0x3e	; 62
     890:	2c 01       	movw	r4, r24
     892:	1b 01       	movw	r2, r22
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
     894:	4b 01       	movw	r8, r22
     896:	77 23       	and	r23, r23
     898:	1c f4       	brge	.+6      	; 0x8a0 <FUNCshellsort+0x3c>
     89a:	2f ef       	ldi	r18, 0xFF	; 255
     89c:	82 1a       	sub	r8, r18
     89e:	92 0a       	sbc	r9, r18
     8a0:	95 94       	asr	r9
     8a2:	87 94       	ror	r8
     8a4:	18 14       	cp	r1, r8
     8a6:	19 04       	cpc	r1, r9
     8a8:	0c f4       	brge	.+2      	; 0x8ac <FUNCshellsort+0x48>
     8aa:	51 c0       	rjmp	.+162    	; 0x94e <FUNCshellsort+0xea>
     8ac:	6a c0       	rjmp	.+212    	; 0x982 <FUNCshellsort+0x11e>
		for (i = gap; i < n; i++)
			for (j=i-gap; j>=0 && v[j]>v[j+gap]; j-=gap){
     8ae:	96 01       	movw	r18, r12
     8b0:	dd 20       	and	r13, r13
     8b2:	9c f1       	brlt	.+102    	; 0x91a <FUNCshellsort+0xb6>
     8b4:	f5 01       	movw	r30, r10
     8b6:	40 81       	ld	r20, Z
     8b8:	51 81       	ldd	r21, Z+1	; 0x01
     8ba:	f4 01       	movw	r30, r8
     8bc:	60 81       	ld	r22, Z
     8be:	71 81       	ldd	r23, Z+1	; 0x01
     8c0:	64 17       	cp	r22, r20
     8c2:	75 07       	cpc	r23, r21
     8c4:	54 f5       	brge	.+84     	; 0x91a <FUNCshellsort+0xb6>
     8c6:	8c 01       	movw	r16, r24
     8c8:	0a 0d       	add	r16, r10
     8ca:	1b 1d       	adc	r17, r11
     8cc:	d4 01       	movw	r26, r8
     8ce:	bc 82       	std	Y+4, r11	; 0x04
     8d0:	ab 82       	std	Y+3, r10	; 0x03
     8d2:	ba 82       	std	Y+2, r11	; 0x02
     8d4:	a9 82       	std	Y+1, r10	; 0x01
				temp = v[j];
				v[j] = v[j+gap];
     8d6:	eb 81       	ldd	r30, Y+3	; 0x03
     8d8:	fc 81       	ldd	r31, Y+4	; 0x04
     8da:	71 83       	std	Z+1, r23	; 0x01
     8dc:	60 83       	st	Z, r22
				v[j+gap] = temp;
     8de:	11 96       	adiw	r26, 0x01	; 1
     8e0:	5c 93       	st	X, r21
     8e2:	4e 93       	st	-X, r20
void FUNCshellsort(int v[], int n)
{
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
		for (i = gap; i < n; i++)
			for (j=i-gap; j>=0 && v[j]>v[j+gap]; j-=gap){
     8e4:	2e 19       	sub	r18, r14
     8e6:	3f 09       	sbc	r19, r15
     8e8:	c2 f0       	brmi	.+48     	; 0x91a <FUNCshellsort+0xb6>
     8ea:	f8 01       	movw	r30, r16
     8ec:	40 81       	ld	r20, Z
     8ee:	51 81       	ldd	r21, Z+1	; 0x01
     8f0:	e9 81       	ldd	r30, Y+1	; 0x01
     8f2:	fa 81       	ldd	r31, Y+2	; 0x02
     8f4:	60 81       	ld	r22, Z
     8f6:	71 81       	ldd	r23, Z+1	; 0x01
     8f8:	08 0f       	add	r16, r24
     8fa:	19 1f       	adc	r17, r25
     8fc:	e8 0f       	add	r30, r24
     8fe:	f9 1f       	adc	r31, r25
     900:	fa 83       	std	Y+2, r31	; 0x02
     902:	e9 83       	std	Y+1, r30	; 0x01
     904:	eb 81       	ldd	r30, Y+3	; 0x03
     906:	fc 81       	ldd	r31, Y+4	; 0x04
     908:	e8 0f       	add	r30, r24
     90a:	f9 1f       	adc	r31, r25
     90c:	fc 83       	std	Y+4, r31	; 0x04
     90e:	eb 83       	std	Y+3, r30	; 0x03
     910:	a8 0f       	add	r26, r24
     912:	b9 1f       	adc	r27, r25
     914:	64 17       	cp	r22, r20
     916:	75 07       	cpc	r23, r21
     918:	f4 f2       	brlt	.-68     	; 0x8d6 <FUNCshellsort+0x72>
     91a:	ff ef       	ldi	r31, 0xFF	; 255
     91c:	cf 1a       	sub	r12, r31
     91e:	df 0a       	sbc	r13, r31
     920:	22 e0       	ldi	r18, 0x02	; 2
     922:	a2 0e       	add	r10, r18
     924:	b1 1c       	adc	r11, r1
     926:	e2 e0       	ldi	r30, 0x02	; 2
     928:	8e 0e       	add	r8, r30
     92a:	91 1c       	adc	r9, r1
// shellsort: sort v[0]...v[n-1] into increasing order
void FUNCshellsort(int v[], int n)
{
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
		for (i = gap; i < n; i++)
     92c:	c6 14       	cp	r12, r6
     92e:	d7 04       	cpc	r13, r7
     930:	09 f0       	breq	.+2      	; 0x934 <FUNCshellsort+0xd0>
     932:	bd cf       	rjmp	.-134    	; 0x8ae <FUNCshellsort+0x4a>
}
// shellsort: sort v[0]...v[n-1] into increasing order
void FUNCshellsort(int v[], int n)
{
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
     934:	47 01       	movw	r8, r14
     936:	ff 20       	and	r15, r15
     938:	1c f4       	brge	.+6      	; 0x940 <FUNCshellsort+0xdc>
     93a:	ff ef       	ldi	r31, 0xFF	; 255
     93c:	8f 1a       	sub	r8, r31
     93e:	9f 0a       	sbc	r9, r31
     940:	95 94       	asr	r9
     942:	87 94       	ror	r8
     944:	18 14       	cp	r1, r8
     946:	19 04       	cpc	r1, r9
     948:	e4 f4       	brge	.+56     	; 0x982 <FUNCshellsort+0x11e>
     94a:	74 01       	movw	r14, r8
     94c:	01 c0       	rjmp	.+2      	; 0x950 <FUNCshellsort+0xec>
     94e:	74 01       	movw	r14, r8
		for (i = gap; i < n; i++)
     950:	82 14       	cp	r8, r2
     952:	93 04       	cpc	r9, r3
     954:	7c f7       	brge	.-34     	; 0x934 <FUNCshellsort+0xd0>
     956:	64 01       	movw	r12, r8
     958:	ce 18       	sub	r12, r14
     95a:	df 08       	sbc	r13, r15
     95c:	56 01       	movw	r10, r12
     95e:	aa 0c       	add	r10, r10
     960:	bb 1c       	adc	r11, r11
     962:	a4 0c       	add	r10, r4
     964:	b5 1c       	adc	r11, r5
     966:	88 0c       	add	r8, r8
     968:	99 1c       	adc	r9, r9
     96a:	84 0c       	add	r8, r4
     96c:	95 1c       	adc	r9, r5
     96e:	31 01       	movw	r6, r2
     970:	6e 18       	sub	r6, r14
     972:	7f 08       	sbc	r7, r15
     974:	c7 01       	movw	r24, r14
     976:	88 0f       	add	r24, r24
     978:	99 1f       	adc	r25, r25
     97a:	91 95       	neg	r25
     97c:	81 95       	neg	r24
     97e:	91 09       	sbc	r25, r1
     980:	96 cf       	rjmp	.-212    	; 0x8ae <FUNCshellsort+0x4a>
			for (j=i-gap; j>=0 && v[j]>v[j+gap]; j-=gap){
				temp = v[j];
				v[j] = v[j+gap];
				v[j+gap] = temp;
			}
}
     982:	0f 90       	pop	r0
     984:	0f 90       	pop	r0
     986:	0f 90       	pop	r0
     988:	0f 90       	pop	r0
     98a:	df 91       	pop	r29
     98c:	cf 91       	pop	r28
     98e:	1f 91       	pop	r17
     990:	0f 91       	pop	r16
     992:	ff 90       	pop	r15
     994:	ef 90       	pop	r14
     996:	df 90       	pop	r13
     998:	cf 90       	pop	r12
     99a:	bf 90       	pop	r11
     99c:	af 90       	pop	r10
     99e:	9f 90       	pop	r9
     9a0:	8f 90       	pop	r8
     9a2:	7f 90       	pop	r7
     9a4:	6f 90       	pop	r6
     9a6:	5f 90       	pop	r5
     9a8:	4f 90       	pop	r4
     9aa:	3f 90       	pop	r3
     9ac:	2f 90       	pop	r2
     9ae:	08 95       	ret

000009b0 <FUNCpmax>:
	if(a1 > a2){
		biggest = a1;
	}else{
		biggest = a2;
	}
	return biggest;
     9b0:	86 17       	cp	r24, r22
     9b2:	97 07       	cpc	r25, r23
     9b4:	0c f4       	brge	.+2      	; 0x9b8 <FUNCpmax+0x8>
     9b6:	cb 01       	movw	r24, r22
}
     9b8:	08 95       	ret

000009ba <FUNCgcd>:
// common divisor
int FUNCgcd (int u, int v)
{
     9ba:	9b 01       	movw	r18, r22
	int temp;
	while ( v != 0 ) {
     9bc:	67 2b       	or	r22, r23
     9be:	11 f4       	brne	.+4      	; 0x9c4 <FUNCgcd+0xa>
     9c0:	08 95       	ret
		temp = u % v;
		u = v;
		v = temp;
     9c2:	9a 01       	movw	r18, r20
// common divisor
int FUNCgcd (int u, int v)
{
	int temp;
	while ( v != 0 ) {
		temp = u % v;
     9c4:	b9 01       	movw	r22, r18
     9c6:	0e 94 df 10 	call	0x21be	; 0x21be <__divmodhi4>
     9ca:	ac 01       	movw	r20, r24
     9cc:	82 2f       	mov	r24, r18
     9ce:	93 2f       	mov	r25, r19
}
// common divisor
int FUNCgcd (int u, int v)
{
	int temp;
	while ( v != 0 ) {
     9d0:	41 15       	cp	r20, r1
     9d2:	51 05       	cpc	r21, r1
     9d4:	b1 f7       	brne	.-20     	; 0x9c2 <FUNCgcd+0x8>
		temp = u % v;
		u = v;
		v = temp;
	}
	return u;
}
     9d6:	08 95       	ret

000009d8 <FUNCstrToInt>:
// Function to convert a string to an integer
int FUNCstrToInt (const char string[])
{
     9d8:	fc 01       	movw	r30, r24
	int i, intValue, result = 0;
	for ( i = 0; string[i] >= '0' && string[i] <= '9'; ++i ){
     9da:	90 81       	ld	r25, Z
     9dc:	80 ed       	ldi	r24, 0xD0	; 208
     9de:	89 0f       	add	r24, r25
     9e0:	8a 30       	cpi	r24, 0x0A	; 10
     9e2:	d0 f4       	brcc	.+52     	; 0xa18 <FUNCstrToInt+0x40>
     9e4:	31 96       	adiw	r30, 0x01	; 1
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
		intValue = string[i] - '0';
		result = result * 10 + intValue;
     9ea:	a9 01       	movw	r20, r18
     9ec:	44 0f       	add	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	22 0f       	add	r18, r18
     9f2:	33 1f       	adc	r19, r19
     9f4:	22 0f       	add	r18, r18
     9f6:	33 1f       	adc	r19, r19
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	42 0f       	add	r20, r18
     9fe:	53 1f       	adc	r21, r19
     a00:	29 2f       	mov	r18, r25
     a02:	30 e0       	ldi	r19, 0x00	; 0
     a04:	20 53       	subi	r18, 0x30	; 48
     a06:	31 09       	sbc	r19, r1
     a08:	24 0f       	add	r18, r20
     a0a:	35 1f       	adc	r19, r21
}
// Function to convert a string to an integer
int FUNCstrToInt (const char string[])
{
	int i, intValue, result = 0;
	for ( i = 0; string[i] >= '0' && string[i] <= '9'; ++i ){
     a0c:	91 91       	ld	r25, Z+
     a0e:	80 ed       	ldi	r24, 0xD0	; 208
     a10:	89 0f       	add	r24, r25
     a12:	8a 30       	cpi	r24, 0x0A	; 10
     a14:	50 f3       	brcs	.-44     	; 0x9ea <FUNCstrToInt+0x12>
     a16:	02 c0       	rjmp	.+4      	; 0xa1c <FUNCstrToInt+0x44>
	return u;
}
// Function to convert a string to an integer
int FUNCstrToInt (const char string[])
{
	int i, intValue, result = 0;
     a18:	20 e0       	ldi	r18, 0x00	; 0
     a1a:	30 e0       	ldi	r19, 0x00	; 0
	for ( i = 0; string[i] >= '0' && string[i] <= '9'; ++i ){
		intValue = string[i] - '0';
		result = result * 10 + intValue;
	}
	return result;
}
     a1c:	c9 01       	movw	r24, r18
     a1e:	08 95       	ret

00000a20 <FUNCfilter>:
uint8_t FUNCfilter(uint8_t mask, uint8_t data)
{
	uint8_t Z;
	Z=mask & data;
	return Z;
}
     a20:	86 23       	and	r24, r22
     a22:	08 95       	ret

00000a24 <FUNCticks>:
// ticks
unsigned int FUNCticks(unsigned int num)
{
	unsigned int count;
	for(count=0;count<num;count++)
     a24:	00 97       	sbiw	r24, 0x00	; 0
     a26:	39 f0       	breq	.+14     	; 0xa36 <FUNCticks+0x12>
     a28:	20 e0       	ldi	r18, 0x00	; 0
     a2a:	30 e0       	ldi	r19, 0x00	; 0
     a2c:	2f 5f       	subi	r18, 0xFF	; 255
     a2e:	3f 4f       	sbci	r19, 0xFF	; 255
     a30:	82 17       	cp	r24, r18
     a32:	93 07       	cpc	r25, r19
     a34:	d9 f7       	brne	.-10     	; 0xa2c <FUNCticks+0x8>
		;
	return count;
}
     a36:	08 95       	ret

00000a38 <FUNCtwocomptoint8bit>:
// Two's Complement function
int FUNCtwocomptoint8bit(int twoscomp){
  
  //Let's see if the byte is negative
  if (twoscomp & 0B10000000){
     a38:	87 ff       	sbrs	r24, 7
     a3a:	08 c0       	rjmp	.+16     	; 0xa4c <FUNCtwocomptoint8bit+0x14>
    //Invert
    twoscomp = ~twoscomp + 1;
     a3c:	91 95       	neg	r25
     a3e:	81 95       	neg	r24
     a40:	91 09       	sbc	r25, r1
	twoscomp = (twoscomp & 0B11111111);
    //Cast as int and multiply by negative one
    int value = (int)(twoscomp)*(-1);
     a42:	99 27       	eor	r25, r25
     a44:	91 95       	neg	r25
     a46:	81 95       	neg	r24
     a48:	91 09       	sbc	r25, r1
    return value;
     a4a:	08 95       	ret
    //Byte is non-negative, therefore convert to decimal and display
    //Make sure we are never over 1279
    twoscomp = (twoscomp & 0B01111111);
    //Cast as int and return
    int value = (int)(twoscomp);
    return value;
     a4c:	8f 77       	andi	r24, 0x7F	; 127
     a4e:	99 27       	eor	r25, r25
  }
}
     a50:	08 95       	ret

00000a52 <FUNCtwocomptoint10bit>:
// Two's Complement function, shifts 10 bit binary to signed integers (-512 to 512)
int FUNCtwocomptoint10bit(int twoscomp){
	
  //Let's see if the byte is negative
  if (twoscomp & 0x200){
     a52:	91 ff       	sbrs	r25, 1
     a54:	08 c0       	rjmp	.+16     	; 0xa66 <FUNCtwocomptoint10bit+0x14>
    //Invert
    twoscomp = ~twoscomp + 1;
     a56:	91 95       	neg	r25
     a58:	81 95       	neg	r24
     a5a:	91 09       	sbc	r25, r1
    twoscomp = (twoscomp & 0x3FF);
    //Cast as int and multiply by negative one
    int value = (int)(twoscomp)*(-1);
     a5c:	93 70       	andi	r25, 0x03	; 3
     a5e:	91 95       	neg	r25
     a60:	81 95       	neg	r24
     a62:	91 09       	sbc	r25, r1
    return value;
     a64:	08 95       	ret
    //Byte is non-negative, therefore convert to decimal and display
    twoscomp = (twoscomp & 0x1FF);
    //Cast as int and return
    //Serial.println(twoscomp);
    int value = (int)(twoscomp);
    return value;
     a66:	91 70       	andi	r25, 0x01	; 1
  }
}
     a68:	08 95       	ret

00000a6a <FUNCtwocomptointnbit>:
// Two's Complement function, nbits
int FUNCtwocomptointnbit(int twoscomp, uint8_t nbits){
  unsigned int signmask;
  unsigned int mask;
  signmask = (1<<(nbits-1));
     a6a:	61 50       	subi	r22, 0x01	; 1
     a6c:	21 e0       	ldi	r18, 0x01	; 1
     a6e:	30 e0       	ldi	r19, 0x00	; 0
     a70:	02 c0       	rjmp	.+4      	; 0xa76 <FUNCtwocomptointnbit+0xc>
     a72:	22 0f       	add	r18, r18
     a74:	33 1f       	adc	r19, r19
     a76:	6a 95       	dec	r22
     a78:	e2 f7       	brpl	.-8      	; 0xa72 <FUNCtwocomptointnbit+0x8>
  mask=signmask-1;
     a7a:	a9 01       	movw	r20, r18
     a7c:	41 50       	subi	r20, 0x01	; 1
     a7e:	51 09       	sbc	r21, r1
  //Let's see if the number is negative
  if (twoscomp & signmask){
     a80:	b9 01       	movw	r22, r18
     a82:	68 23       	and	r22, r24
     a84:	79 23       	and	r23, r25
     a86:	67 2b       	or	r22, r23
     a88:	29 f0       	breq	.+10     	; 0xa94 <FUNCtwocomptointnbit+0x2a>
	twoscomp &= mask;
    twoscomp -= signmask;
     a8a:	84 23       	and	r24, r20
     a8c:	95 23       	and	r25, r21
     a8e:	82 1b       	sub	r24, r18
     a90:	93 0b       	sbc	r25, r19
     a92:	08 95       	ret
  }else{
	  twoscomp &= mask;
     a94:	84 23       	and	r24, r20
     a96:	95 23       	and	r25, r21
  }
  return twoscomp;
}
     a98:	08 95       	ret

00000a9a <FUNCdec2bcd>:
// Convert Decimal to Binary Coded Decimal (BCD)
char FUNCdec2bcd(char num)
{
	return ((num/10 * 16) + (num % 10));
     a9a:	9d ec       	ldi	r25, 0xCD	; 205
     a9c:	89 9f       	mul	r24, r25
     a9e:	91 2d       	mov	r25, r1
     aa0:	11 24       	eor	r1, r1
     aa2:	96 95       	lsr	r25
     aa4:	96 95       	lsr	r25
     aa6:	96 95       	lsr	r25
     aa8:	39 2f       	mov	r19, r25
     aaa:	33 0f       	add	r19, r19
     aac:	23 2f       	mov	r18, r19
     aae:	22 0f       	add	r18, r18
     ab0:	22 0f       	add	r18, r18
     ab2:	23 0f       	add	r18, r19
     ab4:	82 1b       	sub	r24, r18
}
     ab6:	20 e1       	ldi	r18, 0x10	; 16
     ab8:	92 9f       	mul	r25, r18
     aba:	80 0d       	add	r24, r0
     abc:	11 24       	eor	r1, r1
     abe:	08 95       	ret

00000ac0 <FUNCbcd2dec>:
// Convert Binary Coded Decimal (BCD) to Decimal
char FUNCbcd2dec(char num)
{
	return ((num/16 * 10) + (num % 16));
     ac0:	98 2f       	mov	r25, r24
     ac2:	92 95       	swap	r25
     ac4:	9f 70       	andi	r25, 0x0F	; 15
     ac6:	99 0f       	add	r25, r25
     ac8:	29 2f       	mov	r18, r25
     aca:	22 0f       	add	r18, r18
     acc:	22 0f       	add	r18, r18
     ace:	92 0f       	add	r25, r18
     ad0:	8f 70       	andi	r24, 0x0F	; 15
}
     ad2:	89 0f       	add	r24, r25
     ad4:	08 95       	ret

00000ad6 <FUNCresizestr>:
char* FUNCresizestr(char *string, int size)
{
     ad6:	fc 01       	movw	r30, r24
	int i;
	FUNCstr[size]='\0';
     ad8:	db 01       	movw	r26, r22
     ada:	a0 57       	subi	r26, 0x70	; 112
     adc:	be 4f       	sbci	r27, 0xFE	; 254
     ade:	1c 92       	st	X, r1
	for(i=0;i<size;i++){
     ae0:	16 16       	cp	r1, r22
     ae2:	17 06       	cpc	r1, r23
     ae4:	14 f5       	brge	.+68     	; 0xb2a <FUNCresizestr+0x54>
		if(*(string+i)=='\0'){
     ae6:	90 81       	ld	r25, Z
     ae8:	91 11       	cpse	r25, r1
     aea:	0c c0       	rjmp	.+24     	; 0xb04 <FUNCresizestr+0x2e>
     aec:	17 c0       	rjmp	.+46     	; 0xb1c <FUNCresizestr+0x46>
     aee:	91 91       	ld	r25, Z+
     af0:	91 11       	cpse	r25, r1
     af2:	0d c0       	rjmp	.+26     	; 0xb0e <FUNCresizestr+0x38>
     af4:	15 c0       	rjmp	.+42     	; 0xb20 <FUNCresizestr+0x4a>
			for(;i<size;i++){
				FUNCstr[i]=' ';
     af6:	81 93       	st	Z+, r24
{
	int i;
	FUNCstr[size]='\0';
	for(i=0;i<size;i++){
		if(*(string+i)=='\0'){
			for(;i<size;i++){
     af8:	2f 5f       	subi	r18, 0xFF	; 255
     afa:	3f 4f       	sbci	r19, 0xFF	; 255
     afc:	26 17       	cp	r18, r22
     afe:	37 07       	cpc	r19, r23
     b00:	d4 f3       	brlt	.-12     	; 0xaf6 <FUNCresizestr+0x20>
     b02:	13 c0       	rjmp	.+38     	; 0xb2a <FUNCresizestr+0x54>
     b04:	a0 e9       	ldi	r26, 0x90	; 144
     b06:	b1 e0       	ldi	r27, 0x01	; 1
     b08:	31 96       	adiw	r30, 0x01	; 1
char* FUNCresizestr(char *string, int size)
{
	int i;
	FUNCstr[size]='\0';
	for(i=0;i<size;i++){
		if(*(string+i)=='\0'){
     b0a:	20 e0       	ldi	r18, 0x00	; 0
     b0c:	30 e0       	ldi	r19, 0x00	; 0
			for(;i<size;i++){
				FUNCstr[i]=' ';
			}
			break;
		}
		FUNCstr[i]=*(string+i);
     b0e:	9d 93       	st	X+, r25
}
char* FUNCresizestr(char *string, int size)
{
	int i;
	FUNCstr[size]='\0';
	for(i=0;i<size;i++){
     b10:	2f 5f       	subi	r18, 0xFF	; 255
     b12:	3f 4f       	sbci	r19, 0xFF	; 255
     b14:	62 17       	cp	r22, r18
     b16:	73 07       	cpc	r23, r19
     b18:	51 f7       	brne	.-44     	; 0xaee <FUNCresizestr+0x18>
     b1a:	07 c0       	rjmp	.+14     	; 0xb2a <FUNCresizestr+0x54>
     b1c:	20 e0       	ldi	r18, 0x00	; 0
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	f9 01       	movw	r30, r18
     b22:	e0 57       	subi	r30, 0x70	; 112
     b24:	fe 4f       	sbci	r31, 0xFE	; 254
		if(*(string+i)=='\0'){
			for(;i<size;i++){
				FUNCstr[i]=' ';
     b26:	80 e2       	ldi	r24, 0x20	; 32
     b28:	e6 cf       	rjmp	.-52     	; 0xaf6 <FUNCresizestr+0x20>
			break;
		}
		FUNCstr[i]=*(string+i);
	}
	return FUNCstr;
}
     b2a:	80 e9       	ldi	r24, 0x90	; 144
     b2c:	91 e0       	ldi	r25, 0x01	; 1
     b2e:	08 95       	ret

00000b30 <FUNCtrimmer>:
long FUNCtrimmer(long x, long in_min, long in_max, long out_min, long out_max)
/*
	same as arduino map function.
*/
{
     b30:	4f 92       	push	r4
     b32:	5f 92       	push	r5
     b34:	6f 92       	push	r6
     b36:	7f 92       	push	r7
     b38:	af 92       	push	r10
     b3a:	bf 92       	push	r11
     b3c:	cf 92       	push	r12
     b3e:	df 92       	push	r13
     b40:	ef 92       	push	r14
     b42:	ff 92       	push	r15
     b44:	0f 93       	push	r16
     b46:	1f 93       	push	r17
     b48:	cf 93       	push	r28
     b4a:	df 93       	push	r29
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     b50:	29 01       	movw	r4, r18
     b52:	3a 01       	movw	r6, r20
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
     b54:	9b 01       	movw	r18, r22
     b56:	ac 01       	movw	r20, r24
     b58:	24 19       	sub	r18, r4
     b5a:	35 09       	sbc	r19, r5
     b5c:	46 09       	sbc	r20, r6
     b5e:	57 09       	sbc	r21, r7
     b60:	89 89       	ldd	r24, Y+17	; 0x11
     b62:	9a 89       	ldd	r25, Y+18	; 0x12
     b64:	ab 89       	ldd	r26, Y+19	; 0x13
     b66:	bc 89       	ldd	r27, Y+20	; 0x14
     b68:	bc 01       	movw	r22, r24
     b6a:	cd 01       	movw	r24, r26
     b6c:	6a 19       	sub	r22, r10
     b6e:	7b 09       	sbc	r23, r11
     b70:	8c 09       	sbc	r24, r12
     b72:	9d 09       	sbc	r25, r13
     b74:	0e 94 bc 10 	call	0x2178	; 0x2178 <__mulsi3>
     b78:	a8 01       	movw	r20, r16
     b7a:	97 01       	movw	r18, r14
     b7c:	24 19       	sub	r18, r4
     b7e:	35 09       	sbc	r19, r5
     b80:	46 09       	sbc	r20, r6
     b82:	57 09       	sbc	r21, r7
     b84:	0e 94 14 11 	call	0x2228	; 0x2228 <__divmodsi4>
     b88:	ca 01       	movw	r24, r20
     b8a:	b9 01       	movw	r22, r18
     b8c:	6a 0d       	add	r22, r10
     b8e:	7b 1d       	adc	r23, r11
     b90:	8c 1d       	adc	r24, r12
     b92:	9d 1d       	adc	r25, r13
}
     b94:	df 91       	pop	r29
     b96:	cf 91       	pop	r28
     b98:	1f 91       	pop	r17
     b9a:	0f 91       	pop	r16
     b9c:	ff 90       	pop	r15
     b9e:	ef 90       	pop	r14
     ba0:	df 90       	pop	r13
     ba2:	cf 90       	pop	r12
     ba4:	bf 90       	pop	r11
     ba6:	af 90       	pop	r10
     ba8:	7f 90       	pop	r7
     baa:	6f 90       	pop	r6
     bac:	5f 90       	pop	r5
     bae:	4f 90       	pop	r4
     bb0:	08 95       	ret

00000bb2 <Power>:
// power: raise base to n-th power; n >= 0
unsigned int Power(uint8_t base, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
     bb2:	70 e0       	ldi	r23, 0x00	; 0
     bb4:	61 15       	cp	r22, r1
     bb6:	71 05       	cpc	r23, r1
     bb8:	99 f0       	breq	.+38     	; 0xbe0 <Power+0x2e>
     bba:	41 e0       	ldi	r20, 0x01	; 1
     bbc:	50 e0       	ldi	r21, 0x00	; 0
     bbe:	21 e0       	ldi	r18, 0x01	; 1
     bc0:	30 e0       	ldi	r19, 0x00	; 0
        p = p * base;
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	fa 01       	movw	r30, r20
     bc6:	e8 9f       	mul	r30, r24
     bc8:	a0 01       	movw	r20, r0
     bca:	e9 9f       	mul	r30, r25
     bcc:	50 0d       	add	r21, r0
     bce:	f8 9f       	mul	r31, r24
     bd0:	50 0d       	add	r21, r0
     bd2:	11 24       	eor	r1, r1
// power: raise base to n-th power; n >= 0
unsigned int Power(uint8_t base, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
     bd4:	2f 5f       	subi	r18, 0xFF	; 255
     bd6:	3f 4f       	sbci	r19, 0xFF	; 255
     bd8:	62 17       	cp	r22, r18
     bda:	73 07       	cpc	r23, r19
     bdc:	98 f7       	brcc	.-26     	; 0xbc4 <Power+0x12>
     bde:	02 c0       	rjmp	.+4      	; 0xbe4 <Power+0x32>
}
// power: raise base to n-th power; n >= 0
unsigned int Power(uint8_t base, uint8_t n)
{
    unsigned int i, p;
    p = 1;
     be0:	41 e0       	ldi	r20, 0x01	; 1
     be2:	50 e0       	ldi	r21, 0x00	; 0
    for (i = 1; i <= n; ++i)
        p = p * base;
    return p;
}
     be4:	ca 01       	movw	r24, r20
     be6:	08 95       	ret

00000be8 <StringLength>:
// Function to count the number of characters in a string
int StringLength (const char string[])
{
	int count = 0;
	while ( string[count] != '\0' )
     be8:	fc 01       	movw	r30, r24
     bea:	20 81       	ld	r18, Z
     bec:	22 23       	and	r18, r18
     bee:	41 f0       	breq	.+16     	; 0xc00 <StringLength+0x18>
     bf0:	31 96       	adiw	r30, 0x01	; 1
     bf2:	80 e0       	ldi	r24, 0x00	; 0
     bf4:	90 e0       	ldi	r25, 0x00	; 0
		++count;
     bf6:	01 96       	adiw	r24, 0x01	; 1
}
// Function to count the number of characters in a string
int StringLength (const char string[])
{
	int count = 0;
	while ( string[count] != '\0' )
     bf8:	21 91       	ld	r18, Z+
     bfa:	21 11       	cpse	r18, r1
     bfc:	fc cf       	rjmp	.-8      	; 0xbf6 <StringLength+0xe>
     bfe:	08 95       	ret
    return p;
}
// Function to count the number of characters in a string
int StringLength (const char string[])
{
	int count = 0;
     c00:	80 e0       	ldi	r24, 0x00	; 0
     c02:	90 e0       	ldi	r25, 0x00	; 0
	while ( string[count] != '\0' )
		++count;
	return count;
}
     c04:	08 95       	ret

00000c06 <FUNCtrim>:
	s[i] = '\0';
	Reverse(s);
}
// trim: remove trailing blanks, tabs, newlines
int FUNCtrim(char s[])
{
     c06:	cf 93       	push	r28
     c08:	df 93       	push	r29
     c0a:	ec 01       	movw	r28, r24
	int n;
	for (n = StringLength(s)-1; n >= 0; n--)
     c0c:	ed df       	rcall	.-38     	; 0xbe8 <StringLength>
     c0e:	9c 01       	movw	r18, r24
     c10:	21 50       	subi	r18, 0x01	; 1
     c12:	31 09       	sbc	r19, r1
     c14:	62 f0       	brmi	.+24     	; 0xc2e <FUNCtrim+0x28>
     c16:	fe 01       	movw	r30, r28
     c18:	e8 0f       	add	r30, r24
     c1a:	f9 1f       	adc	r31, r25
		if (s[n] != ' ' && s[n] != '\t' && s[n] != '\n')
     c1c:	92 91       	ld	r25, -Z
     c1e:	90 32       	cpi	r25, 0x20	; 32
     c20:	19 f0       	breq	.+6      	; 0xc28 <FUNCtrim+0x22>
     c22:	99 50       	subi	r25, 0x09	; 9
     c24:	92 30       	cpi	r25, 0x02	; 2
     c26:	18 f4       	brcc	.+6      	; 0xc2e <FUNCtrim+0x28>
}
// trim: remove trailing blanks, tabs, newlines
int FUNCtrim(char s[])
{
	int n;
	for (n = StringLength(s)-1; n >= 0; n--)
     c28:	21 50       	subi	r18, 0x01	; 1
     c2a:	31 09       	sbc	r19, r1
     c2c:	b8 f7       	brcc	.-18     	; 0xc1c <FUNCtrim+0x16>
		if (s[n] != ' ' && s[n] != '\t' && s[n] != '\n')
			break;
	s[n+1] = '\0';
     c2e:	c2 0f       	add	r28, r18
     c30:	d3 1f       	adc	r29, r19
     c32:	19 82       	std	Y+1, r1	; 0x01
	return n;
}
     c34:	c9 01       	movw	r24, r18
     c36:	df 91       	pop	r29
     c38:	cf 91       	pop	r28
     c3a:	08 95       	ret

00000c3c <Reverse>:
		++count;
	return count;
}
// reverse: reverse string s in place
void Reverse(char s[])
{
     c3c:	cf 93       	push	r28
     c3e:	df 93       	push	r29
     c40:	ec 01       	movw	r28, r24
	int c, i, j;
	for (i = 0, j = StringLength(s)-1; i < j; i++, j--){
     c42:	d2 df       	rcall	.-92     	; 0xbe8 <StringLength>
     c44:	9c 01       	movw	r18, r24
     c46:	21 50       	subi	r18, 0x01	; 1
     c48:	31 09       	sbc	r19, r1
     c4a:	12 16       	cp	r1, r18
     c4c:	13 06       	cpc	r1, r19
     c4e:	84 f4       	brge	.+32     	; 0xc70 <Reverse+0x34>
     c50:	de 01       	movw	r26, r28
     c52:	a8 0f       	add	r26, r24
     c54:	b9 1f       	adc	r27, r25
     c56:	fe 01       	movw	r30, r28
     c58:	80 e0       	ldi	r24, 0x00	; 0
     c5a:	90 e0       	ldi	r25, 0x00	; 0
		c = s[i];
     c5c:	40 81       	ld	r20, Z
		s[i] = s[j];
     c5e:	5e 91       	ld	r21, -X
     c60:	51 93       	st	Z+, r21
		s[j] = c;
     c62:	4c 93       	st	X, r20
}
// reverse: reverse string s in place
void Reverse(char s[])
{
	int c, i, j;
	for (i = 0, j = StringLength(s)-1; i < j; i++, j--){
     c64:	01 96       	adiw	r24, 0x01	; 1
     c66:	21 50       	subi	r18, 0x01	; 1
     c68:	31 09       	sbc	r19, r1
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	b4 f3       	brlt	.-20     	; 0xc5c <Reverse+0x20>
		c = s[i];
		s[i] = s[j];
		s[j] = c;
	}
}
     c70:	df 91       	pop	r29
     c72:	cf 91       	pop	r28
     c74:	08 95       	ret

00000c76 <FUNCitoa>:
				v[j+gap] = temp;
			}
}
// itoa: convert n to characters in s
void FUNCitoa(int32_t n, char s[])
{
     c76:	4f 92       	push	r4
     c78:	5f 92       	push	r5
     c7a:	6f 92       	push	r6
     c7c:	7f 92       	push	r7
     c7e:	af 92       	push	r10
     c80:	bf 92       	push	r11
     c82:	cf 92       	push	r12
     c84:	df 92       	push	r13
     c86:	ef 92       	push	r14
     c88:	ff 92       	push	r15
     c8a:	0f 93       	push	r16
     c8c:	1f 93       	push	r17
     c8e:	cf 93       	push	r28
     c90:	df 93       	push	r29
     c92:	6a 01       	movw	r12, r20
	int i, sign;
	if ((sign = n) < 0) // record sign
     c94:	5b 01       	movw	r10, r22
     c96:	77 23       	and	r23, r23
     c98:	3c f4       	brge	.+14     	; 0xca8 <FUNCitoa+0x32>
		n = -n; // make n positive
     c9a:	90 95       	com	r25
     c9c:	80 95       	com	r24
     c9e:	70 95       	com	r23
     ca0:	61 95       	neg	r22
     ca2:	7f 4f       	sbci	r23, 0xFF	; 255
     ca4:	8f 4f       	sbci	r24, 0xFF	; 255
     ca6:	9f 4f       	sbci	r25, 0xFF	; 255
     ca8:	86 01       	movw	r16, r12
				v[j+gap] = temp;
			}
}
// itoa: convert n to characters in s
void FUNCitoa(int32_t n, char s[])
{
     caa:	e1 2c       	mov	r14, r1
     cac:	f1 2c       	mov	r15, r1
	int i, sign;
	if ((sign = n) < 0) // record sign
		n = -n; // make n positive
	i = 0;
	do { // generate digits in reverse order
		s[i++] = n % 10 + '0'; // get next digit
     cae:	0f 2e       	mov	r0, r31
     cb0:	fa e0       	ldi	r31, 0x0A	; 10
     cb2:	4f 2e       	mov	r4, r31
     cb4:	51 2c       	mov	r5, r1
     cb6:	61 2c       	mov	r6, r1
     cb8:	71 2c       	mov	r7, r1
     cba:	f0 2d       	mov	r31, r0
     cbc:	01 c0       	rjmp	.+2      	; 0xcc0 <FUNCitoa+0x4a>
     cbe:	7e 01       	movw	r14, r28
     cc0:	e7 01       	movw	r28, r14
     cc2:	21 96       	adiw	r28, 0x01	; 1
     cc4:	a3 01       	movw	r20, r6
     cc6:	92 01       	movw	r18, r4
     cc8:	0e 94 14 11 	call	0x2228	; 0x2228 <__divmodsi4>
     ccc:	60 5d       	subi	r22, 0xD0	; 208
     cce:	f8 01       	movw	r30, r16
     cd0:	61 93       	st	Z+, r22
     cd2:	8f 01       	movw	r16, r30
	}while ((n /= 10) > 0); // delete it
     cd4:	62 2f       	mov	r22, r18
     cd6:	73 2f       	mov	r23, r19
     cd8:	84 2f       	mov	r24, r20
     cda:	95 2f       	mov	r25, r21
     cdc:	16 16       	cp	r1, r22
     cde:	17 06       	cpc	r1, r23
     ce0:	18 06       	cpc	r1, r24
     ce2:	19 06       	cpc	r1, r25
     ce4:	64 f3       	brlt	.-40     	; 0xcbe <FUNCitoa+0x48>
	if (sign < 0)
     ce6:	bb 20       	and	r11, r11
     ce8:	34 f4       	brge	.+12     	; 0xcf6 <FUNCitoa+0x80>
		s[i++] = '-';
     cea:	cc 0d       	add	r28, r12
     cec:	dd 1d       	adc	r29, r13
     cee:	8d e2       	ldi	r24, 0x2D	; 45
     cf0:	88 83       	st	Y, r24
     cf2:	e7 01       	movw	r28, r14
     cf4:	22 96       	adiw	r28, 0x02	; 2
	s[i] = '\0';
     cf6:	cc 0d       	add	r28, r12
     cf8:	dd 1d       	adc	r29, r13
     cfa:	18 82       	st	Y, r1
	Reverse(s);
     cfc:	c6 01       	movw	r24, r12
     cfe:	9e df       	rcall	.-196    	; 0xc3c <Reverse>
}
     d00:	df 91       	pop	r29
     d02:	cf 91       	pop	r28
     d04:	1f 91       	pop	r17
     d06:	0f 91       	pop	r16
     d08:	ff 90       	pop	r15
     d0a:	ef 90       	pop	r14
     d0c:	df 90       	pop	r13
     d0e:	cf 90       	pop	r12
     d10:	bf 90       	pop	r11
     d12:	af 90       	pop	r10
     d14:	7f 90       	pop	r7
     d16:	6f 90       	pop	r6
     d18:	5f 90       	pop	r5
     d1a:	4f 90       	pop	r4
     d1c:	08 95       	ret

00000d1e <FUNCbcd2bin>:
		s[j] = c;
	}
}
unsigned char FUNCbcd2bin(unsigned char val)
{
	return (val & 0x0f) + (val >> 4) * 10;
     d1e:	98 2f       	mov	r25, r24
     d20:	92 95       	swap	r25
     d22:	9f 70       	andi	r25, 0x0F	; 15
     d24:	99 0f       	add	r25, r25
     d26:	29 2f       	mov	r18, r25
     d28:	22 0f       	add	r18, r18
     d2a:	22 0f       	add	r18, r18
     d2c:	92 0f       	add	r25, r18
     d2e:	8f 70       	andi	r24, 0x0F	; 15
}
     d30:	89 0f       	add	r24, r25
     d32:	08 95       	ret

00000d34 <FUNCbin2bcd>:
unsigned char FUNCbin2bcd(unsigned val)
{
     d34:	ac 01       	movw	r20, r24
	return ((val / 10) << 4) + val % 10;
     d36:	9c 01       	movw	r18, r24
     d38:	ad ec       	ldi	r26, 0xCD	; 205
     d3a:	bc ec       	ldi	r27, 0xCC	; 204
     d3c:	0e 94 39 11 	call	0x2272	; 0x2272 <__umulhisi3>
     d40:	96 95       	lsr	r25
     d42:	87 95       	ror	r24
     d44:	96 95       	lsr	r25
     d46:	87 95       	ror	r24
     d48:	96 95       	lsr	r25
     d4a:	87 95       	ror	r24
     d4c:	bc 01       	movw	r22, r24
     d4e:	66 0f       	add	r22, r22
     d50:	77 1f       	adc	r23, r23
     d52:	9c 01       	movw	r18, r24
     d54:	22 0f       	add	r18, r18
     d56:	33 1f       	adc	r19, r19
     d58:	22 0f       	add	r18, r18
     d5a:	33 1f       	adc	r19, r19
     d5c:	22 0f       	add	r18, r18
     d5e:	33 1f       	adc	r19, r19
     d60:	26 0f       	add	r18, r22
     d62:	37 1f       	adc	r19, r23
     d64:	42 1b       	sub	r20, r18
     d66:	53 0b       	sbc	r21, r19
}
     d68:	34 2f       	mov	r19, r20
     d6a:	20 e1       	ldi	r18, 0x10	; 16
     d6c:	82 9f       	mul	r24, r18
     d6e:	30 0d       	add	r19, r0
     d70:	11 24       	eor	r1, r1
     d72:	83 2f       	mov	r24, r19
     d74:	08 95       	ret

00000d76 <FUNCgcd1>:
long FUNCgcd1(long a, long b)
{
     d76:	cf 92       	push	r12
     d78:	df 92       	push	r13
     d7a:	ef 92       	push	r14
     d7c:	ff 92       	push	r15
     d7e:	cf 93       	push	r28
     d80:	df 93       	push	r29
     d82:	cd b7       	in	r28, 0x3d	; 61
     d84:	de b7       	in	r29, 0x3e	; 62
     d86:	28 97       	sbiw	r28, 0x08	; 8
     d88:	0f b6       	in	r0, 0x3f	; 63
     d8a:	f8 94       	cli
     d8c:	de bf       	out	0x3e, r29	; 62
     d8e:	0f be       	out	0x3f, r0	; 63
     d90:	cd bf       	out	0x3d, r28	; 61
     d92:	6b 01       	movw	r12, r22
     d94:	7c 01       	movw	r14, r24
     d96:	69 83       	std	Y+1, r22	; 0x01
     d98:	7a 83       	std	Y+2, r23	; 0x02
     d9a:	8b 83       	std	Y+3, r24	; 0x03
     d9c:	9c 83       	std	Y+4, r25	; 0x04
     d9e:	2d 83       	std	Y+5, r18	; 0x05
     da0:	3e 83       	std	Y+6, r19	; 0x06
     da2:	4f 83       	std	Y+7, r20	; 0x07
     da4:	58 87       	std	Y+8, r21	; 0x08
	long r;
	if (a < b)
     da6:	c2 16       	cp	r12, r18
     da8:	d3 06       	cpc	r13, r19
     daa:	e4 06       	cpc	r14, r20
     dac:	f5 06       	cpc	r15, r21
     dae:	34 f4       	brge	.+12     	; 0xdbc <FUNCgcd1+0x46>
		FUNCswap(&a, &b);
     db0:	be 01       	movw	r22, r28
     db2:	6b 5f       	subi	r22, 0xFB	; 251
     db4:	7f 4f       	sbci	r23, 0xFF	; 255
     db6:	ce 01       	movw	r24, r28
     db8:	01 96       	adiw	r24, 0x01	; 1
     dba:	03 dd       	rcall	.-1530   	; 0x7c2 <FUNCswap>
	if (!b){
     dbc:	8d 81       	ldd	r24, Y+5	; 0x05
     dbe:	9e 81       	ldd	r25, Y+6	; 0x06
     dc0:	af 81       	ldd	r26, Y+7	; 0x07
     dc2:	b8 85       	ldd	r27, Y+8	; 0x08
     dc4:	89 2b       	or	r24, r25
     dc6:	8a 2b       	or	r24, r26
     dc8:	8b 2b       	or	r24, r27
     dca:	71 f4       	brne	.+28     	; 0xde8 <FUNCgcd1+0x72>
		while ((r = a % b) != 0) {
     dcc:	69 81       	ldd	r22, Y+1	; 0x01
     dce:	7a 81       	ldd	r23, Y+2	; 0x02
     dd0:	8b 81       	ldd	r24, Y+3	; 0x03
     dd2:	9c 81       	ldd	r25, Y+4	; 0x04
     dd4:	20 e0       	ldi	r18, 0x00	; 0
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	a9 01       	movw	r20, r18
     dda:	0e 94 14 11 	call	0x2228	; 0x2228 <__divmodsi4>
     dde:	61 15       	cp	r22, r1
     de0:	71 05       	cpc	r23, r1
     de2:	81 05       	cpc	r24, r1
     de4:	91 05       	cpc	r25, r1
     de6:	29 f4       	brne	.+10     	; 0xdf2 <FUNCgcd1+0x7c>
			a = b;
			b = r;
		}
	}	
	return b;
     de8:	6d 81       	ldd	r22, Y+5	; 0x05
     dea:	7e 81       	ldd	r23, Y+6	; 0x06
     dec:	8f 81       	ldd	r24, Y+7	; 0x07
     dee:	98 85       	ldd	r25, Y+8	; 0x08
     df0:	05 c0       	rjmp	.+10     	; 0xdfc <FUNCgcd1+0x86>
	if (a < b)
		FUNCswap(&a, &b);
	if (!b){
		while ((r = a % b) != 0) {
			a = b;
			b = r;
     df2:	6d 83       	std	Y+5, r22	; 0x05
     df4:	7e 83       	std	Y+6, r23	; 0x06
     df6:	8f 83       	std	Y+7, r24	; 0x07
     df8:	98 87       	std	Y+8, r25	; 0x08
     dfa:	f6 cf       	rjmp	.-20     	; 0xde8 <FUNCgcd1+0x72>
		}
	}	
	return b;
}
     dfc:	28 96       	adiw	r28, 0x08	; 8
     dfe:	0f b6       	in	r0, 0x3f	; 63
     e00:	f8 94       	cli
     e02:	de bf       	out	0x3e, r29	; 62
     e04:	0f be       	out	0x3f, r0	; 63
     e06:	cd bf       	out	0x3d, r28	; 61
     e08:	df 91       	pop	r29
     e0a:	cf 91       	pop	r28
     e0c:	ff 90       	pop	r15
     e0e:	ef 90       	pop	r14
     e10:	df 90       	pop	r13
     e12:	cf 90       	pop	r12
     e14:	08 95       	ret

00000e16 <FUNCpincheck>:
	uint8_t lh;
	if(port & (1<<pin))
		lh=1;
	else
		lh=0;
	return lh;
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	02 c0       	rjmp	.+4      	; 0xe1e <FUNCpincheck+0x8>
     e1a:	95 95       	asr	r25
     e1c:	87 95       	ror	r24
     e1e:	6a 95       	dec	r22
     e20:	e2 f7       	brpl	.-8      	; 0xe1a <FUNCpincheck+0x4>
}
     e22:	81 70       	andi	r24, 0x01	; 1
     e24:	08 95       	ret

00000e26 <FUNCprint_binary>:
char* FUNCprint_binary(int number)
{
     e26:	e0 e9       	ldi	r30, 0x90	; 144
     e28:	f1 e0       	ldi	r31, 0x01	; 1
	int i,c;
    for(i=128,c=0;i;i>>=1,c++){
     e2a:	20 e0       	ldi	r18, 0x00	; 0
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	40 e8       	ldi	r20, 0x80	; 128
     e30:	50 e0       	ldi	r21, 0x00	; 0
	(number & i) ? (FUNCstr[c]='1') : (FUNCstr[c]='0');
     e32:	b0 e3       	ldi	r27, 0x30	; 48
     e34:	a1 e3       	ldi	r26, 0x31	; 49
     e36:	bc 01       	movw	r22, r24
     e38:	64 23       	and	r22, r20
     e3a:	75 23       	and	r23, r21
     e3c:	67 2b       	or	r22, r23
     e3e:	11 f0       	breq	.+4      	; 0xe44 <FUNCprint_binary+0x1e>
     e40:	a0 83       	st	Z, r26
     e42:	01 c0       	rjmp	.+2      	; 0xe46 <FUNCprint_binary+0x20>
     e44:	b0 83       	st	Z, r27
	return lh;
}
char* FUNCprint_binary(int number)
{
	int i,c;
    for(i=128,c=0;i;i>>=1,c++){
     e46:	55 95       	asr	r21
     e48:	47 95       	ror	r20
     e4a:	2f 5f       	subi	r18, 0xFF	; 255
     e4c:	3f 4f       	sbci	r19, 0xFF	; 255
     e4e:	31 96       	adiw	r30, 0x01	; 1
     e50:	28 30       	cpi	r18, 0x08	; 8
     e52:	31 05       	cpc	r19, r1
     e54:	81 f7       	brne	.-32     	; 0xe36 <FUNCprint_binary+0x10>
	(number & i) ? (FUNCstr[c]='1') : (FUNCstr[c]='0');
	}
	FUNCstr[c]='\0';
     e56:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <FUNCstr+0x8>
	return FUNCstr;
}
     e5a:	80 e9       	ldi	r24, 0x90	; 144
     e5c:	91 e0       	ldi	r25, 0x01	; 1
     e5e:	08 95       	ret

00000e60 <FUNCmayia>:
// power: raise base to n-th power; n >= 0
unsigned int Power(uint8_t base, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
     e60:	a4 2f       	mov	r26, r20
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	10 97       	sbiw	r26, 0x00	; 0
     e66:	61 f0       	breq	.+24     	; 0xe80 <FUNCmayia+0x20>
     e68:	21 e0       	ldi	r18, 0x01	; 1
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	e1 e0       	ldi	r30, 0x01	; 1
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
        p = p * base;
     e70:	ee 0f       	add	r30, r30
     e72:	ff 1f       	adc	r31, r31
// power: raise base to n-th power; n >= 0
unsigned int Power(uint8_t base, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
     e74:	2f 5f       	subi	r18, 0xFF	; 255
     e76:	3f 4f       	sbci	r19, 0xFF	; 255
     e78:	a2 17       	cp	r26, r18
     e7a:	b3 07       	cpc	r27, r19
     e7c:	c8 f7       	brcc	.-14     	; 0xe70 <FUNCmayia+0x10>
     e7e:	02 c0       	rjmp	.+4      	; 0xe84 <FUNCmayia+0x24>
}
// power: raise base to n-th power; n >= 0
unsigned int Power(uint8_t base, uint8_t n)
{
    unsigned int i, p;
    p = 1;
     e80:	e1 e0       	ldi	r30, 0x01	; 1
     e82:	f0 e0       	ldi	r31, 0x00	; 0
unsigned int FUNCmayia(unsigned int xi, unsigned int xf, uint8_t nbits)
{//magic formula
	unsigned int mask;
	unsigned int diff;
	unsigned int trans;
	mask=Power(2,nbits)-1;
     e84:	31 97       	sbiw	r30, 0x01	; 1
	xi&=mask;
	xf&=mask;
     e86:	6e 23       	and	r22, r30
     e88:	7f 23       	and	r23, r31
	diff=xf^xi;
     e8a:	8e 23       	and	r24, r30
     e8c:	9f 23       	and	r25, r31
     e8e:	86 27       	eor	r24, r22
     e90:	97 27       	eor	r25, r23
	trans=diff&xf;
	return (trans<<nbits)|diff;
     e92:	68 23       	and	r22, r24
     e94:	79 23       	and	r23, r25
     e96:	02 c0       	rjmp	.+4      	; 0xe9c <FUNCmayia+0x3c>
     e98:	66 0f       	add	r22, r22
     e9a:	77 1f       	adc	r23, r23
     e9c:	4a 95       	dec	r20
     e9e:	e2 f7       	brpl	.-8      	; 0xe98 <FUNCmayia+0x38>
}
     ea0:	86 2b       	or	r24, r22
     ea2:	97 2b       	or	r25, r23
     ea4:	08 95       	ret

00000ea6 <FUNCenable>:
*/
/*
** procedure and function
*/
FUNC FUNCenable( void )
{
     ea6:	fc 01       	movw	r30, r24
	uint8_t tSREG;
	tSREG=SREG;
     ea8:	9f b7       	in	r25, 0x3f	; 63
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
     eaa:	8f b7       	in	r24, 0x3f	; 63
     eac:	8f 77       	andi	r24, 0x7F	; 127
     eae:	8f bf       	out	0x3f, r24	; 63
	func.putstr=FUNCputstr;
	func.getnum=FUNCgetnum;
	func.getnumv2=FUNCgetnumv2;
	func.readint=FUNCreadint;
	*/
	SREG=tSREG;
     eb0:	9f bf       	out	0x3f, r25	; 63
	/******/
	return func;
     eb2:	89 ed       	ldi	r24, 0xD9	; 217
     eb4:	95 e0       	ldi	r25, 0x05	; 5
     eb6:	91 83       	std	Z+1, r25	; 0x01
     eb8:	80 83       	st	Z, r24
     eba:	84 ef       	ldi	r24, 0xF4	; 244
     ebc:	95 e0       	ldi	r25, 0x05	; 5
     ebe:	93 83       	std	Z+3, r25	; 0x03
     ec0:	82 83       	std	Z+2, r24	; 0x02
     ec2:	8e e1       	ldi	r24, 0x1E	; 30
     ec4:	96 e0       	ldi	r25, 0x06	; 6
     ec6:	95 83       	std	Z+5, r25	; 0x05
     ec8:	84 83       	std	Z+4, r24	; 0x04
     eca:	80 e3       	ldi	r24, 0x30	; 48
     ecc:	97 e0       	ldi	r25, 0x07	; 7
     ece:	97 83       	std	Z+7, r25	; 0x07
     ed0:	86 83       	std	Z+6, r24	; 0x06
     ed2:	8b ec       	ldi	r24, 0xCB	; 203
     ed4:	93 e0       	ldi	r25, 0x03	; 3
     ed6:	91 87       	std	Z+9, r25	; 0x09
     ed8:	80 87       	std	Z+8, r24	; 0x08
     eda:	89 ed       	ldi	r24, 0xD9	; 217
     edc:	93 e0       	ldi	r25, 0x03	; 3
     ede:	93 87       	std	Z+11, r25	; 0x0b
     ee0:	82 87       	std	Z+10, r24	; 0x0a
     ee2:	8c ed       	ldi	r24, 0xDC	; 220
     ee4:	93 e0       	ldi	r25, 0x03	; 3
     ee6:	95 87       	std	Z+13, r25	; 0x0d
     ee8:	84 87       	std	Z+12, r24	; 0x0c
     eea:	8f ed       	ldi	r24, 0xDF	; 223
     eec:	93 e0       	ldi	r25, 0x03	; 3
     eee:	97 87       	std	Z+15, r25	; 0x0f
     ef0:	86 87       	std	Z+14, r24	; 0x0e
     ef2:	85 ed       	ldi	r24, 0xD5	; 213
     ef4:	93 e0       	ldi	r25, 0x03	; 3
     ef6:	91 8b       	std	Z+17, r25	; 0x11
     ef8:	80 8b       	std	Z+16, r24	; 0x10
     efa:	87 ed       	ldi	r24, 0xD7	; 215
     efc:	93 e0       	ldi	r25, 0x03	; 3
     efe:	93 8b       	std	Z+19, r25	; 0x13
     f00:	82 8b       	std	Z+18, r24	; 0x12
     f02:	81 ee       	ldi	r24, 0xE1	; 225
     f04:	93 e0       	ldi	r25, 0x03	; 3
     f06:	95 8b       	std	Z+21, r25	; 0x15
     f08:	84 8b       	std	Z+20, r24	; 0x14
     f0a:	82 e0       	ldi	r24, 0x02	; 2
     f0c:	94 e0       	ldi	r25, 0x04	; 4
     f0e:	97 8b       	std	Z+23, r25	; 0x17
     f10:	86 8b       	std	Z+22, r24	; 0x16
     f12:	80 e1       	ldi	r24, 0x10	; 16
     f14:	94 e0       	ldi	r25, 0x04	; 4
     f16:	91 8f       	std	Z+25, r25	; 0x19
     f18:	80 8f       	std	Z+24, r24	; 0x18
     f1a:	82 e3       	ldi	r24, 0x32	; 50
     f1c:	94 e0       	ldi	r25, 0x04	; 4
     f1e:	93 8f       	std	Z+27, r25	; 0x1b
     f20:	82 8f       	std	Z+26, r24	; 0x1a
     f22:	8b e3       	ldi	r24, 0x3B	; 59
     f24:	96 e0       	ldi	r25, 0x06	; 6
     f26:	95 8f       	std	Z+29, r25	; 0x1d
     f28:	84 8f       	std	Z+28, r24	; 0x1c
     f2a:	83 e0       	ldi	r24, 0x03	; 3
     f2c:	96 e0       	ldi	r25, 0x06	; 6
     f2e:	97 8f       	std	Z+31, r25	; 0x1f
     f30:	86 8f       	std	Z+30, r24	; 0x1e
     f32:	88 ed       	ldi	r24, 0xD8	; 216
     f34:	94 e0       	ldi	r25, 0x04	; 4
     f36:	91 a3       	std	Z+33, r25	; 0x21
     f38:	80 a3       	std	Z+32, r24	; 0x20
     f3a:	8d ed       	ldi	r24, 0xDD	; 221
     f3c:	94 e0       	ldi	r25, 0x04	; 4
     f3e:	93 a3       	std	Z+35, r25	; 0x23
     f40:	82 a3       	std	Z+34, r24	; 0x22
     f42:	8c ee       	ldi	r24, 0xEC	; 236
     f44:	94 e0       	ldi	r25, 0x04	; 4
     f46:	95 a3       	std	Z+37, r25	; 0x25
     f48:	84 a3       	std	Z+36, r24	; 0x24
     f4a:	80 e1       	ldi	r24, 0x10	; 16
     f4c:	95 e0       	ldi	r25, 0x05	; 5
     f4e:	97 a3       	std	Z+39, r25	; 0x27
     f50:	86 a3       	std	Z+38, r24	; 0x26
     f52:	82 e1       	ldi	r24, 0x12	; 18
     f54:	95 e0       	ldi	r25, 0x05	; 5
     f56:	91 a7       	std	Z+41, r25	; 0x29
     f58:	80 a7       	std	Z+40, r24	; 0x28
     f5a:	8c e1       	ldi	r24, 0x1C	; 28
     f5c:	95 e0       	ldi	r25, 0x05	; 5
     f5e:	93 a7       	std	Z+43, r25	; 0x2b
     f60:	82 a7       	std	Z+42, r24	; 0x2a
     f62:	89 e2       	ldi	r24, 0x29	; 41
     f64:	95 e0       	ldi	r25, 0x05	; 5
     f66:	95 a7       	std	Z+45, r25	; 0x2d
     f68:	84 a7       	std	Z+44, r24	; 0x2c
     f6a:	85 e3       	ldi	r24, 0x35	; 53
     f6c:	95 e0       	ldi	r25, 0x05	; 5
     f6e:	97 a7       	std	Z+47, r25	; 0x2f
     f70:	86 a7       	std	Z+46, r24	; 0x2e
     f72:	8d e4       	ldi	r24, 0x4D	; 77
     f74:	95 e0       	ldi	r25, 0x05	; 5
     f76:	91 ab       	std	Z+49, r25	; 0x31
     f78:	80 ab       	std	Z+48, r24	; 0x30
     f7a:	80 e6       	ldi	r24, 0x60	; 96
     f7c:	95 e0       	ldi	r25, 0x05	; 5
     f7e:	93 ab       	std	Z+51, r25	; 0x33
     f80:	82 ab       	std	Z+50, r24	; 0x32
     f82:	8b e6       	ldi	r24, 0x6B	; 107
     f84:	95 e0       	ldi	r25, 0x05	; 5
     f86:	95 ab       	std	Z+53, r25	; 0x35
     f88:	84 ab       	std	Z+52, r24	; 0x34
     f8a:	88 e9       	ldi	r24, 0x98	; 152
     f8c:	95 e0       	ldi	r25, 0x05	; 5
     f8e:	97 ab       	std	Z+55, r25	; 0x37
     f90:	86 ab       	std	Z+54, r24	; 0x36
     f92:	8f e8       	ldi	r24, 0x8F	; 143
     f94:	96 e0       	ldi	r25, 0x06	; 6
     f96:	91 af       	std	Z+57, r25	; 0x39
     f98:	80 af       	std	Z+56, r24	; 0x38
     f9a:	8a e9       	ldi	r24, 0x9A	; 154
     f9c:	96 e0       	ldi	r25, 0x06	; 6
     f9e:	93 af       	std	Z+59, r25	; 0x3b
     fa0:	82 af       	std	Z+58, r24	; 0x3a
     fa2:	8b eb       	ldi	r24, 0xBB	; 187
     fa4:	96 e0       	ldi	r25, 0x06	; 6
     fa6:	95 af       	std	Z+61, r25	; 0x3d
     fa8:	84 af       	std	Z+60, r24	; 0x3c
     faa:	8b e0       	ldi	r24, 0x0B	; 11
     fac:	97 e0       	ldi	r25, 0x07	; 7
     fae:	97 af       	std	Z+63, r25	; 0x3f
     fb0:	86 af       	std	Z+62, r24	; 0x3e
     fb2:	df 01       	movw	r26, r30
     fb4:	a0 5c       	subi	r26, 0xC0	; 192
     fb6:	bf 4f       	sbci	r27, 0xFF	; 255
     fb8:	83 e1       	ldi	r24, 0x13	; 19
     fba:	97 e0       	ldi	r25, 0x07	; 7
     fbc:	8d 93       	st	X+, r24
     fbe:	9c 93       	st	X, r25
}
     fc0:	cf 01       	movw	r24, r30
     fc2:	08 95       	ret

00000fc4 <LCD0_write>:
			LCD1_write((0x80+x),INST);
			LCD1_BF();
			break;
		case 1:
			LCD1_write((0xC0+x),INST);
			LCD1_BF();
     fc4:	e0 91 aa 01 	lds	r30, 0x01AA	; 0x8001aa <lcd0_PORT>
     fc8:	f0 91 ab 01 	lds	r31, 0x01AB	; 0x8001ab <lcd0_PORT+0x1>
     fcc:	90 81       	ld	r25, Z
     fce:	9d 7f       	andi	r25, 0xFD	; 253
     fd0:	90 83       	st	Z, r25
     fd2:	67 2b       	or	r22, r23
     fd4:	41 f0       	breq	.+16     	; 0xfe6 <LCD0_write+0x22>
     fd6:	e0 91 aa 01 	lds	r30, 0x01AA	; 0x8001aa <lcd0_PORT>
     fda:	f0 91 ab 01 	lds	r31, 0x01AB	; 0x8001ab <lcd0_PORT+0x1>
     fde:	90 81       	ld	r25, Z
     fe0:	91 60       	ori	r25, 0x01	; 1
     fe2:	90 83       	st	Z, r25
     fe4:	07 c0       	rjmp	.+14     	; 0xff4 <LCD0_write+0x30>
     fe6:	e0 91 aa 01 	lds	r30, 0x01AA	; 0x8001aa <lcd0_PORT>
     fea:	f0 91 ab 01 	lds	r31, 0x01AB	; 0x8001ab <lcd0_PORT+0x1>
     fee:	90 81       	ld	r25, Z
     ff0:	9e 7f       	andi	r25, 0xFE	; 254
     ff2:	90 83       	st	Z, r25
     ff4:	e0 91 a7 01 	lds	r30, 0x01A7	; 0x8001a7 <lcd0_DDR>
     ff8:	f0 91 a8 01 	lds	r31, 0x01A8	; 0x8001a8 <lcd0_DDR+0x1>
     ffc:	90 81       	ld	r25, Z
     ffe:	90 6f       	ori	r25, 0xF0	; 240
    1000:	90 83       	st	Z, r25
    1002:	e0 91 aa 01 	lds	r30, 0x01AA	; 0x8001aa <lcd0_PORT>
    1006:	f0 91 ab 01 	lds	r31, 0x01AB	; 0x8001ab <lcd0_PORT+0x1>
    100a:	90 81       	ld	r25, Z
    100c:	94 60       	ori	r25, 0x04	; 4
    100e:	90 83       	st	Z, r25
    1010:	88 23       	and	r24, r24
    1012:	44 f4       	brge	.+16     	; 0x1024 <LCD0_write+0x60>
    1014:	e0 91 aa 01 	lds	r30, 0x01AA	; 0x8001aa <lcd0_PORT>
    1018:	f0 91 ab 01 	lds	r31, 0x01AB	; 0x8001ab <lcd0_PORT+0x1>
    101c:	90 81       	ld	r25, Z
    101e:	90 68       	ori	r25, 0x80	; 128
    1020:	90 83       	st	Z, r25
    1022:	07 c0       	rjmp	.+14     	; 0x1032 <LCD0_write+0x6e>
    1024:	e0 91 aa 01 	lds	r30, 0x01AA	; 0x8001aa <lcd0_PORT>
    1028:	f0 91 ab 01 	lds	r31, 0x01AB	; 0x8001ab <lcd0_PORT+0x1>
    102c:	90 81       	ld	r25, Z
    102e:	9f 77       	andi	r25, 0x7F	; 127
    1030:	90 83       	st	Z, r25
    1032:	86 ff       	sbrs	r24, 6
    1034:	08 c0       	rjmp	.+16     	; 0x1046 <LCD0_write+0x82>
    1036:	e0 91 aa 01 	lds	r30, 0x01AA	; 0x8001aa <lcd0_PORT>
    103a:	f0 91 ab 01 	lds	r31, 0x01AB	; 0x8001ab <lcd0_PORT+0x1>
    103e:	90 81       	ld	r25, Z
    1040:	90 64       	ori	r25, 0x40	; 64
    1042:	90 83       	st	Z, r25
    1044:	07 c0       	rjmp	.+14     	; 0x1054 <LCD0_write+0x90>
    1046:	e0 91 aa 01 	lds	r30, 0x01AA	; 0x8001aa <lcd0_PORT>
    104a:	f0 91 ab 01 	lds	r31, 0x01AB	; 0x8001ab <lcd0_PORT+0x1>
    104e:	90 81       	ld	r25, Z
    1050:	9f 7b       	andi	r25, 0xBF	; 191
    1052:	90 83       	st	Z, r25
    1054:	85 ff       	sbrs	r24, 5
    1056:	08 c0       	rjmp	.+16     	; 0x1068 <LCD0_write+0xa4>
    1058:	e0 91 aa 01 	lds	r30, 0x01AA	; 0x8001aa <lcd0_PORT>
    105c:	f0 91 ab 01 	lds	r31, 0x01AB	; 0x8001ab <lcd0_PORT+0x1>
    1060:	90 81       	ld	r25, Z
    1062:	90 62       	ori	r25, 0x20	; 32
    1064:	90 83       	st	Z, r25
    1066:	07 c0       	rjmp	.+14     	; 0x1076 <LCD0_write+0xb2>
    1068:	e0 91 aa 01 	lds	r30, 0x01AA	; 0x8001aa <lcd0_PORT>
    106c:	f0 91 ab 01 	lds	r31, 0x01AB	; 0x8001ab <lcd0_PORT+0x1>
    1070:	90 81       	ld	r25, Z
    1072:	9f 7d       	andi	r25, 0xDF	; 223
    1074:	90 83       	st	Z, r25
    1076:	84 ff       	sbrs	r24, 4
    1078:	08 c0       	rjmp	.+16     	; 0x108a <LCD0_write+0xc6>
    107a:	e0 91 aa 01 	lds	r30, 0x01AA	; 0x8001aa <lcd0_PORT>
    107e:	f0 91 ab 01 	lds	r31, 0x01AB	; 0x8001ab <lcd0_PORT+0x1>
    1082:	90 81       	ld	r25, Z
    1084:	90 61       	ori	r25, 0x10	; 16
    1086:	90 83       	st	Z, r25
    1088:	07 c0       	rjmp	.+14     	; 0x1098 <LCD0_write+0xd4>
    108a:	e0 91 aa 01 	lds	r30, 0x01AA	; 0x8001aa <lcd0_PORT>
    108e:	f0 91 ab 01 	lds	r31, 0x01AB	; 0x8001ab <lcd0_PORT+0x1>
    1092:	90 81       	ld	r25, Z
    1094:	9f 7e       	andi	r25, 0xEF	; 239
    1096:	90 83       	st	Z, r25
    1098:	e0 91 aa 01 	lds	r30, 0x01AA	; 0x8001aa <lcd0_PORT>
    109c:	f0 91 ab 01 	lds	r31, 0x01AB	; 0x8001ab <lcd0_PORT+0x1>
    10a0:	90 81       	ld	r25, Z
    10a2:	9b 7f       	andi	r25, 0xFB	; 251
    10a4:	90 83       	st	Z, r25
    10a6:	e0 91 aa 01 	lds	r30, 0x01AA	; 0x8001aa <lcd0_PORT>
    10aa:	f0 91 ab 01 	lds	r31, 0x01AB	; 0x8001ab <lcd0_PORT+0x1>
    10ae:	90 81       	ld	r25, Z
    10b0:	94 60       	ori	r25, 0x04	; 4
    10b2:	90 83       	st	Z, r25
    10b4:	83 ff       	sbrs	r24, 3
    10b6:	08 c0       	rjmp	.+16     	; 0x10c8 <LCD0_write+0x104>
    10b8:	e0 91 aa 01 	lds	r30, 0x01AA	; 0x8001aa <lcd0_PORT>
    10bc:	f0 91 ab 01 	lds	r31, 0x01AB	; 0x8001ab <lcd0_PORT+0x1>
    10c0:	90 81       	ld	r25, Z
    10c2:	90 68       	ori	r25, 0x80	; 128
    10c4:	90 83       	st	Z, r25
    10c6:	07 c0       	rjmp	.+14     	; 0x10d6 <LCD0_write+0x112>
    10c8:	e0 91 aa 01 	lds	r30, 0x01AA	; 0x8001aa <lcd0_PORT>
    10cc:	f0 91 ab 01 	lds	r31, 0x01AB	; 0x8001ab <lcd0_PORT+0x1>
    10d0:	90 81       	ld	r25, Z
    10d2:	9f 77       	andi	r25, 0x7F	; 127
    10d4:	90 83       	st	Z, r25
    10d6:	82 ff       	sbrs	r24, 2
    10d8:	08 c0       	rjmp	.+16     	; 0x10ea <LCD0_write+0x126>
    10da:	e0 91 aa 01 	lds	r30, 0x01AA	; 0x8001aa <lcd0_PORT>
    10de:	f0 91 ab 01 	lds	r31, 0x01AB	; 0x8001ab <lcd0_PORT+0x1>
    10e2:	90 81       	ld	r25, Z
    10e4:	90 64       	ori	r25, 0x40	; 64
    10e6:	90 83       	st	Z, r25
    10e8:	07 c0       	rjmp	.+14     	; 0x10f8 <LCD0_write+0x134>
    10ea:	e0 91 aa 01 	lds	r30, 0x01AA	; 0x8001aa <lcd0_PORT>
    10ee:	f0 91 ab 01 	lds	r31, 0x01AB	; 0x8001ab <lcd0_PORT+0x1>
    10f2:	90 81       	ld	r25, Z
    10f4:	9f 7b       	andi	r25, 0xBF	; 191
    10f6:	90 83       	st	Z, r25
    10f8:	81 ff       	sbrs	r24, 1
    10fa:	08 c0       	rjmp	.+16     	; 0x110c <__stack+0xd>
    10fc:	e0 91 aa 01 	lds	r30, 0x01AA	; 0x8001aa <lcd0_PORT>
    1100:	f0 91 ab 01 	lds	r31, 0x01AB	; 0x8001ab <lcd0_PORT+0x1>
    1104:	90 81       	ld	r25, Z
    1106:	90 62       	ori	r25, 0x20	; 32
    1108:	90 83       	st	Z, r25
    110a:	07 c0       	rjmp	.+14     	; 0x111a <__stack+0x1b>
    110c:	e0 91 aa 01 	lds	r30, 0x01AA	; 0x8001aa <lcd0_PORT>
    1110:	f0 91 ab 01 	lds	r31, 0x01AB	; 0x8001ab <lcd0_PORT+0x1>
    1114:	90 81       	ld	r25, Z
    1116:	9f 7d       	andi	r25, 0xDF	; 223
    1118:	90 83       	st	Z, r25
    111a:	80 ff       	sbrs	r24, 0
    111c:	08 c0       	rjmp	.+16     	; 0x112e <__stack+0x2f>
    111e:	e0 91 aa 01 	lds	r30, 0x01AA	; 0x8001aa <lcd0_PORT>
    1122:	f0 91 ab 01 	lds	r31, 0x01AB	; 0x8001ab <lcd0_PORT+0x1>
    1126:	80 81       	ld	r24, Z
    1128:	80 61       	ori	r24, 0x10	; 16
    112a:	80 83       	st	Z, r24
    112c:	07 c0       	rjmp	.+14     	; 0x113c <__stack+0x3d>
    112e:	e0 91 aa 01 	lds	r30, 0x01AA	; 0x8001aa <lcd0_PORT>
    1132:	f0 91 ab 01 	lds	r31, 0x01AB	; 0x8001ab <lcd0_PORT+0x1>
    1136:	80 81       	ld	r24, Z
    1138:	8f 7e       	andi	r24, 0xEF	; 239
    113a:	80 83       	st	Z, r24
    113c:	e0 91 aa 01 	lds	r30, 0x01AA	; 0x8001aa <lcd0_PORT>
    1140:	f0 91 ab 01 	lds	r31, 0x01AB	; 0x8001ab <lcd0_PORT+0x1>
    1144:	80 81       	ld	r24, Z
    1146:	8b 7f       	andi	r24, 0xFB	; 251
    1148:	80 83       	st	Z, r24
    114a:	08 95       	ret

0000114c <LCD0_read>:
    114c:	e0 91 a7 01 	lds	r30, 0x01A7	; 0x8001a7 <lcd0_DDR>
    1150:	f0 91 a8 01 	lds	r31, 0x01A8	; 0x8001a8 <lcd0_DDR+0x1>
    1154:	20 81       	ld	r18, Z
    1156:	2f 70       	andi	r18, 0x0F	; 15
    1158:	20 83       	st	Z, r18
    115a:	e0 91 aa 01 	lds	r30, 0x01AA	; 0x8001aa <lcd0_PORT>
    115e:	f0 91 ab 01 	lds	r31, 0x01AB	; 0x8001ab <lcd0_PORT+0x1>
    1162:	20 81       	ld	r18, Z
    1164:	20 6f       	ori	r18, 0xF0	; 240
    1166:	20 83       	st	Z, r18
    1168:	e0 91 aa 01 	lds	r30, 0x01AA	; 0x8001aa <lcd0_PORT>
    116c:	f0 91 ab 01 	lds	r31, 0x01AB	; 0x8001ab <lcd0_PORT+0x1>
    1170:	20 81       	ld	r18, Z
    1172:	22 60       	ori	r18, 0x02	; 2
    1174:	20 83       	st	Z, r18
    1176:	89 2b       	or	r24, r25
    1178:	41 f0       	breq	.+16     	; 0x118a <LCD0_read+0x3e>
    117a:	e0 91 aa 01 	lds	r30, 0x01AA	; 0x8001aa <lcd0_PORT>
    117e:	f0 91 ab 01 	lds	r31, 0x01AB	; 0x8001ab <lcd0_PORT+0x1>
    1182:	80 81       	ld	r24, Z
    1184:	81 60       	ori	r24, 0x01	; 1
    1186:	80 83       	st	Z, r24
    1188:	07 c0       	rjmp	.+14     	; 0x1198 <LCD0_read+0x4c>
    118a:	e0 91 aa 01 	lds	r30, 0x01AA	; 0x8001aa <lcd0_PORT>
    118e:	f0 91 ab 01 	lds	r31, 0x01AB	; 0x8001ab <lcd0_PORT+0x1>
    1192:	80 81       	ld	r24, Z
    1194:	8e 7f       	andi	r24, 0xFE	; 254
    1196:	80 83       	st	Z, r24
    1198:	e0 91 aa 01 	lds	r30, 0x01AA	; 0x8001aa <lcd0_PORT>
    119c:	f0 91 ab 01 	lds	r31, 0x01AB	; 0x8001ab <lcd0_PORT+0x1>
    11a0:	80 81       	ld	r24, Z
    11a2:	84 60       	ori	r24, 0x04	; 4
    11a4:	80 83       	st	Z, r24
    11a6:	e0 91 a0 01 	lds	r30, 0x01A0	; 0x8001a0 <lcd0_PIN>
    11aa:	f0 91 a1 01 	lds	r31, 0x01A1	; 0x8001a1 <lcd0_PIN+0x1>
    11ae:	80 81       	ld	r24, Z
    11b0:	88 23       	and	r24, r24
    11b2:	14 f0       	brlt	.+4      	; 0x11b8 <LCD0_read+0x6c>
    11b4:	80 e0       	ldi	r24, 0x00	; 0
    11b6:	01 c0       	rjmp	.+2      	; 0x11ba <LCD0_read+0x6e>
    11b8:	80 e8       	ldi	r24, 0x80	; 128
    11ba:	90 81       	ld	r25, Z
    11bc:	96 ff       	sbrs	r25, 6
    11be:	02 c0       	rjmp	.+4      	; 0x11c4 <LCD0_read+0x78>
    11c0:	80 64       	ori	r24, 0x40	; 64
    11c2:	01 c0       	rjmp	.+2      	; 0x11c6 <LCD0_read+0x7a>
    11c4:	8f 7b       	andi	r24, 0xBF	; 191
    11c6:	90 81       	ld	r25, Z
    11c8:	95 ff       	sbrs	r25, 5
    11ca:	02 c0       	rjmp	.+4      	; 0x11d0 <LCD0_read+0x84>
    11cc:	80 62       	ori	r24, 0x20	; 32
    11ce:	01 c0       	rjmp	.+2      	; 0x11d2 <LCD0_read+0x86>
    11d0:	8f 7d       	andi	r24, 0xDF	; 223
    11d2:	90 81       	ld	r25, Z
    11d4:	94 ff       	sbrs	r25, 4
    11d6:	02 c0       	rjmp	.+4      	; 0x11dc <LCD0_read+0x90>
    11d8:	80 61       	ori	r24, 0x10	; 16
    11da:	01 c0       	rjmp	.+2      	; 0x11de <LCD0_read+0x92>
    11dc:	8f 7e       	andi	r24, 0xEF	; 239
    11de:	e0 91 aa 01 	lds	r30, 0x01AA	; 0x8001aa <lcd0_PORT>
    11e2:	f0 91 ab 01 	lds	r31, 0x01AB	; 0x8001ab <lcd0_PORT+0x1>
    11e6:	90 81       	ld	r25, Z
    11e8:	9b 7f       	andi	r25, 0xFB	; 251
    11ea:	90 83       	st	Z, r25
    11ec:	e0 91 aa 01 	lds	r30, 0x01AA	; 0x8001aa <lcd0_PORT>
    11f0:	f0 91 ab 01 	lds	r31, 0x01AB	; 0x8001ab <lcd0_PORT+0x1>
    11f4:	90 81       	ld	r25, Z
    11f6:	94 60       	ori	r25, 0x04	; 4
    11f8:	90 83       	st	Z, r25
    11fa:	e0 91 a0 01 	lds	r30, 0x01A0	; 0x8001a0 <lcd0_PIN>
    11fe:	f0 91 a1 01 	lds	r31, 0x01A1	; 0x8001a1 <lcd0_PIN+0x1>
    1202:	90 81       	ld	r25, Z
    1204:	99 23       	and	r25, r25
    1206:	14 f4       	brge	.+4      	; 0x120c <LCD0_read+0xc0>
    1208:	88 60       	ori	r24, 0x08	; 8
    120a:	01 c0       	rjmp	.+2      	; 0x120e <LCD0_read+0xc2>
    120c:	87 7f       	andi	r24, 0xF7	; 247
    120e:	90 81       	ld	r25, Z
    1210:	96 ff       	sbrs	r25, 6
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <LCD0_read+0xcc>
    1214:	84 60       	ori	r24, 0x04	; 4
    1216:	01 c0       	rjmp	.+2      	; 0x121a <LCD0_read+0xce>
    1218:	8b 7f       	andi	r24, 0xFB	; 251
    121a:	90 81       	ld	r25, Z
    121c:	95 ff       	sbrs	r25, 5
    121e:	02 c0       	rjmp	.+4      	; 0x1224 <LCD0_read+0xd8>
    1220:	82 60       	ori	r24, 0x02	; 2
    1222:	01 c0       	rjmp	.+2      	; 0x1226 <LCD0_read+0xda>
    1224:	8d 7f       	andi	r24, 0xFD	; 253
    1226:	90 81       	ld	r25, Z
    1228:	94 ff       	sbrs	r25, 4
    122a:	02 c0       	rjmp	.+4      	; 0x1230 <LCD0_read+0xe4>
    122c:	81 60       	ori	r24, 0x01	; 1
    122e:	01 c0       	rjmp	.+2      	; 0x1232 <LCD0_read+0xe6>
    1230:	8e 7f       	andi	r24, 0xFE	; 254
    1232:	e0 91 aa 01 	lds	r30, 0x01AA	; 0x8001aa <lcd0_PORT>
    1236:	f0 91 ab 01 	lds	r31, 0x01AB	; 0x8001ab <lcd0_PORT+0x1>
    123a:	90 81       	ld	r25, Z
    123c:	9b 7f       	andi	r25, 0xFB	; 251
    123e:	90 83       	st	Z, r25
    1240:	08 95       	ret

00001242 <LCD0_BF>:
    1242:	cf 93       	push	r28
    1244:	df 93       	push	r29
    1246:	80 e0       	ldi	r24, 0x00	; 0
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	80 df       	rcall	.-256    	; 0x114c <LCD0_read>
    124c:	cb e0       	ldi	r28, 0x0B	; 11
    124e:	d0 e0       	ldi	r29, 0x00	; 0
    1250:	05 c0       	rjmp	.+10     	; 0x125c <LCD0_BF+0x1a>
    1252:	80 e0       	ldi	r24, 0x00	; 0
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	7a df       	rcall	.-268    	; 0x114c <LCD0_read>
    1258:	21 97       	sbiw	r28, 0x01	; 1
    125a:	11 f0       	breq	.+4      	; 0x1260 <LCD0_BF+0x1e>
    125c:	88 23       	and	r24, r24
    125e:	cc f3       	brlt	.-14     	; 0x1252 <LCD0_BF+0x10>
    1260:	df 91       	pop	r29
    1262:	cf 91       	pop	r28
    1264:	08 95       	ret

00001266 <LCD0_putch>:
    1266:	61 e0       	ldi	r22, 0x01	; 1
    1268:	70 e0       	ldi	r23, 0x00	; 0
    126a:	ac de       	rcall	.-680    	; 0xfc4 <LCD0_write>
    126c:	ea cf       	rjmp	.-44     	; 0x1242 <LCD0_BF>
    126e:	08 95       	ret

00001270 <LCD0_getch>:
    1270:	cf 93       	push	r28
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	6a df       	rcall	.-300    	; 0x114c <LCD0_read>
    1278:	c8 2f       	mov	r28, r24
    127a:	e3 df       	rcall	.-58     	; 0x1242 <LCD0_BF>
    127c:	8c 2f       	mov	r24, r28
    127e:	cf 91       	pop	r28
    1280:	08 95       	ret

00001282 <LCD0_string>:
    1282:	cf 93       	push	r28
    1284:	df 93       	push	r29
    1286:	ec 01       	movw	r28, r24
    1288:	88 81       	ld	r24, Y
    128a:	88 23       	and	r24, r24
    128c:	41 f0       	breq	.+16     	; 0x129e <LCD0_string+0x1c>
    128e:	21 96       	adiw	r28, 0x01	; 1
    1290:	61 e0       	ldi	r22, 0x01	; 1
    1292:	70 e0       	ldi	r23, 0x00	; 0
    1294:	97 de       	rcall	.-722    	; 0xfc4 <LCD0_write>
    1296:	d5 df       	rcall	.-86     	; 0x1242 <LCD0_BF>
    1298:	89 91       	ld	r24, Y+
    129a:	81 11       	cpse	r24, r1
    129c:	f9 cf       	rjmp	.-14     	; 0x1290 <LCD0_string+0xe>
    129e:	df 91       	pop	r29
    12a0:	cf 91       	pop	r28
    12a2:	08 95       	ret

000012a4 <LCD0_string_size>:
    12a4:	0f 93       	push	r16
    12a6:	1f 93       	push	r17
    12a8:	cf 93       	push	r28
    12aa:	df 93       	push	r29
    12ac:	fc 01       	movw	r30, r24
    12ae:	d6 2f       	mov	r29, r22
    12b0:	80 81       	ld	r24, Z
    12b2:	88 23       	and	r24, r24
    12b4:	51 f0       	breq	.+20     	; 0x12ca <LCD0_string_size+0x26>
    12b6:	8f 01       	movw	r16, r30
    12b8:	0f 5f       	subi	r16, 0xFF	; 255
    12ba:	1f 4f       	sbci	r17, 0xFF	; 255
    12bc:	61 11       	cpse	r22, r1
    12be:	09 c0       	rjmp	.+18     	; 0x12d2 <LCD0_string_size+0x2e>
    12c0:	1b c0       	rjmp	.+54     	; 0x12f8 <LCD0_string_size+0x54>
    12c2:	cf 5f       	subi	r28, 0xFF	; 255
    12c4:	dc 17       	cp	r29, r28
    12c6:	30 f4       	brcc	.+12     	; 0x12d4 <LCD0_string_size+0x30>
    12c8:	01 c0       	rjmp	.+2      	; 0x12cc <LCD0_string_size+0x28>
    12ca:	c0 e0       	ldi	r28, 0x00	; 0
    12cc:	cd 17       	cp	r28, r29
    12ce:	60 f0       	brcs	.+24     	; 0x12e8 <LCD0_string_size+0x44>
    12d0:	13 c0       	rjmp	.+38     	; 0x12f8 <LCD0_string_size+0x54>
    12d2:	c1 e0       	ldi	r28, 0x01	; 1
    12d4:	61 e0       	ldi	r22, 0x01	; 1
    12d6:	70 e0       	ldi	r23, 0x00	; 0
    12d8:	75 de       	rcall	.-790    	; 0xfc4 <LCD0_write>
    12da:	b3 df       	rcall	.-154    	; 0x1242 <LCD0_BF>
    12dc:	f8 01       	movw	r30, r16
    12de:	81 91       	ld	r24, Z+
    12e0:	8f 01       	movw	r16, r30
    12e2:	81 11       	cpse	r24, r1
    12e4:	ee cf       	rjmp	.-36     	; 0x12c2 <LCD0_string_size+0x1e>
    12e6:	f2 cf       	rjmp	.-28     	; 0x12cc <LCD0_string_size+0x28>
    12e8:	cf 5f       	subi	r28, 0xFF	; 255
    12ea:	61 e0       	ldi	r22, 0x01	; 1
    12ec:	70 e0       	ldi	r23, 0x00	; 0
    12ee:	80 e2       	ldi	r24, 0x20	; 32
    12f0:	69 de       	rcall	.-814    	; 0xfc4 <LCD0_write>
    12f2:	a7 df       	rcall	.-178    	; 0x1242 <LCD0_BF>
    12f4:	cd 17       	cp	r28, r29
    12f6:	c0 f3       	brcs	.-16     	; 0x12e8 <LCD0_string_size+0x44>
    12f8:	df 91       	pop	r29
    12fa:	cf 91       	pop	r28
    12fc:	1f 91       	pop	r17
    12fe:	0f 91       	pop	r16
    1300:	08 95       	ret

00001302 <LCD0_hspace>:
    1302:	cf 93       	push	r28
    1304:	c8 2f       	mov	r28, r24
    1306:	88 23       	and	r24, r24
    1308:	39 f0       	breq	.+14     	; 0x1318 <LCD0_hspace+0x16>
    130a:	61 e0       	ldi	r22, 0x01	; 1
    130c:	70 e0       	ldi	r23, 0x00	; 0
    130e:	80 e2       	ldi	r24, 0x20	; 32
    1310:	59 de       	rcall	.-846    	; 0xfc4 <LCD0_write>
    1312:	97 df       	rcall	.-210    	; 0x1242 <LCD0_BF>
    1314:	c1 50       	subi	r28, 0x01	; 1
    1316:	c9 f7       	brne	.-14     	; 0x130a <LCD0_hspace+0x8>
    1318:	cf 91       	pop	r28
    131a:	08 95       	ret

0000131c <LCD0_clear>:
    131c:	60 e0       	ldi	r22, 0x00	; 0
    131e:	70 e0       	ldi	r23, 0x00	; 0
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	50 de       	rcall	.-864    	; 0xfc4 <LCD0_write>
    1324:	8e cf       	rjmp	.-228    	; 0x1242 <LCD0_BF>
    1326:	08 95       	ret

00001328 <LCD0_gotoxy>:
    1328:	61 15       	cp	r22, r1
    132a:	71 05       	cpc	r23, r1
    132c:	21 f0       	breq	.+8      	; 0x1336 <LCD0_gotoxy+0xe>
    132e:	61 30       	cpi	r22, 0x01	; 1
    1330:	71 05       	cpc	r23, r1
    1332:	39 f0       	breq	.+14     	; 0x1342 <LCD0_gotoxy+0x1a>
    1334:	08 95       	ret
    1336:	60 e0       	ldi	r22, 0x00	; 0
    1338:	70 e0       	ldi	r23, 0x00	; 0
    133a:	80 58       	subi	r24, 0x80	; 128
    133c:	43 de       	rcall	.-890    	; 0xfc4 <LCD0_write>
    133e:	81 cf       	rjmp	.-254    	; 0x1242 <LCD0_BF>
    1340:	08 95       	ret
    1342:	60 e0       	ldi	r22, 0x00	; 0
    1344:	70 e0       	ldi	r23, 0x00	; 0
    1346:	80 54       	subi	r24, 0x40	; 64
    1348:	3d de       	rcall	.-902    	; 0xfc4 <LCD0_write>
    134a:	7b cf       	rjmp	.-266    	; 0x1242 <LCD0_BF>
    134c:	08 95       	ret

0000134e <LCD0_inic>:
	return lcd0;
}
void LCD0_inic(void)
{
	//LCD INIC
	*lcd0_DDR=(1<<RS)|(1<<RW)|(1<<EN)|(0<<NC);
    134e:	e0 91 a7 01 	lds	r30, 0x01A7	; 0x8001a7 <lcd0_DDR>
    1352:	f0 91 a8 01 	lds	r31, 0x01A8	; 0x8001a8 <lcd0_DDR+0x1>
    1356:	87 e0       	ldi	r24, 0x07	; 7
    1358:	80 83       	st	Z, r24
	*lcd0_PORT=(1<<NC);
    135a:	e0 91 aa 01 	lds	r30, 0x01AA	; 0x8001aa <lcd0_PORT>
    135e:	f0 91 ab 01 	lds	r31, 0x01AB	; 0x8001ab <lcd0_PORT+0x1>
    1362:	88 e0       	ldi	r24, 0x08	; 8
    1364:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1366:	2f ef       	ldi	r18, 0xFF	; 255
    1368:	83 ef       	ldi	r24, 0xF3	; 243
    136a:	91 e0       	ldi	r25, 0x01	; 1
    136c:	21 50       	subi	r18, 0x01	; 1
    136e:	80 40       	sbci	r24, 0x00	; 0
    1370:	90 40       	sbci	r25, 0x00	; 0
    1372:	e1 f7       	brne	.-8      	; 0x136c <LCD0_inic+0x1e>
    1374:	00 c0       	rjmp	.+0      	; 0x1376 <LCD0_inic+0x28>
    1376:	00 00       	nop
	/***INICIALIZACAO LCD**datasheet*/
	_delay_ms(40);
	LCD0_write(0x33,INST); //function set
    1378:	60 e0       	ldi	r22, 0x00	; 0
    137a:	70 e0       	ldi	r23, 0x00	; 0
    137c:	83 e3       	ldi	r24, 0x33	; 51
    137e:	22 de       	rcall	.-956    	; 0xfc4 <LCD0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1380:	20 ed       	ldi	r18, 0xD0	; 208
    1382:	2a 95       	dec	r18
    1384:	f1 f7       	brne	.-4      	; 0x1382 <LCD0_inic+0x34>
	//_delay_ms(40);
	//lcd->write(lcd,0x33,INST); //function set
	_delay_us(39);
	LCD0_write(0x2B,INST); //function set
    1386:	60 e0       	ldi	r22, 0x00	; 0
    1388:	70 e0       	ldi	r23, 0x00	; 0
    138a:	8b e2       	ldi	r24, 0x2B	; 43
    138c:	1b de       	rcall	.-970    	; 0xfc4 <LCD0_write>
    138e:	80 ed       	ldi	r24, 0xD0	; 208
    1390:	8a 95       	dec	r24
    1392:	f1 f7       	brne	.-4      	; 0x1390 <LCD0_inic+0x42>
	_delay_us(39);
	LCD0_write(0x2B,INST); //function set
    1394:	60 e0       	ldi	r22, 0x00	; 0
    1396:	70 e0       	ldi	r23, 0x00	; 0
    1398:	8b e2       	ldi	r24, 0x2B	; 43
    139a:	14 de       	rcall	.-984    	; 0xfc4 <LCD0_write>
    139c:	95 ec       	ldi	r25, 0xC5	; 197
    139e:	9a 95       	dec	r25
    13a0:	f1 f7       	brne	.-4      	; 0x139e <LCD0_inic+0x50>
    13a2:	00 00       	nop
	//_delay_us(39);
	//lcd->write(0x2B,INST); //function set
	_delay_us(37);
	LCD0_write(0x0C,INST);// display on/off control
    13a4:	60 e0       	ldi	r22, 0x00	; 0
    13a6:	70 e0       	ldi	r23, 0x00	; 0
    13a8:	8c e0       	ldi	r24, 0x0C	; 12
    13aa:	0c de       	rcall	.-1000   	; 0xfc4 <LCD0_write>
    13ac:	25 ec       	ldi	r18, 0xC5	; 197
    13ae:	2a 95       	dec	r18
    13b0:	f1 f7       	brne	.-4      	; 0x13ae <LCD0_inic+0x60>
	_delay_us(37);
	LCD0_write(0x01,INST);// clear display
    13b2:	00 00       	nop
    13b4:	60 e0       	ldi	r22, 0x00	; 0
    13b6:	70 e0       	ldi	r23, 0x00	; 0
    13b8:	81 e0       	ldi	r24, 0x01	; 1
    13ba:	04 de       	rcall	.-1016   	; 0xfc4 <LCD0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    13bc:	87 ee       	ldi	r24, 0xE7	; 231
    13be:	97 e1       	ldi	r25, 0x17	; 23
    13c0:	01 97       	sbiw	r24, 0x01	; 1
    13c2:	f1 f7       	brne	.-4      	; 0x13c0 <LCD0_inic+0x72>
    13c4:	00 c0       	rjmp	.+0      	; 0x13c6 <LCD0_inic+0x78>
	_delay_ms(1.53);
	LCD0_write(0x06,INST);// entry mode set (crazy settings)
    13c6:	00 00       	nop
    13c8:	60 e0       	ldi	r22, 0x00	; 0
    13ca:	70 e0       	ldi	r23, 0x00	; 0
    13cc:	86 e0       	ldi	r24, 0x06	; 6
    13ce:	fa dd       	rcall	.-1036   	; 0xfc4 <LCD0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    13d0:	95 ec       	ldi	r25, 0xC5	; 197
    13d2:	9a 95       	dec	r25
	_delay_us(37);
	/***INICIALIZATION END***/
	LCD0_write(0x1F,INST);// cursor or display shift
    13d4:	f1 f7       	brne	.-4      	; 0x13d2 <LCD0_inic+0x84>
    13d6:	00 00       	nop
    13d8:	60 e0       	ldi	r22, 0x00	; 0
	LCD0_BF();
    13da:	70 e0       	ldi	r23, 0x00	; 0
    13dc:	8f e1       	ldi	r24, 0x1F	; 31
	LCD0_write(0x03,INST);// return home
    13de:	f2 dd       	rcall	.-1052   	; 0xfc4 <LCD0_write>
    13e0:	30 df       	rcall	.-416    	; 0x1242 <LCD0_BF>
    13e2:	60 e0       	ldi	r22, 0x00	; 0
    13e4:	70 e0       	ldi	r23, 0x00	; 0
    13e6:	83 e0       	ldi	r24, 0x03	; 3
	LCD0_BF();
    13e8:	ed dd       	rcall	.-1062   	; 0xfc4 <LCD0_write>
    13ea:	2b cf       	rjmp	.-426    	; 0x1242 <LCD0_BF>
    13ec:	08 95       	ret

000013ee <LCD0enable>:
unsigned int LCD_ticks(unsigned int num);
/*
** procedure and function
*/
LCD0 LCD0enable(volatile uint8_t *ddr, volatile uint8_t *pin, volatile uint8_t *port)
{
    13ee:	1f 93       	push	r17
    13f0:	cf 93       	push	r28
    13f2:	df 93       	push	r29
    13f4:	ec 01       	movw	r28, r24
	//LOCAL VARIABLES
	uint8_t tSREG;
	tSREG=SREG;
    13f6:	1f b7       	in	r17, 0x3f	; 63
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
    13f8:	8f b7       	in	r24, 0x3f	; 63
    13fa:	8f 77       	andi	r24, 0x7F	; 127
    13fc:	8f bf       	out	0x3f, r24	; 63
	//ALLOCAÇÂO MEMORIA PARA Estrutura
	LCD0 lcd0;
	//import parametros
	lcd0_DDR=ddr;
    13fe:	70 93 a8 01 	sts	0x01A8, r23	; 0x8001a8 <lcd0_DDR+0x1>
    1402:	60 93 a7 01 	sts	0x01A7, r22	; 0x8001a7 <lcd0_DDR>
	lcd0_PIN=pin;
    1406:	50 93 a1 01 	sts	0x01A1, r21	; 0x8001a1 <lcd0_PIN+0x1>
    140a:	40 93 a0 01 	sts	0x01A0, r20	; 0x8001a0 <lcd0_PIN>
	lcd0_PORT=port;
    140e:	30 93 ab 01 	sts	0x01AB, r19	; 0x8001ab <lcd0_PORT+0x1>
    1412:	20 93 aa 01 	sts	0x01AA, r18	; 0x8001aa <lcd0_PORT>
	//inic variables
	*lcd0_DDR=0x00;
    1416:	fb 01       	movw	r30, r22
    1418:	10 82       	st	Z, r1
	*lcd0_PORT=0xFF;
    141a:	e0 91 aa 01 	lds	r30, 0x01AA	; 0x8001aa <lcd0_PORT>
    141e:	f0 91 ab 01 	lds	r31, 0x01AB	; 0x8001ab <lcd0_PORT+0x1>
    1422:	8f ef       	ldi	r24, 0xFF	; 255
    1424:	80 83       	st	Z, r24
	lcd0_detect=*lcd0_PIN & (1<<NC);
    1426:	e0 91 a0 01 	lds	r30, 0x01A0	; 0x8001a0 <lcd0_PIN>
    142a:	f0 91 a1 01 	lds	r31, 0x01A1	; 0x8001a1 <lcd0_PIN+0x1>
    142e:	80 81       	ld	r24, Z
    1430:	88 70       	andi	r24, 0x08	; 8
    1432:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <lcd0_detect>
	lcd0.hspace=LCD0_hspace;
	lcd0.clear=LCD0_clear;
	lcd0.gotoxy=LCD0_gotoxy;
	lcd0.reboot=LCD0_reboot;
	//LCD INIC
	LCD0_inic();
    1436:	8b df       	rcall	.-234    	; 0x134e <LCD0_inic>
	SREG=tSREG;
    1438:	1f bf       	out	0x3f, r17	; 63
	//
	return lcd0;
    143a:	82 ee       	ldi	r24, 0xE2	; 226
    143c:	97 e0       	ldi	r25, 0x07	; 7
    143e:	99 83       	std	Y+1, r25	; 0x01
    1440:	88 83       	st	Y, r24
    1442:	86 ea       	ldi	r24, 0xA6	; 166
    1444:	98 e0       	ldi	r25, 0x08	; 8
    1446:	9b 83       	std	Y+3, r25	; 0x03
    1448:	8a 83       	std	Y+2, r24	; 0x02
    144a:	81 e2       	ldi	r24, 0x21	; 33
    144c:	99 e0       	ldi	r25, 0x09	; 9
    144e:	9d 83       	std	Y+5, r25	; 0x05
    1450:	8c 83       	std	Y+4, r24	; 0x04
    1452:	83 e3       	ldi	r24, 0x33	; 51
    1454:	99 e0       	ldi	r25, 0x09	; 9
    1456:	9f 83       	std	Y+7, r25	; 0x07
    1458:	8e 83       	std	Y+6, r24	; 0x06
    145a:	88 e3       	ldi	r24, 0x38	; 56
    145c:	99 e0       	ldi	r25, 0x09	; 9
    145e:	99 87       	std	Y+9, r25	; 0x09
    1460:	88 87       	std	Y+8, r24	; 0x08
    1462:	81 e4       	ldi	r24, 0x41	; 65
    1464:	99 e0       	ldi	r25, 0x09	; 9
    1466:	9b 87       	std	Y+11, r25	; 0x0b
    1468:	8a 87       	std	Y+10, r24	; 0x0a
    146a:	82 e5       	ldi	r24, 0x52	; 82
    146c:	99 e0       	ldi	r25, 0x09	; 9
    146e:	9d 87       	std	Y+13, r25	; 0x0d
    1470:	8c 87       	std	Y+12, r24	; 0x0c
    1472:	81 e8       	ldi	r24, 0x81	; 129
    1474:	99 e0       	ldi	r25, 0x09	; 9
    1476:	9f 87       	std	Y+15, r25	; 0x0f
    1478:	8e 87       	std	Y+14, r24	; 0x0e
    147a:	8e e8       	ldi	r24, 0x8E	; 142
    147c:	99 e0       	ldi	r25, 0x09	; 9
    147e:	99 8b       	std	Y+17, r25	; 0x11
    1480:	88 8b       	std	Y+16, r24	; 0x10
    1482:	84 e9       	ldi	r24, 0x94	; 148
    1484:	99 e0       	ldi	r25, 0x09	; 9
    1486:	9b 8b       	std	Y+19, r25	; 0x13
    1488:	8a 8b       	std	Y+18, r24	; 0x12
    148a:	8e e4       	ldi	r24, 0x4E	; 78
    148c:	9a e0       	ldi	r25, 0x0A	; 10
    148e:	9d 8b       	std	Y+21, r25	; 0x15
    1490:	8c 8b       	std	Y+20, r24	; 0x14
}
    1492:	ce 01       	movw	r24, r28
    1494:	df 91       	pop	r29
    1496:	cf 91       	pop	r28
    1498:	1f 91       	pop	r17
    149a:	08 95       	ret

0000149c <LCD0_reboot>:
	*lcd0_PORT|=(1<<EN);
	LCD_ticks(num);
	*lcd0_PORT&=~(1<<EN);
}
void LCD0_reboot(void)
{
    149c:	cf 93       	push	r28
	//low high detect pin NC
	uint8_t i;
	uint8_t tmp;
	tmp=*lcd0_PIN & (1<<NC);
    149e:	e0 91 a0 01 	lds	r30, 0x01A0	; 0x8001a0 <lcd0_PIN>
    14a2:	f0 91 a1 01 	lds	r31, 0x01A1	; 0x8001a1 <lcd0_PIN+0x1>
    14a6:	c0 81       	ld	r28, Z
    14a8:	c8 70       	andi	r28, 0x08	; 8
	i=tmp^lcd0_detect;
    14aa:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <lcd0_detect>
    14ae:	8c 27       	eor	r24, r28
	i&=tmp;
	if(i)
    14b0:	8c 23       	and	r24, r28
    14b2:	09 f0       	breq	.+2      	; 0x14b6 <LCD0_reboot+0x1a>
		LCD0_inic();
    14b4:	4c df       	rcall	.-360    	; 0x134e <LCD0_inic>
	lcd0_detect=tmp;
    14b6:	c0 93 a9 01 	sts	0x01A9, r28	; 0x8001a9 <lcd0_detect>
}
    14ba:	cf 91       	pop	r28
    14bc:	08 95       	ret

000014be <MM74C923_activate>:
	SREG=tSREG;
	//
	return mm74c923;
}
void MM74C923_activate(void){
	mm74c923_mem=mm74c923_tmp;
    14be:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <mm74c923_tmp>
    14c2:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <mm74c923_mem>
	mm74c923_tmp=*mm74c923_PIN;
    14c6:	e0 91 b0 01 	lds	r30, 0x01B0	; 0x8001b0 <mm74c923_PIN>
    14ca:	f0 91 b1 01 	lds	r31, 0x01B1	; 0x8001b1 <mm74c923_PIN+0x1>
    14ce:	80 81       	ld	r24, Z
    14d0:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <mm74c923_tmp>
    14d4:	08 95       	ret

000014d6 <MM74C923_getch>:
}
char MM74C923_getch(void)
{
	uint8_t c,lh;
	//uint8_t hl;
	lh=func.lh(mm74c923_mem,mm74c923_tmp); // low to high bit mask
    14d6:	e0 91 c2 01 	lds	r30, 0x01C2	; 0x8001c2 <func+0xa>
    14da:	f0 91 c3 01 	lds	r31, 0x01C3	; 0x8001c3 <func+0xb>
    14de:	60 91 b5 01 	lds	r22, 0x01B5	; 0x8001b5 <mm74c923_tmp>
    14e2:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <mm74c923_mem>
    14e6:	09 95       	icall
	//hl=func.hl(mm74c923_mem,mm74c923_tmp); // high to low bit mask
	if(lh&(1<<MM74C923_DATA_AVAILABLE)){
    14e8:	80 ff       	sbrs	r24, 0
    14ea:	62 c0       	rjmp	.+196    	; 0x15b0 <MM74C923_getch+0xda>
		*mm74c923_PORT&=~(1<<MM74C923_OUTPUT_ENABLE);
    14ec:	e0 91 b3 01 	lds	r30, 0x01B3	; 0x8001b3 <mm74c923_PORT>
    14f0:	f0 91 b4 01 	lds	r31, 0x01B4	; 0x8001b4 <mm74c923_PORT+0x1>
    14f4:	80 81       	ld	r24, Z
    14f6:	8d 7f       	andi	r24, 0xFD	; 253
    14f8:	80 83       	st	Z, r24
		c=*mm74c923_PIN;
    14fa:	e0 91 b0 01 	lds	r30, 0x01B0	; 0x8001b0 <mm74c923_PIN>
    14fe:	f0 91 b1 01 	lds	r31, 0x01B1	; 0x8001b1 <mm74c923_PIN+0x1>
    1502:	80 81       	ld	r24, Z
		if(c&1<<MM74C923_DATA_OUT_A) MM74C923_KEY_CODE_INDEX|=1; else MM74C923_KEY_CODE_INDEX&=~1;
    1504:	88 23       	and	r24, r24
    1506:	34 f4       	brge	.+12     	; 0x1514 <MM74C923_getch+0x3e>
    1508:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <MM74C923_KEY_CODE_INDEX>
    150c:	91 60       	ori	r25, 0x01	; 1
    150e:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <MM74C923_KEY_CODE_INDEX>
    1512:	05 c0       	rjmp	.+10     	; 0x151e <MM74C923_getch+0x48>
    1514:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <MM74C923_KEY_CODE_INDEX>
    1518:	9e 7f       	andi	r25, 0xFE	; 254
    151a:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <MM74C923_KEY_CODE_INDEX>
		if(c&1<<MM74C923_DATA_OUT_B) MM74C923_KEY_CODE_INDEX|=2; else MM74C923_KEY_CODE_INDEX&=~2;
    151e:	86 ff       	sbrs	r24, 6
    1520:	06 c0       	rjmp	.+12     	; 0x152e <MM74C923_getch+0x58>
    1522:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <MM74C923_KEY_CODE_INDEX>
    1526:	92 60       	ori	r25, 0x02	; 2
    1528:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <MM74C923_KEY_CODE_INDEX>
    152c:	05 c0       	rjmp	.+10     	; 0x1538 <MM74C923_getch+0x62>
    152e:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <MM74C923_KEY_CODE_INDEX>
    1532:	9d 7f       	andi	r25, 0xFD	; 253
    1534:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <MM74C923_KEY_CODE_INDEX>
		if(c&1<<MM74C923_DATA_OUT_C) MM74C923_KEY_CODE_INDEX|=4; else MM74C923_KEY_CODE_INDEX&=~4;
    1538:	85 ff       	sbrs	r24, 5
    153a:	06 c0       	rjmp	.+12     	; 0x1548 <MM74C923_getch+0x72>
    153c:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <MM74C923_KEY_CODE_INDEX>
    1540:	94 60       	ori	r25, 0x04	; 4
    1542:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <MM74C923_KEY_CODE_INDEX>
    1546:	05 c0       	rjmp	.+10     	; 0x1552 <MM74C923_getch+0x7c>
    1548:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <MM74C923_KEY_CODE_INDEX>
    154c:	9b 7f       	andi	r25, 0xFB	; 251
    154e:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <MM74C923_KEY_CODE_INDEX>
		if(c&1<<MM74C923_DATA_OUT_D) MM74C923_KEY_CODE_INDEX|=8; else MM74C923_KEY_CODE_INDEX&=~8;
    1552:	84 ff       	sbrs	r24, 4
    1554:	06 c0       	rjmp	.+12     	; 0x1562 <MM74C923_getch+0x8c>
    1556:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <MM74C923_KEY_CODE_INDEX>
    155a:	98 60       	ori	r25, 0x08	; 8
    155c:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <MM74C923_KEY_CODE_INDEX>
    1560:	05 c0       	rjmp	.+10     	; 0x156c <MM74C923_getch+0x96>
    1562:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <MM74C923_KEY_CODE_INDEX>
    1566:	97 7f       	andi	r25, 0xF7	; 247
    1568:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <MM74C923_KEY_CODE_INDEX>
		if(c&1<<MM74C923_DATA_OUT_E) MM74C923_KEY_CODE_INDEX|=16; else MM74C923_KEY_CODE_INDEX&=~16;
    156c:	83 ff       	sbrs	r24, 3
    156e:	06 c0       	rjmp	.+12     	; 0x157c <MM74C923_getch+0xa6>
    1570:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <MM74C923_KEY_CODE_INDEX>
    1574:	90 61       	ori	r25, 0x10	; 16
    1576:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <MM74C923_KEY_CODE_INDEX>
    157a:	05 c0       	rjmp	.+10     	; 0x1586 <MM74C923_getch+0xb0>
    157c:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <MM74C923_KEY_CODE_INDEX>
    1580:	9f 7e       	andi	r25, 0xEF	; 239
    1582:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <MM74C923_KEY_CODE_INDEX>
		if(c&1<<MM74C923_EXTRA_DATA_OUT_PIN) MM74C923_KEY_CODE_INDEX|=32; else MM74C923_KEY_CODE_INDEX&=~32;
    1586:	82 ff       	sbrs	r24, 2
    1588:	06 c0       	rjmp	.+12     	; 0x1596 <MM74C923_getch+0xc0>
    158a:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <MM74C923_KEY_CODE_INDEX>
    158e:	80 62       	ori	r24, 0x20	; 32
    1590:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <MM74C923_KEY_CODE_INDEX>
    1594:	05 c0       	rjmp	.+10     	; 0x15a0 <MM74C923_getch+0xca>
    1596:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <MM74C923_KEY_CODE_INDEX>
    159a:	8f 7d       	andi	r24, 0xDF	; 223
    159c:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <MM74C923_KEY_CODE_INDEX>
	//}else if(hl&(1<<MM74C923_DATA_AVAILABLE)){
		*mm74c923_PORT|=(1<<MM74C923_OUTPUT_ENABLE);
    15a0:	e0 91 b3 01 	lds	r30, 0x01B3	; 0x8001b3 <mm74c923_PORT>
    15a4:	f0 91 b4 01 	lds	r31, 0x01B4	; 0x8001b4 <mm74c923_PORT+0x1>
    15a8:	80 81       	ld	r24, Z
    15aa:	82 60       	ori	r24, 0x02	; 2
    15ac:	80 83       	st	Z, r24
    15ae:	03 c0       	rjmp	.+6      	; 0x15b6 <MM74C923_getch+0xe0>
		//MM74C923_KEY_CODE_INDEX=52;
	}else
		MM74C923_KEY_CODE_INDEX=52;
    15b0:	84 e3       	ldi	r24, 0x34	; 52
    15b2:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <MM74C923_KEY_CODE_INDEX>
	return MM74C923_KEY_CODE[MM74C923_KEY_CODE_INDEX];
    15b6:	e0 91 af 01 	lds	r30, 0x01AF	; 0x8001af <MM74C923_KEY_CODE_INDEX>
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	e0 50       	subi	r30, 0x00	; 0
    15be:	ff 4f       	sbci	r31, 0xFF	; 255
}
    15c0:	80 81       	ld	r24, Z
    15c2:	08 95       	ret

000015c4 <MM74C923_gets>:
char* MM74C923_gets(void)
{
	char c;
	c=MM74C923_getch();
    15c4:	88 df       	rcall	.-240    	; 0x14d6 <MM74C923_getch>
	if(c=='*'){ // used has enter key
    15c6:	8a 32       	cpi	r24, 0x2A	; 42
    15c8:	19 f4       	brne	.+6      	; 0x15d0 <MM74C923_gets+0xc>
		MM74C923_KEY_BUFFER_INDEX=0;
    15ca:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <MM74C923_KEY_BUFFER_INDEX>
    15ce:	12 c0       	rjmp	.+36     	; 0x15f4 <MM74C923_gets+0x30>
	}else if(c!='\0'){
    15d0:	88 23       	and	r24, r24
    15d2:	81 f0       	breq	.+32     	; 0x15f4 <MM74C923_gets+0x30>
		if(MM74C923_KEY_BUFFER_INDEX<MM74C923_KEY_BUFFER_SIZE-1){ // BUFFER FULL IGNORE DATA
    15d4:	e0 91 b2 01 	lds	r30, 0x01B2	; 0x8001b2 <MM74C923_KEY_BUFFER_INDEX>
    15d8:	ef 30       	cpi	r30, 0x0F	; 15
    15da:	60 f4       	brcc	.+24     	; 0x15f4 <MM74C923_gets+0x30>
			MM74C923_KEY_BUFFER[MM74C923_KEY_BUFFER_INDEX]=c;
    15dc:	ae 2f       	mov	r26, r30
    15de:	b0 e0       	ldi	r27, 0x00	; 0
    15e0:	a4 50       	subi	r26, 0x04	; 4
    15e2:	be 4f       	sbci	r27, 0xFE	; 254
    15e4:	8c 93       	st	X, r24
			MM74C923_KEY_BUFFER_INDEX++;
    15e6:	ef 5f       	subi	r30, 0xFF	; 255
    15e8:	e0 93 b2 01 	sts	0x01B2, r30	; 0x8001b2 <MM74C923_KEY_BUFFER_INDEX>
			MM74C923_KEY_BUFFER[MM74C923_KEY_BUFFER_INDEX]='\0';
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	e4 50       	subi	r30, 0x04	; 4
    15f0:	fe 4f       	sbci	r31, 0xFE	; 254
    15f2:	10 82       	st	Z, r1
		}
	}
	return MM74C923_KEY_BUFFER;
}
    15f4:	8c ef       	ldi	r24, 0xFC	; 252
    15f6:	91 e0       	ldi	r25, 0x01	; 1
    15f8:	08 95       	ret

000015fa <MM74C923_data>:
char* MM74C923_data(void){
	if(MM74C923_KEY_BUFFER_INDEX)
    15fa:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <MM74C923_KEY_BUFFER_INDEX>
    15fe:	88 23       	and	r24, r24
    1600:	39 f0       	breq	.+14     	; 0x1610 <MM74C923_data+0x16>
		MM74C923_pointer=MM74C923_KEY_BUFFER_EMPTY;
    1602:	8b e7       	ldi	r24, 0x7B	; 123
    1604:	91 e0       	ldi	r25, 0x01	; 1
    1606:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <MM74C923_pointer+0x1>
    160a:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <MM74C923_pointer>
    160e:	06 c0       	rjmp	.+12     	; 0x161c <MM74C923_data+0x22>
	else
		MM74C923_pointer=MM74C923_KEY_BUFFER;
    1610:	8c ef       	ldi	r24, 0xFC	; 252
    1612:	91 e0       	ldi	r25, 0x01	; 1
    1614:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <MM74C923_pointer+0x1>
    1618:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <MM74C923_pointer>
	return MM74C923_pointer;
}
    161c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <MM74C923_pointer>
    1620:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <MM74C923_pointer+0x1>
    1624:	08 95       	ret

00001626 <MM74C923_data_clear>:
void MM74C923_data_clear(void){
	MM74C923_KEY_BUFFER_INDEX=0;
    1626:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <MM74C923_KEY_BUFFER_INDEX>
	MM74C923_KEY_BUFFER[MM74C923_KEY_BUFFER_INDEX]='\0';
    162a:	10 92 fc 01 	sts	0x01FC, r1	; 0x8001fc <MM74C923_KEY_BUFFER>
    162e:	08 95       	ret

00001630 <MM74C923enable>:
void MM74C923_data_clear(void);
/*
** procedure and function
*/
MM74C923 MM74C923enable(volatile uint8_t *ddr, volatile uint8_t *pin, volatile uint8_t *port)
{
    1630:	9f 92       	push	r9
    1632:	af 92       	push	r10
    1634:	bf 92       	push	r11
    1636:	cf 92       	push	r12
    1638:	df 92       	push	r13
    163a:	ef 92       	push	r14
    163c:	ff 92       	push	r15
    163e:	0f 93       	push	r16
    1640:	1f 93       	push	r17
    1642:	cf 93       	push	r28
    1644:	df 93       	push	r29
    1646:	cd b7       	in	r28, 0x3d	; 61
    1648:	de b7       	in	r29, 0x3e	; 62
    164a:	c2 54       	subi	r28, 0x42	; 66
    164c:	d1 09       	sbc	r29, r1
    164e:	0f b6       	in	r0, 0x3f	; 63
    1650:	f8 94       	cli
    1652:	de bf       	out	0x3e, r29	; 62
    1654:	0f be       	out	0x3f, r0	; 63
    1656:	cd bf       	out	0x3d, r28	; 61
    1658:	8c 01       	movw	r16, r24
    165a:	7b 01       	movw	r14, r22
    165c:	5a 01       	movw	r10, r20
    165e:	69 01       	movw	r12, r18
	//LOCAL VARIABLES
	uint8_t tSREG;
	tSREG=SREG;
    1660:	9f b6       	in	r9, 0x3f	; 63
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
    1662:	8f b7       	in	r24, 0x3f	; 63
    1664:	8f 77       	andi	r24, 0x7F	; 127
    1666:	8f bf       	out	0x3f, r24	; 63
	//ALLOCACAO MEMORIA Para Estrutura
	func=FUNCenable();
    1668:	ce 01       	movw	r24, r28
    166a:	01 96       	adiw	r24, 0x01	; 1
    166c:	1c dc       	rcall	.-1992   	; 0xea6 <FUNCenable>
    166e:	82 e4       	ldi	r24, 0x42	; 66
    1670:	fe 01       	movw	r30, r28
    1672:	31 96       	adiw	r30, 0x01	; 1
    1674:	a8 eb       	ldi	r26, 0xB8	; 184
    1676:	b1 e0       	ldi	r27, 0x01	; 1
    1678:	01 90       	ld	r0, Z+
    167a:	0d 92       	st	X+, r0
    167c:	8a 95       	dec	r24
    167e:	e1 f7       	brne	.-8      	; 0x1678 <MM74C923enable+0x48>
	MM74C923 mm74c923;
	//import parametros
	mm74c923_DDR=ddr;
    1680:	f0 92 fb 01 	sts	0x01FB, r15	; 0x8001fb <mm74c923_DDR+0x1>
    1684:	e0 92 fa 01 	sts	0x01FA, r14	; 0x8001fa <mm74c923_DDR>
	mm74c923_PIN=pin;
    1688:	b0 92 b1 01 	sts	0x01B1, r11	; 0x8001b1 <mm74c923_PIN+0x1>
    168c:	a0 92 b0 01 	sts	0x01B0, r10	; 0x8001b0 <mm74c923_PIN>
	mm74c923_PORT=port;
    1690:	d0 92 b4 01 	sts	0x01B4, r13	; 0x8001b4 <mm74c923_PORT+0x1>
    1694:	c0 92 b3 01 	sts	0x01B3, r12	; 0x8001b3 <mm74c923_PORT>
	//inic variables
	*mm74c923_DDR=(1<<MM74C923_OUTPUT_ENABLE);
    1698:	82 e0       	ldi	r24, 0x02	; 2
    169a:	f7 01       	movw	r30, r14
    169c:	80 83       	st	Z, r24
	*mm74c923_PORT=0xFF;
    169e:	e0 91 b3 01 	lds	r30, 0x01B3	; 0x8001b3 <mm74c923_PORT>
    16a2:	f0 91 b4 01 	lds	r31, 0x01B4	; 0x8001b4 <mm74c923_PORT+0x1>
    16a6:	8f ef       	ldi	r24, 0xFF	; 255
    16a8:	80 83       	st	Z, r24
	mm74c923_tmp&=~(1<<MM74C923_DATA_AVAILABLE);
    16aa:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <mm74c923_tmp>
    16ae:	8e 7f       	andi	r24, 0xFE	; 254
    16b0:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <mm74c923_tmp>
	mm74c923_mem&=~(1<<MM74C923_DATA_AVAILABLE);
    16b4:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <mm74c923_mem>
    16b8:	8e 7f       	andi	r24, 0xFE	; 254
    16ba:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <mm74c923_mem>
	MM74C923_pointer=MM74C923_KEY_BUFFER_EMPTY;
    16be:	8b e7       	ldi	r24, 0x7B	; 123
    16c0:	91 e0       	ldi	r25, 0x01	; 1
    16c2:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <MM74C923_pointer+0x1>
    16c6:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <MM74C923_pointer>
	mm74c923.activate=MM74C923_activate;
	mm74c923.getch=MM74C923_getch;
	mm74c923.gets=MM74C923_gets;
	mm74c923.data=MM74C923_data;
	mm74c923.data_clear=MM74C923_data_clear;
	SREG=tSREG;
    16ca:	9f be       	out	0x3f, r9	; 63
	//
	return mm74c923;
    16cc:	8f e5       	ldi	r24, 0x5F	; 95
    16ce:	9a e0       	ldi	r25, 0x0A	; 10
    16d0:	f8 01       	movw	r30, r16
    16d2:	91 83       	std	Z+1, r25	; 0x01
    16d4:	80 83       	st	Z, r24
    16d6:	8b e6       	ldi	r24, 0x6B	; 107
    16d8:	9a e0       	ldi	r25, 0x0A	; 10
    16da:	93 83       	std	Z+3, r25	; 0x03
    16dc:	82 83       	std	Z+2, r24	; 0x02
    16de:	82 ee       	ldi	r24, 0xE2	; 226
    16e0:	9a e0       	ldi	r25, 0x0A	; 10
    16e2:	95 83       	std	Z+5, r25	; 0x05
    16e4:	84 83       	std	Z+4, r24	; 0x04
    16e6:	8d ef       	ldi	r24, 0xFD	; 253
    16e8:	9a e0       	ldi	r25, 0x0A	; 10
    16ea:	97 83       	std	Z+7, r25	; 0x07
    16ec:	86 83       	std	Z+6, r24	; 0x06
    16ee:	83 e1       	ldi	r24, 0x13	; 19
    16f0:	9b e0       	ldi	r25, 0x0B	; 11
    16f2:	91 87       	std	Z+9, r25	; 0x09
    16f4:	80 87       	std	Z+8, r24	; 0x08
}
    16f6:	c8 01       	movw	r24, r16
    16f8:	ce 5b       	subi	r28, 0xBE	; 190
    16fa:	df 4f       	sbci	r29, 0xFF	; 255
    16fc:	0f b6       	in	r0, 0x3f	; 63
    16fe:	f8 94       	cli
    1700:	de bf       	out	0x3e, r29	; 62
    1702:	0f be       	out	0x3f, r0	; 63
    1704:	cd bf       	out	0x3d, r28	; 61
    1706:	df 91       	pop	r29
    1708:	cf 91       	pop	r28
    170a:	1f 91       	pop	r17
    170c:	0f 91       	pop	r16
    170e:	ff 90       	pop	r15
    1710:	ef 90       	pop	r14
    1712:	df 90       	pop	r13
    1714:	cf 90       	pop	r12
    1716:	bf 90       	pop	r11
    1718:	af 90       	pop	r10
    171a:	9f 90       	pop	r9
    171c:	08 95       	ret

0000171e <TIMER_COUNTER0_start>:
		stops timer by setting prescaler to zero
	*/
	{
		TIMER_COUNTER3B_CONTROL_REGISTER&=~(7<<CS30); // No clock source. (Timer/Counter stopped)
		TIMER_COUNTER3_REGISTER=0X0000;
		timer3_state=0;
    171e:	20 91 0f 02 	lds	r18, 0x020F	; 0x80020f <timer0_state>
    1722:	21 11       	cpse	r18, r1
    1724:	40 c0       	rjmp	.+128    	; 0x17a6 <TIMER_COUNTER0_start+0x88>
    1726:	2f ef       	ldi	r18, 0xFF	; 255
    1728:	21 bf       	out	0x31, r18	; 49
    172a:	23 b7       	in	r18, 0x33	; 51
    172c:	28 7f       	andi	r18, 0xF8	; 248
    172e:	23 bf       	out	0x33, r18	; 51
    1730:	80 34       	cpi	r24, 0x40	; 64
    1732:	91 05       	cpc	r25, r1
    1734:	11 f1       	breq	.+68     	; 0x177a <TIMER_COUNTER0_start+0x5c>
    1736:	48 f4       	brcc	.+18     	; 0x174a <TIMER_COUNTER0_start+0x2c>
    1738:	88 30       	cpi	r24, 0x08	; 8
    173a:	91 05       	cpc	r25, r1
    173c:	b1 f0       	breq	.+44     	; 0x176a <TIMER_COUNTER0_start+0x4c>
    173e:	80 32       	cpi	r24, 0x20	; 32
    1740:	91 05       	cpc	r25, r1
    1742:	b9 f0       	breq	.+46     	; 0x1772 <TIMER_COUNTER0_start+0x54>
    1744:	01 97       	sbiw	r24, 0x01	; 1
    1746:	49 f5       	brne	.+82     	; 0x179a <TIMER_COUNTER0_start+0x7c>
    1748:	0c c0       	rjmp	.+24     	; 0x1762 <TIMER_COUNTER0_start+0x44>
    174a:	81 15       	cp	r24, r1
    174c:	21 e0       	ldi	r18, 0x01	; 1
    174e:	92 07       	cpc	r25, r18
    1750:	e1 f0       	breq	.+56     	; 0x178a <TIMER_COUNTER0_start+0x6c>
    1752:	81 15       	cp	r24, r1
    1754:	24 e0       	ldi	r18, 0x04	; 4
    1756:	92 07       	cpc	r25, r18
    1758:	e1 f0       	breq	.+56     	; 0x1792 <TIMER_COUNTER0_start+0x74>
    175a:	80 38       	cpi	r24, 0x80	; 128
    175c:	91 05       	cpc	r25, r1
    175e:	e9 f4       	brne	.+58     	; 0x179a <TIMER_COUNTER0_start+0x7c>
    1760:	10 c0       	rjmp	.+32     	; 0x1782 <TIMER_COUNTER0_start+0x64>
    1762:	83 b7       	in	r24, 0x33	; 51
    1764:	81 60       	ori	r24, 0x01	; 1
    1766:	83 bf       	out	0x33, r24	; 51
    1768:	1b c0       	rjmp	.+54     	; 0x17a0 <TIMER_COUNTER0_start+0x82>
    176a:	83 b7       	in	r24, 0x33	; 51
    176c:	82 60       	ori	r24, 0x02	; 2
    176e:	83 bf       	out	0x33, r24	; 51
    1770:	17 c0       	rjmp	.+46     	; 0x17a0 <TIMER_COUNTER0_start+0x82>
    1772:	83 b7       	in	r24, 0x33	; 51
    1774:	83 60       	ori	r24, 0x03	; 3
    1776:	83 bf       	out	0x33, r24	; 51
    1778:	13 c0       	rjmp	.+38     	; 0x17a0 <TIMER_COUNTER0_start+0x82>
    177a:	83 b7       	in	r24, 0x33	; 51
    177c:	84 60       	ori	r24, 0x04	; 4
    177e:	83 bf       	out	0x33, r24	; 51
    1780:	0f c0       	rjmp	.+30     	; 0x17a0 <TIMER_COUNTER0_start+0x82>
    1782:	83 b7       	in	r24, 0x33	; 51
    1784:	85 60       	ori	r24, 0x05	; 5
    1786:	83 bf       	out	0x33, r24	; 51
    1788:	0b c0       	rjmp	.+22     	; 0x17a0 <TIMER_COUNTER0_start+0x82>
    178a:	83 b7       	in	r24, 0x33	; 51
    178c:	86 60       	ori	r24, 0x06	; 6
    178e:	83 bf       	out	0x33, r24	; 51
    1790:	07 c0       	rjmp	.+14     	; 0x17a0 <TIMER_COUNTER0_start+0x82>
    1792:	83 b7       	in	r24, 0x33	; 51
    1794:	87 60       	ori	r24, 0x07	; 7
    1796:	83 bf       	out	0x33, r24	; 51
    1798:	03 c0       	rjmp	.+6      	; 0x17a0 <TIMER_COUNTER0_start+0x82>
    179a:	83 b7       	in	r24, 0x33	; 51
    179c:	87 60       	ori	r24, 0x07	; 7
    179e:	83 bf       	out	0x33, r24	; 51
    17a0:	81 e0       	ldi	r24, 0x01	; 1
    17a2:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <timer0_state>
    17a6:	08 95       	ret

000017a8 <TIMER_COUNTER0_compoutmode>:
    17a8:	93 b7       	in	r25, 0x33	; 51
    17aa:	9f 7c       	andi	r25, 0xCF	; 207
    17ac:	93 bf       	out	0x33, r25	; 51
    17ae:	82 30       	cpi	r24, 0x02	; 2
    17b0:	41 f0       	breq	.+16     	; 0x17c2 <TIMER_COUNTER0_compoutmode+0x1a>
    17b2:	83 30       	cpi	r24, 0x03	; 3
    17b4:	51 f0       	breq	.+20     	; 0x17ca <TIMER_COUNTER0_compoutmode+0x22>
    17b6:	81 30       	cpi	r24, 0x01	; 1
    17b8:	59 f4       	brne	.+22     	; 0x17d0 <TIMER_COUNTER0_compoutmode+0x28>
    17ba:	83 b7       	in	r24, 0x33	; 51
    17bc:	80 61       	ori	r24, 0x10	; 16
    17be:	83 bf       	out	0x33, r24	; 51
    17c0:	08 95       	ret
    17c2:	83 b7       	in	r24, 0x33	; 51
    17c4:	80 62       	ori	r24, 0x20	; 32
    17c6:	83 bf       	out	0x33, r24	; 51
    17c8:	08 95       	ret
    17ca:	83 b7       	in	r24, 0x33	; 51
    17cc:	80 63       	ori	r24, 0x30	; 48
    17ce:	83 bf       	out	0x33, r24	; 51
    17d0:	08 95       	ret

000017d2 <TIMER_COUNTER0_compare>:
    17d2:	81 bf       	out	0x31, r24	; 49
    17d4:	08 95       	ret

000017d6 <TIMER_COUNTER0_stop>:
    17d6:	83 b7       	in	r24, 0x33	; 51
    17d8:	88 7f       	andi	r24, 0xF8	; 248
    17da:	83 bf       	out	0x33, r24	; 51
    17dc:	12 be       	out	0x32, r1	; 50
    17de:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <timer0_state>
    17e2:	08 95       	ret

000017e4 <TIMER_COUNTER1_start>:
    17e4:	20 91 0c 02 	lds	r18, 0x020C	; 0x80020c <timer1_state>
    17e8:	21 11       	cpse	r18, r1
    17ea:	42 c0       	rjmp	.+132    	; 0x1870 <TIMER_COUNTER1_start+0x8c>
    17ec:	2f ef       	ldi	r18, 0xFF	; 255
    17ee:	3f ef       	ldi	r19, 0xFF	; 255
    17f0:	3b bd       	out	0x2b, r19	; 43
    17f2:	2a bd       	out	0x2a, r18	; 42
    17f4:	2e b5       	in	r18, 0x2e	; 46
    17f6:	28 7f       	andi	r18, 0xF8	; 248
    17f8:	2e bd       	out	0x2e, r18	; 46
    17fa:	88 30       	cpi	r24, 0x08	; 8
    17fc:	91 05       	cpc	r25, r1
    17fe:	d1 f0       	breq	.+52     	; 0x1834 <TIMER_COUNTER1_start+0x50>
    1800:	48 f4       	brcc	.+18     	; 0x1814 <TIMER_COUNTER1_start+0x30>
    1802:	83 30       	cpi	r24, 0x03	; 3
    1804:	91 05       	cpc	r25, r1
    1806:	31 f1       	breq	.+76     	; 0x1854 <TIMER_COUNTER1_start+0x70>
    1808:	85 30       	cpi	r24, 0x05	; 5
    180a:	91 05       	cpc	r25, r1
    180c:	39 f1       	breq	.+78     	; 0x185c <TIMER_COUNTER1_start+0x78>
    180e:	01 97       	sbiw	r24, 0x01	; 1
    1810:	49 f5       	brne	.+82     	; 0x1864 <TIMER_COUNTER1_start+0x80>
    1812:	0c c0       	rjmp	.+24     	; 0x182c <TIMER_COUNTER1_start+0x48>
    1814:	81 15       	cp	r24, r1
    1816:	21 e0       	ldi	r18, 0x01	; 1
    1818:	92 07       	cpc	r25, r18
    181a:	a1 f0       	breq	.+40     	; 0x1844 <TIMER_COUNTER1_start+0x60>
    181c:	81 15       	cp	r24, r1
    181e:	24 e0       	ldi	r18, 0x04	; 4
    1820:	92 07       	cpc	r25, r18
    1822:	a1 f0       	breq	.+40     	; 0x184c <TIMER_COUNTER1_start+0x68>
    1824:	80 34       	cpi	r24, 0x40	; 64
    1826:	91 05       	cpc	r25, r1
    1828:	e9 f4       	brne	.+58     	; 0x1864 <TIMER_COUNTER1_start+0x80>
    182a:	08 c0       	rjmp	.+16     	; 0x183c <TIMER_COUNTER1_start+0x58>
    182c:	8e b5       	in	r24, 0x2e	; 46
    182e:	81 60       	ori	r24, 0x01	; 1
    1830:	8e bd       	out	0x2e, r24	; 46
    1832:	1b c0       	rjmp	.+54     	; 0x186a <TIMER_COUNTER1_start+0x86>
    1834:	8e b5       	in	r24, 0x2e	; 46
    1836:	82 60       	ori	r24, 0x02	; 2
    1838:	8e bd       	out	0x2e, r24	; 46
    183a:	17 c0       	rjmp	.+46     	; 0x186a <TIMER_COUNTER1_start+0x86>
    183c:	8e b5       	in	r24, 0x2e	; 46
    183e:	83 60       	ori	r24, 0x03	; 3
    1840:	8e bd       	out	0x2e, r24	; 46
    1842:	13 c0       	rjmp	.+38     	; 0x186a <TIMER_COUNTER1_start+0x86>
    1844:	8e b5       	in	r24, 0x2e	; 46
    1846:	84 60       	ori	r24, 0x04	; 4
    1848:	8e bd       	out	0x2e, r24	; 46
    184a:	0f c0       	rjmp	.+30     	; 0x186a <TIMER_COUNTER1_start+0x86>
    184c:	8e b5       	in	r24, 0x2e	; 46
    184e:	85 60       	ori	r24, 0x05	; 5
    1850:	8e bd       	out	0x2e, r24	; 46
    1852:	0b c0       	rjmp	.+22     	; 0x186a <TIMER_COUNTER1_start+0x86>
    1854:	8e b5       	in	r24, 0x2e	; 46
    1856:	86 60       	ori	r24, 0x06	; 6
    1858:	8e bd       	out	0x2e, r24	; 46
    185a:	07 c0       	rjmp	.+14     	; 0x186a <TIMER_COUNTER1_start+0x86>
    185c:	8e b5       	in	r24, 0x2e	; 46
    185e:	87 60       	ori	r24, 0x07	; 7
    1860:	8e bd       	out	0x2e, r24	; 46
    1862:	03 c0       	rjmp	.+6      	; 0x186a <TIMER_COUNTER1_start+0x86>
    1864:	8e b5       	in	r24, 0x2e	; 46
    1866:	85 60       	ori	r24, 0x05	; 5
    1868:	8e bd       	out	0x2e, r24	; 46
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <timer1_state>
    1870:	08 95       	ret

00001872 <TIMER_COUNTER1_compoutmodeA>:
    1872:	9f b5       	in	r25, 0x2f	; 47
    1874:	9f 73       	andi	r25, 0x3F	; 63
    1876:	9f bd       	out	0x2f, r25	; 47
    1878:	82 30       	cpi	r24, 0x02	; 2
    187a:	41 f0       	breq	.+16     	; 0x188c <TIMER_COUNTER1_compoutmodeA+0x1a>
    187c:	83 30       	cpi	r24, 0x03	; 3
    187e:	51 f0       	breq	.+20     	; 0x1894 <TIMER_COUNTER1_compoutmodeA+0x22>
    1880:	81 30       	cpi	r24, 0x01	; 1
    1882:	59 f4       	brne	.+22     	; 0x189a <TIMER_COUNTER1_compoutmodeA+0x28>
    1884:	8f b5       	in	r24, 0x2f	; 47
    1886:	80 64       	ori	r24, 0x40	; 64
    1888:	8f bd       	out	0x2f, r24	; 47
    188a:	08 95       	ret
    188c:	8f b5       	in	r24, 0x2f	; 47
    188e:	80 68       	ori	r24, 0x80	; 128
    1890:	8f bd       	out	0x2f, r24	; 47
    1892:	08 95       	ret
    1894:	8f b5       	in	r24, 0x2f	; 47
    1896:	80 6c       	ori	r24, 0xC0	; 192
    1898:	8f bd       	out	0x2f, r24	; 47
    189a:	08 95       	ret

0000189c <TIMER_COUNTER1_compoutmodeB>:
    189c:	9f b5       	in	r25, 0x2f	; 47
    189e:	9f 7c       	andi	r25, 0xCF	; 207
    18a0:	9f bd       	out	0x2f, r25	; 47
    18a2:	82 30       	cpi	r24, 0x02	; 2
    18a4:	41 f0       	breq	.+16     	; 0x18b6 <TIMER_COUNTER1_compoutmodeB+0x1a>
    18a6:	83 30       	cpi	r24, 0x03	; 3
    18a8:	51 f0       	breq	.+20     	; 0x18be <TIMER_COUNTER1_compoutmodeB+0x22>
    18aa:	81 30       	cpi	r24, 0x01	; 1
    18ac:	59 f4       	brne	.+22     	; 0x18c4 <TIMER_COUNTER1_compoutmodeB+0x28>
    18ae:	8f b5       	in	r24, 0x2f	; 47
    18b0:	80 61       	ori	r24, 0x10	; 16
    18b2:	8f bd       	out	0x2f, r24	; 47
    18b4:	08 95       	ret
    18b6:	8f b5       	in	r24, 0x2f	; 47
    18b8:	80 62       	ori	r24, 0x20	; 32
    18ba:	8f bd       	out	0x2f, r24	; 47
    18bc:	08 95       	ret
    18be:	8f b5       	in	r24, 0x2f	; 47
    18c0:	80 63       	ori	r24, 0x30	; 48
    18c2:	8f bd       	out	0x2f, r24	; 47
    18c4:	08 95       	ret

000018c6 <TIMER_COUNTER1_compoutmodeC>:
    18c6:	9f b5       	in	r25, 0x2f	; 47
    18c8:	93 7f       	andi	r25, 0xF3	; 243
    18ca:	9f bd       	out	0x2f, r25	; 47
    18cc:	82 30       	cpi	r24, 0x02	; 2
    18ce:	41 f0       	breq	.+16     	; 0x18e0 <TIMER_COUNTER1_compoutmodeC+0x1a>
    18d0:	83 30       	cpi	r24, 0x03	; 3
    18d2:	51 f0       	breq	.+20     	; 0x18e8 <TIMER_COUNTER1_compoutmodeC+0x22>
    18d4:	81 30       	cpi	r24, 0x01	; 1
    18d6:	59 f4       	brne	.+22     	; 0x18ee <TIMER_COUNTER1_compoutmodeC+0x28>
    18d8:	8f b5       	in	r24, 0x2f	; 47
    18da:	84 60       	ori	r24, 0x04	; 4
    18dc:	8f bd       	out	0x2f, r24	; 47
    18de:	08 95       	ret
    18e0:	8f b5       	in	r24, 0x2f	; 47
    18e2:	88 60       	ori	r24, 0x08	; 8
    18e4:	8f bd       	out	0x2f, r24	; 47
    18e6:	08 95       	ret
    18e8:	8f b5       	in	r24, 0x2f	; 47
    18ea:	8c 60       	ori	r24, 0x0C	; 12
    18ec:	8f bd       	out	0x2f, r24	; 47
    18ee:	08 95       	ret

000018f0 <TIMER_COUNTER1_compareA>:
    18f0:	9b bd       	out	0x2b, r25	; 43
    18f2:	8a bd       	out	0x2a, r24	; 42
    18f4:	08 95       	ret

000018f6 <TIMER_COUNTER1_compareB>:
    18f6:	99 bd       	out	0x29, r25	; 41
    18f8:	88 bd       	out	0x28, r24	; 40
    18fa:	08 95       	ret

000018fc <TIMER_COUNTER1_compareC>:
    18fc:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    1900:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    1904:	08 95       	ret

00001906 <TIMER_COUNTER1_stop>:
    1906:	8e b5       	in	r24, 0x2e	; 46
    1908:	88 7f       	andi	r24, 0xF8	; 248
    190a:	8e bd       	out	0x2e, r24	; 46
    190c:	1d bc       	out	0x2d, r1	; 45
    190e:	1c bc       	out	0x2c, r1	; 44
    1910:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <timer1_state>
    1914:	08 95       	ret

00001916 <TIMER_COUNTER0enable>:
	wavegen mode: Normal; PWM phase correct; Fast PWM; default-Normasl;
	interrupt: off; overflow; output compare; both; default - non.
*/
{
	TIMER_COUNTER0 timer0;
	timer0_state=0;
    1916:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <timer0_state>
	/***TYPE 7***/
	#if defined( ATMEGA_TIMER_COUNTER )
		TIMER_COUNTER0_CONTROL_REGISTER&=~((1<<WGM00) | (1<<WGM01));
    191a:	23 b7       	in	r18, 0x33	; 51
    191c:	27 7b       	andi	r18, 0xB7	; 183
    191e:	23 bf       	out	0x33, r18	; 51
		switch(wavegenmode){
    1920:	62 30       	cpi	r22, 0x02	; 2
    1922:	41 f0       	breq	.+16     	; 0x1934 <TIMER_COUNTER0enable+0x1e>
    1924:	63 30       	cpi	r22, 0x03	; 3
    1926:	51 f0       	breq	.+20     	; 0x193c <TIMER_COUNTER0enable+0x26>
    1928:	61 30       	cpi	r22, 0x01	; 1
    192a:	59 f4       	brne	.+22     	; 0x1942 <TIMER_COUNTER0enable+0x2c>
			case 0: // Normal
				break;
			case 1: // PWM, Phase Correct
				TIMER_COUNTER0_CONTROL_REGISTER|=(1<<WGM00);
    192c:	23 b7       	in	r18, 0x33	; 51
    192e:	20 64       	ori	r18, 0x40	; 64
    1930:	23 bf       	out	0x33, r18	; 51
				break;
    1932:	07 c0       	rjmp	.+14     	; 0x1942 <TIMER_COUNTER0enable+0x2c>
			case 2: // CTC
				TIMER_COUNTER0_CONTROL_REGISTER|=(1<<WGM01);
    1934:	23 b7       	in	r18, 0x33	; 51
    1936:	28 60       	ori	r18, 0x08	; 8
    1938:	23 bf       	out	0x33, r18	; 51
				break;
    193a:	03 c0       	rjmp	.+6      	; 0x1942 <TIMER_COUNTER0enable+0x2c>
			case 3: // Fast PWM
				TIMER_COUNTER0_CONTROL_REGISTER|=(1<<WGM00) | (1<<WGM01);
    193c:	23 b7       	in	r18, 0x33	; 51
    193e:	28 64       	ori	r18, 0x48	; 72
    1940:	23 bf       	out	0x33, r18	; 51
				break;
			default:
				break;
		}
		TIMER_COUNTER_INTERRUPT_MASK_REGISTER&=~(1<<TOIE0);
    1942:	27 b7       	in	r18, 0x37	; 55
    1944:	2e 7f       	andi	r18, 0xFE	; 254
    1946:	27 bf       	out	0x37, r18	; 55
		TIMER_COUNTER_INTERRUPT_MASK_REGISTER&=~(1<<OCIE0);
    1948:	27 b7       	in	r18, 0x37	; 55
    194a:	2d 7f       	andi	r18, 0xFD	; 253
    194c:	27 bf       	out	0x37, r18	; 55
		switch(interrupt){
    194e:	42 30       	cpi	r20, 0x02	; 2
    1950:	41 f0       	breq	.+16     	; 0x1962 <TIMER_COUNTER0enable+0x4c>
    1952:	43 30       	cpi	r20, 0x03	; 3
    1954:	51 f0       	breq	.+20     	; 0x196a <TIMER_COUNTER0enable+0x54>
    1956:	41 30       	cpi	r20, 0x01	; 1
    1958:	71 f4       	brne	.+28     	; 0x1976 <TIMER_COUNTER0enable+0x60>
			case 0: 
				break;
			case 1:
				TIMER_COUNTER_INTERRUPT_MASK_REGISTER|=(1<<TOIE0);
    195a:	27 b7       	in	r18, 0x37	; 55
    195c:	21 60       	ori	r18, 0x01	; 1
    195e:	27 bf       	out	0x37, r18	; 55
				break;
    1960:	0a c0       	rjmp	.+20     	; 0x1976 <TIMER_COUNTER0enable+0x60>
			case 2:
				TIMER_COUNTER_INTERRUPT_MASK_REGISTER|=(1<<OCIE0);
    1962:	27 b7       	in	r18, 0x37	; 55
    1964:	22 60       	ori	r18, 0x02	; 2
    1966:	27 bf       	out	0x37, r18	; 55
				break;
    1968:	06 c0       	rjmp	.+12     	; 0x1976 <TIMER_COUNTER0enable+0x60>
			case 3:
				TIMER_COUNTER_INTERRUPT_MASK_REGISTER|=(1<<TOIE0);
    196a:	27 b7       	in	r18, 0x37	; 55
    196c:	21 60       	ori	r18, 0x01	; 1
    196e:	27 bf       	out	0x37, r18	; 55
				TIMER_COUNTER_INTERRUPT_MASK_REGISTER|=(1<<OCIE0);
    1970:	27 b7       	in	r18, 0x37	; 55
    1972:	22 60       	ori	r18, 0x02	; 2
    1974:	27 bf       	out	0x37, r18	; 55
		timer0.compareA=TIMER_COUNTER0_compareA;
		timer0.compareB=TIMER_COUNTER0_compareB;
		timer0.start=TIMER_COUNTER0_start;
		timer0.stop=TIMER_COUNTER0_stop;
	#endif
	return timer0;
    1976:	24 ed       	ldi	r18, 0xD4	; 212
    1978:	3b e0       	ldi	r19, 0x0B	; 11
    197a:	fc 01       	movw	r30, r24
    197c:	31 83       	std	Z+1, r19	; 0x01
    197e:	20 83       	st	Z, r18
    1980:	29 ee       	ldi	r18, 0xE9	; 233
    1982:	3b e0       	ldi	r19, 0x0B	; 11
    1984:	37 83       	std	Z+7, r19	; 0x07
    1986:	26 83       	std	Z+6, r18	; 0x06
    1988:	2f e8       	ldi	r18, 0x8F	; 143
    198a:	3b e0       	ldi	r19, 0x0B	; 11
    198c:	35 87       	std	Z+13, r19	; 0x0d
    198e:	24 87       	std	Z+12, r18	; 0x0c
    1990:	2b ee       	ldi	r18, 0xEB	; 235
    1992:	3b e0       	ldi	r19, 0x0B	; 11
    1994:	37 87       	std	Z+15, r19	; 0x0f
    1996:	26 87       	std	Z+14, r18	; 0x0e
}
    1998:	08 95       	ret

0000199a <TIMER_COUNTER1enable>:
	CTC; Fast PWM, 8-bit; Fast PWM, 9-bit; Fast PWM, 10-bit; PWM, Phase and Frequency Correct; PWM, Phase and Frequency Correct;
	PWM, Phase Correct; PWM, Phase Correct; CTC; (Reserved); Fast PWM; Fast PWM.
	interrupt: off; overflow; output compare; both; default - non.
	for more information read datasheet.
*/
{
    199a:	0f 93       	push	r16
    199c:	1f 93       	push	r17
    199e:	dc 01       	movw	r26, r24
	TIMER_COUNTER1 timer1;
	timer1_state=0;
    19a0:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <timer1_state>
	/***TYPE 7***/
	#if defined( ATMEGA_TIMER_COUNTER )
		TIMER_COUNTER1A_CONTROL_REGISTER&=~((1<<WGM11) | (1<<WGM10));
    19a4:	8f b5       	in	r24, 0x2f	; 47
    19a6:	8c 7f       	andi	r24, 0xFC	; 252
    19a8:	8f bd       	out	0x2f, r24	; 47
		TIMER_COUNTER1B_CONTROL_REGISTER&=~((1<<WGM13) | (1<<WGM12));
    19aa:	8e b5       	in	r24, 0x2e	; 46
    19ac:	87 7e       	andi	r24, 0xE7	; 231
    19ae:	8e bd       	out	0x2e, r24	; 46
		switch(wavegenmode){
    19b0:	06 2f       	mov	r16, r22
    19b2:	10 e0       	ldi	r17, 0x00	; 0
    19b4:	f8 01       	movw	r30, r16
    19b6:	31 97       	sbiw	r30, 0x01	; 1
    19b8:	ef 30       	cpi	r30, 0x0F	; 15
    19ba:	f1 05       	cpc	r31, r1
    19bc:	08 f0       	brcs	.+2      	; 0x19c0 <TIMER_COUNTER1enable+0x26>
    19be:	59 c0       	rjmp	.+178    	; 0x1a72 <TIMER_COUNTER1enable+0xd8>
    19c0:	ea 5b       	subi	r30, 0xBA	; 186
    19c2:	ff 4f       	sbci	r31, 0xFF	; 255
    19c4:	4d c4       	rjmp	.+2202   	; 0x2260 <__tablejump2__>
			case 0: // Normal
				break;
			case 1: // PWM, Phase Correct, 8-bit
				TIMER_COUNTER1A_CONTROL_REGISTER|=(1<<WGM10);
    19c6:	8f b5       	in	r24, 0x2f	; 47
    19c8:	81 60       	ori	r24, 0x01	; 1
    19ca:	8f bd       	out	0x2f, r24	; 47
				break;
    19cc:	52 c0       	rjmp	.+164    	; 0x1a72 <TIMER_COUNTER1enable+0xd8>
			case 2:	// PWM, Phase Correct, 9-bit
				TIMER_COUNTER1A_CONTROL_REGISTER|=(1<<WGM11);
    19ce:	8f b5       	in	r24, 0x2f	; 47
    19d0:	82 60       	ori	r24, 0x02	; 2
    19d2:	8f bd       	out	0x2f, r24	; 47
				break;
    19d4:	4e c0       	rjmp	.+156    	; 0x1a72 <TIMER_COUNTER1enable+0xd8>
			case 3:	// PWM, Phase Correct, 10-bit
				TIMER_COUNTER1A_CONTROL_REGISTER|=(1<<WGM11) | (1<<WGM10);
    19d6:	8f b5       	in	r24, 0x2f	; 47
    19d8:	83 60       	ori	r24, 0x03	; 3
    19da:	8f bd       	out	0x2f, r24	; 47
				break;
    19dc:	4a c0       	rjmp	.+148    	; 0x1a72 <TIMER_COUNTER1enable+0xd8>
			case 4:	// CTC
				TIMER_COUNTER1B_CONTROL_REGISTER|=(1<<WGM12);
    19de:	8e b5       	in	r24, 0x2e	; 46
    19e0:	88 60       	ori	r24, 0x08	; 8
    19e2:	8e bd       	out	0x2e, r24	; 46
				break;
    19e4:	46 c0       	rjmp	.+140    	; 0x1a72 <TIMER_COUNTER1enable+0xd8>
			case 5:	// Fast PWM, 8-bit
				TIMER_COUNTER1A_CONTROL_REGISTER|=(1<<WGM10);
    19e6:	8f b5       	in	r24, 0x2f	; 47
    19e8:	81 60       	ori	r24, 0x01	; 1
    19ea:	8f bd       	out	0x2f, r24	; 47
				TIMER_COUNTER1B_CONTROL_REGISTER|=(1<<WGM12);
    19ec:	8e b5       	in	r24, 0x2e	; 46
    19ee:	88 60       	ori	r24, 0x08	; 8
    19f0:	8e bd       	out	0x2e, r24	; 46
				break;
    19f2:	3f c0       	rjmp	.+126    	; 0x1a72 <TIMER_COUNTER1enable+0xd8>
			case 6:	// Fast PWM, 9-bit
				TIMER_COUNTER1A_CONTROL_REGISTER|=(1<<WGM11);
    19f4:	8f b5       	in	r24, 0x2f	; 47
    19f6:	82 60       	ori	r24, 0x02	; 2
    19f8:	8f bd       	out	0x2f, r24	; 47
				TIMER_COUNTER1B_CONTROL_REGISTER|=(1<<WGM12);
    19fa:	8e b5       	in	r24, 0x2e	; 46
    19fc:	88 60       	ori	r24, 0x08	; 8
    19fe:	8e bd       	out	0x2e, r24	; 46
				break;
    1a00:	38 c0       	rjmp	.+112    	; 0x1a72 <TIMER_COUNTER1enable+0xd8>
			case 7:	// Fast PWM, 10-bit
				TIMER_COUNTER1A_CONTROL_REGISTER|=(1<<WGM11) | (1<<WGM10);
    1a02:	8f b5       	in	r24, 0x2f	; 47
    1a04:	83 60       	ori	r24, 0x03	; 3
    1a06:	8f bd       	out	0x2f, r24	; 47
				TIMER_COUNTER1B_CONTROL_REGISTER|=(1<<WGM12);
    1a08:	8e b5       	in	r24, 0x2e	; 46
    1a0a:	88 60       	ori	r24, 0x08	; 8
    1a0c:	8e bd       	out	0x2e, r24	; 46
				break;
    1a0e:	31 c0       	rjmp	.+98     	; 0x1a72 <TIMER_COUNTER1enable+0xd8>
			case 8:	// PWM, Phase and Frequency Correct
				TIMER_COUNTER1B_CONTROL_REGISTER|=(1<<WGM13);
    1a10:	8e b5       	in	r24, 0x2e	; 46
    1a12:	80 61       	ori	r24, 0x10	; 16
    1a14:	8e bd       	out	0x2e, r24	; 46
				break;
    1a16:	2d c0       	rjmp	.+90     	; 0x1a72 <TIMER_COUNTER1enable+0xd8>
			case 9:	// PWM, Phase and Frequency Correct
				TIMER_COUNTER1A_CONTROL_REGISTER|=(1<<WGM10);
    1a18:	8f b5       	in	r24, 0x2f	; 47
    1a1a:	81 60       	ori	r24, 0x01	; 1
    1a1c:	8f bd       	out	0x2f, r24	; 47
				TIMER_COUNTER1B_CONTROL_REGISTER|=(1<<WGM13);
    1a1e:	8e b5       	in	r24, 0x2e	; 46
    1a20:	80 61       	ori	r24, 0x10	; 16
    1a22:	8e bd       	out	0x2e, r24	; 46
				break;
    1a24:	26 c0       	rjmp	.+76     	; 0x1a72 <TIMER_COUNTER1enable+0xd8>
			case 10: // PWM, Phase Correct
				TIMER_COUNTER1A_CONTROL_REGISTER|=(1<<WGM11);
    1a26:	8f b5       	in	r24, 0x2f	; 47
    1a28:	82 60       	ori	r24, 0x02	; 2
    1a2a:	8f bd       	out	0x2f, r24	; 47
				TIMER_COUNTER1B_CONTROL_REGISTER|=(1<<WGM13);
    1a2c:	8e b5       	in	r24, 0x2e	; 46
    1a2e:	80 61       	ori	r24, 0x10	; 16
    1a30:	8e bd       	out	0x2e, r24	; 46
				break;
    1a32:	1f c0       	rjmp	.+62     	; 0x1a72 <TIMER_COUNTER1enable+0xd8>
			case 11: // PWM, Phase Correct
				TIMER_COUNTER1A_CONTROL_REGISTER|=(1<<WGM11) | (1<<WGM10);
    1a34:	8f b5       	in	r24, 0x2f	; 47
    1a36:	83 60       	ori	r24, 0x03	; 3
    1a38:	8f bd       	out	0x2f, r24	; 47
				TIMER_COUNTER1B_CONTROL_REGISTER|=(1<<WGM13);
    1a3a:	8e b5       	in	r24, 0x2e	; 46
    1a3c:	80 61       	ori	r24, 0x10	; 16
    1a3e:	8e bd       	out	0x2e, r24	; 46
				break;
    1a40:	18 c0       	rjmp	.+48     	; 0x1a72 <TIMER_COUNTER1enable+0xd8>
			case 12: // CTC
				TIMER_COUNTER1B_CONTROL_REGISTER|=(1<<WGM13) | (1<<WGM12);
    1a42:	8e b5       	in	r24, 0x2e	; 46
    1a44:	88 61       	ori	r24, 0x18	; 24
    1a46:	8e bd       	out	0x2e, r24	; 46
				break;
    1a48:	14 c0       	rjmp	.+40     	; 0x1a72 <TIMER_COUNTER1enable+0xd8>
			case 13: // (Reserved)
				TIMER_COUNTER1A_CONTROL_REGISTER|=(1<<WGM10);
    1a4a:	8f b5       	in	r24, 0x2f	; 47
    1a4c:	81 60       	ori	r24, 0x01	; 1
    1a4e:	8f bd       	out	0x2f, r24	; 47
				TIMER_COUNTER1B_CONTROL_REGISTER|=(1<<WGM13) | (1<<WGM12);
    1a50:	8e b5       	in	r24, 0x2e	; 46
    1a52:	88 61       	ori	r24, 0x18	; 24
    1a54:	8e bd       	out	0x2e, r24	; 46
				break;
    1a56:	0d c0       	rjmp	.+26     	; 0x1a72 <TIMER_COUNTER1enable+0xd8>
			case 14: // Fast PWM
				TIMER_COUNTER1A_CONTROL_REGISTER|=(1<<WGM11);
    1a58:	8f b5       	in	r24, 0x2f	; 47
    1a5a:	82 60       	ori	r24, 0x02	; 2
    1a5c:	8f bd       	out	0x2f, r24	; 47
				TIMER_COUNTER1B_CONTROL_REGISTER|=(1<<WGM13) | (1<<WGM12);
    1a5e:	8e b5       	in	r24, 0x2e	; 46
    1a60:	88 61       	ori	r24, 0x18	; 24
    1a62:	8e bd       	out	0x2e, r24	; 46
				break;
    1a64:	06 c0       	rjmp	.+12     	; 0x1a72 <TIMER_COUNTER1enable+0xd8>
			case 15: // Fast PWM
				TIMER_COUNTER1A_CONTROL_REGISTER|=(1<<WGM11) | (1<<WGM10);
    1a66:	8f b5       	in	r24, 0x2f	; 47
    1a68:	83 60       	ori	r24, 0x03	; 3
    1a6a:	8f bd       	out	0x2f, r24	; 47
				TIMER_COUNTER1B_CONTROL_REGISTER|=(1<<WGM13) | (1<<WGM12);
    1a6c:	8e b5       	in	r24, 0x2e	; 46
    1a6e:	88 61       	ori	r24, 0x18	; 24
    1a70:	8e bd       	out	0x2e, r24	; 46
				break;
			default:
				break;
		}
		TIMER_COUNTER1A_CONTROL_REGISTER&=~((3<<COM1A0) | (3<<COM1B0) | (3<<COM1C0));
    1a72:	8f b5       	in	r24, 0x2f	; 47
    1a74:	83 70       	andi	r24, 0x03	; 3
    1a76:	8f bd       	out	0x2f, r24	; 47
		TIMER_COUNTER_INTERRUPT_MASK_REGISTER&=~((1<<TICIE1) | (1<<OCIE1A) | (1<<OCIE1B) | (1<<TOIE1));
    1a78:	87 b7       	in	r24, 0x37	; 55
    1a7a:	83 7c       	andi	r24, 0xC3	; 195
    1a7c:	87 bf       	out	0x37, r24	; 55
		EXTENDED_TIMER_COUNTER_INTERRUPT_MASK_REGISTER&=~(1<<OCIE1C);
    1a7e:	ed e7       	ldi	r30, 0x7D	; 125
    1a80:	f0 e0       	ldi	r31, 0x00	; 0
    1a82:	80 81       	ld	r24, Z
    1a84:	8e 7f       	andi	r24, 0xFE	; 254
    1a86:	80 83       	st	Z, r24
		switch(interrupt){
    1a88:	50 e0       	ldi	r21, 0x00	; 0
    1a8a:	fa 01       	movw	r30, r20
    1a8c:	31 97       	sbiw	r30, 0x01	; 1
    1a8e:	ec 30       	cpi	r30, 0x0C	; 12
    1a90:	f1 05       	cpc	r31, r1
    1a92:	08 f0       	brcs	.+2      	; 0x1a96 <TIMER_COUNTER1enable+0xfc>
    1a94:	43 c0       	rjmp	.+134    	; 0x1b1c <TIMER_COUNTER1enable+0x182>
    1a96:	eb 5a       	subi	r30, 0xAB	; 171
    1a98:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9a:	e2 c3       	rjmp	.+1988   	; 0x2260 <__tablejump2__>
			case 0:
				break;
			case 1:
				TIMER_COUNTER_INTERRUPT_MASK_REGISTER|=(1<<TOIE1);
    1a9c:	87 b7       	in	r24, 0x37	; 55
    1a9e:	84 60       	ori	r24, 0x04	; 4
    1aa0:	87 bf       	out	0x37, r24	; 55
				break;
    1aa2:	3c c0       	rjmp	.+120    	; 0x1b1c <TIMER_COUNTER1enable+0x182>
			case 2:
				TIMER_COUNTER_INTERRUPT_MASK_REGISTER|=(1<<OCIE1A);
    1aa4:	87 b7       	in	r24, 0x37	; 55
    1aa6:	80 61       	ori	r24, 0x10	; 16
    1aa8:	87 bf       	out	0x37, r24	; 55
				break;
    1aaa:	38 c0       	rjmp	.+112    	; 0x1b1c <TIMER_COUNTER1enable+0x182>
			case 3:
				TIMER_COUNTER_INTERRUPT_MASK_REGISTER|=(1<<OCIE1B);
    1aac:	87 b7       	in	r24, 0x37	; 55
    1aae:	88 60       	ori	r24, 0x08	; 8
    1ab0:	87 bf       	out	0x37, r24	; 55
				break;
    1ab2:	34 c0       	rjmp	.+104    	; 0x1b1c <TIMER_COUNTER1enable+0x182>
			case 4:
				EXTENDED_TIMER_COUNTER_INTERRUPT_MASK_REGISTER|=(1<<OCIE1C);
    1ab4:	ed e7       	ldi	r30, 0x7D	; 125
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	80 81       	ld	r24, Z
    1aba:	81 60       	ori	r24, 0x01	; 1
    1abc:	80 83       	st	Z, r24
				break;
    1abe:	2e c0       	rjmp	.+92     	; 0x1b1c <TIMER_COUNTER1enable+0x182>
			case 5:
				TIMER_COUNTER_INTERRUPT_MASK_REGISTER|=(1<<TICIE1);
    1ac0:	87 b7       	in	r24, 0x37	; 55
    1ac2:	80 62       	ori	r24, 0x20	; 32
    1ac4:	87 bf       	out	0x37, r24	; 55
				break;
    1ac6:	2a c0       	rjmp	.+84     	; 0x1b1c <TIMER_COUNTER1enable+0x182>
			case 6:
				TIMER_COUNTER_INTERRUPT_MASK_REGISTER|=(1<<OCIE1A) | (1<<TOIE1);
    1ac8:	87 b7       	in	r24, 0x37	; 55
    1aca:	84 61       	ori	r24, 0x14	; 20
    1acc:	87 bf       	out	0x37, r24	; 55
				break;
    1ace:	26 c0       	rjmp	.+76     	; 0x1b1c <TIMER_COUNTER1enable+0x182>
			case 7:
				TIMER_COUNTER_INTERRUPT_MASK_REGISTER|=(1<<OCIE1B) | (1<<TOIE1);
    1ad0:	87 b7       	in	r24, 0x37	; 55
    1ad2:	8c 60       	ori	r24, 0x0C	; 12
    1ad4:	87 bf       	out	0x37, r24	; 55
				break;
    1ad6:	22 c0       	rjmp	.+68     	; 0x1b1c <TIMER_COUNTER1enable+0x182>
			case 8:
				TIMER_COUNTER_INTERRUPT_MASK_REGISTER|=(1<<TOIE1);
    1ad8:	87 b7       	in	r24, 0x37	; 55
    1ada:	84 60       	ori	r24, 0x04	; 4
    1adc:	87 bf       	out	0x37, r24	; 55
				EXTENDED_TIMER_COUNTER_INTERRUPT_MASK_REGISTER|=(1<<OCIE1C);
    1ade:	ed e7       	ldi	r30, 0x7D	; 125
    1ae0:	f0 e0       	ldi	r31, 0x00	; 0
    1ae2:	80 81       	ld	r24, Z
    1ae4:	81 60       	ori	r24, 0x01	; 1
    1ae6:	80 83       	st	Z, r24
				break;
    1ae8:	19 c0       	rjmp	.+50     	; 0x1b1c <TIMER_COUNTER1enable+0x182>
			case 9:
				TIMER_COUNTER_INTERRUPT_MASK_REGISTER|=(1<<TICIE1) | (1<<TOIE1);
    1aea:	87 b7       	in	r24, 0x37	; 55
    1aec:	84 62       	ori	r24, 0x24	; 36
    1aee:	87 bf       	out	0x37, r24	; 55
				break;
    1af0:	15 c0       	rjmp	.+42     	; 0x1b1c <TIMER_COUNTER1enable+0x182>
			case 10:
				TIMER_COUNTER_INTERRUPT_MASK_REGISTER|=(1<<OCIE1A) | (1<<OCIE1B) | (1<<TOIE1);
    1af2:	87 b7       	in	r24, 0x37	; 55
    1af4:	8c 61       	ori	r24, 0x1C	; 28
    1af6:	87 bf       	out	0x37, r24	; 55
				break;
    1af8:	11 c0       	rjmp	.+34     	; 0x1b1c <TIMER_COUNTER1enable+0x182>
			case 11:
				TIMER_COUNTER_INTERRUPT_MASK_REGISTER|=(1<<OCIE1A) | (1<<OCIE1B) | (1<<TOIE1);
    1afa:	87 b7       	in	r24, 0x37	; 55
    1afc:	8c 61       	ori	r24, 0x1C	; 28
    1afe:	87 bf       	out	0x37, r24	; 55
				EXTENDED_TIMER_COUNTER_INTERRUPT_MASK_REGISTER|=(1<<OCIE1C);
    1b00:	ed e7       	ldi	r30, 0x7D	; 125
    1b02:	f0 e0       	ldi	r31, 0x00	; 0
    1b04:	80 81       	ld	r24, Z
    1b06:	81 60       	ori	r24, 0x01	; 1
    1b08:	80 83       	st	Z, r24
				break;
    1b0a:	08 c0       	rjmp	.+16     	; 0x1b1c <TIMER_COUNTER1enable+0x182>
			case 12:
				TIMER_COUNTER_INTERRUPT_MASK_REGISTER|=(1<<OCIE1A) | (1<<OCIE1B);
    1b0c:	87 b7       	in	r24, 0x37	; 55
    1b0e:	88 61       	ori	r24, 0x18	; 24
    1b10:	87 bf       	out	0x37, r24	; 55
				EXTENDED_TIMER_COUNTER_INTERRUPT_MASK_REGISTER|=(1<<OCIE1C);
    1b12:	ed e7       	ldi	r30, 0x7D	; 125
    1b14:	f0 e0       	ldi	r31, 0x00	; 0
    1b16:	80 81       	ld	r24, Z
    1b18:	81 60       	ori	r24, 0x01	; 1
    1b1a:	80 83       	st	Z, r24
		timer1.compareB=TIMER_COUNTER1_compareB;
		timer1.start=TIMER_COUNTER1_start;
		timer1.stop=TIMER_COUNTER1_stop;
	#endif
	//
	return timer1;
    1b1c:	89 e3       	ldi	r24, 0x39	; 57
    1b1e:	9c e0       	ldi	r25, 0x0C	; 12
    1b20:	11 96       	adiw	r26, 0x01	; 1
    1b22:	9c 93       	st	X, r25
    1b24:	8e 93       	st	-X, r24
    1b26:	8e e4       	ldi	r24, 0x4E	; 78
    1b28:	9c e0       	ldi	r25, 0x0C	; 12
    1b2a:	13 96       	adiw	r26, 0x03	; 3
    1b2c:	9c 93       	st	X, r25
    1b2e:	8e 93       	st	-X, r24
    1b30:	12 97       	sbiw	r26, 0x02	; 2
    1b32:	83 e6       	ldi	r24, 0x63	; 99
    1b34:	9c e0       	ldi	r25, 0x0C	; 12
    1b36:	15 96       	adiw	r26, 0x05	; 5
    1b38:	9c 93       	st	X, r25
    1b3a:	8e 93       	st	-X, r24
    1b3c:	14 97       	sbiw	r26, 0x04	; 4
    1b3e:	88 e7       	ldi	r24, 0x78	; 120
    1b40:	9c e0       	ldi	r25, 0x0C	; 12
    1b42:	17 96       	adiw	r26, 0x07	; 7
    1b44:	9c 93       	st	X, r25
    1b46:	8e 93       	st	-X, r24
    1b48:	16 97       	sbiw	r26, 0x06	; 6
    1b4a:	8b e7       	ldi	r24, 0x7B	; 123
    1b4c:	9c e0       	ldi	r25, 0x0C	; 12
    1b4e:	19 96       	adiw	r26, 0x09	; 9
    1b50:	9c 93       	st	X, r25
    1b52:	8e 93       	st	-X, r24
    1b54:	18 97       	sbiw	r26, 0x08	; 8
    1b56:	8e e7       	ldi	r24, 0x7E	; 126
    1b58:	9c e0       	ldi	r25, 0x0C	; 12
    1b5a:	1b 96       	adiw	r26, 0x0b	; 11
    1b5c:	9c 93       	st	X, r25
    1b5e:	8e 93       	st	-X, r24
    1b60:	1a 97       	sbiw	r26, 0x0a	; 10
    1b62:	82 ef       	ldi	r24, 0xF2	; 242
    1b64:	9b e0       	ldi	r25, 0x0B	; 11
    1b66:	1d 96       	adiw	r26, 0x0d	; 13
    1b68:	9c 93       	st	X, r25
    1b6a:	8e 93       	st	-X, r24
    1b6c:	1c 97       	sbiw	r26, 0x0c	; 12
    1b6e:	83 e8       	ldi	r24, 0x83	; 131
    1b70:	9c e0       	ldi	r25, 0x0C	; 12
    1b72:	1f 96       	adiw	r26, 0x0f	; 15
    1b74:	9c 93       	st	X, r25
    1b76:	8e 93       	st	-X, r24
    1b78:	1e 97       	sbiw	r26, 0x0e	; 14
}
    1b7a:	cd 01       	movw	r24, r26
    1b7c:	1f 91       	pop	r17
    1b7e:	0f 91       	pop	r16
    1b80:	08 95       	ret

00001b82 <PORTINIT>:
** procedure and function
*/
void PORTINIT()
{
	//INPUT
	DDRF=0x00;
    1b82:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	PORTF=0x0F;
    1b86:	8f e0       	ldi	r24, 0x0F	; 15
    1b88:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	DDRE=0X00;
    1b8c:	12 b8       	out	0x02, r1	; 2
	PORTE=0XFF;
    1b8e:	8f ef       	ldi	r24, 0xFF	; 255
    1b90:	83 b9       	out	0x03, r24	; 3
	DDRD=0X00;
    1b92:	11 ba       	out	0x11, r1	; 17
	PORTD=0XFF;
    1b94:	82 bb       	out	0x12, r24	; 18
	//OUTPUT
	DDRC=0XFF;
    1b96:	84 bb       	out	0x14, r24	; 20
	PORTC=0x00;
    1b98:	15 ba       	out	0x15, r1	; 21
	DDRB|=(1<<5) | (1<<6) | (1<<7);
    1b9a:	87 b3       	in	r24, 0x17	; 23
    1b9c:	80 6e       	ori	r24, 0xE0	; 224
    1b9e:	87 bb       	out	0x17, r24	; 23
	//UART0
	//DDRE=0X02;
	SREG|=(1<<GI);
    1ba0:	8f b7       	in	r24, 0x3f	; 63
    1ba2:	80 68       	ori	r24, 0x80	; 128
    1ba4:	8f bf       	out	0x3f, r24	; 63
    1ba6:	08 95       	ret

00001ba8 <main>:
** procedure and function header
*/
void PORTINIT();
/****MAIN****/
int main(void)
{
    1ba8:	cf 93       	push	r28
    1baa:	df 93       	push	r29
    1bac:	cd b7       	in	r28, 0x3d	; 61
    1bae:	de b7       	in	r29, 0x3e	; 62
    1bb0:	ca 5b       	subi	r28, 0xBA	; 186
    1bb2:	d1 09       	sbc	r29, r1
    1bb4:	0f b6       	in	r0, 0x3f	; 63
    1bb6:	f8 94       	cli
    1bb8:	de bf       	out	0x3e, r29	; 62
    1bba:	0f be       	out	0x3f, r0	; 63
    1bbc:	cd bf       	out	0x3d, r28	; 61
	PORTINIT();
    1bbe:	e1 df       	rcall	.-62     	; 0x1b82 <PORTINIT>
	/***INICIALIZE OBJECTS***/
	FUNC function= FUNCenable();
    1bc0:	ce 01       	movw	r24, r28
    1bc2:	01 96       	adiw	r24, 0x01	; 1
    1bc4:	70 d9       	rcall	.-3360   	; 0xea6 <FUNCenable>
    1bc6:	8d a1       	ldd	r24, Y+37	; 0x25
    1bc8:	9e a1       	ldd	r25, Y+38	; 0x26
    1bca:	cd 54       	subi	r28, 0x4D	; 77
    1bcc:	df 4f       	sbci	r29, 0xFF	; 255
    1bce:	99 83       	std	Y+1, r25	; 0x01
    1bd0:	88 83       	st	Y, r24
    1bd2:	c3 5b       	subi	r28, 0xB3	; 179
    1bd4:	d0 40       	sbci	r29, 0x00	; 0
    1bd6:	ef a9       	ldd	r30, Y+55	; 0x37
    1bd8:	f8 ad       	ldd	r31, Y+56	; 0x38
    1bda:	c3 55       	subi	r28, 0x53	; 83
    1bdc:	df 4f       	sbci	r29, 0xFF	; 255
    1bde:	f9 83       	std	Y+1, r31	; 0x01
    1be0:	e8 83       	st	Y, r30
    1be2:	cd 5a       	subi	r28, 0xAD	; 173
    1be4:	d0 40       	sbci	r29, 0x00	; 0
	LCD0 lcd0 = LCD0enable(&DDRA,&PINA,&PORTA);
    1be6:	2b e3       	ldi	r18, 0x3B	; 59
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	49 e3       	ldi	r20, 0x39	; 57
    1bec:	50 e0       	ldi	r21, 0x00	; 0
    1bee:	6a e3       	ldi	r22, 0x3A	; 58
    1bf0:	70 e0       	ldi	r23, 0x00	; 0
    1bf2:	ce 01       	movw	r24, r28
    1bf4:	8d 5b       	subi	r24, 0xBD	; 189
    1bf6:	9f 4f       	sbci	r25, 0xFF	; 255
    1bf8:	fa db       	rcall	.-2060   	; 0x13ee <LCD0enable>
    1bfa:	61 96       	adiw	r28, 0x11	; 17
    1bfc:	8e ad       	ldd	r24, Y+62	; 0x3e
    1bfe:	9f ad       	ldd	r25, Y+63	; 0x3f
    1c00:	61 97       	sbiw	r28, 0x11	; 17
    1c02:	c7 55       	subi	r28, 0x57	; 87
    1c04:	df 4f       	sbci	r29, 0xFF	; 255
    1c06:	99 83       	std	Y+1, r25	; 0x01
    1c08:	88 83       	st	Y, r24
    1c0a:	c9 5a       	subi	r28, 0xA9	; 169
    1c0c:	d0 40       	sbci	r29, 0x00	; 0
    1c0e:	63 96       	adiw	r28, 0x13	; 19
    1c10:	ee ad       	ldd	r30, Y+62	; 0x3e
    1c12:	ff ad       	ldd	r31, Y+63	; 0x3f
    1c14:	63 97       	sbiw	r28, 0x13	; 19
    1c16:	c5 55       	subi	r28, 0x55	; 85
    1c18:	df 4f       	sbci	r29, 0xFF	; 255
    1c1a:	f9 83       	std	Y+1, r31	; 0x01
    1c1c:	e8 83       	st	Y, r30
    1c1e:	cb 5a       	subi	r28, 0xAB	; 171
    1c20:	d0 40       	sbci	r29, 0x00	; 0
    1c22:	67 96       	adiw	r28, 0x17	; 23
    1c24:	2e ac       	ldd	r2, Y+62	; 0x3e
    1c26:	3f ac       	ldd	r3, Y+63	; 0x3f
    1c28:	67 97       	sbiw	r28, 0x17	; 23
	MM74C923 keypad = MM74C923enable(&DDRC,&PINC,&PORTC);
    1c2a:	25 e3       	ldi	r18, 0x35	; 53
    1c2c:	30 e0       	ldi	r19, 0x00	; 0
    1c2e:	43 e3       	ldi	r20, 0x33	; 51
    1c30:	50 e0       	ldi	r21, 0x00	; 0
    1c32:	64 e3       	ldi	r22, 0x34	; 52
    1c34:	70 e0       	ldi	r23, 0x00	; 0
    1c36:	ce 01       	movw	r24, r28
    1c38:	87 5a       	subi	r24, 0xA7	; 167
    1c3a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c3c:	f9 dc       	rcall	.-1550   	; 0x1630 <MM74C923enable>
    1c3e:	6f 96       	adiw	r28, 0x1f	; 31
    1c40:	8e ad       	ldd	r24, Y+62	; 0x3e
    1c42:	9f ad       	ldd	r25, Y+63	; 0x3f
    1c44:	6f 97       	sbiw	r28, 0x1f	; 31
    1c46:	cb 54       	subi	r28, 0x4B	; 75
    1c48:	df 4f       	sbci	r29, 0xFF	; 255
    1c4a:	99 83       	std	Y+1, r25	; 0x01
    1c4c:	88 83       	st	Y, r24
    1c4e:	c5 5b       	subi	r28, 0xB5	; 181
    1c50:	d0 40       	sbci	r29, 0x00	; 0
    1c52:	a1 96       	adiw	r28, 0x21	; 33
    1c54:	ee ad       	ldd	r30, Y+62	; 0x3e
    1c56:	ff ad       	ldd	r31, Y+63	; 0x3f
    1c58:	a1 97       	sbiw	r28, 0x21	; 33
    1c5a:	cf 54       	subi	r28, 0x4F	; 79
    1c5c:	df 4f       	sbci	r29, 0xFF	; 255
    1c5e:	f9 83       	std	Y+1, r31	; 0x01
    1c60:	e8 83       	st	Y, r30
    1c62:	c1 5b       	subi	r28, 0xB1	; 177
    1c64:	d0 40       	sbci	r29, 0x00	; 0
    1c66:	a3 96       	adiw	r28, 0x23	; 35
    1c68:	8e ad       	ldd	r24, Y+62	; 0x3e
    1c6a:	9f ad       	ldd	r25, Y+63	; 0x3f
    1c6c:	a3 97       	sbiw	r28, 0x23	; 35
    1c6e:	c9 54       	subi	r28, 0x49	; 73
    1c70:	df 4f       	sbci	r29, 0xFF	; 255
    1c72:	99 83       	std	Y+1, r25	; 0x01
    1c74:	88 83       	st	Y, r24
    1c76:	c7 5b       	subi	r28, 0xB7	; 183
    1c78:	d0 40       	sbci	r29, 0x00	; 0
	ANALOG analog = ANALOGenable(1, 128, 1, 0); // channel 0 for position
    1c7a:	1f 92       	push	r1
    1c7c:	1f 92       	push	r1
    1c7e:	1f 92       	push	r1
    1c80:	81 e0       	ldi	r24, 0x01	; 1
    1c82:	8f 93       	push	r24
    1c84:	90 e8       	ldi	r25, 0x80	; 128
    1c86:	9f 93       	push	r25
    1c88:	8f 93       	push	r24
    1c8a:	0e 94 8b 00 	call	0x116	; 0x116 <ANALOGenable>
    1c8e:	2b 01       	movw	r4, r22
    1c90:	3c 01       	movw	r6, r24
	TIMER_COUNTER0 timer0 = TIMER_COUNTER0enable(2,2); // for clock
    1c92:	42 e0       	ldi	r20, 0x02	; 2
    1c94:	62 e0       	ldi	r22, 0x02	; 2
    1c96:	ce 01       	movw	r24, r28
    1c98:	8d 59       	subi	r24, 0x9D	; 157
    1c9a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c9c:	3c de       	rcall	.-904    	; 0x1916 <TIMER_COUNTER0enable>
	TIMER_COUNTER1 timer1 = TIMER_COUNTER1enable(9,0); // PWM positioning
    1c9e:	40 e0       	ldi	r20, 0x00	; 0
    1ca0:	69 e0       	ldi	r22, 0x09	; 9
    1ca2:	ce 01       	movw	r24, r28
    1ca4:	8d 58       	subi	r24, 0x8D	; 141
    1ca6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ca8:	78 de       	rcall	.-784    	; 0x199a <TIMER_COUNTER1enable>
    1caa:	ed 96       	adiw	r28, 0x3d	; 61
    1cac:	ee ad       	ldd	r30, Y+62	; 0x3e
    1cae:	ff ad       	ldd	r31, Y+63	; 0x3f
    1cb0:	ed 97       	sbiw	r28, 0x3d	; 61
    1cb2:	c1 55       	subi	r28, 0x51	; 81
    1cb4:	df 4f       	sbci	r29, 0xFF	; 255
    1cb6:	f9 83       	std	Y+1, r31	; 0x01
    1cb8:	e8 83       	st	Y, r30
    1cba:	cf 5a       	subi	r28, 0xAF	; 175
    1cbc:	d0 40       	sbci	r29, 0x00	; 0
	relogio=CLOCKenable(12,0,0);
    1cbe:	20 e0       	ldi	r18, 0x00	; 0
    1cc0:	40 e0       	ldi	r20, 0x00	; 0
    1cc2:	6c e0       	ldi	r22, 0x0C	; 12
    1cc4:	ce 01       	movw	r24, r28
    1cc6:	8d 56       	subi	r24, 0x6D	; 109
    1cc8:	9f 4f       	sbci	r25, 0xFF	; 255
    1cca:	0e 94 93 03 	call	0x726	; 0x726 <CLOCKenable>
    1cce:	84 e1       	ldi	r24, 0x14	; 20
    1cd0:	fe 01       	movw	r30, r28
    1cd2:	ed 56       	subi	r30, 0x6D	; 109
    1cd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd6:	a2 e1       	ldi	r26, 0x12	; 18
    1cd8:	b2 e0       	ldi	r27, 0x02	; 2
    1cda:	01 90       	ld	r0, Z+
    1cdc:	0d 92       	st	X+, r0
    1cde:	8a 95       	dec	r24
    1ce0:	e1 f7       	brne	.-8      	; 0x1cda <main+0x132>
	char analogtmp[8];
	char keychar;
	int adcvalue;
	uint8_t step=0;
	/***Parameters timers***/
	timer0.compare(249);
    1ce2:	ab 96       	adiw	r28, 0x2b	; 43
    1ce4:	ee ad       	ldd	r30, Y+62	; 0x3e
    1ce6:	ff ad       	ldd	r31, Y+63	; 0x3f
    1ce8:	ab 97       	sbiw	r28, 0x2b	; 43
    1cea:	89 ef       	ldi	r24, 0xF9	; 249
    1cec:	09 95       	icall
	timer1.compoutmodeB(2);
    1cee:	e7 96       	adiw	r28, 0x37	; 55
    1cf0:	ee ad       	ldd	r30, Y+62	; 0x3e
    1cf2:	ff ad       	ldd	r31, Y+63	; 0x3f
    1cf4:	e7 97       	sbiw	r28, 0x37	; 55
    1cf6:	82 e0       	ldi	r24, 0x02	; 2
    1cf8:	09 95       	icall
	timer1.compareA(20000);
    1cfa:	eb 96       	adiw	r28, 0x3b	; 59
    1cfc:	ee ad       	ldd	r30, Y+62	; 0x3e
    1cfe:	ff ad       	ldd	r31, Y+63	; 0x3f
    1d00:	eb 97       	sbiw	r28, 0x3b	; 59
    1d02:	80 e2       	ldi	r24, 0x20	; 32
    1d04:	9e e4       	ldi	r25, 0x4E	; 78
    1d06:	09 95       	icall
	timer1.start(8);
    1d08:	c1 58       	subi	r28, 0x81	; 129
    1d0a:	df 4f       	sbci	r29, 0xFF	; 255
    1d0c:	e8 81       	ld	r30, Y
    1d0e:	f9 81       	ldd	r31, Y+1	; 0x01
    1d10:	cf 57       	subi	r28, 0x7F	; 127
    1d12:	d0 40       	sbci	r29, 0x00	; 0
    1d14:	88 e0       	ldi	r24, 0x08	; 8
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	09 95       	icall
	timer0.start(64);
    1d1a:	e1 96       	adiw	r28, 0x31	; 49
    1d1c:	ee ad       	ldd	r30, Y+62	; 0x3e
    1d1e:	ff ad       	ldd	r31, Y+63	; 0x3f
    1d20:	e1 97       	sbiw	r28, 0x31	; 49
    1d22:	80 e4       	ldi	r24, 0x40	; 64
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	09 95       	icall
    1d28:	0f 90       	pop	r0
    1d2a:	0f 90       	pop	r0
    1d2c:	0f 90       	pop	r0
    1d2e:	0f 90       	pop	r0
    1d30:	0f 90       	pop	r0
    1d32:	0f 90       	pop	r0
	char Mode='1';
	char keytmp[8];
	char analogtmp[8];
	char keychar;
	int adcvalue;
	uint8_t step=0;
    1d34:	c9 55       	subi	r28, 0x59	; 89
    1d36:	df 4f       	sbci	r29, 0xFF	; 255
    1d38:	18 82       	st	Y, r1
    1d3a:	c7 5a       	subi	r28, 0xA7	; 167
    1d3c:	d0 40       	sbci	r29, 0x00	; 0
	ANALOG analog = ANALOGenable(1, 128, 1, 0); // channel 0 for position
	TIMER_COUNTER0 timer0 = TIMER_COUNTER0enable(2,2); // for clock
	TIMER_COUNTER1 timer1 = TIMER_COUNTER1enable(9,0); // PWM positioning
	relogio=CLOCKenable(12,0,0);
	/******/
	char Mode='1';
    1d3e:	f1 e3       	ldi	r31, 0x31	; 49
    1d40:	c8 55       	subi	r28, 0x58	; 88
    1d42:	df 4f       	sbci	r29, 0xFF	; 255
    1d44:	f8 83       	st	Y, r31
    1d46:	c8 5a       	subi	r28, 0xA8	; 168
    1d48:	d0 40       	sbci	r29, 0x00	; 0
				lcd0.gotoxy(0,0);
				lcd0.string_size(keypad.gets(),5);
				if(!strcmp(keypad.data(),""));
				else
					strcpy(keytmp,keypad.data());
				timer1.compareB(function.trimmer(function.strToInt(keytmp),0,180,450,2450));
    1d4a:	0f 2e       	mov	r0, r31
    1d4c:	f9 e0       	ldi	r31, 0x09	; 9
    1d4e:	9f 2e       	mov	r9, r31
    1d50:	f0 2d       	mov	r31, r0
				break;
			case '2':
				lcd0.gotoxy(0,0);
				adcvalue=analog.read(0);
    1d52:	c7 54       	subi	r28, 0x47	; 71
    1d54:	df 4f       	sbci	r29, 0xFF	; 255
    1d56:	79 82       	std	Y+1, r7	; 0x01
    1d58:	68 82       	st	Y, r6
    1d5a:	c9 5b       	subi	r28, 0xB9	; 185
    1d5c:	d0 40       	sbci	r29, 0x00	; 0
				lcd0.gotoxy(0,0);
				lcd0.string_size(keypad.gets(),5);
				if(!strcmp(keypad.data(),""));
				else
					strcpy(keytmp,keypad.data());
				timer1.compareB(function.trimmer(function.strToInt(keytmp),0,180,450,2450));
    1d5e:	0f 2e       	mov	r0, r31
    1d60:	f2 e9       	ldi	r31, 0x92	; 146
    1d62:	8f 2e       	mov	r8, r31
    1d64:	f0 2d       	mov	r31, r0
	timer1.start(8);
	timer0.start(64);
	/**********/
	while(TRUE){
		//PREAMBLE
		lcd0.reboot();
    1d66:	69 96       	adiw	r28, 0x19	; 25
    1d68:	ee ad       	ldd	r30, Y+62	; 0x3e
    1d6a:	ff ad       	ldd	r31, Y+63	; 0x3f
    1d6c:	69 97       	sbiw	r28, 0x19	; 25
    1d6e:	09 95       	icall
		keypad.activate();
    1d70:	6b 96       	adiw	r28, 0x1b	; 27
    1d72:	ee ad       	ldd	r30, Y+62	; 0x3e
    1d74:	ff ad       	ldd	r31, Y+63	; 0x3f
    1d76:	6b 97       	sbiw	r28, 0x1b	; 27
    1d78:	09 95       	icall
		//TODO:: Please write your application code
		switch(Mode){
    1d7a:	c8 55       	subi	r28, 0x58	; 88
    1d7c:	df 4f       	sbci	r29, 0xFF	; 255
    1d7e:	88 81       	ld	r24, Y
    1d80:	c8 5a       	subi	r28, 0xA8	; 168
    1d82:	d0 40       	sbci	r29, 0x00	; 0
    1d84:	81 33       	cpi	r24, 0x31	; 49
    1d86:	21 f0       	breq	.+8      	; 0x1d90 <main+0x1e8>
    1d88:	82 33       	cpi	r24, 0x32	; 50
    1d8a:	09 f4       	brne	.+2      	; 0x1d8e <main+0x1e6>
    1d8c:	63 c0       	rjmp	.+198    	; 0x1e54 <main+0x2ac>
    1d8e:	b3 c0       	rjmp	.+358    	; 0x1ef6 <main+0x34e>
			case '1':
				lcd0.gotoxy(0,0);
    1d90:	60 e0       	ldi	r22, 0x00	; 0
    1d92:	70 e0       	ldi	r23, 0x00	; 0
    1d94:	80 e0       	ldi	r24, 0x00	; 0
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	f1 01       	movw	r30, r2
    1d9a:	09 95       	icall
				lcd0.string_size(keypad.gets(),5);
    1d9c:	cb 54       	subi	r28, 0x4B	; 75
    1d9e:	df 4f       	sbci	r29, 0xFF	; 255
    1da0:	e8 81       	ld	r30, Y
    1da2:	f9 81       	ldd	r31, Y+1	; 0x01
    1da4:	c5 5b       	subi	r28, 0xB5	; 181
    1da6:	d0 40       	sbci	r29, 0x00	; 0
    1da8:	09 95       	icall
    1daa:	65 e0       	ldi	r22, 0x05	; 5
    1dac:	c7 55       	subi	r28, 0x57	; 87
    1dae:	df 4f       	sbci	r29, 0xFF	; 255
    1db0:	e8 81       	ld	r30, Y
    1db2:	f9 81       	ldd	r31, Y+1	; 0x01
    1db4:	c9 5a       	subi	r28, 0xA9	; 169
    1db6:	d0 40       	sbci	r29, 0x00	; 0
    1db8:	09 95       	icall
				if(!strcmp(keypad.data(),""));
    1dba:	cf 54       	subi	r28, 0x4F	; 79
    1dbc:	df 4f       	sbci	r29, 0xFF	; 255
    1dbe:	e8 81       	ld	r30, Y
    1dc0:	f9 81       	ldd	r31, Y+1	; 0x01
    1dc2:	c1 5b       	subi	r28, 0xB1	; 177
    1dc4:	d0 40       	sbci	r29, 0x00	; 0
    1dc6:	09 95       	icall
    1dc8:	fc 01       	movw	r30, r24
    1dca:	80 81       	ld	r24, Z
    1dcc:	88 23       	and	r24, r24
    1dce:	61 f0       	breq	.+24     	; 0x1de8 <main+0x240>
				else
					strcpy(keytmp,keypad.data());
    1dd0:	cf 54       	subi	r28, 0x4F	; 79
    1dd2:	df 4f       	sbci	r29, 0xFF	; 255
    1dd4:	e8 81       	ld	r30, Y
    1dd6:	f9 81       	ldd	r31, Y+1	; 0x01
    1dd8:	c1 5b       	subi	r28, 0xB1	; 177
    1dda:	d0 40       	sbci	r29, 0x00	; 0
    1ddc:	09 95       	icall
    1dde:	bc 01       	movw	r22, r24
    1de0:	ce 01       	movw	r24, r28
    1de2:	8d 57       	subi	r24, 0x7D	; 125
    1de4:	9f 4f       	sbci	r25, 0xFF	; 255
    1de6:	5e d2       	rcall	.+1212   	; 0x22a4 <strcpy>
				timer1.compareB(function.trimmer(function.strToInt(keytmp),0,180,450,2450));
    1de8:	ce 01       	movw	r24, r28
    1dea:	8d 57       	subi	r24, 0x7D	; 125
    1dec:	9f 4f       	sbci	r25, 0xFF	; 255
    1dee:	cd 54       	subi	r28, 0x4D	; 77
    1df0:	df 4f       	sbci	r29, 0xFF	; 255
    1df2:	e8 81       	ld	r30, Y
    1df4:	f9 81       	ldd	r31, Y+1	; 0x01
    1df6:	c3 5b       	subi	r28, 0xB3	; 179
    1df8:	d0 40       	sbci	r29, 0x00	; 0
    1dfa:	09 95       	icall
    1dfc:	bc 01       	movw	r22, r24
    1dfe:	99 0f       	add	r25, r25
    1e00:	88 0b       	sbc	r24, r24
    1e02:	99 0b       	sbc	r25, r25
    1e04:	1f 92       	push	r1
    1e06:	1f 92       	push	r1
    1e08:	9f 92       	push	r9
    1e0a:	8f 92       	push	r8
    1e0c:	0f 2e       	mov	r0, r31
    1e0e:	f2 ec       	ldi	r31, 0xC2	; 194
    1e10:	af 2e       	mov	r10, r31
    1e12:	bb 24       	eor	r11, r11
    1e14:	b3 94       	inc	r11
    1e16:	c1 2c       	mov	r12, r1
    1e18:	d1 2c       	mov	r13, r1
    1e1a:	f0 2d       	mov	r31, r0
    1e1c:	14 eb       	ldi	r17, 0xB4	; 180
    1e1e:	e1 2e       	mov	r14, r17
    1e20:	f1 2c       	mov	r15, r1
    1e22:	00 e0       	ldi	r16, 0x00	; 0
    1e24:	10 e0       	ldi	r17, 0x00	; 0
    1e26:	20 e0       	ldi	r18, 0x00	; 0
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	a9 01       	movw	r20, r18
    1e2c:	c3 55       	subi	r28, 0x53	; 83
    1e2e:	df 4f       	sbci	r29, 0xFF	; 255
    1e30:	e8 81       	ld	r30, Y
    1e32:	f9 81       	ldd	r31, Y+1	; 0x01
    1e34:	cd 5a       	subi	r28, 0xAD	; 173
    1e36:	d0 40       	sbci	r29, 0x00	; 0
    1e38:	09 95       	icall
    1e3a:	cb 01       	movw	r24, r22
    1e3c:	c1 55       	subi	r28, 0x51	; 81
    1e3e:	df 4f       	sbci	r29, 0xFF	; 255
    1e40:	e8 81       	ld	r30, Y
    1e42:	f9 81       	ldd	r31, Y+1	; 0x01
    1e44:	cf 5a       	subi	r28, 0xAF	; 175
    1e46:	d0 40       	sbci	r29, 0x00	; 0
    1e48:	09 95       	icall
				break;
    1e4a:	0f 90       	pop	r0
    1e4c:	0f 90       	pop	r0
    1e4e:	0f 90       	pop	r0
    1e50:	0f 90       	pop	r0
    1e52:	b3 c0       	rjmp	.+358    	; 0x1fba <main+0x412>
			case '2':
				lcd0.gotoxy(0,0);
    1e54:	60 e0       	ldi	r22, 0x00	; 0
    1e56:	70 e0       	ldi	r23, 0x00	; 0
    1e58:	80 e0       	ldi	r24, 0x00	; 0
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	f1 01       	movw	r30, r2
    1e5e:	09 95       	icall
				adcvalue=analog.read(0);
    1e60:	80 e0       	ldi	r24, 0x00	; 0
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	c7 54       	subi	r28, 0x47	; 71
    1e66:	df 4f       	sbci	r29, 0xFF	; 255
    1e68:	e8 81       	ld	r30, Y
    1e6a:	f9 81       	ldd	r31, Y+1	; 0x01
    1e6c:	c9 5b       	subi	r28, 0xB9	; 185
    1e6e:	d0 40       	sbci	r29, 0x00	; 0
    1e70:	09 95       	icall
				function.itoa(adcvalue,analogtmp);
    1e72:	2c 01       	movw	r4, r24
    1e74:	99 0f       	add	r25, r25
    1e76:	66 08       	sbc	r6, r6
    1e78:	77 08       	sbc	r7, r7
    1e7a:	ed 8d       	ldd	r30, Y+29	; 0x1d
    1e7c:	fe 8d       	ldd	r31, Y+30	; 0x1e
    1e7e:	ae 01       	movw	r20, r28
    1e80:	45 57       	subi	r20, 0x75	; 117
    1e82:	5f 4f       	sbci	r21, 0xFF	; 255
    1e84:	c3 01       	movw	r24, r6
    1e86:	b2 01       	movw	r22, r4
    1e88:	09 95       	icall
				lcd0.string_size(analogtmp,5);
    1e8a:	65 e0       	ldi	r22, 0x05	; 5
    1e8c:	ce 01       	movw	r24, r28
    1e8e:	85 57       	subi	r24, 0x75	; 117
    1e90:	9f 4f       	sbci	r25, 0xFF	; 255
    1e92:	c7 55       	subi	r28, 0x57	; 87
    1e94:	df 4f       	sbci	r29, 0xFF	; 255
    1e96:	e8 81       	ld	r30, Y
    1e98:	f9 81       	ldd	r31, Y+1	; 0x01
    1e9a:	c9 5a       	subi	r28, 0xA9	; 169
    1e9c:	d0 40       	sbci	r29, 0x00	; 0
    1e9e:	09 95       	icall
				timer1.compareB(function.trimmer(adcvalue,0,1023,450,2450));
    1ea0:	1f 92       	push	r1
    1ea2:	1f 92       	push	r1
    1ea4:	9f 92       	push	r9
    1ea6:	8f 92       	push	r8
    1ea8:	0f 2e       	mov	r0, r31
    1eaa:	f2 ec       	ldi	r31, 0xC2	; 194
    1eac:	af 2e       	mov	r10, r31
    1eae:	bb 24       	eor	r11, r11
    1eb0:	b3 94       	inc	r11
    1eb2:	c1 2c       	mov	r12, r1
    1eb4:	d1 2c       	mov	r13, r1
    1eb6:	f0 2d       	mov	r31, r0
    1eb8:	ee 24       	eor	r14, r14
    1eba:	ea 94       	dec	r14
    1ebc:	13 e0       	ldi	r17, 0x03	; 3
    1ebe:	f1 2e       	mov	r15, r17
    1ec0:	00 e0       	ldi	r16, 0x00	; 0
    1ec2:	10 e0       	ldi	r17, 0x00	; 0
    1ec4:	20 e0       	ldi	r18, 0x00	; 0
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	a9 01       	movw	r20, r18
    1eca:	c3 01       	movw	r24, r6
    1ecc:	b2 01       	movw	r22, r4
    1ece:	c3 55       	subi	r28, 0x53	; 83
    1ed0:	df 4f       	sbci	r29, 0xFF	; 255
    1ed2:	e8 81       	ld	r30, Y
    1ed4:	f9 81       	ldd	r31, Y+1	; 0x01
    1ed6:	cd 5a       	subi	r28, 0xAD	; 173
    1ed8:	d0 40       	sbci	r29, 0x00	; 0
    1eda:	09 95       	icall
    1edc:	cb 01       	movw	r24, r22
    1ede:	c1 55       	subi	r28, 0x51	; 81
    1ee0:	df 4f       	sbci	r29, 0xFF	; 255
    1ee2:	e8 81       	ld	r30, Y
    1ee4:	f9 81       	ldd	r31, Y+1	; 0x01
    1ee6:	cf 5a       	subi	r28, 0xAF	; 175
    1ee8:	d0 40       	sbci	r29, 0x00	; 0
    1eea:	09 95       	icall
				break;
    1eec:	0f 90       	pop	r0
    1eee:	0f 90       	pop	r0
    1ef0:	0f 90       	pop	r0
    1ef2:	0f 90       	pop	r0
    1ef4:	62 c0       	rjmp	.+196    	; 0x1fba <main+0x412>
			default:
				lcd0.gotoxy(0,0);
    1ef6:	60 e0       	ldi	r22, 0x00	; 0
    1ef8:	70 e0       	ldi	r23, 0x00	; 0
    1efa:	80 e0       	ldi	r24, 0x00	; 0
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	f1 01       	movw	r30, r2
    1f00:	09 95       	icall
				lcd0.string_size(keypad.gets(),5);
    1f02:	cb 54       	subi	r28, 0x4B	; 75
    1f04:	df 4f       	sbci	r29, 0xFF	; 255
    1f06:	e8 81       	ld	r30, Y
    1f08:	f9 81       	ldd	r31, Y+1	; 0x01
    1f0a:	c5 5b       	subi	r28, 0xB5	; 181
    1f0c:	d0 40       	sbci	r29, 0x00	; 0
    1f0e:	09 95       	icall
    1f10:	65 e0       	ldi	r22, 0x05	; 5
    1f12:	c7 55       	subi	r28, 0x57	; 87
    1f14:	df 4f       	sbci	r29, 0xFF	; 255
    1f16:	e8 81       	ld	r30, Y
    1f18:	f9 81       	ldd	r31, Y+1	; 0x01
    1f1a:	c9 5a       	subi	r28, 0xA9	; 169
    1f1c:	d0 40       	sbci	r29, 0x00	; 0
    1f1e:	09 95       	icall
				if(!strcmp(keypad.data(),""));
    1f20:	cf 54       	subi	r28, 0x4F	; 79
    1f22:	df 4f       	sbci	r29, 0xFF	; 255
    1f24:	e8 81       	ld	r30, Y
    1f26:	f9 81       	ldd	r31, Y+1	; 0x01
    1f28:	c1 5b       	subi	r28, 0xB1	; 177
    1f2a:	d0 40       	sbci	r29, 0x00	; 0
    1f2c:	09 95       	icall
    1f2e:	fc 01       	movw	r30, r24
    1f30:	80 81       	ld	r24, Z
    1f32:	88 23       	and	r24, r24
    1f34:	61 f0       	breq	.+24     	; 0x1f4e <main+0x3a6>
				else
					strcpy(keytmp,keypad.data());
    1f36:	cf 54       	subi	r28, 0x4F	; 79
    1f38:	df 4f       	sbci	r29, 0xFF	; 255
    1f3a:	e8 81       	ld	r30, Y
    1f3c:	f9 81       	ldd	r31, Y+1	; 0x01
    1f3e:	c1 5b       	subi	r28, 0xB1	; 177
    1f40:	d0 40       	sbci	r29, 0x00	; 0
    1f42:	09 95       	icall
    1f44:	bc 01       	movw	r22, r24
    1f46:	ce 01       	movw	r24, r28
    1f48:	8d 57       	subi	r24, 0x7D	; 125
    1f4a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f4c:	ab d1       	rcall	.+854    	; 0x22a4 <strcpy>
				timer1.compareB(function.trimmer(function.strToInt(keytmp),0,1023,450,2450));
    1f4e:	ce 01       	movw	r24, r28
    1f50:	8d 57       	subi	r24, 0x7D	; 125
    1f52:	9f 4f       	sbci	r25, 0xFF	; 255
    1f54:	cd 54       	subi	r28, 0x4D	; 77
    1f56:	df 4f       	sbci	r29, 0xFF	; 255
    1f58:	e8 81       	ld	r30, Y
    1f5a:	f9 81       	ldd	r31, Y+1	; 0x01
    1f5c:	c3 5b       	subi	r28, 0xB3	; 179
    1f5e:	d0 40       	sbci	r29, 0x00	; 0
    1f60:	09 95       	icall
    1f62:	bc 01       	movw	r22, r24
    1f64:	99 0f       	add	r25, r25
    1f66:	88 0b       	sbc	r24, r24
    1f68:	99 0b       	sbc	r25, r25
    1f6a:	1f 92       	push	r1
    1f6c:	1f 92       	push	r1
    1f6e:	9f 92       	push	r9
    1f70:	8f 92       	push	r8
    1f72:	0f 2e       	mov	r0, r31
    1f74:	f2 ec       	ldi	r31, 0xC2	; 194
    1f76:	af 2e       	mov	r10, r31
    1f78:	bb 24       	eor	r11, r11
    1f7a:	b3 94       	inc	r11
    1f7c:	c1 2c       	mov	r12, r1
    1f7e:	d1 2c       	mov	r13, r1
    1f80:	f0 2d       	mov	r31, r0
    1f82:	ee 24       	eor	r14, r14
    1f84:	ea 94       	dec	r14
    1f86:	13 e0       	ldi	r17, 0x03	; 3
    1f88:	f1 2e       	mov	r15, r17
    1f8a:	00 e0       	ldi	r16, 0x00	; 0
    1f8c:	10 e0       	ldi	r17, 0x00	; 0
    1f8e:	20 e0       	ldi	r18, 0x00	; 0
    1f90:	30 e0       	ldi	r19, 0x00	; 0
    1f92:	a9 01       	movw	r20, r18
    1f94:	c3 55       	subi	r28, 0x53	; 83
    1f96:	df 4f       	sbci	r29, 0xFF	; 255
    1f98:	e8 81       	ld	r30, Y
    1f9a:	f9 81       	ldd	r31, Y+1	; 0x01
    1f9c:	cd 5a       	subi	r28, 0xAD	; 173
    1f9e:	d0 40       	sbci	r29, 0x00	; 0
    1fa0:	09 95       	icall
    1fa2:	cb 01       	movw	r24, r22
    1fa4:	c1 55       	subi	r28, 0x51	; 81
    1fa6:	df 4f       	sbci	r29, 0xFF	; 255
    1fa8:	e8 81       	ld	r30, Y
    1faa:	f9 81       	ldd	r31, Y+1	; 0x01
    1fac:	cf 5a       	subi	r28, 0xAF	; 175
    1fae:	d0 40       	sbci	r29, 0x00	; 0
    1fb0:	09 95       	icall
				break;
    1fb2:	0f 90       	pop	r0
    1fb4:	0f 90       	pop	r0
    1fb6:	0f 90       	pop	r0
    1fb8:	0f 90       	pop	r0
		};
		lcd0.hspace(3);
    1fba:	83 e0       	ldi	r24, 0x03	; 3
    1fbc:	c5 55       	subi	r28, 0x55	; 85
    1fbe:	df 4f       	sbci	r29, 0xFF	; 255
    1fc0:	e8 81       	ld	r30, Y
    1fc2:	f9 81       	ldd	r31, Y+1	; 0x01
    1fc4:	cb 5a       	subi	r28, 0xAB	; 171
    1fc6:	d0 40       	sbci	r29, 0x00	; 0
    1fc8:	09 95       	icall
		lcd0.string(relogio.show());
    1fca:	2f 96       	adiw	r28, 0x0f	; 15
    1fcc:	6e ac       	ldd	r6, Y+62	; 0x3e
    1fce:	7f ac       	ldd	r7, Y+63	; 0x3f
    1fd0:	2f 97       	sbiw	r28, 0x0f	; 15
    1fd2:	e0 91 24 02 	lds	r30, 0x0224	; 0x800224 <relogio+0x12>
    1fd6:	f0 91 25 02 	lds	r31, 0x0225	; 0x800225 <relogio+0x13>
    1fda:	09 95       	icall
    1fdc:	f3 01       	movw	r30, r6
    1fde:	09 95       	icall
		/***Menu***/
		keychar=keypad.getch();
    1fe0:	6d 96       	adiw	r28, 0x1d	; 29
    1fe2:	ee ad       	ldd	r30, Y+62	; 0x3e
    1fe4:	ff ad       	ldd	r31, Y+63	; 0x3f
    1fe6:	6d 97       	sbiw	r28, 0x1d	; 29
    1fe8:	09 95       	icall
		switch(step){
    1fea:	c9 55       	subi	r28, 0x59	; 89
    1fec:	df 4f       	sbci	r29, 0xFF	; 255
    1fee:	f8 81       	ld	r31, Y
    1ff0:	c7 5a       	subi	r28, 0xA7	; 167
    1ff2:	d0 40       	sbci	r29, 0x00	; 0
    1ff4:	f1 30       	cpi	r31, 0x01	; 1
    1ff6:	41 f1       	breq	.+80     	; 0x2048 <main+0x4a0>
    1ff8:	20 f0       	brcs	.+8      	; 0x2002 <main+0x45a>
    1ffa:	f2 30       	cpi	r31, 0x02	; 2
    1ffc:	09 f4       	brne	.+2      	; 0x2000 <main+0x458>
    1ffe:	72 c0       	rjmp	.+228    	; 0x20e4 <main+0x53c>
    2000:	b2 ce       	rjmp	.-668    	; 0x1d66 <main+0x1be>
    2002:	18 2f       	mov	r17, r24
			case 0:
				lcd0.gotoxy(0,1);
    2004:	61 e0       	ldi	r22, 0x01	; 1
    2006:	70 e0       	ldi	r23, 0x00	; 0
    2008:	80 e0       	ldi	r24, 0x00	; 0
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	f1 01       	movw	r30, r2
    200e:	09 95       	icall
				lcd0.string_size("Menu -> R+1",12);	
    2010:	6c e0       	ldi	r22, 0x0C	; 12
    2012:	85 e3       	ldi	r24, 0x35	; 53
    2014:	91 e0       	ldi	r25, 0x01	; 1
    2016:	c7 55       	subi	r28, 0x57	; 87
    2018:	df 4f       	sbci	r29, 0xFF	; 255
    201a:	e8 81       	ld	r30, Y
    201c:	f9 81       	ldd	r31, Y+1	; 0x01
    201e:	c9 5a       	subi	r28, 0xA9	; 169
    2020:	d0 40       	sbci	r29, 0x00	; 0
    2022:	09 95       	icall
				lcd0.hspace(4);
    2024:	84 e0       	ldi	r24, 0x04	; 4
    2026:	c5 55       	subi	r28, 0x55	; 85
    2028:	df 4f       	sbci	r29, 0xFF	; 255
    202a:	e8 81       	ld	r30, Y
    202c:	f9 81       	ldd	r31, Y+1	; 0x01
    202e:	cb 5a       	subi	r28, 0xAB	; 171
    2030:	d0 40       	sbci	r29, 0x00	; 0
    2032:	09 95       	icall
				switch(keychar){
    2034:	11 35       	cpi	r17, 0x51	; 81
    2036:	09 f0       	breq	.+2      	; 0x203a <main+0x492>
    2038:	92 ce       	rjmp	.-732    	; 0x1d5e <main+0x1b6>
					case 'Q':
						step=1;
    203a:	f1 e0       	ldi	r31, 0x01	; 1
    203c:	c9 55       	subi	r28, 0x59	; 89
    203e:	df 4f       	sbci	r29, 0xFF	; 255
    2040:	f8 83       	st	Y, r31
    2042:	c7 5a       	subi	r28, 0xA7	; 167
    2044:	d0 40       	sbci	r29, 0x00	; 0
    2046:	8b ce       	rjmp	.-746    	; 0x1d5e <main+0x1b6>
    2048:	18 2f       	mov	r17, r24
					break;
				};
				break;
			case 1:
				lcd0.gotoxy(0,1);
    204a:	61 e0       	ldi	r22, 0x01	; 1
    204c:	70 e0       	ldi	r23, 0x00	; 0
    204e:	80 e0       	ldi	r24, 0x00	; 0
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	f1 01       	movw	r30, r2
    2054:	09 95       	icall
				lcd0.string_size("M-1 | A-2 | T-3",15);
    2056:	6f e0       	ldi	r22, 0x0F	; 15
    2058:	81 e4       	ldi	r24, 0x41	; 65
    205a:	91 e0       	ldi	r25, 0x01	; 1
    205c:	c7 55       	subi	r28, 0x57	; 87
    205e:	df 4f       	sbci	r29, 0xFF	; 255
    2060:	e8 81       	ld	r30, Y
    2062:	f9 81       	ldd	r31, Y+1	; 0x01
    2064:	c9 5a       	subi	r28, 0xA9	; 169
    2066:	d0 40       	sbci	r29, 0x00	; 0
    2068:	09 95       	icall
				lcd0.hspace(1);
    206a:	81 e0       	ldi	r24, 0x01	; 1
    206c:	c5 55       	subi	r28, 0x55	; 85
    206e:	df 4f       	sbci	r29, 0xFF	; 255
    2070:	e8 81       	ld	r30, Y
    2072:	f9 81       	ldd	r31, Y+1	; 0x01
    2074:	cb 5a       	subi	r28, 0xAB	; 171
    2076:	d0 40       	sbci	r29, 0x00	; 0
    2078:	09 95       	icall
				switch(keychar){
    207a:	12 33       	cpi	r17, 0x32	; 50
    207c:	01 f1       	breq	.+64     	; 0x20be <main+0x516>
    207e:	13 33       	cpi	r17, 0x33	; 51
    2080:	21 f0       	breq	.+8      	; 0x208a <main+0x4e2>
    2082:	11 33       	cpi	r17, 0x31	; 49
    2084:	09 f0       	breq	.+2      	; 0x2088 <main+0x4e0>
    2086:	6b ce       	rjmp	.-810    	; 0x1d5e <main+0x1b6>
    2088:	07 c0       	rjmp	.+14     	; 0x2098 <main+0x4f0>
						Mode='2';
						step=0;
						keypad.data_clear();
						break;
					case '3':
						step=2;
    208a:	f2 e0       	ldi	r31, 0x02	; 2
    208c:	c9 55       	subi	r28, 0x59	; 89
    208e:	df 4f       	sbci	r29, 0xFF	; 255
    2090:	f8 83       	st	Y, r31
    2092:	c7 5a       	subi	r28, 0xA7	; 167
    2094:	d0 40       	sbci	r29, 0x00	; 0
    2096:	63 ce       	rjmp	.-826    	; 0x1d5e <main+0x1b6>
				lcd0.hspace(1);
				switch(keychar){
					case '1':
						Mode='1';
						step=0;
						keypad.data_clear();
    2098:	c9 54       	subi	r28, 0x49	; 73
    209a:	df 4f       	sbci	r29, 0xFF	; 255
    209c:	e8 81       	ld	r30, Y
    209e:	f9 81       	ldd	r31, Y+1	; 0x01
    20a0:	c7 5b       	subi	r28, 0xB7	; 183
    20a2:	d0 40       	sbci	r29, 0x00	; 0
    20a4:	09 95       	icall
				lcd0.string_size("M-1 | A-2 | T-3",15);
				lcd0.hspace(1);
				switch(keychar){
					case '1':
						Mode='1';
						step=0;
    20a6:	c9 55       	subi	r28, 0x59	; 89
    20a8:	df 4f       	sbci	r29, 0xFF	; 255
    20aa:	18 82       	st	Y, r1
    20ac:	c7 5a       	subi	r28, 0xA7	; 167
    20ae:	d0 40       	sbci	r29, 0x00	; 0
				lcd0.gotoxy(0,1);
				lcd0.string_size("M-1 | A-2 | T-3",15);
				lcd0.hspace(1);
				switch(keychar){
					case '1':
						Mode='1';
    20b0:	f1 e3       	ldi	r31, 0x31	; 49
    20b2:	c8 55       	subi	r28, 0x58	; 88
    20b4:	df 4f       	sbci	r29, 0xFF	; 255
    20b6:	f8 83       	st	Y, r31
    20b8:	c8 5a       	subi	r28, 0xA8	; 168
    20ba:	d0 40       	sbci	r29, 0x00	; 0
						step=0;
						keypad.data_clear();
						break;
    20bc:	50 ce       	rjmp	.-864    	; 0x1d5e <main+0x1b6>
					case '2':
						Mode='2';
						step=0;
						keypad.data_clear();
    20be:	c9 54       	subi	r28, 0x49	; 73
    20c0:	df 4f       	sbci	r29, 0xFF	; 255
    20c2:	e8 81       	ld	r30, Y
    20c4:	f9 81       	ldd	r31, Y+1	; 0x01
    20c6:	c7 5b       	subi	r28, 0xB7	; 183
    20c8:	d0 40       	sbci	r29, 0x00	; 0
    20ca:	09 95       	icall
						step=0;
						keypad.data_clear();
						break;
					case '2':
						Mode='2';
						step=0;
    20cc:	c9 55       	subi	r28, 0x59	; 89
    20ce:	df 4f       	sbci	r29, 0xFF	; 255
    20d0:	18 82       	st	Y, r1
    20d2:	c7 5a       	subi	r28, 0xA7	; 167
    20d4:	d0 40       	sbci	r29, 0x00	; 0
						Mode='1';
						step=0;
						keypad.data_clear();
						break;
					case '2':
						Mode='2';
    20d6:	f2 e3       	ldi	r31, 0x32	; 50
    20d8:	c8 55       	subi	r28, 0x58	; 88
    20da:	df 4f       	sbci	r29, 0xFF	; 255
    20dc:	f8 83       	st	Y, r31
    20de:	c8 5a       	subi	r28, 0xA8	; 168
    20e0:	d0 40       	sbci	r29, 0x00	; 0
						step=0;
						keypad.data_clear();
						break;
    20e2:	3d ce       	rjmp	.-902    	; 0x1d5e <main+0x1b6>
						break;
				};
				break;
			case 2:
				step=0;
				keypad.data_clear();
    20e4:	c9 54       	subi	r28, 0x49	; 73
    20e6:	df 4f       	sbci	r29, 0xFF	; 255
    20e8:	e8 81       	ld	r30, Y
    20ea:	f9 81       	ldd	r31, Y+1	; 0x01
    20ec:	c7 5b       	subi	r28, 0xB7	; 183
    20ee:	d0 40       	sbci	r29, 0x00	; 0
    20f0:	09 95       	icall
						step=2;
						break;
				};
				break;
			case 2:
				step=0;
    20f2:	c9 55       	subi	r28, 0x59	; 89
    20f4:	df 4f       	sbci	r29, 0xFF	; 255
    20f6:	18 82       	st	Y, r1
    20f8:	c7 5a       	subi	r28, 0xA7	; 167
    20fa:	d0 40       	sbci	r29, 0x00	; 0
				keypad.data_clear();
				break;
    20fc:	30 ce       	rjmp	.-928    	; 0x1d5e <main+0x1b6>

000020fe <__vector_15>:
}
/*
** interrupt
*/
ISR(TIMER0_COMP_vect) // TIMER0_COMP_vect used for clock
{
    20fe:	1f 92       	push	r1
    2100:	0f 92       	push	r0
    2102:	0f b6       	in	r0, 0x3f	; 63
    2104:	0f 92       	push	r0
    2106:	11 24       	eor	r1, r1
    2108:	0b b6       	in	r0, 0x3b	; 59
    210a:	0f 92       	push	r0
    210c:	2f 93       	push	r18
    210e:	3f 93       	push	r19
    2110:	4f 93       	push	r20
    2112:	5f 93       	push	r21
    2114:	6f 93       	push	r22
    2116:	7f 93       	push	r23
    2118:	8f 93       	push	r24
    211a:	9f 93       	push	r25
    211c:	af 93       	push	r26
    211e:	bf 93       	push	r27
    2120:	ef 93       	push	r30
    2122:	ff 93       	push	r31
	TIMER0_COMPARE_MATCH++;
    2124:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <TIMER0_COMPARE_MATCH>
    2128:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <TIMER0_COMPARE_MATCH+0x1>
    212c:	01 96       	adiw	r24, 0x01	; 1
	if(TIMER0_COMPARE_MATCH > 999){
    212e:	88 3e       	cpi	r24, 0xE8	; 232
    2130:	23 e0       	ldi	r18, 0x03	; 3
    2132:	92 07       	cpc	r25, r18
    2134:	28 f4       	brcc	.+10     	; 0x2140 <__vector_15+0x42>
/*
** interrupt
*/
ISR(TIMER0_COMP_vect) // TIMER0_COMP_vect used for clock
{
	TIMER0_COMPARE_MATCH++;
    2136:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <TIMER0_COMPARE_MATCH+0x1>
    213a:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <TIMER0_COMPARE_MATCH>
    213e:	09 c0       	rjmp	.+18     	; 0x2152 <__vector_15+0x54>
	if(TIMER0_COMPARE_MATCH > 999){
		TIMER0_COMPARE_MATCH=0;
    2140:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <TIMER0_COMPARE_MATCH+0x1>
    2144:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <TIMER0_COMPARE_MATCH>
		relogio.increment();
    2148:	e0 91 14 02 	lds	r30, 0x0214	; 0x800214 <relogio+0x2>
    214c:	f0 91 15 02 	lds	r31, 0x0215	; 0x800215 <relogio+0x3>
    2150:	09 95       	icall
	}
}
    2152:	ff 91       	pop	r31
    2154:	ef 91       	pop	r30
    2156:	bf 91       	pop	r27
    2158:	af 91       	pop	r26
    215a:	9f 91       	pop	r25
    215c:	8f 91       	pop	r24
    215e:	7f 91       	pop	r23
    2160:	6f 91       	pop	r22
    2162:	5f 91       	pop	r21
    2164:	4f 91       	pop	r20
    2166:	3f 91       	pop	r19
    2168:	2f 91       	pop	r18
    216a:	0f 90       	pop	r0
    216c:	0b be       	out	0x3b, r0	; 59
    216e:	0f 90       	pop	r0
    2170:	0f be       	out	0x3f, r0	; 63
    2172:	0f 90       	pop	r0
    2174:	1f 90       	pop	r1
    2176:	18 95       	reti

00002178 <__mulsi3>:
    2178:	db 01       	movw	r26, r22
    217a:	8f 93       	push	r24
    217c:	9f 93       	push	r25
    217e:	88 d0       	rcall	.+272    	; 0x2290 <__muluhisi3>
    2180:	bf 91       	pop	r27
    2182:	af 91       	pop	r26
    2184:	a2 9f       	mul	r26, r18
    2186:	80 0d       	add	r24, r0
    2188:	91 1d       	adc	r25, r1
    218a:	a3 9f       	mul	r26, r19
    218c:	90 0d       	add	r25, r0
    218e:	b2 9f       	mul	r27, r18
    2190:	90 0d       	add	r25, r0
    2192:	11 24       	eor	r1, r1
    2194:	08 95       	ret

00002196 <__udivmodhi4>:
    2196:	aa 1b       	sub	r26, r26
    2198:	bb 1b       	sub	r27, r27
    219a:	51 e1       	ldi	r21, 0x11	; 17
    219c:	07 c0       	rjmp	.+14     	; 0x21ac <__udivmodhi4_ep>

0000219e <__udivmodhi4_loop>:
    219e:	aa 1f       	adc	r26, r26
    21a0:	bb 1f       	adc	r27, r27
    21a2:	a6 17       	cp	r26, r22
    21a4:	b7 07       	cpc	r27, r23
    21a6:	10 f0       	brcs	.+4      	; 0x21ac <__udivmodhi4_ep>
    21a8:	a6 1b       	sub	r26, r22
    21aa:	b7 0b       	sbc	r27, r23

000021ac <__udivmodhi4_ep>:
    21ac:	88 1f       	adc	r24, r24
    21ae:	99 1f       	adc	r25, r25
    21b0:	5a 95       	dec	r21
    21b2:	a9 f7       	brne	.-22     	; 0x219e <__udivmodhi4_loop>
    21b4:	80 95       	com	r24
    21b6:	90 95       	com	r25
    21b8:	bc 01       	movw	r22, r24
    21ba:	cd 01       	movw	r24, r26
    21bc:	08 95       	ret

000021be <__divmodhi4>:
    21be:	97 fb       	bst	r25, 7
    21c0:	07 2e       	mov	r0, r23
    21c2:	16 f4       	brtc	.+4      	; 0x21c8 <__divmodhi4+0xa>
    21c4:	00 94       	com	r0
    21c6:	06 d0       	rcall	.+12     	; 0x21d4 <__divmodhi4_neg1>
    21c8:	77 fd       	sbrc	r23, 7
    21ca:	08 d0       	rcall	.+16     	; 0x21dc <__divmodhi4_neg2>
    21cc:	e4 df       	rcall	.-56     	; 0x2196 <__udivmodhi4>
    21ce:	07 fc       	sbrc	r0, 7
    21d0:	05 d0       	rcall	.+10     	; 0x21dc <__divmodhi4_neg2>
    21d2:	3e f4       	brtc	.+14     	; 0x21e2 <__divmodhi4_exit>

000021d4 <__divmodhi4_neg1>:
    21d4:	90 95       	com	r25
    21d6:	81 95       	neg	r24
    21d8:	9f 4f       	sbci	r25, 0xFF	; 255
    21da:	08 95       	ret

000021dc <__divmodhi4_neg2>:
    21dc:	70 95       	com	r23
    21de:	61 95       	neg	r22
    21e0:	7f 4f       	sbci	r23, 0xFF	; 255

000021e2 <__divmodhi4_exit>:
    21e2:	08 95       	ret

000021e4 <__udivmodsi4>:
    21e4:	a1 e2       	ldi	r26, 0x21	; 33
    21e6:	1a 2e       	mov	r1, r26
    21e8:	aa 1b       	sub	r26, r26
    21ea:	bb 1b       	sub	r27, r27
    21ec:	fd 01       	movw	r30, r26
    21ee:	0d c0       	rjmp	.+26     	; 0x220a <__udivmodsi4_ep>

000021f0 <__udivmodsi4_loop>:
    21f0:	aa 1f       	adc	r26, r26
    21f2:	bb 1f       	adc	r27, r27
    21f4:	ee 1f       	adc	r30, r30
    21f6:	ff 1f       	adc	r31, r31
    21f8:	a2 17       	cp	r26, r18
    21fa:	b3 07       	cpc	r27, r19
    21fc:	e4 07       	cpc	r30, r20
    21fe:	f5 07       	cpc	r31, r21
    2200:	20 f0       	brcs	.+8      	; 0x220a <__udivmodsi4_ep>
    2202:	a2 1b       	sub	r26, r18
    2204:	b3 0b       	sbc	r27, r19
    2206:	e4 0b       	sbc	r30, r20
    2208:	f5 0b       	sbc	r31, r21

0000220a <__udivmodsi4_ep>:
    220a:	66 1f       	adc	r22, r22
    220c:	77 1f       	adc	r23, r23
    220e:	88 1f       	adc	r24, r24
    2210:	99 1f       	adc	r25, r25
    2212:	1a 94       	dec	r1
    2214:	69 f7       	brne	.-38     	; 0x21f0 <__udivmodsi4_loop>
    2216:	60 95       	com	r22
    2218:	70 95       	com	r23
    221a:	80 95       	com	r24
    221c:	90 95       	com	r25
    221e:	9b 01       	movw	r18, r22
    2220:	ac 01       	movw	r20, r24
    2222:	bd 01       	movw	r22, r26
    2224:	cf 01       	movw	r24, r30
    2226:	08 95       	ret

00002228 <__divmodsi4>:
    2228:	05 2e       	mov	r0, r21
    222a:	97 fb       	bst	r25, 7
    222c:	16 f4       	brtc	.+4      	; 0x2232 <__divmodsi4+0xa>
    222e:	00 94       	com	r0
    2230:	0f d0       	rcall	.+30     	; 0x2250 <__negsi2>
    2232:	57 fd       	sbrc	r21, 7
    2234:	05 d0       	rcall	.+10     	; 0x2240 <__divmodsi4_neg2>
    2236:	d6 df       	rcall	.-84     	; 0x21e4 <__udivmodsi4>
    2238:	07 fc       	sbrc	r0, 7
    223a:	02 d0       	rcall	.+4      	; 0x2240 <__divmodsi4_neg2>
    223c:	46 f4       	brtc	.+16     	; 0x224e <__divmodsi4_exit>
    223e:	08 c0       	rjmp	.+16     	; 0x2250 <__negsi2>

00002240 <__divmodsi4_neg2>:
    2240:	50 95       	com	r21
    2242:	40 95       	com	r20
    2244:	30 95       	com	r19
    2246:	21 95       	neg	r18
    2248:	3f 4f       	sbci	r19, 0xFF	; 255
    224a:	4f 4f       	sbci	r20, 0xFF	; 255
    224c:	5f 4f       	sbci	r21, 0xFF	; 255

0000224e <__divmodsi4_exit>:
    224e:	08 95       	ret

00002250 <__negsi2>:
    2250:	90 95       	com	r25
    2252:	80 95       	com	r24
    2254:	70 95       	com	r23
    2256:	61 95       	neg	r22
    2258:	7f 4f       	sbci	r23, 0xFF	; 255
    225a:	8f 4f       	sbci	r24, 0xFF	; 255
    225c:	9f 4f       	sbci	r25, 0xFF	; 255
    225e:	08 95       	ret

00002260 <__tablejump2__>:
    2260:	ee 0f       	add	r30, r30
    2262:	ff 1f       	adc	r31, r31
    2264:	00 24       	eor	r0, r0
    2266:	00 1c       	adc	r0, r0
    2268:	0b be       	out	0x3b, r0	; 59
    226a:	07 90       	elpm	r0, Z+
    226c:	f6 91       	elpm	r31, Z
    226e:	e0 2d       	mov	r30, r0
    2270:	09 94       	ijmp

00002272 <__umulhisi3>:
    2272:	a2 9f       	mul	r26, r18
    2274:	b0 01       	movw	r22, r0
    2276:	b3 9f       	mul	r27, r19
    2278:	c0 01       	movw	r24, r0
    227a:	a3 9f       	mul	r26, r19
    227c:	70 0d       	add	r23, r0
    227e:	81 1d       	adc	r24, r1
    2280:	11 24       	eor	r1, r1
    2282:	91 1d       	adc	r25, r1
    2284:	b2 9f       	mul	r27, r18
    2286:	70 0d       	add	r23, r0
    2288:	81 1d       	adc	r24, r1
    228a:	11 24       	eor	r1, r1
    228c:	91 1d       	adc	r25, r1
    228e:	08 95       	ret

00002290 <__muluhisi3>:
    2290:	f0 df       	rcall	.-32     	; 0x2272 <__umulhisi3>
    2292:	a5 9f       	mul	r26, r21
    2294:	90 0d       	add	r25, r0
    2296:	b4 9f       	mul	r27, r20
    2298:	90 0d       	add	r25, r0
    229a:	a4 9f       	mul	r26, r20
    229c:	80 0d       	add	r24, r0
    229e:	91 1d       	adc	r25, r1
    22a0:	11 24       	eor	r1, r1
    22a2:	08 95       	ret

000022a4 <strcpy>:
    22a4:	fb 01       	movw	r30, r22
    22a6:	dc 01       	movw	r26, r24
    22a8:	01 90       	ld	r0, Z+
    22aa:	0d 92       	st	X+, r0
    22ac:	00 20       	and	r0, r0
    22ae:	e1 f7       	brne	.-8      	; 0x22a8 <strcpy+0x4>
    22b0:	08 95       	ret

000022b2 <_exit>:
    22b2:	f8 94       	cli

000022b4 <__stop_program>:
    22b4:	ff cf       	rjmp	.-2      	; 0x22b4 <__stop_program>
