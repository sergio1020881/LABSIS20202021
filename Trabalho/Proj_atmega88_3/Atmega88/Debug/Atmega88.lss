
Atmega88.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000000f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000009e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000000f2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000124  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000160  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000772  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006db  00000000  00000000  00000902  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ee  00000000  00000000  00000fdd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000012cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b9  00000000  00000000  00001310  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000a7  00000000  00000000  000016c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001770  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	20 c0       	rjmp	.+64     	; 0x44 <__bad_interrupt>
   4:	1f c0       	rjmp	.+62     	; 0x44 <__bad_interrupt>
   6:	1e c0       	rjmp	.+60     	; 0x44 <__bad_interrupt>
   8:	1d c0       	rjmp	.+58     	; 0x44 <__bad_interrupt>
   a:	1c c0       	rjmp	.+56     	; 0x44 <__bad_interrupt>
   c:	1b c0       	rjmp	.+54     	; 0x44 <__bad_interrupt>
   e:	1a c0       	rjmp	.+52     	; 0x44 <__bad_interrupt>
  10:	19 c0       	rjmp	.+50     	; 0x44 <__bad_interrupt>
  12:	18 c0       	rjmp	.+48     	; 0x44 <__bad_interrupt>
  14:	17 c0       	rjmp	.+46     	; 0x44 <__bad_interrupt>
  16:	16 c0       	rjmp	.+44     	; 0x44 <__bad_interrupt>
  18:	15 c0       	rjmp	.+42     	; 0x44 <__bad_interrupt>
  1a:	14 c0       	rjmp	.+40     	; 0x44 <__bad_interrupt>
  1c:	13 c0       	rjmp	.+38     	; 0x44 <__bad_interrupt>
  1e:	12 c0       	rjmp	.+36     	; 0x44 <__bad_interrupt>
  20:	11 c0       	rjmp	.+34     	; 0x44 <__bad_interrupt>
  22:	10 c0       	rjmp	.+32     	; 0x44 <__bad_interrupt>
  24:	0f c0       	rjmp	.+30     	; 0x44 <__bad_interrupt>
  26:	0e c0       	rjmp	.+28     	; 0x44 <__bad_interrupt>
  28:	0d c0       	rjmp	.+26     	; 0x44 <__bad_interrupt>
  2a:	0c c0       	rjmp	.+24     	; 0x44 <__bad_interrupt>
  2c:	0b c0       	rjmp	.+22     	; 0x44 <__bad_interrupt>
  2e:	0a c0       	rjmp	.+20     	; 0x44 <__bad_interrupt>
  30:	09 c0       	rjmp	.+18     	; 0x44 <__bad_interrupt>
  32:	08 c0       	rjmp	.+16     	; 0x44 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61
  40:	1e d0       	rcall	.+60     	; 0x7e <main>
  42:	2b c0       	rjmp	.+86     	; 0x9a <_exit>

00000044 <__bad_interrupt>:
  44:	dd cf       	rjmp	.-70     	; 0x0 <__vectors>

00000046 <PORTINIT>:
		
    }
}
void PORTINIT()
{
	DDRD = (1<<4); //Serial Data
  46:	80 e1       	ldi	r24, 0x10	; 16
  48:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<5); //Serial Clock
  4a:	55 9a       	sbi	0x0a, 5	; 10
	DDRD |= (1<<7); //Serial Store
  4c:	57 9a       	sbi	0x0a, 7	; 10
	PORTD = ~(1<<4); //Serial Data
  4e:	8f ee       	ldi	r24, 0xEF	; 239
  50:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~(1<<5); //Serial Clock
  52:	5d 98       	cbi	0x0b, 5	; 11
	PORTD &= ~(1<<7); //Serial Store
  54:	5f 98       	cbi	0x0b, 7	; 11
  56:	08 95       	ret

00000058 <shift_bit>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  58:	2f ef       	ldi	r18, 0xFF	; 255
  5a:	30 e7       	ldi	r19, 0x70	; 112
  5c:	92 e0       	ldi	r25, 0x02	; 2
  5e:	21 50       	subi	r18, 0x01	; 1
  60:	30 40       	sbci	r19, 0x00	; 0
  62:	90 40       	sbci	r25, 0x00	; 0
  64:	e1 f7       	brne	.-8      	; 0x5e <shift_bit+0x6>
  66:	00 c0       	rjmp	.+0      	; 0x68 <shift_bit+0x10>
  68:	00 00       	nop
}
void shift_bit(uint8_t bool)
{
	_delay_ms(100);
	if (bool)
  6a:	88 23       	and	r24, r24
  6c:	11 f0       	breq	.+4      	; 0x72 <shift_bit+0x1a>
		PORTD |= (1<<4); //Data Serial in high
  6e:	5c 9a       	sbi	0x0b, 4	; 11
  70:	01 c0       	rjmp	.+2      	; 0x74 <shift_bit+0x1c>
	else
		PORTD &= ~(1<<4); //Data Serial in high
  72:	5c 98       	cbi	0x0b, 4	; 11
	PORTD |= (1<<5); // shift CLOCK input read
  74:	5d 9a       	sbi	0x0b, 5	; 11
	PORTD |= (1<<7); //output clock
  76:	5f 9a       	sbi	0x0b, 7	; 11
	PORTD &= ~(1<<5); //shift CLOCK input disable
  78:	5d 98       	cbi	0x0b, 5	; 11
	PORTD &= ~(1<<7); //output clock
  7a:	5f 98       	cbi	0x0b, 7	; 11
  7c:	08 95       	ret

0000007e <main>:
void shift_bit(uint8_t bool);
/***MAINMAIN***/
int main(void)
{
	uint8_t i;
	PORTINIT();
  7e:	e3 df       	rcall	.-58     	; 0x46 <PORTINIT>
    /* Replace with your application code */
	PORTD &= ~(1<<7); //output clock
  80:	5f 98       	cbi	0x0b, 7	; 11
	PORTD &= ~(1<<5); //shift CLOCK input disable
  82:	5d 98       	cbi	0x0b, 5	; 11
/***Procedure & Function Def***/
void PORTINIT();
void shift_bit(uint8_t bool);
/***MAINMAIN***/
int main(void)
{
  84:	c8 e0       	ldi	r28, 0x08	; 8
	PORTD &= ~(1<<5); //shift CLOCK input disable
    while (TRUE)
    {
		
		for(i=0;i<8;i++)
			shift_bit(1);
  86:	81 e0       	ldi	r24, 0x01	; 1
  88:	e7 df       	rcall	.-50     	; 0x58 <shift_bit>
  8a:	c1 50       	subi	r28, 0x01	; 1
	PORTD &= ~(1<<7); //output clock
	PORTD &= ~(1<<5); //shift CLOCK input disable
    while (TRUE)
    {
		
		for(i=0;i<8;i++)
  8c:	e1 f7       	brne	.-8      	; 0x86 <main+0x8>
  8e:	c8 e0       	ldi	r28, 0x08	; 8
			shift_bit(1);
		 
		for(i=0;i<8;i++)
			shift_bit(0);
  90:	80 e0       	ldi	r24, 0x00	; 0
  92:	e2 df       	rcall	.-60     	; 0x58 <shift_bit>
  94:	c1 50       	subi	r28, 0x01	; 1
    {
		
		for(i=0;i<8;i++)
			shift_bit(1);
		 
		for(i=0;i<8;i++)
  96:	e1 f7       	brne	.-8      	; 0x90 <main+0x12>
  98:	f5 cf       	rjmp	.-22     	; 0x84 <main+0x6>

0000009a <_exit>:
  9a:	f8 94       	cli

0000009c <__stop_program>:
  9c:	ff cf       	rjmp	.-2      	; 0x9c <__stop_program>
