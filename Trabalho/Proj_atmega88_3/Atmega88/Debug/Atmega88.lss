
Atmega88.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000015c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001e0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008da  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000704  00000000  00000000  00000b36  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000366  00000000  00000000  0000123a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b4  00000000  00000000  000015a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e5  00000000  00000000  00001654  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000034a  00000000  00000000  00001a39  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001d83  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	20 c0       	rjmp	.+64     	; 0x44 <__bad_interrupt>
   4:	1f c0       	rjmp	.+62     	; 0x44 <__bad_interrupt>
   6:	1e c0       	rjmp	.+60     	; 0x44 <__bad_interrupt>
   8:	1d c0       	rjmp	.+58     	; 0x44 <__bad_interrupt>
   a:	1c c0       	rjmp	.+56     	; 0x44 <__bad_interrupt>
   c:	1b c0       	rjmp	.+54     	; 0x44 <__bad_interrupt>
   e:	1a c0       	rjmp	.+52     	; 0x44 <__bad_interrupt>
  10:	19 c0       	rjmp	.+50     	; 0x44 <__bad_interrupt>
  12:	18 c0       	rjmp	.+48     	; 0x44 <__bad_interrupt>
  14:	17 c0       	rjmp	.+46     	; 0x44 <__bad_interrupt>
  16:	16 c0       	rjmp	.+44     	; 0x44 <__bad_interrupt>
  18:	15 c0       	rjmp	.+42     	; 0x44 <__bad_interrupt>
  1a:	14 c0       	rjmp	.+40     	; 0x44 <__bad_interrupt>
  1c:	13 c0       	rjmp	.+38     	; 0x44 <__bad_interrupt>
  1e:	12 c0       	rjmp	.+36     	; 0x44 <__bad_interrupt>
  20:	11 c0       	rjmp	.+34     	; 0x44 <__bad_interrupt>
  22:	10 c0       	rjmp	.+32     	; 0x44 <__bad_interrupt>
  24:	0f c0       	rjmp	.+30     	; 0x44 <__bad_interrupt>
  26:	0e c0       	rjmp	.+28     	; 0x44 <__bad_interrupt>
  28:	0d c0       	rjmp	.+26     	; 0x44 <__bad_interrupt>
  2a:	0c c0       	rjmp	.+24     	; 0x44 <__bad_interrupt>
  2c:	0b c0       	rjmp	.+22     	; 0x44 <__bad_interrupt>
  2e:	0a c0       	rjmp	.+20     	; 0x44 <__bad_interrupt>
  30:	09 c0       	rjmp	.+18     	; 0x44 <__bad_interrupt>
  32:	08 c0       	rjmp	.+16     	; 0x44 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61
  40:	73 d0       	rcall	.+230    	; 0x128 <main>
  42:	8a c0       	rjmp	.+276    	; 0x158 <_exit>

00000044 <__bad_interrupt>:
  44:	dd cf       	rjmp	.-70     	; 0x0 <__vectors>

00000046 <PORTINIT>:
	uint8_t i;
	for(i=0;i<8;i++)
		shift_bit(byte & (1<<i), datapin, clkpin);
	PORTD |= (1<<outpin); //Output enable
	PORTD &= ~(1<<outpin); //Output disable
}
  46:	80 e1       	ldi	r24, 0x10	; 16
  48:	8a b9       	out	0x0a, r24	; 10
  4a:	55 9a       	sbi	0x0a, 5	; 10
  4c:	57 9a       	sbi	0x0a, 7	; 10
  4e:	8f ee       	ldi	r24, 0xEF	; 239
  50:	8b b9       	out	0x0b, r24	; 11
  52:	5d 98       	cbi	0x0b, 5	; 11
  54:	5f 98       	cbi	0x0b, 7	; 11
  56:	08 95       	ret

00000058 <shift_bit>:
  58:	2f ef       	ldi	r18, 0xFF	; 255
  5a:	30 e7       	ldi	r19, 0x70	; 112
  5c:	92 e0       	ldi	r25, 0x02	; 2
  5e:	21 50       	subi	r18, 0x01	; 1
  60:	30 40       	sbci	r19, 0x00	; 0
  62:	90 40       	sbci	r25, 0x00	; 0
  64:	e1 f7       	brne	.-8      	; 0x5e <shift_bit+0x6>
  66:	00 c0       	rjmp	.+0      	; 0x68 <shift_bit+0x10>
  68:	00 00       	nop
  6a:	88 23       	and	r24, r24
  6c:	59 f0       	breq	.+22     	; 0x84 <shift_bit+0x2c>
  6e:	2b b1       	in	r18, 0x0b	; 11
  70:	81 e0       	ldi	r24, 0x01	; 1
  72:	90 e0       	ldi	r25, 0x00	; 0
  74:	02 c0       	rjmp	.+4      	; 0x7a <shift_bit+0x22>
  76:	88 0f       	add	r24, r24
  78:	99 1f       	adc	r25, r25
  7a:	6a 95       	dec	r22
  7c:	e2 f7       	brpl	.-8      	; 0x76 <shift_bit+0x1e>
  7e:	82 2b       	or	r24, r18
  80:	8b b9       	out	0x0b, r24	; 11
  82:	0b c0       	rjmp	.+22     	; 0x9a <shift_bit+0x42>
  84:	2b b1       	in	r18, 0x0b	; 11
  86:	81 e0       	ldi	r24, 0x01	; 1
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	02 c0       	rjmp	.+4      	; 0x90 <shift_bit+0x38>
  8c:	88 0f       	add	r24, r24
  8e:	99 1f       	adc	r25, r25
  90:	6a 95       	dec	r22
  92:	e2 f7       	brpl	.-8      	; 0x8c <shift_bit+0x34>
  94:	80 95       	com	r24
  96:	82 23       	and	r24, r18
  98:	8b b9       	out	0x0b, r24	; 11
  9a:	2b b1       	in	r18, 0x0b	; 11
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <shift_bit+0x4e>
  a2:	88 0f       	add	r24, r24
  a4:	99 1f       	adc	r25, r25
  a6:	4a 95       	dec	r20
  a8:	e2 f7       	brpl	.-8      	; 0xa2 <shift_bit+0x4a>
  aa:	92 2f       	mov	r25, r18
  ac:	98 2b       	or	r25, r24
  ae:	9b b9       	out	0x0b, r25	; 11
  b0:	9b b1       	in	r25, 0x0b	; 11
  b2:	80 95       	com	r24
  b4:	89 23       	and	r24, r25
  b6:	8b b9       	out	0x0b, r24	; 11
  b8:	08 95       	ret

000000ba <shift_data>:
void shift_data(uint8_t byte, uint8_t datapin, uint8_t clkpin, uint8_t outpin)
{
  ba:	cf 92       	push	r12
  bc:	df 92       	push	r13
  be:	ef 92       	push	r14
  c0:	ff 92       	push	r15
  c2:	0f 93       	push	r16
  c4:	1f 93       	push	r17
  c6:	cf 93       	push	r28
  c8:	df 93       	push	r29
  ca:	d8 2e       	mov	r13, r24
  cc:	e6 2e       	mov	r14, r22
  ce:	f4 2e       	mov	r15, r20
  d0:	c2 2e       	mov	r12, r18
  d2:	c0 e0       	ldi	r28, 0x00	; 0
  d4:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t i;
	for(i=0;i<8;i++)
		shift_bit(byte & (1<<i), datapin, clkpin);
  d6:	01 e0       	ldi	r16, 0x01	; 1
  d8:	10 e0       	ldi	r17, 0x00	; 0
  da:	c8 01       	movw	r24, r16
  dc:	0c 2e       	mov	r0, r28
  de:	02 c0       	rjmp	.+4      	; 0xe4 <shift_data+0x2a>
  e0:	88 0f       	add	r24, r24
  e2:	99 1f       	adc	r25, r25
  e4:	0a 94       	dec	r0
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <shift_data+0x26>
  e8:	4f 2d       	mov	r20, r15
  ea:	6e 2d       	mov	r22, r14
  ec:	8d 21       	and	r24, r13
  ee:	b4 df       	rcall	.-152    	; 0x58 <shift_bit>
  f0:	21 96       	adiw	r28, 0x01	; 1
	PORTD &= ~(1<<outpin); //Output disable
}
void shift_data(uint8_t byte, uint8_t datapin, uint8_t clkpin, uint8_t outpin)
{
	uint8_t i;
	for(i=0;i<8;i++)
  f2:	c8 30       	cpi	r28, 0x08	; 8
  f4:	d1 05       	cpc	r29, r1
  f6:	89 f7       	brne	.-30     	; 0xda <shift_data+0x20>
		shift_bit(byte & (1<<i), datapin, clkpin);
	PORTD |= (1<<outpin); //Output enable
  f8:	2b b1       	in	r18, 0x0b	; 11
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	02 c0       	rjmp	.+4      	; 0x104 <shift_data+0x4a>
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	ca 94       	dec	r12
 106:	e2 f7       	brpl	.-8      	; 0x100 <shift_data+0x46>
 108:	92 2f       	mov	r25, r18
 10a:	98 2b       	or	r25, r24
 10c:	9b b9       	out	0x0b, r25	; 11
	PORTD &= ~(1<<outpin); //Output disable
 10e:	9b b1       	in	r25, 0x0b	; 11
 110:	80 95       	com	r24
 112:	89 23       	and	r24, r25
 114:	8b b9       	out	0x0b, r24	; 11
}
 116:	df 91       	pop	r29
 118:	cf 91       	pop	r28
 11a:	1f 91       	pop	r17
 11c:	0f 91       	pop	r16
 11e:	ff 90       	pop	r15
 120:	ef 90       	pop	r14
 122:	df 90       	pop	r13
 124:	cf 90       	pop	r12
 126:	08 95       	ret

00000128 <main>:
void shift_data(uint8_t byte, uint8_t datapin, uint8_t clkpin, uint8_t outpin);
/***MAINMAIN***/
int main(void)
{
	//uint8_t i;
	PORTINIT();
 128:	8e df       	rcall	.-228    	; 0x46 <PORTINIT>
    /* Replace with your application code */
	PORTD &= ~(1<<Outpin); //Output clock
 12a:	5f 98       	cbi	0x0b, 7	; 11
	PORTD &= ~(1<<Clkpin); //Shift CLOCK input disable
 12c:	5d 98       	cbi	0x0b, 5	; 11
			//shift_bit(1);
		 
		//for(i=0;i<8;i++)
			//shift_bit(0);
			
		shift_data(85, 4, 5, 7);
 12e:	27 e0       	ldi	r18, 0x07	; 7
 130:	45 e0       	ldi	r20, 0x05	; 5
 132:	64 e0       	ldi	r22, 0x04	; 4
 134:	85 e5       	ldi	r24, 0x55	; 85
 136:	c1 df       	rcall	.-126    	; 0xba <shift_data>
		shift_data(170, 4, 5, 7);
 138:	27 e0       	ldi	r18, 0x07	; 7
 13a:	45 e0       	ldi	r20, 0x05	; 5
 13c:	64 e0       	ldi	r22, 0x04	; 4
 13e:	8a ea       	ldi	r24, 0xAA	; 170
 140:	bc df       	rcall	.-136    	; 0xba <shift_data>
		shift_data(255, 4, 5, 7);
 142:	27 e0       	ldi	r18, 0x07	; 7
 144:	45 e0       	ldi	r20, 0x05	; 5
 146:	64 e0       	ldi	r22, 0x04	; 4
 148:	8f ef       	ldi	r24, 0xFF	; 255
 14a:	b7 df       	rcall	.-146    	; 0xba <shift_data>
		shift_data(0, 4, 5, 7);
 14c:	27 e0       	ldi	r18, 0x07	; 7
 14e:	45 e0       	ldi	r20, 0x05	; 5
 150:	64 e0       	ldi	r22, 0x04	; 4
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	b2 df       	rcall	.-156    	; 0xba <shift_data>
 156:	eb cf       	rjmp	.-42     	; 0x12e <main+0x6>

00000158 <_exit>:
 158:	f8 94       	cli

0000015a <__stop_program>:
 15a:	ff cf       	rjmp	.-2      	; 0x15a <__stop_program>
