
Atmega88.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000019a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000146  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000019a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008bd  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000690  00000000  00000000  00000aed  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003cb  00000000  00000000  0000117d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001548  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b0  00000000  00000000  0000157c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000260  00000000  00000000  0000192c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001b8c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	20 c0       	rjmp	.+64     	; 0x44 <__bad_interrupt>
   4:	1f c0       	rjmp	.+62     	; 0x44 <__bad_interrupt>
   6:	1e c0       	rjmp	.+60     	; 0x44 <__bad_interrupt>
   8:	1d c0       	rjmp	.+58     	; 0x44 <__bad_interrupt>
   a:	1c c0       	rjmp	.+56     	; 0x44 <__bad_interrupt>
   c:	1b c0       	rjmp	.+54     	; 0x44 <__bad_interrupt>
   e:	1a c0       	rjmp	.+52     	; 0x44 <__bad_interrupt>
  10:	19 c0       	rjmp	.+50     	; 0x44 <__bad_interrupt>
  12:	18 c0       	rjmp	.+48     	; 0x44 <__bad_interrupt>
  14:	17 c0       	rjmp	.+46     	; 0x44 <__bad_interrupt>
  16:	16 c0       	rjmp	.+44     	; 0x44 <__bad_interrupt>
  18:	15 c0       	rjmp	.+42     	; 0x44 <__bad_interrupt>
  1a:	14 c0       	rjmp	.+40     	; 0x44 <__bad_interrupt>
  1c:	13 c0       	rjmp	.+38     	; 0x44 <__bad_interrupt>
  1e:	12 c0       	rjmp	.+36     	; 0x44 <__bad_interrupt>
  20:	11 c0       	rjmp	.+34     	; 0x44 <__bad_interrupt>
  22:	10 c0       	rjmp	.+32     	; 0x44 <__bad_interrupt>
  24:	0f c0       	rjmp	.+30     	; 0x44 <__bad_interrupt>
  26:	0e c0       	rjmp	.+28     	; 0x44 <__bad_interrupt>
  28:	0d c0       	rjmp	.+26     	; 0x44 <__bad_interrupt>
  2a:	0c c0       	rjmp	.+24     	; 0x44 <__bad_interrupt>
  2c:	0b c0       	rjmp	.+22     	; 0x44 <__bad_interrupt>
  2e:	0a c0       	rjmp	.+20     	; 0x44 <__bad_interrupt>
  30:	09 c0       	rjmp	.+18     	; 0x44 <__bad_interrupt>
  32:	08 c0       	rjmp	.+16     	; 0x44 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61
  40:	0b d0       	rcall	.+22     	; 0x58 <main>
  42:	7f c0       	rjmp	.+254    	; 0x142 <_exit>

00000044 <__bad_interrupt>:
  44:	dd cf       	rjmp	.-70     	; 0x0 <__vectors>

00000046 <PORTINIT>:
		
    }
}
void PORTINIT()
{
	DDRD = (1<<4); //Serial Data
  46:	80 e1       	ldi	r24, 0x10	; 16
  48:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<5); //Serial Clock
  4a:	55 9a       	sbi	0x0a, 5	; 10
	DDRD |= (1<<7); //Serial Store
  4c:	57 9a       	sbi	0x0a, 7	; 10
	PORTD = ~(1<<4); //Serial Data
  4e:	8f ee       	ldi	r24, 0xEF	; 239
  50:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~(1<<5); //Serial Clock
  52:	5d 98       	cbi	0x0b, 5	; 11
	PORTD &= ~(1<<7); //Serial Store
  54:	5f 98       	cbi	0x0b, 7	; 11
  56:	08 95       	ret

00000058 <main>:
void PORTINIT();
/***MAINMAIN***/
int main(void)
{
	uint8_t count=0;
	PORTINIT();
  58:	f6 df       	rcall	.-20     	; 0x46 <PORTINIT>
    /* Replace with your application code */
	PORTD &= ~(1<<7); //output clock
  5a:	5f 98       	cbi	0x0b, 7	; 11
	PORTD &= ~(1<<5); //shift CLOCK input disable
  5c:	5d 98       	cbi	0x0b, 5	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  5e:	2f ef       	ldi	r18, 0xFF	; 255
  60:	39 e6       	ldi	r19, 0x69	; 105
  62:	88 e1       	ldi	r24, 0x18	; 24
  64:	21 50       	subi	r18, 0x01	; 1
  66:	30 40       	sbci	r19, 0x00	; 0
  68:	80 40       	sbci	r24, 0x00	; 0
  6a:	e1 f7       	brne	.-8      	; 0x64 <main+0xc>
  6c:	00 c0       	rjmp	.+0      	; 0x6e <main+0x16>
  6e:	00 00       	nop
    while (TRUE)
    {	
		while(!count){
		//1
		_delay_ms(1000);
		PORTD = (1<<4); //Data Serial in high
  70:	80 e1       	ldi	r24, 0x10	; 16
  72:	8b b9       	out	0x0b, r24	; 11
		PORTD |= (1<<5); // shift CLOCK input read
  74:	5d 9a       	sbi	0x0b, 5	; 11
		PORTD |= (1<<7); //output clock
  76:	5f 9a       	sbi	0x0b, 7	; 11
		PORTD &= ~(1<<5); //shift CLOCK input disable
  78:	5d 98       	cbi	0x0b, 5	; 11
		PORTD &= ~(1<<7); //output clock
  7a:	5f 98       	cbi	0x0b, 7	; 11
  7c:	9f ef       	ldi	r25, 0xFF	; 255
  7e:	29 e6       	ldi	r18, 0x69	; 105
  80:	38 e1       	ldi	r19, 0x18	; 24
  82:	91 50       	subi	r25, 0x01	; 1
  84:	20 40       	sbci	r18, 0x00	; 0
  86:	30 40       	sbci	r19, 0x00	; 0
  88:	e1 f7       	brne	.-8      	; 0x82 <main+0x2a>
  8a:	00 c0       	rjmp	.+0      	; 0x8c <main+0x34>
  8c:	00 00       	nop
		//2
		_delay_ms(1000);
		PORTD = (1<<4); //Data Serial in high
  8e:	8b b9       	out	0x0b, r24	; 11
		PORTD |= (1<<5); // shift CLOCK input read
  90:	5d 9a       	sbi	0x0b, 5	; 11
		PORTD |= (1<<7); //output clock
  92:	5f 9a       	sbi	0x0b, 7	; 11
		PORTD &= ~(1<<5); //shift CLOCK input disable
  94:	5d 98       	cbi	0x0b, 5	; 11
		PORTD &= ~(1<<7); //output clock
  96:	5f 98       	cbi	0x0b, 7	; 11
  98:	9f ef       	ldi	r25, 0xFF	; 255
  9a:	29 e6       	ldi	r18, 0x69	; 105
  9c:	38 e1       	ldi	r19, 0x18	; 24
  9e:	91 50       	subi	r25, 0x01	; 1
  a0:	20 40       	sbci	r18, 0x00	; 0
  a2:	30 40       	sbci	r19, 0x00	; 0
  a4:	e1 f7       	brne	.-8      	; 0x9e <main+0x46>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <main+0x50>
  a8:	00 00       	nop
		//3
		_delay_ms(1000);
		PORTD = (1<<4); //Data Serial in high
  aa:	8b b9       	out	0x0b, r24	; 11
		PORTD |= (1<<5); // shift CLOCK input read
  ac:	5d 9a       	sbi	0x0b, 5	; 11
		PORTD |= (1<<7); //output clock
  ae:	5f 9a       	sbi	0x0b, 7	; 11
		PORTD &= ~(1<<5); //shift CLOCK input disable
  b0:	5d 98       	cbi	0x0b, 5	; 11
		PORTD &= ~(1<<7); //output clock
  b2:	5f 98       	cbi	0x0b, 7	; 11
  b4:	9f ef       	ldi	r25, 0xFF	; 255
  b6:	29 e6       	ldi	r18, 0x69	; 105
  b8:	38 e1       	ldi	r19, 0x18	; 24
  ba:	91 50       	subi	r25, 0x01	; 1
  bc:	20 40       	sbci	r18, 0x00	; 0
  be:	30 40       	sbci	r19, 0x00	; 0
  c0:	e1 f7       	brne	.-8      	; 0xba <main+0x62>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <main+0x6c>
  c4:	00 00       	nop
		//4
		_delay_ms(1000);
		PORTD = (1<<4); //Data Serial in high
  c6:	8b b9       	out	0x0b, r24	; 11
		PORTD |= (1<<5); // shift CLOCK input read
  c8:	5d 9a       	sbi	0x0b, 5	; 11
		PORTD |= (1<<7); //output clock
  ca:	5f 9a       	sbi	0x0b, 7	; 11
		PORTD &= ~(1<<5); //shift CLOCK input disable
  cc:	5d 98       	cbi	0x0b, 5	; 11
		PORTD &= ~(1<<7); //output clock
  ce:	5f 98       	cbi	0x0b, 7	; 11
  d0:	9f ef       	ldi	r25, 0xFF	; 255
  d2:	29 e6       	ldi	r18, 0x69	; 105
  d4:	38 e1       	ldi	r19, 0x18	; 24
  d6:	91 50       	subi	r25, 0x01	; 1
  d8:	20 40       	sbci	r18, 0x00	; 0
  da:	30 40       	sbci	r19, 0x00	; 0
  dc:	e1 f7       	brne	.-8      	; 0xd6 <main+0x7e>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <main+0x88>
  e0:	00 00       	nop
		//5
		_delay_ms(1000);
		PORTD = (1<<4); //Data Serial in high
  e2:	8b b9       	out	0x0b, r24	; 11
		PORTD |= (1<<5); // shift CLOCK input read
  e4:	5d 9a       	sbi	0x0b, 5	; 11
		PORTD |= (1<<7); //output clock
  e6:	5f 9a       	sbi	0x0b, 7	; 11
		PORTD &= ~(1<<5); //shift CLOCK input disable
  e8:	5d 98       	cbi	0x0b, 5	; 11
		PORTD &= ~(1<<7); //output clock
  ea:	5f 98       	cbi	0x0b, 7	; 11
  ec:	9f ef       	ldi	r25, 0xFF	; 255
  ee:	29 e6       	ldi	r18, 0x69	; 105
  f0:	38 e1       	ldi	r19, 0x18	; 24
  f2:	91 50       	subi	r25, 0x01	; 1
  f4:	20 40       	sbci	r18, 0x00	; 0
  f6:	30 40       	sbci	r19, 0x00	; 0
  f8:	e1 f7       	brne	.-8      	; 0xf2 <main+0x9a>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <main+0xa4>
  fc:	00 00       	nop
		//6
		_delay_ms(1000);
		PORTD = (1<<4); //Data Serial in high
  fe:	8b b9       	out	0x0b, r24	; 11
		PORTD |= (1<<5); // shift CLOCK input read
 100:	5d 9a       	sbi	0x0b, 5	; 11
		PORTD |= (1<<7); //output clock
 102:	5f 9a       	sbi	0x0b, 7	; 11
		PORTD &= ~(1<<5); //shift CLOCK input disable
 104:	5d 98       	cbi	0x0b, 5	; 11
		PORTD &= ~(1<<7); //output clock
 106:	5f 98       	cbi	0x0b, 7	; 11
 108:	9f ef       	ldi	r25, 0xFF	; 255
 10a:	29 e6       	ldi	r18, 0x69	; 105
 10c:	38 e1       	ldi	r19, 0x18	; 24
 10e:	91 50       	subi	r25, 0x01	; 1
 110:	20 40       	sbci	r18, 0x00	; 0
 112:	30 40       	sbci	r19, 0x00	; 0
 114:	e1 f7       	brne	.-8      	; 0x10e <main+0xb6>
 116:	00 c0       	rjmp	.+0      	; 0x118 <main+0xc0>
 118:	00 00       	nop
		//7
		_delay_ms(1000);
		PORTD = (1<<4); //Data Serial in high
 11a:	8b b9       	out	0x0b, r24	; 11
		PORTD |= (1<<5); // shift CLOCK input read
 11c:	5d 9a       	sbi	0x0b, 5	; 11
		PORTD |= (1<<7); //output clock
 11e:	5f 9a       	sbi	0x0b, 7	; 11
		PORTD &= ~(1<<5); //shift CLOCK input disable
 120:	5d 98       	cbi	0x0b, 5	; 11
		PORTD &= ~(1<<7); //output clock
 122:	5f 98       	cbi	0x0b, 7	; 11
 124:	9f ef       	ldi	r25, 0xFF	; 255
 126:	29 e6       	ldi	r18, 0x69	; 105
 128:	38 e1       	ldi	r19, 0x18	; 24
 12a:	91 50       	subi	r25, 0x01	; 1
 12c:	20 40       	sbci	r18, 0x00	; 0
 12e:	30 40       	sbci	r19, 0x00	; 0
 130:	e1 f7       	brne	.-8      	; 0x12a <main+0xd2>
 132:	00 c0       	rjmp	.+0      	; 0x134 <main+0xdc>
 134:	00 00       	nop
		//8
		_delay_ms(1000);
		PORTD = (1<<4); //Data Serial in high
 136:	8b b9       	out	0x0b, r24	; 11
		PORTD |= (1<<5); // shift CLOCK input read
 138:	5d 9a       	sbi	0x0b, 5	; 11
		PORTD |= (1<<7); //output clock
 13a:	5f 9a       	sbi	0x0b, 7	; 11
		PORTD &= ~(1<<5); //shift CLOCK input disable
 13c:	5d 98       	cbi	0x0b, 5	; 11
		PORTD &= ~(1<<7); //output clock
 13e:	5f 98       	cbi	0x0b, 7	; 11
 140:	ff cf       	rjmp	.-2      	; 0x140 <main+0xe8>

00000142 <_exit>:
 142:	f8 94       	cli

00000144 <__stop_program>:
 144:	ff cf       	rjmp	.-2      	; 0x144 <__stop_program>
