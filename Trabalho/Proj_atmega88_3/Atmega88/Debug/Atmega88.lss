
Atmega88.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000176  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001ca  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001fc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000864  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000706  00000000  00000000  00000ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000329  00000000  00000000  000011da  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000008c  00000000  00000000  00001504  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003da  00000000  00000000  00001590  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000202  00000000  00000000  0000196a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001b6c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	20 c0       	rjmp	.+64     	; 0x44 <__bad_interrupt>
   4:	1f c0       	rjmp	.+62     	; 0x44 <__bad_interrupt>
   6:	1e c0       	rjmp	.+60     	; 0x44 <__bad_interrupt>
   8:	1d c0       	rjmp	.+58     	; 0x44 <__bad_interrupt>
   a:	1c c0       	rjmp	.+56     	; 0x44 <__bad_interrupt>
   c:	1b c0       	rjmp	.+54     	; 0x44 <__bad_interrupt>
   e:	1a c0       	rjmp	.+52     	; 0x44 <__bad_interrupt>
  10:	19 c0       	rjmp	.+50     	; 0x44 <__bad_interrupt>
  12:	18 c0       	rjmp	.+48     	; 0x44 <__bad_interrupt>
  14:	17 c0       	rjmp	.+46     	; 0x44 <__bad_interrupt>
  16:	16 c0       	rjmp	.+44     	; 0x44 <__bad_interrupt>
  18:	15 c0       	rjmp	.+42     	; 0x44 <__bad_interrupt>
  1a:	14 c0       	rjmp	.+40     	; 0x44 <__bad_interrupt>
  1c:	13 c0       	rjmp	.+38     	; 0x44 <__bad_interrupt>
  1e:	12 c0       	rjmp	.+36     	; 0x44 <__bad_interrupt>
  20:	11 c0       	rjmp	.+34     	; 0x44 <__bad_interrupt>
  22:	10 c0       	rjmp	.+32     	; 0x44 <__bad_interrupt>
  24:	0f c0       	rjmp	.+30     	; 0x44 <__bad_interrupt>
  26:	0e c0       	rjmp	.+28     	; 0x44 <__bad_interrupt>
  28:	0d c0       	rjmp	.+26     	; 0x44 <__bad_interrupt>
  2a:	0c c0       	rjmp	.+24     	; 0x44 <__bad_interrupt>
  2c:	0b c0       	rjmp	.+22     	; 0x44 <__bad_interrupt>
  2e:	0a c0       	rjmp	.+20     	; 0x44 <__bad_interrupt>
  30:	09 c0       	rjmp	.+18     	; 0x44 <__bad_interrupt>
  32:	08 c0       	rjmp	.+16     	; 0x44 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61
  40:	80 d0       	rcall	.+256    	; 0x142 <main>
  42:	97 c0       	rjmp	.+302    	; 0x172 <_exit>

00000044 <__bad_interrupt>:
  44:	dd cf       	rjmp	.-70     	; 0x0 <__vectors>

00000046 <PORTINIT>:
			
    }
}
void PORTINIT()
{
	DDRD = (1<<Datapin); //Serial Data
  46:	80 e1       	ldi	r24, 0x10	; 16
  48:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<Clkpin); //Serial Clock
  4a:	55 9a       	sbi	0x0a, 5	; 10
	DDRD |= (1<<Outpin); //Serial Store
  4c:	57 9a       	sbi	0x0a, 7	; 10
	PORTD = ~(1<<Datapin); //Serial Data
  4e:	8f ee       	ldi	r24, 0xEF	; 239
  50:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~(1<<Clkpin); //Serial Clock
  52:	5d 98       	cbi	0x0b, 5	; 11
	PORTD &= ~(1<<Outpin); //Serial Store
  54:	5f 98       	cbi	0x0b, 7	; 11
  56:	08 95       	ret

00000058 <shift_bit>:
}
void shift_bit(uint8_t bool, uint8_t datapin, uint8_t clkpin)
{
	if (bool)
  58:	88 23       	and	r24, r24
  5a:	59 f0       	breq	.+22     	; 0x72 <shift_bit+0x1a>
		PORTD |= (1<<datapin); //Data bit HIGH
  5c:	2b b1       	in	r18, 0x0b	; 11
  5e:	81 e0       	ldi	r24, 0x01	; 1
  60:	90 e0       	ldi	r25, 0x00	; 0
  62:	02 c0       	rjmp	.+4      	; 0x68 <shift_bit+0x10>
  64:	88 0f       	add	r24, r24
  66:	99 1f       	adc	r25, r25
  68:	6a 95       	dec	r22
  6a:	e2 f7       	brpl	.-8      	; 0x64 <shift_bit+0xc>
  6c:	82 2b       	or	r24, r18
  6e:	8b b9       	out	0x0b, r24	; 11
  70:	0b c0       	rjmp	.+22     	; 0x88 <shift_bit+0x30>
	else
		PORTD &= ~(1<<datapin); //Data bit LOW
  72:	2b b1       	in	r18, 0x0b	; 11
  74:	81 e0       	ldi	r24, 0x01	; 1
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	02 c0       	rjmp	.+4      	; 0x7e <shift_bit+0x26>
  7a:	88 0f       	add	r24, r24
  7c:	99 1f       	adc	r25, r25
  7e:	6a 95       	dec	r22
  80:	e2 f7       	brpl	.-8      	; 0x7a <shift_bit+0x22>
  82:	80 95       	com	r24
  84:	82 23       	and	r24, r18
  86:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1<<clkpin); // Shift bit
  88:	2b b1       	in	r18, 0x0b	; 11
  8a:	81 e0       	ldi	r24, 0x01	; 1
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	02 c0       	rjmp	.+4      	; 0x94 <shift_bit+0x3c>
  90:	88 0f       	add	r24, r24
  92:	99 1f       	adc	r25, r25
  94:	4a 95       	dec	r20
  96:	e2 f7       	brpl	.-8      	; 0x90 <shift_bit+0x38>
  98:	92 2f       	mov	r25, r18
  9a:	98 2b       	or	r25, r24
  9c:	9b b9       	out	0x0b, r25	; 11
	PORTD &= ~(1<<clkpin); //Shift disable
  9e:	9b b1       	in	r25, 0x0b	; 11
  a0:	80 95       	com	r24
  a2:	89 23       	and	r24, r25
  a4:	8b b9       	out	0x0b, r24	; 11
  a6:	08 95       	ret

000000a8 <shift_byte>:
}
void shift_byte(uint8_t byte, uint8_t datapin, uint8_t clkpin, uint8_t outpin)
{
  a8:	9f 92       	push	r9
  aa:	af 92       	push	r10
  ac:	bf 92       	push	r11
  ae:	cf 92       	push	r12
  b0:	df 92       	push	r13
  b2:	ef 92       	push	r14
  b4:	ff 92       	push	r15
  b6:	0f 93       	push	r16
  b8:	1f 93       	push	r17
  ba:	cf 93       	push	r28
  bc:	df 93       	push	r29
  be:	98 2e       	mov	r9, r24
  c0:	a6 2e       	mov	r10, r22
  c2:	b4 2e       	mov	r11, r20
	uint8_t i;
	for(i=0;i<8;i++){
		_delay_ms(100);
		shift_bit(byte & (1<<i), datapin, clkpin);
		PORTD |= (1<<outpin); //Output enable
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	7c 01       	movw	r14, r24
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <shift_byte+0x28>
  cc:	ee 0c       	add	r14, r14
  ce:	ff 1c       	adc	r15, r15
  d0:	2a 95       	dec	r18
  d2:	e2 f7       	brpl	.-8      	; 0xcc <shift_byte+0x24>
  d4:	ce 2c       	mov	r12, r14
		PORTD &= ~(1<<outpin); //Output disable
  d6:	de 2c       	mov	r13, r14
  d8:	d0 94       	com	r13
  da:	c0 e0       	ldi	r28, 0x00	; 0
  dc:	d0 e0       	ldi	r29, 0x00	; 0
void shift_byte(uint8_t byte, uint8_t datapin, uint8_t clkpin, uint8_t outpin)
{
	uint8_t i;
	for(i=0;i<8;i++){
		_delay_ms(100);
		shift_bit(byte & (1<<i), datapin, clkpin);
  de:	01 e0       	ldi	r16, 0x01	; 1
  e0:	10 e0       	ldi	r17, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e2:	2f ef       	ldi	r18, 0xFF	; 255
  e4:	80 e7       	ldi	r24, 0x70	; 112
  e6:	92 e0       	ldi	r25, 0x02	; 2
  e8:	21 50       	subi	r18, 0x01	; 1
  ea:	80 40       	sbci	r24, 0x00	; 0
  ec:	90 40       	sbci	r25, 0x00	; 0
  ee:	e1 f7       	brne	.-8      	; 0xe8 <shift_byte+0x40>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <shift_byte+0x4a>
  f2:	00 00       	nop
  f4:	c8 01       	movw	r24, r16
  f6:	0c 2e       	mov	r0, r28
  f8:	02 c0       	rjmp	.+4      	; 0xfe <shift_byte+0x56>
  fa:	88 0f       	add	r24, r24
  fc:	99 1f       	adc	r25, r25
  fe:	0a 94       	dec	r0
 100:	e2 f7       	brpl	.-8      	; 0xfa <shift_byte+0x52>
 102:	4b 2d       	mov	r20, r11
 104:	6a 2d       	mov	r22, r10
 106:	89 21       	and	r24, r9
 108:	a7 df       	rcall	.-178    	; 0x58 <shift_bit>
		PORTD |= (1<<outpin); //Output enable
 10a:	8b b1       	in	r24, 0x0b	; 11
 10c:	8c 29       	or	r24, r12
 10e:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1<<outpin); //Output disable
 110:	8b b1       	in	r24, 0x0b	; 11
 112:	8d 21       	and	r24, r13
 114:	8b b9       	out	0x0b, r24	; 11
 116:	21 96       	adiw	r28, 0x01	; 1
	PORTD &= ~(1<<clkpin); //Shift disable
}
void shift_byte(uint8_t byte, uint8_t datapin, uint8_t clkpin, uint8_t outpin)
{
	uint8_t i;
	for(i=0;i<8;i++){
 118:	c8 30       	cpi	r28, 0x08	; 8
 11a:	d1 05       	cpc	r29, r1
 11c:	11 f7       	brne	.-60     	; 0xe2 <shift_byte+0x3a>
		_delay_ms(100);
		shift_bit(byte & (1<<i), datapin, clkpin);
		PORTD |= (1<<outpin); //Output enable
		PORTD &= ~(1<<outpin); //Output disable
	}
	PORTD |= (1<<outpin); //Output enable
 11e:	8b b1       	in	r24, 0x0b	; 11
 120:	e8 2a       	or	r14, r24
 122:	eb b8       	out	0x0b, r14	; 11
	PORTD &= ~(1<<outpin); //Output disable
 124:	8b b1       	in	r24, 0x0b	; 11
 126:	d8 22       	and	r13, r24
 128:	db b8       	out	0x0b, r13	; 11
}
 12a:	df 91       	pop	r29
 12c:	cf 91       	pop	r28
 12e:	1f 91       	pop	r17
 130:	0f 91       	pop	r16
 132:	ff 90       	pop	r15
 134:	ef 90       	pop	r14
 136:	df 90       	pop	r13
 138:	cf 90       	pop	r12
 13a:	bf 90       	pop	r11
 13c:	af 90       	pop	r10
 13e:	9f 90       	pop	r9
 140:	08 95       	ret

00000142 <main>:
void shift_byte(uint8_t byte, uint8_t datapin, uint8_t clkpin, uint8_t outpin);
/***MAINMAIN***/
int main(void)
{
	//uint8_t i;
	PORTINIT();
 142:	81 df       	rcall	.-254    	; 0x46 <PORTINIT>
    /* Replace with your application code */
	PORTD &= ~(1<<Outpin); //Output clock
 144:	5f 98       	cbi	0x0b, 7	; 11
	PORTD &= ~(1<<Clkpin); //Shift CLOCK input disable
 146:	5d 98       	cbi	0x0b, 5	; 11
			//shift_bit(1);
		 
		//for(i=0;i<8;i++)
			//shift_bit(0);
			
		shift_byte(85, 4, 5, 7);
 148:	27 e0       	ldi	r18, 0x07	; 7
 14a:	45 e0       	ldi	r20, 0x05	; 5
 14c:	64 e0       	ldi	r22, 0x04	; 4
 14e:	85 e5       	ldi	r24, 0x55	; 85
 150:	ab df       	rcall	.-170    	; 0xa8 <shift_byte>
		shift_byte(170, 4, 5, 7);
 152:	27 e0       	ldi	r18, 0x07	; 7
 154:	45 e0       	ldi	r20, 0x05	; 5
 156:	64 e0       	ldi	r22, 0x04	; 4
 158:	8a ea       	ldi	r24, 0xAA	; 170
 15a:	a6 df       	rcall	.-180    	; 0xa8 <shift_byte>
		shift_byte(255, 4, 5, 7);
 15c:	27 e0       	ldi	r18, 0x07	; 7
 15e:	45 e0       	ldi	r20, 0x05	; 5
 160:	64 e0       	ldi	r22, 0x04	; 4
 162:	8f ef       	ldi	r24, 0xFF	; 255
 164:	a1 df       	rcall	.-190    	; 0xa8 <shift_byte>
		shift_byte(0, 4, 5, 7);
 166:	27 e0       	ldi	r18, 0x07	; 7
 168:	45 e0       	ldi	r20, 0x05	; 5
 16a:	64 e0       	ldi	r22, 0x04	; 4
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	9c df       	rcall	.-200    	; 0xa8 <shift_byte>
 170:	eb cf       	rjmp	.-42     	; 0x148 <main+0x6>

00000172 <_exit>:
 172:	f8 94       	cli

00000174 <__stop_program>:
 174:	ff cf       	rjmp	.-2      	; 0x174 <__stop_program>
