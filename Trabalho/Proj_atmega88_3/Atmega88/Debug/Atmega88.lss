
Atmega88.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000380  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800100  00800100  000003f4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003f4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000424  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000460  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d42  00000000  00000000  000004b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000878  00000000  00000000  000011fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004da  00000000  00000000  00001a72  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000bc  00000000  00000000  00001f4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000453  00000000  00000000  00002008  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000688  00000000  00000000  0000245b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00002ae3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	17 c0       	rjmp	.+46     	; 0x54 <__bad_interrupt>
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
  28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_clear_bss>:
  40:	21 e0       	ldi	r18, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a7 30       	cpi	r26, 0x07	; 7
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	df d0       	rcall	.+446    	; 0x210 <main>
  52:	94 c1       	rjmp	.+808    	; 0x37c <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <HC595_shift_bit>:
	//
	return hc595;
}
void HC595_shift_bit(uint8_t bool)
{
	if (bool)
  56:	88 23       	and	r24, r24
  58:	89 f0       	breq	.+34     	; 0x7c <HC595_shift_bit+0x26>
		*hc595_PORT |= (1<<HC595_datapin); //Data bit HIGH
  5a:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <hc595_PORT>
  5e:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <hc595_PORT+0x1>
  62:	20 81       	ld	r18, Z
  64:	81 e0       	ldi	r24, 0x01	; 1
  66:	90 e0       	ldi	r25, 0x00	; 0
  68:	00 90 04 01 	lds	r0, 0x0104	; 0x800104 <HC595_datapin>
  6c:	02 c0       	rjmp	.+4      	; 0x72 <HC595_shift_bit+0x1c>
  6e:	88 0f       	add	r24, r24
  70:	99 1f       	adc	r25, r25
  72:	0a 94       	dec	r0
  74:	e2 f7       	brpl	.-8      	; 0x6e <HC595_shift_bit+0x18>
  76:	82 2b       	or	r24, r18
  78:	80 83       	st	Z, r24
  7a:	11 c0       	rjmp	.+34     	; 0x9e <HC595_shift_bit+0x48>
	else
		*hc595_PORT &= ~(1<<HC595_datapin); //Data bit LOW
  7c:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <hc595_PORT>
  80:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <hc595_PORT+0x1>
  84:	20 81       	ld	r18, Z
  86:	81 e0       	ldi	r24, 0x01	; 1
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	00 90 04 01 	lds	r0, 0x0104	; 0x800104 <HC595_datapin>
  8e:	02 c0       	rjmp	.+4      	; 0x94 <HC595_shift_bit+0x3e>
  90:	88 0f       	add	r24, r24
  92:	99 1f       	adc	r25, r25
  94:	0a 94       	dec	r0
  96:	e2 f7       	brpl	.-8      	; 0x90 <HC595_shift_bit+0x3a>
  98:	80 95       	com	r24
  9a:	82 23       	and	r24, r18
  9c:	80 83       	st	Z, r24
	*hc595_PORT |= (1<<HC595_clkpin); // Shift bit
  9e:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <hc595_PORT>
  a2:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <hc595_PORT+0x1>
  a6:	40 81       	ld	r20, Z
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	9c 01       	movw	r18, r24
  ae:	00 90 06 01 	lds	r0, 0x0106	; 0x800106 <HC595_clkpin>
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <HC595_shift_bit+0x62>
  b4:	22 0f       	add	r18, r18
  b6:	33 1f       	adc	r19, r19
  b8:	0a 94       	dec	r0
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <HC595_shift_bit+0x5e>
  bc:	24 2b       	or	r18, r20
  be:	20 83       	st	Z, r18
	*hc595_PORT &= ~(1<<HC595_clkpin); //Shift disable
  c0:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <hc595_PORT>
  c4:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <hc595_PORT+0x1>
  c8:	20 81       	ld	r18, Z
  ca:	00 90 06 01 	lds	r0, 0x0106	; 0x800106 <HC595_clkpin>
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <HC595_shift_bit+0x7e>
  d0:	88 0f       	add	r24, r24
  d2:	99 1f       	adc	r25, r25
  d4:	0a 94       	dec	r0
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <HC595_shift_bit+0x7a>
  d8:	80 95       	com	r24
  da:	82 23       	and	r24, r18
  dc:	80 83       	st	Z, r24
  de:	08 95       	ret

000000e0 <HC595_shift_out>:
		HC595_shift_bit(byte & (1<<i));
	HC595_shift_out();
}
void HC595_shift_out(void)
{
	*hc595_PORT |= (1<<HC595_outpin); //Output enable
  e0:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <hc595_PORT>
  e4:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <hc595_PORT+0x1>
  e8:	40 81       	ld	r20, Z
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	9c 01       	movw	r18, r24
  f0:	00 90 05 01 	lds	r0, 0x0105	; 0x800105 <HC595_outpin>
  f4:	02 c0       	rjmp	.+4      	; 0xfa <HC595_shift_out+0x1a>
  f6:	22 0f       	add	r18, r18
  f8:	33 1f       	adc	r19, r19
  fa:	0a 94       	dec	r0
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <HC595_shift_out+0x16>
  fe:	24 2b       	or	r18, r20
 100:	20 83       	st	Z, r18
	*hc595_PORT &= ~(1<<HC595_outpin); //Output disable
 102:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <hc595_PORT>
 106:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <hc595_PORT+0x1>
 10a:	20 81       	ld	r18, Z
 10c:	00 90 05 01 	lds	r0, 0x0105	; 0x800105 <HC595_outpin>
 110:	02 c0       	rjmp	.+4      	; 0x116 <HC595_shift_out+0x36>
 112:	88 0f       	add	r24, r24
 114:	99 1f       	adc	r25, r25
 116:	0a 94       	dec	r0
 118:	e2 f7       	brpl	.-8      	; 0x112 <HC595_shift_out+0x32>
 11a:	80 95       	com	r24
 11c:	82 23       	and	r24, r18
 11e:	80 83       	st	Z, r24
 120:	08 95       	ret

00000122 <HC595_shift_byte>:
		*hc595_PORT &= ~(1<<HC595_datapin); //Data bit LOW
	*hc595_PORT |= (1<<HC595_clkpin); // Shift bit
	*hc595_PORT &= ~(1<<HC595_clkpin); //Shift disable
}
void HC595_shift_byte(uint8_t byte)
{
 122:	ff 92       	push	r15
 124:	0f 93       	push	r16
 126:	1f 93       	push	r17
 128:	cf 93       	push	r28
 12a:	df 93       	push	r29
 12c:	f8 2e       	mov	r15, r24
 12e:	c0 e0       	ldi	r28, 0x00	; 0
 130:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t i;
	for(i=0;i<8;i++)
		HC595_shift_bit(byte & (1<<i));
 132:	01 e0       	ldi	r16, 0x01	; 1
 134:	10 e0       	ldi	r17, 0x00	; 0
 136:	c8 01       	movw	r24, r16
 138:	0c 2e       	mov	r0, r28
 13a:	02 c0       	rjmp	.+4      	; 0x140 <HC595_shift_byte+0x1e>
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	0a 94       	dec	r0
 142:	e2 f7       	brpl	.-8      	; 0x13c <HC595_shift_byte+0x1a>
 144:	8f 21       	and	r24, r15
 146:	87 df       	rcall	.-242    	; 0x56 <HC595_shift_bit>
 148:	21 96       	adiw	r28, 0x01	; 1
	*hc595_PORT &= ~(1<<HC595_clkpin); //Shift disable
}
void HC595_shift_byte(uint8_t byte)
{
	uint8_t i;
	for(i=0;i<8;i++)
 14a:	c8 30       	cpi	r28, 0x08	; 8
 14c:	d1 05       	cpc	r29, r1
 14e:	99 f7       	brne	.-26     	; 0x136 <HC595_shift_byte+0x14>
		HC595_shift_bit(byte & (1<<i));
	HC595_shift_out();
 150:	c7 df       	rcall	.-114    	; 0xe0 <HC595_shift_out>
}
 152:	df 91       	pop	r29
 154:	cf 91       	pop	r28
 156:	1f 91       	pop	r17
 158:	0f 91       	pop	r16
 15a:	ff 90       	pop	r15
 15c:	08 95       	ret

0000015e <HC595enable>:
void HC595_shift_out(void);
/*
** procedure and function
*/
HC595 HC595enable(volatile uint8_t *ddr, volatile uint8_t *port, uint8_t datapin, uint8_t clkpin, uint8_t outpin)
{
 15e:	0f 93       	push	r16
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
 164:	00 d0       	rcall	.+0      	; 0x166 <HC595enable+0x8>
 166:	00 d0       	rcall	.+0      	; 0x168 <HC595enable+0xa>
 168:	00 d0       	rcall	.+0      	; 0x16a <HC595enable+0xc>
 16a:	cd b7       	in	r28, 0x3d	; 61
 16c:	de b7       	in	r29, 0x3e	; 62
	//LOCAL VARIABLES
	uint8_t tSREG;
	tSREG=SREG;
 16e:	5f b7       	in	r21, 0x3f	; 63
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
 170:	3f b7       	in	r19, 0x3f	; 63
 172:	3f 77       	andi	r19, 0x7F	; 127
 174:	3f bf       	out	0x3f, r19	; 63
	//ALLOCAÇÂO MEMORIA PARA Estrutura
	HC595 hc595;
	//import parametros
	hc595_DDR=ddr;
 176:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 17a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	hc595_PORT=port;
 17e:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <hc595_PORT+0x1>
 182:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <hc595_PORT>
	HC595_datapin=datapin; 
 186:	40 93 04 01 	sts	0x0104, r20	; 0x800104 <HC595_datapin>
	HC595_clkpin=clkpin; 
 18a:	20 93 06 01 	sts	0x0106, r18	; 0x800106 <HC595_clkpin>
	HC595_outpin=outpin;
 18e:	00 93 05 01 	sts	0x0105, r16	; 0x800105 <HC595_outpin>
	//inic variables
    *hc595_DDR |= (1<<datapin) | (1<<clkpin) | (1<<outpin);
 192:	fc 01       	movw	r30, r24
 194:	30 81       	ld	r19, Z
 196:	61 e0       	ldi	r22, 0x01	; 1
 198:	70 e0       	ldi	r23, 0x00	; 0
 19a:	db 01       	movw	r26, r22
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <HC595enable+0x44>
 19e:	aa 0f       	add	r26, r26
 1a0:	bb 1f       	adc	r27, r27
 1a2:	2a 95       	dec	r18
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <HC595enable+0x40>
 1a6:	fb 01       	movw	r30, r22
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <HC595enable+0x50>
 1aa:	ee 0f       	add	r30, r30
 1ac:	ff 1f       	adc	r31, r31
 1ae:	0a 95       	dec	r16
 1b0:	e2 f7       	brpl	.-8      	; 0x1aa <HC595enable+0x4c>
 1b2:	ea 2b       	or	r30, r26
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <HC595enable+0x5c>
 1b6:	66 0f       	add	r22, r22
 1b8:	77 1f       	adc	r23, r23
 1ba:	4a 95       	dec	r20
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <HC595enable+0x58>
 1be:	6e 2b       	or	r22, r30
 1c0:	23 2f       	mov	r18, r19
 1c2:	26 2b       	or	r18, r22
 1c4:	fc 01       	movw	r30, r24
 1c6:	20 83       	st	Z, r18
	*hc595_PORT &= ~((1<<datapin) | (1<<clkpin) | (1<<outpin));
 1c8:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <hc595_PORT>
 1cc:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <hc595_PORT+0x1>
 1d0:	80 81       	ld	r24, Z
 1d2:	60 95       	com	r22
 1d4:	68 23       	and	r22, r24
 1d6:	60 83       	st	Z, r22
	//Direccionar apontadores para PROTOTIPOS
	hc595.bit=HC595_shift_bit;
	hc595.byte=HC595_shift_byte;
	hc595.out=HC595_shift_out;
	SREG=tSREG;
 1d8:	5f bf       	out	0x3f, r21	; 63
	//
	return hc595;
 1da:	2b e2       	ldi	r18, 0x2B	; 43
 1dc:	30 e0       	ldi	r19, 0x00	; 0
 1de:	3a 83       	std	Y+2, r19	; 0x02
 1e0:	29 83       	std	Y+1, r18	; 0x01
 1e2:	41 e9       	ldi	r20, 0x91	; 145
 1e4:	50 e0       	ldi	r21, 0x00	; 0
 1e6:	5c 83       	std	Y+4, r21	; 0x04
 1e8:	4b 83       	std	Y+3, r20	; 0x03
 1ea:	60 e7       	ldi	r22, 0x70	; 112
 1ec:	70 e0       	ldi	r23, 0x00	; 0
 1ee:	7e 83       	std	Y+6, r23	; 0x06
 1f0:	6d 83       	std	Y+5, r22	; 0x05
 1f2:	3a 81       	ldd	r19, Y+2	; 0x02
 1f4:	5c 81       	ldd	r21, Y+4	; 0x04
 1f6:	7e 81       	ldd	r23, Y+6	; 0x06
}
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	26 96       	adiw	r28, 0x06	; 6
 1fe:	0f b6       	in	r0, 0x3f	; 63
 200:	f8 94       	cli
 202:	de bf       	out	0x3e, r29	; 62
 204:	0f be       	out	0x3f, r0	; 63
 206:	cd bf       	out	0x3d, r28	; 61
 208:	df 91       	pop	r29
 20a:	cf 91       	pop	r28
 20c:	0f 91       	pop	r16
 20e:	08 95       	ret

00000210 <main>:
#define ZERO 0
/***Global Variable***/
/***Procedure & Function Def***/
/***MAINMAIN***/
int main(void)
{
 210:	cf 93       	push	r28
 212:	df 93       	push	r29
 214:	00 d0       	rcall	.+0      	; 0x216 <main+0x6>
 216:	00 d0       	rcall	.+0      	; 0x218 <main+0x8>
 218:	00 d0       	rcall	.+0      	; 0x21a <main+0xa>
 21a:	cd b7       	in	r28, 0x3d	; 61
 21c:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;
	//Local Variables
	HC595 shift = HC595enable(&DDRD,&PORTD,4,5,7);
 21e:	07 e0       	ldi	r16, 0x07	; 7
 220:	25 e0       	ldi	r18, 0x05	; 5
 222:	44 e0       	ldi	r20, 0x04	; 4
 224:	6b e2       	ldi	r22, 0x2B	; 43
 226:	70 e0       	ldi	r23, 0x00	; 0
 228:	8a e2       	ldi	r24, 0x2A	; 42
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	98 df       	rcall	.-208    	; 0x15e <HC595enable>
 22e:	29 83       	std	Y+1, r18	; 0x01
 230:	3a 83       	std	Y+2, r19	; 0x02
 232:	4b 83       	std	Y+3, r20	; 0x03
 234:	5c 83       	std	Y+4, r21	; 0x04
 236:	6d 83       	std	Y+5, r22	; 0x05
 238:	7e 83       	std	Y+6, r23	; 0x06
 23a:	a9 80       	ldd	r10, Y+1	; 0x01
 23c:	ba 80       	ldd	r11, Y+2	; 0x02
 23e:	eb 80       	ldd	r14, Y+3	; 0x03
 240:	fc 80       	ldd	r15, Y+4	; 0x04
 242:	cd 80       	ldd	r12, Y+5	; 0x05
 244:	de 80       	ldd	r13, Y+6	; 0x06
#define ZERO 0
/***Global Variable***/
/***Procedure & Function Def***/
/***MAINMAIN***/
int main(void)
{
 246:	18 e0       	ldi	r17, 0x08	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 248:	2f ef       	ldi	r18, 0xFF	; 255
 24a:	80 e7       	ldi	r24, 0x70	; 112
 24c:	92 e0       	ldi	r25, 0x02	; 2
 24e:	21 50       	subi	r18, 0x01	; 1
 250:	80 40       	sbci	r24, 0x00	; 0
 252:	90 40       	sbci	r25, 0x00	; 0
 254:	e1 f7       	brne	.-8      	; 0x24e <main+0x3e>
 256:	00 c0       	rjmp	.+0      	; 0x258 <main+0x48>
 258:	00 00       	nop
    /* Replace with your application code */
    while (TRUE)
    {
		for(i=0;i<8;i++){
			_delay_ms(100);
			shift.bit(1);
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	f5 01       	movw	r30, r10
 25e:	09 95       	icall
			shift.out();
 260:	f6 01       	movw	r30, r12
 262:	09 95       	icall
 264:	11 50       	subi	r17, 0x01	; 1
	//Local Variables
	HC595 shift = HC595enable(&DDRD,&PORTD,4,5,7);
    /* Replace with your application code */
    while (TRUE)
    {
		for(i=0;i<8;i++){
 266:	81 f7       	brne	.-32     	; 0x248 <main+0x38>
 268:	18 e0       	ldi	r17, 0x08	; 8
 26a:	ff ef       	ldi	r31, 0xFF	; 255
 26c:	20 e7       	ldi	r18, 0x70	; 112
 26e:	82 e0       	ldi	r24, 0x02	; 2
 270:	f1 50       	subi	r31, 0x01	; 1
 272:	20 40       	sbci	r18, 0x00	; 0
 274:	80 40       	sbci	r24, 0x00	; 0
 276:	e1 f7       	brne	.-8      	; 0x270 <main+0x60>
 278:	00 c0       	rjmp	.+0      	; 0x27a <main+0x6a>
 27a:	00 00       	nop
			shift.bit(1);
			shift.out();
		}
		for(i=0;i<8;i++){
			_delay_ms(100);
			shift.bit(0);
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	f5 01       	movw	r30, r10
 280:	09 95       	icall
			shift.out();
 282:	f6 01       	movw	r30, r12
 284:	09 95       	icall
 286:	11 50       	subi	r17, 0x01	; 1
		for(i=0;i<8;i++){
			_delay_ms(100);
			shift.bit(1);
			shift.out();
		}
		for(i=0;i<8;i++){
 288:	81 f7       	brne	.-32     	; 0x26a <main+0x5a>
 28a:	ff ef       	ldi	r31, 0xFF	; 255
 28c:	29 e6       	ldi	r18, 0x69	; 105
 28e:	88 e1       	ldi	r24, 0x18	; 24
 290:	f1 50       	subi	r31, 0x01	; 1
 292:	20 40       	sbci	r18, 0x00	; 0
 294:	80 40       	sbci	r24, 0x00	; 0
 296:	e1 f7       	brne	.-8      	; 0x290 <main+0x80>
 298:	00 c0       	rjmp	.+0      	; 0x29a <main+0x8a>
 29a:	00 00       	nop
			_delay_ms(100);
			shift.bit(0);
			shift.out();
		}
		_delay_ms(1000);
		shift.byte(3);
 29c:	83 e0       	ldi	r24, 0x03	; 3
 29e:	f7 01       	movw	r30, r14
 2a0:	09 95       	icall
 2a2:	ff ef       	ldi	r31, 0xFF	; 255
 2a4:	29 e6       	ldi	r18, 0x69	; 105
 2a6:	88 e1       	ldi	r24, 0x18	; 24
 2a8:	f1 50       	subi	r31, 0x01	; 1
 2aa:	20 40       	sbci	r18, 0x00	; 0
 2ac:	80 40       	sbci	r24, 0x00	; 0
 2ae:	e1 f7       	brne	.-8      	; 0x2a8 <main+0x98>
 2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <main+0xa2>
 2b2:	00 00       	nop
		_delay_ms(1000);
		shift.byte(12);
 2b4:	8c e0       	ldi	r24, 0x0C	; 12
 2b6:	f7 01       	movw	r30, r14
 2b8:	09 95       	icall
 2ba:	ff ef       	ldi	r31, 0xFF	; 255
 2bc:	29 e6       	ldi	r18, 0x69	; 105
 2be:	88 e1       	ldi	r24, 0x18	; 24
 2c0:	f1 50       	subi	r31, 0x01	; 1
 2c2:	20 40       	sbci	r18, 0x00	; 0
 2c4:	80 40       	sbci	r24, 0x00	; 0
 2c6:	e1 f7       	brne	.-8      	; 0x2c0 <main+0xb0>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <main+0xba>
 2ca:	00 00       	nop
		_delay_ms(1000);
		shift.byte(48);
 2cc:	80 e3       	ldi	r24, 0x30	; 48
 2ce:	f7 01       	movw	r30, r14
 2d0:	09 95       	icall
 2d2:	ff ef       	ldi	r31, 0xFF	; 255
 2d4:	29 e6       	ldi	r18, 0x69	; 105
 2d6:	88 e1       	ldi	r24, 0x18	; 24
 2d8:	f1 50       	subi	r31, 0x01	; 1
 2da:	20 40       	sbci	r18, 0x00	; 0
 2dc:	80 40       	sbci	r24, 0x00	; 0
 2de:	e1 f7       	brne	.-8      	; 0x2d8 <main+0xc8>
 2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <main+0xd2>
 2e2:	00 00       	nop
		_delay_ms(1000);
		shift.byte(192);
 2e4:	80 ec       	ldi	r24, 0xC0	; 192
 2e6:	f7 01       	movw	r30, r14
 2e8:	09 95       	icall
 2ea:	ff ef       	ldi	r31, 0xFF	; 255
 2ec:	29 e6       	ldi	r18, 0x69	; 105
 2ee:	88 e1       	ldi	r24, 0x18	; 24
 2f0:	f1 50       	subi	r31, 0x01	; 1
 2f2:	20 40       	sbci	r18, 0x00	; 0
 2f4:	80 40       	sbci	r24, 0x00	; 0
 2f6:	e1 f7       	brne	.-8      	; 0x2f0 <main+0xe0>
 2f8:	00 c0       	rjmp	.+0      	; 0x2fa <main+0xea>
 2fa:	00 00       	nop
		_delay_ms(1000);
		shift.byte(48);
 2fc:	80 e3       	ldi	r24, 0x30	; 48
 2fe:	f7 01       	movw	r30, r14
 300:	09 95       	icall
 302:	ff ef       	ldi	r31, 0xFF	; 255
 304:	29 e6       	ldi	r18, 0x69	; 105
 306:	88 e1       	ldi	r24, 0x18	; 24
 308:	f1 50       	subi	r31, 0x01	; 1
 30a:	20 40       	sbci	r18, 0x00	; 0
 30c:	80 40       	sbci	r24, 0x00	; 0
 30e:	e1 f7       	brne	.-8      	; 0x308 <main+0xf8>
 310:	00 c0       	rjmp	.+0      	; 0x312 <main+0x102>
 312:	00 00       	nop
		_delay_ms(1000);
		shift.byte(12);
 314:	8c e0       	ldi	r24, 0x0C	; 12
 316:	f7 01       	movw	r30, r14
 318:	09 95       	icall
 31a:	ff ef       	ldi	r31, 0xFF	; 255
 31c:	29 e6       	ldi	r18, 0x69	; 105
 31e:	88 e1       	ldi	r24, 0x18	; 24
 320:	f1 50       	subi	r31, 0x01	; 1
 322:	20 40       	sbci	r18, 0x00	; 0
 324:	80 40       	sbci	r24, 0x00	; 0
 326:	e1 f7       	brne	.-8      	; 0x320 <main+0x110>
 328:	00 c0       	rjmp	.+0      	; 0x32a <main+0x11a>
 32a:	00 00       	nop
		_delay_ms(1000);
		shift.byte(3);
 32c:	83 e0       	ldi	r24, 0x03	; 3
 32e:	f7 01       	movw	r30, r14
 330:	09 95       	icall
 332:	ff ef       	ldi	r31, 0xFF	; 255
 334:	29 e6       	ldi	r18, 0x69	; 105
 336:	88 e1       	ldi	r24, 0x18	; 24
 338:	f1 50       	subi	r31, 0x01	; 1
 33a:	20 40       	sbci	r18, 0x00	; 0
 33c:	80 40       	sbci	r24, 0x00	; 0
 33e:	e1 f7       	brne	.-8      	; 0x338 <main+0x128>
 340:	00 c0       	rjmp	.+0      	; 0x342 <main+0x132>
 342:	00 00       	nop
		_delay_ms(1000);
		shift.byte(24);
 344:	88 e1       	ldi	r24, 0x18	; 24
 346:	f7 01       	movw	r30, r14
 348:	09 95       	icall
 34a:	ff ef       	ldi	r31, 0xFF	; 255
 34c:	29 e6       	ldi	r18, 0x69	; 105
 34e:	88 e1       	ldi	r24, 0x18	; 24
 350:	f1 50       	subi	r31, 0x01	; 1
 352:	20 40       	sbci	r18, 0x00	; 0
 354:	80 40       	sbci	r24, 0x00	; 0
 356:	e1 f7       	brne	.-8      	; 0x350 <main+0x140>
 358:	00 c0       	rjmp	.+0      	; 0x35a <main+0x14a>
 35a:	00 00       	nop
		_delay_ms(1000);
		for(i=0;i<255;i++){
			shift.byte(i);
 35c:	81 2f       	mov	r24, r17
 35e:	f7 01       	movw	r30, r14
 360:	09 95       	icall
 362:	ff e7       	ldi	r31, 0x7F	; 127
 364:	28 e3       	ldi	r18, 0x38	; 56
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	f1 50       	subi	r31, 0x01	; 1
 36a:	20 40       	sbci	r18, 0x00	; 0
 36c:	80 40       	sbci	r24, 0x00	; 0
 36e:	e1 f7       	brne	.-8      	; 0x368 <main+0x158>
 370:	00 c0       	rjmp	.+0      	; 0x372 <main+0x162>
 372:	00 00       	nop
		_delay_ms(1000);
		shift.byte(3);
		_delay_ms(1000);
		shift.byte(24);
		_delay_ms(1000);
		for(i=0;i<255;i++){
 374:	1f 5f       	subi	r17, 0xFF	; 255
 376:	1f 3f       	cpi	r17, 0xFF	; 255
 378:	89 f7       	brne	.-30     	; 0x35c <main+0x14c>
 37a:	65 cf       	rjmp	.-310    	; 0x246 <main+0x36>

0000037c <_exit>:
 37c:	f8 94       	cli

0000037e <__stop_program>:
 37e:	ff cf       	rjmp	.-2      	; 0x37e <__stop_program>
